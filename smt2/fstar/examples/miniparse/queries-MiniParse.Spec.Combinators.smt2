
; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(set-option :global-decls false)
(set-option :smt.mbqi false)
(set-option :auto_config false)
(set-option :produce-unsat-cores true)
(set-option :model true)
(set-option :smt.case_split 3)
(set-option :smt.relevancy 2)
(set-option :smt.arith.solver 2)


(declare-sort FString)
(declare-fun FString_constr_id (FString) Int)

(declare-sort Term)
(declare-fun Term_constr_id (Term) Int)
(declare-sort Dummy_sort)
(declare-fun Dummy_value () Dummy_sort)
(declare-datatypes () ((Fuel 
(ZFuel) 
(SFuel (prec Fuel)))))
(declare-fun MaxIFuel () Fuel)
(declare-fun MaxFuel () Fuel)
(declare-fun PreType (Term) Term)
(declare-fun Valid (Term) Bool)
(declare-fun HasTypeFuel (Fuel Term Term) Bool)
(define-fun HasTypeZ ((x Term) (t Term)) Bool
(HasTypeFuel ZFuel x t))
(define-fun HasType ((x Term) (t Term)) Bool
(HasTypeFuel MaxIFuel x t))
(declare-fun IsTotFun (Term) Bool)

                ;;fuel irrelevance
(assert (forall ((f Fuel) (x Term) (t Term))
(! (= (HasTypeFuel (SFuel f) x t)
(HasTypeZ x t))
:pattern ((HasTypeFuel (SFuel f) x t)))))
(declare-fun NoHoist (Term Bool) Bool)
;;no-hoist
(assert (forall ((dummy Term) (b Bool))
(! (= (NoHoist dummy b)
b)
:pattern ((NoHoist dummy b)))))
(define-fun  IsTyped ((x Term)) Bool
(exists ((t Term)) (HasTypeZ x t)))
(declare-fun ApplyTF (Term Fuel) Term)
(declare-fun ApplyTT (Term Term) Term)
(declare-fun Prec (Term Term) Bool)
(assert (forall ((x Term) (y Term) (z Term))
(! (implies (and (Prec x y) (Prec y z))
(Prec x z))
                                   :pattern ((Prec x z) (Prec x y)))))
(assert (forall ((x Term) (y Term))
(implies (Prec x y)
(not (Prec y x)))))
(declare-fun Closure (Term) Term)
(declare-fun ConsTerm (Term Term) Term)
(declare-fun ConsFuel (Fuel Term) Term)
(declare-fun Tm_uvar (Int) Term)
(define-fun Reify ((x Term)) Term x)
(declare-fun Prims.precedes (Term Term Term Term) Term)
(declare-fun Range_const (Int) Term)
(declare-fun _mul (Int Int) Int)
(declare-fun _div (Int Int) Int)
(declare-fun _mod (Int Int) Int)
(declare-fun __uu__PartialApp () Term)
(assert (forall ((x Int) (y Int)) (! (= (_mul x y) (* x y)) :pattern ((_mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (_div x y) (div x y)) :pattern ((_div x y)))))
(assert (forall ((x Int) (y Int)) (! (= (_mod x y) (mod x y)) :pattern ((_mod x y)))))
(declare-fun _rmul (Real Real) Real)
(declare-fun _rdiv (Real Real) Real)
(assert (forall ((x Real) (y Real)) (! (= (_rmul x y) (* x y)) :pattern ((_rmul x y)))))
(assert (forall ((x Real) (y Real)) (! (= (_rdiv x y) (/ x y)) :pattern ((_rdiv x y)))))
(define-fun Unreachable () Bool false)
; <start constructor FString_const>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FString_const (Int) FString)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 0
(FString_constr_id (FString_const @u0)))
 

:pattern ((FString_const @u0))
:qid constructor_distinct_FString_const))
:named constructor_distinct_FString_const))
;;;;;;;;;;;;;;;;Projector
(declare-fun FString_const_proj_0 (FString) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (FString_const_proj_0 (FString_const @u0))
@u0)
 

:pattern ((FString_const @u0))
:qid projection_inverse_FString_const_proj_0))
:named projection_inverse_FString_const_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FString_const ((__@u0 FString)) Bool
 (and (= (FString_constr_id __@u0)
0)
(= __@u0
(FString_const (FString_const_proj_0 __@u0)))))

; </end constructor FString_const>


; <start constructor Tm_type>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_type () Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (= 2
(Term_constr_id Tm_type))
:named constructor_distinct_Tm_type))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_type ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
2)
(= __@x0
Tm_type)))

; </end constructor Tm_type>


; <start constructor Tm_arrow>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_arrow (Int) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 3
(Term_constr_id (Tm_arrow @u0)))
 

:pattern ((Tm_arrow @u0))
:qid constructor_distinct_Tm_arrow))
:named constructor_distinct_Tm_arrow))
;;;;;;;;;;;;;;;;Projector
(declare-fun Tm_arrow_id (Term) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (Tm_arrow_id (Tm_arrow @u0))
@u0)
 

:pattern ((Tm_arrow @u0))
:qid projection_inverse_Tm_arrow_id))
:named projection_inverse_Tm_arrow_id))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_arrow ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
3)
(= __@x0
(Tm_arrow (Tm_arrow_id __@x0)))))

; </end constructor Tm_arrow>


; <start constructor Tm_unit>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_unit () Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (= 6
(Term_constr_id Tm_unit))
:named constructor_distinct_Tm_unit))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_unit ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
6)
(= __@x0
Tm_unit)))

; </end constructor Tm_unit>


; <start constructor BoxInt>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxInt (Int) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 7
(Term_constr_id (BoxInt @u0)))
 

:pattern ((BoxInt @u0))
:qid constructor_distinct_BoxInt))
:named constructor_distinct_BoxInt))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxInt_proj_0 (Term) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (BoxInt_proj_0 (BoxInt @u0))
@u0)
 

:pattern ((BoxInt @u0))
:qid projection_inverse_BoxInt_proj_0))
:named projection_inverse_BoxInt_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxInt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
7)
(= __@x0
(BoxInt (BoxInt_proj_0 __@x0)))))

; </end constructor BoxInt>


; <start constructor BoxBool>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxBool (Bool) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Bool))
 (! (= 8
(Term_constr_id (BoxBool @u0)))
 

:pattern ((BoxBool @u0))
:qid constructor_distinct_BoxBool))
:named constructor_distinct_BoxBool))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxBool_proj_0 (Term) Bool)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Bool))
 (! (= (BoxBool_proj_0 (BoxBool @u0))
@u0)
 

:pattern ((BoxBool @u0))
:qid projection_inverse_BoxBool_proj_0))
:named projection_inverse_BoxBool_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxBool ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
8)
(= __@x0
(BoxBool (BoxBool_proj_0 __@x0)))))

; </end constructor BoxBool>


; <start constructor BoxString>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxString (FString) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 FString))
 (! (= 9
(Term_constr_id (BoxString @u0)))
 

:pattern ((BoxString @u0))
:qid constructor_distinct_BoxString))
:named constructor_distinct_BoxString))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxString_proj_0 (Term) FString)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 FString))
 (! (= (BoxString_proj_0 (BoxString @u0))
@u0)
 

:pattern ((BoxString @u0))
:qid projection_inverse_BoxString_proj_0))
:named projection_inverse_BoxString_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxString ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
9)
(= __@x0
(BoxString (BoxString_proj_0 __@x0)))))

; </end constructor BoxString>


; <start constructor BoxReal>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxReal (Real) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Real))
 (! (= 10
(Term_constr_id (BoxReal @u0)))
 

:pattern ((BoxReal @u0))
:qid constructor_distinct_BoxReal))
:named constructor_distinct_BoxReal))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxReal_proj_0 (Term) Real)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Real))
 (! (= (BoxReal_proj_0 (BoxReal @u0))
@u0)
 

:pattern ((BoxReal @u0))
:qid projection_inverse_BoxReal_proj_0))
:named projection_inverse_BoxReal_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxReal ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
10)
(= __@x0
(BoxReal (BoxReal_proj_0 __@x0)))))

; </end constructor BoxReal>

(declare-fun Prims.precedes@tok () Term)
(assert
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
(! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.precedes@tok
@x0)
@x1)
@x2)
@x3)
(Prims.precedes @x0 @x1 @x2 @x3))

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.precedes@tok
@x0)
@x1)
@x2)
@x3)))))

(declare-fun Prims.lex_t () Term)
(assert (forall ((t1 Term) (t2 Term) (e1 Term) (e2 Term))
(! (iff (Valid (Prims.precedes t1 t2 e1 e2))
(Valid (Prims.precedes Prims.lex_t Prims.lex_t e1 e2)))
:pattern (Prims.precedes t1 t2 e1 e2))))
(assert (forall ((t1 Term) (t2 Term))
(! (iff (Valid (Prims.precedes Prims.lex_t Prims.lex_t t1 t2)) 
(Prec t1 t2))
:pattern ((Prims.precedes Prims.lex_t Prims.lex_t t1 t2)))))
(assert (forall ((e Term) (t Term))
(! (implies (HasType e t)
(Valid t))
:pattern ((HasType e t)
(Valid t))
:qid __prelude_valid_intro)))


; Externals for module Prims


; <Start encoding val Prims.attribute>

(declare-fun Prims.attribute () Term)

; </end encoding val Prims.attribute>


; <Start encoding val Prims.cps>

(declare-fun Prims.cps () Term)

; </end encoding val Prims.cps>


; <Start encoding val Prims.tac_opaque>

(declare-fun Prims.tac_opaque () Term)

; </end encoding val Prims.tac_opaque>


; <Start encoding val Prims.unrefine>

(declare-fun Prims.unrefine () Term)

; </end encoding val Prims.unrefine>


; <Start encoding val Prims.do_not_unrefine>

(declare-fun Prims.do_not_unrefine () Term)

; </end encoding val Prims.do_not_unrefine>


; <Start encoding val Prims.hasEq>

(declare-fun Prims.hasEq (Term) Term)
(declare-fun Tm_arrow_ef9cb512a25ee351fa5536d617490497 () Term)
(declare-fun Prims.hasEq@tok () Term)

; </end encoding val Prims.hasEq>


; <Start encoding let eqtype>

(declare-fun Prims.eqtype () Term)
(declare-fun Tm_refine_414d0a9f578ab0048252f8c8f552b99f () Term)

; </end encoding let eqtype>


; <Start encoding val Prims.bool>

(declare-fun Prims.bool () Term)

; </end encoding val Prims.bool>


; <Start encoding type Prims.empty>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.empty () Term)

; <start constructor Prims.empty>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.empty ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
111)
(= __@x0
Prims.empty)))

; </end constructor Prims.empty>


; </end encoding type Prims.empty>


; <Start encoding type Prims.trivial>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.trivial () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.T () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.T
(declare-fun Prims.T@tok () Term)

; <start constructor Prims.trivial>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.trivial ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
116)
(= __@x0
Prims.trivial)))

; </end constructor Prims.trivial>


; <start constructor Prims.T>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.T ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
122)
(= __@x0
Prims.T)))

; </end constructor Prims.T>


; </end encoding type Prims.trivial>


; <Start encoding val Prims.uu___is_T>

(declare-fun Prims.uu___is_T (Term) Term)
(declare-fun Tm_arrow_053f01f066524059a49c5dc621e6494a () Term)
(declare-fun Prims.uu___is_T@tok () Term)

; </end encoding val Prims.uu___is_T>


; <Start encoding val Prims.unit>

(declare-fun Prims.unit () Term)

; </end encoding val Prims.unit>


; <Start encoding let squash>

(declare-fun Prims.squash (Term) Term)

(declare-fun Prims.squash@tok () Term)
(declare-fun Tm_refine_2de20c066034c13bf76e9c0b94f4806c (Term) Term)

; </end encoding let squash>


; <Start encoding let auto_squash>

(declare-fun Prims.auto_squash (Term) Term)

(declare-fun Prims.auto_squash@tok () Term)

; </end encoding let auto_squash>


; <Start encoding let logical>

(declare-fun Prims.logical () Term)

; </end encoding let logical>


; <Start encoding val Prims.smt_theory_symbol>

(declare-fun Prims.smt_theory_symbol () Term)

; </end encoding val Prims.smt_theory_symbol>


; <Start encoding let l_True>

(declare-fun Prims.l_True () Term)

; </end encoding let l_True>


; <Start encoding let l_False>

(declare-fun Prims.l_False () Term)

; </end encoding let l_False>


; <Start encoding type Prims.equals>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.equals (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.equals@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Refl (Term Term) Term)
;;;;;;;;;;;;;;;;Constructor base
(declare-fun Prims.Refl@base () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Refl
(declare-fun Prims.Refl@tok () Term)
(declare-fun Tm_arrow_8e00c6263684633abbc1d1a87608e391 () Term)

; <start constructor Prims.equals>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.equals ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
134)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(Prims.equals @x0
@x1
@x2))
 
;;no pats
:qid is-Prims.equals))))

; </end constructor Prims.equals>


; <start constructor Prims.Refl>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Refl ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
141)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.Refl @x0
@x1))
 
;;no pats
:qid is-Prims.Refl))))

; </end constructor Prims.Refl>


; </end encoding type Prims.equals>


; <Start encoding val Prims.uu___is_Refl>

(declare-fun Prims.uu___is_Refl (Term Term Term Term) Term)
(declare-fun Tm_arrow_2a4540f76c8969717ea911077d7b4d15 () Term)
(declare-fun Prims.uu___is_Refl@tok () Term)

; </end encoding val Prims.uu___is_Refl>


; <Start encoding let eq2>

(declare-fun Prims.eq2 (Term Term Term) Term)
(declare-fun Tm_arrow_1ec40cec1da281b45a559c74dd57f3b7 () Term)
(declare-fun Prims.eq2@tok () Term)

; </end encoding let eq2>


; <Start encoding let b2t>

(declare-fun Prims.b2t (Term) Term)

; </end encoding let b2t>


; <Start encoding type Prims.pair>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.pair (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.pair@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Pair (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Pair
(declare-fun Prims.Pair@tok () Term)
(declare-fun Tm_arrow_e2b0096073073582c70f249d40f91c5d () Term)

; <start constructor Prims.pair>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.pair ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
150)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.pair @x0
@x1))
 
;;no pats
:qid is-Prims.pair))))

; </end constructor Prims.pair>


; <start constructor Prims.Pair>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Pair ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
157)
(= __@x0
(Prims.Pair (Prims.Pair_p __@x0)
(Prims.Pair_q __@x0)
(Prims.Pair__1 __@x0)
(Prims.Pair__2 __@x0)))))

; </end constructor Prims.Pair>


; </end encoding type Prims.pair>


; <Start encoding val Prims.uu___is_Pair>

(declare-fun Prims.uu___is_Pair (Term Term Term) Term)
(declare-fun Tm_arrow_0a519c999e1325381ee4c9b1d93a06b2 () Term)
(declare-fun Prims.uu___is_Pair@tok () Term)

; </end encoding val Prims.uu___is_Pair>


; <Start encoding val Prims.__proj__Pair__item___1>

(declare-fun Prims.__proj__Pair__item___1 (Term Term Term) Term)
(declare-fun Tm_arrow_214b45775d1504fb2699ff0d156b6857 () Term)
(declare-fun Prims.__proj__Pair__item___1@tok () Term)

; </end encoding val Prims.__proj__Pair__item___1>


; <Start encoding val Prims.__proj__Pair__item___2>

(declare-fun Prims.__proj__Pair__item___2 (Term Term Term) Term)
(declare-fun Tm_arrow_1b97dbe8f5eb289f51cc2556690371e3 () Term)
(declare-fun Prims.__proj__Pair__item___2@tok () Term)

; </end encoding val Prims.__proj__Pair__item___2>


; <Start encoding let l_and>

(declare-fun Prims.l_and (Term Term) Term)
(declare-fun Tm_arrow_289ee2cc5874944bf725b9e3db8c0fd6 () Term)
(declare-fun Prims.l_and@tok () Term)

; </end encoding let l_and>


; <Start encoding type Prims.sum>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.sum (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.sum@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Left
(declare-fun Prims.Left@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Right
(declare-fun Prims.Right@tok () Term)
(declare-fun Tm_arrow_4ef073c03ed003774fe6ccb4064aeebd () Term)
(declare-fun Tm_arrow_c537ccd7fef2183d55f1a6960ee793b0 () Term)

; <start constructor Prims.sum>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.sum ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
169)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.sum @x0
@x1))
 
;;no pats
:qid is-Prims.sum))))

; </end constructor Prims.sum>


; <start constructor Prims.Left>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Left ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
176)
(= __@x0
(Prims.Left (Prims.Left_p __@x0)
(Prims.Left_q __@x0)
(Prims.Left_v __@x0)))))

; </end constructor Prims.Left>


; <start constructor Prims.Right>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Right ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
181)
(= __@x0
(Prims.Right (Prims.Right_p __@x0)
(Prims.Right_q __@x0)
(Prims.Right_v __@x0)))))

; </end constructor Prims.Right>


; </end encoding type Prims.sum>


; <Start encoding val Prims.uu___is_Left>

(declare-fun Prims.uu___is_Left (Term Term Term) Term)
(declare-fun Tm_arrow_3c254c463840bdea2ca63f23cf7c2f0c () Term)
(declare-fun Prims.uu___is_Left@tok () Term)

; </end encoding val Prims.uu___is_Left>


; <Start encoding val Prims.__proj__Left__item__v>

(declare-fun Tm_refine_6140be01a70b18051829f178aaf0270b (Term Term) Term)
(declare-fun Prims.__proj__Left__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_aaf070885513892396497eef726adce1 () Term)
(declare-fun Prims.__proj__Left__item__v@tok () Term)

; </end encoding val Prims.__proj__Left__item__v>


; <Start encoding val Prims.uu___is_Right>

(declare-fun Prims.uu___is_Right (Term Term Term) Term)

(declare-fun Prims.uu___is_Right@tok () Term)

; </end encoding val Prims.uu___is_Right>


; <Start encoding val Prims.__proj__Right__item__v>

(declare-fun Tm_refine_43ea5cf89e866ce271f97bd6ce102588 (Term Term) Term)
(declare-fun Prims.__proj__Right__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_4ae0e7dd85e55aec7e8190dea6e3997f () Term)
(declare-fun Prims.__proj__Right__item__v@tok () Term)

; </end encoding val Prims.__proj__Right__item__v>


; <Start encoding let l_or>

(declare-fun Prims.l_or (Term Term) Term)

(declare-fun Prims.l_or@tok () Term)

; </end encoding let l_or>


; <Start encoding let l_imp>

(declare-fun Prims.l_imp (Term Term) Term)

(declare-fun Prims.l_imp@tok () Term)
(declare-fun Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a (Term Term) Term)

; </end encoding let l_imp>


; <Start encoding let l_iff>

(declare-fun Prims.l_iff (Term Term) Term)

(declare-fun Prims.l_iff@tok () Term)

; </end encoding let l_iff>


; <Start encoding let l_not>

(declare-fun Prims.l_not (Term) Term)
(declare-fun Tm_arrow_8178e3b6934aa50ea45bb0ccea2d9711 () Term)
(declare-fun Prims.l_not@tok () Term)

; </end encoding let l_not>


; <Skipped let l_ITE/>


; <Skipped val Prims.precedes/>


; <Start encoding val Prims.string>

(declare-fun Prims.string () Term)

; </end encoding val Prims.string>


; <Start encoding val Prims.warn_on_use>

(declare-fun Prims.warn_on_use (Term) Term)
(declare-fun Tm_arrow_2863eb88d7490a9c3cf347c16ca04740 () Term)
(declare-fun Prims.warn_on_use@tok () Term)

; </end encoding val Prims.warn_on_use>


; <Start encoding val Prims.deprecated>

(declare-fun Prims.deprecated (Term) Term)

(declare-fun Prims.deprecated@tok () Term)

; </end encoding val Prims.deprecated>


; <Start encoding val Prims.has_type>

(declare-fun Prims.has_type (Term Term Term) Term)
(declare-fun Tm_arrow_b5d8ed0243b8c7c893f2b329de57c62b () Term)
(declare-fun Prims.has_type@tok () Term)

; </end encoding val Prims.has_type>


; <Start encoding let l_Forall>

(declare-fun Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da (Term) Term)
(declare-fun Prims.l_Forall (Term Term) Term)

(declare-fun Tm_arrow_977ec6901669a051ac66211b8e72666a () Term)
(declare-fun Prims.l_Forall@tok () Term)

(declare-fun Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f (Term Term) Term)

; </end encoding let l_Forall>


; <Skipped #push-options "--warn_error -288"/>


; <Start encoding let subtype_of>

(declare-fun Prims.subtype_of (Term Term) Term)
(declare-fun Tm_arrow_28becc0427b69ebf63ea956148504d97 () Term)
(declare-fun Prims.subtype_of@tok () Term)

; </end encoding let subtype_of>


; <Skipped #pop-options/>


; <Start encoding let prop>

(declare-fun Prims.prop () Term)
(declare-fun Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf () Term)

; </end encoding let prop>


; <Start encoding let pure_pre>

(declare-fun Prims.pure_pre () Term)

; </end encoding let pure_pre>


; <Start encoding let pure_post'>

(declare-fun Prims.pure_post_ (Term Term) Term)
(declare-fun Tm_arrow_e4cf09589736facd1137944a1f5a00a6 () Term)
(declare-fun Prims.pure_post_@tok () Term)
(declare-fun Tm_refine_8d65e998a07dd53ec478e27017d9dba5 (Term Term) Term)
(declare-fun Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 (Term Term) Term)

; </end encoding let pure_post'>


; <Start encoding let pure_post>

(declare-fun Prims.pure_post (Term) Term)

(declare-fun Prims.pure_post@tok () Term)

; </end encoding let pure_post>


; <Start encoding let pure_wp'>

(declare-fun Prims.pure_wp_ (Term) Term)

(declare-fun Prims.pure_wp_@tok () Term)
(declare-fun Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4 (Term) Term)

; </end encoding let pure_wp'>


; <Start encoding let pure_wp_monotonic0>

(declare-fun Prims.pure_wp_monotonic0 (Term Term) Term)
(declare-fun Tm_arrow_85436e2c1c64a4dd0159a737ef5b212e () Term)
(declare-fun Prims.pure_wp_monotonic0@tok () Term)

; </end encoding let pure_wp_monotonic0>


; <Start encoding let pure_wp_monotonic>

(declare-fun Prims.pure_wp_monotonic (Term Term) Term)

(declare-fun Prims.pure_wp_monotonic@tok () Term)

; </end encoding let pure_wp_monotonic>


; <Start encoding let pure_wp>

(declare-fun Prims.pure_wp (Term) Term)

(declare-fun Prims.pure_wp@tok () Term)
(declare-fun Tm_refine_15e0beb75f7033bad5fae236999feebe (Term) Term)

; </end encoding let pure_wp>


; <Start encoding val Prims.guard_free>

(declare-fun Prims.guard_free (Term) Term)

(declare-fun Prims.guard_free@tok () Term)

; </end encoding val Prims.guard_free>


; <Skipped let pure_return0/>


; <Skipped let pure_bind_wp0/>


; <Skipped let pure_if_then_else0/>


; <Skipped let pure_ite_wp0/>


; <Skipped let pure_stronger/>


; <Skipped let pure_close_wp0/>


; <Skipped let pure_trivial/>


; <Skipped new_effect { PURE ... }/>


; <Skipped effect Pure a pre post = Prims.PURE a/>


; <Skipped effect Admit a = Prims.PURE a/>


; <Skipped let pure_null_wp0/>


; <Skipped effect Tot a = Prims.PURE a/>


; <Start encoding let pure_assert_wp0>

(declare-fun Prims.pure_assert_wp0 (Term) Term)
(declare-fun Tm_arrow_14bcf5e7fc38d91827ecd9d25d3b3a67 () Term)
(declare-fun Prims.pure_assert_wp0@tok () Term)

; </end encoding let pure_assert_wp0>


; <Start encoding let pure_assume_wp0>

(declare-fun Prims.pure_assume_wp0 (Term) Term)

(declare-fun Prims.pure_assume_wp0@tok () Term)

; </end encoding let pure_assume_wp0>


; <Skipped new_effect { GHOST ... }/>


; <Skipped let purewp_id/>


; <Skipped sub_effect PURE ~> GHOST/>


; <Skipped effect Ghost a pre post = Prims.GHOST a/>


; <Skipped effect GTot a = Prims.GHOST a/>


; <Start encoding let op_Equals_Equals_Equals>

(declare-fun Prims.op_Equals_Equals_Equals (Term Term Term Term) Term)
(declare-fun Tm_arrow_7fcb145b23c2ac843afd9b126c4f71a9 () Term)
(declare-fun Prims.op_Equals_Equals_Equals@tok () Term)

; </end encoding let op_Equals_Equals_Equals>


; <Start encoding type Prims.dtuple2>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.dtuple2 (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.dtuple2@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Mkdtuple2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Mkdtuple2
(declare-fun Prims.Mkdtuple2@tok () Term)



(declare-fun Tm_arrow_22a50f5c5c9bb74bac4384fb8999be8b () Term)

; <start constructor Prims.dtuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.dtuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
258)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.dtuple2 @x0
@x1))
 
;;no pats
:qid is-Prims.dtuple2))))

; </end constructor Prims.dtuple2>


; <start constructor Prims.Mkdtuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Mkdtuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
267)
(= __@x0
(Prims.Mkdtuple2 (Prims.Mkdtuple2_a __@x0)
(Prims.Mkdtuple2_b __@x0)
(Prims.Mkdtuple2__1 __@x0)
(Prims.Mkdtuple2__2 __@x0)))))

; </end constructor Prims.Mkdtuple2>


; </end encoding type Prims.dtuple2>


; <Start encoding assume Prims.dtuple2__uu___haseq>



; </end encoding assume Prims.dtuple2__uu___haseq>


; <Start encoding val Prims.uu___is_Mkdtuple2>


(declare-fun Prims.uu___is_Mkdtuple2 (Term Term Term) Term)

(declare-fun Tm_arrow_e6f9f7cb1936ec43b52469e706dcadcc () Term)
(declare-fun Prims.uu___is_Mkdtuple2@tok () Term)

; </end encoding val Prims.uu___is_Mkdtuple2>


; <Skipped let uu___is_Mkdtuple2/>


; <Start encoding val Prims.__proj__Mkdtuple2__item___1>


(declare-fun Prims.__proj__Mkdtuple2__item___1 (Term Term Term) Term)

(declare-fun Tm_arrow_26c013ffba39d4f7eeb4bcc80d2d4e22 () Term)
(declare-fun Prims.__proj__Mkdtuple2__item___1@tok () Term)

; </end encoding val Prims.__proj__Mkdtuple2__item___1>


; <Skipped let __proj__Mkdtuple2__item___1/>


; <Start encoding val Prims.__proj__Mkdtuple2__item___2>


(declare-fun Prims.__proj__Mkdtuple2__item___2 (Term Term Term) Term)

(declare-fun Tm_arrow_870cc7701a0d9a8a2d6fb92427a97d66 () Term)
(declare-fun Prims.__proj__Mkdtuple2__item___2@tok () Term)

; </end encoding val Prims.__proj__Mkdtuple2__item___2>


; <Skipped let __proj__Mkdtuple2__item___2/>


; <Start encoding let l_Exists>


(declare-fun Prims.l_Exists (Term Term) Term)


(declare-fun Prims.l_Exists@tok () Term)


(declare-fun Tm_abs_6ba36691ee58dee85cd144324b083848 (Term Term) Term)

; </end encoding let l_Exists>


; <Start encoding val Prims.int>

(declare-fun Prims.int () Term)

; </end encoding val Prims.int>


; <Start encoding val Prims.op_AmpAmp>

(declare-fun Prims.op_AmpAmp (Term Term) Term)
(declare-fun Prims.op_AmpAmp@tok () Term)

; </end encoding val Prims.op_AmpAmp>


; <Start encoding val Prims.op_BarBar>

(declare-fun Prims.op_BarBar (Term Term) Term)
(declare-fun Prims.op_BarBar@tok () Term)

; </end encoding val Prims.op_BarBar>


; <Start encoding val Prims.op_Negation>

(declare-fun Prims.op_Negation (Term) Term)
(declare-fun Prims.op_Negation@tok () Term)

; </end encoding val Prims.op_Negation>


; <Start encoding val Prims.op_Multiply>

(declare-fun Prims.op_Multiply (Term Term) Term)
(declare-fun Prims.op_Multiply@tok () Term)

; </end encoding val Prims.op_Multiply>


; <Start encoding val Prims.op_Subtraction>

(declare-fun Prims.op_Subtraction (Term Term) Term)
(declare-fun Prims.op_Subtraction@tok () Term)

; </end encoding val Prims.op_Subtraction>


; <Start encoding val Prims.op_Addition>

(declare-fun Prims.op_Addition (Term Term) Term)
(declare-fun Prims.op_Addition@tok () Term)

; </end encoding val Prims.op_Addition>


; <Start encoding val Prims.op_Minus>

(declare-fun Prims.op_Minus (Term) Term)
(declare-fun Prims.op_Minus@tok () Term)

; </end encoding val Prims.op_Minus>


; <Start encoding val Prims.op_LessThanOrEqual>

(declare-fun Prims.op_LessThanOrEqual (Term Term) Term)
(declare-fun Prims.op_LessThanOrEqual@tok () Term)

; </end encoding val Prims.op_LessThanOrEqual>


; <Start encoding val Prims.op_GreaterThan>

(declare-fun Prims.op_GreaterThan (Term Term) Term)
(declare-fun Prims.op_GreaterThan@tok () Term)

; </end encoding val Prims.op_GreaterThan>


; <Start encoding val Prims.op_GreaterThanOrEqual>

(declare-fun Prims.op_GreaterThanOrEqual (Term Term) Term)
(declare-fun Prims.op_GreaterThanOrEqual@tok () Term)

; </end encoding val Prims.op_GreaterThanOrEqual>


; <Start encoding val Prims.op_LessThan>

(declare-fun Prims.op_LessThan (Term Term) Term)
(declare-fun Prims.op_LessThan@tok () Term)

; </end encoding val Prims.op_LessThan>


; <Start encoding val Prims.op_Equality>

(declare-fun Prims.op_Equality (Term Term Term) Term)
(declare-fun Prims.op_Equality@tok () Term)

; </end encoding val Prims.op_Equality>


; <Start encoding val Prims.op_disEquality>

(declare-fun Prims.op_disEquality (Term Term Term) Term)
(declare-fun Prims.op_disEquality@tok () Term)

; </end encoding val Prims.op_disEquality>


; <Start encoding val Prims.exn>

(declare-fun Prims.exn () Term)

; </end encoding val Prims.exn>


; <Start encoding val Prims.array>

(declare-fun Prims.array (Term) Term)

(declare-fun Prims.array@tok () Term)

; </end encoding val Prims.array>


; <Start encoding val Prims.strcat>

(declare-fun Prims.strcat (Term Term) Term)
(declare-fun Tm_arrow_b66cecec1d56111347abe61e89557dd1 () Term)
(declare-fun Prims.strcat@tok () Term)

; </end encoding val Prims.strcat>


; <Skipped let op_Hat/>


; <Start encoding type Prims.list>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.list (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.list@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Nil (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Nil_a (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Nil
(declare-fun Prims.Nil@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_hd (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_tl (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Cons
(declare-fun Prims.Cons@tok () Term)
(declare-fun Tm_arrow_3864bd5fbb999b4fe4487408df9b3401 () Term)
(declare-fun Tm_arrow_02c072760cbad0f5a4706f6cffab6c94 () Term)

; <start constructor Prims.list>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.list ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
318)
(exists ((@x0 Term))
 (! (= __@x0
(Prims.list @x0))
 
;;no pats
:qid is-Prims.list))))

; </end constructor Prims.list>


; <start constructor Prims.Nil>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Nil ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
325)
(= __@x0
(Prims.Nil (Prims.Nil_a __@x0)))))

; </end constructor Prims.Nil>


; <start constructor Prims.Cons>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Cons ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
330)
(= __@x0
(Prims.Cons (Prims.Cons_a __@x0)
(Prims.Cons_hd __@x0)
(Prims.Cons_tl __@x0)))))

; </end constructor Prims.Cons>


; </end encoding type Prims.list>


; <Start encoding assume Prims.list__uu___haseq>


; </end encoding assume Prims.list__uu___haseq>


; <Start encoding val Prims.uu___is_Nil>

(declare-fun Prims.uu___is_Nil (Term Term) Term)
(declare-fun Tm_arrow_606904b0fa72729a20285beb231f9f2e () Term)
(declare-fun Prims.uu___is_Nil@tok () Term)

; </end encoding val Prims.uu___is_Nil>


; <Skipped let uu___is_Nil/>


; <Start encoding val Prims.uu___is_Cons>

(declare-fun Prims.uu___is_Cons (Term Term) Term)

(declare-fun Prims.uu___is_Cons@tok () Term)

; </end encoding val Prims.uu___is_Cons>


; <Skipped let uu___is_Cons/>


; <Start encoding val Prims.__proj__Cons__item__hd>

(declare-fun Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 (Term) Term)
(declare-fun Prims.__proj__Cons__item__hd (Term Term) Term)

(declare-fun Tm_arrow_27c3547831737e5a63950f3d18bf3d22 () Term)
(declare-fun Prims.__proj__Cons__item__hd@tok () Term)

; </end encoding val Prims.__proj__Cons__item__hd>


; <Skipped let __proj__Cons__item__hd/>


; <Start encoding val Prims.__proj__Cons__item__tl>


(declare-fun Prims.__proj__Cons__item__tl (Term Term) Term)

(declare-fun Tm_arrow_4e740085106d54d8b48ffe3c6c20ef21 () Term)
(declare-fun Prims.__proj__Cons__item__tl@tok () Term)

; </end encoding val Prims.__proj__Cons__item__tl>


; <Skipped let __proj__Cons__item__tl/>


; <Skipped effect M a = a/>


; <Start encoding let returnM>

(declare-fun Prims.returnM (Term Term) Term)
(declare-fun Tm_arrow_99724436653747ac6f5a6a00c64ff8bc () Term)
(declare-fun Prims.returnM@tok () Term)

; </end encoding let returnM>


; <Skipped let as_requires/>


; <Skipped let as_ensures/>


; <Start encoding val Prims._assume>

(declare-fun Prims._assume (Term) Term)
(declare-fun Non_total_Tm_arrow_724d0dab46b8b51a1bb19d329f7fc4b2 () Term)
(declare-fun Prims._assume@tok () Term)

; </end encoding val Prims._assume>


; <Start encoding val Prims.admit>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Prims.admit (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Prims.admit@tok () Term)

; </end encoding val Prims.admit>


; <Start encoding val Prims.magic>

(declare-fun Prims.magic (Term Term) Term)
(declare-fun Tm_arrow_f5df98ce82fbcebbbdb844c958bee4fb () Term)
(declare-fun Prims.magic@tok () Term)

; </end encoding val Prims.magic>


; <Start encoding let unsafe_coerce>

(declare-fun Prims.unsafe_coerce (Term Term Term) Term)
(declare-fun Tm_arrow_443ab41008720460b7a09e280558a60f () Term)
(declare-fun Prims.unsafe_coerce@tok () Term)

; </end encoding let unsafe_coerce>


; <Start encoding val Prims.admitP>

(declare-fun Prims.admitP (Term) Term)

(declare-fun Prims.admitP@tok () Term)

; </end encoding val Prims.admitP>


; <Skipped val Prims._assert/>


; <Start encoding let _assert>

(declare-fun Prims._assert (Term) Term)
(declare-fun Non_total_Tm_arrow_bb2d1b4bdb07c87bf5990ad3e5fd8642 () Term)
(declare-fun Prims._assert@tok () Term)

; </end encoding let _assert>


; <Skipped val Prims.cut/>


; <Start encoding let cut>

(declare-fun Prims.cut (Term) Term)

(declare-fun Prims.cut@tok () Term)

; </end encoding let cut>


; <Start encoding let nat>

(declare-fun Prims.nat () Term)
(declare-fun Tm_refine_542f9d4f129664613f2483a6c88bc7c2 () Term)

; </end encoding let nat>


; <Start encoding let pos>

(declare-fun Prims.pos () Term)
(declare-fun Tm_refine_774ba3f728d91ead8ef40be66c9802e5 () Term)

; </end encoding let pos>


; <Start encoding let nonzero>

(declare-fun Prims.nonzero () Term)
(declare-fun Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f () Term)

; </end encoding let nonzero>


; <Start encoding val Prims.op_Modulus>

(declare-fun Prims.op_Modulus (Term Term) Term)
(declare-fun Prims.op_Modulus@tok () Term)

; </end encoding val Prims.op_Modulus>


; <Start encoding val Prims.op_Division>

(declare-fun Prims.op_Division (Term Term) Term)
(declare-fun Prims.op_Division@tok () Term)

; </end encoding val Prims.op_Division>


; <Start encoding let rec pow2>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Prims.pow2.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Prims.pow2.fuel_instrumented_token () Term)
(declare-fun Prims.pow2 (Term) Term)
(declare-fun Prims.pow2@tok () Term)
(declare-fun Tm_arrow_c331a0e032e021e1eaa359b3983de4f2 () Term)

; </end encoding let rec pow2>


; <Start encoding let min>

(declare-fun Prims.min (Term Term) Term)
(declare-fun Tm_arrow_47fc285d7b44e13bcb7e420cbfc55623 () Term)
(declare-fun Prims.min@tok () Term)

; </end encoding let min>


; <Start encoding let abs>

(declare-fun Prims.abs (Term) Term)
(declare-fun Tm_arrow_35447810753695c4fe25c93af1251992 () Term)
(declare-fun Prims.abs@tok () Term)

; </end encoding let abs>


; <Start encoding val Prims.string_of_bool>

(declare-fun Prims.string_of_bool (Term) Term)
(declare-fun Tm_arrow_e86b54405c2a58719f5e8112efd48c09 () Term)
(declare-fun Prims.string_of_bool@tok () Term)

; </end encoding val Prims.string_of_bool>


; <Start encoding val Prims.string_of_int>

(declare-fun Prims.string_of_int (Term) Term)
(declare-fun Tm_arrow_2bc066ec63734c94a3c008e1e72cae2b () Term)
(declare-fun Prims.string_of_int@tok () Term)

; </end encoding val Prims.string_of_int>


; <Start encoding let __cache_version_number__>

(declare-fun Prims.__cache_version_number__ () Term)

; </end encoding let __cache_version_number__>


; End Externals for module Prims


; Externals for module FStar.Pervasives.Native


; <Start encoding type FStar.Pervasives.Native.option>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.option (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.option@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.None (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.None_a (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.None
(declare-fun FStar.Pervasives.Native.None@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Some (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Some_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Some_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Some
(declare-fun FStar.Pervasives.Native.Some@tok () Term)
(declare-fun Tm_arrow_48b914114ec9f2f1caadf0f6848a9741 () Term)
(declare-fun Tm_arrow_b93a364b5144c2a5f3e9d1ea7b881752 () Term)

; <start constructor FStar.Pervasives.Native.option>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.option ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Pervasives.Native.option @x0))
 
;;no pats
:qid is-FStar.Pervasives.Native.option))))

; </end constructor FStar.Pervasives.Native.option>


; <start constructor FStar.Pervasives.Native.None>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.None ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
108)
(= __@x0
(FStar.Pervasives.Native.None (FStar.Pervasives.Native.None_a __@x0)))))

; </end constructor FStar.Pervasives.Native.None>


; <start constructor FStar.Pervasives.Native.Some>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Some ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
113)
(= __@x0
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.Some_a __@x0)
(FStar.Pervasives.Native.Some_v __@x0)))))

; </end constructor FStar.Pervasives.Native.Some>


; </end encoding type FStar.Pervasives.Native.option>


; <Start encoding assume FStar.Pervasives.Native.option__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.option__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_None>

(declare-fun FStar.Pervasives.Native.uu___is_None (Term Term) Term)
(declare-fun Tm_arrow_f1a97bcd6ba9b40d22609b756f183afa () Term)
(declare-fun FStar.Pervasives.Native.uu___is_None@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_None>


; <Skipped let uu___is_None/>


; <Start encoding val FStar.Pervasives.Native.uu___is_Some>

(declare-fun FStar.Pervasives.Native.uu___is_Some (Term Term) Term)

(declare-fun FStar.Pervasives.Native.uu___is_Some@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Some>


; <Skipped let uu___is_Some/>


; <Start encoding val FStar.Pervasives.Native.__proj__Some__item__v>

(declare-fun Tm_refine_4d5241eb6fe198666a8101195bbd4a2a (Term) Term)
(declare-fun FStar.Pervasives.Native.__proj__Some__item__v (Term Term) Term)

(declare-fun Tm_arrow_1b1398c011ff53e4194fc2ec00c7b411 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Some__item__v@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Some__item__v>


; <Skipped let __proj__Some__item__v/>


; <Start encoding type FStar.Pervasives.Native.tuple2>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple2 (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple2@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple2
(declare-fun FStar.Pervasives.Native.Mktuple2@tok () Term)
(declare-fun Tm_arrow_4054cc0a51327db54c2ed9ba3376a093 () Term)

; <start constructor FStar.Pervasives.Native.tuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
125)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple2 @x0
@x1))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple2))))

; </end constructor FStar.Pervasives.Native.tuple2>


; <start constructor FStar.Pervasives.Native.Mktuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
132)
(= __@x0
(FStar.Pervasives.Native.Mktuple2 (FStar.Pervasives.Native.Mktuple2__a __@x0)
(FStar.Pervasives.Native.Mktuple2__b __@x0)
(FStar.Pervasives.Native.Mktuple2__1 __@x0)
(FStar.Pervasives.Native.Mktuple2__2 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple2>


; </end encoding type FStar.Pervasives.Native.tuple2>


; <Start encoding assume FStar.Pervasives.Native.tuple2__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple2__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple2>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple2 (Term Term Term) Term)
(declare-fun Tm_arrow_eff71eeee4474e017e02350f86f54756 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple2@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple2>


; <Skipped let uu___is_Mktuple2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___1 (Term Term Term) Term)
(declare-fun Tm_arrow_b8cce376a4a678a51298a0f3945f25ce () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___1>


; <Skipped let __proj__Mktuple2__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___2 (Term Term Term) Term)
(declare-fun Tm_arrow_d952d001575ecb20c572af535c88dd2d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___2>


; <Skipped let __proj__Mktuple2__item___2/>


; <Start encoding let fst>

(declare-fun FStar.Pervasives.Native.fst (Term Term Term) Term)

(declare-fun FStar.Pervasives.Native.fst@tok () Term)

; </end encoding let fst>


; <Start encoding let snd>

(declare-fun FStar.Pervasives.Native.snd (Term Term Term) Term)

(declare-fun FStar.Pervasives.Native.snd@tok () Term)

; </end encoding let snd>


; <Start encoding type FStar.Pervasives.Native.tuple3>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple3@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple3 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__3 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple3
(declare-fun FStar.Pervasives.Native.Mktuple3@tok () Term)
(declare-fun Tm_arrow_1bedda193f13e939931cf5d46ad84216 () Term)

; <start constructor FStar.Pervasives.Native.tuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
146)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple3))))

; </end constructor FStar.Pervasives.Native.tuple3>


; <start constructor FStar.Pervasives.Native.Mktuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
153)
(= __@x0
(FStar.Pervasives.Native.Mktuple3 (FStar.Pervasives.Native.Mktuple3__a __@x0)
(FStar.Pervasives.Native.Mktuple3__b __@x0)
(FStar.Pervasives.Native.Mktuple3__c __@x0)
(FStar.Pervasives.Native.Mktuple3__1 __@x0)
(FStar.Pervasives.Native.Mktuple3__2 __@x0)
(FStar.Pervasives.Native.Mktuple3__3 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple3>


; </end encoding type FStar.Pervasives.Native.tuple3>


; <Start encoding assume FStar.Pervasives.Native.tuple3__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple3__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple3>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple3 (Term Term Term Term) Term)
(declare-fun Tm_arrow_f03c6dc5b30146aaca49ed4bf6f332a7 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple3@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple3>


; <Skipped let uu___is_Mktuple3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Term Term Term Term) Term)
(declare-fun Tm_arrow_592c45439d32a71e1933eacb9776c9ed () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___1>


; <Skipped let __proj__Mktuple3__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Term Term Term Term) Term)
(declare-fun Tm_arrow_9c9b0c5ac9b0fbfc367f406af296ecab () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___2>


; <Skipped let __proj__Mktuple3__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___3 (Term Term Term Term) Term)
(declare-fun Tm_arrow_08246a62c9aeca08c44c602ad80e95a4 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___3>


; <Skipped let __proj__Mktuple3__item___3/>


; <Start encoding type FStar.Pervasives.Native.tuple4>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple4 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple4@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple4 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__4 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple4
(declare-fun FStar.Pervasives.Native.Mktuple4@tok () Term)
(declare-fun Tm_arrow_cbe72a10167439fe1ecfaf4fec8fd23f () Term)

; <start constructor FStar.Pervasives.Native.tuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
165)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple4 @x0
@x1
@x2
@x3))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple4))))

; </end constructor FStar.Pervasives.Native.tuple4>


; <start constructor FStar.Pervasives.Native.Mktuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
172)
(= __@x0
(FStar.Pervasives.Native.Mktuple4 (FStar.Pervasives.Native.Mktuple4__a __@x0)
(FStar.Pervasives.Native.Mktuple4__b __@x0)
(FStar.Pervasives.Native.Mktuple4__c __@x0)
(FStar.Pervasives.Native.Mktuple4__d __@x0)
(FStar.Pervasives.Native.Mktuple4__1 __@x0)
(FStar.Pervasives.Native.Mktuple4__2 __@x0)
(FStar.Pervasives.Native.Mktuple4__3 __@x0)
(FStar.Pervasives.Native.Mktuple4__4 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple4>


; </end encoding type FStar.Pervasives.Native.tuple4>


; <Start encoding assume FStar.Pervasives.Native.tuple4__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple4__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple4>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple4 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_4319694c225efa92ce9fad6e9d81f761 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple4@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple4>


; <Skipped let uu___is_Mktuple4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___1 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_382d1e9129053162252ec57e86d46f82 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___1>


; <Skipped let __proj__Mktuple4__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___2 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_fffd25e5325d259efa0675ef649c6864 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___2>


; <Skipped let __proj__Mktuple4__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___3 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_57b4005e0833f7b396e349ed7cdd1bb2 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___3>


; <Skipped let __proj__Mktuple4__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___4 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9e6c1a63d63f8735645b9898955a2dca () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___4>


; <Skipped let __proj__Mktuple4__item___4/>


; <Start encoding type FStar.Pervasives.Native.tuple5>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple5 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple5@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple5 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__5 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple5
(declare-fun FStar.Pervasives.Native.Mktuple5@tok () Term)
(declare-fun Tm_arrow_dd8a078a1b97a81b5089dc3637cc2887 () Term)

; <start constructor FStar.Pervasives.Native.tuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
186)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple5 @x0
@x1
@x2
@x3
@x4))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple5))))

; </end constructor FStar.Pervasives.Native.tuple5>


; <start constructor FStar.Pervasives.Native.Mktuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
193)
(= __@x0
(FStar.Pervasives.Native.Mktuple5 (FStar.Pervasives.Native.Mktuple5__a __@x0)
(FStar.Pervasives.Native.Mktuple5__b __@x0)
(FStar.Pervasives.Native.Mktuple5__c __@x0)
(FStar.Pervasives.Native.Mktuple5__d __@x0)
(FStar.Pervasives.Native.Mktuple5__e __@x0)
(FStar.Pervasives.Native.Mktuple5__1 __@x0)
(FStar.Pervasives.Native.Mktuple5__2 __@x0)
(FStar.Pervasives.Native.Mktuple5__3 __@x0)
(FStar.Pervasives.Native.Mktuple5__4 __@x0)
(FStar.Pervasives.Native.Mktuple5__5 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple5>


; </end encoding type FStar.Pervasives.Native.tuple5>


; <Start encoding assume FStar.Pervasives.Native.tuple5__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple5__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple5>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple5 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_cfa2e2c8b8b41312889ff659c4faa5f9 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple5@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple5>


; <Skipped let uu___is_Mktuple5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___1 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7519f72fe101267af170e00c6ce694af () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___1>


; <Skipped let __proj__Mktuple5__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___2 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3e46329f224aa70981a337f98afbaa87 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___2>


; <Skipped let __proj__Mktuple5__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___3 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_55e6dc1b736536de45fedf844003f847 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___3>


; <Skipped let __proj__Mktuple5__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___4 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3a4e86c6aee1a39b4811bdbc12405398 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___4>


; <Skipped let __proj__Mktuple5__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___5 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1a78355922fdaba3f3848932dfc0a089 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___5>


; <Skipped let __proj__Mktuple5__item___5/>


; <Start encoding type FStar.Pervasives.Native.tuple6>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple6 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple6@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple6 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__6 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple6
(declare-fun FStar.Pervasives.Native.Mktuple6@tok () Term)
(declare-fun Tm_arrow_f277ffaa7e891207f9c6bff5b88ffd67 () Term)

; <start constructor FStar.Pervasives.Native.tuple6>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple6 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
209)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple6 @x0
@x1
@x2
@x3
@x4
@x5))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple6))))

; </end constructor FStar.Pervasives.Native.tuple6>


; <start constructor FStar.Pervasives.Native.Mktuple6>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple6 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
216)
(= __@x0
(FStar.Pervasives.Native.Mktuple6 (FStar.Pervasives.Native.Mktuple6__a __@x0)
(FStar.Pervasives.Native.Mktuple6__b __@x0)
(FStar.Pervasives.Native.Mktuple6__c __@x0)
(FStar.Pervasives.Native.Mktuple6__d __@x0)
(FStar.Pervasives.Native.Mktuple6__e __@x0)
(FStar.Pervasives.Native.Mktuple6__f __@x0)
(FStar.Pervasives.Native.Mktuple6__1 __@x0)
(FStar.Pervasives.Native.Mktuple6__2 __@x0)
(FStar.Pervasives.Native.Mktuple6__3 __@x0)
(FStar.Pervasives.Native.Mktuple6__4 __@x0)
(FStar.Pervasives.Native.Mktuple6__5 __@x0)
(FStar.Pervasives.Native.Mktuple6__6 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple6>


; </end encoding type FStar.Pervasives.Native.tuple6>


; <Start encoding assume FStar.Pervasives.Native.tuple6__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple6__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple6>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple6 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_286587a1b9d299ba75a076f54a6dad5f () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple6@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple6>


; <Skipped let uu___is_Mktuple6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___1 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5b1e145eeceab869b8e427e6927dbd63 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___1>


; <Skipped let __proj__Mktuple6__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___2 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3207475e225d584881d3e0a297482887 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___2>


; <Skipped let __proj__Mktuple6__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___3 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_43e491b3b537a523a4f10de18b1915f5 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___3>


; <Skipped let __proj__Mktuple6__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___4 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f5747d5b721642d7ecb757b043f20880 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___4>


; <Skipped let __proj__Mktuple6__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___5 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_d6501381a0206e157ecc43950bb31fea () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___5>


; <Skipped let __proj__Mktuple6__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___6 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9c342f41120d0c7aea115b09b58cefb2 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___6>


; <Skipped let __proj__Mktuple6__item___6/>


; <Start encoding type FStar.Pervasives.Native.tuple7>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple7 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple7@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__7 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple7
(declare-fun FStar.Pervasives.Native.Mktuple7@tok () Term)
(declare-fun Tm_arrow_37ee9ec407a0f7bb69bf1b308f74a230 () Term)

; <start constructor FStar.Pervasives.Native.tuple7>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple7 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
234)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple7))))

; </end constructor FStar.Pervasives.Native.tuple7>


; <start constructor FStar.Pervasives.Native.Mktuple7>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple7 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
241)
(= __@x0
(FStar.Pervasives.Native.Mktuple7 (FStar.Pervasives.Native.Mktuple7__a __@x0)
(FStar.Pervasives.Native.Mktuple7__b __@x0)
(FStar.Pervasives.Native.Mktuple7__c __@x0)
(FStar.Pervasives.Native.Mktuple7__d __@x0)
(FStar.Pervasives.Native.Mktuple7__e __@x0)
(FStar.Pervasives.Native.Mktuple7__f __@x0)
(FStar.Pervasives.Native.Mktuple7__g __@x0)
(FStar.Pervasives.Native.Mktuple7__1 __@x0)
(FStar.Pervasives.Native.Mktuple7__2 __@x0)
(FStar.Pervasives.Native.Mktuple7__3 __@x0)
(FStar.Pervasives.Native.Mktuple7__4 __@x0)
(FStar.Pervasives.Native.Mktuple7__5 __@x0)
(FStar.Pervasives.Native.Mktuple7__6 __@x0)
(FStar.Pervasives.Native.Mktuple7__7 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple7>


; </end encoding type FStar.Pervasives.Native.tuple7>


; <Start encoding assume FStar.Pervasives.Native.tuple7__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple7__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple7>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple7 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_612dde2fedb1440c5d790ba7f5015319 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple7@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple7>


; <Skipped let uu___is_Mktuple7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___1 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_01c4488a68699f466c59799f5c1173ff () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___1>


; <Skipped let __proj__Mktuple7__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___2 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f317591858699585c67fe4ba8664e34c () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___2>


; <Skipped let __proj__Mktuple7__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___3 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_44afce9d86f095aacc82b3ea2e0e223c () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___3>


; <Skipped let __proj__Mktuple7__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___4 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e857539d4cc5be0510cbcfb97cb64b35 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___4>


; <Skipped let __proj__Mktuple7__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___5 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a249d3d5ba06026b12d41e289bb88061 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___5>


; <Skipped let __proj__Mktuple7__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___6 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_bf614c740d11cac9b5f8eb20b24c7d00 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___6>


; <Skipped let __proj__Mktuple7__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___7 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e775fbf03b08091e48143165286522f7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___7>


; <Skipped let __proj__Mktuple7__item___7/>


; <Start encoding type FStar.Pervasives.Native.tuple8>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple8 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple8@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__8 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple8
(declare-fun FStar.Pervasives.Native.Mktuple8@tok () Term)
(declare-fun Tm_arrow_e922a339a0aa0f375ed7113049811583 () Term)

; <start constructor FStar.Pervasives.Native.tuple8>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple8 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
261)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple8))))

; </end constructor FStar.Pervasives.Native.tuple8>


; <start constructor FStar.Pervasives.Native.Mktuple8>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple8 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
268)
(= __@x0
(FStar.Pervasives.Native.Mktuple8 (FStar.Pervasives.Native.Mktuple8__a __@x0)
(FStar.Pervasives.Native.Mktuple8__b __@x0)
(FStar.Pervasives.Native.Mktuple8__c __@x0)
(FStar.Pervasives.Native.Mktuple8__d __@x0)
(FStar.Pervasives.Native.Mktuple8__e __@x0)
(FStar.Pervasives.Native.Mktuple8__f __@x0)
(FStar.Pervasives.Native.Mktuple8__g __@x0)
(FStar.Pervasives.Native.Mktuple8__h __@x0)
(FStar.Pervasives.Native.Mktuple8__1 __@x0)
(FStar.Pervasives.Native.Mktuple8__2 __@x0)
(FStar.Pervasives.Native.Mktuple8__3 __@x0)
(FStar.Pervasives.Native.Mktuple8__4 __@x0)
(FStar.Pervasives.Native.Mktuple8__5 __@x0)
(FStar.Pervasives.Native.Mktuple8__6 __@x0)
(FStar.Pervasives.Native.Mktuple8__7 __@x0)
(FStar.Pervasives.Native.Mktuple8__8 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple8>


; </end encoding type FStar.Pervasives.Native.tuple8>


; <Start encoding assume FStar.Pervasives.Native.tuple8__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple8__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple8>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple8 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ee31533e24c78558f4566668a6ec027c () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple8@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple8>


; <Skipped let uu___is_Mktuple8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___1 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c971649e117e4941e7317eff508d5ea7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___1>


; <Skipped let __proj__Mktuple8__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___2 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_97dd51e3888c1c543d8f6c73d1808548 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___2>


; <Skipped let __proj__Mktuple8__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___3 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3931d1873633dc65fed4e022ee3df3ca () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___3>


; <Skipped let __proj__Mktuple8__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___4 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5c791e62f9472e4c351c2befb2b7a3d8 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___4>


; <Skipped let __proj__Mktuple8__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___5 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7ef7cac898ca0ef25893959e91d8c6ce () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___5>


; <Skipped let __proj__Mktuple8__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___6 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_b0ae5f58a7fa002e0313b58bf5fc74cb () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___6>


; <Skipped let __proj__Mktuple8__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___7 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7fcd94f7549ca8acfadc26bc5b82f590 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___7>


; <Skipped let __proj__Mktuple8__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___8 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_feaaf61fa62fef18c5ee7c39e9f86573 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___8>


; <Skipped let __proj__Mktuple8__item___8/>


; <Start encoding type FStar.Pervasives.Native.tuple9>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple9 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple9@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__9 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple9
(declare-fun FStar.Pervasives.Native.Mktuple9@tok () Term)
(declare-fun Tm_arrow_0c6bc368a301d7de6e1939ebea91ee60 () Term)

; <start constructor FStar.Pervasives.Native.tuple9>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple9 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
290)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple9 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple9))))

; </end constructor FStar.Pervasives.Native.tuple9>


; <start constructor FStar.Pervasives.Native.Mktuple9>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple9 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
297)
(= __@x0
(FStar.Pervasives.Native.Mktuple9 (FStar.Pervasives.Native.Mktuple9__a __@x0)
(FStar.Pervasives.Native.Mktuple9__b __@x0)
(FStar.Pervasives.Native.Mktuple9__c __@x0)
(FStar.Pervasives.Native.Mktuple9__d __@x0)
(FStar.Pervasives.Native.Mktuple9__e __@x0)
(FStar.Pervasives.Native.Mktuple9__f __@x0)
(FStar.Pervasives.Native.Mktuple9__g __@x0)
(FStar.Pervasives.Native.Mktuple9__h __@x0)
(FStar.Pervasives.Native.Mktuple9__i __@x0)
(FStar.Pervasives.Native.Mktuple9__1 __@x0)
(FStar.Pervasives.Native.Mktuple9__2 __@x0)
(FStar.Pervasives.Native.Mktuple9__3 __@x0)
(FStar.Pervasives.Native.Mktuple9__4 __@x0)
(FStar.Pervasives.Native.Mktuple9__5 __@x0)
(FStar.Pervasives.Native.Mktuple9__6 __@x0)
(FStar.Pervasives.Native.Mktuple9__7 __@x0)
(FStar.Pervasives.Native.Mktuple9__8 __@x0)
(FStar.Pervasives.Native.Mktuple9__9 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple9>


; </end encoding type FStar.Pervasives.Native.tuple9>


; <Start encoding assume FStar.Pervasives.Native.tuple9__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple9__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple9>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple9 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9ac8f39c7b1df1e87db7c9bf5bc37a38 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple9@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple9>


; <Skipped let uu___is_Mktuple9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___1 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_270119cc1f13c9afeb25322d78efc328 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___1>


; <Skipped let __proj__Mktuple9__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___2 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3c368dee2c86a1af7bd7ea91baab7613 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___2>


; <Skipped let __proj__Mktuple9__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___3 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e9c745e2da3dec50930b0a7e01a11cc3 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___3>


; <Skipped let __proj__Mktuple9__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___4 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a82ff41c5c66cd37481c83584c94a54d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___4>


; <Skipped let __proj__Mktuple9__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___5 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1b3b4c5e68fdf7277f64bde93e6534de () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___5>


; <Skipped let __proj__Mktuple9__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___6 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_837f1324f6fa51bb8a0e45ee48e4e058 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___6>


; <Skipped let __proj__Mktuple9__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___7 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a7562220963e3431d35de76c3c9c87b9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___7>


; <Skipped let __proj__Mktuple9__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___8 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_861b810bc1c20bbd221cecbce824b695 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___8>


; <Skipped let __proj__Mktuple9__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___9 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9a54b18d8e08fdf0e20244b3f960c9dc () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___9>


; <Skipped let __proj__Mktuple9__item___9/>


; <Start encoding type FStar.Pervasives.Native.tuple10>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple10 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple10@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__10 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple10
(declare-fun FStar.Pervasives.Native.Mktuple10@tok () Term)
(declare-fun Tm_arrow_61d31241317018093b2245d256adbcb5 () Term)

; <start constructor FStar.Pervasives.Native.tuple10>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple10 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
321)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple10 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple10))))

; </end constructor FStar.Pervasives.Native.tuple10>


; <start constructor FStar.Pervasives.Native.Mktuple10>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple10 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
328)
(= __@x0
(FStar.Pervasives.Native.Mktuple10 (FStar.Pervasives.Native.Mktuple10__a __@x0)
(FStar.Pervasives.Native.Mktuple10__b __@x0)
(FStar.Pervasives.Native.Mktuple10__c __@x0)
(FStar.Pervasives.Native.Mktuple10__d __@x0)
(FStar.Pervasives.Native.Mktuple10__e __@x0)
(FStar.Pervasives.Native.Mktuple10__f __@x0)
(FStar.Pervasives.Native.Mktuple10__g __@x0)
(FStar.Pervasives.Native.Mktuple10__h __@x0)
(FStar.Pervasives.Native.Mktuple10__i __@x0)
(FStar.Pervasives.Native.Mktuple10__j __@x0)
(FStar.Pervasives.Native.Mktuple10__1 __@x0)
(FStar.Pervasives.Native.Mktuple10__2 __@x0)
(FStar.Pervasives.Native.Mktuple10__3 __@x0)
(FStar.Pervasives.Native.Mktuple10__4 __@x0)
(FStar.Pervasives.Native.Mktuple10__5 __@x0)
(FStar.Pervasives.Native.Mktuple10__6 __@x0)
(FStar.Pervasives.Native.Mktuple10__7 __@x0)
(FStar.Pervasives.Native.Mktuple10__8 __@x0)
(FStar.Pervasives.Native.Mktuple10__9 __@x0)
(FStar.Pervasives.Native.Mktuple10__10 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple10>


; </end encoding type FStar.Pervasives.Native.tuple10>


; <Start encoding assume FStar.Pervasives.Native.tuple10__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple10__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple10>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple10 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f27282a056f525d8710bf32204d252ec () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple10@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple10>


; <Skipped let uu___is_Mktuple10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___1 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c581e9177cd071a1b6e057fca49ea75b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___1>


; <Skipped let __proj__Mktuple10__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___2 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ae4b2db87d7c69a8380f4d5ae20f2149 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___2>


; <Skipped let __proj__Mktuple10__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___3 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a21274cb112dc6619b2bde244e6a0f9a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___3>


; <Skipped let __proj__Mktuple10__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___4 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9a051d5cacf4367d170d590ba8bb720d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___4>


; <Skipped let __proj__Mktuple10__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___5 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_bbd73769b626202d4de52d4d60cd3b75 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___5>


; <Skipped let __proj__Mktuple10__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___6 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7ceeded5a3852448c1a5406becbd990e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___6>


; <Skipped let __proj__Mktuple10__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___7 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c68947c71d484ad43cd50646c4e1daf4 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___7>


; <Skipped let __proj__Mktuple10__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___8 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e7b9ff90289491020fe84c6ab3bc60c6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___8>


; <Skipped let __proj__Mktuple10__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___9 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_6dbb3170f112f78092d1caee0b341678 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___9>


; <Skipped let __proj__Mktuple10__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___10 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_45598a99c0a7fcc1bf2258b9ad4256cf () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___10>


; <Skipped let __proj__Mktuple10__item___10/>


; <Start encoding type FStar.Pervasives.Native.tuple11>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple11 (Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple11@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__11 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple11
(declare-fun FStar.Pervasives.Native.Mktuple11@tok () Term)
(declare-fun Tm_arrow_bf9783a1a3bf19ab918f42acff1daa32 () Term)

; <start constructor FStar.Pervasives.Native.tuple11>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple11 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
354)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple11 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple11))))

; </end constructor FStar.Pervasives.Native.tuple11>


; <start constructor FStar.Pervasives.Native.Mktuple11>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple11 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
361)
(= __@x0
(FStar.Pervasives.Native.Mktuple11 (FStar.Pervasives.Native.Mktuple11__a __@x0)
(FStar.Pervasives.Native.Mktuple11__b __@x0)
(FStar.Pervasives.Native.Mktuple11__c __@x0)
(FStar.Pervasives.Native.Mktuple11__d __@x0)
(FStar.Pervasives.Native.Mktuple11__e __@x0)
(FStar.Pervasives.Native.Mktuple11__f __@x0)
(FStar.Pervasives.Native.Mktuple11__g __@x0)
(FStar.Pervasives.Native.Mktuple11__h __@x0)
(FStar.Pervasives.Native.Mktuple11__i __@x0)
(FStar.Pervasives.Native.Mktuple11__j __@x0)
(FStar.Pervasives.Native.Mktuple11__k __@x0)
(FStar.Pervasives.Native.Mktuple11__1 __@x0)
(FStar.Pervasives.Native.Mktuple11__2 __@x0)
(FStar.Pervasives.Native.Mktuple11__3 __@x0)
(FStar.Pervasives.Native.Mktuple11__4 __@x0)
(FStar.Pervasives.Native.Mktuple11__5 __@x0)
(FStar.Pervasives.Native.Mktuple11__6 __@x0)
(FStar.Pervasives.Native.Mktuple11__7 __@x0)
(FStar.Pervasives.Native.Mktuple11__8 __@x0)
(FStar.Pervasives.Native.Mktuple11__9 __@x0)
(FStar.Pervasives.Native.Mktuple11__10 __@x0)
(FStar.Pervasives.Native.Mktuple11__11 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple11>


; </end encoding type FStar.Pervasives.Native.tuple11>


; <Start encoding assume FStar.Pervasives.Native.tuple11__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple11__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple11>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple11 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_005819ee7a23a5c47189bae72b85d85c () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple11@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple11>


; <Skipped let uu___is_Mktuple11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_31968e334e9582d95281307f534992a9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___1>


; <Skipped let __proj__Mktuple11__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_6252dd9f4473dc54a3482810e8556404 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___2>


; <Skipped let __proj__Mktuple11__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ec3ce6b7406c091cd7d0961922bb5a02 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___3>


; <Skipped let __proj__Mktuple11__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_be7571e73b0e7fc24d03efe0e003c054 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___4>


; <Skipped let __proj__Mktuple11__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_97ae7d913e508c46c48c3b51553d4459 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___5>


; <Skipped let __proj__Mktuple11__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1dca311798936510e0ead61e14cf32a6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___6>


; <Skipped let __proj__Mktuple11__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_eec431ea31093a646681ef2ceb2e2986 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___7>


; <Skipped let __proj__Mktuple11__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_689b2f06e9fd83f7a84ce80a13d338c6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___8>


; <Skipped let __proj__Mktuple11__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_20210a3d9498f929cb7aa68d9e8b5ebf () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___9>


; <Skipped let __proj__Mktuple11__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_96812f2124d88760b2002bbe1502c3c9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___10>


; <Skipped let __proj__Mktuple11__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_abcfa2582f68905d460c5ef4a7642f2d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___11>


; <Skipped let __proj__Mktuple11__item___11/>


; <Start encoding type FStar.Pervasives.Native.tuple12>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple12 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple12@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__12 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple12
(declare-fun FStar.Pervasives.Native.Mktuple12@tok () Term)
(declare-fun Tm_arrow_4d5cd995d6f44a2ec39d0f193be0be65 () Term)

; <start constructor FStar.Pervasives.Native.tuple12>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple12 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
389)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple12 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple12))))

; </end constructor FStar.Pervasives.Native.tuple12>


; <start constructor FStar.Pervasives.Native.Mktuple12>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple12 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
396)
(= __@x0
(FStar.Pervasives.Native.Mktuple12 (FStar.Pervasives.Native.Mktuple12__a __@x0)
(FStar.Pervasives.Native.Mktuple12__b __@x0)
(FStar.Pervasives.Native.Mktuple12__c __@x0)
(FStar.Pervasives.Native.Mktuple12__d __@x0)
(FStar.Pervasives.Native.Mktuple12__e __@x0)
(FStar.Pervasives.Native.Mktuple12__f __@x0)
(FStar.Pervasives.Native.Mktuple12__g __@x0)
(FStar.Pervasives.Native.Mktuple12__h __@x0)
(FStar.Pervasives.Native.Mktuple12__i __@x0)
(FStar.Pervasives.Native.Mktuple12__j __@x0)
(FStar.Pervasives.Native.Mktuple12__k __@x0)
(FStar.Pervasives.Native.Mktuple12__l __@x0)
(FStar.Pervasives.Native.Mktuple12__1 __@x0)
(FStar.Pervasives.Native.Mktuple12__2 __@x0)
(FStar.Pervasives.Native.Mktuple12__3 __@x0)
(FStar.Pervasives.Native.Mktuple12__4 __@x0)
(FStar.Pervasives.Native.Mktuple12__5 __@x0)
(FStar.Pervasives.Native.Mktuple12__6 __@x0)
(FStar.Pervasives.Native.Mktuple12__7 __@x0)
(FStar.Pervasives.Native.Mktuple12__8 __@x0)
(FStar.Pervasives.Native.Mktuple12__9 __@x0)
(FStar.Pervasives.Native.Mktuple12__10 __@x0)
(FStar.Pervasives.Native.Mktuple12__11 __@x0)
(FStar.Pervasives.Native.Mktuple12__12 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple12>


; </end encoding type FStar.Pervasives.Native.tuple12>


; <Start encoding assume FStar.Pervasives.Native.tuple12__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple12__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple12>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple12 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5c9f47d9090f554c9826d2f65e388f20 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple12@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple12>


; <Skipped let uu___is_Mktuple12/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_618941d7cf5ddbaabe15df8579b4a387 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___1>


; <Skipped let __proj__Mktuple12__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_84e9e2280e9bcb3233e4f33f86d66ea6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___2>


; <Skipped let __proj__Mktuple12__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1fa79c5abf9f18607bd2e46a1a6967fa () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___3>


; <Skipped let __proj__Mktuple12__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_0f49c582489d782b08195e81221181dc () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___4>


; <Skipped let __proj__Mktuple12__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_29b7181ebb44f9e4a45f95c4f8478c6a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___5>


; <Skipped let __proj__Mktuple12__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3cc2863a7d7f23e3916fa1e43483cb90 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___6>


; <Skipped let __proj__Mktuple12__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c7deea49701ab64a73985bf522e46359 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___7>


; <Skipped let __proj__Mktuple12__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_380615e7761919086537a14273a02d22 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___8>


; <Skipped let __proj__Mktuple12__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_245250918a4432b31aea8152d056489a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___9>


; <Skipped let __proj__Mktuple12__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2a967c8402c441e6d8a9336a7568e4de () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___10>


; <Skipped let __proj__Mktuple12__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_543c3feac0cd9e04ecb6cfd74ced8964 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___11>


; <Skipped let __proj__Mktuple12__item___11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e91029e2320896c60e94f554727a0c41 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___12@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___12>


; <Skipped let __proj__Mktuple12__item___12/>


; <Start encoding type FStar.Pervasives.Native.tuple13>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple13@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__m (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__12 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__13 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple13
(declare-fun FStar.Pervasives.Native.Mktuple13@tok () Term)
(declare-fun Tm_arrow_6462785e86ca440ee74ed32e1053eae3 () Term)

; <start constructor FStar.Pervasives.Native.tuple13>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple13 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
426)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple13 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple13))))

; </end constructor FStar.Pervasives.Native.tuple13>


; <start constructor FStar.Pervasives.Native.Mktuple13>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple13 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
433)
(= __@x0
(FStar.Pervasives.Native.Mktuple13 (FStar.Pervasives.Native.Mktuple13__a __@x0)
(FStar.Pervasives.Native.Mktuple13__b __@x0)
(FStar.Pervasives.Native.Mktuple13__c __@x0)
(FStar.Pervasives.Native.Mktuple13__d __@x0)
(FStar.Pervasives.Native.Mktuple13__e __@x0)
(FStar.Pervasives.Native.Mktuple13__f __@x0)
(FStar.Pervasives.Native.Mktuple13__g __@x0)
(FStar.Pervasives.Native.Mktuple13__h __@x0)
(FStar.Pervasives.Native.Mktuple13__i __@x0)
(FStar.Pervasives.Native.Mktuple13__j __@x0)
(FStar.Pervasives.Native.Mktuple13__k __@x0)
(FStar.Pervasives.Native.Mktuple13__l __@x0)
(FStar.Pervasives.Native.Mktuple13__m __@x0)
(FStar.Pervasives.Native.Mktuple13__1 __@x0)
(FStar.Pervasives.Native.Mktuple13__2 __@x0)
(FStar.Pervasives.Native.Mktuple13__3 __@x0)
(FStar.Pervasives.Native.Mktuple13__4 __@x0)
(FStar.Pervasives.Native.Mktuple13__5 __@x0)
(FStar.Pervasives.Native.Mktuple13__6 __@x0)
(FStar.Pervasives.Native.Mktuple13__7 __@x0)
(FStar.Pervasives.Native.Mktuple13__8 __@x0)
(FStar.Pervasives.Native.Mktuple13__9 __@x0)
(FStar.Pervasives.Native.Mktuple13__10 __@x0)
(FStar.Pervasives.Native.Mktuple13__11 __@x0)
(FStar.Pervasives.Native.Mktuple13__12 __@x0)
(FStar.Pervasives.Native.Mktuple13__13 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple13>


; </end encoding type FStar.Pervasives.Native.tuple13>


; <Start encoding assume FStar.Pervasives.Native.tuple13__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple13__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple13>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_68c092e8b387730b412c4dcf592b12d3 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple13@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple13>


; <Skipped let uu___is_Mktuple13/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_82a3dc3a5dbad615d8d4a31db238e43f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___1>


; <Skipped let __proj__Mktuple13__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1da976aaa65f1c6b8b256dfc45c41306 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___2>


; <Skipped let __proj__Mktuple13__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ca5cf529c415deee29e0a34c0c5d1c9f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___3>


; <Skipped let __proj__Mktuple13__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_94f6c578541b6cb528ca9e7dd1dacc3b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___4>


; <Skipped let __proj__Mktuple13__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_211e172b7220adc186d8a02ff17e8780 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___5>


; <Skipped let __proj__Mktuple13__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9276a4f669d8497205e8d59f12da53ba () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___6>


; <Skipped let __proj__Mktuple13__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_8aa8f381a5ed57cbbae9dcd2405ce80f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___7>


; <Skipped let __proj__Mktuple13__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_51814106613688cf259d7cdba9c24d93 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___8>


; <Skipped let __proj__Mktuple13__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_05fec25e6f03f974bb2933a910642d7e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___9>


; <Skipped let __proj__Mktuple13__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3280ee04611a7985c9d107bb1a8a330a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___10>


; <Skipped let __proj__Mktuple13__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_86c868d5d5058e8e5ec1f4d0285c7e90 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___11>


; <Skipped let __proj__Mktuple13__item___11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7263c1a3c4475bb4e4b41a1be4bf22da () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___12@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___12>


; <Skipped let __proj__Mktuple13__item___12/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___13>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_338c65ae58844787891c6f47cf01c068 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___13@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___13>


; <Skipped let __proj__Mktuple13__item___13/>


; <Start encoding type FStar.Pervasives.Native.tuple14>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple14@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__m (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__n (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__12 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__13 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__14 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple14
(declare-fun FStar.Pervasives.Native.Mktuple14@tok () Term)
(declare-fun Tm_arrow_484e3bf88a886900f7e695d7333615e9 () Term)

; <start constructor FStar.Pervasives.Native.tuple14>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple14 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
465)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple14 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple14))))

; </end constructor FStar.Pervasives.Native.tuple14>


; <start constructor FStar.Pervasives.Native.Mktuple14>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple14 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
472)
(= __@x0
(FStar.Pervasives.Native.Mktuple14 (FStar.Pervasives.Native.Mktuple14__a __@x0)
(FStar.Pervasives.Native.Mktuple14__b __@x0)
(FStar.Pervasives.Native.Mktuple14__c __@x0)
(FStar.Pervasives.Native.Mktuple14__d __@x0)
(FStar.Pervasives.Native.Mktuple14__e __@x0)
(FStar.Pervasives.Native.Mktuple14__f __@x0)
(FStar.Pervasives.Native.Mktuple14__g __@x0)
(FStar.Pervasives.Native.Mktuple14__h __@x0)
(FStar.Pervasives.Native.Mktuple14__i __@x0)
(FStar.Pervasives.Native.Mktuple14__j __@x0)
(FStar.Pervasives.Native.Mktuple14__k __@x0)
(FStar.Pervasives.Native.Mktuple14__l __@x0)
(FStar.Pervasives.Native.Mktuple14__m __@x0)
(FStar.Pervasives.Native.Mktuple14__n __@x0)
(FStar.Pervasives.Native.Mktuple14__1 __@x0)
(FStar.Pervasives.Native.Mktuple14__2 __@x0)
(FStar.Pervasives.Native.Mktuple14__3 __@x0)
(FStar.Pervasives.Native.Mktuple14__4 __@x0)
(FStar.Pervasives.Native.Mktuple14__5 __@x0)
(FStar.Pervasives.Native.Mktuple14__6 __@x0)
(FStar.Pervasives.Native.Mktuple14__7 __@x0)
(FStar.Pervasives.Native.Mktuple14__8 __@x0)
(FStar.Pervasives.Native.Mktuple14__9 __@x0)
(FStar.Pervasives.Native.Mktuple14__10 __@x0)
(FStar.Pervasives.Native.Mktuple14__11 __@x0)
(FStar.Pervasives.Native.Mktuple14__12 __@x0)
(FStar.Pervasives.Native.Mktuple14__13 __@x0)
(FStar.Pervasives.Native.Mktuple14__14 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple14>


; </end encoding type FStar.Pervasives.Native.tuple14>


; <Start encoding assume FStar.Pervasives.Native.tuple14__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple14__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple14>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2de133cfaca100fc23d8bf4b3421db9a () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple14@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple14>


; <Skipped let uu___is_Mktuple14/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2e3216cab266e138debd68d0a503c177 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___1>


; <Skipped let __proj__Mktuple14__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_958b0270e487d0bf5fe9191b9efaa127 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___2>


; <Skipped let __proj__Mktuple14__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_08349f596f8c0acf60d1587bebe8c91b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___3>


; <Skipped let __proj__Mktuple14__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2b069168147ba0f67f117ad5b0ac078b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___4>


; <Skipped let __proj__Mktuple14__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1e38bb16245a24a197c44a262fee7bf1 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___5>


; <Skipped let __proj__Mktuple14__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7a148953a3884454d8a1dffddce086bb () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___6>


; <Skipped let __proj__Mktuple14__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_812eeb3fdab56dfea8e419236740acb0 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___7>


; <Skipped let __proj__Mktuple14__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9dc932ce7cdfd6fa57f6536787fcb65b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___8>


; <Skipped let __proj__Mktuple14__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2600722933f06bc55e28bb3fc2ce4a6a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___9>


; <Skipped let __proj__Mktuple14__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f51203e57fd66f9e9293b8962c57edfe () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___10>


; <Skipped let __proj__Mktuple14__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7c34e0c28edc5fc4ad24d0b749c0adb7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___11>


; <Skipped let __proj__Mktuple14__item___11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_8772cc50ea320af17b3f2371c273679a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___12@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___12>


; <Skipped let __proj__Mktuple14__item___12/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___13>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_039da0b9a8da1a651a1c570e55456614 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___13@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___13>


; <Skipped let __proj__Mktuple14__item___13/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___14>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_579ada2eb036c15c7306dac5b648153e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___14@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___14>


; <Skipped let __proj__Mktuple14__item___14/>


; End Externals for module FStar.Pervasives.Native


; Externals for interface FStar.Pervasives


; <Start encoding val FStar.Pervasives.remove_unused_type_parameters>

(declare-fun FStar.Pervasives.remove_unused_type_parameters (Term) Term)
(declare-fun Tm_arrow_555d62757eeaf90340982fcdf25f6704 () Term)
(declare-fun FStar.Pervasives.remove_unused_type_parameters@tok () Term)

; </end encoding val FStar.Pervasives.remove_unused_type_parameters>


; <Start encoding let pattern>

(declare-fun FStar.Pervasives.pattern () Term)

; </end encoding let pattern>


; <Start encoding val FStar.Pervasives.smt_pat>

(declare-fun FStar.Pervasives.smt_pat (Term Term) Term)
(declare-fun Tm_arrow_ce7b692455ad1649f97902066cf7c9aa () Term)
(declare-fun FStar.Pervasives.smt_pat@tok () Term)

; </end encoding val FStar.Pervasives.smt_pat>


; <Start encoding val FStar.Pervasives.smt_pat_or>

(declare-fun FStar.Pervasives.smt_pat_or (Term) Term)
(declare-fun Tm_arrow_cbfaca2770c8ef7d6393b664b7ea1a41 () Term)
(declare-fun FStar.Pervasives.smt_pat_or@tok () Term)

; </end encoding val FStar.Pervasives.smt_pat_or>


; <Start encoding let eqtype_u>

(declare-fun FStar.Pervasives.eqtype_u () Term)


; </end encoding let eqtype_u>


; <Skipped effect Lemma a pre post pats = Prims.Pure a/>


; <Start encoding val FStar.Pervasives.spinoff>

(declare-fun FStar.Pervasives.spinoff (Term) Term)

(declare-fun FStar.Pervasives.spinoff@tok () Term)

; </end encoding val FStar.Pervasives.spinoff>


; <Start encoding val FStar.Pervasives.spinoff_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.spinoff_eq (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.spinoff_eq@tok () Term)

; </end encoding val FStar.Pervasives.spinoff_eq>


; <Start encoding val FStar.Pervasives.spinoff_equiv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.spinoff_equiv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.spinoff_equiv@tok () Term)

; </end encoding val FStar.Pervasives.spinoff_equiv>


; <Start encoding val FStar.Pervasives.assert_spinoff>

(declare-fun FStar.Pervasives.assert_spinoff (Term) Term)

(declare-fun Tm_arrow_071538fd1c72fb82c7bb7b280daddf84 () Term)
(declare-fun FStar.Pervasives.assert_spinoff@tok () Term)


; </end encoding val FStar.Pervasives.assert_spinoff>


; <Start encoding let id>

(declare-fun FStar.Pervasives.id (Term Term) Term)

(declare-fun FStar.Pervasives.id@tok () Term)

; </end encoding let id>


; <Start encoding let trivial_pure_post>

(declare-fun FStar.Pervasives.trivial_pure_post (Term) Term)
(declare-fun Tm_arrow_53823f439377767fbcd3e27ebcdb971b () Term)
(declare-fun FStar.Pervasives.trivial_pure_post@tok () Term)

(declare-fun Tm_abs_5e34897418ce4950a4effcc8c159cf53 (Term) Term)

; </end encoding let trivial_pure_post>


; <Start encoding val FStar.Pervasives.ambient>

(declare-fun FStar.Pervasives.ambient (Term Term) Term)
(declare-fun Tm_arrow_9e007179360e2932d75ab29019e3d7fa () Term)
(declare-fun FStar.Pervasives.ambient@tok () Term)

; </end encoding val FStar.Pervasives.ambient>


; <Start encoding val FStar.Pervasives.intro_ambient>

(declare-fun FStar.Pervasives.intro_ambient (Term Term) Term)
(declare-fun Tm_arrow_6fc6334d56387f3d408122a4bd045e7e () Term)
(declare-fun FStar.Pervasives.intro_ambient@tok () Term)

; </end encoding val FStar.Pervasives.intro_ambient>


; <Start encoding val FStar.Pervasives.normalize_term>

(declare-fun FStar.Pervasives.normalize_term (Term Term) Term)

(declare-fun FStar.Pervasives.normalize_term@tok () Term)

; </end encoding val FStar.Pervasives.normalize_term>


; <Start encoding val FStar.Pervasives.normalize>

(declare-fun FStar.Pervasives.normalize (Term) Term)

(declare-fun FStar.Pervasives.normalize@tok () Term)

; </end encoding val FStar.Pervasives.normalize>


; <Start encoding val FStar.Pervasives.norm_step>

(declare-fun FStar.Pervasives.norm_step () Term)

; </end encoding val FStar.Pervasives.norm_step>


; <Start encoding val FStar.Pervasives.simplify>

(declare-fun FStar.Pervasives.simplify (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.simplify>


; <Start encoding val FStar.Pervasives.weak>

(declare-fun FStar.Pervasives.weak (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.weak>


; <Start encoding val FStar.Pervasives.hnf>

(declare-fun FStar.Pervasives.hnf (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.hnf>


; <Start encoding val FStar.Pervasives.primops>

(declare-fun FStar.Pervasives.primops (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.primops>


; <Start encoding val FStar.Pervasives.delta>

(declare-fun FStar.Pervasives.delta (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.delta>


; <Start encoding val FStar.Pervasives.norm_debug>

(declare-fun FStar.Pervasives.norm_debug (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.norm_debug>


; <Start encoding val FStar.Pervasives.zeta>

(declare-fun FStar.Pervasives.zeta (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.zeta>


; <Start encoding val FStar.Pervasives.zeta_full>

(declare-fun FStar.Pervasives.zeta_full (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.zeta_full>


; <Start encoding val FStar.Pervasives.iota>

(declare-fun FStar.Pervasives.iota (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.iota>


; <Start encoding val FStar.Pervasives.nbe>

(declare-fun FStar.Pervasives.nbe (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.nbe>


; <Start encoding val FStar.Pervasives.reify_>

(declare-fun FStar.Pervasives.reify_ (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.reify_>


; <Start encoding val FStar.Pervasives.delta_only>

(declare-fun FStar.Pervasives.delta_only (Term) Term)
(declare-fun Tm_arrow_f14a20345cd55ddda96b6c4cc49e05f1 () Term)
(declare-fun FStar.Pervasives.delta_only@tok () Term)

; </end encoding val FStar.Pervasives.delta_only>


; <Start encoding val FStar.Pervasives.delta_fully>

(declare-fun FStar.Pervasives.delta_fully (Term) Term)

(declare-fun FStar.Pervasives.delta_fully@tok () Term)

; </end encoding val FStar.Pervasives.delta_fully>


; <Start encoding val FStar.Pervasives.delta_attr>

(declare-fun FStar.Pervasives.delta_attr (Term) Term)

(declare-fun FStar.Pervasives.delta_attr@tok () Term)

; </end encoding val FStar.Pervasives.delta_attr>


; <Start encoding val FStar.Pervasives.delta_qualifier>

(declare-fun FStar.Pervasives.delta_qualifier (Term) Term)

(declare-fun FStar.Pervasives.delta_qualifier@tok () Term)

; </end encoding val FStar.Pervasives.delta_qualifier>


; <Start encoding val FStar.Pervasives.delta_namespace>

(declare-fun FStar.Pervasives.delta_namespace (Term) Term)

(declare-fun FStar.Pervasives.delta_namespace@tok () Term)

; </end encoding val FStar.Pervasives.delta_namespace>


; <Start encoding val FStar.Pervasives.unmeta>

(declare-fun FStar.Pervasives.unmeta (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unmeta>


; <Start encoding val FStar.Pervasives.unascribe>

(declare-fun FStar.Pervasives.unascribe (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unascribe>


; <Start encoding val FStar.Pervasives.norm>

(declare-fun FStar.Pervasives.norm (Term Term Term) Term)
(declare-fun Tm_arrow_7d92e7a4aa7eee4098b10c5f1b3d77ea () Term)
(declare-fun FStar.Pervasives.norm@tok () Term)

; </end encoding val FStar.Pervasives.norm>


; <Start encoding val FStar.Pervasives.assert_norm>

(declare-fun FStar.Pervasives.assert_norm (Term) Term)

(declare-fun Tm_arrow_ee24fcf624d074d3c637ee61e4a867fb () Term)
(declare-fun FStar.Pervasives.assert_norm@tok () Term)


; </end encoding val FStar.Pervasives.assert_norm>


; <Start encoding val FStar.Pervasives.normalize_term_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.normalize_term_spec (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.normalize_term_spec@tok () Term)

; </end encoding val FStar.Pervasives.normalize_term_spec>


; <Start encoding val FStar.Pervasives.normalize_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.normalize_spec (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.normalize_spec@tok () Term)

; </end encoding val FStar.Pervasives.normalize_spec>


; <Start encoding val FStar.Pervasives.norm_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.norm_spec (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.norm_spec@tok () Term)

; </end encoding val FStar.Pervasives.norm_spec>


; <Start encoding let reveal_opaque>

(declare-fun FStar.Pervasives.reveal_opaque (Term Term) Term)
(declare-fun Tm_refine_2be30877b98f57c6ef5847ce3a81c23c (Term Term Term) Term)
(declare-fun Tm_arrow_ba8e05da7828191e456b9d6196e5c486 (Term Term) Term)
(declare-fun Tm_arrow_a3d09fecedc35d104f95c5fde10a81ff () Term)
(declare-fun FStar.Pervasives.reveal_opaque@tok () Term)



; </end encoding let reveal_opaque>


; <Start encoding let pure_return>

(declare-fun FStar.Pervasives.pure_return (Term Term) Term)
(declare-fun Tm_arrow_0dff8d294aeaf0b1d7e9cad664c9a15f () Term)
(declare-fun FStar.Pervasives.pure_return@tok () Term)

(declare-fun Tm_abs_bc5117f6a06a581c69e04141781c86d0 (Term Term Term) Term)
(declare-fun Tm_arrow_c88a29758356586fc450d481d4b685f3 (Term) Term)
(declare-fun Tm_abs_bdac9a3f32789788b83138a3a4262d0d (Term Term) Term)

; </end encoding let pure_return>


; <Start encoding let pure_bind_wp>

(declare-fun Tm_arrow_c05bc9331677cc1a187ad7677301a601 (Term Term) Term)
(declare-fun FStar.Pervasives.pure_bind_wp (Term Term Term Term) Term)

(declare-fun Tm_arrow_f8eba41a4bcb9aca0e3c11224f695d1e () Term)
(declare-fun FStar.Pervasives.pure_bind_wp@tok () Term)


(declare-fun Tm_abs_d0f415a5361a9d7988d8e425dc193472 (Term Term Term) Term)

(declare-fun Tm_abs_72b65b71b828688dbb0ba657715a194c (Term Term Term Term) Term)

; </end encoding let pure_bind_wp>


; <Start encoding let pure_if_then_else>

(declare-fun FStar.Pervasives.pure_if_then_else (Term Term Term Term) Term)
(declare-fun Tm_arrow_5911c11ab85061b4a8acf6a6ff43aaea () Term)
(declare-fun FStar.Pervasives.pure_if_then_else@tok () Term)

(declare-fun Tm_abs_614d7ab3976dfea6b6428085a93bafcc (Term Term Term Term) Term)

; </end encoding let pure_if_then_else>


; <Start encoding let pure_ite_wp>

(declare-fun FStar.Pervasives.pure_ite_wp (Term Term) Term)
(declare-fun Tm_arrow_983cc9c1e881fffd3b37c61b327d54c8 () Term)
(declare-fun FStar.Pervasives.pure_ite_wp@tok () Term)

(declare-fun Tm_abs_ea1703a99385b474600aa7a3bdb045c5 (Term Term Term) Term)
(declare-fun Tm_arrow_b275e247a67e3e77d7c5997d864d1247 (Term) Term)
(declare-fun Tm_abs_f9993abe3e10fc5902262cf22e5f5e1c (Term Term Term) Term)

(declare-fun Tm_abs_a4d8a67e708eb0f8e41d6eefd90d8b3d (Term Term) Term)

; </end encoding let pure_ite_wp>


; <Start encoding let pure_close_wp>


(declare-fun FStar.Pervasives.pure_close_wp (Term Term Term) Term)

(declare-fun Tm_arrow_6424f17922e38fc8eb3b7ad8d9107d78 () Term)
(declare-fun FStar.Pervasives.pure_close_wp@tok () Term)




(declare-fun Tm_abs_bef01cdc202d648a37f7725a1e8579fa (Term Term Term) Term)

; </end encoding let pure_close_wp>


; <Start encoding let pure_null_wp>

(declare-fun FStar.Pervasives.pure_null_wp (Term) Term)
(declare-fun Tm_arrow_e02f472dad10492b4fdaf21971ae643f () Term)
(declare-fun FStar.Pervasives.pure_null_wp@tok () Term)



(declare-fun Tm_abs_c7a599bd05f6d553477b7b3a5a51d357 (Term) Term)

; </end encoding let pure_null_wp>


; <Start encoding let pure_assert_wp>

(declare-fun FStar.Pervasives.pure_assert_wp (Term) Term)

(declare-fun FStar.Pervasives.pure_assert_wp@tok () Term)

; </end encoding let pure_assert_wp>


; <Start encoding let pure_assume_wp>

(declare-fun FStar.Pervasives.pure_assume_wp (Term) Term)

(declare-fun FStar.Pervasives.pure_assume_wp@tok () Term)

; </end encoding let pure_assume_wp>


; <Skipped new_effect { DIV ... }/>


; <Skipped sub_effect PURE ~> DIV/>


; <Start encoding let div_hoare_to_wp>

(declare-fun FStar.Pervasives.div_hoare_to_wp (Term Term Term) Term)
(declare-fun Tm_arrow_e81e37f60b892c60a4b806bfecd6c240 () Term)
(declare-fun FStar.Pervasives.div_hoare_to_wp@tok () Term)




(declare-fun Tm_abs_69982e78bbdc9cbdfcc98c8c3ec276f1 (Term Term Term Term) Term)


(declare-fun Tm_abs_95829b03554cf2093d2bc29e28500b94 (Term Term Term) Term)

; </end encoding let div_hoare_to_wp>


; <Skipped effect Div a pre post = FStar.Pervasives.DIV a/>


; <Skipped effect Dv a = FStar.Pervasives.DIV a/>


; <Skipped effect EXT a = FStar.Pervasives.Dv a/>


; <Start encoding let st_pre_h>

(declare-fun FStar.Pervasives.st_pre_h (Term) Term)

(declare-fun FStar.Pervasives.st_pre_h@tok () Term)


; </end encoding let st_pre_h>


; <Start encoding let st_post_h'>

(declare-fun FStar.Pervasives.st_post_h_ (Term Term Term) Term)
(declare-fun Tm_arrow_659175ed40df3b798f91ffaee9e689bd () Term)
(declare-fun FStar.Pervasives.st_post_h_@tok () Term)

(declare-fun Tm_arrow_14435f7112db17792f8cd33f8f7ea859 (Term Term Term) Term)

; </end encoding let st_post_h'>


; <Start encoding let st_post_h>

(declare-fun FStar.Pervasives.st_post_h (Term Term) Term)

(declare-fun FStar.Pervasives.st_post_h@tok () Term)

; </end encoding let st_post_h>


; <Start encoding let st_wp_h>

(declare-fun FStar.Pervasives.st_wp_h (Term Term) Term)

(declare-fun FStar.Pervasives.st_wp_h@tok () Term)
(declare-fun Tm_arrow_c80b139653078194d2de90941effdc68 (Term Term) Term)

; </end encoding let st_wp_h>


; <Start encoding let st_return>

(declare-fun FStar.Pervasives.st_return (Term Term Term Term) Term)

(declare-fun Tm_arrow_6bfe4bf6faf1fb53a521d575cefc35ef () Term)
(declare-fun FStar.Pervasives.st_return@tok () Term)


; </end encoding let st_return>


; <Start encoding let st_bind_wp>

(declare-fun Tm_arrow_c6e0af8c2ccbdda79db5c09d07e87e35 (Term Term Term) Term)
(declare-fun FStar.Pervasives.st_bind_wp (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_0eca50df2f29485bdbf578799f16b4a6 () Term)
(declare-fun FStar.Pervasives.st_bind_wp@tok () Term)

(declare-fun Tm_arrow_eb9b1a038524b37579c152a3f169145e (Term Term) Term)
(declare-fun Tm_abs_0f3b5ee9eaa8de8cacad7d3dcacb4558 (Term Term Term Term) Term)

; </end encoding let st_bind_wp>


; <Start encoding let st_if_then_else>

(declare-fun FStar.Pervasives.st_if_then_else (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_6e48361e1a1c92df6ec1ff87e622ddad () Term)
(declare-fun FStar.Pervasives.st_if_then_else@tok () Term)

; </end encoding let st_if_then_else>


; <Start encoding let st_ite_wp>

(declare-fun FStar.Pervasives.st_ite_wp (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_eaad896c6afdcb7ade2e80b5a6a930af () Term)
(declare-fun FStar.Pervasives.st_ite_wp@tok () Term)

; </end encoding let st_ite_wp>


; <Start encoding let st_stronger>

(declare-fun FStar.Pervasives.st_stronger (Term Term Term Term) Term)
(declare-fun Tm_arrow_ae4d7f489de84317e0022bf89d45dd95 () Term)
(declare-fun FStar.Pervasives.st_stronger@tok () Term)

; </end encoding let st_stronger>


; <Start encoding let st_close_wp>


(declare-fun FStar.Pervasives.st_close_wp (Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_de6d3045642382698e9e38d41acfd7cc () Term)
(declare-fun FStar.Pervasives.st_close_wp@tok () Term)


; </end encoding let st_close_wp>


; <Start encoding let st_trivial>

(declare-fun FStar.Pervasives.st_trivial (Term Term Term) Term)
(declare-fun Tm_arrow_f145e04ff3c7033bdfc718f7f5bb1df0 () Term)
(declare-fun FStar.Pervasives.st_trivial@tok () Term)

(declare-fun Tm_abs_89b21c42be5bc00d63e29f63ae20d4e2 (Term Term) Term)

; </end encoding let st_trivial>


; <Skipped new_effect { STATE_h ... }/>


; <Start encoding type FStar.Pervasives.result>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.result (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.result@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.V (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.V_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.V_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.V
(declare-fun FStar.Pervasives.V@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.E (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.E_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.E_e (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.E
(declare-fun FStar.Pervasives.E@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Err (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Err_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Err_msg (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Err
(declare-fun FStar.Pervasives.Err@tok () Term)
(declare-fun Tm_arrow_30908143640041985b9200e2fb38a259 () Term)
(declare-fun Tm_arrow_f8bb10130fea772e0f786d78a188c381 () Term)
(declare-fun Tm_arrow_93661c87034b0b64c4714dafbe2b02e6 () Term)

; <start constructor FStar.Pervasives.result>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.result ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
263)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Pervasives.result @x0))
 
;;no pats
:qid is-FStar.Pervasives.result))))

; </end constructor FStar.Pervasives.result>


; <start constructor FStar.Pervasives.V>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.V ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
270)
(= __@x0
(FStar.Pervasives.V (FStar.Pervasives.V_a __@x0)
(FStar.Pervasives.V_v __@x0)))))

; </end constructor FStar.Pervasives.V>


; <start constructor FStar.Pervasives.E>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.E ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
275)
(= __@x0
(FStar.Pervasives.E (FStar.Pervasives.E_a __@x0)
(FStar.Pervasives.E_e __@x0)))))

; </end constructor FStar.Pervasives.E>


; <start constructor FStar.Pervasives.Err>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Err ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
280)
(= __@x0
(FStar.Pervasives.Err (FStar.Pervasives.Err_a __@x0)
(FStar.Pervasives.Err_msg __@x0)))))

; </end constructor FStar.Pervasives.Err>


; </end encoding type FStar.Pervasives.result>


; <Start encoding val FStar.Pervasives.uu___is_V>

(declare-fun FStar.Pervasives.uu___is_V (Term Term) Term)
(declare-fun Tm_arrow_5cd1d0722a6a986faf6f8e557186fe24 () Term)
(declare-fun FStar.Pervasives.uu___is_V@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_V>


; <Skipped let uu___is_V/>


; <Start encoding val FStar.Pervasives.__proj__V__item__v>

(declare-fun Tm_refine_9db520b26a7f39c5a01493a3f375290d (Term) Term)
(declare-fun FStar.Pervasives.__proj__V__item__v (Term Term) Term)

(declare-fun Tm_arrow_1ea119bf213c016916a7095486e28467 () Term)
(declare-fun FStar.Pervasives.__proj__V__item__v@tok () Term)

; </end encoding val FStar.Pervasives.__proj__V__item__v>


; <Skipped let __proj__V__item__v/>


; <Start encoding val FStar.Pervasives.uu___is_E>

(declare-fun FStar.Pervasives.uu___is_E (Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_E@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_E>


; <Skipped let uu___is_E/>


; <Start encoding val FStar.Pervasives.__proj__E__item__e>

(declare-fun Tm_refine_95e1e2ee29104754cc3740f5575fc6e5 (Term) Term)
(declare-fun FStar.Pervasives.__proj__E__item__e (Term Term) Term)

(declare-fun Tm_arrow_19e73c373dbf3f9945c6fcfce8a07661 () Term)
(declare-fun FStar.Pervasives.__proj__E__item__e@tok () Term)

; </end encoding val FStar.Pervasives.__proj__E__item__e>


; <Skipped let __proj__E__item__e/>


; <Start encoding val FStar.Pervasives.uu___is_Err>

(declare-fun FStar.Pervasives.uu___is_Err (Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_Err@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Err>


; <Skipped let uu___is_Err/>


; <Start encoding val FStar.Pervasives.__proj__Err__item__msg>

(declare-fun Tm_refine_22fb403854eba07427f92e79848f9d9f (Term) Term)
(declare-fun FStar.Pervasives.__proj__Err__item__msg (Term Term) Term)

(declare-fun Tm_arrow_f7e3debb858e412c9497460c5187d5cd () Term)
(declare-fun FStar.Pervasives.__proj__Err__item__msg@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Err__item__msg>


; <Skipped let __proj__Err__item__msg/>


; <Start encoding let ex_pre>

(declare-fun FStar.Pervasives.ex_pre () Term)

; </end encoding let ex_pre>


; <Start encoding let ex_post'>

(declare-fun FStar.Pervasives.ex_post_ (Term Term) Term)

(declare-fun FStar.Pervasives.ex_post_@tok () Term)
(declare-fun Tm_refine_a4dcdeeacbcb04d05a6720f786918fd6 (Term Term) Term)
(declare-fun Tm_arrow_68b66d987e8a7bdf825af8b370553e65 (Term Term) Term)

; </end encoding let ex_post'>


; <Start encoding let ex_post>

(declare-fun FStar.Pervasives.ex_post (Term) Term)

(declare-fun FStar.Pervasives.ex_post@tok () Term)

; </end encoding let ex_post>


; <Start encoding let ex_wp>

(declare-fun FStar.Pervasives.ex_wp (Term) Term)

(declare-fun FStar.Pervasives.ex_wp@tok () Term)
(declare-fun Tm_arrow_58168e52ae0908fefec42cac825ecc69 (Term) Term)

; </end encoding let ex_wp>


; <Start encoding let ex_return>

(declare-fun FStar.Pervasives.ex_return (Term Term Term) Term)
(declare-fun Tm_arrow_375264f6f19b4e37d33ffba9f6b1c7d2 () Term)
(declare-fun FStar.Pervasives.ex_return@tok () Term)

; </end encoding let ex_return>


; <Start encoding let ex_bind_wp>

(declare-fun Tm_arrow_3eb2992a529511f5b0ff2fef4e4594ad (Term Term) Term)
(declare-fun FStar.Pervasives.ex_bind_wp (Term Term Term Term Term) Term)

(declare-fun Tm_arrow_1da2056f1a2fe3dc8db7decf5cbd5885 () Term)
(declare-fun FStar.Pervasives.ex_bind_wp@tok () Term)

(declare-fun Tm_arrow_ca5db633696caf7e0cd44c11654eed8b (Term) Term)
(declare-fun Tm_abs_c1d9037a5cc10cc07ba9b6a7a58728db (Term Term Term Term) Term)

; </end encoding let ex_bind_wp>


; <Start encoding let ex_if_then_else>

(declare-fun FStar.Pervasives.ex_if_then_else (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_08bd7ce530cc6e8b4a3f8dadbd0806b0 () Term)
(declare-fun FStar.Pervasives.ex_if_then_else@tok () Term)

; </end encoding let ex_if_then_else>


; <Start encoding let ex_ite_wp>

(declare-fun FStar.Pervasives.ex_ite_wp (Term Term Term) Term)
(declare-fun Tm_arrow_c2a8c761b16a75376b24262cd8c50369 () Term)
(declare-fun FStar.Pervasives.ex_ite_wp@tok () Term)

; </end encoding let ex_ite_wp>


; <Start encoding let ex_stronger>

(declare-fun FStar.Pervasives.ex_stronger (Term Term Term) Term)
(declare-fun Tm_arrow_1376d97b5d43e7d77d56729e2a3e04af () Term)
(declare-fun FStar.Pervasives.ex_stronger@tok () Term)

; </end encoding let ex_stronger>


; <Start encoding let ex_close_wp>


(declare-fun FStar.Pervasives.ex_close_wp (Term Term Term Term) Term)

(declare-fun Tm_arrow_814af0adff92aa08c5b8b0951bcb1959 () Term)
(declare-fun FStar.Pervasives.ex_close_wp@tok () Term)


; </end encoding let ex_close_wp>


; <Start encoding let ex_trivial>

(declare-fun FStar.Pervasives.ex_trivial (Term Term) Term)
(declare-fun Tm_arrow_ee4a787765920b0cb4357a47a0d3ac5c () Term)
(declare-fun FStar.Pervasives.ex_trivial@tok () Term)

(declare-fun Tm_abs_5cc223716d095f4545f0dcc745acad5d (Term) Term)

; </end encoding let ex_trivial>


; <Skipped new_effect { EXN ... }/>


; <Skipped effect Exn a pre post = FStar.Pervasives.EXN a/>


; <Start encoding let lift_div_exn>

(declare-fun FStar.Pervasives.lift_div_exn (Term Term Term) Term)
(declare-fun Tm_arrow_8196682216f286f6fe3a7dffb3de7d02 () Term)
(declare-fun FStar.Pervasives.lift_div_exn@tok () Term)

(declare-fun Tm_abs_c2b605ddd5d1991642baf5762d2b1dc5 (Term Term) Term)

; </end encoding let lift_div_exn>


; <Skipped sub_effect DIV ~> EXN/>


; <Skipped effect Ex a = FStar.Pervasives.Exn a/>


; <Start encoding let all_pre_h>

(declare-fun FStar.Pervasives.all_pre_h (Term) Term)

(declare-fun FStar.Pervasives.all_pre_h@tok () Term)


; </end encoding let all_pre_h>


; <Start encoding let all_post_h'>

(declare-fun FStar.Pervasives.all_post_h_ (Term Term Term) Term)

(declare-fun FStar.Pervasives.all_post_h_@tok () Term)

(declare-fun Tm_arrow_fc269489cb2e24a10c7710a1f7f9d269 (Term Term Term) Term)

; </end encoding let all_post_h'>


; <Start encoding let all_post_h>

(declare-fun FStar.Pervasives.all_post_h (Term Term) Term)

(declare-fun FStar.Pervasives.all_post_h@tok () Term)

; </end encoding let all_post_h>


; <Start encoding let all_wp_h>

(declare-fun FStar.Pervasives.all_wp_h (Term Term) Term)

(declare-fun FStar.Pervasives.all_wp_h@tok () Term)
(declare-fun Tm_arrow_1cd90c71d90a216d9fb0ba0321a1d3b5 (Term Term) Term)

; </end encoding let all_wp_h>


; <Start encoding let all_return>

(declare-fun FStar.Pervasives.all_return (Term Term Term Term) Term)

(declare-fun Tm_arrow_3f61557667800fb54cc62e48a5201f9d () Term)
(declare-fun FStar.Pervasives.all_return@tok () Term)


; </end encoding let all_return>


; <Start encoding let all_bind_wp>

(declare-fun Tm_arrow_b567b509414635f00096b9b1c3e30b57 (Term Term Term) Term)
(declare-fun FStar.Pervasives.all_bind_wp (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_6ac18e25eb49f55ae0ce9c14679ecc22 () Term)
(declare-fun FStar.Pervasives.all_bind_wp@tok () Term)

(declare-fun Tm_arrow_59cac8a9b1ae3aa9511b8a867f8e934e (Term Term) Term)
(declare-fun Tm_abs_35ddc99cefc0079215f6f6ab3c58856d (Term Term Term Term Term) Term)

; </end encoding let all_bind_wp>


; <Start encoding let all_if_then_else>

(declare-fun FStar.Pervasives.all_if_then_else (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_491eee2c8dc4eab4d420326a8285d2c4 () Term)
(declare-fun FStar.Pervasives.all_if_then_else@tok () Term)

; </end encoding let all_if_then_else>


; <Start encoding let all_ite_wp>

(declare-fun FStar.Pervasives.all_ite_wp (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_20fdb4e6d0c32f949f55e39a059913a7 () Term)
(declare-fun FStar.Pervasives.all_ite_wp@tok () Term)

; </end encoding let all_ite_wp>


; <Start encoding let all_stronger>

(declare-fun FStar.Pervasives.all_stronger (Term Term Term Term) Term)
(declare-fun Tm_arrow_073b21d0ec8edf2dda32907b45ec5f68 () Term)
(declare-fun FStar.Pervasives.all_stronger@tok () Term)

; </end encoding let all_stronger>


; <Start encoding let all_close_wp>


(declare-fun FStar.Pervasives.all_close_wp (Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_803d195802308e8beadf04438d3a6508 () Term)
(declare-fun FStar.Pervasives.all_close_wp@tok () Term)


; </end encoding let all_close_wp>


; <Start encoding let all_trivial>

(declare-fun FStar.Pervasives.all_trivial (Term Term Term) Term)
(declare-fun Tm_arrow_957927b0d25001784693eee8b2182308 () Term)
(declare-fun FStar.Pervasives.all_trivial@tok () Term)

(declare-fun Tm_abs_22e463dbd987016e31d6bc67025a7cd9 (Term Term) Term)

; </end encoding let all_trivial>


; <Skipped new_effect { ALL_h ... }/>


; <Start encoding val FStar.Pervasives.inversion>

(declare-fun FStar.Pervasives.inversion (Term) Term)

(declare-fun FStar.Pervasives.inversion@tok () Term)

; </end encoding val FStar.Pervasives.inversion>


; <Start encoding val FStar.Pervasives.allow_inversion>

(declare-fun FStar.Pervasives.allow_inversion (Term) Term)
(declare-fun Tm_refine_363615bee79fae5066b7c8bd06c286d0 (Term) Term)
(declare-fun Tm_arrow_bcab9cce464ec0f76562bc48c17ba410 () Term)
(declare-fun FStar.Pervasives.allow_inversion@tok () Term)


; </end encoding val FStar.Pervasives.allow_inversion>


; <Start encoding val FStar.Pervasives.invertOption>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.invertOption (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.invertOption@tok () Term)

; </end encoding val FStar.Pervasives.invertOption>


; <Start encoding type FStar.Pervasives.either>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.either (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.either@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Inl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Inl
(declare-fun FStar.Pervasives.Inl@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Inr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Inr
(declare-fun FStar.Pervasives.Inr@tok () Term)
(declare-fun Tm_arrow_065da0adeba0c4ae0da1476ececee84c () Term)
(declare-fun Tm_arrow_c883938642e6d97d79c975d8d94b4aac () Term)

; <start constructor FStar.Pervasives.either>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.either ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
402)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(FStar.Pervasives.either @x0
@x1))
 
;;no pats
:qid is-FStar.Pervasives.either))))

; </end constructor FStar.Pervasives.either>


; <start constructor FStar.Pervasives.Inl>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Inl ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
409)
(= __@x0
(FStar.Pervasives.Inl (FStar.Pervasives.Inl_a __@x0)
(FStar.Pervasives.Inl_b __@x0)
(FStar.Pervasives.Inl_v __@x0)))))

; </end constructor FStar.Pervasives.Inl>


; <start constructor FStar.Pervasives.Inr>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Inr ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
414)
(= __@x0
(FStar.Pervasives.Inr (FStar.Pervasives.Inr_a __@x0)
(FStar.Pervasives.Inr_b __@x0)
(FStar.Pervasives.Inr_v __@x0)))))

; </end constructor FStar.Pervasives.Inr>


; </end encoding type FStar.Pervasives.either>


; <Start encoding assume FStar.Pervasives.either__uu___haseq>


; </end encoding assume FStar.Pervasives.either__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Inl>

(declare-fun FStar.Pervasives.uu___is_Inl (Term Term Term) Term)
(declare-fun Tm_arrow_af0c68f1e39d4d6020c0873b16730c7d () Term)
(declare-fun FStar.Pervasives.uu___is_Inl@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Inl>


; <Skipped let uu___is_Inl/>


; <Start encoding val FStar.Pervasives.__proj__Inl__item__v>

(declare-fun Tm_refine_85e0cc884f8457202f90cd77f23733ba (Term Term) Term)
(declare-fun FStar.Pervasives.__proj__Inl__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_a80e0750277867ba1a434ad3bba8702d () Term)
(declare-fun FStar.Pervasives.__proj__Inl__item__v@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Inl__item__v>


; <Skipped let __proj__Inl__item__v/>


; <Start encoding val FStar.Pervasives.uu___is_Inr>

(declare-fun FStar.Pervasives.uu___is_Inr (Term Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_Inr@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Inr>


; <Skipped let uu___is_Inr/>


; <Start encoding val FStar.Pervasives.__proj__Inr__item__v>

(declare-fun Tm_refine_8f1f5f564dae90240db429de2eb41517 (Term Term) Term)
(declare-fun FStar.Pervasives.__proj__Inr__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_df618db6b42762940f198036c8a56200 () Term)
(declare-fun FStar.Pervasives.__proj__Inr__item__v@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Inr__item__v>


; <Skipped let __proj__Inr__item__v/>


; <Start encoding let dfst>


(declare-fun FStar.Pervasives.dfst (Term Term Term) Term)


(declare-fun FStar.Pervasives.dfst@tok () Term)


; </end encoding let dfst>


; <Start encoding let dsnd>


(declare-fun FStar.Pervasives.dsnd (Term Term Term) Term)


(declare-fun FStar.Pervasives.dsnd@tok () Term)


; </end encoding let dsnd>


; <Start encoding type FStar.Pervasives.dtuple3>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple3@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple3 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__3 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Mkdtuple3
(declare-fun FStar.Pervasives.Mkdtuple3@tok () Term)

(declare-fun Tm_arrow_0b6559e6ff3addf84b0c2880affbb335 (Term Term) Term)




(declare-fun Tm_arrow_8423f67df62f9e824c55756f9e26058d () Term)

; <start constructor FStar.Pervasives.dtuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
450)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple3 @x0
@x1
@x2))
 
;;no pats
:qid is-FStar.Pervasives.dtuple3))))

; </end constructor FStar.Pervasives.dtuple3>


; <start constructor FStar.Pervasives.Mkdtuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
461)
(= __@x0
(FStar.Pervasives.Mkdtuple3 (FStar.Pervasives.Mkdtuple3_a __@x0)
(FStar.Pervasives.Mkdtuple3_b __@x0)
(FStar.Pervasives.Mkdtuple3_c __@x0)
(FStar.Pervasives.Mkdtuple3__1 __@x0)
(FStar.Pervasives.Mkdtuple3__2 __@x0)
(FStar.Pervasives.Mkdtuple3__3 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple3>


; </end encoding type FStar.Pervasives.dtuple3>


; <Start encoding assume FStar.Pervasives.dtuple3__uu___haseq>




; </end encoding assume FStar.Pervasives.dtuple3__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Mkdtuple3>



(declare-fun FStar.Pervasives.uu___is_Mkdtuple3 (Term Term Term Term) Term)


(declare-fun Tm_arrow_70452cb82cd0a282ca9a2dbeb54c1b04 () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple3@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Mkdtuple3>


; <Skipped let uu___is_Mkdtuple3/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple3__item___1>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___1 (Term Term Term Term) Term)


(declare-fun Tm_arrow_255f0cfe499b1d2e9836e157bce1dba3 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___1@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple3__item___1>


; <Skipped let __proj__Mkdtuple3__item___1/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple3__item___2>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___2 (Term Term Term Term) Term)


(declare-fun Tm_arrow_ea1ded11f7d194a26e812f407333a011 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___2@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple3__item___2>


; <Skipped let __proj__Mkdtuple3__item___2/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple3__item___3>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___3 (Term Term Term Term) Term)


(declare-fun Tm_arrow_1d7ad5cfa0fff643640e3f74466d283e () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___3@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple3__item___3>


; <Skipped let __proj__Mkdtuple3__item___3/>


; <Start encoding type FStar.Pervasives.dtuple4>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple4 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple4@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple4 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__4 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Mkdtuple4
(declare-fun FStar.Pervasives.Mkdtuple4@tok () Term)


(declare-fun Tm_arrow_af8eda99ba3685403be22a88669dcb35 (Term Term Term) Term)






(declare-fun Tm_arrow_cef44a6056754f192c2446237c4c1408 () Term)

; <start constructor FStar.Pervasives.dtuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
519)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple4 @x0
@x1
@x2
@x3))
 
;;no pats
:qid is-FStar.Pervasives.dtuple4))))

; </end constructor FStar.Pervasives.dtuple4>


; <start constructor FStar.Pervasives.Mkdtuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
532)
(= __@x0
(FStar.Pervasives.Mkdtuple4 (FStar.Pervasives.Mkdtuple4_a __@x0)
(FStar.Pervasives.Mkdtuple4_b __@x0)
(FStar.Pervasives.Mkdtuple4_c __@x0)
(FStar.Pervasives.Mkdtuple4_d __@x0)
(FStar.Pervasives.Mkdtuple4__1 __@x0)
(FStar.Pervasives.Mkdtuple4__2 __@x0)
(FStar.Pervasives.Mkdtuple4__3 __@x0)
(FStar.Pervasives.Mkdtuple4__4 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple4>


; </end encoding type FStar.Pervasives.dtuple4>


; <Start encoding assume FStar.Pervasives.dtuple4__uu___haseq>





; </end encoding assume FStar.Pervasives.dtuple4__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Mkdtuple4>




(declare-fun FStar.Pervasives.uu___is_Mkdtuple4 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_76a226dc2cea2ddd4e4258637fc95e5b () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple4@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Mkdtuple4>


; <Skipped let uu___is_Mkdtuple4/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___1>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___1 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_1da4d60ab69f411b912e76cc25e77965 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___1@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___1>


; <Skipped let __proj__Mkdtuple4__item___1/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___2>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___2 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_a86867091548f3d7d3ca1cb8b0458b9f () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___2@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___2>


; <Skipped let __proj__Mkdtuple4__item___2/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___3>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___3 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_ee72552fcc293405aa0e854ba26f27ac () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___3@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___3>


; <Skipped let __proj__Mkdtuple4__item___3/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___4>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___4 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_6c79def96aa5d5d9eb9555c48dd9ebb6 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___4@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___4>


; <Skipped let __proj__Mkdtuple4__item___4/>


; <Start encoding type FStar.Pervasives.dtuple5>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple5 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple5@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple5 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__5 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Mkdtuple5
(declare-fun FStar.Pervasives.Mkdtuple5@tok () Term)



(declare-fun Tm_arrow_e2051b23ee191036cd2c8f08b57577cc (Term Term Term Term) Term)








(declare-fun Tm_arrow_7c47a0b67fa3d6e69e51a1ade2982e74 () Term)

; <start constructor FStar.Pervasives.dtuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
626)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple5 @x0
@x1
@x2
@x3
@x4))
 
;;no pats
:qid is-FStar.Pervasives.dtuple5))))

; </end constructor FStar.Pervasives.dtuple5>


; <start constructor FStar.Pervasives.Mkdtuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
641)
(= __@x0
(FStar.Pervasives.Mkdtuple5 (FStar.Pervasives.Mkdtuple5_a __@x0)
(FStar.Pervasives.Mkdtuple5_b __@x0)
(FStar.Pervasives.Mkdtuple5_c __@x0)
(FStar.Pervasives.Mkdtuple5_d __@x0)
(FStar.Pervasives.Mkdtuple5_e __@x0)
(FStar.Pervasives.Mkdtuple5__1 __@x0)
(FStar.Pervasives.Mkdtuple5__2 __@x0)
(FStar.Pervasives.Mkdtuple5__3 __@x0)
(FStar.Pervasives.Mkdtuple5__4 __@x0)
(FStar.Pervasives.Mkdtuple5__5 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple5>


; </end encoding type FStar.Pervasives.dtuple5>


; <Start encoding assume FStar.Pervasives.dtuple5__uu___haseq>






; </end encoding assume FStar.Pervasives.dtuple5__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Mkdtuple5>





(declare-fun FStar.Pervasives.uu___is_Mkdtuple5 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_790317d9d2afaf2417875fd8f65cee9f () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple5@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Mkdtuple5>


; <Skipped let uu___is_Mkdtuple5/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___1>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___1 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_855676d3a54fc2cdf0dfa3ac2f15fdad () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___1@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___1>


; <Skipped let __proj__Mkdtuple5__item___1/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___2>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___2 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_3c181aa1af161d84af20412908ff5981 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___2@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___2>


; <Skipped let __proj__Mkdtuple5__item___2/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___3>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___3 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_cc152ea4c314cfd6854de94e70041031 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___3@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___3>


; <Skipped let __proj__Mkdtuple5__item___3/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___4>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___4 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_6a05465acf4f8d1b8f43fd30077a772a () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___4@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___4>


; <Skipped let __proj__Mkdtuple5__item___4/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___5>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___5 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_d5d61b48d54646c5c411627b3a20c98f () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___5@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___5>


; <Skipped let __proj__Mkdtuple5__item___5/>


; <Start encoding let ignore>

(declare-fun FStar.Pervasives.ignore (Term Term) Term)
(declare-fun Tm_arrow_962476a7eea46a6ffc9b658c6d8fbc71 () Term)
(declare-fun FStar.Pervasives.ignore@tok () Term)

; </end encoding let ignore>


; <Start encoding val FStar.Pervasives.false_elim>

(declare-fun Tm_refine_f1ecc6ab6882a651504f328937700647 () Term)
(declare-fun FStar.Pervasives.false_elim (Term Term) Term)

(declare-fun Tm_arrow_7636fbfab5cd88ba06f60c10ea8caef2 () Term)
(declare-fun FStar.Pervasives.false_elim@tok () Term)

; </end encoding val FStar.Pervasives.false_elim>


; <Start encoding type FStar.Pervasives.__internal_ocaml_attributes>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.__internal_ocaml_attributes () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingShow () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.PpxDerivingShow
(declare-fun FStar.Pervasives.PpxDerivingShow@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingShowConstant (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.PpxDerivingShowConstant__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.PpxDerivingShowConstant
(declare-fun FStar.Pervasives.PpxDerivingShowConstant@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingYoJson () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.PpxDerivingYoJson
(declare-fun FStar.Pervasives.PpxDerivingYoJson@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CInline () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CInline
(declare-fun FStar.Pervasives.CInline@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Substitute () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Substitute
(declare-fun FStar.Pervasives.Substitute@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Gc () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Gc
(declare-fun FStar.Pervasives.Gc@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Comment (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Comment__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Comment
(declare-fun FStar.Pervasives.Comment@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CPrologue (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CPrologue__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CPrologue
(declare-fun FStar.Pervasives.CPrologue@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CEpilogue (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CEpilogue__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CEpilogue
(declare-fun FStar.Pervasives.CEpilogue@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CConst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CConst__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CConst
(declare-fun FStar.Pervasives.CConst@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CCConv (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CCConv__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CCConv
(declare-fun FStar.Pervasives.CCConv@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CAbstractStruct () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CAbstractStruct
(declare-fun FStar.Pervasives.CAbstractStruct@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CIfDef () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CIfDef
(declare-fun FStar.Pervasives.CIfDef@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CMacro () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CMacro
(declare-fun FStar.Pervasives.CMacro@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CNoInline () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CNoInline
(declare-fun FStar.Pervasives.CNoInline@tok () Term)
(declare-fun Tm_arrow_a25c6dbdd7c43412e925069991c0ef48 () Term)






; <start constructor FStar.Pervasives.__internal_ocaml_attributes>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.__internal_ocaml_attributes ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
775)
(= __@x0
FStar.Pervasives.__internal_ocaml_attributes)))

; </end constructor FStar.Pervasives.__internal_ocaml_attributes>


; <start constructor FStar.Pervasives.PpxDerivingShow>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingShow ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
781)
(= __@x0
FStar.Pervasives.PpxDerivingShow)))

; </end constructor FStar.Pervasives.PpxDerivingShow>


; <start constructor FStar.Pervasives.PpxDerivingShowConstant>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingShowConstant ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
783)
(= __@x0
(FStar.Pervasives.PpxDerivingShowConstant (FStar.Pervasives.PpxDerivingShowConstant__0 __@x0)))))

; </end constructor FStar.Pervasives.PpxDerivingShowConstant>


; <start constructor FStar.Pervasives.PpxDerivingYoJson>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingYoJson ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
788)
(= __@x0
FStar.Pervasives.PpxDerivingYoJson)))

; </end constructor FStar.Pervasives.PpxDerivingYoJson>


; <start constructor FStar.Pervasives.CInline>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CInline ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
790)
(= __@x0
FStar.Pervasives.CInline)))

; </end constructor FStar.Pervasives.CInline>


; <start constructor FStar.Pervasives.Substitute>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Substitute ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
792)
(= __@x0
FStar.Pervasives.Substitute)))

; </end constructor FStar.Pervasives.Substitute>


; <start constructor FStar.Pervasives.Gc>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Gc ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
794)
(= __@x0
FStar.Pervasives.Gc)))

; </end constructor FStar.Pervasives.Gc>


; <start constructor FStar.Pervasives.Comment>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Comment ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
796)
(= __@x0
(FStar.Pervasives.Comment (FStar.Pervasives.Comment__0 __@x0)))))

; </end constructor FStar.Pervasives.Comment>


; <start constructor FStar.Pervasives.CPrologue>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CPrologue ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
801)
(= __@x0
(FStar.Pervasives.CPrologue (FStar.Pervasives.CPrologue__0 __@x0)))))

; </end constructor FStar.Pervasives.CPrologue>


; <start constructor FStar.Pervasives.CEpilogue>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CEpilogue ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
806)
(= __@x0
(FStar.Pervasives.CEpilogue (FStar.Pervasives.CEpilogue__0 __@x0)))))

; </end constructor FStar.Pervasives.CEpilogue>


; <start constructor FStar.Pervasives.CConst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CConst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
811)
(= __@x0
(FStar.Pervasives.CConst (FStar.Pervasives.CConst__0 __@x0)))))

; </end constructor FStar.Pervasives.CConst>


; <start constructor FStar.Pervasives.CCConv>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CCConv ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
816)
(= __@x0
(FStar.Pervasives.CCConv (FStar.Pervasives.CCConv__0 __@x0)))))

; </end constructor FStar.Pervasives.CCConv>


; <start constructor FStar.Pervasives.CAbstractStruct>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CAbstractStruct ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
821)
(= __@x0
FStar.Pervasives.CAbstractStruct)))

; </end constructor FStar.Pervasives.CAbstractStruct>


; <start constructor FStar.Pervasives.CIfDef>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CIfDef ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
823)
(= __@x0
FStar.Pervasives.CIfDef)))

; </end constructor FStar.Pervasives.CIfDef>


; <start constructor FStar.Pervasives.CMacro>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CMacro ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
825)
(= __@x0
FStar.Pervasives.CMacro)))

; </end constructor FStar.Pervasives.CMacro>


; <start constructor FStar.Pervasives.CNoInline>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CNoInline ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
827)
(= __@x0
FStar.Pervasives.CNoInline)))

; </end constructor FStar.Pervasives.CNoInline>


; </end encoding type FStar.Pervasives.__internal_ocaml_attributes>


; <Start encoding assume FStar.Pervasives.__internal_ocaml_attributes__uu___haseq>


; </end encoding assume FStar.Pervasives.__internal_ocaml_attributes__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_PpxDerivingShow>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShow (Term) Term)
(declare-fun Tm_arrow_89dc0c243f5e74d4fefc48cfe123db41 () Term)
(declare-fun FStar.Pervasives.uu___is_PpxDerivingShow@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_PpxDerivingShow>


; <Skipped let uu___is_PpxDerivingShow/>


; <Start encoding val FStar.Pervasives.uu___is_PpxDerivingShowConstant>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShowConstant (Term) Term)

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShowConstant@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_PpxDerivingShowConstant>


; <Skipped let uu___is_PpxDerivingShowConstant/>


; <Start encoding val FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0>

(declare-fun Tm_refine_564db2f0aa0878b4d96c60508be3dd36 () Term)
(declare-fun FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0 (Term) Term)

(declare-fun Tm_arrow_dbb84ef8131159481071b6d6a41b7f31 () Term)
(declare-fun FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0>


; <Skipped let __proj__PpxDerivingShowConstant__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_PpxDerivingYoJson>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingYoJson (Term) Term)

(declare-fun FStar.Pervasives.uu___is_PpxDerivingYoJson@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_PpxDerivingYoJson>


; <Skipped let uu___is_PpxDerivingYoJson/>


; <Start encoding val FStar.Pervasives.uu___is_CInline>

(declare-fun FStar.Pervasives.uu___is_CInline (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CInline@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CInline>


; <Skipped let uu___is_CInline/>


; <Start encoding val FStar.Pervasives.uu___is_Substitute>

(declare-fun FStar.Pervasives.uu___is_Substitute (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Substitute@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Substitute>


; <Skipped let uu___is_Substitute/>


; <Start encoding val FStar.Pervasives.uu___is_Gc>

(declare-fun FStar.Pervasives.uu___is_Gc (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Gc@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Gc>


; <Skipped let uu___is_Gc/>


; <Start encoding val FStar.Pervasives.uu___is_Comment>

(declare-fun FStar.Pervasives.uu___is_Comment (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Comment@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Comment>


; <Skipped let uu___is_Comment/>


; <Start encoding val FStar.Pervasives.__proj__Comment__item___0>

(declare-fun Tm_refine_c53089e2d20d1b0f5a267296ac8e45f0 () Term)
(declare-fun FStar.Pervasives.__proj__Comment__item___0 (Term) Term)

(declare-fun Tm_arrow_d4c2bbf4fb852b3f4b9961c7cbc2f3a2 () Term)
(declare-fun FStar.Pervasives.__proj__Comment__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Comment__item___0>


; <Skipped let __proj__Comment__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CPrologue>

(declare-fun FStar.Pervasives.uu___is_CPrologue (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CPrologue@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CPrologue>


; <Skipped let uu___is_CPrologue/>


; <Start encoding val FStar.Pervasives.__proj__CPrologue__item___0>

(declare-fun Tm_refine_ac46c1a2a06ce46a180e0eda48004c47 () Term)
(declare-fun FStar.Pervasives.__proj__CPrologue__item___0 (Term) Term)

(declare-fun Tm_arrow_929b9daa0a2a2e99e3571b146c52feaf () Term)
(declare-fun FStar.Pervasives.__proj__CPrologue__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CPrologue__item___0>


; <Skipped let __proj__CPrologue__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CEpilogue>

(declare-fun FStar.Pervasives.uu___is_CEpilogue (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CEpilogue@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CEpilogue>


; <Skipped let uu___is_CEpilogue/>


; <Start encoding val FStar.Pervasives.__proj__CEpilogue__item___0>

(declare-fun Tm_refine_47384bef739d1f0729fd782d351dc9a5 () Term)
(declare-fun FStar.Pervasives.__proj__CEpilogue__item___0 (Term) Term)

(declare-fun Tm_arrow_e37361b66babb46a30183ad1ff072689 () Term)
(declare-fun FStar.Pervasives.__proj__CEpilogue__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CEpilogue__item___0>


; <Skipped let __proj__CEpilogue__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CConst>

(declare-fun FStar.Pervasives.uu___is_CConst (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CConst@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CConst>


; <Skipped let uu___is_CConst/>


; <Start encoding val FStar.Pervasives.__proj__CConst__item___0>

(declare-fun Tm_refine_5036c6b2983454bc3afeffcba3f00f50 () Term)
(declare-fun FStar.Pervasives.__proj__CConst__item___0 (Term) Term)

(declare-fun Tm_arrow_2d0b7639551b88b0df758d7b36c8f77a () Term)
(declare-fun FStar.Pervasives.__proj__CConst__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CConst__item___0>


; <Skipped let __proj__CConst__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CCConv>

(declare-fun FStar.Pervasives.uu___is_CCConv (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CCConv@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CCConv>


; <Skipped let uu___is_CCConv/>


; <Start encoding val FStar.Pervasives.__proj__CCConv__item___0>

(declare-fun Tm_refine_2c4510f48649a66c3dca1fc9e3a2d320 () Term)
(declare-fun FStar.Pervasives.__proj__CCConv__item___0 (Term) Term)

(declare-fun Tm_arrow_b7e884ec94708f2b05c42d4d8834eac6 () Term)
(declare-fun FStar.Pervasives.__proj__CCConv__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CCConv__item___0>


; <Skipped let __proj__CCConv__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CAbstractStruct>

(declare-fun FStar.Pervasives.uu___is_CAbstractStruct (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CAbstractStruct@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CAbstractStruct>


; <Skipped let uu___is_CAbstractStruct/>


; <Start encoding val FStar.Pervasives.uu___is_CIfDef>

(declare-fun FStar.Pervasives.uu___is_CIfDef (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CIfDef@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CIfDef>


; <Skipped let uu___is_CIfDef/>


; <Start encoding val FStar.Pervasives.uu___is_CMacro>

(declare-fun FStar.Pervasives.uu___is_CMacro (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CMacro@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CMacro>


; <Skipped let uu___is_CMacro/>


; <Start encoding val FStar.Pervasives.uu___is_CNoInline>

(declare-fun FStar.Pervasives.uu___is_CNoInline (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CNoInline@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CNoInline>


; <Skipped let uu___is_CNoInline/>


; <Start encoding val FStar.Pervasives.inline_let>

(declare-fun FStar.Pervasives.inline_let (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.inline_let>


; <Start encoding val FStar.Pervasives.rename_let>

(declare-fun FStar.Pervasives.rename_let (Term) Term)

(declare-fun FStar.Pervasives.rename_let@tok () Term)

; </end encoding val FStar.Pervasives.rename_let>


; <Start encoding val FStar.Pervasives.plugin>

(declare-fun FStar.Pervasives.plugin (Term) Term)
(declare-fun Tm_arrow_f12575a0ee171a8be16a63e3359708f8 () Term)
(declare-fun FStar.Pervasives.plugin@tok () Term)

; </end encoding val FStar.Pervasives.plugin>


; <Start encoding val FStar.Pervasives.tcnorm>

(declare-fun FStar.Pervasives.tcnorm (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.tcnorm>


; <Start encoding val FStar.Pervasives.must_erase_for_extraction>

(declare-fun FStar.Pervasives.must_erase_for_extraction (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.must_erase_for_extraction>


; <Start encoding val FStar.Pervasives.dm4f_bind_range>

(declare-fun FStar.Pervasives.dm4f_bind_range (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.dm4f_bind_range>


; <Start encoding val FStar.Pervasives.expect_failure>

(declare-fun FStar.Pervasives.expect_failure (Term) Term)

(declare-fun FStar.Pervasives.expect_failure@tok () Term)

; </end encoding val FStar.Pervasives.expect_failure>


; <Start encoding val FStar.Pervasives.expect_lax_failure>

(declare-fun FStar.Pervasives.expect_lax_failure (Term) Term)

(declare-fun FStar.Pervasives.expect_lax_failure@tok () Term)

; </end encoding val FStar.Pervasives.expect_lax_failure>


; <Start encoding val FStar.Pervasives.tcdecltime>

(declare-fun FStar.Pervasives.tcdecltime (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.tcdecltime>


; <Start encoding val FStar.Pervasives.unifier_hint_injective>

(declare-fun FStar.Pervasives.unifier_hint_injective (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unifier_hint_injective>


; <Start encoding val FStar.Pervasives.strict_on_arguments>

(declare-fun FStar.Pervasives.strict_on_arguments (Term) Term)

(declare-fun FStar.Pervasives.strict_on_arguments@tok () Term)

; </end encoding val FStar.Pervasives.strict_on_arguments>


; <Start encoding val FStar.Pervasives.resolve_implicits>

(declare-fun FStar.Pervasives.resolve_implicits (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.resolve_implicits>


; <Start encoding val FStar.Pervasives.override_resolve_implicits_handler>

(declare-fun FStar.Pervasives.override_resolve_implicits_handler (Term Term Term) Term)
(declare-fun Tm_arrow_93e6548cfc250f7cc25301579d62a018 () Term)
(declare-fun FStar.Pervasives.override_resolve_implicits_handler@tok () Term)

; </end encoding val FStar.Pervasives.override_resolve_implicits_handler>


; <Start encoding val FStar.Pervasives.handle_smt_goals>

(declare-fun FStar.Pervasives.handle_smt_goals (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.handle_smt_goals>


; <Start encoding val FStar.Pervasives.erasable>

(declare-fun FStar.Pervasives.erasable (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.erasable>


; <Start encoding val FStar.Pervasives.commute_nested_matches>

(declare-fun FStar.Pervasives.commute_nested_matches (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.commute_nested_matches>


; <Start encoding val FStar.Pervasives.noextract_to>

(declare-fun FStar.Pervasives.noextract_to (Term) Term)

(declare-fun FStar.Pervasives.noextract_to@tok () Term)

; </end encoding val FStar.Pervasives.noextract_to>


; <Start encoding val FStar.Pervasives.normalize_for_extraction>

(declare-fun FStar.Pervasives.normalize_for_extraction (Term) Term)
(declare-fun Tm_arrow_5a371649389ebd695db0478470787cef () Term)
(declare-fun FStar.Pervasives.normalize_for_extraction@tok () Term)

; </end encoding val FStar.Pervasives.normalize_for_extraction>


; <Start encoding val FStar.Pervasives.ite_soundness_by>

(declare-fun FStar.Pervasives.ite_soundness_by (Term) Term)
(declare-fun Tm_arrow_0c55530a575bf8e94add46ffb548393c () Term)
(declare-fun FStar.Pervasives.ite_soundness_by@tok () Term)

; </end encoding val FStar.Pervasives.ite_soundness_by>


; <Start encoding val FStar.Pervasives.default_effect>

(declare-fun FStar.Pervasives.default_effect (Term) Term)

(declare-fun FStar.Pervasives.default_effect@tok () Term)

; </end encoding val FStar.Pervasives.default_effect>


; <Start encoding val FStar.Pervasives.top_level_effect>

(declare-fun FStar.Pervasives.top_level_effect (Term) Term)

(declare-fun FStar.Pervasives.top_level_effect@tok () Term)

; </end encoding val FStar.Pervasives.top_level_effect>


; <Start encoding val FStar.Pervasives.effect_param>

(declare-fun FStar.Pervasives.effect_param (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.effect_param>


; <Start encoding val FStar.Pervasives.bind_has_range_args>

(declare-fun FStar.Pervasives.bind_has_range_args (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.bind_has_range_args>


; <Start encoding val FStar.Pervasives.primitive_extraction>

(declare-fun FStar.Pervasives.primitive_extraction (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.primitive_extraction>


; <Start encoding val FStar.Pervasives.extract_as_impure_effect>

(declare-fun FStar.Pervasives.extract_as_impure_effect (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.extract_as_impure_effect>


; <Start encoding val FStar.Pervasives.strictly_positive>

(declare-fun FStar.Pervasives.strictly_positive (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.strictly_positive>


; <Start encoding val FStar.Pervasives.unused>

(declare-fun FStar.Pervasives.unused (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unused>


; <Start encoding val FStar.Pervasives.no_auto_projectors>

(declare-fun FStar.Pervasives.no_auto_projectors (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.no_auto_projectors>


; <Start encoding val FStar.Pervasives.no_auto_projectors_decls>

(declare-fun FStar.Pervasives.no_auto_projectors_decls (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.no_auto_projectors_decls>


; <Start encoding val FStar.Pervasives.no_subtyping>

(declare-fun FStar.Pervasives.no_subtyping (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.no_subtyping>


; <Start encoding val FStar.Pervasives.admit_termination>

(declare-fun FStar.Pervasives.admit_termination (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.admit_termination>


; <Start encoding val FStar.Pervasives.singleton>

(declare-fun FStar.Pervasives.singleton (Term Term) Term)
(declare-fun Tm_refine_2fbd657fe85bcb2423f9c7e5f9b3bcb5 (Term Term) Term)
(declare-fun Tm_arrow_9cdb4ebd85da757e86217b6fb07ef9fc () Term)
(declare-fun FStar.Pervasives.singleton@tok () Term)


; </end encoding val FStar.Pervasives.singleton>


; <Start encoding let eqtype_as_type>

(declare-fun FStar.Pervasives.eqtype_as_type (Term) Term)
(declare-fun Tm_arrow_7e9afc6da5407011473323ad80ff51bf () Term)
(declare-fun FStar.Pervasives.eqtype_as_type@tok () Term)

; </end encoding let eqtype_as_type>


; <Start encoding let coerce_eq>

(declare-fun Tm_refine_0dee8cb03258a67c2f7ec66427696212 (Term Term) Term)
(declare-fun FStar.Pervasives.coerce_eq (Term Term Term Term) Term)

(declare-fun Tm_arrow_f44173fb14fa6046eedce5f32cb8aae8 () Term)
(declare-fun FStar.Pervasives.coerce_eq@tok () Term)


; </end encoding let coerce_eq>


; <Start encoding val FStar.Pervasives.coercion>

(declare-fun FStar.Pervasives.coercion (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.coercion>


; <Start encoding val FStar.Pervasives.desugar_of_variant_record>

(declare-fun FStar.Pervasives.desugar_of_variant_record (Term) Term)

(declare-fun FStar.Pervasives.desugar_of_variant_record@tok () Term)

; </end encoding val FStar.Pervasives.desugar_of_variant_record>


; <Start encoding val FStar.Pervasives.defer_to>

(declare-fun FStar.Pervasives.defer_to (Term Term) Term)

(declare-fun FStar.Pervasives.defer_to@tok () Term)

; </end encoding val FStar.Pervasives.defer_to>


; End Externals for interface FStar.Pervasives


; Externals for interface FStar.Classical


; <Start encoding val FStar.Classical.give_witness>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.give_witness (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.give_witness@tok () Term)

; </end encoding val FStar.Classical.give_witness>


; <Start encoding val FStar.Classical.give_witness_from_squash>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.give_witness_from_squash (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.give_witness_from_squash@tok () Term)

; </end encoding val FStar.Classical.give_witness_from_squash>


; <Start encoding val FStar.Classical.lemma_to_squash_gtot>


(declare-fun Tm_refine_839524df17f415c122f40f00685d3fe6 (Term Term) Term)
(declare-fun Tm_arrow_9a028cfcf6111a85dd3c28d61b4efdfd (Term Term) Term)
(declare-fun FStar.Classical.lemma_to_squash_gtot (Term Term Term Term) Term)



(declare-fun Tm_arrow_6f9100982820dfbce0fb9c6dae0cee11 () Term)
(declare-fun FStar.Classical.lemma_to_squash_gtot@tok () Term)

; </end encoding val FStar.Classical.lemma_to_squash_gtot>


; <Start encoding val FStar.Classical.get_equality>

(declare-fun FStar.Classical.get_equality (Term Term Term) Term)
(declare-fun Tm_refine_7c805cbd5439f1b21f6463c70e57d0f1 (Term Term Term) Term)
(declare-fun Tm_arrow_158af926c0cd4bc1ff513e80f99f4b49 () Term)
(declare-fun FStar.Classical.get_equality@tok () Term)


; </end encoding val FStar.Classical.get_equality>


; <Start encoding val FStar.Classical.impl_to_arrow>

(declare-fun FStar.Classical.impl_to_arrow (Term Term Term Term) Term)
(declare-fun Tm_arrow_156c500bdf0e99cc45ffd26a33a603a8 () Term)
(declare-fun FStar.Classical.impl_to_arrow@tok () Term)

; </end encoding val FStar.Classical.impl_to_arrow>


; <Start encoding val FStar.Classical.arrow_to_impl>

(declare-fun Tm_arrow_9d84457d1c8d2a3cb1cecf47a390b833 (Term Term) Term)
(declare-fun FStar.Classical.arrow_to_impl (Term Term Term) Term)

(declare-fun Tm_arrow_78d787b8a2633e2185ded4267a81cc32 () Term)
(declare-fun FStar.Classical.arrow_to_impl@tok () Term)

; </end encoding val FStar.Classical.arrow_to_impl>


; <Start encoding val FStar.Classical.impl_intro_gtot>


(declare-fun FStar.Classical.impl_intro_gtot (Term Term Term) Term)

(declare-fun Tm_arrow_d2cdd2f18b92810e3048c35d07f1c9ea () Term)
(declare-fun FStar.Classical.impl_intro_gtot@tok () Term)

; </end encoding val FStar.Classical.impl_intro_gtot>


; <Start encoding val FStar.Classical.impl_intro_tot>

(declare-fun Tm_arrow_6980332764c4493a7b0df5c02f7aefbe (Term Term) Term)
(declare-fun FStar.Classical.impl_intro_tot (Term Term Term) Term)

(declare-fun Tm_arrow_91aadb43edc4c2c0c091af8dbe745057 () Term)
(declare-fun FStar.Classical.impl_intro_tot@tok () Term)

; </end encoding val FStar.Classical.impl_intro_tot>


; <Start encoding val FStar.Classical.impl_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.impl_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.impl_intro@tok () Term)

; </end encoding val FStar.Classical.impl_intro>


; <Start encoding val FStar.Classical.move_requires>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.move_requires (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.move_requires@tok () Term)

; </end encoding val FStar.Classical.move_requires>


; <Start encoding val FStar.Classical.move_requires_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.move_requires_2 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.move_requires_2@tok () Term)

; </end encoding val FStar.Classical.move_requires_2>


; <Start encoding val FStar.Classical.move_requires_3>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.move_requires_3 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.move_requires_3@tok () Term)

; </end encoding val FStar.Classical.move_requires_3>


; <Start encoding val FStar.Classical.move_requires_4>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.move_requires_4 (Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.move_requires_4@tok () Term)

; </end encoding val FStar.Classical.move_requires_4>


; <Start encoding val FStar.Classical.impl_intro_gen>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.impl_intro_gen (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.impl_intro_gen@tok () Term)

; </end encoding val FStar.Classical.impl_intro_gen>


; <Start encoding val FStar.Classical.get_forall>


(declare-fun FStar.Classical.get_forall (Term Term) Term)




(declare-fun Tm_refine_7a68552470cd0b3e3b5038c890f62a82 (Term Term) Term)
(declare-fun Tm_arrow_44be7520ed79d38d96b60844cf5c3637 () Term)
(declare-fun FStar.Classical.get_forall@tok () Term)





; </end encoding val FStar.Classical.get_forall>


; <Start encoding val FStar.Classical.forall_intro_gtot>



(declare-fun FStar.Classical.forall_intro_gtot (Term Term Term) Term)


(declare-fun Tm_refine_eee646ed2c0261b2e37307734e5990b8 (Term Term) Term)
(declare-fun Tm_arrow_0d81b083331cc2ca8277c22c2c6ed09c () Term)
(declare-fun FStar.Classical.forall_intro_gtot@tok () Term)


; </end encoding val FStar.Classical.forall_intro_gtot>


; <Start encoding val FStar.Classical.lemma_forall_intro_gtot>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.lemma_forall_intro_gtot (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.lemma_forall_intro_gtot@tok () Term)

; </end encoding val FStar.Classical.lemma_forall_intro_gtot>


; <Start encoding val FStar.Classical.gtot_to_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.gtot_to_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.gtot_to_lemma@tok () Term)

; </end encoding val FStar.Classical.gtot_to_lemma>


; <Start encoding val FStar.Classical.forall_intro_squash_gtot>


(declare-fun Tm_arrow_e44b1a1960e76c65248b9976ee453bf1 (Term Term) Term)
(declare-fun FStar.Classical.forall_intro_squash_gtot (Term Term Term) Term)



(declare-fun Tm_arrow_810fc5a930eab84e2e1c9bc10e65f526 () Term)
(declare-fun FStar.Classical.forall_intro_squash_gtot@tok () Term)


; </end encoding val FStar.Classical.forall_intro_squash_gtot>


; <Start encoding val FStar.Classical.forall_intro_squash_gtot_join>



(declare-fun FStar.Classical.forall_intro_squash_gtot_join (Term Term Term) Term)





(declare-fun Tm_arrow_cd9381a0f782f3a2a2b6ba363e2e0508 () Term)
(declare-fun FStar.Classical.forall_intro_squash_gtot_join@tok () Term)




; </end encoding val FStar.Classical.forall_intro_squash_gtot_join>


; <Start encoding val FStar.Classical.forall_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro@tok () Term)

; </end encoding val FStar.Classical.forall_intro>


; <Start encoding val FStar.Classical.forall_intro_with_pat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_with_pat (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_with_pat@tok () Term)

; </end encoding val FStar.Classical.forall_intro_with_pat>


; <Start encoding val FStar.Classical.forall_intro_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_sub (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_sub@tok () Term)

; </end encoding val FStar.Classical.forall_intro_sub>


; <Start encoding val FStar.Classical.forall_intro_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_2@tok () Term)

; </end encoding val FStar.Classical.forall_intro_2>


; <Start encoding val FStar.Classical.forall_intro_2_with_pat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_2_with_pat (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_2_with_pat@tok () Term)

; </end encoding val FStar.Classical.forall_intro_2_with_pat>


; <Start encoding val FStar.Classical.forall_intro_3>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_3 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_3@tok () Term)

; </end encoding val FStar.Classical.forall_intro_3>


; <Start encoding val FStar.Classical.forall_intro_3_with_pat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_3_with_pat (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_3_with_pat@tok () Term)

; </end encoding val FStar.Classical.forall_intro_3_with_pat>


; <Start encoding val FStar.Classical.forall_intro_4>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_4 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_4@tok () Term)

; </end encoding val FStar.Classical.forall_intro_4>


; <Start encoding val FStar.Classical.forall_impl_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_impl_intro (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_impl_intro@tok () Term)

; </end encoding val FStar.Classical.forall_impl_intro>


; <Start encoding val FStar.Classical.ghost_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.ghost_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.ghost_lemma@tok () Term)

; </end encoding val FStar.Classical.ghost_lemma>


; <Start encoding val FStar.Classical.exists_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.exists_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.exists_intro@tok () Term)

; </end encoding val FStar.Classical.exists_intro>


; <Start encoding val FStar.Classical.exists_intro_not_all_not>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.exists_intro_not_all_not (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.exists_intro_not_all_not@tok () Term)

; </end encoding val FStar.Classical.exists_intro_not_all_not>


; <Start encoding val FStar.Classical.forall_to_exists>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_to_exists (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_to_exists@tok () Term)

; </end encoding val FStar.Classical.forall_to_exists>


; <Start encoding val FStar.Classical.forall_to_exists_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_to_exists_2 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_to_exists_2@tok () Term)

; </end encoding val FStar.Classical.forall_to_exists_2>


; <Start encoding val FStar.Classical.exists_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.exists_elim (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.exists_elim@tok () Term)

; </end encoding val FStar.Classical.exists_elim>


; <Start encoding val FStar.Classical.or_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.or_elim (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.or_elim@tok () Term)

; </end encoding val FStar.Classical.or_elim>


; <Start encoding val FStar.Classical.excluded_middle>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.excluded_middle (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.excluded_middle@tok () Term)

; </end encoding val FStar.Classical.excluded_middle>


; End Externals for interface FStar.Classical


; Externals for module FStar.Mul


; <Start encoding let op_Star>

(declare-fun FStar.Mul.op_Star (Term Term) Term)

(declare-fun FStar.Mul.op_Star@tok () Term)

; </end encoding let op_Star>


; End Externals for module FStar.Mul


; Externals for interface FStar.Ghost


; <Start encoding val FStar.Ghost.erased>

(declare-fun FStar.Ghost.erased (Term) Term)

(declare-fun FStar.Ghost.erased@tok () Term)

; </end encoding val FStar.Ghost.erased>


; <Start encoding val FStar.Ghost.reveal>

(declare-fun FStar.Ghost.reveal (Term Term) Term)
(declare-fun Tm_ghost_arrow_e2f4c1991753137c5a80c115428d0cef () Term)
(declare-fun FStar.Ghost.reveal@tok () Term)

; </end encoding val FStar.Ghost.reveal>


; <Start encoding val FStar.Ghost.hide>

(declare-fun FStar.Ghost.hide (Term Term) Term)
(declare-fun Tm_arrow_643f1030585ddc96db34fbedd5533726 () Term)
(declare-fun FStar.Ghost.hide@tok () Term)

; </end encoding val FStar.Ghost.hide>


; <Start encoding val FStar.Ghost.hide_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Ghost.hide_reveal (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Ghost.hide_reveal@tok () Term)

; </end encoding val FStar.Ghost.hide_reveal>


; <Start encoding val FStar.Ghost.reveal_hide>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Ghost.reveal_hide (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Ghost.reveal_hide@tok () Term)

; </end encoding val FStar.Ghost.reveal_hide>


; <Start encoding let tot_to_gtot>


(declare-fun FStar.Ghost.tot_to_gtot (Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_c9fd3b742fd348c1f0aa2b7131578f3e () Term)
(declare-fun FStar.Ghost.tot_to_gtot@tok () Term)


; </end encoding let tot_to_gtot>


; <Start encoding let return>

(declare-fun FStar.Ghost.return (Term Term) Term)

(declare-fun FStar.Ghost.return@tok () Term)

; </end encoding let return>


; <Start encoding let bind>

(declare-fun Tm_arrow_5716b68879f92aa07a25325dea2a598d (Term Term) Term)
(declare-fun FStar.Ghost.bind (Term Term Term Term) Term)

(declare-fun Tm_arrow_744e10832c82c923706888158b99b0fe () Term)
(declare-fun FStar.Ghost.bind@tok () Term)


; </end encoding let bind>


; <Start encoding let op_let_At>


(declare-fun FStar.Ghost.op_let_At (Term Term Term Term) Term)


(declare-fun FStar.Ghost.op_let_At@tok () Term)


; </end encoding let op_let_At>


; <Start encoding let elift1>


(declare-fun FStar.Ghost.elift1 (Term Term Term Term) Term)

(declare-fun Tm_refine_785b445c1ccb59eaa8c666ff5bddec28 (Term Term Term Term) Term)
(declare-fun Tm_arrow_da89250ece049a2244626f93975cd557 () Term)
(declare-fun FStar.Ghost.elift1@tok () Term)


; </end encoding let elift1>


; <Start encoding let elift2>

(declare-fun Tm_ghost_arrow_44164f5e759c8937bc211b53dca29861 (Term Term Term) Term)
(declare-fun FStar.Ghost.elift2 (Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_65079789b5ee069d4dcb71b5d5562419 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3bc5977a48f4c4aa4cd3ebcf331fe3f9 () Term)
(declare-fun FStar.Ghost.elift2@tok () Term)


; </end encoding let elift2>


; <Start encoding let elift3>

(declare-fun Tm_ghost_arrow_c3cf725ad58bf27e304b88d311d2ef4d (Term Term Term Term) Term)
(declare-fun FStar.Ghost.elift3 (Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_f701336f04214efabf1dc8fb653177ef (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_d597747eb30e55a029a57bb56ae3576b () Term)
(declare-fun FStar.Ghost.elift3@tok () Term)


; </end encoding let elift3>


; <Start encoding let push_refinement>


(declare-fun Tm_refine_4861ff30b18822886452f698558931e8 (Term Term) Term)
(declare-fun FStar.Ghost.push_refinement (Term Term Term) Term)


(declare-fun Tm_refine_36af295866c873249daf08f8d623a269 (Term Term Term) Term)
(declare-fun Tm_arrow_08d120582cc4dfdc7e90cb9038e8f6b8 () Term)
(declare-fun FStar.Ghost.push_refinement@tok () Term)





; </end encoding let push_refinement>


; <Start encoding let elift1_p>


(declare-fun Tm_refine_9f8cb5a84b67f50c9d5f87a914037545 (Term Term) Term)
(declare-fun Tm_ghost_arrow_8f538917cb02d75c44bfd86ed6834262 (Term Term Term) Term)

(declare-fun FStar.Ghost.elift1_p (Term Term Term Term Term) Term)





(declare-fun Tm_arrow_2f2f081c9c2a272e83f647cd86440766 () Term)
(declare-fun FStar.Ghost.elift1_p@tok () Term)


; </end encoding let elift1_p>


; <Start encoding let elift2_p>


(declare-fun Tm_refine_08698b4b6e166624b5bf789ac071b4cf (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_4f9eac2d0622ae1c34d05baa5f6854c6 (Term Term Term Term) Term)
(declare-fun Tm_refine_50e552dc638ed7dac9f2492d99576667 (Term Term Term Term) Term)
(declare-fun FStar.Ghost.elift2_p (Term Term Term Term Term Term Term) Term)





(declare-fun Tm_arrow_4243a3f87827ef2e8c38dd30c5e8518d () Term)
(declare-fun FStar.Ghost.elift2_p@tok () Term)


; </end encoding let elift2_p>


; <Start encoding let elift1_pq>



(declare-fun Tm_arrow_b9b0980b05721a41304c20e612f3108f (Term Term Term) Term)


(declare-fun Tm_ghost_arrow_3f0c334c27896d01c2e72f45e6fcb67c (Term Term Term Term) Term)

(declare-fun FStar.Ghost.elift1_pq (Term Term Term Term Term Term) Term)








(declare-fun Tm_arrow_b8eadba0211443ca5c59668f6aa4b6c9 () Term)
(declare-fun FStar.Ghost.elift1_pq@tok () Term)


; </end encoding let elift1_pq>


; <Start encoding let elift2_pq>



(declare-fun Tm_arrow_747965e95d1386c22f52f977256a903b (Term Term Term Term) Term)

(declare-fun Tm_refine_f9e3dab5c1ea39d2741639e0fe40e216 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_00838c3d276d7476d6679b97a2aa247c (Term Term Term Term Term) Term)

(declare-fun FStar.Ghost.elift2_pq (Term Term Term Term Term Term Term Term) Term)








(declare-fun Tm_arrow_b7e390954ec59dc663763c956d66957b () Term)
(declare-fun FStar.Ghost.elift2_pq@tok () Term)


; </end encoding let elift2_pq>


; End Externals for interface FStar.Ghost


; Externals for interface FStar.IndefiniteDescription


; <Start encoding val FStar.IndefiniteDescription.elim_squash>

(declare-fun FStar.IndefiniteDescription.elim_squash (Term Term) Term)
(declare-fun Tm_ghost_arrow_c6842219f247b61822e21d8f892190b3 () Term)
(declare-fun FStar.IndefiniteDescription.elim_squash@tok () Term)

; </end encoding val FStar.IndefiniteDescription.elim_squash>


; <Start encoding val FStar.IndefiniteDescription.indefinite_description_ghost>

(declare-fun Tm_arrow_81e65de2755319ee661cc1adc7d951e3 (Term) Term)
(declare-fun Tm_refine_4cc89ae73e7128e43010e5aba0ff060c (Term) Term)
(declare-fun FStar.IndefiniteDescription.indefinite_description_ghost (Term Term) Term)



(declare-fun Tm_ghost_arrow_feddccf07264e14202821ef1d50468a8 () Term)
(declare-fun FStar.IndefiniteDescription.indefinite_description_ghost@tok () Term)


; </end encoding val FStar.IndefiniteDescription.indefinite_description_ghost>


; <Start encoding val FStar.IndefiniteDescription.indefinite_description_tot>



(declare-fun FStar.IndefiniteDescription.indefinite_description_tot (Term Term) Term)



(declare-fun Tm_arrow_913328739865ec1d7344ba2324047e94 () Term)
(declare-fun FStar.IndefiniteDescription.indefinite_description_tot@tok () Term)


; </end encoding val FStar.IndefiniteDescription.indefinite_description_tot>


; <Start encoding val FStar.IndefiniteDescription.strong_excluded_middle>

(declare-fun FStar.IndefiniteDescription.strong_excluded_middle (Term) Term)
(declare-fun Tm_refine_2c7ecebd8a41d0890aab4251b61d6458 (Term) Term)
(declare-fun Tm_ghost_arrow_13b822d9f45311e725609e40f68f39a1 () Term)
(declare-fun FStar.IndefiniteDescription.strong_excluded_middle@tok () Term)


; </end encoding val FStar.IndefiniteDescription.strong_excluded_middle>


; <Start encoding val FStar.IndefiniteDescription.stronger_markovs_principle>

(declare-fun Tm_ghost_arrow_eaf0e881316979a10a835f9aef894ea3 () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle (Term) Term)

(declare-fun Tm_refine_ce62cc380d030e5cd8dfd1cf0ea19b01 (Term) Term)
(declare-fun Tm_ghost_arrow_0ecc4bb7783229ca7ca7edd38b0bab8d () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle@tok () Term)


; </end encoding val FStar.IndefiniteDescription.stronger_markovs_principle>


; <Start encoding val FStar.IndefiniteDescription.stronger_markovs_principle_prop>

(declare-fun Tm_arrow_1742ee5bbc9c9e74913cc041d85062b6 () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle_prop (Term) Term)

(declare-fun Tm_refine_e76bd1e3fcd1369d7232ec3854a8c984 (Term) Term)
(declare-fun Tm_ghost_arrow_c21c60a4b8d9409191eea9e22a1b37db () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle_prop@tok () Term)


; </end encoding val FStar.IndefiniteDescription.stronger_markovs_principle_prop>


; End Externals for interface FStar.IndefiniteDescription


; Externals for module FStar.StrongExcludedMiddle


; <Start encoding let strong_excluded_middle>

(declare-fun FStar.StrongExcludedMiddle.strong_excluded_middle (Term) Term)


(declare-fun FStar.StrongExcludedMiddle.strong_excluded_middle@tok () Term)


; </end encoding let strong_excluded_middle>


; End Externals for module FStar.StrongExcludedMiddle


; Externals for interface FStar.Classical.Sugar


; <Start encoding val FStar.Classical.Sugar.forall_elim>



(declare-fun FStar.Classical.Sugar.forall_elim (Term Term Term Term) Term)


(declare-fun Tm_arrow_6fad81cdc8376c5921e448133045a0b5 () Term)
(declare-fun FStar.Classical.Sugar.forall_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.forall_elim>


; <Start encoding val FStar.Classical.Sugar.exists_elim>


(declare-fun Tm_refine_df2d65c00128265e81a98d1694fa32db (Term Term) Term)
(declare-fun Tm_arrow_757abf2ff34845ceba7272f2bf4c779d (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.exists_elim (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_8a831fa0f832c0a8df6d5207189d1bd6 () Term)
(declare-fun FStar.Classical.Sugar.exists_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.exists_elim>


; <Start encoding let implies_elim>

(declare-fun Tm_refine_913239c2cf9dc8a14e1f047e0206138d (Term Term) Term)
(declare-fun Tm_arrow_e5bf96e6b202d44baf035cb07df2da84 (Term) Term)
(declare-fun FStar.Classical.Sugar.implies_elim (Term Term Term Term) Term)


(declare-fun Tm_arrow_08b9f1333754078ddc08d25d2c8efab0 () Term)
(declare-fun FStar.Classical.Sugar.implies_elim@tok () Term)



; </end encoding let implies_elim>


; <Start encoding val FStar.Classical.Sugar.or_elim>

(declare-fun Tm_refine_953a6e4e702e848a7213bd619baaa22d (Term) Term)
(declare-fun Tm_arrow_0e4b9f46020ce2f098f1971a515a22d9 (Term) Term)
(declare-fun Tm_refine_044452ce08fa2077b813992baef379a7 (Term Term) Term)


(declare-fun Tm_arrow_3cd50b91a1a8ff7ae2a33f725c49ca25 (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.or_elim (Term Term Term Term Term Term) Term)






(declare-fun Tm_arrow_cd3704184434b709df08ad54743b9ddc () Term)
(declare-fun FStar.Classical.Sugar.or_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.or_elim>


; <Start encoding val FStar.Classical.Sugar.and_elim>

(declare-fun Tm_arrow_e617226e5c485cfca90836a8d37dc422 (Term) Term)
(declare-fun Tm_refine_0e6764ea7cf9747bf338120e46774802 (Term Term) Term)
(declare-fun Tm_arrow_9cf3fa74bead5ce84576f320b610d107 (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.and_elim (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_46e93521f3e2b84feb3b4c45d4b82427 () Term)
(declare-fun FStar.Classical.Sugar.and_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.and_elim>


; <Start encoding val FStar.Classical.Sugar.forall_intro>



(declare-fun FStar.Classical.Sugar.forall_intro (Term Term Term) Term)




(declare-fun FStar.Classical.Sugar.forall_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.forall_intro>


; <Start encoding val FStar.Classical.Sugar.exists_intro>


(declare-fun Tm_arrow_1f559753133c819dcbab21eb87f04504 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.exists_intro (Term Term Term Term) Term)



(declare-fun Tm_arrow_98a6ce57193d862f12aa770d807de2d6 () Term)
(declare-fun FStar.Classical.Sugar.exists_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.exists_intro>


; <Start encoding val FStar.Classical.Sugar.implies_intro>


(declare-fun Tm_arrow_8cc28639983f141a2c2b513a3b9f2226 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.implies_intro (Term Term Term) Term)


(declare-fun Tm_refine_210741fcd012f6981d2132fb47059ae4 (Term Term) Term)
(declare-fun Tm_arrow_16ed35ee40b45e5834d942fa129fc7a5 () Term)
(declare-fun FStar.Classical.Sugar.implies_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.implies_intro>


; <Start encoding val FStar.Classical.Sugar.or_intro_left>




(declare-fun FStar.Classical.Sugar.or_intro_left (Term Term Term) Term)




(declare-fun Tm_arrow_ba201b0aaffa8c92349bb033309546c6 () Term)
(declare-fun FStar.Classical.Sugar.or_intro_left@tok () Term)


; </end encoding val FStar.Classical.Sugar.or_intro_left>


; <Start encoding val FStar.Classical.Sugar.or_intro_right>




(declare-fun Tm_arrow_c1f46761cba190a64ceda9e0b423d73a (Term Term) Term)
(declare-fun FStar.Classical.Sugar.or_intro_right (Term Term Term) Term)





(declare-fun Tm_arrow_820ce98d2bc904183444162411ef4873 () Term)
(declare-fun FStar.Classical.Sugar.or_intro_right@tok () Term)


; </end encoding val FStar.Classical.Sugar.or_intro_right>


; <Start encoding val FStar.Classical.Sugar.and_intro>




(declare-fun FStar.Classical.Sugar.and_intro (Term Term Term Term) Term)




(declare-fun Tm_arrow_74dd2a70fe5b8eefc42b899233f1e113 () Term)
(declare-fun FStar.Classical.Sugar.and_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.and_intro>


; End Externals for interface FStar.Classical.Sugar


; Externals for module FStar.List.Tot.Base


; <Skipped val FStar.List.Tot.Base.isEmpty/>


; <Start encoding let isEmpty>

(declare-fun FStar.List.Tot.Base.isEmpty (Term Term) Term)

(declare-fun FStar.List.Tot.Base.isEmpty@tok () Term)

; </end encoding let isEmpty>


; <Skipped val FStar.List.Tot.Base.hd/>


; <Start encoding let hd>


(declare-fun FStar.List.Tot.Base.hd (Term Term) Term)


(declare-fun FStar.List.Tot.Base.hd@tok () Term)


; </end encoding let hd>


; <Skipped val FStar.List.Tot.Base.tail/>


; <Start encoding let tail>


(declare-fun FStar.List.Tot.Base.tail (Term Term) Term)


(declare-fun FStar.List.Tot.Base.tail@tok () Term)


; </end encoding let tail>


; <Skipped val FStar.List.Tot.Base.tl/>


; <Start encoding let tl>


(declare-fun FStar.List.Tot.Base.tl (Term Term) Term)


(declare-fun FStar.List.Tot.Base.tl@tok () Term)


; </end encoding let tl>


; <Skipped val FStar.List.Tot.Base.last/>


; <Start encoding let rec last>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.last.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.last.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.last (Term Term) Term)
(declare-fun FStar.List.Tot.Base.last@tok () Term)





; </end encoding let rec last>


; <Skipped val FStar.List.Tot.Base.init/>


; <Start encoding let rec init>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.init.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.init.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.init (Term Term) Term)
(declare-fun FStar.List.Tot.Base.init@tok () Term)





; </end encoding let rec init>


; <Skipped val FStar.List.Tot.Base.length/>


; <Start encoding let rec length>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.length.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.length.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.length (Term Term) Term)
(declare-fun FStar.List.Tot.Base.length@tok () Term)
(declare-fun Tm_arrow_5adbd6bc13eabd8f92e79f380e1498f0 () Term)

; </end encoding let rec length>


; <Skipped val FStar.List.Tot.Base.nth/>


; <Start encoding let rec nth>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.nth.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.nth.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.nth (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.nth@tok () Term)
(declare-fun Tm_arrow_c96efec76dd44fb4c1c29ca8a004927d () Term)

; </end encoding let rec nth>


; <Skipped val FStar.List.Tot.Base.index/>


; <Start encoding let rec index>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.index.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.index.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.index (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.index@tok () Term)
(declare-fun Tm_refine_c86aba5c6243e6b7f9a4b0ad41b4e9a0 (Term Term) Term)


(declare-fun Tm_arrow_87330224a075c52374b0ca2b4b909772 () Term)

; </end encoding let rec index>


; <Skipped val FStar.List.Tot.Base.count/>


; <Start encoding let rec count>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.count.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.count.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.count (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.count@tok () Term)
(declare-fun Tm_arrow_d7494a533e0c3edea69ad484d93aa0e5 () Term)

; </end encoding let rec count>


; <Skipped val FStar.List.Tot.Base.rev_acc/>


; <Start encoding let rec rev_acc>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.rev_acc.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.rev_acc.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.rev_acc (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.rev_acc@tok () Term)
(declare-fun Tm_arrow_54e38bdd456bab4cdb32b5d540c2274c () Term)

; </end encoding let rec rev_acc>


; <Skipped val FStar.List.Tot.Base.rev/>


; <Start encoding let rev>

(declare-fun FStar.List.Tot.Base.rev (Term Term) Term)
(declare-fun Tm_arrow_f9ba16c6212a483d195bbb8ceec3eef1 () Term)
(declare-fun FStar.List.Tot.Base.rev@tok () Term)

; </end encoding let rev>


; <Skipped val FStar.List.Tot.Base.append/>


; <Start encoding let rec append>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.append.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.append.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.append (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.append@tok () Term)


; </end encoding let rec append>


; <Start encoding let op_At>

(declare-fun FStar.List.Tot.Base.op_At (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.op_At@tok () Term)

; </end encoding let op_At>


; <Skipped val FStar.List.Tot.Base.snoc/>


; <Start encoding let snoc>

(declare-fun FStar.List.Tot.Base.snoc (Term Term) Term)
(declare-fun Tm_arrow_07ff48a1c7b541b0963ce508064e29fb () Term)
(declare-fun FStar.List.Tot.Base.snoc@tok () Term)

; </end encoding let snoc>


; <Skipped val FStar.List.Tot.Base.flatten/>


; <Start encoding let rec flatten>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.flatten.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.flatten.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.flatten (Term Term) Term)
(declare-fun FStar.List.Tot.Base.flatten@tok () Term)
(declare-fun Tm_arrow_7e18fd6b36805c1f1c9a77e024fdec2e () Term)

; </end encoding let rec flatten>


; <Skipped val FStar.List.Tot.Base.map/>


; <Start encoding let rec map>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.map.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.map.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.map (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.map@tok () Term)



(declare-fun Tm_arrow_28431dcf5044bcdd56dbe625f9e3df4e () Term)

; </end encoding let rec map>


; <Skipped val FStar.List.Tot.Base.mapi_init/>


; <Start encoding let rec mapi_init>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.mapi_init.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.mapi_init.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.mapi_init (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.mapi_init@tok () Term)
(declare-fun Tm_arrow_010f318679809a99aeced42f5ba95505 (Term Term) Term)


(declare-fun Tm_arrow_9a89e146e4bb6b361bc4526b891ed1f1 () Term)

; </end encoding let rec mapi_init>


; <Skipped val FStar.List.Tot.Base.mapi/>


; <Start encoding let mapi>


(declare-fun FStar.List.Tot.Base.mapi (Term Term Term Term) Term)

(declare-fun Tm_arrow_b2a07f422fceebd0f3ee3abd5e4aeed2 () Term)
(declare-fun FStar.List.Tot.Base.mapi@tok () Term)


; </end encoding let mapi>


; <Skipped val FStar.List.Tot.Base.concatMap/>


; <Start encoding let rec concatMap>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.concatMap.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.concatMap.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.concatMap (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.concatMap@tok () Term)
(declare-fun Tm_arrow_121fa5bc200f7b3946a5e35040f266b9 (Term Term) Term)


(declare-fun Tm_arrow_c35dd4e5f8c08f94183bf93963fac92f () Term)

; </end encoding let rec concatMap>


; <Skipped val FStar.List.Tot.Base.fold_left/>


; <Start encoding let rec fold_left>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_left.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_left.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_left (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_left@tok () Term)
(declare-fun Tm_arrow_f0225aaf6b987d44876e7f498390aa39 (Term Term) Term)


(declare-fun Tm_arrow_230697841c1116c0d5f3958097856e6e () Term)

; </end encoding let rec fold_left>


; <Skipped val FStar.List.Tot.Base.fold_right/>


; <Start encoding let rec fold_right>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_right.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_right.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_right (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_right@tok () Term)
(declare-fun Tm_arrow_3c1d21b8f6dcc5e202b4ff1cafbaba81 (Term Term) Term)


(declare-fun Tm_arrow_105b39eeae3a464c82e64975ac399cdb () Term)

; </end encoding let rec fold_right>


; <Start encoding let rec fold_right_gtot>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_right_gtot (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_right_gtot@tok () Term)
(declare-fun Tm_ghost_arrow_d7e9834b8fd0407a723f5f3f4b012fdd (Term Term) Term)


(declare-fun Tm_ghost_arrow_fab043b8cdd2296e8d98a06066e4b2d2 () Term)

; </end encoding let rec fold_right_gtot>


; <Start encoding let map_gtot>


(declare-fun FStar.List.Tot.Base.map_gtot (Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_d0c7be07105bf8d5ad60b7f603c725f3 () Term)
(declare-fun FStar.List.Tot.Base.map_gtot@tok () Term)

(declare-fun Tm_ghost_arrow_21583233c98863da294c5e5d657cf78a (Term Term) Term)
(declare-fun Tm_abs_469cd3853c3ff3e8cd408b5521fdbd9d (Term Term Term) Term)

; </end encoding let map_gtot>


; <Skipped val FStar.List.Tot.Base.fold_left2/>


; <Start encoding let rec fold_left2>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_left2.fuel_instrumented (Fuel Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_left2.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_left2 (Term Term Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_left2@tok () Term)
(declare-fun Tm_arrow_40dd30796dd695d143ec6ed01d322177 (Term Term Term) Term)
(declare-fun Tm_refine_c16bc1b61f58b349bf6fc1c94dcaf83b (Term) Term)



(declare-fun Tm_arrow_3f28d1abbd43ddded682cbec516ea7bb () Term)


; </end encoding let rec fold_left2>


; <Start encoding let rec memP>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.memP.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.memP.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.memP (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.memP@tok () Term)
(declare-fun Tm_arrow_9a5de17321abf8ec257671c9a474c08a () Term)

; </end encoding let rec memP>


; <Skipped val FStar.List.Tot.Base.mem/>


; <Start encoding let rec mem>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.mem.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.mem.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.mem (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.mem@tok () Term)
(declare-fun Tm_arrow_8b16b79a9f8fab7cb6911016a8022992 () Term)

; </end encoding let rec mem>


; <Start encoding let contains>

(declare-fun FStar.List.Tot.Base.contains (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.contains@tok () Term)

; </end encoding let contains>


; <Skipped val FStar.List.Tot.Base.existsb/>


; <Start encoding let rec existsb>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.existsb.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.existsb.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.existsb (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.existsb@tok () Term)
(declare-fun Tm_arrow_84543425b818e2d10a976186b8e8c250 (Term) Term)


(declare-fun Tm_arrow_98dbecc64760e6a41f037a6881cd5df8 () Term)

; </end encoding let rec existsb>


; <Skipped val FStar.List.Tot.Base.find/>


; <Start encoding let rec find>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.find.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.find.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.find (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.find@tok () Term)

(declare-fun Tm_refine_3b1cb9ec3355fed185c658f53954b3fa (Term Term) Term)





(declare-fun Tm_arrow_286c509b12b9a2bb9bf1025c6fd97451 () Term)


; </end encoding let rec find>


; <Skipped val FStar.List.Tot.Base.filter/>


; <Start encoding let rec filter>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.filter.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.filter.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.filter (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.filter@tok () Term)



(declare-fun Tm_arrow_7c3df353a3c3ca9bc0a8454788aa9ad1 () Term)

; </end encoding let rec filter>


; <Start encoding let rec mem_filter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.mem_filter (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.mem_filter@tok () Term)

; </end encoding let rec mem_filter>


; <Start encoding let mem_filter_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.mem_filter_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.mem_filter_forall@tok () Term)


; </end encoding let mem_filter_forall>


; <Skipped val FStar.List.Tot.Base.for_all/>


; <Start encoding let rec for_all>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.for_all.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.for_all.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.for_all (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.for_all@tok () Term)





; </end encoding let rec for_all>


; <Start encoding let rec for_all_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.for_all_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.for_all_mem@tok () Term)

; </end encoding let rec for_all_mem>


; <Skipped val FStar.List.Tot.Base.collect/>


; <Start encoding let rec collect>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.collect.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.collect.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.collect (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.collect@tok () Term)





; </end encoding let rec collect>


; <Skipped val FStar.List.Tot.Base.tryFind/>


; <Start encoding let rec tryFind>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.tryFind.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.tryFind.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.tryFind (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.tryFind@tok () Term)



(declare-fun Tm_arrow_4ae6bca87a611585312b8b0d0d66fefe () Term)

; </end encoding let rec tryFind>


; <Skipped val FStar.List.Tot.Base.tryPick/>


; <Start encoding let rec tryPick>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.tryPick.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.tryPick.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.tryPick (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.tryPick@tok () Term)
(declare-fun Tm_arrow_4b0c7cc34485afa5854ebe5c95023d4c (Term Term) Term)


(declare-fun Tm_arrow_7fbbe8a710b97b9ed9c0d2dfb00b1641 () Term)

; </end encoding let rec tryPick>


; <Skipped val FStar.List.Tot.Base.choose/>


; <Start encoding let rec choose>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.choose.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.choose.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.choose (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.choose@tok () Term)



(declare-fun Tm_arrow_ee03a7411b6d8975b285ea6c772c4d89 () Term)

; </end encoding let rec choose>


; <Skipped val FStar.List.Tot.Base.partition/>


; <Start encoding let rec partition>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.partition.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.partition.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.partition (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.partition@tok () Term)



(declare-fun Tm_arrow_706f575815ce8a3bbd962da035d8aa14 () Term)

; </end encoding let rec partition>


; <Skipped val FStar.List.Tot.Base.subset/>


; <Start encoding let rec subset>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.subset.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.subset.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.subset (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.subset@tok () Term)
(declare-fun Tm_arrow_8d819a995fc33b4cb6aa699af88e8d32 () Term)

; </end encoding let rec subset>


; <Skipped val FStar.List.Tot.Base.noRepeats/>


; <Start encoding let rec noRepeats>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.noRepeats.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.noRepeats.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.noRepeats (Term Term) Term)
(declare-fun FStar.List.Tot.Base.noRepeats@tok () Term)
(declare-fun Tm_arrow_0dd285b24907a2f8b15dedffef61afa6 () Term)

; </end encoding let rec noRepeats>


; <Skipped val FStar.List.Tot.Base.no_repeats_p/>


; <Start encoding let rec no_repeats_p>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.no_repeats_p.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.no_repeats_p.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.no_repeats_p (Term Term) Term)
(declare-fun FStar.List.Tot.Base.no_repeats_p@tok () Term)
(declare-fun Tm_arrow_79c2442eab9e49d1108d2b7a240dc76e () Term)

; </end encoding let rec no_repeats_p>


; <Skipped val FStar.List.Tot.Base.assoc/>


; <Start encoding let rec assoc>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.assoc.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.assoc.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.assoc (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.assoc@tok () Term)
(declare-fun Tm_arrow_d77cf796c5b72d2c2316c0fcdad1dd79 () Term)

; </end encoding let rec assoc>


; <Skipped val FStar.List.Tot.Base.split/>


; <Start encoding let rec split>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.split.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.split.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.split (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.split@tok () Term)
(declare-fun Tm_arrow_1c3cb31b4ffa47bc6454f5b8a25e2407 () Term)

; </end encoding let rec split>


; <Start encoding let unzip>

(declare-fun FStar.List.Tot.Base.unzip (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.unzip@tok () Term)

; </end encoding let unzip>


; <Skipped val FStar.List.Tot.Base.unzip3/>


; <Start encoding let rec unzip3>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.unzip3.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.unzip3.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.unzip3 (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.unzip3@tok () Term)
(declare-fun Tm_arrow_d40be6b496fedb6f7a46205c5824b732 () Term)

; </end encoding let rec unzip3>


; <Start encoding let rec splitAt>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.splitAt.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.splitAt.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.splitAt (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.splitAt@tok () Term)
(declare-fun Tm_arrow_e36bd078e08c2ac2f1324fef6e0a4a22 () Term)

; </end encoding let rec splitAt>


; <Start encoding let rec lemma_splitAt_snd_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.lemma_splitAt_snd_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.lemma_splitAt_snd_length@tok () Term)

; </end encoding let rec lemma_splitAt_snd_length>


; <Skipped val FStar.List.Tot.Base.unsnoc/>


; <Start encoding let unsnoc>

(declare-fun Tm_refine_3f6b38b2852708f36615f9b4db0f9ff1 (Term) Term)
(declare-fun FStar.List.Tot.Base.unsnoc (Term Term) Term)

(declare-fun Tm_arrow_f4bc61622db0c39a751170734a140783 () Term)
(declare-fun FStar.List.Tot.Base.unsnoc@tok () Term)


; </end encoding let unsnoc>


; <Skipped val FStar.List.Tot.Base.split3/>


; <Start encoding let split3>


(declare-fun FStar.List.Tot.Base.split3 (Term Term Term) Term)

(declare-fun Tm_arrow_07dcb44faa0fb6172673970868e7ecff () Term)
(declare-fun FStar.List.Tot.Base.split3@tok () Term)


; </end encoding let split3>


; <Skipped val FStar.List.Tot.Base.partition_length/>


; <Start encoding let rec partition_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.partition_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.partition_length@tok () Term)

; </end encoding let rec partition_length>


; <Skipped val FStar.List.Tot.Base.bool_of_compare/>


; <Start encoding let bool_of_compare>

(declare-fun Tm_arrow_9877f854fbaabbcfda94f6c19b32ae3f (Term) Term)
(declare-fun FStar.List.Tot.Base.bool_of_compare (Term Term Term Term) Term)

(declare-fun Tm_arrow_a2f219461d35e20b7bc771538ca96429 () Term)
(declare-fun FStar.List.Tot.Base.bool_of_compare@tok () Term)


; </end encoding let bool_of_compare>


; <Skipped val FStar.List.Tot.Base.compare_of_bool/>


; <Start encoding let compare_of_bool>

(declare-fun Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e (Term) Term)
(declare-fun FStar.List.Tot.Base.compare_of_bool (Term Term Term Term) Term)

(declare-fun Tm_arrow_8b54d4820d055c327440d0d4811d3a33 () Term)
(declare-fun FStar.List.Tot.Base.compare_of_bool@tok () Term)


; </end encoding let compare_of_bool>


; <Start encoding let compare_of_bool_of_compare>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.compare_of_bool_of_compare (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.compare_of_bool_of_compare@tok () Term)

; </end encoding let compare_of_bool_of_compare>


; <Skipped val FStar.List.Tot.Base.sortWith/>


; <Start encoding let rec sortWith>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.sortWith.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.sortWith.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.sortWith (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.sortWith@tok () Term)



(declare-fun Tm_arrow_d29fb5884447b657cb725f9be68c5ba6 () Term)

; </end encoding let rec sortWith>


; <Start encoding let rec strict_suffix_of>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.strict_suffix_of (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.strict_suffix_of@tok () Term)
(declare-fun Tm_refine_da3062322c9bea8d5b2058386775b91a () Term)

(declare-fun Tm_arrow_1d91178a138c1826d6a199b1613394f1 () Term)


; </end encoding let rec strict_suffix_of>


; <Start encoding let strict_prefix_of>

(declare-fun FStar.List.Tot.Base.strict_prefix_of (Term) Term)

(declare-fun Tm_arrow_0dd65914dd84642f7849df5d67086aa0 (Term) Term)
(declare-fun Tm_arrow_25d975ae357f14f725a8d52a81f8be72 () Term)
(declare-fun FStar.List.Tot.Base.strict_prefix_of@tok () Term)



; </end encoding let strict_prefix_of>


; <Skipped val FStar.List.Tot.Base.list_unref/>


; <Start encoding let rec list_unref>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_unref.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_unref.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_unref (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_unref@tok () Term)






(declare-fun Tm_arrow_6b3a7706fc085133138f00ee506ef176 () Term)

; </end encoding let rec list_unref>


; <Skipped val FStar.List.Tot.Base.list_refb/>


; <Start encoding let rec list_refb>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_refb.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_refb.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_refb (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_refb@tok () Term)

(declare-fun Tm_refine_3dfaece5a1f8e27ecb1367ff50145048 (Term Term) Term)





(declare-fun Tm_refine_b3daba88e15ae8a9be9dd341522270b2 (Term Term Term Term) Term)

(declare-fun Tm_refine_1d1ddbacd892e41ad4ba585e87296d2e (Term Term Term) Term)










(declare-fun Tm_arrow_73c684a5823f2875fcceead4ce671ea8 () Term)







; </end encoding let rec list_refb>


; <Skipped val FStar.List.Tot.Base.list_ref/>


; <Start encoding let rec list_ref>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_ref.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_ref.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_ref (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_ref@tok () Term)

(declare-fun Tm_refine_751cc4d3e845537c495f9d7e1deb8aa9 (Term Term) Term)





(declare-fun Tm_refine_f61b92c00df29b87346e52dcf7670926 (Term Term Term Term) Term)

(declare-fun Tm_refine_16f0c42812e28aba7e30bc8c275306fb (Term Term Term) Term)










(declare-fun Tm_arrow_73f29356f974e35d230fb85375ad3965 () Term)







; </end encoding let rec list_ref>


; End Externals for module FStar.List.Tot.Base


; Externals for interface FStar.List.Tot.Properties


; <Start encoding let llist>

(declare-fun FStar.List.Tot.Properties.llist (Term Term) Term)
(declare-fun Tm_arrow_67c7b2626869cb316f118144000415b9 () Term)
(declare-fun FStar.List.Tot.Properties.llist@tok () Term)
(declare-fun Tm_refine_fbb3412f12fd58a91571022d7c9fa36d (Term Term) Term)

; </end encoding let llist>


; <Start encoding val FStar.List.Tot.Properties.mem_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_memP>


; <Start encoding val FStar.List.Tot.Properties.lemma_index_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_index_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_index_memP@tok () Term)
(declare-fun Tm_refine_bf2fa1226f2c9a0f6671df3e80ddcb8e (Term Term) Term)

; </end encoding val FStar.List.Tot.Properties.lemma_index_memP>


; <Start encoding val FStar.List.Tot.Properties.memP_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_empty@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_empty>


; <Start encoding val FStar.List.Tot.Properties.memP_existsb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_existsb (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_existsb@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_existsb>


; <Start encoding val FStar.List.Tot.Properties.memP_map_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_intro (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_map_intro>


; <Start encoding val FStar.List.Tot.Properties.memP_map_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_elim (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_elim@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_map_elim>


; <Start encoding val FStar.List.Tot.Properties.mem_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_empty@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_empty>


; <Start encoding val FStar.List.Tot.Properties.mem_existsb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_existsb (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_existsb@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_existsb>


; <Start encoding val FStar.List.Tot.Properties.mem_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_count (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_count@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_count>


; <Start encoding val FStar.List.Tot.Properties.rev_acc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_acc_length>


; <Start encoding val FStar.List.Tot.Properties.rev_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_length>


; <Start encoding val FStar.List.Tot.Properties.rev_acc_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_memP (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_acc_memP>


; <Start encoding val FStar.List.Tot.Properties.rev_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_memP>


; <Start encoding val FStar.List.Tot.Properties.rev_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_mem>


; <Start encoding val FStar.List.Tot.Properties.append_nil_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_nil_l (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_nil_l@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_nil_l>


; <Start encoding val FStar.List.Tot.Properties.append_l_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_l_nil (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_l_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_l_nil>


; <Start encoding val FStar.List.Tot.Properties.append_cons_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_cons_l (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_cons_l@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_cons_l>


; <Start encoding val FStar.List.Tot.Properties.append_l_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_l_cons (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_l_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_l_cons>


; <Start encoding val FStar.List.Tot.Properties.append_assoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_assoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_assoc@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_assoc>


; <Start encoding val FStar.List.Tot.Properties.append_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_length>


; <Start encoding val FStar.List.Tot.Properties.append_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_mem>


; <Start encoding val FStar.List.Tot.Properties.append_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_memP (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_memP>


; <Start encoding val FStar.List.Tot.Properties.append_mem_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_mem_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_mem_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_mem_forall>


; <Start encoding val FStar.List.Tot.Properties.append_memP_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_memP_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_memP_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_memP_forall>


; <Start encoding val FStar.List.Tot.Properties.append_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_count (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_count@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_count>


; <Start encoding val FStar.List.Tot.Properties.append_count_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_count_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_count_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_count_forall>


; <Start encoding val FStar.List.Tot.Properties.append_eq_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_eq_nil>


; <Start encoding val FStar.List.Tot.Properties.append_eq_singl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_singl (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_singl@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_eq_singl>


; <Start encoding val FStar.List.Tot.Properties.append_inv_head>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_head (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_head@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_inv_head>


; <Start encoding val FStar.List.Tot.Properties.append_inv_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_tail (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_tail@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_inv_tail>


; <Start encoding val FStar.List.Tot.Properties.append_length_inv_head>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_head (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_head@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_length_inv_head>


; <Start encoding val FStar.List.Tot.Properties.append_length_inv_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_tail (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_tail@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_length_inv_tail>


; <Start encoding val FStar.List.Tot.Properties.append_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_injective (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_injective@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_injective>


; <Start encoding val FStar.List.Tot.Properties.lemma_append_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_append_last (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_append_last@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_append_last>


; <Start encoding let rec rev'>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.rev_.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.rev_.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.rev_ (Term Term) Term)
(declare-fun FStar.List.Tot.Properties.rev_@tok () Term)


; </end encoding let rec rev'>


; <Start encoding let rev'T>

(declare-fun FStar.List.Tot.Properties.rev_T (Term) Term)
(declare-fun Tm_arrow_f34ce2ad5441b4bd300fa100b397737d (Term) Term)
(declare-fun Tm_arrow_42c6b27a859866d5307ff94c9f459cb1 () Term)
(declare-fun FStar.List.Tot.Properties.rev_T@tok () Term)


; </end encoding let rev'T>


; <Start encoding val FStar.List.Tot.Properties.rev_acc_rev'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_rev_ (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_rev_@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_acc_rev'>


; <Start encoding val FStar.List.Tot.Properties.rev_rev'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_rev_ (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_rev_@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_rev'>


; <Start encoding val FStar.List.Tot.Properties.rev'_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev'_append>


; <Start encoding val FStar.List.Tot.Properties.rev_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_append>


; <Start encoding val FStar.List.Tot.Properties.rev'_involutive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__involutive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__involutive@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev'_involutive>


; <Start encoding val FStar.List.Tot.Properties.rev_involutive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_involutive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_involutive@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_involutive>


; <Start encoding val FStar.List.Tot.Properties.lemma_snoc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_snoc_length>


; <Start encoding val FStar.List.Tot.Properties.rev'_list_ind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__list_ind (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__list_ind@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev'_list_ind>


; <Start encoding val FStar.List.Tot.Properties.rev_ind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_ind (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_ind@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_ind>


; <Start encoding val FStar.List.Tot.Properties.map_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_lemma@tok () Term)


; </end encoding val FStar.List.Tot.Properties.map_lemma>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_snoc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_snoc@tok () Term)
(declare-fun Tm_refine_e88aba6d4c79a5625ab4330932edf7ed (Term) Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_snoc>


; <Start encoding val FStar.List.Tot.Properties.lemma_snoc_unsnoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_unsnoc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_unsnoc@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_snoc_unsnoc>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_length>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_append>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_is_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_is_last (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_is_last@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_is_last>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_index@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_index>


; <Start encoding let rec split_using>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.split_using.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.split_using.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.split_using (Term Term Term) Term)
(declare-fun FStar.List.Tot.Properties.split_using@tok () Term)
(declare-fun Tm_refine_ca5b6dc4e0a851997703798a1ffc5f70 (Term Term) Term)


(declare-fun Tm_ghost_arrow_583c096a402961cd40d8b718fb07bacc () Term)

; </end encoding let rec split_using>


; <Start encoding val FStar.List.Tot.Properties.lemma_split_using>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_split_using (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_split_using@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_split_using>


; <Start encoding let rec index_of>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.index_of.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.index_of.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.index_of (Term Term Term) Term)
(declare-fun FStar.List.Tot.Properties.index_of@tok () Term)

(declare-fun Tm_refine_cd45ecc9daf74409c394004efbaa3338 (Term Term Term) Term)



(declare-fun Tm_ghost_arrow_d9cd5e48f458f8c211c59f9048af3929 () Term)


; </end encoding let rec index_of>


; <Start encoding val FStar.List.Tot.Properties.partition_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_mem>


; <Start encoding val FStar.List.Tot.Properties.partition_mem_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_mem_forall>


; <Start encoding val FStar.List.Tot.Properties.partition_mem_p_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_p_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_p_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_mem_p_forall>


; <Start encoding val FStar.List.Tot.Properties.partition_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_count (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_count@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_count>


; <Start encoding val FStar.List.Tot.Properties.partition_count_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_count_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_count_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_count_forall>


; <Start encoding val FStar.List.Tot.Properties.mem_subset>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_subset (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_subset@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_subset>


; <Start encoding val FStar.List.Tot.Properties.subset_reflexive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.subset_reflexive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.subset_reflexive@tok () Term)

; </end encoding val FStar.List.Tot.Properties.subset_reflexive>


; <Start encoding val FStar.List.Tot.Properties.sortWith_permutation>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_permutation (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_permutation@tok () Term)

; </end encoding val FStar.List.Tot.Properties.sortWith_permutation>


; <Start encoding let rec sorted>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.sorted.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.sorted.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.sorted (Term Term) Term)
(declare-fun FStar.List.Tot.Properties.sorted@tok () Term)

(declare-fun Tm_arrow_9cabe840930f95fd18f81c0a913ddb25 (Term) Term)
(declare-fun Tm_abs_4bfb53c1305d6fe7222f07cf49f467b6 (Term Term Fuel Term) Term)




(declare-fun Tm_arrow_af42ab660b7a2cfc6caea649532e5867 () Term)


; </end encoding let rec sorted>


; <Start encoding let total_order>


(declare-fun FStar.List.Tot.Properties.total_order (Term Term) Term)

(declare-fun Tm_arrow_92649d42e4d7df07b51f92b06355903e () Term)
(declare-fun FStar.List.Tot.Properties.total_order@tok () Term)


; </end encoding let total_order>


; <Start encoding val FStar.List.Tot.Properties.append_sorted>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_sorted (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_sorted@tok () Term)

(declare-fun Tm_refine_a928c26e721d07631e5f0d63f521a37e (Term Term) Term)


; </end encoding val FStar.List.Tot.Properties.append_sorted>


; <Start encoding val FStar.List.Tot.Properties.sortWith_sorted>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_sorted (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_sorted@tok () Term)

; </end encoding val FStar.List.Tot.Properties.sortWith_sorted>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_nil (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_nil>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_cons>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_append_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_elim@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_append_elim>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_append_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_append_intro>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_nil (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_nil>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_cons>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_elim@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_elim>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_intro>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_swap>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_swap (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_swap@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_swap>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_permut>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_permut (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_permut@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_permut>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_false_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_false_intro (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_false_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_false_intro>


; <Start encoding val FStar.List.Tot.Properties.assoc_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_nil>


; <Start encoding val FStar.List.Tot.Properties.assoc_cons_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_eq (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_eq@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_cons_eq>


; <Start encoding val FStar.List.Tot.Properties.assoc_cons_not_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_not_eq (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_not_eq@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_cons_not_eq>


; <Start encoding val FStar.List.Tot.Properties.assoc_append_elim_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_r (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_r@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_append_elim_r>


; <Start encoding val FStar.List.Tot.Properties.assoc_append_elim_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_l (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_l@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_append_elim_l>


; <Start encoding val FStar.List.Tot.Properties.assoc_memP_some>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_some (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_some@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_memP_some>


; <Start encoding val FStar.List.Tot.Properties.assoc_memP_none>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_none (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_none@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_memP_none>


; <Start encoding val FStar.List.Tot.Properties.assoc_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_mem>


; <Start encoding val FStar.List.Tot.Properties.fold_left_invar>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_invar (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_invar@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_invar>


; <Start encoding val FStar.List.Tot.Properties.fold_left_map>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_map (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_map@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_map>


; <Start encoding val FStar.List.Tot.Properties.map_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_append (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.map_append>


; <Start encoding val FStar.List.Tot.Properties.fold_left_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_append>


; <Start encoding val FStar.List.Tot.Properties.fold_left_monoid>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_monoid (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_monoid@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_monoid>


; <Start encoding val FStar.List.Tot.Properties.fold_left_append_monoid>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append_monoid (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append_monoid@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_append_monoid>


; <Start encoding val FStar.List.Tot.Properties.index_extensionality>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.index_extensionality (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.index_extensionality@tok () Term)

; </end encoding val FStar.List.Tot.Properties.index_extensionality>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_nil>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_cons>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_trans>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_trans (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_trans@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_trans>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_correct>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_correct (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_correct@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_correct>


; <Start encoding val FStar.List.Tot.Properties.map_strict_suffix_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_strict_suffix_of (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_strict_suffix_of@tok () Term)

; </end encoding val FStar.List.Tot.Properties.map_strict_suffix_of>


; <Start encoding val FStar.List.Tot.Properties.mem_strict_suffix_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_strict_suffix_of (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_strict_suffix_of@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_strict_suffix_of>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_exists_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_exists_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_exists_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_exists_append>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append>


; <Start encoding val FStar.List.Tot.Properties.precedes_tl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_tl (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_tl@tok () Term)

; </end encoding val FStar.List.Tot.Properties.precedes_tl>


; <Start encoding val FStar.List.Tot.Properties.precedes_append_cons_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_r (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_r@tok () Term)

; </end encoding val FStar.List.Tot.Properties.precedes_append_cons_r>


; <Start encoding val FStar.List.Tot.Properties.precedes_append_cons_prod_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_prod_r (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_prod_r@tok () Term)

; </end encoding val FStar.List.Tot.Properties.precedes_append_cons_prod_r>


; <Start encoding val FStar.List.Tot.Properties.memP_precedes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_precedes (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_precedes@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_precedes>


; <Start encoding val FStar.List.Tot.Properties.assoc_precedes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_precedes (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_precedes@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_precedes>


; <Start encoding val FStar.List.Tot.Properties.find_none>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.find_none (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.find_none@tok () Term)

; </end encoding val FStar.List.Tot.Properties.find_none>


; <Start encoding val FStar.List.Tot.Properties.append_init_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_init_last (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_init_last@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_init_last>


; <Start encoding val FStar.List.Tot.Properties.init_last_def>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.init_last_def (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.init_last_def@tok () Term)

; </end encoding val FStar.List.Tot.Properties.init_last_def>


; <Start encoding val FStar.List.Tot.Properties.init_last_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.init_last_inj (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.init_last_inj@tok () Term)

; </end encoding val FStar.List.Tot.Properties.init_last_inj>


; <Start encoding val FStar.List.Tot.Properties.for_all_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.for_all_append (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.for_all_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.for_all_append>


; End Externals for interface FStar.List.Tot.Properties


; Externals for module FStar.List.Tot


; End Externals for module FStar.List.Tot


; Externals for interface FStar.Seq.Base


; <Start encoding val FStar.Seq.Base.seq>

(declare-fun FStar.Seq.Base.seq (Term) Term)

(declare-fun FStar.Seq.Base.seq@tok () Term)

; </end encoding val FStar.Seq.Base.seq>


; <Start encoding val FStar.Seq.Base.length>

(declare-fun FStar.Seq.Base.length (Term Term) Term)
(declare-fun Tm_arrow_d2c01593e1ccf972aadc4bced72f8166 () Term)
(declare-fun FStar.Seq.Base.length@tok () Term)

; </end encoding val FStar.Seq.Base.length>


; <Start encoding val FStar.Seq.Base.seq_to_list>

(declare-fun FStar.Seq.Base.seq_to_list (Term Term) Term)
(declare-fun Tm_refine_c4e3a92f9bd1d01a07e4fb66c5de2e7e (Term Term) Term)
(declare-fun Tm_arrow_7d1aeb9cf9244f8c50e0ad901486a03b () Term)
(declare-fun FStar.Seq.Base.seq_to_list@tok () Term)


; </end encoding val FStar.Seq.Base.seq_to_list>


; <Start encoding val FStar.Seq.Base.seq_of_list>

(declare-fun FStar.Seq.Base.seq_of_list (Term Term) Term)
(declare-fun Tm_refine_d2d1ea66f2b3a92c2deb42edcbb784ce (Term Term) Term)
(declare-fun Tm_arrow_4966fa2986a35d9c0803c863a2768cbd () Term)
(declare-fun FStar.Seq.Base.seq_of_list@tok () Term)


; </end encoding val FStar.Seq.Base.seq_of_list>


; <Start encoding val FStar.Seq.Base.index>

(declare-fun Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 (Term Term) Term)
(declare-fun FStar.Seq.Base.index (Term Term Term) Term)

(declare-fun Tm_arrow_1910ef5262f2ee8e712b6609a232b1ea () Term)
(declare-fun FStar.Seq.Base.index@tok () Term)

; </end encoding val FStar.Seq.Base.index>


; <Start encoding val FStar.Seq.Base.create>

(declare-fun FStar.Seq.Base.create (Term Term Term) Term)
(declare-fun Tm_arrow_b5b3d4fcc48eb666a8878550e50df9fb () Term)
(declare-fun FStar.Seq.Base.create@tok () Term)

; </end encoding val FStar.Seq.Base.create>


; <Start encoding val FStar.Seq.Base.init_aux>

(declare-fun Tm_refine_c1424615841f28cac7fc34e92b7ff33c (Term) Term)

(declare-fun Tm_arrow_44bb45ed5c2534b346e0f58ea5033251 (Term Term) Term)
(declare-fun FStar.Seq.Base.init_aux (Term Term Term Term) Term)



(declare-fun Tm_arrow_da6bbab10714c064205223f9990745bd () Term)
(declare-fun FStar.Seq.Base.init_aux@tok () Term)

; </end encoding val FStar.Seq.Base.init_aux>


; <Start encoding val FStar.Seq.Base.init>



(declare-fun FStar.Seq.Base.init (Term Term Term) Term)


(declare-fun Tm_arrow_d638d84259a58eff38c91944355ac313 () Term)
(declare-fun FStar.Seq.Base.init@tok () Term)

; </end encoding val FStar.Seq.Base.init>


; <Start encoding val FStar.Seq.Base.init_aux_ghost>



(declare-fun Tm_ghost_arrow_b7c239afcc620812134a759b53cafcc7 (Term Term) Term)
(declare-fun FStar.Seq.Base.init_aux_ghost (Term Term Term Term) Term)



(declare-fun Tm_ghost_arrow_90c084cce85ad5fa9b6789a83ba7b9d5 () Term)
(declare-fun FStar.Seq.Base.init_aux_ghost@tok () Term)

; </end encoding val FStar.Seq.Base.init_aux_ghost>


; <Start encoding val FStar.Seq.Base.init_ghost>



(declare-fun FStar.Seq.Base.init_ghost (Term Term Term) Term)


(declare-fun Tm_ghost_arrow_dc3e2497ae3914facc1bb3cecddbafe4 () Term)
(declare-fun FStar.Seq.Base.init_ghost@tok () Term)

; </end encoding val FStar.Seq.Base.init_ghost>


; <Start encoding val FStar.Seq.Base.empty>

(declare-fun FStar.Seq.Base.empty (Term) Term)
(declare-fun Tm_refine_b913a3f691ca99086652e0a655e72f17 (Term) Term)
(declare-fun Tm_arrow_c39fb4e3e203a822394c714f70ec2d2c () Term)
(declare-fun FStar.Seq.Base.empty@tok () Term)


; </end encoding val FStar.Seq.Base.empty>


; <Start encoding let createEmpty>

(declare-fun FStar.Seq.Base.createEmpty (Term) Term)


(declare-fun FStar.Seq.Base.createEmpty@tok () Term)


; </end encoding let createEmpty>


; <Start encoding val FStar.Seq.Base.lemma_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_empty@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_empty>


; <Start encoding val FStar.Seq.Base.upd>


(declare-fun FStar.Seq.Base.upd (Term Term Term Term) Term)

(declare-fun Tm_arrow_12766e98f50c8b91e296bbc369061265 () Term)
(declare-fun FStar.Seq.Base.upd@tok () Term)

; </end encoding val FStar.Seq.Base.upd>


; <Start encoding val FStar.Seq.Base.append>

(declare-fun FStar.Seq.Base.append (Term Term Term) Term)
(declare-fun Tm_arrow_22c1b165cc91e8aafbceb8b36244be8e () Term)
(declare-fun FStar.Seq.Base.append@tok () Term)

; </end encoding val FStar.Seq.Base.append>


; <Start encoding let cons>

(declare-fun FStar.Seq.Base.cons (Term Term Term) Term)
(declare-fun Tm_arrow_62ad6018b578ef7ed3c0e74bdebff729 () Term)
(declare-fun FStar.Seq.Base.cons@tok () Term)

; </end encoding let cons>


; <Start encoding let op_At_Bar>

(declare-fun FStar.Seq.Base.op_At_Bar (Term Term Term) Term)

(declare-fun FStar.Seq.Base.op_At_Bar@tok () Term)

; </end encoding let op_At_Bar>


; <Start encoding val FStar.Seq.Base.slice>

(declare-fun Tm_refine_81407705a0828c2c1b1976675443f647 (Term Term Term) Term)
(declare-fun FStar.Seq.Base.slice (Term Term Term Term) Term)

(declare-fun Tm_arrow_f59809c98fadf275c00ce819f5868628 () Term)
(declare-fun FStar.Seq.Base.slice@tok () Term)

; </end encoding val FStar.Seq.Base.slice>


; <Start encoding val FStar.Seq.Base.lemma_seq_of_seq_to_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_seq_of_seq_to_list (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_seq_of_seq_to_list@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_seq_of_seq_to_list>


; <Start encoding val FStar.Seq.Base.lemma_seq_to_seq_of_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_seq_to_seq_of_list (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_seq_to_seq_of_list@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_seq_to_seq_of_list>


; <Start encoding val FStar.Seq.Base.lemma_seq_of_list_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_seq_of_list_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_seq_of_list_cons@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_seq_of_list_cons>


; <Start encoding val FStar.Seq.Base.lemma_seq_to_list_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_seq_to_list_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_seq_to_list_cons@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_seq_to_list_cons>


; <Start encoding val FStar.Seq.Base.lemma_create_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_create_len (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_create_len@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_create_len>


; <Start encoding val FStar.Seq.Base.lemma_init_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_len (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_len@tok () Term)



; </end encoding val FStar.Seq.Base.lemma_init_len>


; <Start encoding val FStar.Seq.Base.lemma_init_aux_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_aux_len (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_aux_len@tok () Term)




; </end encoding val FStar.Seq.Base.lemma_init_aux_len>


; <Start encoding val FStar.Seq.Base.lemma_init_ghost_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_len (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_len@tok () Term)



; </end encoding val FStar.Seq.Base.lemma_init_ghost_len>


; <Start encoding val FStar.Seq.Base.lemma_init_ghost_aux_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_aux_len (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_aux_len@tok () Term)




; </end encoding val FStar.Seq.Base.lemma_init_ghost_aux_len>


; <Start encoding val FStar.Seq.Base.lemma_len_upd>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_len_upd (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_len_upd@tok () Term)
(declare-fun Tm_refine_2ca062977a42c36634b89c1c4f193f79 (Term Term) Term)

; </end encoding val FStar.Seq.Base.lemma_len_upd>


; <Start encoding val FStar.Seq.Base.lemma_len_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_len_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_len_append@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_len_append>


; <Start encoding val FStar.Seq.Base.lemma_len_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_len_slice (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_len_slice@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_len_slice>


; <Start encoding val FStar.Seq.Base.lemma_index_create>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_create (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_create@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_index_create>


; <Start encoding val FStar.Seq.Base.lemma_index_upd1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd1@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_index_upd1>


; <Start encoding val FStar.Seq.Base.lemma_index_upd2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd2 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd2@tok () Term)

(declare-fun Tm_refine_df81b3f17797c6f405c1dbb191651292 (Term Term Term) Term)

; </end encoding val FStar.Seq.Base.lemma_index_upd2>


; <Start encoding val FStar.Seq.Base.lemma_index_app1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_app1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_app1@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_index_app1>


; <Start encoding val FStar.Seq.Base.lemma_index_app2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_app2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_app2@tok () Term)
(declare-fun Tm_refine_ac201cf927190d39c033967b63cb957b (Term Term Term) Term)

; </end encoding val FStar.Seq.Base.lemma_index_app2>


; <Start encoding val FStar.Seq.Base.lemma_index_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_slice (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_slice@tok () Term)
(declare-fun Tm_refine_d3d07693cd71377864ef84dc97d10ec1 (Term Term Term) Term)
(declare-fun Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8 (Term Term) Term)

; </end encoding val FStar.Seq.Base.lemma_index_slice>


; <Start encoding val FStar.Seq.Base.hasEq_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.hasEq_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.hasEq_lemma@tok () Term)

; </end encoding val FStar.Seq.Base.hasEq_lemma>


; <Start encoding val FStar.Seq.Base.equal>

(declare-fun FStar.Seq.Base.equal (Term Term Term) Term)
(declare-fun Tm_arrow_c2c0a5f39eee7a5a92db8bac6fe4fb3b () Term)
(declare-fun FStar.Seq.Base.equal@tok () Term)

; </end encoding val FStar.Seq.Base.equal>


; <Start encoding val FStar.Seq.Base.eq_i>

(declare-fun Tm_refine_4639d389381bee5cf8cf77b7a6585074 (Term Term) Term)
(declare-fun Tm_refine_b361ba8089a6e963921008d537e799a1 (Term Term) Term)
(declare-fun FStar.Seq.Base.eq_i (Term Term Term Term) Term)


(declare-fun Tm_refine_331c14d442c5ee89a4fce6ea305c920f (Term Term Term) Term)
(declare-fun Tm_refine_51f956555266662f5f0ed4aac81d10bc (Term Term Term Term) Term)
(declare-fun Tm_arrow_e5286e13b5c071949ebc5146fbef7d7f () Term)
(declare-fun FStar.Seq.Base.eq_i@tok () Term)



; </end encoding val FStar.Seq.Base.eq_i>


; <Start encoding val FStar.Seq.Base.eq>

(declare-fun FStar.Seq.Base.eq (Term Term Term) Term)
(declare-fun Tm_refine_1c0effbdef48f9b00a1efb7b571fbb69 (Term Term Term) Term)
(declare-fun Tm_arrow_70ef1e4b9388d8aa6e0d17c5aeed02a7 () Term)
(declare-fun FStar.Seq.Base.eq@tok () Term)


; </end encoding val FStar.Seq.Base.eq>


; <Start encoding val FStar.Seq.Base.lemma_eq_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_eq_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_eq_intro@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_eq_intro>


; <Start encoding val FStar.Seq.Base.lemma_eq_refl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_eq_refl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_eq_refl@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_eq_refl>


; <Start encoding val FStar.Seq.Base.lemma_eq_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_eq_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_eq_elim@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_eq_elim>


; <Start encoding val FStar.Seq.Base.append_assoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.append_assoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.append_assoc@tok () Term)

; </end encoding val FStar.Seq.Base.append_assoc>


; <Start encoding val FStar.Seq.Base.append_empty_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.append_empty_l (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.append_empty_l@tok () Term)

; </end encoding val FStar.Seq.Base.append_empty_l>


; <Start encoding val FStar.Seq.Base.append_empty_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.append_empty_r (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.append_empty_r@tok () Term)

; </end encoding val FStar.Seq.Base.append_empty_r>


; <Start encoding val FStar.Seq.Base.init_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_index@tok () Term)

; </end encoding val FStar.Seq.Base.init_index>


; <Start encoding val FStar.Seq.Base.init_index_>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_index_ (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_index_@tok () Term)



; </end encoding val FStar.Seq.Base.init_index_>


; <Start encoding val FStar.Seq.Base.init_ghost_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_ghost_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_ghost_index@tok () Term)

; </end encoding val FStar.Seq.Base.init_ghost_index>


; <Start encoding val FStar.Seq.Base.init_ghost_index_>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_ghost_index_ (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_ghost_index_@tok () Term)



; </end encoding val FStar.Seq.Base.init_ghost_index_>


; <Start encoding val FStar.Seq.Base.lemma_equal_instances_implies_equal_types>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_equal_instances_implies_equal_types (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_equal_instances_implies_equal_types@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_equal_instances_implies_equal_types>


; End Externals for interface FStar.Seq.Base


; Externals for interface FStar.Math.Lemmas


; <Start encoding val FStar.Math.Lemmas.euclidean_div_axiom>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.euclidean_div_axiom (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.euclidean_div_axiom@tok () Term)

; </end encoding val FStar.Math.Lemmas.euclidean_div_axiom>


; <Start encoding val FStar.Math.Lemmas.lemma_eucl_div_bound>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_eucl_div_bound (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_eucl_div_bound@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_eucl_div_bound>


; <Start encoding val FStar.Math.Lemmas.lemma_mult_le_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_le_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_le_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mult_le_left>


; <Start encoding val FStar.Math.Lemmas.lemma_mult_le_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_le_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_le_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mult_le_right>


; <Start encoding val FStar.Math.Lemmas.lemma_mult_lt_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mult_lt_left>


; <Start encoding val FStar.Math.Lemmas.lemma_mult_lt_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mult_lt_right>


; <Start encoding val FStar.Math.Lemmas.lemma_mult_lt_sqr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_sqr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_sqr@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mult_lt_sqr>


; <Start encoding val FStar.Math.Lemmas.swap_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.swap_mul (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.swap_mul@tok () Term)

; </end encoding val FStar.Math.Lemmas.swap_mul>


; <Start encoding val FStar.Math.Lemmas.lemma_cancel_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_cancel_mul (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_cancel_mul@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_cancel_mul>


; <Start encoding val FStar.Math.Lemmas.distributivity_add_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.distributivity_add_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.distributivity_add_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.distributivity_add_left>


; <Start encoding val FStar.Math.Lemmas.distributivity_add_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.distributivity_add_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.distributivity_add_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.distributivity_add_right>


; <Start encoding val FStar.Math.Lemmas.paren_mul_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.paren_mul_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.paren_mul_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.paren_mul_left>


; <Start encoding val FStar.Math.Lemmas.paren_mul_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.paren_mul_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.paren_mul_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.paren_mul_right>


; <Start encoding val FStar.Math.Lemmas.paren_add_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.paren_add_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.paren_add_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.paren_add_left>


; <Start encoding val FStar.Math.Lemmas.paren_add_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.paren_add_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.paren_add_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.paren_add_right>


; <Start encoding val FStar.Math.Lemmas.addition_is_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.addition_is_associative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.addition_is_associative@tok () Term)

; </end encoding val FStar.Math.Lemmas.addition_is_associative>


; <Start encoding val FStar.Math.Lemmas.subtraction_is_distributive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.subtraction_is_distributive (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.subtraction_is_distributive@tok () Term)

; </end encoding val FStar.Math.Lemmas.subtraction_is_distributive>


; <Start encoding val FStar.Math.Lemmas.swap_add_plus_minus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.swap_add_plus_minus (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.swap_add_plus_minus@tok () Term)

; </end encoding val FStar.Math.Lemmas.swap_add_plus_minus>


; <Start encoding val FStar.Math.Lemmas.neg_mul_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.neg_mul_left (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.neg_mul_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.neg_mul_left>


; <Start encoding val FStar.Math.Lemmas.neg_mul_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.neg_mul_right (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.neg_mul_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.neg_mul_right>


; <Start encoding val FStar.Math.Lemmas.swap_neg_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.swap_neg_mul (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.swap_neg_mul@tok () Term)

; </end encoding val FStar.Math.Lemmas.swap_neg_mul>


; <Start encoding val FStar.Math.Lemmas.distributivity_sub_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.distributivity_sub_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.distributivity_sub_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.distributivity_sub_left>


; <Start encoding val FStar.Math.Lemmas.distributivity_sub_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.distributivity_sub_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.distributivity_sub_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.distributivity_sub_right>


; <Start encoding val FStar.Math.Lemmas.mul_binds_tighter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_binds_tighter (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_binds_tighter@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_binds_tighter>


; <Start encoding val FStar.Math.Lemmas.lemma_abs_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_abs_mul (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_abs_mul@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_abs_mul>


; <Start encoding val FStar.Math.Lemmas.lemma_abs_bound>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_abs_bound (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_abs_bound@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_abs_bound>


; <Start encoding val FStar.Math.Lemmas.mul_ineq1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_ineq1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_ineq1@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_ineq1>


; <Start encoding val FStar.Math.Lemmas.add_zero_left_is_same>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.add_zero_left_is_same (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.add_zero_left_is_same@tok () Term)

; </end encoding val FStar.Math.Lemmas.add_zero_left_is_same>


; <Start encoding val FStar.Math.Lemmas.add_zero_right_is_same>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.add_zero_right_is_same (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.add_zero_right_is_same@tok () Term)

; </end encoding val FStar.Math.Lemmas.add_zero_right_is_same>


; <Start encoding val FStar.Math.Lemmas.mul_one_left_is_same>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_one_left_is_same (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_one_left_is_same@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_one_left_is_same>


; <Start encoding val FStar.Math.Lemmas.mul_one_right_is_same>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_one_right_is_same (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_one_right_is_same@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_one_right_is_same>


; <Start encoding val FStar.Math.Lemmas.mul_zero_left_is_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_zero_left_is_zero (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_zero_left_is_zero@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_zero_left_is_zero>


; <Start encoding val FStar.Math.Lemmas.mul_zero_right_is_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_zero_right_is_zero (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_zero_right_is_zero@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_zero_right_is_zero>


; <Start encoding val FStar.Math.Lemmas.nat_times_nat_is_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.nat_times_nat_is_nat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.nat_times_nat_is_nat@tok () Term)

; </end encoding val FStar.Math.Lemmas.nat_times_nat_is_nat>


; <Start encoding val FStar.Math.Lemmas.pos_times_pos_is_pos>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pos_times_pos_is_pos (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pos_times_pos_is_pos@tok () Term)

; </end encoding val FStar.Math.Lemmas.pos_times_pos_is_pos>


; <Start encoding val FStar.Math.Lemmas.nat_over_pos_is_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.nat_over_pos_is_nat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.nat_over_pos_is_nat@tok () Term)

; </end encoding val FStar.Math.Lemmas.nat_over_pos_is_nat>


; <Start encoding val FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma>


; <Start encoding val FStar.Math.Lemmas.int_times_int_equal_zero_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.int_times_int_equal_zero_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.int_times_int_equal_zero_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.int_times_int_equal_zero_lemma>


; <Start encoding val FStar.Math.Lemmas.pow2_double_sum>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_double_sum (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_double_sum@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_double_sum>


; <Start encoding val FStar.Math.Lemmas.pow2_double_mult>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_double_mult (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_double_mult@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_double_mult>


; <Start encoding val FStar.Math.Lemmas.pow2_lt_compat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_lt_compat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_lt_compat@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_lt_compat>


; <Start encoding val FStar.Math.Lemmas.pow2_le_compat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_le_compat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_le_compat@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_le_compat>


; <Start encoding val FStar.Math.Lemmas.pow2_plus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_plus (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_plus@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_plus>


; <Start encoding val FStar.Math.Lemmas.pow2_minus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_minus (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_minus@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_minus>


; <Start encoding val FStar.Math.Lemmas.multiply_fractions>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.multiply_fractions (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.multiply_fractions@tok () Term)

; </end encoding val FStar.Math.Lemmas.multiply_fractions>


; <Start encoding val FStar.Math.Lemmas.modulo_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_lemma>


; <Start encoding val FStar.Math.Lemmas.lemma_div_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_mod@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_mod>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_lt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_lt (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_lt@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_lt>


; <Start encoding val FStar.Math.Lemmas.lemma_div_lt_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt_nat (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt_nat@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_lt_nat>


; <Start encoding val FStar.Math.Lemmas.lemma_div_lt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_lt>


; <Start encoding val FStar.Math.Lemmas.bounded_multiple_is_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.bounded_multiple_is_zero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.bounded_multiple_is_zero@tok () Term)

; </end encoding val FStar.Math.Lemmas.bounded_multiple_is_zero>


; <Start encoding val FStar.Math.Lemmas.small_div>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_div (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_div@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_div>


; <Start encoding val FStar.Math.Lemmas.small_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_mod@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_mod>


; <Start encoding val FStar.Math.Lemmas.lt_multiple_is_equal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lt_multiple_is_equal (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lt_multiple_is_equal@tok () Term)

; </end encoding val FStar.Math.Lemmas.lt_multiple_is_equal>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_plus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_plus>


; <Start encoding val FStar.Math.Lemmas.lemma_div_plus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_plus (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_plus@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_plus>


; <Start encoding val FStar.Math.Lemmas.lemma_div_mod_plus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_mod_plus (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_mod_plus@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_mod_plus>


; <Start encoding val FStar.Math.Lemmas.add_div_mod_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.add_div_mod_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.add_div_mod_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.add_div_mod_1>


; <Start encoding val FStar.Math.Lemmas.sub_div_mod_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.sub_div_mod_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.sub_div_mod_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.sub_div_mod_1>


; <Start encoding val FStar.Math.Lemmas.cancel_mul_div>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.cancel_mul_div (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.cancel_mul_div@tok () Term)

; </end encoding val FStar.Math.Lemmas.cancel_mul_div>


; <Start encoding val FStar.Math.Lemmas.cancel_mul_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.cancel_mul_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.cancel_mul_mod@tok () Term)

; </end encoding val FStar.Math.Lemmas.cancel_mul_mod>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_add_distr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_add_distr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_add_distr@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_add_distr>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_sub_distr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_distr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_distr@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_sub_distr>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_sub_0>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_0 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_0@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_sub_0>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_sub_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_sub_1>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_mul_distr_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mul_distr_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mul_distr_l@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_mul_distr_l>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_mul_distr_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mul_distr_r (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mul_distr_r@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_mul_distr_r>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_injective (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_injective@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_injective>


; <Start encoding val FStar.Math.Lemmas.lemma_mul_sub_distr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_sub_distr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_sub_distr@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mul_sub_distr>


; <Start encoding val FStar.Math.Lemmas.lemma_div_exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_exact (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_exact@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_exact>


; <Start encoding val FStar.Math.Lemmas.div_exact_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.div_exact_r (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.div_exact_r@tok () Term)

; </end encoding val FStar.Math.Lemmas.div_exact_r>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_spec (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_spec@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_spec>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_spec2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_spec2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_spec2@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_spec2>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_plus_distr_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_distr_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_distr_l@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_plus_distr_l>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_plus_distr_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_distr_r (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_distr_r@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_plus_distr_r>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mod (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mod@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_mod>


; <Start encoding val FStar.Math.Lemmas.euclidean_division_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.euclidean_division_definition (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.euclidean_division_definition@tok () Term)

; </end encoding val FStar.Math.Lemmas.euclidean_division_definition>


; <Start encoding val FStar.Math.Lemmas.modulo_range_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_range_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_range_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_range_lemma>


; <Start encoding val FStar.Math.Lemmas.small_modulo_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_modulo_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_modulo_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_modulo_lemma_1>


; <Start encoding val FStar.Math.Lemmas.small_modulo_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_modulo_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_modulo_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_modulo_lemma_2>


; <Start encoding val FStar.Math.Lemmas.small_division_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_division_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_division_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_division_lemma_1>


; <Start encoding val FStar.Math.Lemmas.small_division_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_division_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_division_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_division_lemma_2>


; <Start encoding val FStar.Math.Lemmas.multiplication_order_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.multiplication_order_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.multiplication_order_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.multiplication_order_lemma>


; <Start encoding val FStar.Math.Lemmas.division_propriety>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_propriety (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_propriety@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_propriety>


; <Start encoding val FStar.Math.Lemmas.division_definition_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_definition_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_definition_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_definition_lemma_1>


; <Start encoding val FStar.Math.Lemmas.division_definition_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_definition_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_definition_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_definition_lemma_2>


; <Start encoding val FStar.Math.Lemmas.division_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_definition (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_definition@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_definition>


; <Start encoding val FStar.Math.Lemmas.multiple_division_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.multiple_division_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.multiple_division_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.multiple_division_lemma>


; <Start encoding val FStar.Math.Lemmas.multiple_modulo_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.multiple_modulo_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.multiple_modulo_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.multiple_modulo_lemma>


; <Start encoding val FStar.Math.Lemmas.division_addition_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_addition_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_addition_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_addition_lemma>


; <Start encoding val FStar.Math.Lemmas.modulo_distributivity>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_distributivity (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_distributivity@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_distributivity>


; <Start encoding val FStar.Math.Lemmas.lemma_div_le>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_le (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_le@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_le>


; <Start encoding val FStar.Math.Lemmas.division_sub_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_sub_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_sub_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_sub_lemma>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_plus_mul_distr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_mul_distr (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_mul_distr@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_plus_mul_distr>


; <Start encoding val FStar.Math.Lemmas.modulo_addition_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_addition_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_addition_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_addition_lemma>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_sub>


; <Start encoding val FStar.Math.Lemmas.mod_mult_exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mod_mult_exact (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mod_mult_exact@tok () Term)

; </end encoding val FStar.Math.Lemmas.mod_mult_exact>


; <Start encoding val FStar.Math.Lemmas.mod_mul_div_exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mod_mul_div_exact (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mod_mul_div_exact@tok () Term)

; </end encoding val FStar.Math.Lemmas.mod_mul_div_exact>


; <Start encoding val FStar.Math.Lemmas.mod_pow2_div2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mod_pow2_div2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mod_pow2_div2@tok () Term)

; </end encoding val FStar.Math.Lemmas.mod_pow2_div2>


; <Start encoding val FStar.Math.Lemmas.division_multiplication_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_multiplication_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_multiplication_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_multiplication_lemma>


; <Start encoding val FStar.Math.Lemmas.modulo_scale_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_scale_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_scale_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_scale_lemma>


; <Start encoding val FStar.Math.Lemmas.lemma_mul_pos_pos_is_pos>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_pos_pos_is_pos (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_pos_pos_is_pos@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mul_pos_pos_is_pos>


; <Start encoding val FStar.Math.Lemmas.lemma_mul_nat_pos_is_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_nat_pos_is_nat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_nat_pos_is_nat@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mul_nat_pos_is_nat>


; <Start encoding val FStar.Math.Lemmas.modulo_division_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_division_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_division_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_division_lemma>


; <Start encoding val FStar.Math.Lemmas.modulo_modulo_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_modulo_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_modulo_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_modulo_lemma>


; <Start encoding val FStar.Math.Lemmas.pow2_multiplication_division_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_division_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_division_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_multiplication_division_lemma_1>


; <Start encoding val FStar.Math.Lemmas.pow2_multiplication_division_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_division_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_division_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_multiplication_division_lemma_2>


; <Start encoding val FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1>


; <Start encoding val FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2>


; <Start encoding val FStar.Math.Lemmas.pow2_modulo_division_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_division_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_division_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_modulo_division_lemma_1>


; <Start encoding val FStar.Math.Lemmas.pow2_modulo_division_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_division_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_division_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_modulo_division_lemma_2>


; <Start encoding val FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1>


; <Start encoding val FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2>


; <Start encoding val FStar.Math.Lemmas.modulo_add>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_add (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_add@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_add>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_twice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_twice (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_twice@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_twice>


; <Start encoding val FStar.Math.Lemmas.modulo_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_sub (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_sub@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_sub>


; <Start encoding val FStar.Math.Lemmas.mod_add_both>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mod_add_both (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mod_add_both@tok () Term)

; </end encoding val FStar.Math.Lemmas.mod_add_both>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_plus_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_injective (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_injective@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_plus_injective>


; <Start encoding val FStar.Math.Lemmas.modulo_sub_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_sub_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_sub_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_sub_lemma>


; End Externals for interface FStar.Math.Lemmas


; Externals for interface FStar.BitVector


; <Start encoding let bv_t>

(declare-fun FStar.BitVector.bv_t (Term) Term)
(declare-fun Tm_arrow_9974df5c311cfcfa7100bc7bef095e1e () Term)
(declare-fun FStar.BitVector.bv_t@tok () Term)
(declare-fun Tm_refine_e2d5d62a90ceed8a6faf9d20615f4e1e (Term) Term)

; </end encoding let bv_t>


; <Start encoding let zero_vec>

(declare-fun FStar.BitVector.zero_vec (Term) Term)
(declare-fun Tm_arrow_b6d52a9c4babaef5c45b062eb8723782 () Term)
(declare-fun FStar.BitVector.zero_vec@tok () Term)

; </end encoding let zero_vec>


; <Start encoding let elem_vec>


(declare-fun FStar.BitVector.elem_vec (Term Term) Term)

(declare-fun Tm_arrow_6880b3a4da9e8c38f1dbaa400eb50d7d () Term)
(declare-fun FStar.BitVector.elem_vec@tok () Term)


; </end encoding let elem_vec>


; <Start encoding let ones_vec>

(declare-fun FStar.BitVector.ones_vec (Term) Term)

(declare-fun FStar.BitVector.ones_vec@tok () Term)

; </end encoding let ones_vec>


; <Start encoding let rec logand_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BitVector.logand_vec.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BitVector.logand_vec.fuel_instrumented_token () Term)
(declare-fun FStar.BitVector.logand_vec (Term Term Term) Term)
(declare-fun FStar.BitVector.logand_vec@tok () Term)
(declare-fun Tm_arrow_d5001f682a0789c7aa8e67d06058b034 () Term)

; </end encoding let rec logand_vec>


; <Start encoding val FStar.BitVector.logand_vec_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.logand_vec_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.logand_vec_definition@tok () Term)


; </end encoding val FStar.BitVector.logand_vec_definition>


; <Start encoding let rec logxor_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BitVector.logxor_vec.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BitVector.logxor_vec.fuel_instrumented_token () Term)
(declare-fun FStar.BitVector.logxor_vec (Term Term Term) Term)
(declare-fun FStar.BitVector.logxor_vec@tok () Term)


; </end encoding let rec logxor_vec>


; <Start encoding val FStar.BitVector.logxor_vec_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.logxor_vec_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.logxor_vec_definition@tok () Term)


; </end encoding val FStar.BitVector.logxor_vec_definition>


; <Start encoding let rec logor_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BitVector.logor_vec.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BitVector.logor_vec.fuel_instrumented_token () Term)
(declare-fun FStar.BitVector.logor_vec (Term Term Term) Term)
(declare-fun FStar.BitVector.logor_vec@tok () Term)


; </end encoding let rec logor_vec>


; <Start encoding val FStar.BitVector.logor_vec_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.logor_vec_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.logor_vec_definition@tok () Term)


; </end encoding val FStar.BitVector.logor_vec_definition>


; <Start encoding let rec lognot_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BitVector.lognot_vec.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BitVector.lognot_vec.fuel_instrumented_token () Term)
(declare-fun FStar.BitVector.lognot_vec (Term Term) Term)
(declare-fun FStar.BitVector.lognot_vec@tok () Term)
(declare-fun Tm_arrow_190e27813ba14c0d36577dc3d47778da () Term)

; </end encoding let rec lognot_vec>


; <Start encoding val FStar.BitVector.lognot_vec_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.lognot_vec_definition (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.lognot_vec_definition@tok () Term)


; </end encoding val FStar.BitVector.lognot_vec_definition>


; <Start encoding val FStar.BitVector.lemma_xor_bounded>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.lemma_xor_bounded (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.lemma_xor_bounded@tok () Term)

; </end encoding val FStar.BitVector.lemma_xor_bounded>


; <Start encoding let is_subset_vec>

(declare-fun FStar.BitVector.is_subset_vec (Term Term Term) Term)
(declare-fun Tm_arrow_b51a0c80adeae3f31b1215853bb34fe1 () Term)
(declare-fun FStar.BitVector.is_subset_vec@tok () Term)

; </end encoding let is_subset_vec>


; <Start encoding let is_superset_vec>

(declare-fun FStar.BitVector.is_superset_vec (Term Term Term) Term)

(declare-fun FStar.BitVector.is_superset_vec@tok () Term)

; </end encoding let is_superset_vec>


; <Start encoding val FStar.BitVector.lemma_slice_subset_vec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.lemma_slice_subset_vec (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.lemma_slice_subset_vec@tok () Term)

; </end encoding val FStar.BitVector.lemma_slice_subset_vec>


; <Start encoding val FStar.BitVector.lemma_slice_superset_vec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.lemma_slice_superset_vec (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.lemma_slice_superset_vec@tok () Term)

; </end encoding val FStar.BitVector.lemma_slice_superset_vec>


; <Start encoding let shift_left_vec>

(declare-fun FStar.BitVector.shift_left_vec (Term Term Term) Term)
(declare-fun Tm_arrow_ccbebd343bd3a7caba5f263c2ba5f3be () Term)
(declare-fun FStar.BitVector.shift_left_vec@tok () Term)

; </end encoding let shift_left_vec>


; <Start encoding val FStar.BitVector.shift_left_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_left_vec_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_left_vec_lemma_1@tok () Term)
(declare-fun Tm_refine_6ccf0869e6825997ab860bb25791c11f (Term Term) Term)

; </end encoding val FStar.BitVector.shift_left_vec_lemma_1>


; <Start encoding val FStar.BitVector.shift_left_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_left_vec_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_left_vec_lemma_2@tok () Term)
(declare-fun Tm_refine_e8e1ad4b2203cd724d5b8b2dba0a5826 (Term Term) Term)

; </end encoding val FStar.BitVector.shift_left_vec_lemma_2>


; <Start encoding let shift_right_vec>

(declare-fun FStar.BitVector.shift_right_vec (Term Term Term) Term)

(declare-fun FStar.BitVector.shift_right_vec@tok () Term)

; </end encoding let shift_right_vec>


; <Start encoding val FStar.BitVector.shift_right_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_right_vec_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_right_vec_lemma_1@tok () Term)
(declare-fun Tm_refine_34425c23b534b8a294f8f063dd9faa4b (Term Term) Term)

; </end encoding val FStar.BitVector.shift_right_vec_lemma_1>


; <Start encoding val FStar.BitVector.shift_right_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_right_vec_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_right_vec_lemma_2@tok () Term)
(declare-fun Tm_refine_c0ec47abc53a2509e744dad22ccf8191 (Term Term) Term)

; </end encoding val FStar.BitVector.shift_right_vec_lemma_2>


; <Start encoding let shift_arithmetic_right_vec>

(declare-fun FStar.BitVector.shift_arithmetic_right_vec (Term Term Term) Term)

(declare-fun FStar.BitVector.shift_arithmetic_right_vec@tok () Term)

; </end encoding let shift_arithmetic_right_vec>


; <Start encoding val FStar.BitVector.shift_arithmetic_right_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_arithmetic_right_vec_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_arithmetic_right_vec_lemma_1@tok () Term)


; </end encoding val FStar.BitVector.shift_arithmetic_right_vec_lemma_1>


; <Start encoding val FStar.BitVector.shift_arithmetic_right_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_arithmetic_right_vec_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_arithmetic_right_vec_lemma_2@tok () Term)


; </end encoding val FStar.BitVector.shift_arithmetic_right_vec_lemma_2>


; End Externals for interface FStar.BitVector


; Externals for interface FStar.UInt


; <Start encoding val FStar.UInt.pow2_values>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.pow2_values (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.pow2_values@tok () Term)

; </end encoding val FStar.UInt.pow2_values>


; <Start encoding let max_int>

(declare-fun FStar.UInt.max_int (Term) Term)
(declare-fun Tm_arrow_fc34ca66de2f262c06145b17fb7ed6cb () Term)
(declare-fun FStar.UInt.max_int@tok () Term)

; </end encoding let max_int>


; <Start encoding let min_int>

(declare-fun FStar.UInt.min_int (Term) Term)

(declare-fun FStar.UInt.min_int@tok () Term)

; </end encoding let min_int>


; <Start encoding let fits>

(declare-fun FStar.UInt.fits (Term Term) Term)
(declare-fun Tm_arrow_dea48782e508c14fa98dcf9716548804 () Term)
(declare-fun FStar.UInt.fits@tok () Term)

; </end encoding let fits>


; <Start encoding let size>

(declare-fun FStar.UInt.size (Term Term) Term)
(declare-fun Tm_arrow_f4ec8f8bfe492e31741a15356024bbaa () Term)
(declare-fun FStar.UInt.size@tok () Term)

; </end encoding let size>


; <Start encoding let uint_t>

(declare-fun FStar.UInt.uint_t (Term) Term)

(declare-fun FStar.UInt.uint_t@tok () Term)
(declare-fun Tm_refine_f13070840248fced9d9d60d77bdae3ec (Term) Term)

; </end encoding let uint_t>


; <Start encoding let zero>

(declare-fun FStar.UInt.zero (Term) Term)
(declare-fun Tm_arrow_f1dd811328ea3b27fc410fa0f52880f7 () Term)
(declare-fun FStar.UInt.zero@tok () Term)

; </end encoding let zero>


; <Start encoding let pow2_n>


(declare-fun FStar.UInt.pow2_n (Term Term) Term)

(declare-fun Tm_arrow_8d41edd1e7b665db26512e6c6d9ece64 () Term)
(declare-fun FStar.UInt.pow2_n@tok () Term)


; </end encoding let pow2_n>


; <Start encoding let one>

(declare-fun FStar.UInt.one (Term) Term)
(declare-fun Tm_arrow_89d370fa478cfd1f85a8759662ce0390 () Term)
(declare-fun FStar.UInt.one@tok () Term)

; </end encoding let one>


; <Start encoding let ones>

(declare-fun FStar.UInt.ones (Term) Term)

(declare-fun FStar.UInt.ones@tok () Term)

; </end encoding let ones>


; <Start encoding let incr>

(declare-fun FStar.UInt.incr (Term Term) Term)
(declare-fun Tm_refine_22e8629663f0cb1c9de86e57e73778e3 (Term) Term)
(declare-fun Tm_arrow_e8e04e4a1022a7343e76760b76915c9e () Term)
(declare-fun FStar.UInt.incr@tok () Term)


; </end encoding let incr>


; <Start encoding let decr>

(declare-fun FStar.UInt.decr (Term Term) Term)

(declare-fun Tm_arrow_2a167fb2d2f3f00bff7b73f048db0e83 () Term)
(declare-fun FStar.UInt.decr@tok () Term)


; </end encoding let decr>


; <Start encoding val FStar.UInt.incr_underspec>

(declare-fun FStar.UInt.incr_underspec (Term Term) Term)
(declare-fun Tm_refine_6a367e92d5b1ca10009a43bd430dd796 (Term Term) Term)
(declare-fun Tm_arrow_fb114bd2e9239af1296268eb30490ff7 () Term)
(declare-fun FStar.UInt.incr_underspec@tok () Term)


; </end encoding val FStar.UInt.incr_underspec>


; <Start encoding val FStar.UInt.decr_underspec>

(declare-fun FStar.UInt.decr_underspec (Term Term) Term)
(declare-fun Tm_refine_fa3c796c533e86dc9f3e3ffc647718f6 (Term Term) Term)
(declare-fun Tm_arrow_f1853f30408c6d0beb7795897a3ab5bc () Term)
(declare-fun FStar.UInt.decr_underspec@tok () Term)


; </end encoding val FStar.UInt.decr_underspec>


; <Start encoding let incr_mod>

(declare-fun FStar.UInt.incr_mod (Term Term) Term)
(declare-fun Tm_arrow_a565732dbe0b43ae2274b1f24341f11b () Term)
(declare-fun FStar.UInt.incr_mod@tok () Term)

; </end encoding let incr_mod>


; <Start encoding let decr_mod>

(declare-fun FStar.UInt.decr_mod (Term Term) Term)

(declare-fun FStar.UInt.decr_mod@tok () Term)

; </end encoding let decr_mod>


; <Start encoding let add>

(declare-fun FStar.UInt.add (Term Term Term) Term)

(declare-fun Tm_arrow_ea9f73d61c207ec4508af75e87c5ca13 () Term)
(declare-fun FStar.UInt.add@tok () Term)


; </end encoding let add>


; <Start encoding val FStar.UInt.add_underspec>

(declare-fun FStar.UInt.add_underspec (Term Term Term) Term)
(declare-fun Tm_refine_c7a9b50c1b5983f8171c03368a208e31 (Term Term Term) Term)
(declare-fun Tm_arrow_880847ba34dd402fb6567384684864a6 () Term)
(declare-fun FStar.UInt.add_underspec@tok () Term)


; </end encoding val FStar.UInt.add_underspec>


; <Start encoding let add_mod>

(declare-fun FStar.UInt.add_mod (Term Term Term) Term)
(declare-fun Tm_arrow_2f3c6a962eb1cbbfd959311c0f20b277 () Term)
(declare-fun FStar.UInt.add_mod@tok () Term)

; </end encoding let add_mod>


; <Start encoding let sub>

(declare-fun FStar.UInt.sub (Term Term Term) Term)

(declare-fun Tm_arrow_974b47e4388c1a4055fe210bb6a11687 () Term)
(declare-fun FStar.UInt.sub@tok () Term)


; </end encoding let sub>


; <Start encoding val FStar.UInt.sub_underspec>

(declare-fun FStar.UInt.sub_underspec (Term Term Term) Term)
(declare-fun Tm_refine_109ae46bb20ad559af297346ec64ae4e (Term Term Term) Term)
(declare-fun Tm_arrow_1479a03f646b965be1bfedb2ee360f95 () Term)
(declare-fun FStar.UInt.sub_underspec@tok () Term)


; </end encoding val FStar.UInt.sub_underspec>


; <Start encoding let sub_mod>

(declare-fun FStar.UInt.sub_mod (Term Term Term) Term)

(declare-fun FStar.UInt.sub_mod@tok () Term)

; </end encoding let sub_mod>


; <Start encoding let mul>

(declare-fun FStar.UInt.mul (Term Term Term) Term)

(declare-fun Tm_arrow_45e02637bbbba15e6760300e4a62b58d () Term)
(declare-fun FStar.UInt.mul@tok () Term)


; </end encoding let mul>


; <Start encoding val FStar.UInt.mul_underspec>

(declare-fun FStar.UInt.mul_underspec (Term Term Term) Term)
(declare-fun Tm_refine_ea207e5cce50229e615af011837e59a5 (Term Term Term) Term)
(declare-fun Tm_arrow_1f5fca1fff06689d84a49261819dc580 () Term)
(declare-fun FStar.UInt.mul_underspec@tok () Term)


; </end encoding val FStar.UInt.mul_underspec>


; <Start encoding let mul_mod>

(declare-fun FStar.UInt.mul_mod (Term Term Term) Term)

(declare-fun FStar.UInt.mul_mod@tok () Term)

; </end encoding let mul_mod>


; <Start encoding val FStar.UInt.lt_square_div_lt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lt_square_div_lt (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lt_square_div_lt@tok () Term)

; </end encoding val FStar.UInt.lt_square_div_lt>


; <Skipped #push-options "--fuel 0 --ifuel 0"/>


; <Start encoding let mul_div>

(declare-fun FStar.UInt.mul_div (Term Term Term) Term)

(declare-fun FStar.UInt.mul_div@tok () Term)

; </end encoding let mul_div>


; <Skipped #pop-options/>


; <Start encoding let div>

(declare-fun Tm_refine_0722e9115d2a1be8d90527397d01011c (Term) Term)
(declare-fun FStar.UInt.div (Term Term Term) Term)

(declare-fun Tm_refine_e49d79feeb1e96b29b0f01b06f8dac23 (Term Term Term) Term)
(declare-fun Tm_arrow_6ebc7a9e6ff34015952a4168421980bf () Term)
(declare-fun FStar.UInt.div@tok () Term)



; </end encoding let div>


; <Start encoding val FStar.UInt.div_underspec>


(declare-fun FStar.UInt.div_underspec (Term Term Term) Term)

(declare-fun Tm_refine_fafbb762e9b0100ba27aa174122ddaa3 (Term Term Term) Term)
(declare-fun Tm_arrow_ed1485a952a27dc4770fb0182ab26e79 () Term)
(declare-fun FStar.UInt.div_underspec@tok () Term)


; </end encoding val FStar.UInt.div_underspec>


; <Start encoding val FStar.UInt.div_size>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.div_size (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.div_size@tok () Term)

; </end encoding val FStar.UInt.div_size>


; <Start encoding let udiv>


(declare-fun FStar.UInt.udiv (Term Term Term) Term)


(declare-fun Tm_arrow_2b6a409bd2eeb88753b2b6fe89b0d0a9 () Term)
(declare-fun FStar.UInt.udiv@tok () Term)



; </end encoding let udiv>


; <Start encoding let mod>


(declare-fun FStar.UInt.mod (Term Term Term) Term)

(declare-fun Tm_arrow_6ae50616ce0b08fd950ce0be5e711193 () Term)
(declare-fun FStar.UInt.mod@tok () Term)


; </end encoding let mod>


; <Start encoding let eq>

(declare-fun FStar.UInt.eq (Term Term Term) Term)
(declare-fun Tm_arrow_ed25d9271888f66e143c5c59e11fb3a9 () Term)
(declare-fun FStar.UInt.eq@tok () Term)

; </end encoding let eq>


; <Start encoding let gt>

(declare-fun FStar.UInt.gt (Term Term Term) Term)

(declare-fun FStar.UInt.gt@tok () Term)

; </end encoding let gt>


; <Start encoding let gte>

(declare-fun FStar.UInt.gte (Term Term Term) Term)

(declare-fun FStar.UInt.gte@tok () Term)

; </end encoding let gte>


; <Start encoding let lt>

(declare-fun FStar.UInt.lt (Term Term Term) Term)

(declare-fun FStar.UInt.lt@tok () Term)

; </end encoding let lt>


; <Start encoding let lte>

(declare-fun FStar.UInt.lte (Term Term Term) Term)

(declare-fun FStar.UInt.lte@tok () Term)

; </end encoding let lte>


; <Start encoding let to_uint_t>

(declare-fun FStar.UInt.to_uint_t (Term Term) Term)
(declare-fun Tm_arrow_d5257ef463a03617bca88873b50f4e96 () Term)
(declare-fun FStar.UInt.to_uint_t@tok () Term)

; </end encoding let to_uint_t>


; <Start encoding let rec to_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.UInt.to_vec.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.UInt.to_vec.fuel_instrumented_token () Term)
(declare-fun FStar.UInt.to_vec (Term Term) Term)
(declare-fun FStar.UInt.to_vec@tok () Term)
(declare-fun Tm_arrow_50c9ac04c4da2f9a3a1512bf3cfd180e () Term)

; </end encoding let rec to_vec>


; <Start encoding let rec from_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.UInt.from_vec.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.UInt.from_vec.fuel_instrumented_token () Term)
(declare-fun FStar.UInt.from_vec (Term Term) Term)
(declare-fun FStar.UInt.from_vec@tok () Term)
(declare-fun Tm_arrow_3a21f80bb386ebae30b30ec5363d47ef () Term)

; </end encoding let rec from_vec>


; <Start encoding val FStar.UInt.to_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.to_vec_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.to_vec_lemma_1@tok () Term)

; </end encoding val FStar.UInt.to_vec_lemma_1>


; <Start encoding val FStar.UInt.to_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.to_vec_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.to_vec_lemma_2@tok () Term)

; </end encoding val FStar.UInt.to_vec_lemma_2>


; <Start encoding val FStar.UInt.inverse_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.inverse_aux (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.inverse_aux@tok () Term)


; </end encoding val FStar.UInt.inverse_aux>


; <Start encoding val FStar.UInt.inverse_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.inverse_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.inverse_vec_lemma@tok () Term)

; </end encoding val FStar.UInt.inverse_vec_lemma>


; <Start encoding val FStar.UInt.inverse_num_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.inverse_num_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.inverse_num_lemma@tok () Term)

; </end encoding val FStar.UInt.inverse_num_lemma>


; <Start encoding val FStar.UInt.from_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.from_vec_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.from_vec_lemma_1@tok () Term)

; </end encoding val FStar.UInt.from_vec_lemma_1>


; <Start encoding val FStar.UInt.from_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.from_vec_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.from_vec_lemma_2@tok () Term)

; </end encoding val FStar.UInt.from_vec_lemma_2>


; <Start encoding val FStar.UInt.from_vec_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.from_vec_aux (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.from_vec_aux@tok () Term)

; </end encoding val FStar.UInt.from_vec_aux>


; <Start encoding val FStar.UInt.seq_slice_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.seq_slice_lemma (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.seq_slice_lemma@tok () Term)

; </end encoding val FStar.UInt.seq_slice_lemma>


; <Start encoding val FStar.UInt.from_vec_propriety>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.from_vec_propriety (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.from_vec_propriety@tok () Term)

; </end encoding val FStar.UInt.from_vec_propriety>


; <Start encoding val FStar.UInt.append_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.append_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.append_lemma@tok () Term)

; </end encoding val FStar.UInt.append_lemma>


; <Start encoding val FStar.UInt.slice_left_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.slice_left_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.slice_left_lemma@tok () Term)

; </end encoding val FStar.UInt.slice_left_lemma>


; <Start encoding val FStar.UInt.slice_right_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.slice_right_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.slice_right_lemma@tok () Term)

; </end encoding val FStar.UInt.slice_right_lemma>


; <Start encoding val FStar.UInt.zero_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.zero_to_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.zero_to_vec_lemma@tok () Term)


; </end encoding val FStar.UInt.zero_to_vec_lemma>


; <Start encoding val FStar.UInt.zero_from_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.zero_from_vec_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.zero_from_vec_lemma@tok () Term)

; </end encoding val FStar.UInt.zero_from_vec_lemma>


; <Start encoding val FStar.UInt.one_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.one_to_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.one_to_vec_lemma@tok () Term)


; </end encoding val FStar.UInt.one_to_vec_lemma>


; <Start encoding val FStar.UInt.pow2_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.pow2_to_vec_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.pow2_to_vec_lemma@tok () Term)



; </end encoding val FStar.UInt.pow2_to_vec_lemma>


; <Start encoding val FStar.UInt.pow2_from_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.pow2_from_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.pow2_from_vec_lemma@tok () Term)


; </end encoding val FStar.UInt.pow2_from_vec_lemma>


; <Start encoding val FStar.UInt.ones_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.ones_to_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.ones_to_vec_lemma@tok () Term)


; </end encoding val FStar.UInt.ones_to_vec_lemma>


; <Start encoding val FStar.UInt.ones_from_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.ones_from_vec_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.ones_from_vec_lemma@tok () Term)

; </end encoding val FStar.UInt.ones_from_vec_lemma>


; <Start encoding let nth>


(declare-fun FStar.UInt.nth (Term Term Term) Term)

(declare-fun Tm_arrow_3fc70c4ae2acbd923fa94b8473fca72c () Term)
(declare-fun FStar.UInt.nth@tok () Term)


; </end encoding let nth>


; <Start encoding val FStar.UInt.nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.nth_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.nth_lemma@tok () Term)

; </end encoding val FStar.UInt.nth_lemma>


; <Start encoding val FStar.UInt.zero_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.zero_nth_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.zero_nth_lemma@tok () Term)


; </end encoding val FStar.UInt.zero_nth_lemma>


; <Start encoding val FStar.UInt.pow2_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.pow2_nth_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.pow2_nth_lemma@tok () Term)



; </end encoding val FStar.UInt.pow2_nth_lemma>


; <Start encoding val FStar.UInt.one_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.one_nth_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.one_nth_lemma@tok () Term)


; </end encoding val FStar.UInt.one_nth_lemma>


; <Start encoding val FStar.UInt.ones_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.ones_nth_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.ones_nth_lemma@tok () Term)


; </end encoding val FStar.UInt.ones_nth_lemma>


; <Start encoding let logand>

(declare-fun FStar.UInt.logand (Term Term Term) Term)
(declare-fun Tm_arrow_f4d897275479f32ec94ab14cea117895 () Term)
(declare-fun FStar.UInt.logand@tok () Term)

; </end encoding let logand>


; <Start encoding let logxor>

(declare-fun FStar.UInt.logxor (Term Term Term) Term)

(declare-fun FStar.UInt.logxor@tok () Term)

; </end encoding let logxor>


; <Start encoding let logor>

(declare-fun FStar.UInt.logor (Term Term Term) Term)

(declare-fun FStar.UInt.logor@tok () Term)

; </end encoding let logor>


; <Start encoding let lognot>

(declare-fun FStar.UInt.lognot (Term Term) Term)
(declare-fun Tm_arrow_7e93208f7d6c7796851172614443345f () Term)
(declare-fun FStar.UInt.lognot@tok () Term)

; </end encoding let lognot>


; <Start encoding val FStar.UInt.logand_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_definition@tok () Term)


; </end encoding val FStar.UInt.logand_definition>


; <Start encoding val FStar.UInt.logxor_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_definition@tok () Term)


; </end encoding val FStar.UInt.logxor_definition>


; <Start encoding val FStar.UInt.logor_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_definition@tok () Term)


; </end encoding val FStar.UInt.logor_definition>


; <Start encoding val FStar.UInt.lognot_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lognot_definition (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lognot_definition@tok () Term)


; </end encoding val FStar.UInt.lognot_definition>


; <Start encoding let minus>

(declare-fun FStar.UInt.minus (Term Term) Term)

(declare-fun FStar.UInt.minus@tok () Term)

; </end encoding let minus>


; <Start encoding val FStar.UInt.logand_commutative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_commutative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_commutative@tok () Term)

; </end encoding val FStar.UInt.logand_commutative>


; <Start encoding val FStar.UInt.logand_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_associative (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_associative@tok () Term)

; </end encoding val FStar.UInt.logand_associative>


; <Start encoding val FStar.UInt.logand_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_self@tok () Term)

; </end encoding val FStar.UInt.logand_self>


; <Start encoding val FStar.UInt.logand_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_lemma_1@tok () Term)

; </end encoding val FStar.UInt.logand_lemma_1>


; <Start encoding val FStar.UInt.logand_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_lemma_2@tok () Term)

; </end encoding val FStar.UInt.logand_lemma_2>


; <Start encoding val FStar.UInt.subset_vec_le_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.subset_vec_le_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.subset_vec_le_lemma@tok () Term)

; </end encoding val FStar.UInt.subset_vec_le_lemma>


; <Start encoding val FStar.UInt.logand_le>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_le (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_le@tok () Term)

; </end encoding val FStar.UInt.logand_le>


; <Start encoding val FStar.UInt.logxor_commutative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_commutative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_commutative@tok () Term)

; </end encoding val FStar.UInt.logxor_commutative>


; <Start encoding val FStar.UInt.logxor_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_associative (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_associative@tok () Term)

; </end encoding val FStar.UInt.logxor_associative>


; <Start encoding val FStar.UInt.logxor_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_self@tok () Term)

; </end encoding val FStar.UInt.logxor_self>


; <Start encoding val FStar.UInt.logxor_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_lemma_1@tok () Term)

; </end encoding val FStar.UInt.logxor_lemma_1>


; <Start encoding val FStar.UInt.logxor_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_lemma_2@tok () Term)

; </end encoding val FStar.UInt.logxor_lemma_2>


; <Start encoding let xor>

(declare-fun FStar.UInt.xor (Term Term) Term)
(declare-fun Tm_arrow_a41b9b98d4288401e09e5c3b51ccc4f5 () Term)
(declare-fun FStar.UInt.xor@tok () Term)

; </end encoding let xor>


; <Start encoding val FStar.UInt.xor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.xor_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.xor_lemma@tok () Term)

; </end encoding val FStar.UInt.xor_lemma>


; <Start encoding val FStar.UInt.logxor_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_inv (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_inv@tok () Term)

; </end encoding val FStar.UInt.logxor_inv>


; <Start encoding val FStar.UInt.logxor_neq_nonzero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_neq_nonzero (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_neq_nonzero@tok () Term)

; </end encoding val FStar.UInt.logxor_neq_nonzero>


; <Start encoding val FStar.UInt.logor_commutative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_commutative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_commutative@tok () Term)

; </end encoding val FStar.UInt.logor_commutative>


; <Start encoding val FStar.UInt.logor_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_associative (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_associative@tok () Term)

; </end encoding val FStar.UInt.logor_associative>


; <Start encoding val FStar.UInt.logor_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_self@tok () Term)

; </end encoding val FStar.UInt.logor_self>


; <Start encoding val FStar.UInt.logor_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_lemma_1@tok () Term)

; </end encoding val FStar.UInt.logor_lemma_1>


; <Start encoding val FStar.UInt.logor_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_lemma_2@tok () Term)

; </end encoding val FStar.UInt.logor_lemma_2>


; <Start encoding val FStar.UInt.superset_vec_ge_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.superset_vec_ge_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.superset_vec_ge_lemma@tok () Term)

; </end encoding val FStar.UInt.superset_vec_ge_lemma>


; <Start encoding val FStar.UInt.logor_ge>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_ge (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_ge@tok () Term)

; </end encoding val FStar.UInt.logor_ge>


; <Start encoding val FStar.UInt.lognot_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lognot_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lognot_self@tok () Term)

; </end encoding val FStar.UInt.lognot_self>


; <Start encoding val FStar.UInt.lognot_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lognot_lemma_1 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lognot_lemma_1@tok () Term)

; </end encoding val FStar.UInt.lognot_lemma_1>


; <Start encoding val FStar.UInt.index_to_vec_ones>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.index_to_vec_ones (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.index_to_vec_ones@tok () Term)
(declare-fun Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d (Term) Term)


; </end encoding val FStar.UInt.index_to_vec_ones>


; <Start encoding val FStar.UInt.logor_disjoint>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_disjoint (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_disjoint@tok () Term)

; </end encoding val FStar.UInt.logor_disjoint>


; <Start encoding val FStar.UInt.logand_mask>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_mask (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_mask@tok () Term)

; </end encoding val FStar.UInt.logand_mask>


; <Start encoding let shift_left>

(declare-fun FStar.UInt.shift_left (Term Term Term) Term)
(declare-fun Tm_arrow_88bed77db23726a0c4c74cf2019c096b () Term)
(declare-fun FStar.UInt.shift_left@tok () Term)

; </end encoding let shift_left>


; <Start encoding let shift_right>

(declare-fun FStar.UInt.shift_right (Term Term Term) Term)

(declare-fun FStar.UInt.shift_right@tok () Term)

; </end encoding let shift_right>


; <Start encoding val FStar.UInt.shift_left_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_lemma_1@tok () Term)


; </end encoding val FStar.UInt.shift_left_lemma_1>


; <Start encoding val FStar.UInt.shift_left_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_lemma_2@tok () Term)


; </end encoding val FStar.UInt.shift_left_lemma_2>


; <Start encoding val FStar.UInt.shift_right_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_lemma_1@tok () Term)


; </end encoding val FStar.UInt.shift_right_lemma_1>


; <Start encoding val FStar.UInt.shift_right_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_lemma_2@tok () Term)


; </end encoding val FStar.UInt.shift_right_lemma_2>


; <Start encoding val FStar.UInt.shift_left_logand_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_logand_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_logand_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_left_logand_lemma>


; <Start encoding val FStar.UInt.shift_right_logand_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_logand_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_logand_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_right_logand_lemma>


; <Start encoding val FStar.UInt.shift_left_logxor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_logxor_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_logxor_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_left_logxor_lemma>


; <Start encoding val FStar.UInt.shift_right_logxor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_logxor_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_logxor_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_right_logxor_lemma>


; <Start encoding val FStar.UInt.shift_left_logor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_logor_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_logor_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_left_logor_lemma>


; <Start encoding val FStar.UInt.shift_right_logor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_logor_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_logor_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_right_logor_lemma>


; <Start encoding val FStar.UInt.shift_left_value_aux_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_value_aux_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_value_aux_1@tok () Term)

; </end encoding val FStar.UInt.shift_left_value_aux_1>


; <Start encoding val FStar.UInt.shift_left_value_aux_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_value_aux_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_value_aux_2@tok () Term)

; </end encoding val FStar.UInt.shift_left_value_aux_2>


; <Start encoding val FStar.UInt.shift_left_value_aux_3>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_value_aux_3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_value_aux_3@tok () Term)

; </end encoding val FStar.UInt.shift_left_value_aux_3>


; <Start encoding val FStar.UInt.shift_left_value_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_value_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_value_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_left_value_lemma>


; <Start encoding val FStar.UInt.shift_right_value_aux_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_value_aux_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_value_aux_1@tok () Term)

; </end encoding val FStar.UInt.shift_right_value_aux_1>


; <Start encoding val FStar.UInt.shift_right_value_aux_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_value_aux_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_value_aux_2@tok () Term)

; </end encoding val FStar.UInt.shift_right_value_aux_2>


; <Start encoding val FStar.UInt.shift_right_value_aux_3>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_value_aux_3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_value_aux_3@tok () Term)

; </end encoding val FStar.UInt.shift_right_value_aux_3>


; <Start encoding val FStar.UInt.shift_right_value_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_value_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_value_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_right_value_lemma>


; <Start encoding let msb>

(declare-fun FStar.UInt.msb (Term Term) Term)
(declare-fun Tm_arrow_d4ac65fa6e48f26152e66f6f5f032db4 () Term)
(declare-fun FStar.UInt.msb@tok () Term)

; </end encoding let msb>


; <Start encoding val FStar.UInt.lemma_msb_pow2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_msb_pow2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_msb_pow2@tok () Term)

; </end encoding val FStar.UInt.lemma_msb_pow2>


; <Start encoding val FStar.UInt.lemma_minus_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_minus_zero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_minus_zero@tok () Term)

; </end encoding val FStar.UInt.lemma_minus_zero>


; <Start encoding val FStar.UInt.lemma_msb_gte>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_msb_gte (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_msb_gte@tok () Term)

; </end encoding val FStar.UInt.lemma_msb_gte>


; <Start encoding val FStar.UInt.lemma_uint_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_uint_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_uint_mod@tok () Term)

; </end encoding val FStar.UInt.lemma_uint_mod>


; <Start encoding val FStar.UInt.lemma_add_sub_cancel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_add_sub_cancel (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_add_sub_cancel@tok () Term)

; </end encoding val FStar.UInt.lemma_add_sub_cancel>


; <Start encoding val FStar.UInt.lemma_mod_sub_distr_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_mod_sub_distr_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_mod_sub_distr_l@tok () Term)

; </end encoding val FStar.UInt.lemma_mod_sub_distr_l>


; <Start encoding val FStar.UInt.lemma_sub_add_cancel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_sub_add_cancel (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_sub_add_cancel@tok () Term)

; </end encoding val FStar.UInt.lemma_sub_add_cancel>


; <Start encoding let zero_extend_vec>

(declare-fun FStar.UInt.zero_extend_vec (Term Term) Term)
(declare-fun Tm_arrow_dcb1e97275faab10b7eb1bdfcfbde371 () Term)
(declare-fun FStar.UInt.zero_extend_vec@tok () Term)

; </end encoding let zero_extend_vec>


; <Start encoding let one_extend_vec>

(declare-fun FStar.UInt.one_extend_vec (Term Term) Term)

(declare-fun FStar.UInt.one_extend_vec@tok () Term)

; </end encoding let one_extend_vec>


; <Start encoding let zero_extend>

(declare-fun FStar.UInt.zero_extend (Term Term) Term)
(declare-fun Tm_arrow_8a55f1e2e0fc60c6f44b88ae88621b5f () Term)
(declare-fun FStar.UInt.zero_extend@tok () Term)

; </end encoding let zero_extend>


; <Start encoding let one_extend>

(declare-fun FStar.UInt.one_extend (Term Term) Term)

(declare-fun FStar.UInt.one_extend@tok () Term)

; </end encoding let one_extend>


; <Start encoding val FStar.UInt.lemma_zero_extend>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_zero_extend (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_zero_extend@tok () Term)
(declare-fun Tm_refine_a2362280d81dbd526f1fa3f771e8faad (Term) Term)

; </end encoding val FStar.UInt.lemma_zero_extend>


; <Start encoding val FStar.UInt.lemma_one_extend>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_one_extend (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_one_extend@tok () Term)

; </end encoding val FStar.UInt.lemma_one_extend>


; <Start encoding val FStar.UInt.lemma_lognot_zero_ext>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_zero_ext (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_zero_ext@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_zero_ext>


; <Start encoding val FStar.UInt.lemma_lognot_one_ext>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_one_ext (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_one_ext@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_one_ext>


; <Start encoding val FStar.UInt.lemma_lognot_value_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_value_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_value_mod@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_value_mod>


; <Start encoding val FStar.UInt.lemma_lognot_value_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_value_zero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_value_zero@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_value_zero>


; <Start encoding val FStar.UInt.lemma_one_mod_pow2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_one_mod_pow2 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_one_mod_pow2@tok () Term)

; </end encoding val FStar.UInt.lemma_one_mod_pow2>


; <Start encoding val FStar.UInt.lemma_lognot_value_nonzero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_value_nonzero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_value_nonzero@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_value_nonzero>


; <Start encoding val FStar.UInt.lemma_lognot_value>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_value (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_value@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_value>


; <Start encoding val FStar.UInt.lemma_minus_eq_zero_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_minus_eq_zero_sub (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_minus_eq_zero_sub@tok () Term)

; </end encoding val FStar.UInt.lemma_minus_eq_zero_sub>


; End Externals for interface FStar.UInt


; Externals for interface FStar.UInt32


; <Start encoding let n>

(declare-fun FStar.UInt32.n (Dummy_sort) Term)

; </end encoding let n>


; <Skipped #set-options "--max_fuel 0 --max_ifuel 0"/>


; <Start encoding val FStar.UInt32.t>

(declare-fun FStar.UInt32.t (Dummy_sort) Term)

; </end encoding val FStar.UInt32.t>


; <Start encoding val FStar.UInt32.v>

(declare-fun FStar.UInt32.v (Term) Term)
(declare-fun Tm_arrow_33a06d9a3ec1c77524ab958d37ae1453 () Term)
(declare-fun FStar.UInt32.v@tok () Term)

; </end encoding val FStar.UInt32.v>


; <Start encoding val FStar.UInt32.uint_to_t>

(declare-fun FStar.UInt32.uint_to_t (Term) Term)
(declare-fun Tm_refine_0ea1fba779ad5718e28476faeef94d56 (Term) Term)
(declare-fun Tm_arrow_3d414099f2a2b7ef3e11b1fc75a28674 () Term)
(declare-fun FStar.UInt32.uint_to_t@tok () Term)


; </end encoding val FStar.UInt32.uint_to_t>


; <Start encoding val FStar.UInt32.uv_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt32.uv_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt32.uv_inv@tok () Term)

; </end encoding val FStar.UInt32.uv_inv>


; <Start encoding val FStar.UInt32.vu_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt32.vu_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt32.vu_inv@tok () Term)

; </end encoding val FStar.UInt32.vu_inv>


; <Start encoding val FStar.UInt32.v_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt32.v_inj (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt32.v_inj@tok () Term)

; </end encoding val FStar.UInt32.v_inj>


; <Start encoding val FStar.UInt32.zero>

(declare-fun FStar.UInt32.zero (Dummy_sort) Term)
(declare-fun Tm_refine_7cfa0141116db910fdee890408ebbaf1 () Term)


; </end encoding val FStar.UInt32.zero>


; <Start encoding val FStar.UInt32.one>

(declare-fun FStar.UInt32.one (Dummy_sort) Term)
(declare-fun Tm_refine_d94e5152d1c8429ac781cc5558c9a3e2 () Term)


; </end encoding val FStar.UInt32.one>


; <Start encoding val FStar.UInt32.add>

(declare-fun FStar.UInt32.add (Term Term) Term)
(declare-fun Tm_refine_709aff84c75b0fff77dcbf3b529649dd (Term Term) Term)
(declare-fun Tm_arrow_5558b72197031b1efc1a0f8298859a47 () Term)
(declare-fun FStar.UInt32.add@tok () Term)


; </end encoding val FStar.UInt32.add>


; <Start encoding val FStar.UInt32.add_underspec>

(declare-fun FStar.UInt32.add_underspec (Term Term) Term)
(declare-fun Tm_refine_57eacb083aaa8f3c6200eef2872d40a9 (Term Term) Term)
(declare-fun Tm_arrow_2aa4a786718187783c350fff98c0276d () Term)
(declare-fun FStar.UInt32.add_underspec@tok () Term)


; </end encoding val FStar.UInt32.add_underspec>


; <Start encoding val FStar.UInt32.add_mod>

(declare-fun FStar.UInt32.add_mod (Term Term) Term)
(declare-fun Tm_refine_edc8fb7e909853d860d4ab445ef31337 (Term Term) Term)
(declare-fun Tm_arrow_edbd649f4b12a343efa6ef46e7961890 () Term)
(declare-fun FStar.UInt32.add_mod@tok () Term)


; </end encoding val FStar.UInt32.add_mod>


; <Start encoding val FStar.UInt32.sub>

(declare-fun FStar.UInt32.sub (Term Term) Term)
(declare-fun Tm_refine_aa4b3d268075d84252df525db1f85524 (Term Term) Term)
(declare-fun Tm_arrow_ac932fe6124478fcfd5be99d334122e8 () Term)
(declare-fun FStar.UInt32.sub@tok () Term)


; </end encoding val FStar.UInt32.sub>


; <Start encoding val FStar.UInt32.sub_underspec>

(declare-fun FStar.UInt32.sub_underspec (Term Term) Term)
(declare-fun Tm_refine_01926286fa04b785df0ea0da544f2001 (Term Term) Term)
(declare-fun Tm_arrow_a0c271942b2fe7be43f6ae297698cd0b () Term)
(declare-fun FStar.UInt32.sub_underspec@tok () Term)


; </end encoding val FStar.UInt32.sub_underspec>


; <Start encoding val FStar.UInt32.sub_mod>

(declare-fun FStar.UInt32.sub_mod (Term Term) Term)
(declare-fun Tm_refine_ace23c600fbe87b65e5fc333816f74de (Term Term) Term)
(declare-fun Tm_arrow_4a8c4b67b5977a746f1eeda7c310346f () Term)
(declare-fun FStar.UInt32.sub_mod@tok () Term)


; </end encoding val FStar.UInt32.sub_mod>


; <Start encoding val FStar.UInt32.mul>

(declare-fun FStar.UInt32.mul (Term Term) Term)
(declare-fun Tm_refine_1ccfb21903aa30ace8832f7a4d067d9b (Term Term) Term)
(declare-fun Tm_arrow_f261941925861d12451675f7409141e5 () Term)
(declare-fun FStar.UInt32.mul@tok () Term)


; </end encoding val FStar.UInt32.mul>


; <Start encoding val FStar.UInt32.mul_underspec>

(declare-fun FStar.UInt32.mul_underspec (Term Term) Term)
(declare-fun Tm_refine_cb4ffd3222952e9ac95fc72e8f9913c6 (Term Term) Term)
(declare-fun Tm_arrow_54623a1c9ed03c94751f7d25d259da67 () Term)
(declare-fun FStar.UInt32.mul_underspec@tok () Term)


; </end encoding val FStar.UInt32.mul_underspec>


; <Start encoding val FStar.UInt32.mul_mod>

(declare-fun FStar.UInt32.mul_mod (Term Term) Term)
(declare-fun Tm_refine_8618df86656cf4c2bc98614452120307 (Term Term) Term)
(declare-fun Tm_arrow_b9ba4f3f3f0a1ea3202a99cc97238a0d () Term)
(declare-fun FStar.UInt32.mul_mod@tok () Term)


; </end encoding val FStar.UInt32.mul_mod>


; <Start encoding val FStar.UInt32.div>

(declare-fun Tm_refine_0941c9ff95557f2d53bc8f8179ab793e () Term)
(declare-fun FStar.UInt32.div (Term Term) Term)

(declare-fun Tm_refine_74d1ae07763cf2ce5f26906c9df0d2cc (Term Term) Term)
(declare-fun Tm_arrow_61dc5944349c0fd1e6ccd916a51fdfe8 () Term)
(declare-fun FStar.UInt32.div@tok () Term)


; </end encoding val FStar.UInt32.div>


; <Start encoding val FStar.UInt32.rem>


(declare-fun FStar.UInt32.rem (Term Term) Term)

(declare-fun Tm_refine_19ac6a052799e5086e9c3eb3a21d54a5 (Term Term) Term)
(declare-fun Tm_arrow_a00bbce6d7d4a1d495177d4f11116643 () Term)
(declare-fun FStar.UInt32.rem@tok () Term)


; </end encoding val FStar.UInt32.rem>


; <Start encoding val FStar.UInt32.logand>

(declare-fun FStar.UInt32.logand (Term Term) Term)
(declare-fun Tm_refine_7afd5b0ca8e77c7f6870883658e19d63 (Term Term) Term)
(declare-fun Tm_arrow_eff0426e7af51f8d330de4f569da9534 () Term)
(declare-fun FStar.UInt32.logand@tok () Term)


; </end encoding val FStar.UInt32.logand>


; <Start encoding val FStar.UInt32.logxor>

(declare-fun FStar.UInt32.logxor (Term Term) Term)
(declare-fun Tm_refine_2b25e5c3b25bc06167200cbfa5d36b3e (Term Term) Term)
(declare-fun Tm_arrow_07d2eb0ad8dc47fa48b862c24603f207 () Term)
(declare-fun FStar.UInt32.logxor@tok () Term)


; </end encoding val FStar.UInt32.logxor>


; <Start encoding val FStar.UInt32.logor>

(declare-fun FStar.UInt32.logor (Term Term) Term)
(declare-fun Tm_refine_39cb18a1d289e559096741772432b24f (Term Term) Term)
(declare-fun Tm_arrow_f4c0c09b0ba22212b54bc6a7fb947fac () Term)
(declare-fun FStar.UInt32.logor@tok () Term)


; </end encoding val FStar.UInt32.logor>


; <Start encoding val FStar.UInt32.lognot>

(declare-fun FStar.UInt32.lognot (Term) Term)
(declare-fun Tm_refine_d5743ca0a8d5f3ceec748bdcb132b14f (Term) Term)
(declare-fun Tm_arrow_b6548dae703a0f26a4185c51dee5464b () Term)
(declare-fun FStar.UInt32.lognot@tok () Term)


; </end encoding val FStar.UInt32.lognot>


; <Start encoding val FStar.UInt32.shift_right>

(declare-fun FStar.UInt32.shift_right (Term Term) Term)
(declare-fun Tm_refine_59202c8b625f4b04caf2081d6778d9e7 (Term Term) Term)
(declare-fun Tm_arrow_13c7acc70a3dd34a798f691f2cee4104 () Term)
(declare-fun FStar.UInt32.shift_right@tok () Term)


; </end encoding val FStar.UInt32.shift_right>


; <Start encoding val FStar.UInt32.shift_left>

(declare-fun FStar.UInt32.shift_left (Term Term) Term)
(declare-fun Tm_refine_c642c4de19ebed0b1a9b5f85d40989c0 (Term Term) Term)
(declare-fun Tm_arrow_0709d575329517627fac117b134f4462 () Term)
(declare-fun FStar.UInt32.shift_left@tok () Term)


; </end encoding val FStar.UInt32.shift_left>


; <Start encoding let eq>

(declare-fun FStar.UInt32.eq (Term Term) Term)
(declare-fun Tm_arrow_6de09abf9de7977da03ee416904d3039 () Term)
(declare-fun FStar.UInt32.eq@tok () Term)

; </end encoding let eq>


; <Start encoding let gt>

(declare-fun FStar.UInt32.gt (Term Term) Term)

(declare-fun FStar.UInt32.gt@tok () Term)

; </end encoding let gt>


; <Start encoding let gte>

(declare-fun FStar.UInt32.gte (Term Term) Term)

(declare-fun FStar.UInt32.gte@tok () Term)

; </end encoding let gte>


; <Start encoding let lt>

(declare-fun FStar.UInt32.lt (Term Term) Term)

(declare-fun FStar.UInt32.lt@tok () Term)

; </end encoding let lt>


; <Start encoding let lte>

(declare-fun FStar.UInt32.lte (Term Term) Term)

(declare-fun FStar.UInt32.lte@tok () Term)

; </end encoding let lte>


; <Start encoding let minus>

(declare-fun FStar.UInt32.minus (Term) Term)
(declare-fun Tm_arrow_c4b70260248a2080020c883b42aa875d () Term)
(declare-fun FStar.UInt32.minus@tok () Term)

; </end encoding let minus>


; <Start encoding let n_minus_one>

(declare-fun FStar.UInt32.n_minus_one (Dummy_sort) Term)

; </end encoding let n_minus_one>


; <Skipped #set-options "--z3rlimit 80 --initial_fuel 1 --max_fuel 1"/>


; <Start encoding let eq_mask>

(declare-fun FStar.UInt32.eq_mask (Term Term) Term)
(declare-fun Tm_refine_09d9a189c8c7a3bf3fc28db14e6689cd (Term Term) Term)
(declare-fun Tm_arrow_472ed8b8700983a2f5b417531368b430 () Term)
(declare-fun FStar.UInt32.eq_mask@tok () Term)


; </end encoding let eq_mask>


; <Start encoding val FStar.UInt32.lemma_sub_msbs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt32.lemma_sub_msbs (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt32.lemma_sub_msbs@tok () Term)

; </end encoding val FStar.UInt32.lemma_sub_msbs>


; <Start encoding let gte_mask>

(declare-fun FStar.UInt32.gte_mask (Term Term) Term)
(declare-fun Tm_refine_83df857506788e94d25c8be97271668a (Term Term) Term)
(declare-fun Tm_arrow_a9de8133430dc71a337d9373e485c8b4 () Term)
(declare-fun FStar.UInt32.gte_mask@tok () Term)


; </end encoding let gte_mask>


; <Skipped #reset-options/>


; <Start encoding let op_Plus_Hat>

(declare-fun FStar.UInt32.op_Plus_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Plus_Hat@tok () Term)


; </end encoding let op_Plus_Hat>


; <Start encoding let op_Plus_Question_Hat>

(declare-fun FStar.UInt32.op_Plus_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Plus_Question_Hat@tok () Term)


; </end encoding let op_Plus_Question_Hat>


; <Start encoding let op_Plus_Percent_Hat>

(declare-fun FStar.UInt32.op_Plus_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Plus_Percent_Hat@tok () Term)


; </end encoding let op_Plus_Percent_Hat>


; <Start encoding let op_Subtraction_Hat>

(declare-fun FStar.UInt32.op_Subtraction_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Subtraction_Hat@tok () Term)


; </end encoding let op_Subtraction_Hat>


; <Start encoding let op_Subtraction_Question_Hat>

(declare-fun FStar.UInt32.op_Subtraction_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Subtraction_Question_Hat@tok () Term)


; </end encoding let op_Subtraction_Question_Hat>


; <Start encoding let op_Subtraction_Percent_Hat>

(declare-fun FStar.UInt32.op_Subtraction_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Subtraction_Percent_Hat@tok () Term)


; </end encoding let op_Subtraction_Percent_Hat>


; <Start encoding let op_Star_Hat>

(declare-fun FStar.UInt32.op_Star_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Star_Hat@tok () Term)


; </end encoding let op_Star_Hat>


; <Start encoding let op_Star_Question_Hat>

(declare-fun FStar.UInt32.op_Star_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Star_Question_Hat@tok () Term)


; </end encoding let op_Star_Question_Hat>


; <Start encoding let op_Star_Percent_Hat>

(declare-fun FStar.UInt32.op_Star_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Star_Percent_Hat@tok () Term)


; </end encoding let op_Star_Percent_Hat>


; <Start encoding let op_Slash_Hat>


(declare-fun FStar.UInt32.op_Slash_Hat (Term Term) Term)



(declare-fun FStar.UInt32.op_Slash_Hat@tok () Term)



; </end encoding let op_Slash_Hat>


; <Start encoding let op_Percent_Hat>


(declare-fun FStar.UInt32.op_Percent_Hat (Term Term) Term)



(declare-fun FStar.UInt32.op_Percent_Hat@tok () Term)



; </end encoding let op_Percent_Hat>


; <Start encoding let op_Hat_Hat>

(declare-fun FStar.UInt32.op_Hat_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Hat_Hat@tok () Term)


; </end encoding let op_Hat_Hat>


; <Start encoding let op_Amp_Hat>

(declare-fun FStar.UInt32.op_Amp_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Amp_Hat@tok () Term)


; </end encoding let op_Amp_Hat>


; <Start encoding let op_Bar_Hat>

(declare-fun FStar.UInt32.op_Bar_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Bar_Hat@tok () Term)


; </end encoding let op_Bar_Hat>


; <Start encoding let op_Less_Less_Hat>

(declare-fun FStar.UInt32.op_Less_Less_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Less_Less_Hat@tok () Term)


; </end encoding let op_Less_Less_Hat>


; <Start encoding let op_Greater_Greater_Hat>

(declare-fun FStar.UInt32.op_Greater_Greater_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Greater_Greater_Hat@tok () Term)


; </end encoding let op_Greater_Greater_Hat>


; <Start encoding let op_Equals_Hat>

(declare-fun FStar.UInt32.op_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Equals_Hat@tok () Term)

; </end encoding let op_Equals_Hat>


; <Start encoding let op_Greater_Hat>

(declare-fun FStar.UInt32.op_Greater_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Greater_Hat@tok () Term)

; </end encoding let op_Greater_Hat>


; <Start encoding let op_Greater_Equals_Hat>

(declare-fun FStar.UInt32.op_Greater_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Greater_Equals_Hat@tok () Term)

; </end encoding let op_Greater_Equals_Hat>


; <Start encoding let op_Less_Hat>

(declare-fun FStar.UInt32.op_Less_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Less_Hat@tok () Term)

; </end encoding let op_Less_Hat>


; <Start encoding let op_Less_Equals_Hat>

(declare-fun FStar.UInt32.op_Less_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Less_Equals_Hat@tok () Term)

; </end encoding let op_Less_Equals_Hat>


; <Start encoding val FStar.UInt32.to_string>

(declare-fun FStar.UInt32.to_string (Term) Term)
(declare-fun Tm_arrow_bde0326394a5877aafa8a9dfb4adb318 () Term)
(declare-fun FStar.UInt32.to_string@tok () Term)

; </end encoding val FStar.UInt32.to_string>


; <Start encoding val FStar.UInt32.to_string_hex>

(declare-fun FStar.UInt32.to_string_hex (Term) Term)

(declare-fun FStar.UInt32.to_string_hex@tok () Term)

; </end encoding val FStar.UInt32.to_string_hex>


; <Start encoding val FStar.UInt32.to_string_hex_pad>

(declare-fun FStar.UInt32.to_string_hex_pad (Term) Term)

(declare-fun FStar.UInt32.to_string_hex_pad@tok () Term)

; </end encoding val FStar.UInt32.to_string_hex_pad>


; <Start encoding val FStar.UInt32.of_string>

(declare-fun FStar.UInt32.of_string (Term) Term)
(declare-fun Tm_arrow_564534749090ea8f842e229c3182e762 () Term)
(declare-fun FStar.UInt32.of_string@tok () Term)

; </end encoding val FStar.UInt32.of_string>


; <Skipped #set-options "--admit_smt_queries true"/>


; <Start encoding let __uint_to_t>

(declare-fun FStar.UInt32.__uint_to_t (Term) Term)
(declare-fun Tm_arrow_67ad727682511dd92ce30d8d55620a8e () Term)
(declare-fun FStar.UInt32.__uint_to_t@tok () Term)

; </end encoding let __uint_to_t>


; <Skipped #reset-options/>


; End Externals for interface FStar.UInt32


; Externals for interface FStar.UInt8


; <Start encoding let n>

(declare-fun FStar.UInt8.n (Dummy_sort) Term)

; </end encoding let n>


; <Skipped #set-options "--max_fuel 0 --max_ifuel 0"/>


; <Start encoding val FStar.UInt8.t>

(declare-fun FStar.UInt8.t (Dummy_sort) Term)

; </end encoding val FStar.UInt8.t>


; <Start encoding val FStar.UInt8.v>

(declare-fun FStar.UInt8.v (Term) Term)
(declare-fun Tm_arrow_3777b5a630a36e62279f05e8abae7a72 () Term)
(declare-fun FStar.UInt8.v@tok () Term)

; </end encoding val FStar.UInt8.v>


; <Start encoding val FStar.UInt8.uint_to_t>

(declare-fun FStar.UInt8.uint_to_t (Term) Term)
(declare-fun Tm_refine_25c72d704900d626b30894312c325451 (Term) Term)
(declare-fun Tm_arrow_99681d89836a4c650badaf3b898e0fd2 () Term)
(declare-fun FStar.UInt8.uint_to_t@tok () Term)


; </end encoding val FStar.UInt8.uint_to_t>


; <Start encoding val FStar.UInt8.uv_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt8.uv_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt8.uv_inv@tok () Term)

; </end encoding val FStar.UInt8.uv_inv>


; <Start encoding val FStar.UInt8.vu_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt8.vu_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt8.vu_inv@tok () Term)

; </end encoding val FStar.UInt8.vu_inv>


; <Start encoding val FStar.UInt8.v_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt8.v_inj (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt8.v_inj@tok () Term)

; </end encoding val FStar.UInt8.v_inj>


; <Start encoding val FStar.UInt8.zero>

(declare-fun FStar.UInt8.zero (Dummy_sort) Term)
(declare-fun Tm_refine_70356e30ad97b892992d5e77127e234b () Term)


; </end encoding val FStar.UInt8.zero>


; <Start encoding val FStar.UInt8.one>

(declare-fun FStar.UInt8.one (Dummy_sort) Term)
(declare-fun Tm_refine_9a778967dadeb1d9cdc158a156c04472 () Term)


; </end encoding val FStar.UInt8.one>


; <Start encoding val FStar.UInt8.add>

(declare-fun FStar.UInt8.add (Term Term) Term)
(declare-fun Tm_refine_e7a8c22ddf5fa06051ce01d4308e93c9 (Term Term) Term)
(declare-fun Tm_arrow_93f019685d372e95eac5ee2026269943 () Term)
(declare-fun FStar.UInt8.add@tok () Term)


; </end encoding val FStar.UInt8.add>


; <Start encoding val FStar.UInt8.add_underspec>

(declare-fun FStar.UInt8.add_underspec (Term Term) Term)
(declare-fun Tm_refine_e2fc73b749d5084f2161a1b2256e684a (Term Term) Term)
(declare-fun Tm_arrow_c4436082bc35b52549c292a4092c74f2 () Term)
(declare-fun FStar.UInt8.add_underspec@tok () Term)


; </end encoding val FStar.UInt8.add_underspec>


; <Start encoding val FStar.UInt8.add_mod>

(declare-fun FStar.UInt8.add_mod (Term Term) Term)
(declare-fun Tm_refine_c5c06f774ce917320ace84c78a678f3a (Term Term) Term)
(declare-fun Tm_arrow_52ecb5e08ede937a376b797f76452f11 () Term)
(declare-fun FStar.UInt8.add_mod@tok () Term)


; </end encoding val FStar.UInt8.add_mod>


; <Start encoding val FStar.UInt8.sub>

(declare-fun FStar.UInt8.sub (Term Term) Term)
(declare-fun Tm_refine_b9fa04b492b01fd435452ff429d13919 (Term Term) Term)
(declare-fun Tm_arrow_ec1e3750fe88626fd39551f91ea86fc8 () Term)
(declare-fun FStar.UInt8.sub@tok () Term)


; </end encoding val FStar.UInt8.sub>


; <Start encoding val FStar.UInt8.sub_underspec>

(declare-fun FStar.UInt8.sub_underspec (Term Term) Term)
(declare-fun Tm_refine_2f0c7364767f32abaf6bd4293573996b (Term Term) Term)
(declare-fun Tm_arrow_9b74ded99c9ac1ce430c56353e375533 () Term)
(declare-fun FStar.UInt8.sub_underspec@tok () Term)


; </end encoding val FStar.UInt8.sub_underspec>


; <Start encoding val FStar.UInt8.sub_mod>

(declare-fun FStar.UInt8.sub_mod (Term Term) Term)
(declare-fun Tm_refine_31110a8e88288515f5ff8c631a6fc5fd (Term Term) Term)
(declare-fun Tm_arrow_f944420b8232be8a08ac1eac1a8cfc60 () Term)
(declare-fun FStar.UInt8.sub_mod@tok () Term)


; </end encoding val FStar.UInt8.sub_mod>


; <Start encoding val FStar.UInt8.mul>

(declare-fun FStar.UInt8.mul (Term Term) Term)
(declare-fun Tm_refine_d72a979d91a11894cbd64b344a4b0237 (Term Term) Term)
(declare-fun Tm_arrow_f916cf085880111e18cd4d6a364c6342 () Term)
(declare-fun FStar.UInt8.mul@tok () Term)


; </end encoding val FStar.UInt8.mul>


; <Start encoding val FStar.UInt8.mul_underspec>

(declare-fun FStar.UInt8.mul_underspec (Term Term) Term)
(declare-fun Tm_refine_12692332647397b458ce816ee08aa096 (Term Term) Term)
(declare-fun Tm_arrow_44a424ccb654a64902b3f4c4584dfee1 () Term)
(declare-fun FStar.UInt8.mul_underspec@tok () Term)


; </end encoding val FStar.UInt8.mul_underspec>


; <Start encoding val FStar.UInt8.mul_mod>

(declare-fun FStar.UInt8.mul_mod (Term Term) Term)
(declare-fun Tm_refine_4ce5cfa0cf1c69159e9310e6885c3e22 (Term Term) Term)
(declare-fun Tm_arrow_082e5a7318c49f7336161f30b53f326f () Term)
(declare-fun FStar.UInt8.mul_mod@tok () Term)


; </end encoding val FStar.UInt8.mul_mod>


; <Start encoding val FStar.UInt8.div>

(declare-fun Tm_refine_a8cb57fcf32c2764d2e39fc97ecb3aa0 () Term)
(declare-fun FStar.UInt8.div (Term Term) Term)

(declare-fun Tm_refine_488bac52b9d15f98f9de642f30db345a (Term Term) Term)
(declare-fun Tm_arrow_032d4f95524b20f7a0ffe6be0a29e0dd () Term)
(declare-fun FStar.UInt8.div@tok () Term)


; </end encoding val FStar.UInt8.div>


; <Start encoding val FStar.UInt8.rem>


(declare-fun FStar.UInt8.rem (Term Term) Term)

(declare-fun Tm_refine_41d38db91700fb5bf8d345e71a7ea813 (Term Term) Term)
(declare-fun Tm_arrow_cce9ccb13b0c72c92896f9584ae44f9a () Term)
(declare-fun FStar.UInt8.rem@tok () Term)


; </end encoding val FStar.UInt8.rem>


; <Start encoding val FStar.UInt8.logand>

(declare-fun FStar.UInt8.logand (Term Term) Term)
(declare-fun Tm_refine_71d1a346f76194fb038bba96302ce90d (Term Term) Term)
(declare-fun Tm_arrow_606a7fadbc7c16f0b0151a905dbf43f5 () Term)
(declare-fun FStar.UInt8.logand@tok () Term)


; </end encoding val FStar.UInt8.logand>


; <Start encoding val FStar.UInt8.logxor>

(declare-fun FStar.UInt8.logxor (Term Term) Term)
(declare-fun Tm_refine_97e4a63388ae45ee4261a689ecdcc635 (Term Term) Term)
(declare-fun Tm_arrow_64e5ecb00734a6581a045079ffb5fe59 () Term)
(declare-fun FStar.UInt8.logxor@tok () Term)


; </end encoding val FStar.UInt8.logxor>


; <Start encoding val FStar.UInt8.logor>

(declare-fun FStar.UInt8.logor (Term Term) Term)
(declare-fun Tm_refine_a7fcc8489f92354d1f8a101b7f900b3b (Term Term) Term)
(declare-fun Tm_arrow_32400c8ec986ceb55a1554f2089e0efa () Term)
(declare-fun FStar.UInt8.logor@tok () Term)


; </end encoding val FStar.UInt8.logor>


; <Start encoding val FStar.UInt8.lognot>

(declare-fun FStar.UInt8.lognot (Term) Term)
(declare-fun Tm_refine_455031e9fe191e56270c683d0e98b61b (Term) Term)
(declare-fun Tm_arrow_1a84223456a82ceb3bff40c0b2935125 () Term)
(declare-fun FStar.UInt8.lognot@tok () Term)


; </end encoding val FStar.UInt8.lognot>


; <Start encoding val FStar.UInt8.shift_right>

(declare-fun FStar.UInt8.shift_right (Term Term) Term)
(declare-fun Tm_refine_098e5306776c74ab1df7fd9dd6d3b590 (Term Term) Term)
(declare-fun Tm_arrow_b066c40415d68ecc38942bb71d3e3f6f () Term)
(declare-fun FStar.UInt8.shift_right@tok () Term)


; </end encoding val FStar.UInt8.shift_right>


; <Start encoding val FStar.UInt8.shift_left>

(declare-fun FStar.UInt8.shift_left (Term Term) Term)
(declare-fun Tm_refine_a97317ecf8cf07e3c11fb9b0d3ed777c (Term Term) Term)
(declare-fun Tm_arrow_07d4bb9ab4248e20b62c52c13b75d97e () Term)
(declare-fun FStar.UInt8.shift_left@tok () Term)


; </end encoding val FStar.UInt8.shift_left>


; <Start encoding let eq>

(declare-fun FStar.UInt8.eq (Term Term) Term)
(declare-fun Tm_arrow_044ce6ce0f384eef0fc1f6f3f8f2f074 () Term)
(declare-fun FStar.UInt8.eq@tok () Term)

; </end encoding let eq>


; <Start encoding let gt>

(declare-fun FStar.UInt8.gt (Term Term) Term)

(declare-fun FStar.UInt8.gt@tok () Term)

; </end encoding let gt>


; <Start encoding let gte>

(declare-fun FStar.UInt8.gte (Term Term) Term)

(declare-fun FStar.UInt8.gte@tok () Term)

; </end encoding let gte>


; <Start encoding let lt>

(declare-fun FStar.UInt8.lt (Term Term) Term)

(declare-fun FStar.UInt8.lt@tok () Term)

; </end encoding let lt>


; <Start encoding let lte>

(declare-fun FStar.UInt8.lte (Term Term) Term)

(declare-fun FStar.UInt8.lte@tok () Term)

; </end encoding let lte>


; <Start encoding let minus>

(declare-fun FStar.UInt8.minus (Term) Term)
(declare-fun Tm_arrow_53a47de46a631aa3eac76ad156b433ff () Term)
(declare-fun FStar.UInt8.minus@tok () Term)

; </end encoding let minus>


; <Start encoding let n_minus_one>

(declare-fun FStar.UInt8.n_minus_one (Dummy_sort) Term)

; </end encoding let n_minus_one>


; <Skipped #set-options "--z3rlimit 80 --initial_fuel 1 --max_fuel 1"/>


; <Start encoding let eq_mask>

(declare-fun FStar.UInt8.eq_mask (Term Term) Term)
(declare-fun Tm_refine_4b365856d6f9222ae4baaff2421b1f3d (Term Term) Term)
(declare-fun Tm_arrow_a445c7cdf140b45a21388352df89d169 () Term)
(declare-fun FStar.UInt8.eq_mask@tok () Term)


; </end encoding let eq_mask>


; <Start encoding val FStar.UInt8.lemma_sub_msbs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt8.lemma_sub_msbs (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt8.lemma_sub_msbs@tok () Term)

; </end encoding val FStar.UInt8.lemma_sub_msbs>


; <Start encoding let gte_mask>

(declare-fun FStar.UInt8.gte_mask (Term Term) Term)
(declare-fun Tm_refine_d0b1e2944ee74da332d1b0864caf4a29 (Term Term) Term)
(declare-fun Tm_arrow_fdec4315b860ac38893cb3277ba98c8c () Term)
(declare-fun FStar.UInt8.gte_mask@tok () Term)


; </end encoding let gte_mask>


; <Skipped #reset-options/>


; <Start encoding let op_Plus_Hat>

(declare-fun FStar.UInt8.op_Plus_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Plus_Hat@tok () Term)


; </end encoding let op_Plus_Hat>


; <Start encoding let op_Plus_Question_Hat>

(declare-fun FStar.UInt8.op_Plus_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Plus_Question_Hat@tok () Term)


; </end encoding let op_Plus_Question_Hat>


; <Start encoding let op_Plus_Percent_Hat>

(declare-fun FStar.UInt8.op_Plus_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Plus_Percent_Hat@tok () Term)


; </end encoding let op_Plus_Percent_Hat>


; <Start encoding let op_Subtraction_Hat>

(declare-fun FStar.UInt8.op_Subtraction_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Subtraction_Hat@tok () Term)


; </end encoding let op_Subtraction_Hat>


; <Start encoding let op_Subtraction_Question_Hat>

(declare-fun FStar.UInt8.op_Subtraction_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Subtraction_Question_Hat@tok () Term)


; </end encoding let op_Subtraction_Question_Hat>


; <Start encoding let op_Subtraction_Percent_Hat>

(declare-fun FStar.UInt8.op_Subtraction_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Subtraction_Percent_Hat@tok () Term)


; </end encoding let op_Subtraction_Percent_Hat>


; <Start encoding let op_Star_Hat>

(declare-fun FStar.UInt8.op_Star_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Star_Hat@tok () Term)


; </end encoding let op_Star_Hat>


; <Start encoding let op_Star_Question_Hat>

(declare-fun FStar.UInt8.op_Star_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Star_Question_Hat@tok () Term)


; </end encoding let op_Star_Question_Hat>


; <Start encoding let op_Star_Percent_Hat>

(declare-fun FStar.UInt8.op_Star_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Star_Percent_Hat@tok () Term)


; </end encoding let op_Star_Percent_Hat>


; <Start encoding let op_Slash_Hat>


(declare-fun FStar.UInt8.op_Slash_Hat (Term Term) Term)



(declare-fun FStar.UInt8.op_Slash_Hat@tok () Term)



; </end encoding let op_Slash_Hat>


; <Start encoding let op_Percent_Hat>


(declare-fun FStar.UInt8.op_Percent_Hat (Term Term) Term)



(declare-fun FStar.UInt8.op_Percent_Hat@tok () Term)



; </end encoding let op_Percent_Hat>


; <Start encoding let op_Hat_Hat>

(declare-fun FStar.UInt8.op_Hat_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Hat_Hat@tok () Term)


; </end encoding let op_Hat_Hat>


; <Start encoding let op_Amp_Hat>

(declare-fun FStar.UInt8.op_Amp_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Amp_Hat@tok () Term)


; </end encoding let op_Amp_Hat>


; <Start encoding let op_Bar_Hat>

(declare-fun FStar.UInt8.op_Bar_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Bar_Hat@tok () Term)


; </end encoding let op_Bar_Hat>


; <Start encoding let op_Less_Less_Hat>

(declare-fun FStar.UInt8.op_Less_Less_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Less_Less_Hat@tok () Term)


; </end encoding let op_Less_Less_Hat>


; <Start encoding let op_Greater_Greater_Hat>

(declare-fun FStar.UInt8.op_Greater_Greater_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Greater_Greater_Hat@tok () Term)


; </end encoding let op_Greater_Greater_Hat>


; <Start encoding let op_Equals_Hat>

(declare-fun FStar.UInt8.op_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt8.op_Equals_Hat@tok () Term)

; </end encoding let op_Equals_Hat>


; <Start encoding let op_Greater_Hat>

(declare-fun FStar.UInt8.op_Greater_Hat (Term Term) Term)

(declare-fun FStar.UInt8.op_Greater_Hat@tok () Term)

; </end encoding let op_Greater_Hat>


; <Start encoding let op_Greater_Equals_Hat>

(declare-fun FStar.UInt8.op_Greater_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt8.op_Greater_Equals_Hat@tok () Term)

; </end encoding let op_Greater_Equals_Hat>


; <Start encoding let op_Less_Hat>

(declare-fun FStar.UInt8.op_Less_Hat (Term Term) Term)

(declare-fun FStar.UInt8.op_Less_Hat@tok () Term)

; </end encoding let op_Less_Hat>


; <Start encoding let op_Less_Equals_Hat>

(declare-fun FStar.UInt8.op_Less_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt8.op_Less_Equals_Hat@tok () Term)

; </end encoding let op_Less_Equals_Hat>


; <Start encoding val FStar.UInt8.to_string>

(declare-fun FStar.UInt8.to_string (Term) Term)
(declare-fun Tm_arrow_630ce6920914ed05e3724fa72d06132c () Term)
(declare-fun FStar.UInt8.to_string@tok () Term)

; </end encoding val FStar.UInt8.to_string>


; <Start encoding val FStar.UInt8.to_string_hex>

(declare-fun FStar.UInt8.to_string_hex (Term) Term)

(declare-fun FStar.UInt8.to_string_hex@tok () Term)

; </end encoding val FStar.UInt8.to_string_hex>


; <Start encoding val FStar.UInt8.to_string_hex_pad>

(declare-fun FStar.UInt8.to_string_hex_pad (Term) Term)

(declare-fun FStar.UInt8.to_string_hex_pad@tok () Term)

; </end encoding val FStar.UInt8.to_string_hex_pad>


; <Start encoding val FStar.UInt8.of_string>

(declare-fun FStar.UInt8.of_string (Term) Term)
(declare-fun Tm_arrow_2b6f4c2bff8eb5d0563e8b6985a71043 () Term)
(declare-fun FStar.UInt8.of_string@tok () Term)

; </end encoding val FStar.UInt8.of_string>


; <Skipped #set-options "--admit_smt_queries true"/>


; <Start encoding let __uint_to_t>

(declare-fun FStar.UInt8.__uint_to_t (Term) Term)
(declare-fun Tm_arrow_52383a4d974551ee41b2c1746d04b8c5 () Term)
(declare-fun FStar.UInt8.__uint_to_t@tok () Term)

; </end encoding let __uint_to_t>


; <Skipped #reset-options/>


; <Start encoding let byte>

(declare-fun FStar.UInt8.byte (Dummy_sort) Term)

; </end encoding let byte>


; End Externals for interface FStar.UInt8


; Externals for interface FStar.Seq.Properties


; <Start encoding let lseq>

(declare-fun FStar.Seq.Properties.lseq (Term Term) Term)

(declare-fun FStar.Seq.Properties.lseq@tok () Term)
(declare-fun Tm_refine_a0cd7d06c5da6444b6b51b319febde8e (Term Term) Term)

; </end encoding let lseq>


; <Start encoding let indexable>

(declare-fun FStar.Seq.Properties.indexable (Term Term Term) Term)
(declare-fun Tm_arrow_2c0367dd991d12c77178c7fe63f076c5 () Term)
(declare-fun FStar.Seq.Properties.indexable@tok () Term)

; </end encoding let indexable>


; <Start encoding val FStar.Seq.Properties.lemma_append_inj_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_append_inj_l (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_append_inj_l@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_append_inj_l>


; <Start encoding val FStar.Seq.Properties.lemma_append_inj_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_append_inj_r (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_append_inj_r@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_append_inj_r>


; <Start encoding val FStar.Seq.Properties.lemma_append_len_disj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_append_len_disj (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_append_len_disj@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_append_len_disj>


; <Start encoding val FStar.Seq.Properties.lemma_append_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_append_inj (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_append_inj@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_append_inj>


; <Start encoding let head>

(declare-fun Tm_refine_167ef714932ec832fb671890fc3eee6c (Term) Term)
(declare-fun FStar.Seq.Properties.head (Term Term) Term)

(declare-fun Tm_arrow_fde6b9111cb8aaf87a1b6689af62ed69 () Term)
(declare-fun FStar.Seq.Properties.head@tok () Term)


; </end encoding let head>


; <Start encoding let tail>


(declare-fun FStar.Seq.Properties.tail (Term Term) Term)

(declare-fun Tm_arrow_3db93b3d63ab329f9ab58ee76fda4c87 () Term)
(declare-fun FStar.Seq.Properties.tail@tok () Term)


; </end encoding let tail>


; <Start encoding val FStar.Seq.Properties.lemma_head_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_head_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_head_append@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_head_append>


; <Start encoding val FStar.Seq.Properties.lemma_tail_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_tail_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_tail_append@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_tail_append>


; <Start encoding let last>


(declare-fun FStar.Seq.Properties.last (Term Term) Term)


(declare-fun FStar.Seq.Properties.last@tok () Term)


; </end encoding let last>


; <Start encoding val FStar.Seq.Properties.lemma_cons_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_cons_inj (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_cons_inj@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_cons_inj>


; <Start encoding let split>

(declare-fun Tm_refine_17631fa6304dcc08d028bd475a6dd078 (Term Term) Term)
(declare-fun FStar.Seq.Properties.split (Term Term Term) Term)

(declare-fun Tm_arrow_e8094a245058e1a3364fcb54e52c4b61 () Term)
(declare-fun FStar.Seq.Properties.split@tok () Term)


; </end encoding let split>


; <Start encoding val FStar.Seq.Properties.lemma_split>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_split (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_split@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_split>


; <Start encoding let split_eq>


(declare-fun FStar.Seq.Properties.split_eq (Term Term Term) Term)

(declare-fun Tm_refine_78d42c5dbba01ee594272daa6bb0579c (Term Term) Term)
(declare-fun Tm_arrow_b88932abf1506cfe956c7a113bc65f4b () Term)
(declare-fun FStar.Seq.Properties.split_eq@tok () Term)



; </end encoding let split_eq>


; <Start encoding let rec count>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.count.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.count.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.count (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.count@tok () Term)
(declare-fun Tm_arrow_b68daf91c98458f9ea85290d85674a2e () Term)

; </end encoding let rec count>


; <Start encoding let mem>

(declare-fun FStar.Seq.Properties.mem (Term Term Term) Term)
(declare-fun Tm_arrow_8b9021eb78c56c0f1820182c3a3e44b5 () Term)
(declare-fun FStar.Seq.Properties.mem@tok () Term)

; </end encoding let mem>


; <Start encoding val FStar.Seq.Properties.mem_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.mem_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.mem_index@tok () Term)

; </end encoding val FStar.Seq.Properties.mem_index>


; <Start encoding let rec index_mem>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.index_mem.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.index_mem.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.index_mem (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.index_mem@tok () Term)
(declare-fun Tm_refine_7c92df3cf71635bc41483532e738d828 (Term Term Term) Term)

(declare-fun Tm_arrow_12def5646e9a05cc547dd67c2eeaec45 () Term)


; </end encoding let rec index_mem>


; <Start encoding let swap>



(declare-fun FStar.Seq.Properties.swap (Term Term Term Term) Term)


(declare-fun Tm_arrow_ed5530d89236443143d2d084ddc97069 () Term)
(declare-fun FStar.Seq.Properties.swap@tok () Term)



; </end encoding let swap>


; <Start encoding val FStar.Seq.Properties.lemma_slice_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_append@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_slice_append>


; <Start encoding val FStar.Seq.Properties.lemma_slice_first_in_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_first_in_append (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_first_in_append@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_slice_first_in_append>


; <Start encoding val FStar.Seq.Properties.slice_upd>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.slice_upd (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.slice_upd@tok () Term)



; </end encoding val FStar.Seq.Properties.slice_upd>


; <Start encoding val FStar.Seq.Properties.upd_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.upd_slice (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.upd_slice@tok () Term)



; </end encoding val FStar.Seq.Properties.upd_slice>


; <Start encoding val FStar.Seq.Properties.lemma_append_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_append_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_append_cons@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_append_cons>


; <Start encoding val FStar.Seq.Properties.lemma_tl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_tl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_tl@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_tl>


; <Start encoding let rec sorted>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.sorted.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.sorted.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.sorted (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.sorted@tok () Term)



(declare-fun Tm_arrow_28685b742721099a6ab3847e4434a96d () Term)

; </end encoding let rec sorted>


; <Start encoding val FStar.Seq.Properties.sorted_feq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.sorted_feq (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.sorted_feq@tok () Term)

; </end encoding val FStar.Seq.Properties.sorted_feq>


; <Start encoding val FStar.Seq.Properties.lemma_append_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_append_count (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_append_count@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_append_count>


; <Start encoding val FStar.Seq.Properties.lemma_append_count_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_append_count_aux (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_append_count_aux@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_append_count_aux>


; <Start encoding val FStar.Seq.Properties.lemma_mem_inversion>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_inversion (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_inversion@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_mem_inversion>


; <Start encoding val FStar.Seq.Properties.lemma_mem_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_count (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_count@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_mem_count>


; <Start encoding val FStar.Seq.Properties.lemma_count_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_count_slice (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_count_slice@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_count_slice>


; <Start encoding let total_order>


(declare-fun FStar.Seq.Properties.total_order (Term Term) Term)

(declare-fun Tm_arrow_1118b25cace7451b1e5dfdfe482dbb64 () Term)
(declare-fun FStar.Seq.Properties.total_order@tok () Term)


; </end encoding let total_order>


; <Start encoding let tot_ord>

(declare-fun FStar.Seq.Properties.tot_ord (Term) Term)

(declare-fun FStar.Seq.Properties.tot_ord@tok () Term)

(declare-fun Tm_refine_a01e88865b4bbd2f0a4bcb261b6760a8 (Term) Term)

; </end encoding let tot_ord>


; <Start encoding val FStar.Seq.Properties.sorted_concat_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.sorted_concat_lemma (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.sorted_concat_lemma@tok () Term)

; </end encoding val FStar.Seq.Properties.sorted_concat_lemma>


; <Start encoding val FStar.Seq.Properties.split_5>

(declare-fun Tm_refine_55108d29d63192475ca95f591039cc18 (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.split_5 (Term Term Term Term) Term)

(declare-fun Tm_refine_03fdfb031367b218884098aa9d386676 (Term Term Term Term) Term)
(declare-fun Tm_arrow_1ab34f107de5525c681399e3c671c330 () Term)
(declare-fun FStar.Seq.Properties.split_5@tok () Term)


; </end encoding val FStar.Seq.Properties.split_5>


; <Start encoding val FStar.Seq.Properties.lemma_swap_permutes_aux_frag_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes_aux_frag_eq (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes_aux_frag_eq@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_swap_permutes_aux_frag_eq>


; <Start encoding val FStar.Seq.Properties.lemma_swap_permutes_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes_aux (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes_aux@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_swap_permutes_aux>


; <Start encoding let permutation>

(declare-fun FStar.Seq.Properties.permutation (Term Term Term) Term)
(declare-fun Tm_arrow_05517904f5779069bb79d90a352f1386 () Term)
(declare-fun FStar.Seq.Properties.permutation@tok () Term)

; </end encoding let permutation>


; <Start encoding val FStar.Seq.Properties.append_permutations>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.append_permutations (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.append_permutations@tok () Term)

; </end encoding val FStar.Seq.Properties.append_permutations>


; <Start encoding val FStar.Seq.Properties.lemma_swap_permutes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_swap_permutes>


; <Start encoding val FStar.Seq.Properties.perm_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.perm_len (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.perm_len@tok () Term)

; </end encoding val FStar.Seq.Properties.perm_len>


; <Start encoding val FStar.Seq.Properties.cons_perm>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.cons_perm (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.cons_perm@tok () Term)

; </end encoding val FStar.Seq.Properties.cons_perm>


; <Start encoding val FStar.Seq.Properties.lemma_mem_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_append@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_mem_append>


; <Start encoding val FStar.Seq.Properties.lemma_slice_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_cons (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_cons@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_slice_cons>


; <Start encoding val FStar.Seq.Properties.lemma_slice_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_snoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_snoc@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_slice_snoc>


; <Start encoding val FStar.Seq.Properties.lemma_ordering_lo_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_ordering_lo_snoc (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_ordering_lo_snoc@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_ordering_lo_snoc>


; <Start encoding val FStar.Seq.Properties.lemma_ordering_hi_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_ordering_hi_cons (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_ordering_hi_cons@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_ordering_hi_cons>


; <Start encoding val FStar.Seq.Properties.swap_frame_lo>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.swap_frame_lo (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.swap_frame_lo@tok () Term)

; </end encoding val FStar.Seq.Properties.swap_frame_lo>


; <Start encoding val FStar.Seq.Properties.swap_frame_lo'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.swap_frame_lo_ (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.swap_frame_lo_@tok () Term)

; </end encoding val FStar.Seq.Properties.swap_frame_lo'>


; <Start encoding val FStar.Seq.Properties.swap_frame_hi>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.swap_frame_hi (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.swap_frame_hi@tok () Term)

; </end encoding val FStar.Seq.Properties.swap_frame_hi>


; <Start encoding val FStar.Seq.Properties.lemma_swap_slice_commute>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_slice_commute (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_slice_commute@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_swap_slice_commute>


; <Start encoding val FStar.Seq.Properties.lemma_swap_permutes_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes_slice (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes_slice@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_swap_permutes_slice>


; <Start encoding let splice>



(declare-fun FStar.Seq.Properties.splice (Term Term Term Term Term) Term)


(declare-fun Tm_arrow_c43a25ef505b9db21532cdb95f3c9f68 () Term)
(declare-fun FStar.Seq.Properties.splice@tok () Term)



; </end encoding let splice>


; <Start encoding let replace_subseq>


(declare-fun Tm_refine_5542011d20872a6178aad9a072f1b686 (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.replace_subseq (Term Term Term Term Term) Term)


(declare-fun Tm_arrow_9fa775abc8f8f9c4e6df626212cddc6a () Term)
(declare-fun FStar.Seq.Properties.replace_subseq@tok () Term)



; </end encoding let replace_subseq>


; <Start encoding val FStar.Seq.Properties.splice_refl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.splice_refl (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.splice_refl@tok () Term)

; </end encoding val FStar.Seq.Properties.splice_refl>


; <Start encoding val FStar.Seq.Properties.lemma_swap_splice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_splice (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_splice@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_swap_splice>


; <Start encoding val FStar.Seq.Properties.lemma_seq_frame_hi>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_frame_hi (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_frame_hi@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_seq_frame_hi>


; <Start encoding val FStar.Seq.Properties.lemma_seq_frame_lo>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_frame_lo (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_frame_lo@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_seq_frame_lo>


; <Start encoding val FStar.Seq.Properties.lemma_tail_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_tail_slice (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_tail_slice@tok () Term)
(declare-fun Tm_refine_b138bd5848d4184f7632587e6e4bcf9f (Term Term Term) Term)

; </end encoding val FStar.Seq.Properties.lemma_tail_slice>


; <Start encoding val FStar.Seq.Properties.lemma_weaken_frame_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_frame_right (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_frame_right@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_weaken_frame_right>


; <Start encoding val FStar.Seq.Properties.lemma_weaken_frame_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_frame_left (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_frame_left@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_weaken_frame_left>


; <Start encoding val FStar.Seq.Properties.lemma_trans_frame>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_trans_frame (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_trans_frame@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_trans_frame>


; <Start encoding val FStar.Seq.Properties.lemma_weaken_perm_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_perm_left (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_perm_left@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_weaken_perm_left>


; <Start encoding val FStar.Seq.Properties.lemma_weaken_perm_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_perm_right (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_perm_right@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_weaken_perm_right>


; <Start encoding val FStar.Seq.Properties.lemma_trans_perm>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_trans_perm (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_trans_perm@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_trans_perm>


; <Start encoding let snoc>

(declare-fun FStar.Seq.Properties.snoc (Term Term Term) Term)
(declare-fun Tm_arrow_f9b27de7c4505538c6110afe14403cc8 () Term)
(declare-fun FStar.Seq.Properties.snoc@tok () Term)

; </end encoding let snoc>


; <Start encoding val FStar.Seq.Properties.lemma_cons_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_cons_snoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_cons_snoc@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_cons_snoc>


; <Start encoding val FStar.Seq.Properties.lemma_tail_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_tail_snoc (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_tail_snoc@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_tail_snoc>


; <Start encoding val FStar.Seq.Properties.lemma_snoc_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_snoc_inj (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_snoc_inj@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_snoc_inj>


; <Start encoding val FStar.Seq.Properties.lemma_mem_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_snoc (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_snoc@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_mem_snoc>


; <Start encoding let rec find_l>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.find_l.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.find_l.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.find_l (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.find_l@tok () Term)

(declare-fun Tm_refine_aba7638072c8f1ba6a01b95ec6f9a485 (Term Term) Term)



(declare-fun Tm_arrow_fd183dc9552028fd54abfbe4a84f515a () Term)


; </end encoding let rec find_l>


; <Start encoding let rec ghost_find_l>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.ghost_find_l.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.ghost_find_l.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.ghost_find_l (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.ghost_find_l@tok () Term)
(declare-fun Tm_ghost_arrow_9a34a9deaac3ca72ad48c3ec79b6656c (Term) Term)




(declare-fun Tm_ghost_arrow_3f8a537d0d54200d690f80a370cf9031 () Term)


; </end encoding let rec ghost_find_l>


; <Start encoding val FStar.Seq.Properties.find_append_some>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.find_append_some (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.find_append_some@tok () Term)

; </end encoding val FStar.Seq.Properties.find_append_some>


; <Start encoding val FStar.Seq.Properties.find_append_none>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.find_append_none (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.find_append_none@tok () Term)

; </end encoding val FStar.Seq.Properties.find_append_none>


; <Start encoding val FStar.Seq.Properties.find_append_none_s2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.find_append_none_s2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.find_append_none_s2@tok () Term)

; </end encoding val FStar.Seq.Properties.find_append_none_s2>


; <Start encoding val FStar.Seq.Properties.find_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.find_snoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.find_snoc@tok () Term)

; </end encoding val FStar.Seq.Properties.find_snoc>


; <Start encoding let un_snoc>

(declare-fun Tm_refine_5739deb21d8cba89243fec27b35b7ef0 (Term) Term)
(declare-fun FStar.Seq.Properties.un_snoc (Term Term) Term)

(declare-fun Tm_refine_16326afaeb5f4d93ab294cc4a965de3e (Term Term) Term)
(declare-fun Tm_arrow_30c2910b2510bbce2598a79ba00a0209 () Term)
(declare-fun FStar.Seq.Properties.un_snoc@tok () Term)



; </end encoding let un_snoc>


; <Start encoding val FStar.Seq.Properties.un_snoc_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.un_snoc_snoc (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.un_snoc_snoc@tok () Term)

; </end encoding val FStar.Seq.Properties.un_snoc_snoc>


; <Start encoding let rec find_r>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.find_r.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.find_r.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.find_r (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.find_r@tok () Term)








; </end encoding let rec find_r>


; <Start encoding let found>

(declare-fun FStar.Seq.Properties.found (Term) Term)
(declare-fun Tm_arrow_591bcdc53dc583ecc77b1bc5436f9a59 () Term)
(declare-fun FStar.Seq.Properties.found@tok () Term)

; </end encoding let found>


; <Start encoding let rec seq_find_aux>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.seq_find_aux.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.seq_find_aux.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.seq_find_aux (Term Term Term Term) Term)
(declare-fun FStar.Seq.Properties.seq_find_aux@tok () Term)


(declare-fun Tm_refine_564e05c43cb7c1f4e1de1a4fb2fd28c8 (Term Term Term) Term)


(declare-fun Tm_refine_5e8ab89510578a938a38bd5dfb813b93 (Term Term Term) Term)









(declare-fun Tm_arrow_c2dc7826f3281f473541797eb2d714b7 () Term)




; </end encoding let rec seq_find_aux>


; <Start encoding let seq_find>


(declare-fun FStar.Seq.Properties.seq_find (Term Term Term) Term)




(declare-fun Tm_arrow_fa1508f34cdf614c6772d290f5ddf827 () Term)
(declare-fun FStar.Seq.Properties.seq_find@tok () Term)





; </end encoding let seq_find>


; <Start encoding val FStar.Seq.Properties.find_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.find_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.find_mem@tok () Term)

; </end encoding val FStar.Seq.Properties.find_mem>


; <Start encoding let for_all>


(declare-fun FStar.Seq.Properties.for_all (Term Term Term) Term)


(declare-fun Tm_refine_307fd373d8b3749096cf164b41cf1984 (Term Term Term) Term)
(declare-fun Tm_arrow_098d0ddce18f722cb743337c9d7dd0b9 () Term)
(declare-fun FStar.Seq.Properties.for_all@tok () Term)




(declare-fun Tm_abs_e818836335067047224d0c19c4cabb2d (Term Term) Term)

; </end encoding let for_all>


; <Start encoding val FStar.Seq.Properties.seq_mem_k>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.seq_mem_k (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.seq_mem_k@tok () Term)


; </end encoding val FStar.Seq.Properties.seq_mem_k>


; <Start encoding val FStar.Seq.Properties.lemma_seq_of_list_induction>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_induction (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_induction@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_seq_of_list_induction>


; <Start encoding val FStar.Seq.Properties.lemma_seq_list_bij>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_list_bij (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_list_bij@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_seq_list_bij>


; <Start encoding val FStar.Seq.Properties.lemma_list_seq_bij>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_list_seq_bij (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_list_seq_bij@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_list_seq_bij>


; <Start encoding let createL_post>

(declare-fun FStar.Seq.Properties.createL_post (Term Term Term) Term)
(declare-fun Tm_arrow_befeea9093c61a572da65bfe7ce35cff () Term)
(declare-fun FStar.Seq.Properties.createL_post@tok () Term)
(declare-fun Tm_refine_1780a0fddfda88c43d203b562c6d3f5b () Term)

; </end encoding let createL_post>


; <Start encoding let createL>

(declare-fun FStar.Seq.Properties.createL (Term Term) Term)

(declare-fun Tm_refine_21ffdca6c0b13e0caadadae84ae105ad (Term Term) Term)
(declare-fun Tm_arrow_fe4a88707901fac19b8a27ed4097cad8 () Term)
(declare-fun FStar.Seq.Properties.createL@tok () Term)



; </end encoding let createL>


; <Start encoding val FStar.Seq.Properties.lemma_index_is_nth>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_index_is_nth (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_index_is_nth@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_index_is_nth>


; <Start encoding val FStar.Seq.Properties.contains>

(declare-fun FStar.Seq.Properties.contains (Term Term Term) Term)
(declare-fun Tm_arrow_65d0102b1211a5d233193433129106a1 () Term)
(declare-fun FStar.Seq.Properties.contains@tok () Term)

; </end encoding val FStar.Seq.Properties.contains>


; <Start encoding val FStar.Seq.Properties.contains_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.contains_intro (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.contains_intro@tok () Term)

; </end encoding val FStar.Seq.Properties.contains_intro>


; <Start encoding val FStar.Seq.Properties.contains_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.contains_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.contains_elim@tok () Term)

; </end encoding val FStar.Seq.Properties.contains_elim>


; <Start encoding val FStar.Seq.Properties.lemma_contains_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_contains_empty (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_contains_empty@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_contains_empty>


; <Start encoding val FStar.Seq.Properties.lemma_contains_singleton>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_contains_singleton (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_contains_singleton@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_contains_singleton>


; <Start encoding val FStar.Seq.Properties.append_contains_equiv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.append_contains_equiv (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.append_contains_equiv@tok () Term)

; </end encoding val FStar.Seq.Properties.append_contains_equiv>


; <Start encoding val FStar.Seq.Properties.contains_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.contains_snoc (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.contains_snoc@tok () Term)

; </end encoding val FStar.Seq.Properties.contains_snoc>


; <Start encoding val FStar.Seq.Properties.lemma_find_l_contains>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_find_l_contains (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_find_l_contains@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_find_l_contains>


; <Start encoding val FStar.Seq.Properties.contains_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.contains_cons (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.contains_cons@tok () Term)

; </end encoding val FStar.Seq.Properties.contains_cons>


; <Start encoding val FStar.Seq.Properties.append_cons_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.append_cons_snoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.append_cons_snoc@tok () Term)

; </end encoding val FStar.Seq.Properties.append_cons_snoc>


; <Start encoding val FStar.Seq.Properties.append_slices>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.append_slices (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.append_slices@tok () Term)

; </end encoding val FStar.Seq.Properties.append_slices>


; <Start encoding val FStar.Seq.Properties.find_l_none_no_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.find_l_none_no_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.find_l_none_no_index@tok () Term)

; </end encoding val FStar.Seq.Properties.find_l_none_no_index>


; <Start encoding let suffix_of>

(declare-fun FStar.Seq.Properties.suffix_of (Term Term Term) Term)
(declare-fun Tm_arrow_2ed6082b86d605508c94c4b8a46966f5 () Term)
(declare-fun FStar.Seq.Properties.suffix_of@tok () Term)

; </end encoding let suffix_of>


; <Start encoding val FStar.Seq.Properties.cons_head_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.cons_head_tail (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.cons_head_tail@tok () Term)


; </end encoding val FStar.Seq.Properties.cons_head_tail>


; <Start encoding val FStar.Seq.Properties.head_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.head_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.head_cons@tok () Term)

; </end encoding val FStar.Seq.Properties.head_cons>


; <Start encoding val FStar.Seq.Properties.suffix_of_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.suffix_of_tail (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.suffix_of_tail@tok () Term)


; </end encoding val FStar.Seq.Properties.suffix_of_tail>


; <Start encoding val FStar.Seq.Properties.index_cons_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.index_cons_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.index_cons_l@tok () Term)

; </end encoding val FStar.Seq.Properties.index_cons_l>


; <Start encoding val FStar.Seq.Properties.index_cons_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.index_cons_r (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.index_cons_r@tok () Term)

; </end encoding val FStar.Seq.Properties.index_cons_r>


; <Start encoding val FStar.Seq.Properties.append_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.append_cons (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.append_cons@tok () Term)

; </end encoding val FStar.Seq.Properties.append_cons>


; <Start encoding val FStar.Seq.Properties.index_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.index_tail (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.index_tail@tok () Term)

; </end encoding val FStar.Seq.Properties.index_tail>


; <Start encoding val FStar.Seq.Properties.mem_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.mem_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.mem_cons@tok () Term)

; </end encoding val FStar.Seq.Properties.mem_cons>


; <Start encoding val FStar.Seq.Properties.snoc_slice_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.snoc_slice_index (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.snoc_slice_index@tok () Term)
(declare-fun Tm_refine_095c5722edf0f79bcd7dce7bd084c7b5 (Term Term Term) Term)

; </end encoding val FStar.Seq.Properties.snoc_slice_index>


; <Start encoding val FStar.Seq.Properties.cons_index_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.cons_index_slice (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.cons_index_slice@tok () Term)
(declare-fun Tm_refine_09d2e9ab3b9c121b24316d151747e281 (Term Term Term) Term)
(declare-fun Tm_refine_ddd44b85040d1947cca83550b7e21966 (Term) Term)

; </end encoding val FStar.Seq.Properties.cons_index_slice>


; <Start encoding val FStar.Seq.Properties.slice_is_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.slice_is_empty (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.slice_is_empty@tok () Term)


; </end encoding val FStar.Seq.Properties.slice_is_empty>


; <Start encoding val FStar.Seq.Properties.slice_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.slice_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.slice_length@tok () Term)

; </end encoding val FStar.Seq.Properties.slice_length>


; <Start encoding val FStar.Seq.Properties.slice_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.slice_slice (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.slice_slice@tok () Term)

(declare-fun Tm_refine_1ba8fd8bb363097813064c67740b2de5 (Term Term Term) Term)

; </end encoding val FStar.Seq.Properties.slice_slice>


; <Start encoding val FStar.Seq.Properties.lemma_seq_of_list_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_index@tok () Term)


; </end encoding val FStar.Seq.Properties.lemma_seq_of_list_index>


; <Start encoding let of_list>

(declare-fun FStar.Seq.Properties.of_list (Term Term) Term)
(declare-fun Tm_arrow_474463878fff5c7c9c02e4f0b8b84aa8 () Term)
(declare-fun FStar.Seq.Properties.of_list@tok () Term)

; </end encoding let of_list>


; <Start encoding val FStar.Seq.Properties.seq_of_list_tl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.seq_of_list_tl (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.seq_of_list_tl@tok () Term)

; </end encoding val FStar.Seq.Properties.seq_of_list_tl>


; <Start encoding val FStar.Seq.Properties.mem_seq_of_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.mem_seq_of_list (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.mem_seq_of_list@tok () Term)

; </end encoding val FStar.Seq.Properties.mem_seq_of_list>


; <Start encoding let rec explode_and>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.explode_and.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.explode_and.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.explode_and (Term Term Term Term) Term)
(declare-fun FStar.Seq.Properties.explode_and@tok () Term)
(declare-fun Tm_refine_5885c715bf599d471c43c6b7dcb2413b (Term Term) Term)
(declare-fun Tm_refine_c731267dd71b747abfd9fc75f6f2da81 (Term Term Term) Term)




(declare-fun Tm_arrow_62bce6f622c5bc90fd46048dee6dae55 () Term)

; </end encoding let rec explode_and>


; <Start encoding let pointwise_and>

(declare-fun Tm_refine_9f068c7f6ce275579028a195ac18485b (Term) Term)
(declare-fun Tm_refine_1ad818e6438a897337e89a3053cb2002 (Term Term) Term)
(declare-fun FStar.Seq.Properties.pointwise_and (Term Term Term) Term)


(declare-fun Tm_arrow_1d69c34f503e87805d9fa1b40bc9b696 () Term)
(declare-fun FStar.Seq.Properties.pointwise_and@tok () Term)



; </end encoding let pointwise_and>


; <Start encoding val FStar.Seq.Properties.intro_of_list'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.intro_of_list_ (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.intro_of_list_@tok () Term)

; </end encoding val FStar.Seq.Properties.intro_of_list'>


; <Start encoding val FStar.Seq.Properties.intro_of_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.intro_of_list (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.intro_of_list@tok () Term)

; </end encoding val FStar.Seq.Properties.intro_of_list>


; <Start encoding val FStar.Seq.Properties.elim_of_list'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.elim_of_list_ (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.elim_of_list_@tok () Term)

; </end encoding val FStar.Seq.Properties.elim_of_list'>


; <Start encoding val FStar.Seq.Properties.elim_of_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.elim_of_list (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.elim_of_list@tok () Term)

; </end encoding val FStar.Seq.Properties.elim_of_list>


; <Start encoding let sortWith>


(declare-fun FStar.Seq.Properties.sortWith (Term Term Term) Term)

(declare-fun Tm_arrow_783d577ed6adadfd234f2ce68178463f () Term)
(declare-fun FStar.Seq.Properties.sortWith@tok () Term)


; </end encoding let sortWith>


; <Start encoding val FStar.Seq.Properties.lemma_seq_to_list_permutation>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_to_list_permutation (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_to_list_permutation@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_seq_to_list_permutation>


; <Start encoding val FStar.Seq.Properties.lemma_seq_of_list_permutation>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_permutation (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_permutation@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_seq_of_list_permutation>


; <Start encoding val FStar.Seq.Properties.lemma_seq_of_list_sorted>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_sorted (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_sorted@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_seq_of_list_sorted>


; <Start encoding val FStar.Seq.Properties.lemma_seq_sortwith_correctness>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_sortwith_correctness (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_sortwith_correctness@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_seq_sortwith_correctness>


; <Start encoding let sort_lseq>

(declare-fun FStar.Seq.Properties.sort_lseq (Term Term Term Term) Term)
(declare-fun Tm_refine_896d0573468d5c87de125067e75d7d47 (Term Term Term Term) Term)
(declare-fun Tm_arrow_3fb7de3746e0ee65d4a1a51ab385c639 () Term)
(declare-fun FStar.Seq.Properties.sort_lseq@tok () Term)


; </end encoding let sort_lseq>


; <Start encoding let rec foldr>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.foldr.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.foldr.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.foldr (Term Term Term Term Term) Term)
(declare-fun FStar.Seq.Properties.foldr@tok () Term)



(declare-fun Tm_arrow_d44e7807ff692a4b5f624a4c31f6a34b () Term)

; </end encoding let rec foldr>


; <Start encoding let rec foldr_snoc>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.foldr_snoc.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.foldr_snoc.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.foldr_snoc (Term Term Term Term Term) Term)
(declare-fun FStar.Seq.Properties.foldr_snoc@tok () Term)





; </end encoding let rec foldr_snoc>


; <Start encoding val FStar.Seq.Properties.map_seq>


(declare-fun FStar.Seq.Properties.map_seq (Term Term Term Term) Term)

(declare-fun Tm_arrow_5f9288474a8f301ac883b79bab9ed39c () Term)
(declare-fun FStar.Seq.Properties.map_seq@tok () Term)

; </end encoding val FStar.Seq.Properties.map_seq>


; <Start encoding val FStar.Seq.Properties.map_seq_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.map_seq_len (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.map_seq_len@tok () Term)

; </end encoding val FStar.Seq.Properties.map_seq_len>


; <Start encoding val FStar.Seq.Properties.map_seq_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.map_seq_index (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.map_seq_index@tok () Term)

; </end encoding val FStar.Seq.Properties.map_seq_index>


; <Start encoding val FStar.Seq.Properties.map_seq_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.map_seq_append (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.map_seq_append@tok () Term)

; </end encoding val FStar.Seq.Properties.map_seq_append>


; End Externals for interface FStar.Seq.Properties


; Externals for module FStar.Seq


; End Externals for module FStar.Seq


; Externals for module MiniParse.Spec.Base


; <Start encoding let byte>

(declare-fun MiniParse.Spec.Base.byte (Dummy_sort) Term)

; </end encoding let byte>


; <Start encoding let bytes>

(declare-fun MiniParse.Spec.Base.bytes () Term)

; </end encoding let bytes>


; <Start encoding let consumed_length>

(declare-fun MiniParse.Spec.Base.consumed_length (Term) Term)
;;;;;;;;;;;;;;;;b: bytes -> Type
(declare-fun Tm_arrow_6ad57bb949e0d6345a8ea332ec1a107e () Term)
(declare-fun MiniParse.Spec.Base.consumed_length@tok () Term)
(declare-fun Tm_refine_f1ef48729dd48b5741a77671cc117cd5 (Term) Term)

; </end encoding let consumed_length>


; <Start encoding let bare_parser>

(declare-fun MiniParse.Spec.Base.bare_parser (Term) Term)

(declare-fun MiniParse.Spec.Base.bare_parser@tok () Term)
;;;;;;;;;;;;;;;;b: bytes -> Prims.GTot (FStar.Pervasives.Native.option (t & consumed_length b))
(declare-fun Tm_ghost_arrow_84eb031c18bd35e3c76ba4886d9ede0b (Term) Term)

; </end encoding let bare_parser>


; <Start encoding let bparse>

(declare-fun MiniParse.Spec.Base.bparse (Term Term Term) Term)
;;;;;;;;;;;;;;;;p: bare_parser t -> input: bytes   -> Prims.GTot (FStar.Pervasives.Native.option (t & consumed_length input))
(declare-fun Tm_ghost_arrow_99164b0887e22f166823e73d282f4625 () Term)
(declare-fun MiniParse.Spec.Base.bparse@tok () Term)

; </end encoding let bparse>


; <Start encoding let no_lookahead_weak_on>

(declare-fun MiniParse.Spec.Base.no_lookahead_weak_on (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;f: bare_parser t -> x: bytes -> x': bytes -> Prims.GTot Type
(declare-fun Tm_arrow_a0be510e56af15f88c93d4dcaf74ab01 () Term)
(declare-fun MiniParse.Spec.Base.no_lookahead_weak_on@tok () Term)

; </end encoding let no_lookahead_weak_on>


; <Start encoding let no_lookahead_weak_on_ext>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Base.no_lookahead_weak_on_ext (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Base.no_lookahead_weak_on_ext@tok () Term)

; </end encoding let no_lookahead_weak_on_ext>


; <Start encoding let no_lookahead_weak>

(declare-fun MiniParse.Spec.Base.no_lookahead_weak (Term Term) Term)
;;;;;;;;;;;;;;;;f: bare_parser t -> Prims.GTot Type
(declare-fun Tm_arrow_c20bec7661d564d1c6cf5bf2d95f1c17 () Term)
(declare-fun MiniParse.Spec.Base.no_lookahead_weak@tok () Term)

; </end encoding let no_lookahead_weak>


; <Start encoding let no_lookahead_weak_ext>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Base.no_lookahead_weak_ext (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Base.no_lookahead_weak_ext@tok () Term)

; </end encoding let no_lookahead_weak_ext>


; <Start encoding let injective_precond>

(declare-fun MiniParse.Spec.Base.injective_precond (Term Term Term Term) Term)

(declare-fun MiniParse.Spec.Base.injective_precond@tok () Term)

; </end encoding let injective_precond>


; <Start encoding let injective_precond_ext>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Base.injective_precond_ext (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Base.injective_precond_ext@tok () Term)

; </end encoding let injective_precond_ext>


; <Start encoding let injective_postcond>

(declare-fun MiniParse.Spec.Base.injective_postcond (Term Term Term Term) Term)

(declare-fun MiniParse.Spec.Base.injective_postcond@tok () Term)

; </end encoding let injective_postcond>


; <Start encoding let injective_postcond_ext>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Base.injective_postcond_ext (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Base.injective_postcond_ext@tok () Term)

; </end encoding let injective_postcond_ext>


; <Start encoding let injective>

(declare-fun MiniParse.Spec.Base.injective (Term Term) Term)

(declare-fun MiniParse.Spec.Base.injective@tok () Term)

; </end encoding let injective>


; <Start encoding let injective_ext>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Base.injective_ext (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Base.injective_ext@tok () Term)

; </end encoding let injective_ext>


; <Start encoding let no_lookahead_on_precond>

(declare-fun MiniParse.Spec.Base.no_lookahead_on_precond (Term Term Term Term) Term)

(declare-fun MiniParse.Spec.Base.no_lookahead_on_precond@tok () Term)

; </end encoding let no_lookahead_on_precond>


; <Start encoding let no_lookahead_on_postcond>

(declare-fun MiniParse.Spec.Base.no_lookahead_on_postcond (Term Term Term Term) Term)

(declare-fun MiniParse.Spec.Base.no_lookahead_on_postcond@tok () Term)

; </end encoding let no_lookahead_on_postcond>


; <Start encoding let no_lookahead_on>

(declare-fun MiniParse.Spec.Base.no_lookahead_on (Term Term Term Term) Term)

(declare-fun MiniParse.Spec.Base.no_lookahead_on@tok () Term)

; </end encoding let no_lookahead_on>


; <Start encoding let no_lookahead_on_ext>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Base.no_lookahead_on_ext (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Base.no_lookahead_on_ext@tok () Term)

; </end encoding let no_lookahead_on_ext>


; <Start encoding let no_lookahead>

(declare-fun MiniParse.Spec.Base.no_lookahead (Term Term) Term)

(declare-fun MiniParse.Spec.Base.no_lookahead@tok () Term)

; </end encoding let no_lookahead>


; <Start encoding let no_lookahead_ext>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Base.no_lookahead_ext (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Base.no_lookahead_ext@tok () Term)

; </end encoding let no_lookahead_ext>


; <Start encoding type MiniParse.Spec.Base.parser_spec>

;;;;;;;;;;;;;;;;Constructor
(declare-fun MiniParse.Spec.Base.parser_spec (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun MiniParse.Spec.Base.parser_spec@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun MiniParse.Spec.Base.Parser (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun MiniParse.Spec.Base.Parser_t (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun MiniParse.Spec.Base.Parser_f (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: MiniParse.Spec.Base.Parser
(declare-fun MiniParse.Spec.Base.Parser@tok () Term)
(declare-fun Tm_refine_95482e91a565bbc8d113ac6e95692d97 (Term) Term)

;;;;;;;;;;;;;;;;f: bare_parser t {no_lookahead_weak f /\ injective f /\ no_lookahead f} -> parser_spec t
(declare-fun Tm_arrow_b25ab83a8ff3e461d3d945d3d869dded () Term)

; <start constructor MiniParse.Spec.Base.parser_spec>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-MiniParse.Spec.Base.parser_spec ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
128)
(exists ((@x0 Term))
 (! (= __@x0
(MiniParse.Spec.Base.parser_spec @x0))
 
;;no pats
:qid is-MiniParse.Spec.Base.parser_spec))))

; </end constructor MiniParse.Spec.Base.parser_spec>


; <start constructor MiniParse.Spec.Base.Parser>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-MiniParse.Spec.Base.Parser ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
136)
(= __@x0
(MiniParse.Spec.Base.Parser (MiniParse.Spec.Base.Parser_t __@x0)
(MiniParse.Spec.Base.Parser_f __@x0)))))

; </end constructor MiniParse.Spec.Base.Parser>


; </end encoding type MiniParse.Spec.Base.parser_spec>


; <Start encoding val MiniParse.Spec.Base.uu___is_Parser>

(declare-fun MiniParse.Spec.Base.uu___is_Parser (Term Term) Term)
;;;;;;;;;;;;;;;;projectee: parser_spec t -> Prims.bool
(declare-fun Tm_arrow_a5cf99b8fbc97d1d543724148078c658 () Term)
(declare-fun MiniParse.Spec.Base.uu___is_Parser@tok () Term)

; </end encoding val MiniParse.Spec.Base.uu___is_Parser>


; <Skipped let uu___is_Parser/>


; <Start encoding val MiniParse.Spec.Base.__proj__Parser__item__f>

(declare-fun MiniParse.Spec.Base.__proj__Parser__item__f (Term Term) Term)

;;;;;;;;;;;;;;;;projectee: parser_spec t -> f: bare_parser t {no_lookahead_weak f /\ injective f /\ no_lookahead f}
(declare-fun Tm_arrow_50e6a45d3f19127249dea1079f5d74a8 () Term)
(declare-fun MiniParse.Spec.Base.__proj__Parser__item__f@tok () Term)


; </end encoding val MiniParse.Spec.Base.__proj__Parser__item__f>


; <Skipped let __proj__Parser__item__f/>


; <Start encoding let coerce_to_bare_parser>

(declare-fun MiniParse.Spec.Base.coerce_to_bare_parser (Term Term) Term)
;;;;;;;;;;;;;;;;t: Type -> p: parser_spec t -> bare_parser t
(declare-fun Tm_arrow_81728ab88ad4d2d6b3e89295e88468d3 () Term)
(declare-fun MiniParse.Spec.Base.coerce_to_bare_parser@tok () Term)

; </end encoding let coerce_to_bare_parser>


; <Start encoding let parse>

(declare-fun MiniParse.Spec.Base.parse (Term Term Term) Term)
;;;;;;;;;;;;;;;;p: parser_spec t -> input: bytes   -> Prims.GTot (FStar.Pervasives.Native.option (t & consumed_length input))
(declare-fun Tm_ghost_arrow_c5aa3104555e250c21d2c62a685affba () Term)
(declare-fun MiniParse.Spec.Base.parse@tok () Term)

; </end encoding let parse>


; <Start encoding let coerce>

(declare-fun MiniParse.Spec.Base.coerce (Term Term Term) Term)

;;;;;;;;;;;;;;;;t2: Type -> x: t1 -> Prims.Pure t2
(declare-fun Tm_arrow_a93d31919ffd5037c4c5d0b0794d9f8d () Term)
(declare-fun MiniParse.Spec.Base.coerce@tok () Term)


; </end encoding let coerce>


; <Start encoding let coerce_parser>

(declare-fun MiniParse.Spec.Base.coerce_parser (Term Term Term) Term)
(declare-fun Tm_refine_795fb455fe887e79d318ca3f6d129a29 (Term) Term)
;;;;;;;;;;;;;;;;t2: Type -> p: parser_spec t1 -> Prims.Pure (parser_spec t2)
(declare-fun Tm_arrow_defe626c1dfcae22a88d0ce7118177cf () Term)
(declare-fun MiniParse.Spec.Base.coerce_parser@tok () Term)


; </end encoding let coerce_parser>


; <Start encoding let bare_serializer>

(declare-fun MiniParse.Spec.Base.bare_serializer (Term) Term)

(declare-fun MiniParse.Spec.Base.bare_serializer@tok () Term)
;;;;;;;;;;;;;;;;_: t -> Prims.GTot bytes
(declare-fun Tm_ghost_arrow_4502d1a2310fff506c14a9e7677ba599 (Term) Term)

; </end encoding let bare_serializer>


; <Start encoding let serializer_correct>

(declare-fun MiniParse.Spec.Base.serializer_correct (Term Term Term) Term)
;;;;;;;;;;;;;;;;p: parser_spec t -> f: bare_serializer t -> Prims.GTot Type
(declare-fun Tm_arrow_4335f3e63c69411322d34044096ce85c () Term)
(declare-fun MiniParse.Spec.Base.serializer_correct@tok () Term)

; </end encoding let serializer_correct>


; <Start encoding let serializer_correct_ext>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Base.serializer_correct_ext (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Base.serializer_correct_ext@tok () Term)

; </end encoding let serializer_correct_ext>


; <Start encoding let serializer_complete>

(declare-fun MiniParse.Spec.Base.serializer_complete (Term Term Term) Term)

(declare-fun MiniParse.Spec.Base.serializer_complete@tok () Term)

; </end encoding let serializer_complete>


; <Start encoding let serializer_correct_implies_complete>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Base.serializer_correct_implies_complete (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Base.serializer_correct_implies_complete@tok () Term)

; </end encoding let serializer_correct_implies_complete>


; <Start encoding type MiniParse.Spec.Base.serializer_spec>

;;;;;;;;;;;;;;;;Constructor
(declare-fun MiniParse.Spec.Base.serializer_spec (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun MiniParse.Spec.Base.serializer_spec@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun MiniParse.Spec.Base.Serializer (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun MiniParse.Spec.Base.Serializer_t (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun MiniParse.Spec.Base.Serializer_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun MiniParse.Spec.Base.Serializer_f (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: MiniParse.Spec.Base.Serializer
(declare-fun MiniParse.Spec.Base.Serializer@tok () Term)
(declare-fun Tm_refine_8da27fc70f74cdb01995c74e5b0aab3a (Term Term) Term)

;;;;;;;;;;;;;;;;f: bare_serializer t {serializer_correct p f} -> serializer_spec p
(declare-fun Tm_arrow_78fbb3342439baf919ea758f9dc73de1 () Term)

; <start constructor MiniParse.Spec.Base.serializer_spec>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-MiniParse.Spec.Base.serializer_spec ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
167)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(MiniParse.Spec.Base.serializer_spec @x0
@x1))
 
;;no pats
:qid is-MiniParse.Spec.Base.serializer_spec))))

; </end constructor MiniParse.Spec.Base.serializer_spec>


; <start constructor MiniParse.Spec.Base.Serializer>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-MiniParse.Spec.Base.Serializer ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
175)
(= __@x0
(MiniParse.Spec.Base.Serializer (MiniParse.Spec.Base.Serializer_t __@x0)
(MiniParse.Spec.Base.Serializer_p __@x0)
(MiniParse.Spec.Base.Serializer_f __@x0)))))

; </end constructor MiniParse.Spec.Base.Serializer>


; </end encoding type MiniParse.Spec.Base.serializer_spec>


; <Start encoding val MiniParse.Spec.Base.uu___is_Serializer>

(declare-fun MiniParse.Spec.Base.uu___is_Serializer (Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: serializer_spec p -> Prims.bool
(declare-fun Tm_arrow_121ddabc540671bf1686c5bd9a2a0fbc () Term)
(declare-fun MiniParse.Spec.Base.uu___is_Serializer@tok () Term)

; </end encoding val MiniParse.Spec.Base.uu___is_Serializer>


; <Skipped let uu___is_Serializer/>


; <Start encoding val MiniParse.Spec.Base.__proj__Serializer__item__f>

(declare-fun MiniParse.Spec.Base.__proj__Serializer__item__f (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: serializer_spec p -> f: bare_serializer t {serializer_correct p f}
(declare-fun Tm_arrow_6fff714fa503dca55f8dee51ce96a75c () Term)
(declare-fun MiniParse.Spec.Base.__proj__Serializer__item__f@tok () Term)


; </end encoding val MiniParse.Spec.Base.__proj__Serializer__item__f>


; <Skipped let __proj__Serializer__item__f/>


; <Start encoding let coerce_serializer>


(declare-fun MiniParse.Spec.Base.coerce_serializer (Term Term Term Term Term) Term)

;;;;;;;;;;;;;;;;t2: Type -> s: serializer_spec p -> u2526: Prims.squash (t2 == t1) -> serializer_spec p
(declare-fun Tm_arrow_4bb7ec9a938b62118c753757c7804aec () Term)
(declare-fun MiniParse.Spec.Base.coerce_serializer@tok () Term)


; </end encoding let coerce_serializer>


; <Start encoding let serialize_ext>

(declare-fun MiniParse.Spec.Base.serialize_ext (Term Term Term Term Term) Term)
(declare-fun Tm_refine_d9c4b4f5350e06d893302895e7b320c0 (Term Term) Term)
;;;;;;;;;;;;;;;;p1: parser_spec t1 -> s1: serializer_spec p1 -> p2: parser_spec t2   -> Prims.Pure (serializer_spec p2)
(declare-fun Tm_arrow_61ffe7ed5fc798b2e27ec6fb688aa210 () Term)
(declare-fun MiniParse.Spec.Base.serialize_ext@tok () Term)


; </end encoding let serialize_ext>


; <Start encoding let serialize_ext'>

(declare-fun MiniParse.Spec.Base.serialize_ext_ (Term Term Term Term Term) Term)

;;;;;;;;;;;;;;;;p1: parser_spec t1 -> s1: serializer_spec p1 -> p2: parser_spec t2   -> Prims.Pure (serializer_spec p2)
(declare-fun Tm_arrow_c849cdabd7755e39e8b5ea992160e7ac () Term)
(declare-fun MiniParse.Spec.Base.serialize_ext_@tok () Term)


; </end encoding let serialize_ext'>


; <Start encoding let serialize>

(declare-fun MiniParse.Spec.Base.serialize (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;s: serializer_spec p -> x: t -> Prims.GTot bytes
(declare-fun Tm_ghost_arrow_5071ca442683837f0b764eb15abb1eb4 () Term)
(declare-fun MiniParse.Spec.Base.serialize@tok () Term)

; </end encoding let serialize>


; <Start encoding let serializer_unique>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Base.serializer_unique (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Base.serializer_unique@tok () Term)

; </end encoding let serializer_unique>


; <Start encoding let serializer_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Base.serializer_injective (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Base.serializer_injective@tok () Term)

; </end encoding let serializer_injective>


; <Start encoding let serializer_parser_unique'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Base.serializer_parser_unique_ (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Base.serializer_parser_unique_@tok () Term)

; </end encoding let serializer_parser_unique'>


; <Start encoding let serializer_parser_unique>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Base.serializer_parser_unique (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Base.serializer_parser_unique@tok () Term)

; </end encoding let serializer_parser_unique>


; End Externals for module MiniParse.Spec.Base

(push) ;; push{1

; Internals for MiniParse.Spec.Combinators

;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.__cache_version_number__; Namespace Prims
(assert (! (HasType Prims.__cache_version_number__
Prims.int)
:named function_token_typing_Prims.__cache_version_number__))
;;;;;;;;;;;;;;;;well-founded ordering on nat (alt)
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Prims.int)
(HasTypeFuel @u0
@x2
Prims.int)
(> (BoxInt_proj_0 @x1)
0)
(>= (BoxInt_proj_0 @x2)
0)
(< (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x1)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
@x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.int) (HasTypeFuel @u0
@x2
Prims.int) (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
@x1)))
:qid well-founded-ordering-on-nat))
:named well-founded-ordering-on-nat))
;;;;;;;;;;;;;;;;unit typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Tm_unit
Prims.unit)
:named unit_typing))
;;;;;;;;;;;;;;;;unit inversion
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.unit)
(= @x1
Tm_unit))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.unit))
:qid unit_inversion))
:named unit_inversion))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (HasType Prims.T@tok
Prims.trivial)
:named typing_tok_Prims.T@tok))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Prims.unit
Prims.eqtype)
:named typing_Prims.unit))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.subtype_of @x0
@x1)
Prims.logical))
 

:pattern ((Prims.subtype_of @x0
@x1))
:qid typing_Prims.subtype_of))

:named typing_Prims.subtype_of))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,5-117,11); use=Prims.fst(117,5-117,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.squash @x0)
Tm_type))
 

:pattern ((Prims.squash @x0))
:qid typing_Prims.squash))

:named typing_Prims.squash))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,4-315,14); use=Prims.fst(315,4-315,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.pure_post_ @x0
@x1)
Tm_type))
 

:pattern ((Prims.pure_post_ @x0
@x1))
:qid typing_Prims.pure_post_))

:named typing_Prims.pure_post_))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pure_post; Namespace Prims
(assert (! 
;; def=Prims.fst(316,4-316,13); use=Prims.fst(316,4-316,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.pure_post @x0)
Tm_type))
 

:pattern ((Prims.pure_post @x0))
:qid typing_Prims.pure_post))

:named typing_Prims.pure_post))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pow2; Namespace Prims
(assert (! 
;; def=Prims.fst(708,8-708,12); use=Prims.fst(708,8-708,12)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.nat)
(HasType (Prims.pow2 @x0)
Prims.pos))
 

:pattern ((Prims.pow2 @x0))
:qid typing_Prims.pow2))

:named typing_Prims.pow2))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (HasType Prims.pos
Tm_type)
:named typing_Prims.pos))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Prims.nat
Tm_type)
:named typing_Prims.nat))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (HasType Prims.logical
Tm_type)
:named typing_Prims.logical))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (HasType Prims.l_True
Prims.logical)
:named typing_Prims.l_True))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (HasType Prims.int
Prims.eqtype)
:named typing_Prims.int))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.hasEq; Namespace Prims
(assert (! 
;; def=Prims.fst(69,5-69,10); use=Prims.fst(69,5-69,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.hasEq @x0)
Tm_type))
 

:pattern ((Prims.hasEq @x0))
:qid typing_Prims.hasEq))

:named typing_Prims.hasEq))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.guard_free; Namespace Prims
(assert (! 
;; def=Prims.fst(346,5-346,15); use=Prims.fst(346,5-346,15)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.guard_free @x0)
Tm_type))
 

:pattern ((Prims.guard_free @x0))
:qid typing_Prims.guard_free))

:named typing_Prims.guard_free))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Prims.eqtype
Tm_type)
:named typing_Prims.eqtype))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (HasType Prims.bool
Prims.eqtype)
:named typing_Prims.bool))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Base.consumed_length; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(40,4-40,19); use=MiniParse.Spec.Base.fst(40,4-40,19)
(forall ((@x0 Term))
 (! (implies (HasType @x0
MiniParse.Spec.Base.bytes)
(HasType (MiniParse.Spec.Base.consumed_length @x0)
Tm_type))
 

:pattern ((MiniParse.Spec.Base.consumed_length @x0))
:qid typing_MiniParse.Spec.Base.consumed_length))

:named typing_MiniParse.Spec.Base.consumed_length))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Base.bytes; Namespace MiniParse.Spec.Base
(assert (! (HasType MiniParse.Spec.Base.bytes
Tm_type)
:named typing_MiniParse.Spec.Base.bytes))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Base.byte; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(23,5-23,9); use=MiniParse.Spec.Base.fst(23,5-23,9)
(forall ((@u0 Dummy_sort))
 (! (HasType (MiniParse.Spec.Base.byte @u0)
Prims.eqtype)
 

:pattern ((MiniParse.Spec.Base.byte @u0))
:qid typing_MiniParse.Spec.Base.byte))

:named typing_MiniParse.Spec.Base.byte))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt8.v; Namespace FStar.UInt8
(assert (! 
;; def=FStar.UInt8.fsti(54,4-54,5); use=FStar.UInt8.fsti(54,4-54,5)
(forall ((@x0 Term))
 (! (implies (HasType @x0
(FStar.UInt8.t Dummy_value))
(HasType (FStar.UInt8.v @x0)
(FStar.UInt.uint_t (BoxInt 8))))
 

:pattern ((FStar.UInt8.v @x0))
:qid typing_FStar.UInt8.v))

:named typing_FStar.UInt8.v))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt8.uint_to_t; Namespace FStar.UInt8
(assert (! 
;; def=FStar.UInt8.fsti(58,4-58,13); use=FStar.UInt8.fsti(58,4-58,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
(FStar.UInt.uint_t (BoxInt 8)))
(HasType (FStar.UInt8.uint_to_t @x0)
(Tm_refine_25c72d704900d626b30894312c325451 @x0)))
 

:pattern ((FStar.UInt8.uint_to_t @x0))
:qid typing_FStar.UInt8.uint_to_t))

:named typing_FStar.UInt8.uint_to_t))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt8.t; Namespace FStar.UInt8
(assert (! 
;; def=FStar.UInt8.fsti(50,8-50,9); use=FStar.UInt8.fsti(50,8-50,9)
(forall ((@u0 Dummy_sort))
 (! (HasType (FStar.UInt8.t @u0)
Prims.eqtype)
 

:pattern ((FStar.UInt8.t @u0))
:qid typing_FStar.UInt8.t))

:named typing_FStar.UInt8.t))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.uint_t; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(54,5-54,11); use=FStar.UInt.fsti(54,5-54,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.nat)
(HasType (FStar.UInt.uint_t @x0)
Tm_type))
 

:pattern ((FStar.UInt.uint_t @x0))
:qid typing_FStar.UInt.uint_t))

:named typing_FStar.UInt.uint_t))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.size; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(50,4-50,8); use=FStar.UInt.fsti(50,4-50,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.int)
(HasType @x1
Prims.nat))
(HasType (FStar.UInt.size @x0
@x1)
Tm_type))
 

:pattern ((FStar.UInt.size @x0
@x1))
:qid typing_FStar.UInt.size))

:named typing_FStar.UInt.size))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.min_int; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(47,4-47,11); use=FStar.UInt.fsti(47,4-47,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.nat)
(HasType (FStar.UInt.min_int @x0)
Prims.int))
 

:pattern ((FStar.UInt.min_int @x0))
:qid typing_FStar.UInt.min_int))

:named typing_FStar.UInt.min_int))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.max_int; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(46,4-46,11); use=FStar.UInt.fsti(46,4-46,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.nat)
(HasType (FStar.UInt.max_int @x0)
Prims.int))
 

:pattern ((FStar.UInt.max_int @x0))
:qid typing_FStar.UInt.max_int))

:named typing_FStar.UInt.max_int))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.fits; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(49,4-49,8); use=FStar.UInt.fsti(49,4-49,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.int)
(HasType @x1
Prims.nat))
(HasType (FStar.UInt.fits @x0
@x1)
Prims.bool))
 

:pattern ((FStar.UInt.fits @x0
@x1))
:qid typing_FStar.UInt.fits))

:named typing_FStar.UInt.fits))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Seq.Base.slice; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(64,4-64,9); use=FStar.Seq.Base.fsti(64,4-64,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
Prims.nat)
(HasType @x3
(Tm_refine_81407705a0828c2c1b1976675443f647 @x2
@x0
@x1)))
(HasType (FStar.Seq.Base.slice @x0
@x1
@x2
@x3)
(FStar.Seq.Base.seq @x0)))
 

:pattern ((FStar.Seq.Base.slice @x0
@x1
@x2
@x3))
:qid typing_FStar.Seq.Base.slice))

:named typing_FStar.Seq.Base.slice))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Seq.Base.seq; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(23,8-23,11); use=FStar.Seq.Base.fsti(23,8-23,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Seq.Base.seq @x0)
Tm_type))
 

:pattern ((FStar.Seq.Base.seq @x0))
:qid typing_FStar.Seq.Base.seq))

:named typing_FStar.Seq.Base.seq))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Seq.Base.length; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(26,4-26,10); use=FStar.Seq.Base.fsti(26,4-26,10)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0)))
(HasType (FStar.Seq.Base.length @x0
@x1)
Prims.nat))
 

:pattern ((FStar.Seq.Base.length @x0
@x1))
:qid typing_FStar.Seq.Base.length))

:named typing_FStar.Seq.Base.length))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Seq.Base.empty; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(46,4-46,9); use=FStar.Seq.Base.fsti(46,4-46,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Seq.Base.empty @x0)
(Tm_refine_b913a3f691ca99086652e0a655e72f17 @x0)))
 

:pattern ((FStar.Seq.Base.empty @x0))
:qid typing_FStar.Seq.Base.empty))

:named typing_FStar.Seq.Base.empty))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Pervasives.Native.option @x0)))
(HasType (FStar.Pervasives.Native.uu___is_Some @x0
@x1)
Prims.bool))
 

:pattern ((FStar.Pervasives.Native.uu___is_Some @x0
@x1))
:qid typing_FStar.Pervasives.Native.uu___is_Some))

:named typing_FStar.Pervasives.Native.uu___is_Some))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_None; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Pervasives.Native.option @x0)))
(HasType (FStar.Pervasives.Native.uu___is_None @x0
@x1)
Prims.bool))
 

:pattern ((FStar.Pervasives.Native.uu___is_None @x0
@x1))
:qid typing_FStar.Pervasives.Native.uu___is_None))

:named typing_FStar.Pervasives.Native.uu___is_None))
;;;;;;;;;;;;;;;;True interpretation
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (Valid Prims.l_True)
:named true_interp))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name Prims.pow2; Namespace Prims
(assert (! 
;; def=Prims.fst(708,8-708,12); use=Prims.fst(708,8-708,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasType @x1
Prims.nat)
(HasType (Prims.pow2.fuel_instrumented @u0
@x1)
Prims.pos))
 

:pattern ((Prims.pow2.fuel_instrumented @u0
@x1))
:qid token_correspondence_Prims.pow2.fuel_instrumented))

:named token_correspondence_Prims.pow2.fuel_instrumented))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT FStar.Pervasives.Native.tuple2@tok
@x0)
@x1)
(FStar.Pervasives.Native.tuple2 @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.Native.tuple2@tok
@x0)
@x1))

:pattern ((FStar.Pervasives.Native.tuple2 @x0
@x1))
:qid token_correspondence_FStar.Pervasives.Native.tuple2@tok))

:named token_correspondence_FStar.Pervasives.Native.tuple2@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@x0 Term))
 (! (= (ApplyTT FStar.Pervasives.Native.option@tok
@x0)
(FStar.Pervasives.Native.option @x0))
 

:pattern ((ApplyTT FStar.Pervasives.Native.option@tok
@x0))

:pattern ((FStar.Pervasives.Native.option @x0))
:qid token_correspondence_FStar.Pervasives.Native.option@tok))

:named token_correspondence_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Pervasives.Native.Some @x1
@x2))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3)))
:qid subterm_ordering_FStar.Pervasives.Native.Some))

:named subterm_ordering_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x5
@x6))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x5
@x6)))
:qid subterm_ordering_FStar.Pervasives.Native.Mktuple2))

:named subterm_ordering_FStar.Pervasives.Native.Mktuple2))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name MiniParse.Spec.Base.consumed_length; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(40,45-40,76); use=MiniParse.Spec.Base.fst(40,45-40,76)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_f1ef48729dd48b5741a77671cc117cd5 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_f1ef48729dd48b5741a77671cc117cd5 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_f1ef48729dd48b5741a77671cc117cd5))

:named refinement_kinding_Tm_refine_f1ef48729dd48b5741a77671cc117cd5))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (HasType Tm_refine_f1ecc6ab6882a651504f328937700647
Tm_type)
:named refinement_kinding_Tm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt.uint_t; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(54,22-54,37); use=FStar.UInt.fsti(54,22-54,37)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_f13070840248fced9d9d60d77bdae3ec @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_f13070840248fced9d9d60d77bdae3ec @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_f13070840248fced9d9d60d77bdae3ec))

:named refinement_kinding_Tm_refine_f13070840248fced9d9d60d77bdae3ec))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! (HasType Tm_refine_da3062322c9bea8d5b2058386775b91a
Tm_type)
:named refinement_kinding_Tm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_slice; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(158,54-158,84); use=FStar.Seq.Base.fsti(158,54-158,84)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_d3d07693cd71377864ef84dc97d10ec1 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_d3d07693cd71377864ef84dc97d10ec1 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_d3d07693cd71377864ef84dc97d10ec1))

:named refinement_kinding_Tm_refine_d3d07693cd71377864ef84dc97d10ec1))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Seq.Base.empty; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(46,26-46,49); use=FStar.Seq.Base.fsti(46,26-46,49)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_b913a3f691ca99086652e0a655e72f17 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_b913a3f691ca99086652e0a655e72f17 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_b913a3f691ca99086652e0a655e72f17))

:named refinement_kinding_Tm_refine_b913a3f691ca99086652e0a655e72f17))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Seq.Base.eq_i; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(171,5-171,26); use=FStar.Seq.Base.fsti(171,5-171,26)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_b361ba8089a6e963921008d537e799a1 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_b361ba8089a6e963921008d537e799a1 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_b361ba8089a6e963921008d537e799a1))

:named refinement_kinding_Tm_refine_b361ba8089a6e963921008d537e799a1))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt8.div; Namespace FStar.UInt8
(assert (! (HasType Tm_refine_a8cb57fcf32c2764d2e39fc97ecb3aa0
Tm_type)
:named refinement_kinding_Tm_refine_a8cb57fcf32c2764d2e39fc97ecb3aa0))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt8.one; Namespace FStar.UInt8
(assert (! (HasType Tm_refine_9a778967dadeb1d9cdc158a156c04472
Tm_type)
:named refinement_kinding_Tm_refine_9a778967dadeb1d9cdc158a156c04472))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Prims.fst(315,31-315,40)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))

:named refinement_kinding_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Seq.Base.slice; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=FStar.Seq.Base.fsti(64,43-64,73)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_81407705a0828c2c1b1976675443f647 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_81407705a0828c2c1b1976675443f647 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_81407705a0828c2c1b1976675443f647))

:named refinement_kinding_Tm_refine_81407705a0828c2c1b1976675443f647))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (HasType Tm_refine_774ba3f728d91ead8ef40be66c9802e5
Tm_type)
:named refinement_kinding_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf
Tm_type)
:named refinement_kinding_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt8.zero; Namespace FStar.UInt8
(assert (! (HasType Tm_refine_70356e30ad97b892992d5e77127e234b
Tm_type)
:named refinement_kinding_Tm_refine_70356e30ad97b892992d5e77127e234b))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Tm_refine_542f9d4f129664613f2483a6c88bc7c2
Tm_type)
:named refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Tm_refine_414d0a9f578ab0048252f8c8f552b99f
Tm_type)
:named refinement_kinding_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,32-117,42); use=Prims.fst(117,32-117,42)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))

:named refinement_kinding_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt8.uint_to_t; Namespace FStar.UInt8
(assert (! 
;; def=FStar.UInt8.fsti(58,34-58,35); use=FStar.UInt8.fsti(58,34-58,35)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_25c72d704900d626b30894312c325451 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_25c72d704900d626b30894312c325451 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_25c72d704900d626b30894312c325451))

:named refinement_kinding_Tm_refine_25c72d704900d626b30894312c325451))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Seq.Properties.slice_slice; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(625,2-625,40); use=FStar.Seq.Properties.fsti(625,2-625,40)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_1ba8fd8bb363097813064c67740b2de5 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_1ba8fd8bb363097813064c67740b2de5 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_1ba8fd8bb363097813064c67740b2de5))

:named refinement_kinding_Tm_refine_1ba8fd8bb363097813064c67740b2de5))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Seq.Properties.createL_post; Namespace FStar.Seq.Properties
(assert (! (HasType Tm_refine_1780a0fddfda88c43d203b562c6d3f5b
Tm_type)
:named refinement_kinding_Tm_refine_1780a0fddfda88c43d203b562c6d3f5b))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (HasType Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f
Tm_type)
:named refinement_kinding_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name MiniParse.Spec.Base.consumed_length; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(40,45-40,76); use=MiniParse.Spec.Base.fst(40,45-40,76)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_f1ef48729dd48b5741a77671cc117cd5 @x2))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Base.fst(40,55-40,72)
(<= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x2)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_f1ef48729dd48b5741a77671cc117cd5 @x2)))
:qid refinement_interpretation_Tm_refine_f1ef48729dd48b5741a77671cc117cd5))

:named refinement_interpretation_Tm_refine_f1ef48729dd48b5741a77671cc117cd5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(772,26-772,42); use=FStar.Pervasives.fsti(772,26-772,42)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_f1ecc6ab6882a651504f328937700647)
false)
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_f1ecc6ab6882a651504f328937700647))
:qid refinement_interpretation_Tm_refine_f1ecc6ab6882a651504f328937700647))

:named refinement_interpretation_Tm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt.uint_t; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(54,22-54,37); use=FStar.UInt.fsti(54,22-54,37)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_f13070840248fced9d9d60d77bdae3ec @x2))
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.UInt.fsti(54,28-54,36)
(Valid 
;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.UInt.fsti(54,28-54,36)
(FStar.UInt.size @x1
@x2)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_f13070840248fced9d9d60d77bdae3ec @x2)))
:qid refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec))

:named refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(533,7-533,12); use=FStar.List.Tot.Base.fst(533,7-533,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_da3062322c9bea8d5b2058386775b91a)
(HasTypeFuel @u0
@x1
Tm_type))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_da3062322c9bea8d5b2058386775b91a))
:qid refinement_interpretation_Tm_refine_da3062322c9bea8d5b2058386775b91a))

:named refinement_interpretation_Tm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_slice; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(158,54-158,84); use=FStar.Seq.Base.fsti(158,54-158,84)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_d3d07693cd71377864ef84dc97d10ec1 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=FStar.Seq.Base.fsti(158,60-158,66); use=FStar.Seq.Base.fsti(158,60-158,66)
(<= (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x1))


;; def=FStar.Seq.Base.fsti(158,70-158,83); use=FStar.Seq.Base.fsti(158,70-158,83)
(<= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (FStar.Seq.Base.length @x3
@x4)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_d3d07693cd71377864ef84dc97d10ec1 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_d3d07693cd71377864ef84dc97d10ec1))

:named refinement_interpretation_Tm_refine_d3d07693cd71377864ef84dc97d10ec1))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Seq.Base.empty; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(46,26-46,49); use=FStar.Seq.Base.fsti(46,26-46,49)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_b913a3f691ca99086652e0a655e72f17 @x2))
(and (HasTypeFuel @u0
@x1
(FStar.Seq.Base.seq @x2))

;; def=FStar.Seq.Base.fsti(46,37-46,47); use=FStar.Seq.Base.fsti(46,37-46,47)
(= (FStar.Seq.Base.length @x2
@x1)
(BoxInt 0))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_b913a3f691ca99086652e0a655e72f17 @x2)))
:qid refinement_interpretation_Tm_refine_b913a3f691ca99086652e0a655e72f17))

:named refinement_interpretation_Tm_refine_b913a3f691ca99086652e0a655e72f17))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Seq.Base.eq_i; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(171,5-171,26); use=FStar.Seq.Base.fsti(171,5-171,26)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_b361ba8089a6e963921008d537e799a1 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=FStar.Seq.Base.fsti(171,11-171,25); use=FStar.Seq.Base.fsti(171,11-171,25)
(<= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (FStar.Seq.Base.length @x2
@x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_b361ba8089a6e963921008d537e799a1 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_b361ba8089a6e963921008d537e799a1))

:named refinement_interpretation_Tm_refine_b361ba8089a6e963921008d537e799a1))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt8.div; Namespace FStar.UInt8
(assert (! 
;; def=FStar.UInt8.fsti(168,14-168,29); use=FStar.UInt8.fsti(168,14-168,29)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_a8cb57fcf32c2764d2e39fc97ecb3aa0)
(and (HasTypeFuel @u0
@x1
(FStar.UInt8.t Dummy_value))

;; def=FStar.UInt8.fsti(168,19-168,27); use=FStar.UInt8.fsti(168,19-168,27)
(not (= (FStar.UInt8.v @x1)
(BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_a8cb57fcf32c2764d2e39fc97ecb3aa0))
:qid refinement_interpretation_Tm_refine_a8cb57fcf32c2764d2e39fc97ecb3aa0))

:named refinement_interpretation_Tm_refine_a8cb57fcf32c2764d2e39fc97ecb3aa0))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt8.one; Namespace FStar.UInt8
(assert (! 
;; def=FStar.UInt8.fsti(80,10-80,22); use=FStar.UInt8.fsti(80,10-80,22)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_9a778967dadeb1d9cdc158a156c04472)
(and (HasTypeFuel @u0
@x1
(FStar.UInt8.t Dummy_value))

;; def=FStar.UInt8.fsti(80,14-80,21); use=FStar.UInt8.fsti(80,14-80,21)
(= (FStar.UInt8.v @x1)
(BoxInt 1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_9a778967dadeb1d9cdc158a156c04472))
:qid refinement_interpretation_Tm_refine_9a778967dadeb1d9cdc158a156c04472))

:named refinement_interpretation_Tm_refine_9a778967dadeb1d9cdc158a156c04472))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Prims.fst(315,31-315,40)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x2
@x3))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=Prims.fst(315,18-315,21); use=Prims.fst(315,36-315,39)
(Valid 
;; def=Prims.fst(315,18-315,21); use=Prims.fst(315,36-315,39)
@x3
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))

:named refinement_interpretation_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Seq.Base.slice; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=FStar.Seq.Base.fsti(64,43-64,73)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_81407705a0828c2c1b1976675443f647 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.nat)
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x2
@x1))
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x1
(FStar.Seq.Base.length @x3
@x4)))))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_81407705a0828c2c1b1976675443f647 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_81407705a0828c2c1b1976675443f647))

:named refinement_interpretation_Tm_refine_81407705a0828c2c1b1976675443f647))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! 
;; def=Prims.fst(683,11-683,24); use=Prims.fst(683,11-683,24)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_774ba3f728d91ead8ef40be66c9802e5)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(683,18-683,23); use=Prims.fst(683,18-683,23)
(> (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
:qid refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))

:named refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! 
;; def=Prims.fst(304,12-304,41); use=Prims.fst(304,12-304,41)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf)
(and (HasTypeFuel @u0
@x1
Tm_type)

;; def=Prims.fst(304,21-304,40); use=Prims.fst(304,21-304,40)
(Valid 
;; def=Prims.fst(304,21-304,40); use=Prims.fst(304,21-304,40)
(Prims.subtype_of @x1
Prims.unit)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
:qid refinement_interpretation_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))

:named refinement_interpretation_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt8.zero; Namespace FStar.UInt8
(assert (! 
;; def=FStar.UInt8.fsti(78,11-78,23); use=FStar.UInt8.fsti(78,11-78,23)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_70356e30ad97b892992d5e77127e234b)
(and (HasTypeFuel @u0
@x1
(FStar.UInt8.t Dummy_value))

;; def=FStar.UInt8.fsti(78,15-78,22); use=FStar.UInt8.fsti(78,15-78,22)
(= (FStar.UInt8.v @x1)
(BoxInt 0))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_70356e30ad97b892992d5e77127e234b))
:qid refinement_interpretation_Tm_refine_70356e30ad97b892992d5e77127e234b))

:named refinement_interpretation_Tm_refine_70356e30ad97b892992d5e77127e234b))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! 
;; def=Prims.fst(680,11-680,25); use=Prims.fst(680,11-680,25)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_542f9d4f129664613f2483a6c88bc7c2)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(680,18-680,24); use=Prims.fst(680,18-680,24)
(>= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
:qid refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))

:named refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! 
;; def=Prims.fst(73,14-73,31); use=Prims.fst(73,14-73,31)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_414d0a9f578ab0048252f8c8f552b99f)
(and (HasTypeFuel @u0
@x1
Tm_type)

;; def=Prims.fst(73,23-73,30); use=Prims.fst(73,23-73,30)
(Valid 
;; def=Prims.fst(73,23-73,30); use=Prims.fst(73,23-73,30)
(Prims.hasEq @x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
:qid refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))

:named refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,32-117,42); use=Prims.fst(117,32-117,42)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(117,13-117,14); use=Prims.fst(117,40-117,41)
(Valid 
;; def=Prims.fst(117,13-117,14); use=Prims.fst(117,40-117,41)
@x2
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x2)))
:qid refinement_interpretation_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))

:named refinement_interpretation_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt8.uint_to_t; Namespace FStar.UInt8
(assert (! 
;; def=FStar.UInt8.fsti(58,34-58,35); use=FStar.UInt8.fsti(58,34-58,35)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_25c72d704900d626b30894312c325451 @x2))
(and (HasTypeFuel @u0
@x1
(FStar.UInt8.t Dummy_value))

;; def=FStar.UInt8.fsti(60,21-60,28); use=FStar.UInt8.fsti(60,21-60,28)
(= (FStar.UInt8.v @x1)
@x2)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_25c72d704900d626b30894312c325451 @x2)))
:qid refinement_interpretation_Tm_refine_25c72d704900d626b30894312c325451))

:named refinement_interpretation_Tm_refine_25c72d704900d626b30894312c325451))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Seq.Properties.slice_slice; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(625,2-625,40); use=FStar.Seq.Properties.fsti(625,2-625,40)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_1ba8fd8bb363097813064c67740b2de5 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=FStar.Seq.Properties.fsti(625,12-625,20); use=FStar.Seq.Properties.fsti(625,12-625,20)
(<= (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x1))


;; def=FStar.Seq.Properties.fsti(625,24-625,37); use=FStar.Seq.Properties.fsti(625,24-625,37)
(<= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (Prims.op_Subtraction @x3
@x4)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_1ba8fd8bb363097813064c67740b2de5 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_1ba8fd8bb363097813064c67740b2de5))

:named refinement_interpretation_Tm_refine_1ba8fd8bb363097813064c67740b2de5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Seq.Properties.createL_post; Namespace FStar.Seq.Properties
(assert (! 
;; def=Prims.fst(680,11-680,25); use=Prims.fst(680,11-680,25)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_1780a0fddfda88c43d203b562c6d3f5b)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (Prims.op_GreaterThanOrEqual @x1
(BoxInt 0))
(BoxBool true))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_1780a0fddfda88c43d203b562c6d3f5b))
:qid refinement_interpretation_Tm_refine_1780a0fddfda88c43d203b562c6d3f5b))

:named refinement_interpretation_Tm_refine_1780a0fddfda88c43d203b562c6d3f5b))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! 
;; def=Prims.fst(686,15-686,29); use=Prims.fst(686,15-686,29)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(686,22-686,28); use=Prims.fst(686,22-686,28)
(not (= @x1
(BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
:qid refinement_interpretation_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))

:named refinement_interpretation_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.Some_v (FStar.Pervasives.Native.Some @x0
@x1))
@x1)
 

:pattern ((FStar.Pervasives.Native.Some @x0
@x1))
:qid projection_inverse_FStar.Pervasives.Native.Some_v))

:named projection_inverse_FStar.Pervasives.Native.Some_v))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.Some_a (FStar.Pervasives.Native.Some @x0
@x1))
@x0)
 

:pattern ((FStar.Pervasives.Native.Some @x0
@x1))
:qid projection_inverse_FStar.Pervasives.Native.Some_a))

:named projection_inverse_FStar.Pervasives.Native.Some_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@x0 Term))
 (! (= (FStar.Pervasives.Native.None_a (FStar.Pervasives.Native.None @x0))
@x0)
 

:pattern ((FStar.Pervasives.Native.None @x0))
:qid projection_inverse_FStar.Pervasives.Native.None_a))

:named projection_inverse_FStar.Pervasives.Native.None_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.Mktuple2__b (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
@x1)
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple2__b))

:named projection_inverse_FStar.Pervasives.Native.Mktuple2__b))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.Mktuple2__a (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
@x0)
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple2__a))

:named projection_inverse_FStar.Pervasives.Native.Mktuple2__a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.Mktuple2__2 (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
@x3)
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple2__2))

:named projection_inverse_FStar.Pervasives.Native.Mktuple2__2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.Mktuple2__1 (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
@x2)
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple2__1))

:named projection_inverse_FStar.Pervasives.Native.Mktuple2__1))
;;; Fact-ids: Name Prims.op_Subtraction; Namespace Prims
(assert (! 
;; def=Prims.fst(546,4-546,18); use=Prims.fst(546,4-546,18)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_Subtraction @x0
@x1)
(BoxInt (- (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_Subtraction @x0
@x1))
:qid primitive_Prims.op_Subtraction))

:named primitive_Prims.op_Subtraction))
;;; Fact-ids: Name Prims.op_Multiply; Namespace Prims
(assert (! 
;; def=Prims.fst(540,4-540,15); use=Prims.fst(540,4-540,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_Multiply @x0
@x1)
(BoxInt (* (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_Multiply @x0
@x1))
:qid primitive_Prims.op_Multiply))

:named primitive_Prims.op_Multiply))
;;; Fact-ids: Name Prims.op_LessThanOrEqual; Namespace Prims
(assert (! 
;; def=Prims.fst(564,4-564,22); use=Prims.fst(564,4-564,22)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_LessThanOrEqual @x0
@x1)
(BoxBool (<= (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_LessThanOrEqual @x0
@x1))
:qid primitive_Prims.op_LessThanOrEqual))

:named primitive_Prims.op_LessThanOrEqual))
;;; Fact-ids: Name Prims.op_LessThan; Namespace Prims
(assert (! 
;; def=Prims.fst(582,4-582,15); use=Prims.fst(582,4-582,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_LessThan @x0
@x1)
(BoxBool (< (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_LessThan @x0
@x1))
:qid primitive_Prims.op_LessThan))

:named primitive_Prims.op_LessThan))
;;; Fact-ids: Name Prims.op_GreaterThanOrEqual; Namespace Prims
(assert (! 
;; def=Prims.fst(576,4-576,25); use=Prims.fst(576,4-576,25)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_GreaterThanOrEqual @x0
@x1)
(BoxBool (>= (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_GreaterThanOrEqual @x0
@x1))
:qid primitive_Prims.op_GreaterThanOrEqual))

:named primitive_Prims.op_GreaterThanOrEqual))
;;; Fact-ids: Name Prims.op_AmpAmp; Namespace Prims
(assert (! 
;; def=Prims.fst(522,4-522,13); use=Prims.fst(522,4-522,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_AmpAmp @x0
@x1)
(BoxBool (and (BoxBool_proj_0 @x0)
(BoxBool_proj_0 @x1))))
 

:pattern ((Prims.op_AmpAmp @x0
@x1))
:qid primitive_Prims.op_AmpAmp))

:named primitive_Prims.op_AmpAmp))
;;; Fact-ids: Name Prims.op_Addition; Namespace Prims
(assert (! 
;; def=Prims.fst(552,4-552,15); use=Prims.fst(552,4-552,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_Addition @x0
@x1)
(BoxInt (+ (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_Addition @x0
@x1))
:qid primitive_Prims.op_Addition))

:named primitive_Prims.op_Addition))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (is-Tm_arrow (PreType FStar.Pervasives.Native.tuple2@tok))
:named pre_kinding_FStar.Pervasives.Native.tuple2@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (is-Tm_arrow (PreType FStar.Pervasives.Native.option@tok))
:named pre_kinding_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;Lemma: FStar.UInt8.vu_inv
;;; Fact-ids: Name FStar.UInt8.vu_inv; Namespace FStar.UInt8
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
(FStar.UInt.uint_t (BoxInt 8)))

;; def=FStar.UInt8.fsti(69,11-69,33); use=FStar.UInt8.fsti(69,11-69,33)
(= (FStar.UInt8.v (FStar.UInt8.uint_to_t @x0))
@x0)
)
 

:pattern ((FStar.UInt8.uint_to_t @x0))
:qid lemma_FStar.UInt8.vu_inv))
:named lemma_FStar.UInt8.vu_inv))
;;;;;;;;;;;;;;;;Lemma: FStar.UInt8.uv_inv
;;; Fact-ids: Name FStar.UInt8.uv_inv; Namespace FStar.UInt8
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
(FStar.UInt8.t Dummy_value))

;; def=FStar.UInt8.fsti(64,11-64,33); use=FStar.UInt8.fsti(64,11-64,33)
(= (FStar.UInt8.uint_to_t (FStar.UInt8.v @x0))
@x0)
)
 

:pattern ((FStar.UInt8.v @x0))
:qid lemma_FStar.UInt8.uv_inv))
:named lemma_FStar.UInt8.uv_inv))
;;;;;;;;;;;;;;;;Lemma: FStar.UInt.pow2_values
;;; Fact-ids: Name FStar.UInt.pow2_values; Namespace FStar.UInt
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.nat)
(let ((@lb1 @x0))
(ite (= @lb1
(BoxInt 0))

;; def=FStar.UInt.fsti(28,11-28,14); use=FStar.UInt.fsti(28,11-28,14)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 1))

(ite (= @lb1
(BoxInt 1))

;; def=FStar.UInt.fsti(29,11-29,14); use=FStar.UInt.fsti(29,11-29,14)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 2))

(ite (= @lb1
(BoxInt 8))

;; def=FStar.UInt.fsti(30,11-30,16); use=FStar.UInt.fsti(30,11-30,16)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 256))

(ite (= @lb1
(BoxInt 16))

;; def=FStar.UInt.fsti(31,11-31,18); use=FStar.UInt.fsti(31,11-31,18)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 65536))

(ite (= @lb1
(BoxInt 31))

;; def=FStar.UInt.fsti(32,11-32,23); use=FStar.UInt.fsti(32,11-32,23)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 2147483648))

(ite (= @lb1
(BoxInt 32))

;; def=FStar.UInt.fsti(33,11-33,23); use=FStar.UInt.fsti(33,11-33,23)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 4294967296))

(ite (= @lb1
(BoxInt 63))

;; def=FStar.UInt.fsti(34,11-34,32); use=FStar.UInt.fsti(34,11-34,32)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 9223372036854775808))

(ite (= @lb1
(BoxInt 64))

;; def=FStar.UInt.fsti(35,11-35,33); use=FStar.UInt.fsti(35,11-35,33)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 18446744073709551616))

(implies (= @lb1
(BoxInt 128))

;; def=FStar.UInt.fsti(36,12-36,49); use=FStar.UInt.fsti(36,12-36,49)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 340282366920938463463374607431768211456))
)))))))))))
 

:pattern ((Prims.pow2.fuel_instrumented ZFuel
@x0))
:qid lemma_FStar.UInt.pow2_values))
:named lemma_FStar.UInt.pow2_values))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Properties.slice_slice
;;; Fact-ids: Name FStar.Seq.Properties.slice_slice; Namespace FStar.Seq.Properties
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
Prims.nat)
(HasType @x3
(Tm_refine_d3d07693cd71377864ef84dc97d10ec1 @x2
@x0
@x1))
(HasType @x4
Prims.nat)
(HasType @x5
(Tm_refine_1ba8fd8bb363097813064c67740b2de5 @x4
@x3
@x2)))

;; def=FStar.Seq.Properties.fsti(628,11-628,71); use=FStar.Seq.Properties.fsti(628,11-628,71)
(= (FStar.Seq.Base.slice @x0
(FStar.Seq.Base.slice @x0
@x1
@x2
@x3)
@x4
@x5)
(FStar.Seq.Base.slice @x0
@x1
(Prims.op_Addition @x2
@x4)
(Prims.op_Addition @x2
@x5)))
)
 

:pattern ((FStar.Seq.Base.slice @x0
(FStar.Seq.Base.slice @x0
@x1
@x2
@x3)
@x4
@x5))
:qid lemma_FStar.Seq.Properties.slice_slice))
:named lemma_FStar.Seq.Properties.slice_slice))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Properties.slice_length
;;; Fact-ids: Name FStar.Seq.Properties.slice_length; Namespace FStar.Seq.Properties
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0)))

;; def=FStar.Seq.Properties.fsti(616,11-616,38); use=FStar.Seq.Properties.fsti(616,11-616,38)
(= (FStar.Seq.Base.slice @x0
@x1
(BoxInt 0)
(FStar.Seq.Base.length @x0
@x1))
@x1)
)
 

:pattern ((FStar.Seq.Base.slice @x0
@x1
(BoxInt 0)
(FStar.Seq.Base.length @x0
@x1)))
:qid lemma_FStar.Seq.Properties.slice_length))
:named lemma_FStar.Seq.Properties.slice_length))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Properties.slice_is_empty
;;; Fact-ids: Name FStar.Seq.Properties.slice_is_empty; Namespace FStar.Seq.Properties
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
(Tm_refine_b361ba8089a6e963921008d537e799a1 @x0
@x1)))

;; def=FStar.Seq.Properties.fsti(608,11-608,37); use=FStar.Seq.Properties.fsti(608,11-608,37)
(= (FStar.Seq.Base.slice @x0
@x1
@x2
@x2)
(FStar.Seq.Base.empty @x0))
)
 

:pattern ((FStar.Seq.Base.slice @x0
@x1
@x2
@x2))
:qid lemma_FStar.Seq.Properties.slice_is_empty))
:named lemma_FStar.Seq.Properties.slice_is_empty))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Base.lemma_len_slice
;;; Fact-ids: Name FStar.Seq.Base.lemma_len_slice; Namespace FStar.Seq.Base
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
Prims.nat)
(HasType @x3
(Tm_refine_81407705a0828c2c1b1976675443f647 @x2
@x0
@x1)))

;; def=FStar.Seq.Base.fsti(129,11-129,41); use=FStar.Seq.Base.fsti(129,11-129,41)
(= (FStar.Seq.Base.length @x0
(FStar.Seq.Base.slice @x0
@x1
@x2
@x3))
(Prims.op_Subtraction @x3
@x2))
)
 

:pattern ((FStar.Seq.Base.length @x0
(FStar.Seq.Base.slice @x0
@x1
@x2
@x3)))
:qid lemma_FStar.Seq.Base.lemma_len_slice))
:named lemma_FStar.Seq.Base.lemma_len_slice))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Base.hasEq_lemma
;;; Fact-ids: Name FStar.Seq.Base.hasEq_lemma; Namespace FStar.Seq.Base
(assert (! (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_type)

;; def=FStar.Seq.Base.fsti(163,43-163,52); use=FStar.Seq.Base.fsti(163,43-163,52)
(Valid 
;; def=FStar.Seq.Base.fsti(163,43-163,52); use=FStar.Seq.Base.fsti(163,43-163,52)
(Prims.hasEq @x0)
)
)

;; def=FStar.Seq.Base.fsti(163,63-163,78); use=FStar.Seq.Base.fsti(163,63-163,78)
(Valid 
;; def=FStar.Seq.Base.fsti(163,63-163,78); use=FStar.Seq.Base.fsti(163,63-163,78)
(Prims.hasEq (FStar.Seq.Base.seq @x0))
)
)
 

:pattern ((Prims.hasEq (FStar.Seq.Base.seq @x0)))
:qid lemma_FStar.Seq.Base.hasEq_lemma))
:named lemma_FStar.Seq.Base.hasEq_lemma))
;;;;;;;;;;;;;;;;Lemma: FStar.Pervasives.invertOption
;;; Fact-ids: Name FStar.Pervasives.invertOption; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)

;; def=FStar.Pervasives.fsti(727,37-727,79); use=FStar.Pervasives.fsti(727,37-727,79)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.Pervasives.Native.option @x0))

;; def=FStar.Pervasives.fsti(727,60-727,78); use=FStar.Pervasives.fsti(727,60-727,78)
(or 
;; def=FStar.Pervasives.fsti(727,60-727,67); use=FStar.Pervasives.fsti(727,60-727,67)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None @x0
@x1))


;; def=FStar.Pervasives.fsti(727,71-727,78); use=FStar.Pervasives.fsti(727,71-727,78)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x0
@x1))
)
)
 
;;no pats
:qid lemma_FStar.Pervasives.invertOption.1))
)
 

:pattern ((FStar.Pervasives.Native.option @x0))
:qid lemma_FStar.Pervasives.invertOption))
:named lemma_FStar.Pervasives.invertOption))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))

:named kinding_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (HasType Prims.trivial
Tm_type)
:named kinding_Prims.trivial@tok))
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (and (IsTotFun FStar.Pervasives.Native.tuple2@tok)

;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT FStar.Pervasives.Native.tuple2@tok
@x0))
 

:pattern ((ApplyTT FStar.Pervasives.Native.tuple2@tok
@x0))
:qid kinding_FStar.Pervasives.Native.tuple2@tok))


;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (FStar.Pervasives.Native.tuple2 @x0
@x1)
Tm_type))
 

:pattern ((FStar.Pervasives.Native.tuple2 @x0
@x1))
:qid kinding_FStar.Pervasives.Native.tuple2@tok.1))
)
:named kinding_FStar.Pervasives.Native.tuple2@tok))
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (and (IsTotFun FStar.Pervasives.Native.option@tok)

;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Pervasives.Native.option @x0)
Tm_type))
 

:pattern ((FStar.Pervasives.Native.option @x0))
:qid kinding_FStar.Pervasives.Native.option@tok))
)
:named kinding_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;int typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Int))
 (! (HasType (BoxInt @u0)
Prims.int)
 

:pattern ((BoxInt @u0))
:qid int_typing))
:named int_typing))
;;;;;;;;;;;;;;;;int inversion
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.int)
(is-BoxInt @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.int))
:qid int_inversion))
:named int_inversion))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f1ef48729dd48b5741a77671cc117cd5
;;; Fact-ids: Name MiniParse.Spec.Base.consumed_length; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(40,45-40,76); use=MiniParse.Spec.Base.fst(40,45-40,76)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_f1ef48729dd48b5741a77671cc117cd5 @x0)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_f1ef48729dd48b5741a77671cc117cd5 @x0))))
:qid haseqTm_refine_f1ef48729dd48b5741a77671cc117cd5))

:named haseqTm_refine_f1ef48729dd48b5741a77671cc117cd5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f1ecc6ab6882a651504f328937700647
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (iff (Valid (Prims.hasEq Tm_refine_f1ecc6ab6882a651504f328937700647))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f13070840248fced9d9d60d77bdae3ec
;;; Fact-ids: Name FStar.UInt.uint_t; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(54,22-54,37); use=FStar.UInt.fsti(54,22-54,37)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_f13070840248fced9d9d60d77bdae3ec @x0)))
(Valid (Prims.hasEq Prims.int)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_f13070840248fced9d9d60d77bdae3ec @x0))))
:qid haseqTm_refine_f13070840248fced9d9d60d77bdae3ec))

:named haseqTm_refine_f13070840248fced9d9d60d77bdae3ec))
;;;;;;;;;;;;;;;;haseq for Tm_refine_da3062322c9bea8d5b2058386775b91a
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! (iff (Valid (Prims.hasEq Tm_refine_da3062322c9bea8d5b2058386775b91a))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_d3d07693cd71377864ef84dc97d10ec1
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_slice; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(158,54-158,84); use=FStar.Seq.Base.fsti(158,54-158,84)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_d3d07693cd71377864ef84dc97d10ec1 @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_d3d07693cd71377864ef84dc97d10ec1 @x0
@x1
@x2))))
:qid haseqTm_refine_d3d07693cd71377864ef84dc97d10ec1))

:named haseqTm_refine_d3d07693cd71377864ef84dc97d10ec1))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b913a3f691ca99086652e0a655e72f17
;;; Fact-ids: Name FStar.Seq.Base.empty; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(46,26-46,49); use=FStar.Seq.Base.fsti(46,26-46,49)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_b913a3f691ca99086652e0a655e72f17 @x0)))
(Valid (Prims.hasEq (FStar.Seq.Base.seq @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_b913a3f691ca99086652e0a655e72f17 @x0))))
:qid haseqTm_refine_b913a3f691ca99086652e0a655e72f17))

:named haseqTm_refine_b913a3f691ca99086652e0a655e72f17))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b361ba8089a6e963921008d537e799a1
;;; Fact-ids: Name FStar.Seq.Base.eq_i; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(171,5-171,26); use=FStar.Seq.Base.fsti(171,5-171,26)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_b361ba8089a6e963921008d537e799a1 @x0
@x1)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_b361ba8089a6e963921008d537e799a1 @x0
@x1))))
:qid haseqTm_refine_b361ba8089a6e963921008d537e799a1))

:named haseqTm_refine_b361ba8089a6e963921008d537e799a1))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a8cb57fcf32c2764d2e39fc97ecb3aa0
;;; Fact-ids: Name FStar.UInt8.div; Namespace FStar.UInt8
(assert (! (iff (Valid (Prims.hasEq Tm_refine_a8cb57fcf32c2764d2e39fc97ecb3aa0))
(Valid (Prims.hasEq (FStar.UInt8.t Dummy_value))))
:named haseqTm_refine_a8cb57fcf32c2764d2e39fc97ecb3aa0))
;;;;;;;;;;;;;;;;haseq for Tm_refine_9a778967dadeb1d9cdc158a156c04472
;;; Fact-ids: Name FStar.UInt8.one; Namespace FStar.UInt8
(assert (! (iff (Valid (Prims.hasEq Tm_refine_9a778967dadeb1d9cdc158a156c04472))
(Valid (Prims.hasEq (FStar.UInt8.t Dummy_value))))
:named haseqTm_refine_9a778967dadeb1d9cdc158a156c04472))
;;;;;;;;;;;;;;;;haseq for Tm_refine_8d65e998a07dd53ec478e27017d9dba5
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Prims.fst(315,31-315,40)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1))))
:qid haseqTm_refine_8d65e998a07dd53ec478e27017d9dba5))

:named haseqTm_refine_8d65e998a07dd53ec478e27017d9dba5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_81407705a0828c2c1b1976675443f647
;;; Fact-ids: Name FStar.Seq.Base.slice; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=FStar.Seq.Base.fsti(64,43-64,73)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_81407705a0828c2c1b1976675443f647 @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_81407705a0828c2c1b1976675443f647 @x0
@x1
@x2))))
:qid haseqTm_refine_81407705a0828c2c1b1976675443f647))

:named haseqTm_refine_81407705a0828c2c1b1976675443f647))
;;;;;;;;;;;;;;;;haseq for Tm_refine_774ba3f728d91ead8ef40be66c9802e5
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;haseq for Tm_refine_70356e30ad97b892992d5e77127e234b
;;; Fact-ids: Name FStar.UInt8.zero; Namespace FStar.UInt8
(assert (! (iff (Valid (Prims.hasEq Tm_refine_70356e30ad97b892992d5e77127e234b))
(Valid (Prims.hasEq (FStar.UInt8.t Dummy_value))))
:named haseqTm_refine_70356e30ad97b892992d5e77127e234b))
;;;;;;;;;;;;;;;;haseq for Tm_refine_542f9d4f129664613f2483a6c88bc7c2
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;haseq for Tm_refine_414d0a9f578ab0048252f8c8f552b99f
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2de20c066034c13bf76e9c0b94f4806c
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,32-117,42); use=Prims.fst(117,32-117,42)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0))))
:qid haseqTm_refine_2de20c066034c13bf76e9c0b94f4806c))

:named haseqTm_refine_2de20c066034c13bf76e9c0b94f4806c))
;;;;;;;;;;;;;;;;haseq for Tm_refine_25c72d704900d626b30894312c325451
;;; Fact-ids: Name FStar.UInt8.uint_to_t; Namespace FStar.UInt8
(assert (! 
;; def=FStar.UInt8.fsti(58,34-58,35); use=FStar.UInt8.fsti(58,34-58,35)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_25c72d704900d626b30894312c325451 @x0)))
(Valid (Prims.hasEq (FStar.UInt8.t Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_25c72d704900d626b30894312c325451 @x0))))
:qid haseqTm_refine_25c72d704900d626b30894312c325451))

:named haseqTm_refine_25c72d704900d626b30894312c325451))
;;;;;;;;;;;;;;;;haseq for Tm_refine_1ba8fd8bb363097813064c67740b2de5
;;; Fact-ids: Name FStar.Seq.Properties.slice_slice; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(625,2-625,40); use=FStar.Seq.Properties.fsti(625,2-625,40)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_1ba8fd8bb363097813064c67740b2de5 @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_1ba8fd8bb363097813064c67740b2de5 @x0
@x1
@x2))))
:qid haseqTm_refine_1ba8fd8bb363097813064c67740b2de5))

:named haseqTm_refine_1ba8fd8bb363097813064c67740b2de5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_1780a0fddfda88c43d203b562c6d3f5b
;;; Fact-ids: Name FStar.Seq.Properties.createL_post; Namespace FStar.Seq.Properties
(assert (! (iff (Valid (Prims.hasEq Tm_refine_1780a0fddfda88c43d203b562c6d3f5b))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_1780a0fddfda88c43d203b562c6d3f5b))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Prims.unit
Prims.eqtype)
:named function_token_typing_Prims.unit))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (HasType Prims.pos
Tm_type)
:named function_token_typing_Prims.pos))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Prims.nat
Tm_type)
:named function_token_typing_Prims.nat))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (HasType Prims.logical
Tm_type)
:named function_token_typing_Prims.logical))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (HasType Prims.l_True
Prims.logical)
:named function_token_typing_Prims.l_True))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (HasType Prims.int
Prims.eqtype)
:named function_token_typing_Prims.int))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Prims.eqtype
Tm_type)
:named function_token_typing_Prims.eqtype))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (HasType Prims.bool
Prims.eqtype)
:named function_token_typing_Prims.bool))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name MiniParse.Spec.Base.bytes; Namespace MiniParse.Spec.Base
(assert (! (HasType MiniParse.Spec.Base.bytes
Tm_type)
:named function_token_typing_MiniParse.Spec.Base.bytes))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! 
;; def=Prims.fst(91,5-91,12); use=Prims.fst(91,5-91,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.trivial)
(is-Prims.T @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.trivial))
:qid fuel_guarded_inversion_Prims.trivial))

:named fuel_guarded_inversion_Prims.trivial))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 @x2
@x3))
(and (is-FStar.Pervasives.Native.Mktuple2 @x1)
(= @x2
(FStar.Pervasives.Native.Mktuple2__a @x1))
(= @x3
(FStar.Pervasives.Native.Mktuple2__b @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 @x2
@x3)))
:qid fuel_guarded_inversion_FStar.Pervasives.Native.tuple2))

:named fuel_guarded_inversion_FStar.Pervasives.Native.tuple2))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(FStar.Pervasives.Native.option @x2))
(or (and (is-FStar.Pervasives.Native.None @x1)
(= @x2
(FStar.Pervasives.Native.None_a @x1)))
(and (is-FStar.Pervasives.Native.Some @x1)
(= @x2
(FStar.Pervasives.Native.Some_a @x1)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(FStar.Pervasives.Native.option @x2)))
:qid fuel_guarded_inversion_FStar.Pervasives.Native.option))

:named fuel_guarded_inversion_FStar.Pervasives.Native.option))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (= 126
(Term_constr_id FStar.Pervasives.Native.tuple2@tok))
:named fresh_token_FStar.Pervasives.Native.tuple2@tok))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (= 102
(Term_constr_id FStar.Pervasives.Native.option@tok))
:named fresh_token_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: Prims.pow2
;;; Fact-ids: Name Prims.pow2; Namespace Prims
(assert (! 
;; def=Prims.fst(708,8-708,12); use=Prims.fst(708,8-708,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasType @x1
Prims.nat)
(= (Prims.pow2.fuel_instrumented (SFuel @u0)
@x1)
(let ((@lb2 @x1))
(ite (= @lb2
(BoxInt 0))
(BoxInt 1)
(Prims.op_Multiply (BoxInt 2)
(Prims.pow2.fuel_instrumented @u0
(Prims.op_Subtraction @x1
(BoxInt 1))))))))
 :weight 0


:pattern ((Prims.pow2.fuel_instrumented (SFuel @u0)
@x1))
:qid equation_with_fuel_Prims.pow2.fuel_instrumented))

:named equation_with_fuel_Prims.pow2.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for Prims.subtype_of
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (Prims.subtype_of @x0
@x1))

;; def=Prims.fst(291,31-291,60); use=Prims.fst(291,31-291,60)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x0)
(HasType @x2
@x1))
 
;;no pats
:qid equation_Prims.subtype_of.1))
)
 

:pattern ((Prims.subtype_of @x0
@x1))
:qid equation_Prims.subtype_of))

:named equation_Prims.subtype_of))
;;;;;;;;;;;;;;;;Equation for Prims.squash
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,5-117,11); use=Prims.fst(117,5-117,11)
(forall ((@x0 Term))
 (! (= (Prims.squash @x0)
(Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0))
 

:pattern ((Prims.squash @x0))
:qid equation_Prims.squash))

:named equation_Prims.squash))
;;;;;;;;;;;;;;;;Equation for Prims.pure_post'
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,4-315,14); use=Prims.fst(315,4-315,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.pure_post_ @x0
@x1)
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x1
@x0))
 

:pattern ((Prims.pure_post_ @x0
@x1))
:qid equation_Prims.pure_post_))

:named equation_Prims.pure_post_))
;;;;;;;;;;;;;;;;Equation for Prims.pure_post
;;; Fact-ids: Name Prims.pure_post; Namespace Prims
(assert (! 
;; def=Prims.fst(316,4-316,13); use=Prims.fst(316,4-316,13)
(forall ((@x0 Term))
 (! (= (Prims.pure_post @x0)
(Prims.pure_post_ @x0
Prims.l_True))
 

:pattern ((Prims.pure_post @x0))
:qid equation_Prims.pure_post))

:named equation_Prims.pure_post))
;;;;;;;;;;;;;;;;Equation for Prims.pos
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (= Prims.pos
Tm_refine_774ba3f728d91ead8ef40be66c9802e5)
:named equation_Prims.pos))
;;;;;;;;;;;;;;;;Equation for Prims.nat
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (= Prims.nat
Tm_refine_542f9d4f129664613f2483a6c88bc7c2)
:named equation_Prims.nat))
;;;;;;;;;;;;;;;;Equation for Prims.logical
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (= Prims.logical
Tm_type)
:named equation_Prims.logical))
;;;;;;;;;;;;;;;;Equation for Prims.l_True
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (= Prims.l_True
(Prims.squash Prims.trivial))
:named equation_Prims.l_True))
;;;;;;;;;;;;;;;;Equation for Prims.eqtype
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (= Prims.eqtype
Tm_refine_414d0a9f578ab0048252f8c8f552b99f)
:named equation_Prims.eqtype))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Base.consumed_length
;;; Fact-ids: Name MiniParse.Spec.Base.consumed_length; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(40,4-40,19); use=MiniParse.Spec.Base.fst(40,4-40,19)
(forall ((@x0 Term))
 (! (= (MiniParse.Spec.Base.consumed_length @x0)
(Tm_refine_f1ef48729dd48b5741a77671cc117cd5 @x0))
 

:pattern ((MiniParse.Spec.Base.consumed_length @x0))
:qid equation_MiniParse.Spec.Base.consumed_length))

:named equation_MiniParse.Spec.Base.consumed_length))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Base.bytes
;;; Fact-ids: Name MiniParse.Spec.Base.bytes; Namespace MiniParse.Spec.Base
(assert (! (= MiniParse.Spec.Base.bytes
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))
:named equation_MiniParse.Spec.Base.bytes))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Base.byte
;;; Fact-ids: Name MiniParse.Spec.Base.byte; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(23,5-23,9); use=MiniParse.Spec.Base.fst(23,5-23,9)
(forall ((@u0 Dummy_sort))
 (! (= 
;; def=MiniParse.Spec.Base.fst(23,5-23,9); use=MiniParse.Spec.Base.fst(23,5-23,9)
(MiniParse.Spec.Base.byte @u0)

(FStar.UInt8.t Dummy_value))
 

:pattern (
;; def=MiniParse.Spec.Base.fst(23,5-23,9); use=MiniParse.Spec.Base.fst(23,5-23,9)
(MiniParse.Spec.Base.byte @u0)
)
:qid equation_MiniParse.Spec.Base.byte))

:named equation_MiniParse.Spec.Base.byte))
;;;;;;;;;;;;;;;;Equation for FStar.UInt.uint_t
;;; Fact-ids: Name FStar.UInt.uint_t; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(54,5-54,11); use=FStar.UInt.fsti(54,5-54,11)
(forall ((@x0 Term))
 (! (= (FStar.UInt.uint_t @x0)
(Tm_refine_f13070840248fced9d9d60d77bdae3ec @x0))
 

:pattern ((FStar.UInt.uint_t @x0))
:qid equation_FStar.UInt.uint_t))

:named equation_FStar.UInt.uint_t))
;;;;;;;;;;;;;;;;Equation for FStar.UInt.size
;;; Fact-ids: Name FStar.UInt.size; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(50,4-50,8); use=FStar.UInt.fsti(50,4-50,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.UInt.size @x0
@x1)
(Prims.b2t (FStar.UInt.fits @x0
@x1)))
 

:pattern ((FStar.UInt.size @x0
@x1))
:qid equation_FStar.UInt.size))

:named equation_FStar.UInt.size))
;;;;;;;;;;;;;;;;Equation for FStar.UInt.min_int
;;; Fact-ids: Name FStar.UInt.min_int; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(47,4-47,11); use=FStar.UInt.fsti(47,4-47,11)
(forall ((@x0 Term))
 (! (= (FStar.UInt.min_int @x0)
(BoxInt 0))
 

:pattern ((FStar.UInt.min_int @x0))
:qid equation_FStar.UInt.min_int))

:named equation_FStar.UInt.min_int))
;;;;;;;;;;;;;;;;Equation for FStar.UInt.max_int
;;; Fact-ids: Name FStar.UInt.max_int; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(46,4-46,11); use=FStar.UInt.fsti(46,4-46,11)
(forall ((@x0 Term))
 (! (= (FStar.UInt.max_int @x0)
(Prims.op_Subtraction (Prims.pow2 @x0)
(BoxInt 1)))
 

:pattern ((FStar.UInt.max_int @x0))
:qid equation_FStar.UInt.max_int))

:named equation_FStar.UInt.max_int))
;;;;;;;;;;;;;;;;Equation for FStar.UInt.fits
;;; Fact-ids: Name FStar.UInt.fits; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(49,4-49,8); use=FStar.UInt.fsti(49,4-49,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.UInt.fits @x0
@x1)
(Prims.op_AmpAmp (Prims.op_LessThanOrEqual (FStar.UInt.min_int @x1)
@x0)
(Prims.op_LessThanOrEqual @x0
(FStar.UInt.max_int @x1))))
 

:pattern ((FStar.UInt.fits @x0
@x1))
:qid equation_FStar.UInt.fits))

:named equation_FStar.UInt.fits))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (= Prims.T@tok
Prims.T)
:named equality_tok_Prims.T@tok))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.uu___is_Some @x0
@x1)
(BoxBool (is-FStar.Pervasives.Native.Some @x1)))
 

:pattern ((FStar.Pervasives.Native.uu___is_Some @x0
@x1))
:qid disc_equation_FStar.Pervasives.Native.Some))

:named disc_equation_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_None; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.uu___is_None @x0
@x1)
(BoxBool (is-FStar.Pervasives.Native.None @x1)))
 

:pattern ((FStar.Pervasives.Native.uu___is_None @x0
@x1))
:qid disc_equation_FStar.Pervasives.Native.None))

:named disc_equation_FStar.Pervasives.Native.None))
;;;;;;;;;;;;;;;;Prop-typing for Prims.subtype_of
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(Valid (Prims.subtype_of (Prims.subtype_of @x0
@x1)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Prims.subtype_of @x0
@x1)
Prims.unit))
:qid defn_equation_Prims.subtype_of))

:named defn_equation_Prims.subtype_of))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! 
;; def=Prims.fst(91,17-91,18); use=Prims.fst(91,17-91,18)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
Prims.T
Prims.trivial)
 

:pattern ((HasTypeFuel @u0
Prims.T
Prims.trivial))
:qid data_typing_intro_Prims.T@tok))

:named data_typing_intro_Prims.T@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
@x1))
(HasTypeFuel @u0
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x1)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x1)))
:qid data_typing_intro_FStar.Pervasives.Native.Some@tok))

:named data_typing_intro_FStar.Pervasives.Native.Some@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x1)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x1)))
:qid data_typing_intro_FStar.Pervasives.Native.None@tok))

:named data_typing_intro_FStar.Pervasives.Native.None@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x1)
(HasTypeFuel @u0
@x4
@x2))
(HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x1
@x2)))
:qid data_typing_intro_FStar.Pervasives.Native.Mktuple2@tok))

:named data_typing_intro_FStar.Pervasives.Native.Mktuple2@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3))
(and (HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x2
@x3)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3)))
:qid data_elim_FStar.Pervasives.Native.Some))

:named data_elim_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x2))
(HasTypeFuel @u0
@x2
Tm_type))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x2)))
:qid data_elim_FStar.Pervasives.Native.None))

:named data_elim_FStar.Pervasives.Native.None))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x5
@x6))
(and (HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x6
Tm_type)
(HasTypeFuel @u0
@x3
@x5)
(HasTypeFuel @u0
@x4
@x6)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x5
@x6)))
:qid data_elim_FStar.Pervasives.Native.Mktuple2))

:named data_elim_FStar.Pervasives.Native.Mktuple2))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (= 125
(Term_constr_id Prims.unit))
:named constructor_distinct_Prims.unit))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (= 116
(Term_constr_id Prims.trivial))
:named constructor_distinct_Prims.trivial))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (= 303
(Term_constr_id Prims.int))
:named constructor_distinct_Prims.int))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (= 107
(Term_constr_id Prims.bool))
:named constructor_distinct_Prims.bool))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (= 122
(Term_constr_id Prims.T))
:named constructor_distinct_Prims.T))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.UInt8.t; Namespace FStar.UInt8
(assert (! 
;; def=FStar.UInt8.fsti(50,8-50,9); use=FStar.UInt8.fsti(50,8-50,9)
(forall ((@u0 Dummy_sort))
 (! (= 101
(Term_constr_id (FStar.UInt8.t @u0)))
 

:pattern ((FStar.UInt8.t @u0))
:qid constructor_distinct_FStar.UInt8.t))

:named constructor_distinct_FStar.UInt8.t))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Seq.Base.seq; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(23,8-23,11); use=FStar.Seq.Base.fsti(23,8-23,11)
(forall ((@x0 Term))
 (! (= 103
(Term_constr_id (FStar.Seq.Base.seq @x0)))
 

:pattern ((FStar.Seq.Base.seq @x0))
:qid constructor_distinct_FStar.Seq.Base.seq))

:named constructor_distinct_FStar.Seq.Base.seq))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= 125
(Term_constr_id (FStar.Pervasives.Native.tuple2 @x0
@x1)))
 

:pattern ((FStar.Pervasives.Native.tuple2 @x0
@x1))
:qid constructor_distinct_FStar.Pervasives.Native.tuple2))

:named constructor_distinct_FStar.Pervasives.Native.tuple2))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@x0 Term))
 (! (= 101
(Term_constr_id (FStar.Pervasives.Native.option @x0)))
 

:pattern ((FStar.Pervasives.Native.option @x0))
:qid constructor_distinct_FStar.Pervasives.Native.option))

:named constructor_distinct_FStar.Pervasives.Native.option))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= 113
(Term_constr_id (FStar.Pervasives.Native.Some @x0
@x1)))
 

:pattern ((FStar.Pervasives.Native.Some @x0
@x1))
:qid constructor_distinct_FStar.Pervasives.Native.Some))

:named constructor_distinct_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@x0 Term))
 (! (= 108
(Term_constr_id (FStar.Pervasives.Native.None @x0)))
 

:pattern ((FStar.Pervasives.Native.None @x0))
:qid constructor_distinct_FStar.Pervasives.Native.None))

:named constructor_distinct_FStar.Pervasives.Native.None))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 132
(Term_constr_id (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3)))
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid constructor_distinct_FStar.Pervasives.Native.Mktuple2))

:named constructor_distinct_FStar.Pervasives.Native.Mktuple2))
;;;;;;;;;;;;;;;;bool typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (forall ((@u0 Bool))
 (! (HasType (BoxBool @u0)
Prims.bool)
 

:pattern ((BoxBool @u0))
:qid bool_typing))
:named bool_typing))
;;;;;;;;;;;;;;;;bool inversion
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.bool)
(is-BoxBool @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.bool))
:qid bool_inversion))
:named bool_inversion))
;;;;;;;;;;;;;;;;b2t typing
;;; Fact-ids: Name Prims.b2t; Namespace Prims
(assert (! 
;; def=Prims.fst(180,5-180,8); use=Prims.fst(180,5-180,8)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.bool)
(HasType (Prims.b2t @x0)
Tm_type))
 

:pattern ((Prims.b2t @x0))
:qid b2t_typing))

:named b2t_typing))
;;;;;;;;;;;;;;;;b2t def
;;; Fact-ids: Name Prims.b2t; Namespace Prims
(assert (! 
;; def=Prims.fst(180,5-180,8); use=Prims.fst(180,5-180,8)
(forall ((@x0 Term))
 (! (= (Valid (Prims.b2t @x0))
(BoxBool_proj_0 @x0))
 

:pattern ((Prims.b2t @x0))
:qid b2t_def))

:named b2t_def))
;;;;;;;;;;;;;;;;Assumption: FStar.Pervasives.Native.tuple2__uu___haseq
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2__uu___haseq; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(Valid (Prims.hasEq @x0))
(Valid (Prims.hasEq @x1)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple2 @x0
@x1))))
 

:pattern ((Prims.hasEq (FStar.Pervasives.Native.tuple2 @x0
@x1)))
:qid assumption_FStar.Pervasives.Native.tuple2__uu___haseq))
:named assumption_FStar.Pervasives.Native.tuple2__uu___haseq))
;;;;;;;;;;;;;;;;Assumption: FStar.Pervasives.Native.option__uu___haseq
;;; Fact-ids: Name FStar.Pervasives.Native.option__uu___haseq; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_type)
(Valid (Prims.hasEq @x0)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.option @x0))))
 

:pattern ((Prims.hasEq (FStar.Pervasives.Native.option @x0)))
:qid assumption_FStar.Pervasives.Native.option__uu___haseq))
:named assumption_FStar.Pervasives.Native.option__uu___haseq))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! 
;; def=Prims.fst(96,5-96,9); use=Prims.fst(96,5-96,9)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.unit)
(= Prims.unit
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.unit))
:qid Prims_pretyping_f8666440faa91836cc5a13998af863fc))

:named Prims_pretyping_f8666440faa91836cc5a13998af863fc))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! 
;; def=Prims.fst(80,5-80,9); use=Prims.fst(80,5-80,9)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.bool)
(= Prims.bool
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.bool))
:qid Prims_pretyping_f537159ed795b314b4e58c260361ae86))

:named Prims_pretyping_f537159ed795b314b4e58c260361ae86))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! 
;; def=Prims.fst(91,5-91,12); use=Prims.fst(91,5-91,12)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.trivial)
(= Prims.trivial
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.trivial))
:qid Prims_pretyping_e8ffb7d227a1bbf69407a8d2ad2c4c83))

:named Prims_pretyping_e8ffb7d227a1bbf69407a8d2ad2c4c83))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! 
;; def=Prims.fst(514,5-514,8); use=Prims.fst(514,5-514,8)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.int)
(= Prims.int
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.int))
:qid Prims_pretyping_ae567c2fb75be05905677af440075565))

:named Prims_pretyping_ae567c2fb75be05905677af440075565))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x2
@x3)))
:qid Prims_pre_typing_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))

:named Prims_pre_typing_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x1
@x2))
(and 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x2
@x1))
(HasType (ApplyTT @x0
@x3)
Tm_type))
 

:pattern ((ApplyTT @x0
@x3))
:qid Prims_interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x1
@x2)))
:qid Prims_interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))

:named Prims_interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.UInt8.t; Namespace FStar.UInt8
(assert (! 
;; def=FStar.UInt8.fsti(50,8-50,9); use=FStar.UInt8.fsti(50,8-50,9)
(forall ((@x0 Term) (@u1 Fuel) (@u2 Dummy_sort))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.UInt8.t @u2))
(= (FStar.UInt8.t @u2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.UInt8.t @u2)))
:qid FStar.UInt8_pretyping_512f0e4172b97206a8b0e16196475713))

:named FStar.UInt8_pretyping_512f0e4172b97206a8b0e16196475713))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Seq.Base.seq; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(23,8-23,11); use=FStar.Seq.Base.fsti(23,8-23,11)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Seq.Base.seq @x2))
(= (FStar.Seq.Base.seq @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Seq.Base.seq @x2)))
:qid FStar.Seq.Base_pretyping_7efa52b424e80c83ad68a652aa3561e4))

:named FStar.Seq.Base_pretyping_7efa52b424e80c83ad68a652aa3561e4))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.option @x2))
(= (FStar.Pervasives.Native.option @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.option @x2)))
:qid FStar.Pervasives.Native_pretyping_b53dbd183c526bc5d0f20d7b966ae125))

:named FStar.Pervasives.Native_pretyping_b53dbd183c526bc5d0f20d7b966ae125))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple2 @x2
@x3))
(= (FStar.Pervasives.Native.tuple2 @x2
@x3)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple2 @x2
@x3)))
:qid FStar.Pervasives.Native_pretyping_4894c30cf477acf9a27e7a844279eb08))

:named FStar.Pervasives.Native_pretyping_4894c30cf477acf9a27e7a844279eb08))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name Prims.pow2; Namespace Prims
(assert (! 
;; def=Prims.fst(708,8-708,12); use=Prims.fst(708,8-708,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (= (Prims.pow2.fuel_instrumented (SFuel @u0)
@x1)
(Prims.pow2.fuel_instrumented ZFuel
@x1))
 

:pattern ((Prims.pow2.fuel_instrumented (SFuel @u0)
@x1))
:qid @fuel_irrelevance_Prims.pow2.fuel_instrumented))

:named @fuel_irrelevance_Prims.pow2.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name Prims.pow2; Namespace Prims
(assert (! 
;; def=Prims.fst(708,8-708,12); use=Prims.fst(708,8-708,12)
(forall ((@x0 Term))
 (! (= (Prims.pow2 @x0)
(Prims.pow2.fuel_instrumented MaxFuel
@x0))
 

:pattern ((Prims.pow2 @x0))
:qid @fuel_correspondence_Prims.pow2.fuel_instrumented))

:named @fuel_correspondence_Prims.pow2.fuel_instrumented))
(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(30,2-40,5)

(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_1634311840211d2f5a6f87aecae0847c (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(28,7-28,38); use=MiniParse.Spec.Combinators.fst(28,7-28,38)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_1634311840211d2f5a6f87aecae0847c @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_1634311840211d2f5a6f87aecae0847c @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_1634311840211d2f5a6f87aecae0847c))

:named refinement_kinding_Tm_refine_1634311840211d2f5a6f87aecae0847c))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(28,7-28,38); use=MiniParse.Spec.Combinators.fst(28,7-28,38)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_1634311840211d2f5a6f87aecae0847c @x2))
(and (HasTypeFuel @u0
@x1
MiniParse.Spec.Base.bytes)

;; def=MiniParse.Spec.Combinators.fst(28,18-28,36); use=MiniParse.Spec.Combinators.fst(28,18-28,36)
(= (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x1)
@x2)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_1634311840211d2f5a6f87aecae0847c @x2)))
:qid refinement_interpretation_Tm_refine_1634311840211d2f5a6f87aecae0847c))

:named refinement_interpretation_Tm_refine_1634311840211d2f5a6f87aecae0847c))
;;;;;;;;;;;;;;;;haseq for Tm_refine_1634311840211d2f5a6f87aecae0847c
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(28,7-28,38); use=MiniParse.Spec.Combinators.fst(28,7-28,38)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_1634311840211d2f5a6f87aecae0847c @x0)))
(Valid (Prims.hasEq MiniParse.Spec.Base.bytes)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_1634311840211d2f5a6f87aecae0847c @x0))))
:qid haseqTm_refine_1634311840211d2f5a6f87aecae0847c))

:named haseqTm_refine_1634311840211d2f5a6f87aecae0847c))
;;;;;;;;;;;;;;;;s: MiniParse.Spec.Base.bytes{FStar.Seq.Base.length s == sz}   -> Prims.GTot (FStar.Pervasives.Native.option t)
(declare-fun Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240 (Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(28,7-28,57); use=MiniParse.Spec.Combinators.fst(28,7-28,57)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240 @x0
@x1)
Tm_type))
:qid kinding_Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240))

:named kinding_Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(28,7-28,57); use=MiniParse.Spec.Combinators.fst(28,7-28,57)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240 @x2
@x3)))
:qid MiniParse.Spec.Combinators_pre_typing_Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240))

:named MiniParse.Spec.Combinators_pre_typing_Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(28,7-28,57); use=MiniParse.Spec.Combinators.fst(28,7-28,57)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240 @x1
@x2))

;; def=MiniParse.Spec.Combinators.fst(28,7-28,57); use=MiniParse.Spec.Combinators.fst(28,7-28,57)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Tm_refine_1634311840211d2f5a6f87aecae0847c @x2))
(HasType (ApplyTT @x0
@x3)
(FStar.Pervasives.Native.option @x1)))
 

:pattern ((ApplyTT @x0
@x3))
:qid MiniParse.Spec.Combinators_interpretation_Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240.1))
)
 

:pattern ((HasTypeZ @x0
(Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240 @x1
@x2)))
:qid MiniParse.Spec.Combinators_interpretation_Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240))

:named MiniParse.Spec.Combinators_interpretation_Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240))

; Encoding query formula : forall (sz: Prims.nat)
;   (t: Type)
;   (f:
;   (s: MiniParse.Spec.Base.bytes{FStar.Seq.Base.length s == sz}
;       -> Prims.GTot (FStar.Pervasives.Native.option t))).
;   (*  - Could not prove post-condition
; *)
;   forall (s: MiniParse.Spec.Base.bytes).
;     (*  - Could not prove post-condition
; *)
;     forall (k:
;       Prims.pure_post (FStar.Pervasives.Native.option (t & MiniParse.Spec.Base.consumed_length s))).
;       (forall (x: FStar.Pervasives.Native.option (t & MiniParse.Spec.Base.consumed_length s)).
;           {:pattern Prims.guard_free (k x)}
;           Prims.auto_squash (k x)) ==>
;       ~(FStar.Seq.Base.length s < sz = true) ==>
;       (forall (b: Prims.bool).
;           FStar.Seq.Base.length s < sz == b ==>
;           0 <= sz && sz <= FStar.Seq.Base.length s /\
;           (forall (any_result: Prims.nat).
;               sz == any_result ==>
;               (forall (any_result: FStar.Seq.Base.seq MiniParse.Spec.Base.byte).
;                   FStar.Seq.Base.slice s 0 sz == any_result ==>
;                   FStar.Seq.Base.length (FStar.Seq.Base.slice s 0 sz) == sz /\
;                   (forall (any_result: MiniParse.Spec.Base.bytes).
;                       FStar.Seq.Base.slice s 0 sz == any_result ==>
;                       (forall (any_result: FStar.Pervasives.Native.option t).
;                           f (FStar.Seq.Base.slice s 0 sz) == any_result ==>
;                           (forall (k:
;                               Prims.pure_post (FStar.Pervasives.Native.option (t &
;                                       MiniParse.Spec.Base.consumed_length s))).
;                               (forall (x:
;                                   FStar.Pervasives.Native.option (t &
;                                       MiniParse.Spec.Base.consumed_length s)).
;                                   {:pattern Prims.guard_free (k x)}
;                                   Prims.auto_squash (k x)) ==>
;                               (~(None? (f (FStar.Seq.Base.slice s 0 sz))) /\
;                                 ~(Some? (f (FStar.Seq.Base.slice s 0 sz))) ==>
;                                 Prims.l_False) /\
;                               (~(None? (f (FStar.Seq.Base.slice s 0 sz))) ==>
;                                 (forall (b: t).
;                                     f (FStar.Seq.Base.slice s 0 sz) ==
;                                     FStar.Pervasives.Native.Some b ==>
;                                     sz <= FStar.Seq.Base.length s))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let make_constant_size_parser_aux`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Tm_type)
(HasType @x2
(Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240 @x1
@x0)))

;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(30,2-40,5)
(forall ((@x3 Term))
 (! (implies (HasType @x3
MiniParse.Spec.Base.bytes)

;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(30,2-40,5)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post (FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x3)))))

;; def=Prims.fst(402,27-402,88); use=MiniParse.Spec.Combinators.fst(31,2-40,5)
(forall ((@x5 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=MiniParse.Spec.Combinators.fst(31,2-40,5)
(Valid 
;; def=Prims.fst(402,84-402,87); use=MiniParse.Spec.Combinators.fst(31,2-40,5)
(ApplyTT @x4
@x5)
)

 

:pattern ((ApplyTT @x4
@x5))
:qid @query.3))


;; def=Prims.fst(389,19-389,21); use=MiniParse.Spec.Combinators.fst(31,2-40,5)
(not 
;; def=MiniParse.Spec.Combinators.fst(31,5-31,22); use=MiniParse.Spec.Combinators.fst(31,5-31,22)
(= (Prims.op_LessThan (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x3)
@x0)
(BoxBool true))
)
)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(31,2-40,5)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.bool)

;; def=MiniParse.Spec.Combinators.fst(31,5-39,18); use=MiniParse.Spec.Combinators.fst(31,5-39,18)
(= (Prims.op_LessThan (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x3)
@x0)
@x5)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(31,2-40,5)
(and 
;; def=MiniParse.Spec.Combinators.fst(26,3-26,5); use=MiniParse.Spec.Combinators.fst(34,35-34,37)
(or label_1
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x0)))


;; def=MiniParse.Spec.Combinators.fst(26,3-26,5); use=MiniParse.Spec.Combinators.fst(34,35-34,37)
(or label_2
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x0
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x3))))


;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(31,2-40,5)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.nat)

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(31,2-40,5)
(= @x0
@x6)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(31,2-40,5)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=MiniParse.Spec.Combinators.fst(34,8-34,37); use=MiniParse.Spec.Combinators.fst(34,8-34,37)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x3
(BoxInt 0)
@x0)
@x7)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(31,2-40,5)
(and 
;; def=MiniParse.Spec.Combinators.fst(28,18-28,36); use=MiniParse.Spec.Combinators.fst(35,12-35,14)
(or label_3

;; def=MiniParse.Spec.Combinators.fst(28,18-28,36); use=MiniParse.Spec.Combinators.fst(35,12-35,14)
(= (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x3
(BoxInt 0)
@x0))
@x0)
)


;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(31,2-40,5)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
MiniParse.Spec.Base.bytes)

;; def=MiniParse.Spec.Combinators.fst(28,8-34,10); use=MiniParse.Spec.Combinators.fst(31,2-40,5)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x3
(BoxInt 0)
@x0)
@x8)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(31,2-40,5)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(FStar.Pervasives.Native.option @x1))

;; def=MiniParse.Spec.Combinators.fst(35,10-35,14); use=MiniParse.Spec.Combinators.fst(35,10-35,14)
(= (ApplyTT @x2
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x3
(BoxInt 0)
@x0))
@x9)
)

;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(30,2-40,5)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(Prims.pure_post (FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x3)))))

;; def=Prims.fst(402,27-402,88); use=MiniParse.Spec.Combinators.fst(31,2-40,5)
(forall ((@x11 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=MiniParse.Spec.Combinators.fst(31,2-40,5)
(Valid 
;; def=Prims.fst(402,84-402,87); use=MiniParse.Spec.Combinators.fst(31,2-40,5)
(ApplyTT @x10
@x11)
)

 

:pattern ((ApplyTT @x10
@x11))
:qid @query.10))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(31,2-40,5)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(35,10-35,14); use=MiniParse.Spec.Combinators.fst(35,10-35,14)
(and 
;; def=MiniParse.Spec.Combinators.fst(35,10-35,14); use=MiniParse.Spec.Combinators.fst(35,10-35,14)
(not 
;; def=MiniParse.Spec.Combinators.fst(35,10-35,14); use=MiniParse.Spec.Combinators.fst(35,10-35,14)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None @x1
(ApplyTT @x2
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x3
(BoxInt 0)
@x0))))
)


;; def=MiniParse.Spec.Combinators.fst(35,10-35,14); use=MiniParse.Spec.Combinators.fst(35,10-35,14)
(not 
;; def=MiniParse.Spec.Combinators.fst(35,10-35,14); use=MiniParse.Spec.Combinators.fst(35,10-35,14)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x1
(ApplyTT @x2
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x3
(BoxInt 0)
@x0))))
)
)

label_4)
(implies 
;; def=Prims.fst(389,19-389,21); use=MiniParse.Spec.Combinators.fst(31,2-40,5)
(not 
;; def=MiniParse.Spec.Combinators.fst(35,10-35,14); use=MiniParse.Spec.Combinators.fst(35,10-35,14)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None @x1
(ApplyTT @x2
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x3
(BoxInt 0)
@x0))))
)


;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(31,2-40,5)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
@x1)

;; def=MiniParse.Spec.Combinators.fst(35,10-37,12); use=MiniParse.Spec.Combinators.fst(35,10-37,12)
(= (ApplyTT @x2
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x3
(BoxInt 0)
@x0))
(FStar.Pervasives.Native.Some @x1
@x11))
)

;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(38,36-38,38)
(or label_5

;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(38,36-38,38)
(<= (BoxInt_proj_0 @x0)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x3)))
)
)
 
;;no pats
:qid @query.11))
))
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.make_constant_size_parser_aux, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_MiniParse.Spec.Base.byte, equation_MiniParse.Spec.Base.bytes, equation_Prims.eqtype, equation_Prims.nat, int_inversion, int_typing, lemma_FStar.Pervasives.invertOption, lemma_FStar.Seq.Base.lemma_len_slice, primitive_Prims.op_LessThan, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_81407705a0828c2c1b1976675443f647, typing_FStar.Seq.Base.length, typing_FStar.UInt8.t

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let make_constant_size_parser_aux


; <Start encoding let make_constant_size_parser_aux>

(declare-fun Tm_refine_1634311840211d2f5a6f87aecae0847c (Term) Term)
;;;;;;;;;;;;;;;;s: MiniParse.Spec.Base.bytes{FStar.Seq.Base.length s == sz}   -> Prims.GTot (FStar.Pervasives.Native.option t)
(declare-fun Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240 (Term Term) Term)
(declare-fun MiniParse.Spec.Combinators.make_constant_size_parser_aux (Term Term Term) Term)


;;;;;;;;;;;;;;;;sz: Prims.nat ->     t: Type ->     f:       (s: MiniParse.Spec.Base.bytes{FStar.Seq.Base.length s == sz}           -> Prims.GTot (FStar.Pervasives.Native.option t))   -> MiniParse.Spec.Base.bare_parser t
(declare-fun Tm_arrow_e4955ab636248ea8c79377e5c2d85d9e () Term)
(declare-fun MiniParse.Spec.Combinators.make_constant_size_parser_aux@tok () Term)



(declare-fun Tm_abs_32e00b3026b589e7656aa22095079513 (Term Term Term) Term)

; </end encoding let make_constant_size_parser_aux>


; encoding sigelt let make_constant_size_parser_precond_precond


; <Start encoding let make_constant_size_parser_precond_precond>





(declare-fun MiniParse.Spec.Combinators.make_constant_size_parser_precond_precond (Term Term Term Term Term) Term)




;;;;;;;;;;;;;;;;sz: Prims.nat ->     t: Type ->     f:       (s: MiniParse.Spec.Base.bytes{FStar.Seq.Base.length s == sz}           -> Prims.GTot (FStar.Pervasives.Native.option t)) ->     s1: MiniParse.Spec.Base.bytes{FStar.Seq.Base.length s1 == sz} ->     s2: MiniParse.Spec.Base.bytes{FStar.Seq.Base.length s2 == sz}   -> Prims.GTot Type
(declare-fun Tm_arrow_564edf97564ea3cee0808b603aa816ba () Term)
(declare-fun MiniParse.Spec.Combinators.make_constant_size_parser_precond_precond@tok () Term)





; </end encoding let make_constant_size_parser_precond_precond>


; encoding sigelt let make_constant_size_parser_precond


; <Start encoding let make_constant_size_parser_precond>



(declare-fun MiniParse.Spec.Combinators.make_constant_size_parser_precond (Term Term Term) Term)


;;;;;;;;;;;;;;;;sz: Prims.nat ->     t: Type ->     f:       (s: MiniParse.Spec.Base.bytes{FStar.Seq.Base.length s == sz}           -> Prims.GTot (FStar.Pervasives.Native.option t))   -> Prims.GTot Type
(declare-fun Tm_arrow_5144c50ac2445a37592bbe449c8b45ab () Term)
(declare-fun MiniParse.Spec.Combinators.make_constant_size_parser_precond@tok () Term)





; </end encoding let make_constant_size_parser_precond>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Combinators.make_constant_size_parser_precond_precond; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(42,4-42,45); use=MiniParse.Spec.Combinators.fst(42,4-42,45)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Tm_type)
(HasType @x2
(Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240 @x1
@x0))
(HasType @x3
(Tm_refine_1634311840211d2f5a6f87aecae0847c @x0))
(HasType @x4
(Tm_refine_1634311840211d2f5a6f87aecae0847c @x0)))
(HasType (MiniParse.Spec.Combinators.make_constant_size_parser_precond_precond @x0
@x1
@x2
@x3
@x4)
Tm_type))
 

:pattern ((MiniParse.Spec.Combinators.make_constant_size_parser_precond_precond @x0
@x1
@x2
@x3
@x4))
:qid typing_MiniParse.Spec.Combinators.make_constant_size_parser_precond_precond))

:named typing_MiniParse.Spec.Combinators.make_constant_size_parser_precond_precond))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name MiniParse.Spec.Combinators.make_constant_size_parser_aux; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(28,7-28,38); use=MiniParse.Spec.Combinators.fst(28,7-28,38)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_1634311840211d2f5a6f87aecae0847c @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_1634311840211d2f5a6f87aecae0847c @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_1634311840211d2f5a6f87aecae0847c))

:named refinement_kinding_Tm_refine_1634311840211d2f5a6f87aecae0847c))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name MiniParse.Spec.Combinators.make_constant_size_parser_aux; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(28,7-28,38); use=MiniParse.Spec.Combinators.fst(28,7-28,38)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_1634311840211d2f5a6f87aecae0847c @x2))
(and (HasTypeFuel @u0
@x1
MiniParse.Spec.Base.bytes)

;; def=MiniParse.Spec.Combinators.fst(28,18-28,36); use=MiniParse.Spec.Combinators.fst(28,18-28,36)
(= (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x1)
@x2)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_1634311840211d2f5a6f87aecae0847c @x2)))
:qid refinement_interpretation_Tm_refine_1634311840211d2f5a6f87aecae0847c))

:named refinement_interpretation_Tm_refine_1634311840211d2f5a6f87aecae0847c))
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240
;;; Fact-ids: Name MiniParse.Spec.Combinators.make_constant_size_parser_aux; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(28,7-28,57); use=MiniParse.Spec.Combinators.fst(28,7-28,57)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240 @x0
@x1)
Tm_type))
:qid kinding_Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240))

:named kinding_Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240))
;;;;;;;;;;;;;;;;haseq for Tm_refine_1634311840211d2f5a6f87aecae0847c
;;; Fact-ids: Name MiniParse.Spec.Combinators.make_constant_size_parser_aux; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(28,7-28,38); use=MiniParse.Spec.Combinators.fst(28,7-28,38)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_1634311840211d2f5a6f87aecae0847c @x0)))
(Valid (Prims.hasEq MiniParse.Spec.Base.bytes)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_1634311840211d2f5a6f87aecae0847c @x0))))
:qid haseqTm_refine_1634311840211d2f5a6f87aecae0847c))

:named haseqTm_refine_1634311840211d2f5a6f87aecae0847c))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Combinators.make_constant_size_parser_precond_precond
;;; Fact-ids: Name MiniParse.Spec.Combinators.make_constant_size_parser_precond_precond; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(42,4-42,45); use=MiniParse.Spec.Combinators.fst(42,4-42,45)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (Valid (MiniParse.Spec.Combinators.make_constant_size_parser_precond_precond @x0
@x1
@x2
@x3
@x4))

;; def=MiniParse.Spec.Combinators.fst(49,2-49,48); use=MiniParse.Spec.Combinators.fst(49,2-49,48)
(and 
;; def=MiniParse.Spec.Combinators.fst(49,2-49,32); use=MiniParse.Spec.Combinators.fst(49,2-49,32)
(or 
;; def=MiniParse.Spec.Combinators.fst(49,3-49,15); use=MiniParse.Spec.Combinators.fst(49,3-49,15)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x1
(ApplyTT @x2
@x3)))


;; def=MiniParse.Spec.Combinators.fst(49,19-49,31); use=MiniParse.Spec.Combinators.fst(49,19-49,31)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x1
(ApplyTT @x2
@x4)))
)


;; def=MiniParse.Spec.Combinators.fst(49,36-49,48); use=MiniParse.Spec.Combinators.fst(49,36-49,48)
(= (ApplyTT @x2
@x3)
(ApplyTT @x2
@x4))
)
)
 

:pattern ((MiniParse.Spec.Combinators.make_constant_size_parser_precond_precond @x0
@x1
@x2
@x3
@x4))
:qid equation_MiniParse.Spec.Combinators.make_constant_size_parser_precond_precond))

:named equation_MiniParse.Spec.Combinators.make_constant_size_parser_precond_precond))
;;;;;;;;;;;;;;;;Prop-typing for MiniParse.Spec.Combinators.make_constant_size_parser_precond_precond
;;; Fact-ids: Name MiniParse.Spec.Combinators.make_constant_size_parser_precond_precond; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(42,4-42,45); use=MiniParse.Spec.Combinators.fst(42,4-42,45)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Tm_type)
(HasType @x2
(Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240 @x1
@x0))
(HasType @x3
(Tm_refine_1634311840211d2f5a6f87aecae0847c @x0))
(HasType @x4
(Tm_refine_1634311840211d2f5a6f87aecae0847c @x0)))
(Valid (Prims.subtype_of (MiniParse.Spec.Combinators.make_constant_size_parser_precond_precond @x0
@x1
@x2
@x3
@x4)
Prims.unit)))
 

:pattern ((Prims.subtype_of (MiniParse.Spec.Combinators.make_constant_size_parser_precond_precond @x0
@x1
@x2
@x3
@x4)
Prims.unit))
:qid defn_equation_MiniParse.Spec.Combinators.make_constant_size_parser_precond_precond))

:named defn_equation_MiniParse.Spec.Combinators.make_constant_size_parser_precond_precond))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name MiniParse.Spec.Combinators.make_constant_size_parser_aux; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(28,7-28,57); use=MiniParse.Spec.Combinators.fst(28,7-28,57)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240 @x2
@x3)))
:qid MiniParse.Spec.Combinators_pre_typing_Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240))

:named MiniParse.Spec.Combinators_pre_typing_Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240
;;; Fact-ids: Name MiniParse.Spec.Combinators.make_constant_size_parser_aux; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(28,7-28,57); use=MiniParse.Spec.Combinators.fst(28,7-28,57)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240 @x1
@x2))

;; def=MiniParse.Spec.Combinators.fst(28,7-28,57); use=MiniParse.Spec.Combinators.fst(28,7-28,57)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Tm_refine_1634311840211d2f5a6f87aecae0847c @x2))
(HasType (ApplyTT @x0
@x3)
(FStar.Pervasives.Native.option @x1)))
 

:pattern ((ApplyTT @x0
@x3))
:qid MiniParse.Spec.Combinators_interpretation_Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240.1))
)
 

:pattern ((HasTypeZ @x0
(Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240 @x1
@x2)))
:qid MiniParse.Spec.Combinators_interpretation_Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240))

:named MiniParse.Spec.Combinators_interpretation_Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240))
(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(64,2-65,71)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)






; Encoding query formula : forall (sz: Prims.nat)
;   (t: Type)
;   (f:
;   (s: MiniParse.Spec.Base.bytes{FStar.Seq.Base.length s == sz}
;       -> Prims.GTot (FStar.Pervasives.Native.option t))).
;   (*  - Could not prove post-condition
; *)
;   forall (s1: MiniParse.Spec.Base.bytes{FStar.Seq.Base.length s1 == sz}).
;     (*  - Could not prove post-condition
; *)
;     forall (s2: MiniParse.Spec.Base.bytes{FStar.Seq.Base.length s2 == sz}).
;       MiniParse.Spec.Combinators.make_constant_size_parser_precond_precond sz t f s1 s2 ==>
;       (FStar.Seq.Base.length s1 == sz ==>
;         FStar.Seq.Base.length s1 == sz \/ FStar.Seq.Base.length s1 == sz) /\
;       (forall (any_result: s1: MiniParse.Spec.Base.bytes{FStar.Seq.Base.length s1 == sz}).
;           s1 == any_result ==>
;           FStar.Seq.Base.length s2 == sz ==>
;           FStar.Seq.Base.length s2 == sz \/ FStar.Seq.Base.length s2 == sz)


; Context: While encoding a query
; While typechecking the top-level declaration `let make_constant_size_parser_precond'`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Tm_type)
(HasType @x2
(Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240 @x1
@x0)))

;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(64,2-65,71)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Tm_refine_1634311840211d2f5a6f87aecae0847c @x0))

;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(64,43-65,71)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Tm_refine_1634311840211d2f5a6f87aecae0847c @x0))

;; def=MiniParse.Spec.Combinators.fst(65,4-65,58); use=MiniParse.Spec.Combinators.fst(65,4-65,58)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(65,4-65,58); use=MiniParse.Spec.Combinators.fst(65,4-65,58)
(MiniParse.Spec.Combinators.make_constant_size_parser_precond_precond @x0
@x1
@x2
@x3
@x4)
)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(65,4-65,71)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(64,21-64,40); use=MiniParse.Spec.Combinators.fst(65,63-65,65)
(= (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x3)
@x0)


;; def=MiniParse.Spec.Combinators.fst(64,21-64,74); use=MiniParse.Spec.Combinators.fst(65,63-65,65)
(or label_1

;; def=MiniParse.Spec.Combinators.fst(64,21-64,40); use=MiniParse.Spec.Combinators.fst(65,63-65,65)
(= (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x3)
@x0)


;; def=MiniParse.Spec.Combinators.fst(64,55-64,74); use=MiniParse.Spec.Combinators.fst(65,63-65,65)
(= (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x3)
@x0)
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(65,4-65,71)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Tm_refine_1634311840211d2f5a6f87aecae0847c @x0))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(65,4-65,71)
(= @x3
@x5)


;; def=MiniParse.Spec.Combinators.fst(64,55-64,74); use=MiniParse.Spec.Combinators.fst(65,69-65,71)
(= (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)
@x0)
)

;; def=MiniParse.Spec.Combinators.fst(64,21-64,74); use=MiniParse.Spec.Combinators.fst(65,69-65,71)
(or label_2

;; def=MiniParse.Spec.Combinators.fst(64,21-64,40); use=MiniParse.Spec.Combinators.fst(65,69-65,71)
(= (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)
@x0)


;; def=MiniParse.Spec.Combinators.fst(64,55-64,74); use=MiniParse.Spec.Combinators.fst(65,69-65,71)
(= (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)
@x0)
)
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.make_constant_size_parser_precond', 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let make_constant_size_parser_precond'


; <Start encoding let make_constant_size_parser_precond'>



(declare-fun MiniParse.Spec.Combinators.make_constant_size_parser_precond_ (Term Term Term) Term)



(declare-fun MiniParse.Spec.Combinators.make_constant_size_parser_precond_@tok () Term)





; </end encoding let make_constant_size_parser_precond'>

;;;;;;;;;;;;;;;;typing_Tm_abs_32e00b3026b589e7656aa22095079513
;;; Fact-ids: Name MiniParse.Spec.Combinators.make_constant_size_parser_aux; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(31,2-40,5); use=MiniParse.Spec.Combinators.fst(31,2-40,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_abs_32e00b3026b589e7656aa22095079513 @x0
@x1
@x2)
(Tm_ghost_arrow_84eb031c18bd35e3c76ba4886d9ede0b @x2))
 

:pattern ((Tm_abs_32e00b3026b589e7656aa22095079513 @x0
@x1
@x2))
:qid typing_Tm_abs_32e00b3026b589e7656aa22095079513))

:named typing_Tm_abs_32e00b3026b589e7656aa22095079513))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Prims.prop
Tm_type)
:named typing_Prims.prop))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Combinators.make_constant_size_parser_precond'; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(59,4-59,38); use=MiniParse.Spec.Combinators.fst(59,4-59,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Tm_type)
(HasType @x2
(Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240 @x1
@x0)))
(HasType (MiniParse.Spec.Combinators.make_constant_size_parser_precond_ @x0
@x1
@x2)
Tm_type))
 

:pattern ((MiniParse.Spec.Combinators.make_constant_size_parser_precond_ @x0
@x1
@x2))
:qid typing_MiniParse.Spec.Combinators.make_constant_size_parser_precond_))

:named typing_MiniParse.Spec.Combinators.make_constant_size_parser_precond_))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Combinators.make_constant_size_parser_precond; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(51,4-51,37); use=MiniParse.Spec.Combinators.fst(51,4-51,37)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Tm_type)
(HasType @x2
(Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240 @x1
@x0)))
(HasType (MiniParse.Spec.Combinators.make_constant_size_parser_precond @x0
@x1
@x2)
Tm_type))
 

:pattern ((MiniParse.Spec.Combinators.make_constant_size_parser_precond @x0
@x1
@x2))
:qid typing_MiniParse.Spec.Combinators.make_constant_size_parser_precond))

:named typing_MiniParse.Spec.Combinators.make_constant_size_parser_precond))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Combinators.make_constant_size_parser_aux; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(25,4-25,33); use=MiniParse.Spec.Combinators.fst(25,4-25,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Tm_type)
(HasType @x2
(Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240 @x1
@x0)))
(HasType (MiniParse.Spec.Combinators.make_constant_size_parser_aux @x0
@x1
@x2)
(MiniParse.Spec.Base.bare_parser @x1)))
 

:pattern ((MiniParse.Spec.Combinators.make_constant_size_parser_aux @x0
@x1
@x2))
:qid typing_MiniParse.Spec.Combinators.make_constant_size_parser_aux))

:named typing_MiniParse.Spec.Combinators.make_constant_size_parser_aux))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Base.injective_precond; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(101,4-101,21); use=MiniParse.Spec.Base.fst(101,4-101,21)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.bare_parser @x0))
(HasType @x2
MiniParse.Spec.Base.bytes)
(HasType @x3
MiniParse.Spec.Base.bytes))
(HasType (MiniParse.Spec.Base.injective_precond @x0
@x1
@x2
@x3)
Tm_type))
 

:pattern ((MiniParse.Spec.Base.injective_precond @x0
@x1
@x2
@x3))
:qid typing_MiniParse.Spec.Base.injective_precond))

:named typing_MiniParse.Spec.Base.injective_precond))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Base.injective_postcond; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(127,4-127,22); use=MiniParse.Spec.Base.fst(127,4-127,22)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.bare_parser @x0))
(HasType @x2
MiniParse.Spec.Base.bytes)
(HasType @x3
MiniParse.Spec.Base.bytes))
(HasType (MiniParse.Spec.Base.injective_postcond @x0
@x1
@x2
@x3)
Tm_type))
 

:pattern ((MiniParse.Spec.Base.injective_postcond @x0
@x1
@x2
@x3))
:qid typing_MiniParse.Spec.Base.injective_postcond))

:named typing_MiniParse.Spec.Base.injective_postcond))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Base.injective; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(154,4-154,13); use=MiniParse.Spec.Base.fst(154,4-154,13)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.bare_parser @x0)))
(HasType (MiniParse.Spec.Base.injective @x0
@x1)
Tm_type))
 

:pattern ((MiniParse.Spec.Base.injective @x0
@x1))
:qid typing_MiniParse.Spec.Base.injective))

:named typing_MiniParse.Spec.Base.injective))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Base.bparse; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(45,4-45,10); use=MiniParse.Spec.Base.fst(45,4-45,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.bare_parser @x0))
(HasType @x2
MiniParse.Spec.Base.bytes))
(HasType (MiniParse.Spec.Base.bparse @x0
@x1
@x2)
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x2)))))
 

:pattern ((MiniParse.Spec.Base.bparse @x0
@x1
@x2))
:qid typing_MiniParse.Spec.Base.bparse))

:named typing_MiniParse.Spec.Base.bparse))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Base.bare_parser; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(43,4-43,15); use=MiniParse.Spec.Base.fst(43,4-43,15)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (MiniParse.Spec.Base.bare_parser @x0)
Tm_type))
 

:pattern ((MiniParse.Spec.Base.bare_parser @x0))
:qid typing_MiniParse.Spec.Base.bare_parser))

:named typing_MiniParse.Spec.Base.bare_parser))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Seq.Base.index; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(32,4-32,9); use=FStar.Seq.Base.fsti(32,4-32,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
(Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 @x0
@x1)))
(HasType (FStar.Seq.Base.index @x0
@x1
@x2)
@x0))
 

:pattern ((FStar.Seq.Base.index @x0
@x1
@x2))
:qid typing_FStar.Seq.Base.index))

:named typing_FStar.Seq.Base.index))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Seq.Base.equal; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(166,4-166,9); use=FStar.Seq.Base.fsti(166,4-166,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
(FStar.Seq.Base.seq @x0)))
(HasType (FStar.Seq.Base.equal @x0
@x1
@x2)
Prims.prop))
 

:pattern ((FStar.Seq.Base.equal @x0
@x1
@x2))
:qid typing_FStar.Seq.Base.equal))

:named typing_FStar.Seq.Base.equal))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Seq.Base.index; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(32,34-32,53); use=FStar.Seq.Base.fsti(32,34-32,53)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55))

:named refinement_kinding_Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_slice; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(158,88-158,104); use=FStar.Seq.Base.fsti(158,88-158,104)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8))

:named refinement_kinding_Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Seq.Base.index; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(32,34-32,53); use=FStar.Seq.Base.fsti(32,34-32,53)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=FStar.Seq.Base.fsti(32,40-32,52); use=FStar.Seq.Base.fsti(32,40-32,52)
(< (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (FStar.Seq.Base.length @x2
@x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55))

:named refinement_interpretation_Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_slice; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(158,88-158,104); use=FStar.Seq.Base.fsti(158,88-158,104)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=FStar.Seq.Base.fsti(158,94-158,103); use=FStar.Seq.Base.fsti(158,94-158,103)
(< (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (Prims.op_Subtraction @x2
@x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8))

:named refinement_interpretation_Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Base.lemma_index_slice
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_slice; Namespace FStar.Seq.Base
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
Prims.nat)
(HasType @x3
(Tm_refine_d3d07693cd71377864ef84dc97d10ec1 @x2
@x0
@x1))
(HasType @x4
(Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8 @x3
@x2)))

;; def=FStar.Seq.Base.fsti(160,11-160,53); use=FStar.Seq.Base.fsti(160,11-160,53)
(= (FStar.Seq.Base.index @x0
(FStar.Seq.Base.slice @x0
@x1
@x2
@x3)
@x4)
(FStar.Seq.Base.index @x0
@x1
(Prims.op_Addition @x4
@x2)))
)
 

:pattern ((FStar.Seq.Base.index @x0
(FStar.Seq.Base.slice @x0
@x1
@x2
@x3)
@x4))
:qid lemma_FStar.Seq.Base.lemma_index_slice))
:named lemma_FStar.Seq.Base.lemma_index_slice))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Base.lemma_eq_refl
;;; Fact-ids: Name FStar.Seq.Base.lemma_eq_refl; Namespace FStar.Seq.Base
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
(FStar.Seq.Base.seq @x0))

;; def=FStar.Seq.Base.fsti(183,15-183,25); use=FStar.Seq.Base.fsti(183,15-183,25)
(= @x1
@x2)
)

;; def=FStar.Seq.Base.fsti(184,14-184,27); use=FStar.Seq.Base.fsti(184,14-184,27)
(Valid 
;; def=FStar.Seq.Base.fsti(184,14-184,27); use=FStar.Seq.Base.fsti(184,14-184,27)
(FStar.Seq.Base.equal @x0
@x1
@x2)
)
)
 

:pattern ((FStar.Seq.Base.equal @x0
@x1
@x2))
:qid lemma_FStar.Seq.Base.lemma_eq_refl))
:named lemma_FStar.Seq.Base.lemma_eq_refl))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Base.lemma_eq_intro
;;; Fact-ids: Name FStar.Seq.Base.lemma_eq_intro; Namespace FStar.Seq.Base
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
(FStar.Seq.Base.seq @x0))

;; def=FStar.Seq.Base.fsti(177,16-177,37); use=FStar.Seq.Base.fsti(177,16-177,37)
(= (FStar.Seq.Base.length @x0
@x1)
(FStar.Seq.Base.length @x0
@x2))


;; def=FStar.Seq.Base.fsti(178,18-178,114); use=FStar.Seq.Base.fsti(178,18-178,114)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 @x0
@x1))

;; def=FStar.Seq.Base.fsti(178,87-178,113); use=FStar.Seq.Base.fsti(178,87-178,113)
(= (FStar.Seq.Base.index @x0
@x1
@x3)
(FStar.Seq.Base.index @x0
@x2
@x3))
)
 

:pattern ((FStar.Seq.Base.index @x0
@x1
@x3) (FStar.Seq.Base.index @x0
@x2
@x3))
:qid lemma_FStar.Seq.Base.lemma_eq_intro.1))
)

;; def=FStar.Seq.Base.fsti(179,14-179,27); use=FStar.Seq.Base.fsti(179,14-179,27)
(Valid 
;; def=FStar.Seq.Base.fsti(179,14-179,27); use=FStar.Seq.Base.fsti(179,14-179,27)
(FStar.Seq.Base.equal @x0
@x1
@x2)
)
)
 

:pattern ((FStar.Seq.Base.equal @x0
@x1
@x2))
:qid lemma_FStar.Seq.Base.lemma_eq_intro))
:named lemma_FStar.Seq.Base.lemma_eq_intro))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Base.lemma_eq_elim
;;; Fact-ids: Name FStar.Seq.Base.lemma_eq_elim; Namespace FStar.Seq.Base
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
(FStar.Seq.Base.seq @x0))

;; def=FStar.Seq.Base.fsti(188,15-188,28); use=FStar.Seq.Base.fsti(188,15-188,28)
(Valid 
;; def=FStar.Seq.Base.fsti(188,15-188,28); use=FStar.Seq.Base.fsti(188,15-188,28)
(FStar.Seq.Base.equal @x0
@x1
@x2)
)
)

;; def=FStar.Seq.Base.fsti(189,14-189,22); use=FStar.Seq.Base.fsti(189,14-189,22)
(= @x1
@x2)
)
 

:pattern ((FStar.Seq.Base.equal @x0
@x1
@x2))
:qid lemma_FStar.Seq.Base.lemma_eq_elim))
:named lemma_FStar.Seq.Base.lemma_eq_elim))
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_84eb031c18bd35e3c76ba4886d9ede0b
;;; Fact-ids: Name MiniParse.Spec.Base.bare_parser; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(43,44-43,91); use=MiniParse.Spec.Base.fst(43,44-43,91)
(forall ((@x0 Term))
 (! (HasType (Tm_ghost_arrow_84eb031c18bd35e3c76ba4886d9ede0b @x0)
Tm_type)
 

:pattern ((HasType (Tm_ghost_arrow_84eb031c18bd35e3c76ba4886d9ede0b @x0)
Tm_type))
:qid kinding_Tm_ghost_arrow_84eb031c18bd35e3c76ba4886d9ede0b))

:named kinding_Tm_ghost_arrow_84eb031c18bd35e3c76ba4886d9ede0b))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_32e00b3026b589e7656aa22095079513
;;; Fact-ids: Name MiniParse.Spec.Combinators.make_constant_size_parser_aux; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(31,2-40,5); use=MiniParse.Spec.Combinators.fst(31,2-40,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (Tm_abs_32e00b3026b589e7656aa22095079513 @x1
@x2
@x3)
@x0)
(let ((@lb4 (Prims.op_LessThan (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x0)
@x1)))
(ite (= @lb4
(BoxBool true))
(FStar.Pervasives.Native.None (FStar.Pervasives.Native.tuple2 @x3
(MiniParse.Spec.Base.consumed_length @x0)))
(let ((@lb5 (ApplyTT @x2
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x0
(BoxInt 0)
@x1))))
(ite (is-FStar.Pervasives.Native.None @lb5)
(FStar.Pervasives.Native.None (FStar.Pervasives.Native.tuple2 @x3
(MiniParse.Spec.Base.consumed_length @x0)))
(ite (is-FStar.Pervasives.Native.Some @lb5)
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x3
(MiniParse.Spec.Base.consumed_length @x0))
(FStar.Pervasives.Native.Mktuple2 @x3
(MiniParse.Spec.Base.consumed_length @x0)
(FStar.Pervasives.Native.Some_v @lb5)
@x1))
Tm_unit))))))
 

:pattern ((ApplyTT (Tm_abs_32e00b3026b589e7656aa22095079513 @x1
@x2
@x3)
@x0))
:qid interpretation_Tm_abs_32e00b3026b589e7656aa22095079513))

:named interpretation_Tm_abs_32e00b3026b589e7656aa22095079513))
;;;;;;;;;;;;;;;;haseq for Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55
;;; Fact-ids: Name FStar.Seq.Base.index; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(32,34-32,53); use=FStar.Seq.Base.fsti(32,34-32,53)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 @x0
@x1)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 @x0
@x1))))
:qid haseqTm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55))

:named haseqTm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55))
;;;;;;;;;;;;;;;;haseq for Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_slice; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(158,88-158,104); use=FStar.Seq.Base.fsti(158,88-158,104)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8 @x0
@x1)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8 @x0
@x1))))
:qid haseqTm_refine_35a0739c434508f48d0bb1d5cd5df9e8))

:named haseqTm_refine_35a0739c434508f48d0bb1d5cd5df9e8))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Prims.prop
Tm_type)
:named function_token_typing_Prims.prop))
;;;;;;;;;;;;;;;;Equation for Prims.prop
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (= Prims.prop
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf)
:named equation_Prims.prop))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Combinators.make_constant_size_parser_precond'
;;; Fact-ids: Name MiniParse.Spec.Combinators.make_constant_size_parser_precond'; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(59,4-59,38); use=MiniParse.Spec.Combinators.fst(59,4-59,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Valid (MiniParse.Spec.Combinators.make_constant_size_parser_precond_ @x0
@x1
@x2))

;; def=MiniParse.Spec.Combinators.fst(64,2-65,71); use=MiniParse.Spec.Combinators.fst(64,2-65,71)
(forall ((@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x3
(Tm_refine_1634311840211d2f5a6f87aecae0847c @x0))
(HasType @x4
(Tm_refine_1634311840211d2f5a6f87aecae0847c @x0))

;; def=MiniParse.Spec.Combinators.fst(65,4-65,58); use=MiniParse.Spec.Combinators.fst(65,4-65,58)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(65,4-65,58); use=MiniParse.Spec.Combinators.fst(65,4-65,58)
(MiniParse.Spec.Combinators.make_constant_size_parser_precond_precond @x0
@x1
@x2
@x3
@x4)
)
)

;; def=MiniParse.Spec.Combinators.fst(65,63-65,71); use=MiniParse.Spec.Combinators.fst(65,63-65,71)
(= @x3
@x4)
)
 
;;no pats
:qid equation_MiniParse.Spec.Combinators.make_constant_size_parser_precond_.1))
)
 

:pattern ((MiniParse.Spec.Combinators.make_constant_size_parser_precond_ @x0
@x1
@x2))
:qid equation_MiniParse.Spec.Combinators.make_constant_size_parser_precond_))

:named equation_MiniParse.Spec.Combinators.make_constant_size_parser_precond_))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Combinators.make_constant_size_parser_precond
;;; Fact-ids: Name MiniParse.Spec.Combinators.make_constant_size_parser_precond; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(51,4-51,37); use=MiniParse.Spec.Combinators.fst(51,4-51,37)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Valid (MiniParse.Spec.Combinators.make_constant_size_parser_precond @x0
@x1
@x2))

;; def=MiniParse.Spec.Combinators.fst(56,2-57,78); use=MiniParse.Spec.Combinators.fst(56,2-57,78)
(forall ((@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x3
(Tm_refine_1634311840211d2f5a6f87aecae0847c @x0))
(HasType @x4
(Tm_refine_1634311840211d2f5a6f87aecae0847c @x0))

;; def=MiniParse.Spec.Combinators.fst(57,4-57,58); use=MiniParse.Spec.Combinators.fst(57,4-57,58)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(57,4-57,58); use=MiniParse.Spec.Combinators.fst(57,4-57,58)
(MiniParse.Spec.Combinators.make_constant_size_parser_precond_precond @x0
@x1
@x2
@x3
@x4)
)
)

;; def=MiniParse.Spec.Combinators.fst(57,63-57,78); use=MiniParse.Spec.Combinators.fst(57,63-57,78)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(57,63-57,78); use=MiniParse.Spec.Combinators.fst(57,63-57,78)
(FStar.Seq.Base.equal (MiniParse.Spec.Base.byte Dummy_value)
@x3
@x4)
)
)
 
;;no pats
:qid equation_MiniParse.Spec.Combinators.make_constant_size_parser_precond.1))
)
 

:pattern ((MiniParse.Spec.Combinators.make_constant_size_parser_precond @x0
@x1
@x2))
:qid equation_MiniParse.Spec.Combinators.make_constant_size_parser_precond))

:named equation_MiniParse.Spec.Combinators.make_constant_size_parser_precond))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Combinators.make_constant_size_parser_aux
;;; Fact-ids: Name MiniParse.Spec.Combinators.make_constant_size_parser_aux; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(25,4-25,33); use=MiniParse.Spec.Combinators.fst(25,4-25,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (MiniParse.Spec.Combinators.make_constant_size_parser_aux @x0
@x1
@x2)
(Tm_abs_32e00b3026b589e7656aa22095079513 @x0
@x2
@x1))
 

:pattern ((MiniParse.Spec.Combinators.make_constant_size_parser_aux @x0
@x1
@x2))
:qid equation_MiniParse.Spec.Combinators.make_constant_size_parser_aux))

:named equation_MiniParse.Spec.Combinators.make_constant_size_parser_aux))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Base.injective_precond
;;; Fact-ids: Name MiniParse.Spec.Base.injective_precond; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(101,4-101,21); use=MiniParse.Spec.Base.fst(101,4-101,21)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Valid (MiniParse.Spec.Base.injective_precond @x0
@x1
@x2
@x3))

;; def=MiniParse.Spec.Base.fst(106,2-111,3); use=MiniParse.Spec.Base.fst(106,2-111,3)
(and 
;; def=MiniParse.Spec.Base.fst(106,2-106,21); use=MiniParse.Spec.Base.fst(106,2-106,21)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x2))
(MiniParse.Spec.Base.bparse @x0
@x1
@x2)))


;; def=MiniParse.Spec.Base.fst(107,2-107,21); use=MiniParse.Spec.Base.fst(107,2-107,21)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x3))
(MiniParse.Spec.Base.bparse @x0
@x1
@x3)))

(let ((@lb4 (MiniParse.Spec.Base.bparse @x0
@x1
@x2)))
(ite (is-FStar.Pervasives.Native.Some @lb4)
(let ((@lb5 (MiniParse.Spec.Base.bparse @x0
@x1
@x3)))
(ite (is-FStar.Pervasives.Native.Some @lb5)

;; def=MiniParse.Spec.Base.fst(110,4-110,12); use=MiniParse.Spec.Base.fst(110,4-110,12)
(= (FStar.Pervasives.Native.Mktuple2__1 (FStar.Pervasives.Native.Some_v @lb4))
(FStar.Pervasives.Native.Mktuple2__1 (FStar.Pervasives.Native.Some_v @lb5)))

Unreachable))
Unreachable)))
)
 

:pattern ((MiniParse.Spec.Base.injective_precond @x0
@x1
@x2
@x3))
:qid equation_MiniParse.Spec.Base.injective_precond))

:named equation_MiniParse.Spec.Base.injective_precond))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Base.injective_postcond
;;; Fact-ids: Name MiniParse.Spec.Base.injective_postcond; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(127,4-127,22); use=MiniParse.Spec.Base.fst(127,4-127,22)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Valid (MiniParse.Spec.Base.injective_postcond @x0
@x1
@x2
@x3))

;; def=MiniParse.Spec.Base.fst(132,2-138,3); use=MiniParse.Spec.Base.fst(132,2-138,3)
(and 
;; def=MiniParse.Spec.Base.fst(132,2-132,21); use=MiniParse.Spec.Base.fst(132,2-132,21)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x2))
(MiniParse.Spec.Base.bparse @x0
@x1
@x2)))


;; def=MiniParse.Spec.Base.fst(133,2-133,21); use=MiniParse.Spec.Base.fst(133,2-133,21)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x3))
(MiniParse.Spec.Base.bparse @x0
@x1
@x3)))

(let ((@lb4 (MiniParse.Spec.Base.bparse @x0
@x1
@x2)))
(ite (is-FStar.Pervasives.Native.Some @lb4)
(let ((@lb5 (MiniParse.Spec.Base.bparse @x0
@x1
@x3)))
(ite (is-FStar.Pervasives.Native.Some @lb5)

;; def=MiniParse.Spec.Base.fst(136,4-137,46); use=MiniParse.Spec.Base.fst(136,4-137,46)
(and 
;; def=MiniParse.Spec.Base.fst(136,4-136,34); use=MiniParse.Spec.Base.fst(136,4-136,34)
(= (FStar.Pervasives.Native.Mktuple2__2 (FStar.Pervasives.Native.Some_v @lb4))
(FStar.Pervasives.Native.Mktuple2__2 (FStar.Pervasives.Native.Some_v @lb5)))


;; def=MiniParse.Spec.Base.fst(137,4-137,46); use=MiniParse.Spec.Base.fst(137,4-137,46)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x2
(BoxInt 0)
(FStar.Pervasives.Native.Mktuple2__2 (FStar.Pervasives.Native.Some_v @lb4)))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x3
(BoxInt 0)
(FStar.Pervasives.Native.Mktuple2__2 (FStar.Pervasives.Native.Some_v @lb5))))
)

Unreachable))
Unreachable)))
)
 

:pattern ((MiniParse.Spec.Base.injective_postcond @x0
@x1
@x2
@x3))
:qid equation_MiniParse.Spec.Base.injective_postcond))

:named equation_MiniParse.Spec.Base.injective_postcond))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Base.injective
;;; Fact-ids: Name MiniParse.Spec.Base.injective; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(154,4-154,13); use=MiniParse.Spec.Base.fst(154,4-154,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (MiniParse.Spec.Base.injective @x0
@x1))

;; def=MiniParse.Spec.Base.fst(155,2-157,28); use=MiniParse.Spec.Base.fst(155,2-157,28)
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
MiniParse.Spec.Base.bytes)
(HasType @x3
MiniParse.Spec.Base.bytes)

;; def=MiniParse.Spec.Base.fst(156,2-156,27); use=MiniParse.Spec.Base.fst(156,2-156,27)
(Valid 
;; def=MiniParse.Spec.Base.fst(156,2-156,27); use=MiniParse.Spec.Base.fst(156,2-156,27)
(MiniParse.Spec.Base.injective_precond @x0
@x1
@x2
@x3)
)
)

;; def=MiniParse.Spec.Base.fst(157,2-157,28); use=MiniParse.Spec.Base.fst(157,2-157,28)
(Valid 
;; def=MiniParse.Spec.Base.fst(157,2-157,28); use=MiniParse.Spec.Base.fst(157,2-157,28)
(MiniParse.Spec.Base.injective_postcond @x0
@x1
@x2
@x3)
)
)
 
;;no pats
:qid equation_MiniParse.Spec.Base.injective.1))
)
 

:pattern ((MiniParse.Spec.Base.injective @x0
@x1))
:qid equation_MiniParse.Spec.Base.injective))

:named equation_MiniParse.Spec.Base.injective))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Base.bparse
;;; Fact-ids: Name MiniParse.Spec.Base.bparse; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(45,4-45,10); use=MiniParse.Spec.Base.fst(45,4-45,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (MiniParse.Spec.Base.bparse @x0
@x1
@x2)
(ApplyTT @x1
@x2))
 

:pattern ((MiniParse.Spec.Base.bparse @x0
@x1
@x2))
:qid equation_MiniParse.Spec.Base.bparse))

:named equation_MiniParse.Spec.Base.bparse))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Base.bare_parser
;;; Fact-ids: Name MiniParse.Spec.Base.bare_parser; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(43,4-43,15); use=MiniParse.Spec.Base.fst(43,4-43,15)
(forall ((@x0 Term))
 (! (= (MiniParse.Spec.Base.bare_parser @x0)
(Tm_ghost_arrow_84eb031c18bd35e3c76ba4886d9ede0b @x0))
 

:pattern ((MiniParse.Spec.Base.bare_parser @x0))
:qid equation_MiniParse.Spec.Base.bare_parser))

:named equation_MiniParse.Spec.Base.bare_parser))
;;;;;;;;;;;;;;;;Prop-typing for MiniParse.Spec.Combinators.make_constant_size_parser_precond'
;;; Fact-ids: Name MiniParse.Spec.Combinators.make_constant_size_parser_precond'; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(59,4-59,38); use=MiniParse.Spec.Combinators.fst(59,4-59,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Tm_type)
(HasType @x2
(Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240 @x1
@x0)))
(Valid (Prims.subtype_of (MiniParse.Spec.Combinators.make_constant_size_parser_precond_ @x0
@x1
@x2)
Prims.unit)))
 

:pattern ((Prims.subtype_of (MiniParse.Spec.Combinators.make_constant_size_parser_precond_ @x0
@x1
@x2)
Prims.unit))
:qid defn_equation_MiniParse.Spec.Combinators.make_constant_size_parser_precond_))

:named defn_equation_MiniParse.Spec.Combinators.make_constant_size_parser_precond_))
;;;;;;;;;;;;;;;;Prop-typing for MiniParse.Spec.Combinators.make_constant_size_parser_precond
;;; Fact-ids: Name MiniParse.Spec.Combinators.make_constant_size_parser_precond; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(51,4-51,37); use=MiniParse.Spec.Combinators.fst(51,4-51,37)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Tm_type)
(HasType @x2
(Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240 @x1
@x0)))
(Valid (Prims.subtype_of (MiniParse.Spec.Combinators.make_constant_size_parser_precond @x0
@x1
@x2)
Prims.unit)))
 

:pattern ((Prims.subtype_of (MiniParse.Spec.Combinators.make_constant_size_parser_precond @x0
@x1
@x2)
Prims.unit))
:qid defn_equation_MiniParse.Spec.Combinators.make_constant_size_parser_precond))

:named defn_equation_MiniParse.Spec.Combinators.make_constant_size_parser_precond))
;;;;;;;;;;;;;;;;Prop-typing for MiniParse.Spec.Base.injective_precond
;;; Fact-ids: Name MiniParse.Spec.Base.injective_precond; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(101,4-101,21); use=MiniParse.Spec.Base.fst(101,4-101,21)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.bare_parser @x0))
(HasType @x2
MiniParse.Spec.Base.bytes)
(HasType @x3
MiniParse.Spec.Base.bytes))
(Valid (Prims.subtype_of (MiniParse.Spec.Base.injective_precond @x0
@x1
@x2
@x3)
Prims.unit)))
 

:pattern ((Prims.subtype_of (MiniParse.Spec.Base.injective_precond @x0
@x1
@x2
@x3)
Prims.unit))
:qid defn_equation_MiniParse.Spec.Base.injective_precond))

:named defn_equation_MiniParse.Spec.Base.injective_precond))
;;;;;;;;;;;;;;;;Prop-typing for MiniParse.Spec.Base.injective_postcond
;;; Fact-ids: Name MiniParse.Spec.Base.injective_postcond; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(127,4-127,22); use=MiniParse.Spec.Base.fst(127,4-127,22)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.bare_parser @x0))
(HasType @x2
MiniParse.Spec.Base.bytes)
(HasType @x3
MiniParse.Spec.Base.bytes))
(Valid (Prims.subtype_of (MiniParse.Spec.Base.injective_postcond @x0
@x1
@x2
@x3)
Prims.unit)))
 

:pattern ((Prims.subtype_of (MiniParse.Spec.Base.injective_postcond @x0
@x1
@x2
@x3)
Prims.unit))
:qid defn_equation_MiniParse.Spec.Base.injective_postcond))

:named defn_equation_MiniParse.Spec.Base.injective_postcond))
;;;;;;;;;;;;;;;;Prop-typing for MiniParse.Spec.Base.injective
;;; Fact-ids: Name MiniParse.Spec.Base.injective; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(154,4-154,13); use=MiniParse.Spec.Base.fst(154,4-154,13)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.bare_parser @x0)))
(Valid (Prims.subtype_of (MiniParse.Spec.Base.injective @x0
@x1)
Prims.unit)))
 

:pattern ((Prims.subtype_of (MiniParse.Spec.Base.injective @x0
@x1)
Prims.unit))
:qid defn_equation_MiniParse.Spec.Base.injective))

:named defn_equation_MiniParse.Spec.Base.injective))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name MiniParse.Spec.Base.bare_parser; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(43,44-43,91); use=MiniParse.Spec.Base.fst(43,44-43,91)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_ghost_arrow_84eb031c18bd35e3c76ba4886d9ede0b @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_ghost_arrow_84eb031c18bd35e3c76ba4886d9ede0b @x2)))
:qid MiniParse.Spec.Base_pre_typing_Tm_ghost_arrow_84eb031c18bd35e3c76ba4886d9ede0b))

:named MiniParse.Spec.Base_pre_typing_Tm_ghost_arrow_84eb031c18bd35e3c76ba4886d9ede0b))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_84eb031c18bd35e3c76ba4886d9ede0b
;;; Fact-ids: Name MiniParse.Spec.Base.bare_parser; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(43,44-43,91); use=MiniParse.Spec.Base.fst(43,44-43,91)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_ghost_arrow_84eb031c18bd35e3c76ba4886d9ede0b @x1))

;; def=MiniParse.Spec.Base.fst(43,44-43,91); use=MiniParse.Spec.Base.fst(43,44-43,91)
(forall ((@x2 Term))
 (! (implies (HasType @x2
MiniParse.Spec.Base.bytes)
(HasType (ApplyTT @x0
@x2)
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x2)))))
 

:pattern ((ApplyTT @x0
@x2))
:qid MiniParse.Spec.Base_interpretation_Tm_ghost_arrow_84eb031c18bd35e3c76ba4886d9ede0b.1))
)
 

:pattern ((HasTypeZ @x0
(Tm_ghost_arrow_84eb031c18bd35e3c76ba4886d9ede0b @x1)))
:qid MiniParse.Spec.Base_interpretation_Tm_ghost_arrow_84eb031c18bd35e3c76ba4886d9ede0b))

:named MiniParse.Spec.Base_interpretation_Tm_ghost_arrow_84eb031c18bd35e3c76ba4886d9ede0b))
(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(78,1-94,81)

(declare-fun label_19 () Bool)
(declare-fun label_18 () Bool)
(declare-fun label_17 () Bool)
(declare-fun label_16 () Bool)
(declare-fun label_15 () Bool)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)




(declare-fun Tm_refine_d6950bffb06a7432660dd4ef5d1adfb5 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(81,4-83,42); use=MiniParse.Spec.Combinators.fst(78,1-94,81)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_d6950bffb06a7432660dd4ef5d1adfb5 @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_d6950bffb06a7432660dd4ef5d1adfb5 @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_d6950bffb06a7432660dd4ef5d1adfb5))

:named refinement_kinding_Tm_refine_d6950bffb06a7432660dd4ef5d1adfb5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(81,4-83,42); use=MiniParse.Spec.Combinators.fst(78,1-94,81)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_d6950bffb06a7432660dd4ef5d1adfb5 @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(635,71-635,97); use=MiniParse.Spec.Combinators.fst(78,1-94,81)
(not 
;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(78,1-94,81)
(and 
;; def=MiniParse.Spec.Combinators.fst(82,14-82,41); use=MiniParse.Spec.Combinators.fst(78,1-94,81)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(82,14-82,41); use=MiniParse.Spec.Combinators.fst(78,1-94,81)
(MiniParse.Spec.Base.injective_precond @x2
(MiniParse.Spec.Combinators.make_constant_size_parser_aux @x3
@x2
@x4)
@x5
@x6)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(78,1-94,81)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(83,13-83,41); use=MiniParse.Spec.Combinators.fst(78,1-94,81)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(83,13-83,41); use=MiniParse.Spec.Combinators.fst(78,1-94,81)
(MiniParse.Spec.Base.injective_postcond @x2
(MiniParse.Spec.Combinators.make_constant_size_parser_aux @x3
@x2
@x4)
@x5
@x6)
)
)

;; def=Prims.fst(635,86-635,95); use=MiniParse.Spec.Combinators.fst(78,1-94,81)
(not 
;; def=Prims.fst(635,86-635,95); use=MiniParse.Spec.Combinators.fst(78,1-94,81)
(= @x7
@x1)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_d6950bffb06a7432660dd4ef5d1adfb5.1))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_d6950bffb06a7432660dd4ef5d1adfb5 @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_d6950bffb06a7432660dd4ef5d1adfb5))

:named refinement_interpretation_Tm_refine_d6950bffb06a7432660dd4ef5d1adfb5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_d6950bffb06a7432660dd4ef5d1adfb5
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(81,4-83,42); use=MiniParse.Spec.Combinators.fst(78,1-94,81)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_d6950bffb06a7432660dd4ef5d1adfb5 @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_d6950bffb06a7432660dd4ef5d1adfb5 @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_d6950bffb06a7432660dd4ef5d1adfb5))

:named haseqTm_refine_d6950bffb06a7432660dd4ef5d1adfb5))
;;;;;;;;;;;;;;;;b1: MiniParse.Spec.Base.bytes -> b2: MiniParse.Spec.Base.bytes   -> FStar.Pervasives.Lemma       (requires MiniParse.Spec.Base.injective_precond (make_constant_size_parser_aux sz t f) b1 b2)       (ensures MiniParse.Spec.Base.injective_postcond (make_constant_size_parser_aux sz t f) b1 b2)
(declare-fun Tm_arrow_7f98be462ed878bc6070bae6911c318a (Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_7f98be462ed878bc6070bae6911c318a
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(80,12-83,42); use=MiniParse.Spec.Combinators.fst(78,1-94,81)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_arrow_7f98be462ed878bc6070bae6911c318a @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_arrow_7f98be462ed878bc6070bae6911c318a @x0
@x1
@x2)
Tm_type))
:qid kinding_Tm_arrow_7f98be462ed878bc6070bae6911c318a))

:named kinding_Tm_arrow_7f98be462ed878bc6070bae6911c318a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(80,12-83,42); use=MiniParse.Spec.Combinators.fst(78,1-94,81)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_7f98be462ed878bc6070bae6911c318a @x2
@x3
@x4))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_7f98be462ed878bc6070bae6911c318a @x2
@x3
@x4)))
:qid MiniParse.Spec.Combinators_pre_typing_Tm_arrow_7f98be462ed878bc6070bae6911c318a))

:named MiniParse.Spec.Combinators_pre_typing_Tm_arrow_7f98be462ed878bc6070bae6911c318a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_7f98be462ed878bc6070bae6911c318a
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(80,12-83,42); use=MiniParse.Spec.Combinators.fst(78,1-94,81)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_7f98be462ed878bc6070bae6911c318a @x1
@x2
@x3))
(and 
;; def=MiniParse.Spec.Combinators.fst(80,12-83,42); use=MiniParse.Spec.Combinators.fst(78,1-94,81)
(forall ((@x4 Term) (@x5 Term))
 (! (implies (and 
;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(78,1-94,81)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(82,14-82,41); use=MiniParse.Spec.Combinators.fst(78,1-94,81)
(MiniParse.Spec.Base.injective_precond @x3
(MiniParse.Spec.Combinators.make_constant_size_parser_aux @x2
@x3
@x1)
@x4
@x5)
)

(HasType @x4
MiniParse.Spec.Base.bytes)
(HasType @x5
MiniParse.Spec.Base.bytes))
(HasType (ApplyTT (ApplyTT @x0
@x4)
@x5)
(Tm_refine_d6950bffb06a7432660dd4ef5d1adfb5 @x3
@x2
@x1
@x4
@x5)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x4)
@x5))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_7f98be462ed878bc6070bae6911c318a.1))

(IsTotFun @x0)

;; def=MiniParse.Spec.Combinators.fst(80,12-83,42); use=MiniParse.Spec.Combinators.fst(78,1-94,81)
(forall ((@x4 Term))
 (! (implies (HasType @x4
MiniParse.Spec.Base.bytes)
(IsTotFun (ApplyTT @x0
@x4)))
 

:pattern ((ApplyTT @x0
@x4))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_7f98be462ed878bc6070bae6911c318a.2))
))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_7f98be462ed878bc6070bae6911c318a @x1
@x2
@x3)))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_7f98be462ed878bc6070bae6911c318a))

:named MiniParse.Spec.Combinators_interpretation_Tm_arrow_7f98be462ed878bc6070bae6911c318a))

; Encoding query formula : forall (sz: Prims.nat)
;   (t: Type)
;   (f:
;   (s: MiniParse.Spec.Base.bytes{FStar.Seq.Base.length s == sz}
;       -> Prims.GTot (FStar.Pervasives.Native.option t))).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     MiniParse.Spec.Combinators.make_constant_size_parser_precond sz t f /\
;     (forall (pure_result: Prims.unit).
;         MiniParse.Spec.Base.injective (MiniParse.Spec.Combinators.make_constant_size_parser_aux sz
;               t
;               f) ==>
;         p pure_result) ==>
;     (forall (b1: MiniParse.Spec.Base.bytes) (b2: MiniParse.Spec.Base.bytes).
;         (*  - Could not prove post-condition
; *)
;         forall (p: Prims.pure_post Prims.unit).
;           MiniParse.Spec.Base.injective_precond (MiniParse.Spec.Combinators.make_constant_size_parser_aux
;                 sz
;                 t
;                 f)
;             b1
;             b2 /\
;           (forall (pure_result: Prims.unit).
;               MiniParse.Spec.Base.injective_postcond (MiniParse.Spec.Combinators.make_constant_size_parser_aux
;                     sz
;                     t
;                     f)
;                 b1
;                 b2 ==>
;               p pure_result) ==>
;           Some? (MiniParse.Spec.Base.bparse (MiniParse.Spec.Combinators.make_constant_size_parser_aux
;                     sz
;                     t
;                     f)
;                 b1) /\
;           (forall (pure_result: Prims.unit).
;               Some? (MiniParse.Spec.Base.bparse (MiniParse.Spec.Combinators.make_constant_size_parser_aux
;                         sz
;                         t
;                         f)
;                     b1) ==>
;               Some? (MiniParse.Spec.Base.bparse (MiniParse.Spec.Combinators.make_constant_size_parser_aux
;                         sz
;                         t
;                         f)
;                     b2) /\
;               (forall (pure_result: Prims.unit).
;                   Some? (MiniParse.Spec.Base.bparse (MiniParse.Spec.Combinators.make_constant_size_parser_aux
;                             sz
;                             t
;                             f)
;                         b2) ==>
;                   (forall (any_result:
;                       FStar.Pervasives.Native.option (t & MiniParse.Spec.Base.consumed_length b1)).
;                       MiniParse.Spec.Base.bparse (MiniParse.Spec.Combinators.make_constant_size_parser_aux
;                             sz
;                             t
;                             f)
;                         b1 ==
;                       any_result ==>
;                       (~(Some? (MiniParse.Spec.Base.bparse (MiniParse.Spec.Combinators.make_constant_size_parser_aux
;                                     sz
;                                     t
;                                     f)
;                                 b1)) ==>
;                         Prims.l_False) /\
;                       (forall (b: t) (b: MiniParse.Spec.Base.consumed_length b1).
;                           MiniParse.Spec.Base.bparse (MiniParse.Spec.Combinators.make_constant_size_parser_aux
;                                 sz
;                                 t
;                                 f)
;                             b1 ==
;                           FStar.Pervasives.Native.Some (b, b) ==>
;                           (forall (any_result:
;                               FStar.Pervasives.Native.option (t &
;                                   MiniParse.Spec.Base.consumed_length b2)).
;                               MiniParse.Spec.Base.bparse (MiniParse.Spec.Combinators.make_constant_size_parser_aux
;                                     sz
;                                     t
;                                     f)
;                                 b2 ==
;                               any_result ==>
;                               (~(Some? (MiniParse.Spec.Base.bparse (MiniParse.Spec.Combinators.make_constant_size_parser_aux
;                                             sz
;                                             t
;                                             f)
;                                         b2)) ==>
;                                 Prims.l_False) /\
;                               (forall (b: t) (b: MiniParse.Spec.Base.consumed_length b2).
;                                   MiniParse.Spec.Base.bparse (MiniParse.Spec.Combinators.make_constant_size_parser_aux
;                                         sz
;                                         t
;                                         f)
;                                     b2 ==
;                                   FStar.Pervasives.Native.Some (b, b) ==>
;                                   b == b /\
;                                   (forall (pure_result: Prims.unit).
;                                       b == b ==>
;                                       b == sz /\
;                                       (forall (pure_result: Prims.unit).
;                                           b == sz ==>
;                                           b == sz /\
;                                           (forall (pure_result: Prims.unit).
;                                               b == sz ==>
;                                               (b <= FStar.Seq.Base.length b1 ==>
;                                                 0 <= b && b <= FStar.Seq.Base.length b1) /\
;                                               (forall (any_result:
;                                                   MiniParse.Spec.Base.consumed_length b1).
;                                                   b == any_result ==>
;                                                   (forall (any_result:
;                                                       FStar.Seq.Base.seq MiniParse.Spec.Base.byte).
;                                                       FStar.Seq.Base.slice b1 0 b == any_result ==>
;                                                       FStar.Seq.Base.length (FStar.Seq.Base.slice b1
;                                                             0
;                                                             b) ==
;                                                       sz /\
;                                                       (forall (return_val:
;                                                           s1:
;                                                           MiniParse.Spec.Base.bytes
;                                                             {FStar.Seq.Base.length s1 == sz}).
;                                                           return_val == FStar.Seq.Base.slice b1 0 b ==>
;                                                           FStar.Seq.Base.slice b1 0 b == return_val ==>
;                                                           (b <= FStar.Seq.Base.length b2 ==>
;                                                             0 <= b && b <= FStar.Seq.Base.length b2) /\
;                                                           (forall (any_result:
;                                                               MiniParse.Spec.Base.consumed_length b2)
;                                                             .
;                                                               b == any_result ==>
;                                                               (forall (any_result:
;                                                                   FStar.Seq.Base.seq MiniParse.Spec.Base.byte
;                                                                   ).
;                                                                   FStar.Seq.Base.slice b2 0 b ==
;                                                                   any_result ==>
;                                                                   FStar.Seq.Base.length (FStar.Seq.Base.slice
;                                                                         b2
;                                                                         0
;                                                                         b) ==
;                                                                   sz /\
;                                                                   (forall (return_val:
;                                                                       s2:
;                                                                       MiniParse.Spec.Base.bytes
;                                                                         { FStar.Seq.Base.length s2 ==
;                                                                           sz }).
;                                                                       return_val ==
;                                                                       FStar.Seq.Base.slice b2 0 b ==>
;                                                                       FStar.Seq.Base.slice b2 0 b ==
;                                                                       return_val ==>
;                                                                       (forall (any_result: Type0).
;                                                                           MiniParse.Spec.Combinators.make_constant_size_parser_precond_precond
;                                                                             sz
;                                                                             t
;                                                                             f
;                                                                             (FStar.Seq.Base.slice b1
;                                                                                 0
;                                                                                 b)
;                                                                             (FStar.Seq.Base.slice b2
;                                                                                 0
;                                                                                 b) ==
;                                                                           any_result ==>
;                                                                           MiniParse.Spec.Combinators.make_constant_size_parser_precond_precond
;                                                                             sz
;                                                                             t
;                                                                             f
;                                                                             (FStar.Seq.Base.slice b1
;                                                                                 0
;                                                                                 b)
;                                                                             (FStar.Seq.Base.slice b2
;                                                                                 0
;                                                                                 b) /\
;                                                                           (forall (pure_result:
;                                                                               Prims.unit).
;                                                                               MiniParse.Spec.Combinators.make_constant_size_parser_precond_precond
;                                                                                 sz
;                                                                                 t
;                                                                                 f
;                                                                                 (FStar.Seq.Base.slice
;                                                                                     b1
;                                                                                     0
;                                                                                     b)
;                                                                                 (FStar.Seq.Base.slice
;                                                                                     b2
;                                                                                     0
;                                                                                     b) ==>
;                                                                               MiniParse.Spec.Combinators.make_constant_size_parser_precond'
;                                                                                 sz
;                                                                                 t
;                                                                                 f /\
;                                                                               (forall (pure_result:
;                                                                                   Prims.unit).
;                                                                                   MiniParse.Spec.Combinators.make_constant_size_parser_precond'
;                                                                                     sz
;                                                                                     t
;                                                                                     f ==>
;                                                                                   p pure_result)))))
;                                                           )))))))))))))) /\
;     (forall (any_result:
;         (b1: MiniParse.Spec.Base.bytes -> b2: MiniParse.Spec.Base.bytes
;             -> FStar.Pervasives.Lemma
;                 (requires
;                   MiniParse.Spec.Base.injective_precond (MiniParse.Spec.Combinators.make_constant_size_parser_aux
;                         sz
;                         t
;                         f)
;                     b1
;                     b2)
;                 (ensures
;                   MiniParse.Spec.Base.injective_postcond (MiniParse.Spec.Combinators.make_constant_size_parser_aux
;                         sz
;                         t
;                         f)
;                     b1
;                     b2)))
;         (pure_result: Prims.unit).
;         (forall (x: MiniParse.Spec.Base.bytes) (y: MiniParse.Spec.Base.bytes).
;             MiniParse.Spec.Base.injective_precond (MiniParse.Spec.Combinators.make_constant_size_parser_aux
;                   sz
;                   t
;                   f)
;               x
;               y ==>
;             MiniParse.Spec.Base.injective_postcond (MiniParse.Spec.Combinators.make_constant_size_parser_aux
;                   sz
;                   t
;                   f)
;               x
;               y) ==>
;         p pure_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let make_constant_size_parser_injective`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Tm_type)
(HasType @x2
(Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240 @x1
@x0)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(72,12-74,3); use=MiniParse.Spec.Combinators.fst(78,1-94,81)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(72,12-74,3); use=MiniParse.Spec.Combinators.fst(78,1-94,81)
(MiniParse.Spec.Combinators.make_constant_size_parser_precond @x0
@x1
@x2)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(78,1-94,81)
(forall ((@x4 Term))
 (! (implies (and (or label_1
(HasType @x4
Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(75,11-77,3); use=MiniParse.Spec.Combinators.fst(78,1-94,81)
(or label_2

;; def=MiniParse.Spec.Combinators.fst(75,11-77,3); use=MiniParse.Spec.Combinators.fst(78,1-94,81)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(75,11-77,3); use=MiniParse.Spec.Combinators.fst(78,1-94,81)
(MiniParse.Spec.Base.injective @x1
(MiniParse.Spec.Combinators.make_constant_size_parser_aux @x0
@x1
@x2))
)
)
)

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(78,1-94,81)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(78,1-94,81)
(ApplyTT @x3
@x4)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(78,1-94,81)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(78,1-94,81)
(ApplyTT @x3
@x4)
)
)
:qid @query.2))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(78,1-94,81)
(and 
;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(78,1-94,81)
(forall ((@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x4
MiniParse.Spec.Base.bytes)
(HasType @x5
MiniParse.Spec.Base.bytes))

;; def=Prims.fst(406,51-406,91); use=MiniParse.Spec.Combinators.fst(78,1-94,81)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Prims.pure_post Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(82,14-82,41); use=MiniParse.Spec.Combinators.fst(84,4-92,54)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(82,14-82,41); use=MiniParse.Spec.Combinators.fst(84,4-92,54)
(MiniParse.Spec.Base.injective_precond @x1
(MiniParse.Spec.Combinators.make_constant_size_parser_aux @x0
@x1
@x2)
@x4
@x5)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(84,4-92,54)
(forall ((@x7 Term))
 (! (implies (and (or label_3
(HasType @x7
Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(83,13-83,41); use=MiniParse.Spec.Combinators.fst(84,4-92,54)
(or label_4

;; def=MiniParse.Spec.Combinators.fst(83,13-83,41); use=MiniParse.Spec.Combinators.fst(84,4-92,54)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(83,13-83,41); use=MiniParse.Spec.Combinators.fst(84,4-92,54)
(MiniParse.Spec.Base.injective_postcond @x1
(MiniParse.Spec.Combinators.make_constant_size_parser_aux @x0
@x1
@x2)
@x4
@x5)
)
)
)

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(84,4-92,54)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(84,4-92,54)
(ApplyTT @x6
@x7)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(84,4-92,54)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(84,4-92,54)
(ApplyTT @x6
@x7)
)
)
:qid @query.5))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(84,4-84,10)
(and 
;; def=MiniParse.Spec.Combinators.fst(84,11-84,32); use=MiniParse.Spec.Combinators.fst(84,4-84,10)
(or label_5

;; def=MiniParse.Spec.Combinators.fst(84,11-84,32); use=MiniParse.Spec.Combinators.fst(84,4-84,10)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x4))
(MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.make_constant_size_parser_aux @x0
@x1
@x2)
@x4)))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(84,4-84,10)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(84,11-84,32); use=MiniParse.Spec.Combinators.fst(84,4-84,10)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x4))
(MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.make_constant_size_parser_aux @x0
@x1
@x2)
@x4)))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(85,4-85,10)
(and 
;; def=MiniParse.Spec.Combinators.fst(85,11-85,32); use=MiniParse.Spec.Combinators.fst(85,4-85,10)
(or label_6

;; def=MiniParse.Spec.Combinators.fst(85,11-85,32); use=MiniParse.Spec.Combinators.fst(85,4-85,10)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.make_constant_size_parser_aux @x0
@x1
@x2)
@x5)))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(85,4-85,10)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(85,11-85,32); use=MiniParse.Spec.Combinators.fst(85,4-85,10)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.make_constant_size_parser_aux @x0
@x1
@x2)
@x5)))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(84,4-92,54)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x4))))

;; def=MiniParse.Spec.Combinators.fst(86,9-86,39); use=MiniParse.Spec.Combinators.fst(86,9-86,39)
(= (MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.make_constant_size_parser_aux @x0
@x1
@x2)
@x4)
@x9)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(84,4-92,54)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(86,9-86,24); use=MiniParse.Spec.Combinators.fst(86,9-86,24)
(not 
;; def=MiniParse.Spec.Combinators.fst(86,9-86,24); use=MiniParse.Spec.Combinators.fst(86,9-86,24)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x4))
(MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.make_constant_size_parser_aux @x0
@x1
@x2)
@x4)))
)

label_7)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(84,4-92,54)
(forall ((@x10 Term))
 (! (implies (HasType @x10
@x1)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(84,4-92,54)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(MiniParse.Spec.Base.consumed_length @x4))

;; def=MiniParse.Spec.Combinators.fst(86,9-86,24); use=MiniParse.Spec.Combinators.fst(86,9-86,24)
(= (MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.make_constant_size_parser_aux @x0
@x1
@x2)
@x4)
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x4))
(FStar.Pervasives.Native.Mktuple2 @x1
(MiniParse.Spec.Base.consumed_length @x4)
@x10
@x11)))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(84,4-92,54)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))))

;; def=MiniParse.Spec.Combinators.fst(87,9-87,39); use=MiniParse.Spec.Combinators.fst(87,9-87,39)
(= (MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.make_constant_size_parser_aux @x0
@x1
@x2)
@x5)
@x12)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(84,4-92,54)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(87,9-87,24); use=MiniParse.Spec.Combinators.fst(87,9-87,24)
(not 
;; def=MiniParse.Spec.Combinators.fst(87,9-87,24); use=MiniParse.Spec.Combinators.fst(87,9-87,24)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.make_constant_size_parser_aux @x0
@x1
@x2)
@x5)))
)

label_8)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(84,4-92,54)
(forall ((@x13 Term))
 (! (implies (HasType @x13
@x1)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(84,4-92,54)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
(MiniParse.Spec.Base.consumed_length @x5))

;; def=MiniParse.Spec.Combinators.fst(87,9-87,24); use=MiniParse.Spec.Combinators.fst(87,9-87,24)
(= (MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.make_constant_size_parser_aux @x0
@x1
@x2)
@x5)
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(FStar.Pervasives.Native.Mktuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5)
@x13
@x14)))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(88,4-88,10)
(and 
;; def=MiniParse.Spec.Combinators.fst(88,11-88,43); use=MiniParse.Spec.Combinators.fst(88,4-88,10)
(or label_9

;; def=MiniParse.Spec.Combinators.fst(88,11-88,43); use=MiniParse.Spec.Combinators.fst(88,4-88,10)
(= @x11
@x14)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(88,4-88,10)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(88,11-88,43); use=MiniParse.Spec.Combinators.fst(88,4-88,10)
(= @x11
@x14)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(89,4-89,10)
(and 
;; def=MiniParse.Spec.Combinators.fst(89,11-89,32); use=MiniParse.Spec.Combinators.fst(89,4-89,10)
(or label_10

;; def=MiniParse.Spec.Combinators.fst(89,11-89,32); use=MiniParse.Spec.Combinators.fst(89,4-89,10)
(= @x11
@x0)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(89,4-89,10)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(89,11-89,32); use=MiniParse.Spec.Combinators.fst(89,4-89,10)
(= @x11
@x0)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(90,4-90,10)
(and 
;; def=MiniParse.Spec.Combinators.fst(90,11-90,32); use=MiniParse.Spec.Combinators.fst(90,4-90,10)
(or label_11

;; def=MiniParse.Spec.Combinators.fst(90,11-90,32); use=MiniParse.Spec.Combinators.fst(90,4-90,10)
(= @x14
@x0)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(90,4-90,10)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(90,11-90,32); use=MiniParse.Spec.Combinators.fst(90,4-90,10)
(= @x14
@x0)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(84,4-92,54)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(91,77-91,81)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(91,77-91,81)
(and 
;; def=MiniParse.Spec.Combinators.fst(86,19-86,23); use=MiniParse.Spec.Combinators.fst(91,77-91,81)
(or label_12
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(86,19-86,23); use=MiniParse.Spec.Combinators.fst(91,77-91,81)
(or label_13
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(84,4-92,54)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(MiniParse.Spec.Base.consumed_length @x4))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(84,4-92,54)
(= @x11
@x18)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(84,4-92,54)
(forall ((@x19 Term))
 (! (implies (and (HasType @x19
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=MiniParse.Spec.Combinators.fst(46,2-91,82); use=MiniParse.Spec.Combinators.fst(91,12-91,82)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x11)
@x19)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(84,4-92,54)
(and 
;; def=MiniParse.Spec.Combinators.fst(46,15-46,34); use=MiniParse.Spec.Combinators.fst(91,61-91,82)
(or label_14

;; def=MiniParse.Spec.Combinators.fst(46,15-46,34); use=MiniParse.Spec.Combinators.fst(91,61-91,82)
(= (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x11))
@x0)
)


;; def=Prims.fst(356,2-356,58); use=MiniParse.Spec.Combinators.fst(84,4-92,54)
(forall ((@x20 Term))
 (! (implies (and (HasType @x20
(Tm_refine_1634311840211d2f5a6f87aecae0847c @x0))

;; def=Prims.fst(356,26-356,41); use=MiniParse.Spec.Combinators.fst(84,4-92,54)
(= @x20
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x11))


;; def=MiniParse.Spec.Combinators.fst(46,3-91,82); use=MiniParse.Spec.Combinators.fst(84,4-92,54)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x11)
@x20)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(84,4-92,54)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(91,99-91,103)
(<= (BoxInt_proj_0 @x14)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(91,99-91,103)
(and 
;; def=MiniParse.Spec.Combinators.fst(87,19-87,23); use=MiniParse.Spec.Combinators.fst(91,99-91,103)
(or label_15
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x14)))


;; def=MiniParse.Spec.Combinators.fst(87,19-87,23); use=MiniParse.Spec.Combinators.fst(91,99-91,103)
(or label_16
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x14
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(84,4-92,54)
(forall ((@x21 Term))
 (! (implies (and (HasType @x21
(MiniParse.Spec.Base.consumed_length @x5))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(84,4-92,54)
(= @x14
@x21)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(84,4-92,54)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=MiniParse.Spec.Combinators.fst(47,2-91,104); use=MiniParse.Spec.Combinators.fst(91,12-91,104)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x14)
@x22)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(84,4-92,54)
(and 
;; def=MiniParse.Spec.Combinators.fst(47,15-47,34); use=MiniParse.Spec.Combinators.fst(91,83-91,104)
(or label_17

;; def=MiniParse.Spec.Combinators.fst(47,15-47,34); use=MiniParse.Spec.Combinators.fst(91,83-91,104)
(= (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x14))
@x0)
)


;; def=Prims.fst(356,2-356,58); use=MiniParse.Spec.Combinators.fst(84,4-92,54)
(forall ((@x23 Term))
 (! (implies (and (HasType @x23
(Tm_refine_1634311840211d2f5a6f87aecae0847c @x0))

;; def=Prims.fst(356,26-356,41); use=MiniParse.Spec.Combinators.fst(84,4-92,54)
(= @x23
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x14))


;; def=MiniParse.Spec.Combinators.fst(47,3-91,104); use=MiniParse.Spec.Combinators.fst(84,4-92,54)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x14)
@x23)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(84,4-92,54)
(forall ((@x24 Term))
 (! (implies (and (HasType @x24
Tm_type)

;; def=Prims.fst(672,13-672,14); use=MiniParse.Spec.Combinators.fst(84,4-92,54)
(= (MiniParse.Spec.Combinators.make_constant_size_parser_precond_precond @x0
@x1
@x2
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x11)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x14))
@x24)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(91,4-91,10)
(and 
;; def=MiniParse.Spec.Combinators.fst(91,11-91,105); use=MiniParse.Spec.Combinators.fst(91,4-91,10)
(or label_18

;; def=MiniParse.Spec.Combinators.fst(91,11-91,105); use=MiniParse.Spec.Combinators.fst(91,4-91,10)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(91,11-91,105); use=MiniParse.Spec.Combinators.fst(91,4-91,10)
(MiniParse.Spec.Combinators.make_constant_size_parser_precond_precond @x0
@x1
@x2
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x11)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x14))
)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(91,4-91,10)
(forall ((@x25 Term))
 (! (implies (and (HasType @x25
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(91,11-91,105); use=MiniParse.Spec.Combinators.fst(91,4-91,10)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(91,11-91,105); use=MiniParse.Spec.Combinators.fst(91,4-91,10)
(MiniParse.Spec.Combinators.make_constant_size_parser_precond_precond @x0
@x1
@x2
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x11)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x14))
)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(92,4-92,10)
(and 
;; def=MiniParse.Spec.Combinators.fst(92,11-92,54); use=MiniParse.Spec.Combinators.fst(92,4-92,10)
(or label_19

;; def=MiniParse.Spec.Combinators.fst(92,11-92,54); use=MiniParse.Spec.Combinators.fst(92,4-92,10)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(92,11-92,54); use=MiniParse.Spec.Combinators.fst(92,4-92,10)
(MiniParse.Spec.Combinators.make_constant_size_parser_precond_ @x0
@x1
@x2)
)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(92,4-92,10)
(forall ((@x26 Term))
 (! (implies (and (HasType @x26
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(92,11-92,54); use=MiniParse.Spec.Combinators.fst(92,4-92,10)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(92,11-92,54); use=MiniParse.Spec.Combinators.fst(92,4-92,10)
(MiniParse.Spec.Combinators.make_constant_size_parser_precond_ @x0
@x1
@x2)
)
)

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(92,4-92,10)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(92,4-92,10)
(ApplyTT @x6
@x26)
)
)
 
;;no pats
:qid @query.25))
)
)
 
;;no pats
:qid @query.24))
)
)
 
;;no pats
:qid @query.23))
)
 
;;no pats
:qid @query.22))
)
)
 
;;no pats
:qid @query.21))
)
 
;;no pats
:qid @query.20))
)
)
 
;;no pats
:qid @query.19))
)
)
 
;;no pats
:qid @query.18))
)
 
;;no pats
:qid @query.17))
)
)
 
;;no pats
:qid @query.16))
)
)
 
;;no pats
:qid @query.15))
)
)
 
;;no pats
:qid @query.14))
)
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))


;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(78,1-94,81)
(forall ((@x4 Term))
 (! (implies (HasType @x4
(Tm_arrow_7f98be462ed878bc6070bae6911c318a @x2
@x0
@x1))

;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(94,12-94,26)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)

;; def=FStar.Classical.fsti(277,12-277,43); use=MiniParse.Spec.Combinators.fst(94,12-94,26)
(forall ((@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x6
MiniParse.Spec.Base.bytes)
(HasType @x7
MiniParse.Spec.Base.bytes)

;; def=FStar.Classical.fsti(83,13-83,16); use=MiniParse.Spec.Combinators.fst(94,12-94,26)
(Valid 
;; def=FStar.Classical.fsti(83,13-83,16); use=MiniParse.Spec.Combinators.fst(94,12-94,26)
(MiniParse.Spec.Base.injective_precond @x1
(MiniParse.Spec.Combinators.make_constant_size_parser_aux @x0
@x1
@x2)
@x6
@x7)
)
)

;; def=FStar.Classical.fsti(83,21-83,24); use=MiniParse.Spec.Combinators.fst(94,12-94,26)
(Valid 
;; def=FStar.Classical.fsti(83,21-83,24); use=MiniParse.Spec.Combinators.fst(94,12-94,26)
(MiniParse.Spec.Base.injective_postcond @x1
(MiniParse.Spec.Combinators.make_constant_size_parser_aux @x0
@x1
@x2)
@x6
@x7)
)
)
 
;;no pats
:qid @query.28))
)

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(94,12-94,26)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(94,12-94,26)
(ApplyTT @x3
@x5)
)
)
 
;;no pats
:qid @query.27))
)
 
;;no pats
:qid @query.26))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_19")
(eval label_19)
(echo "label_18")
(eval label_18)
(echo "label_17")
(eval label_17)
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.make_constant_size_parser_injective, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, MiniParse.Spec.Combinators_interpretation_Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240, constructor_distinct_FStar.Pervasives.Native.None, constructor_distinct_Tm_unit, disc_equation_FStar.Pervasives.Native.Some, equation_MiniParse.Spec.Base.bparse, equation_MiniParse.Spec.Base.byte, equation_MiniParse.Spec.Base.bytes, equation_MiniParse.Spec.Base.consumed_length, equation_MiniParse.Spec.Base.injective, equation_MiniParse.Spec.Base.injective_postcond, equation_MiniParse.Spec.Base.injective_precond, equation_MiniParse.Spec.Combinators.make_constant_size_parser_aux, equation_MiniParse.Spec.Combinators.make_constant_size_parser_precond, equation_MiniParse.Spec.Combinators.make_constant_size_parser_precond_, equation_MiniParse.Spec.Combinators.make_constant_size_parser_precond_precond, equation_Prims.eqtype, equation_Prims.nat, fuel_guarded_inversion_FStar.Pervasives.Native.option, int_inversion, int_typing, interpretation_Tm_abs_32e00b3026b589e7656aa22095079513, lemma_FStar.Seq.Base.lemma_eq_elim, lemma_FStar.Seq.Base.lemma_len_slice, primitive_Prims.op_LessThan, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_FStar.Pervasives.Native.Some_a, projection_inverse_FStar.Pervasives.Native.Some_v, refinement_interpretation_Tm_refine_1634311840211d2f5a6f87aecae0847c, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_81407705a0828c2c1b1976675443f647, refinement_interpretation_Tm_refine_f1ef48729dd48b5741a77671cc117cd5, typing_FStar.UInt8.t

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let make_constant_size_parser_injective


; <Start encoding let make_constant_size_parser_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Combinators.make_constant_size_parser_injective (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Combinators.make_constant_size_parser_injective@tok () Term)

; </end encoding let make_constant_size_parser_injective>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Base.no_lookahead_weak_on; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(52,4-52,24); use=MiniParse.Spec.Base.fst(52,4-52,24)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.bare_parser @x0))
(HasType @x2
MiniParse.Spec.Base.bytes)
(HasType @x3
MiniParse.Spec.Base.bytes))
(HasType (MiniParse.Spec.Base.no_lookahead_weak_on @x0
@x1
@x2
@x3)
Tm_type))
 

:pattern ((MiniParse.Spec.Base.no_lookahead_weak_on @x0
@x1
@x2
@x3))
:qid typing_MiniParse.Spec.Base.no_lookahead_weak_on))

:named typing_MiniParse.Spec.Base.no_lookahead_weak_on))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Base.no_lookahead_weak; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(81,4-81,21); use=MiniParse.Spec.Base.fst(81,4-81,21)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.bare_parser @x0)))
(HasType (MiniParse.Spec.Base.no_lookahead_weak @x0
@x1)
Tm_type))
 

:pattern ((MiniParse.Spec.Base.no_lookahead_weak @x0
@x1))
:qid typing_MiniParse.Spec.Base.no_lookahead_weak))

:named typing_MiniParse.Spec.Base.no_lookahead_weak))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Base.no_lookahead_on_precond; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(172,4-172,27); use=MiniParse.Spec.Base.fst(172,4-172,27)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.bare_parser @x0))
(HasType @x2
MiniParse.Spec.Base.bytes)
(HasType @x3
MiniParse.Spec.Base.bytes))
(HasType (MiniParse.Spec.Base.no_lookahead_on_precond @x0
@x1
@x2
@x3)
Tm_type))
 

:pattern ((MiniParse.Spec.Base.no_lookahead_on_precond @x0
@x1
@x2
@x3))
:qid typing_MiniParse.Spec.Base.no_lookahead_on_precond))

:named typing_MiniParse.Spec.Base.no_lookahead_on_precond))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Base.no_lookahead_on_postcond; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(184,4-184,28); use=MiniParse.Spec.Base.fst(184,4-184,28)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.bare_parser @x0))
(HasType @x2
MiniParse.Spec.Base.bytes)
(HasType @x3
MiniParse.Spec.Base.bytes))
(HasType (MiniParse.Spec.Base.no_lookahead_on_postcond @x0
@x1
@x2
@x3)
Tm_type))
 

:pattern ((MiniParse.Spec.Base.no_lookahead_on_postcond @x0
@x1
@x2
@x3))
:qid typing_MiniParse.Spec.Base.no_lookahead_on_postcond))

:named typing_MiniParse.Spec.Base.no_lookahead_on_postcond))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Base.no_lookahead_on; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(198,4-198,19); use=MiniParse.Spec.Base.fst(198,4-198,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.bare_parser @x0))
(HasType @x2
MiniParse.Spec.Base.bytes)
(HasType @x3
MiniParse.Spec.Base.bytes))
(HasType (MiniParse.Spec.Base.no_lookahead_on @x0
@x1
@x2
@x3)
Tm_type))
 

:pattern ((MiniParse.Spec.Base.no_lookahead_on @x0
@x1
@x2
@x3))
:qid typing_MiniParse.Spec.Base.no_lookahead_on))

:named typing_MiniParse.Spec.Base.no_lookahead_on))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Base.no_lookahead; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(219,4-219,16); use=MiniParse.Spec.Base.fst(219,4-219,16)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.bare_parser @x0)))
(HasType (MiniParse.Spec.Base.no_lookahead @x0
@x1)
Tm_type))
 

:pattern ((MiniParse.Spec.Base.no_lookahead @x0
@x1))
:qid typing_MiniParse.Spec.Base.no_lookahead))

:named typing_MiniParse.Spec.Base.no_lookahead))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name MiniParse.Spec.Base.parser_spec; Namespace MiniParse.Spec.Base; Name MiniParse.Spec.Base.Parser; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(238,5-238,16); use=MiniParse.Spec.Base.fst(238,5-238,16)
(forall ((@x0 Term))
 (! (= (ApplyTT MiniParse.Spec.Base.parser_spec@tok
@x0)
(MiniParse.Spec.Base.parser_spec @x0))
 

:pattern ((ApplyTT MiniParse.Spec.Base.parser_spec@tok
@x0))

:pattern ((MiniParse.Spec.Base.parser_spec @x0))
:qid token_correspondence_MiniParse.Spec.Base.parser_spec@tok))

:named token_correspondence_MiniParse.Spec.Base.parser_spec@tok))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name MiniParse.Spec.Base.parser_spec; Namespace MiniParse.Spec.Base; Name MiniParse.Spec.Base.Parser; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(240,4-240,10); use=MiniParse.Spec.Base.fst(240,4-240,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(MiniParse.Spec.Base.Parser @x1
@x2)
(MiniParse.Spec.Base.parser_spec @x3))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(MiniParse.Spec.Base.Parser @x1
@x2))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(MiniParse.Spec.Base.Parser @x1
@x2)
(MiniParse.Spec.Base.parser_spec @x3)))
:qid subterm_ordering_MiniParse.Spec.Base.Parser))

:named subterm_ordering_MiniParse.Spec.Base.Parser))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name MiniParse.Spec.Base.parser_spec; Namespace MiniParse.Spec.Base; Name MiniParse.Spec.Base.Parser; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(240,13-244,5); use=MiniParse.Spec.Base.fst(240,13-244,5)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_95482e91a565bbc8d113ac6e95692d97 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_95482e91a565bbc8d113ac6e95692d97 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_95482e91a565bbc8d113ac6e95692d97))

:named refinement_kinding_Tm_refine_95482e91a565bbc8d113ac6e95692d97))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name MiniParse.Spec.Base.parser_spec; Namespace MiniParse.Spec.Base; Name MiniParse.Spec.Base.Parser; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(240,13-244,5); use=MiniParse.Spec.Base.fst(240,13-244,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_95482e91a565bbc8d113ac6e95692d97 @x2))
(and (HasTypeFuel @u0
@x1
(MiniParse.Spec.Base.bare_parser @x2))

;; def=MiniParse.Spec.Base.fst(241,4-241,23); use=MiniParse.Spec.Base.fst(241,4-241,23)
(Valid 
;; def=MiniParse.Spec.Base.fst(241,4-241,23); use=MiniParse.Spec.Base.fst(241,4-241,23)
(MiniParse.Spec.Base.no_lookahead_weak @x2
@x1)
)


;; def=MiniParse.Spec.Base.fst(242,4-242,15); use=MiniParse.Spec.Base.fst(242,4-242,15)
(Valid 
;; def=MiniParse.Spec.Base.fst(242,4-242,15); use=MiniParse.Spec.Base.fst(242,4-242,15)
(MiniParse.Spec.Base.injective @x2
@x1)
)


;; def=MiniParse.Spec.Base.fst(243,4-243,18); use=MiniParse.Spec.Base.fst(243,4-243,18)
(Valid 
;; def=MiniParse.Spec.Base.fst(243,4-243,18); use=MiniParse.Spec.Base.fst(243,4-243,18)
(MiniParse.Spec.Base.no_lookahead @x2
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_95482e91a565bbc8d113ac6e95692d97 @x2)))
:qid refinement_interpretation_Tm_refine_95482e91a565bbc8d113ac6e95692d97))

:named refinement_interpretation_Tm_refine_95482e91a565bbc8d113ac6e95692d97))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name MiniParse.Spec.Base.parser_spec; Namespace MiniParse.Spec.Base; Name MiniParse.Spec.Base.Parser; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(240,4-240,10); use=MiniParse.Spec.Base.fst(240,4-240,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (MiniParse.Spec.Base.Parser_t (MiniParse.Spec.Base.Parser @x0
@x1))
@x0)
 

:pattern ((MiniParse.Spec.Base.Parser @x0
@x1))
:qid projection_inverse_MiniParse.Spec.Base.Parser_t))

:named projection_inverse_MiniParse.Spec.Base.Parser_t))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name MiniParse.Spec.Base.parser_spec; Namespace MiniParse.Spec.Base; Name MiniParse.Spec.Base.Parser; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(240,4-240,10); use=MiniParse.Spec.Base.fst(240,4-240,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (MiniParse.Spec.Base.Parser_f (MiniParse.Spec.Base.Parser @x0
@x1))
@x1)
 

:pattern ((MiniParse.Spec.Base.Parser @x0
@x1))
:qid projection_inverse_MiniParse.Spec.Base.Parser_f))

:named projection_inverse_MiniParse.Spec.Base.Parser_f))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name MiniParse.Spec.Base.parser_spec; Namespace MiniParse.Spec.Base; Name MiniParse.Spec.Base.Parser; Namespace MiniParse.Spec.Base
(assert (! (is-Tm_arrow (PreType MiniParse.Spec.Base.parser_spec@tok))
:named pre_kinding_MiniParse.Spec.Base.parser_spec@tok))
;;; Fact-ids: Name MiniParse.Spec.Base.parser_spec; Namespace MiniParse.Spec.Base; Name MiniParse.Spec.Base.Parser; Namespace MiniParse.Spec.Base
(assert (! (and (IsTotFun MiniParse.Spec.Base.parser_spec@tok)

;; def=MiniParse.Spec.Base.fst(238,5-238,16); use=MiniParse.Spec.Base.fst(238,5-238,16)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (MiniParse.Spec.Base.parser_spec @x0)
Tm_type))
 

:pattern ((MiniParse.Spec.Base.parser_spec @x0))
:qid kinding_MiniParse.Spec.Base.parser_spec@tok))
)
:named kinding_MiniParse.Spec.Base.parser_spec@tok))
;;;;;;;;;;;;;;;;haseq for Tm_refine_95482e91a565bbc8d113ac6e95692d97
;;; Fact-ids: Name MiniParse.Spec.Base.parser_spec; Namespace MiniParse.Spec.Base; Name MiniParse.Spec.Base.Parser; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(240,13-244,5); use=MiniParse.Spec.Base.fst(240,13-244,5)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_95482e91a565bbc8d113ac6e95692d97 @x0)))
(Valid (Prims.hasEq (MiniParse.Spec.Base.bare_parser @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_95482e91a565bbc8d113ac6e95692d97 @x0))))
:qid haseqTm_refine_95482e91a565bbc8d113ac6e95692d97))

:named haseqTm_refine_95482e91a565bbc8d113ac6e95692d97))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name MiniParse.Spec.Base.parser_spec; Namespace MiniParse.Spec.Base; Name MiniParse.Spec.Base.Parser; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(238,5-238,16); use=MiniParse.Spec.Base.fst(238,5-238,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(MiniParse.Spec.Base.parser_spec @x2))
(and (is-MiniParse.Spec.Base.Parser @x1)
(= @x2
(MiniParse.Spec.Base.Parser_t @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(MiniParse.Spec.Base.parser_spec @x2)))
:qid fuel_guarded_inversion_MiniParse.Spec.Base.parser_spec))

:named fuel_guarded_inversion_MiniParse.Spec.Base.parser_spec))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name MiniParse.Spec.Base.parser_spec; Namespace MiniParse.Spec.Base; Name MiniParse.Spec.Base.Parser; Namespace MiniParse.Spec.Base
(assert (! (= 129
(Term_constr_id MiniParse.Spec.Base.parser_spec@tok))
:named fresh_token_MiniParse.Spec.Base.parser_spec@tok))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Base.no_lookahead_weak_on
;;; Fact-ids: Name MiniParse.Spec.Base.no_lookahead_weak_on; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(52,4-52,24); use=MiniParse.Spec.Base.fst(52,4-52,24)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Valid (MiniParse.Spec.Base.no_lookahead_weak_on @x0
@x1
@x2
@x3))

;; def=MiniParse.Spec.Base.fst(57,2-65,5); use=MiniParse.Spec.Base.fst(57,2-65,5)
(implies 
;; def=MiniParse.Spec.Base.fst(57,2-57,20); use=MiniParse.Spec.Base.fst(57,2-57,20)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x2))
(MiniParse.Spec.Base.bparse @x0
@x1
@x2)))

(let ((@lb4 (MiniParse.Spec.Base.bparse @x0
@x1
@x2)))
(ite (is-FStar.Pervasives.Native.Some @lb4)
(let ((@lb5 (FStar.Pervasives.Native.Some_v @lb4)))

;; def=MiniParse.Spec.Base.fst(59,22-65,4); use=MiniParse.Spec.Base.fst(59,22-65,4)
(implies 
;; def=MiniParse.Spec.Base.fst(60,2-60,100); use=MiniParse.Spec.Base.fst(60,2-60,100)
(and 
;; def=MiniParse.Spec.Base.fst(60,3-60,23); use=MiniParse.Spec.Base.fst(60,3-60,23)
(<= (BoxInt_proj_0 (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x3)))


;; def=MiniParse.Spec.Base.fst(60,27-60,56); use=MiniParse.Spec.Base.fst(60,27-60,56)
(<= (BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x3))
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x2)))


;; def=MiniParse.Spec.Base.fst(60,60-60,99); use=MiniParse.Spec.Base.fst(60,60-60,99)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x3
(BoxInt 0)
(FStar.Pervasives.Native.Mktuple2__2 @lb5))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x2
(BoxInt 0)
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
)


;; def=MiniParse.Spec.Base.fst(61,2-65,3); use=MiniParse.Spec.Base.fst(61,2-65,3)
(and 
;; def=MiniParse.Spec.Base.fst(61,2-61,21); use=MiniParse.Spec.Base.fst(61,2-61,21)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x3))
(MiniParse.Spec.Base.bparse @x0
@x1
@x3)))

(let ((@lb6 (MiniParse.Spec.Base.bparse @x0
@x1
@x3)))
(ite (is-FStar.Pervasives.Native.Some @lb6)
(let ((@lb7 (FStar.Pervasives.Native.Some_v @lb6)))

;; def=MiniParse.Spec.Base.fst(64,2-64,42); use=MiniParse.Spec.Base.fst(64,2-64,42)
(and 
;; def=MiniParse.Spec.Base.fst(64,2-64,9); use=MiniParse.Spec.Base.fst(64,2-64,9)
(= (FStar.Pervasives.Native.Mktuple2__1 @lb5)
(FStar.Pervasives.Native.Mktuple2__1 @lb7))


;; def=MiniParse.Spec.Base.fst(64,13-64,42); use=MiniParse.Spec.Base.fst(64,13-64,42)
(= (FStar.Pervasives.Native.Mktuple2__2 @lb5)
(FStar.Pervasives.Native.Mktuple2__2 @lb7))
)
)
Unreachable)))
)
)
Unreachable)))
)
 

:pattern ((MiniParse.Spec.Base.no_lookahead_weak_on @x0
@x1
@x2
@x3))
:qid equation_MiniParse.Spec.Base.no_lookahead_weak_on))

:named equation_MiniParse.Spec.Base.no_lookahead_weak_on))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Base.no_lookahead_weak
;;; Fact-ids: Name MiniParse.Spec.Base.no_lookahead_weak; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(81,4-81,21); use=MiniParse.Spec.Base.fst(81,4-81,21)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (MiniParse.Spec.Base.no_lookahead_weak @x0
@x1))

;; def=MiniParse.Spec.Base.fst(85,2-85,53); use=MiniParse.Spec.Base.fst(85,2-85,53)
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
MiniParse.Spec.Base.bytes)
(HasType @x3
MiniParse.Spec.Base.bytes))

;; def=MiniParse.Spec.Base.fst(85,26-85,53); use=MiniParse.Spec.Base.fst(85,26-85,53)
(Valid 
;; def=MiniParse.Spec.Base.fst(85,26-85,53); use=MiniParse.Spec.Base.fst(85,26-85,53)
(MiniParse.Spec.Base.no_lookahead_weak_on @x0
@x1
@x2
@x3)
)
)
 
;;no pats
:qid equation_MiniParse.Spec.Base.no_lookahead_weak.1))
)
 

:pattern ((MiniParse.Spec.Base.no_lookahead_weak @x0
@x1))
:qid equation_MiniParse.Spec.Base.no_lookahead_weak))

:named equation_MiniParse.Spec.Base.no_lookahead_weak))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Base.no_lookahead_on_precond
;;; Fact-ids: Name MiniParse.Spec.Base.no_lookahead_on_precond; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(172,4-172,27); use=MiniParse.Spec.Base.fst(172,4-172,27)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Valid (MiniParse.Spec.Base.no_lookahead_on_precond @x0
@x1
@x2
@x3))

;; def=MiniParse.Spec.Base.fst(177,2-182,3); use=MiniParse.Spec.Base.fst(177,2-182,3)
(and 
;; def=MiniParse.Spec.Base.fst(177,2-177,20); use=MiniParse.Spec.Base.fst(177,2-177,20)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x2))
(MiniParse.Spec.Base.bparse @x0
@x1
@x2)))

(let ((@lb4 (MiniParse.Spec.Base.bparse @x0
@x1
@x2)))
(ite (is-FStar.Pervasives.Native.Some @lb4)
(let ((@lb5 (FStar.Pervasives.Native.Some_v @lb4)))

;; def=MiniParse.Spec.Base.fst(180,4-181,43); use=MiniParse.Spec.Base.fst(180,4-181,43)
(and 
;; def=MiniParse.Spec.Base.fst(180,4-180,24); use=MiniParse.Spec.Base.fst(180,4-180,24)
(<= (BoxInt_proj_0 (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x3)))


;; def=MiniParse.Spec.Base.fst(181,4-181,43); use=MiniParse.Spec.Base.fst(181,4-181,43)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x3
(BoxInt 0)
(FStar.Pervasives.Native.Mktuple2__2 @lb5))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x2
(BoxInt 0)
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
)
)
Unreachable)))
)
 

:pattern ((MiniParse.Spec.Base.no_lookahead_on_precond @x0
@x1
@x2
@x3))
:qid equation_MiniParse.Spec.Base.no_lookahead_on_precond))

:named equation_MiniParse.Spec.Base.no_lookahead_on_precond))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Base.no_lookahead_on_postcond
;;; Fact-ids: Name MiniParse.Spec.Base.no_lookahead_on_postcond; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(184,4-184,28); use=MiniParse.Spec.Base.fst(184,4-184,28)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Valid (MiniParse.Spec.Base.no_lookahead_on_postcond @x0
@x1
@x2
@x3))

;; def=MiniParse.Spec.Base.fst(189,2-196,4); use=MiniParse.Spec.Base.fst(189,2-196,4)
(implies 
;; def=MiniParse.Spec.Base.fst(189,2-189,20); use=MiniParse.Spec.Base.fst(189,2-189,20)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x2))
(MiniParse.Spec.Base.bparse @x0
@x1
@x2)))

(let ((@lb4 (MiniParse.Spec.Base.bparse @x0
@x1
@x2)))
(ite (is-FStar.Pervasives.Native.Some @lb4)
(let ((@lb5 (FStar.Pervasives.Native.Some_v @lb4)))

;; def=MiniParse.Spec.Base.fst(192,2-196,3); use=MiniParse.Spec.Base.fst(192,2-196,3)
(and 
;; def=MiniParse.Spec.Base.fst(192,2-192,21); use=MiniParse.Spec.Base.fst(192,2-192,21)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x3))
(MiniParse.Spec.Base.bparse @x0
@x1
@x3)))

(let ((@lb6 (MiniParse.Spec.Base.bparse @x0
@x1
@x3)))
(ite (is-FStar.Pervasives.Native.Some @lb6)
(let ((@lb7 (FStar.Pervasives.Native.Some_v @lb6)))

;; def=MiniParse.Spec.Base.fst(195,2-195,9); use=MiniParse.Spec.Base.fst(195,2-195,9)
(= (FStar.Pervasives.Native.Mktuple2__1 @lb5)
(FStar.Pervasives.Native.Mktuple2__1 @lb7))
)
Unreachable)))
)
Unreachable)))
)
 

:pattern ((MiniParse.Spec.Base.no_lookahead_on_postcond @x0
@x1
@x2
@x3))
:qid equation_MiniParse.Spec.Base.no_lookahead_on_postcond))

:named equation_MiniParse.Spec.Base.no_lookahead_on_postcond))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Base.no_lookahead_on
;;; Fact-ids: Name MiniParse.Spec.Base.no_lookahead_on; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(198,4-198,19); use=MiniParse.Spec.Base.fst(198,4-198,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Valid (MiniParse.Spec.Base.no_lookahead_on @x0
@x1
@x2
@x3))

;; def=MiniParse.Spec.Base.fst(203,2-203,68); use=MiniParse.Spec.Base.fst(203,2-203,68)
(implies 
;; def=MiniParse.Spec.Base.fst(203,2-203,32); use=MiniParse.Spec.Base.fst(203,2-203,32)
(Valid 
;; def=MiniParse.Spec.Base.fst(203,2-203,32); use=MiniParse.Spec.Base.fst(203,2-203,32)
(MiniParse.Spec.Base.no_lookahead_on_precond @x0
@x1
@x2
@x3)
)


;; def=MiniParse.Spec.Base.fst(203,37-203,68); use=MiniParse.Spec.Base.fst(203,37-203,68)
(Valid 
;; def=MiniParse.Spec.Base.fst(203,37-203,68); use=MiniParse.Spec.Base.fst(203,37-203,68)
(MiniParse.Spec.Base.no_lookahead_on_postcond @x0
@x1
@x2
@x3)
)
)
)
 

:pattern ((MiniParse.Spec.Base.no_lookahead_on @x0
@x1
@x2
@x3))
:qid equation_MiniParse.Spec.Base.no_lookahead_on))

:named equation_MiniParse.Spec.Base.no_lookahead_on))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Base.no_lookahead
;;; Fact-ids: Name MiniParse.Spec.Base.no_lookahead; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(219,4-219,16); use=MiniParse.Spec.Base.fst(219,4-219,16)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (MiniParse.Spec.Base.no_lookahead @x0
@x1))

;; def=MiniParse.Spec.Base.fst(223,2-223,48); use=MiniParse.Spec.Base.fst(223,2-223,48)
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
MiniParse.Spec.Base.bytes)
(HasType @x3
MiniParse.Spec.Base.bytes))

;; def=MiniParse.Spec.Base.fst(223,26-223,48); use=MiniParse.Spec.Base.fst(223,26-223,48)
(Valid 
;; def=MiniParse.Spec.Base.fst(223,26-223,48); use=MiniParse.Spec.Base.fst(223,26-223,48)
(MiniParse.Spec.Base.no_lookahead_on @x0
@x1
@x2
@x3)
)
)
 
;;no pats
:qid equation_MiniParse.Spec.Base.no_lookahead.1))
)
 

:pattern ((MiniParse.Spec.Base.no_lookahead @x0
@x1))
:qid equation_MiniParse.Spec.Base.no_lookahead))

:named equation_MiniParse.Spec.Base.no_lookahead))
;;;;;;;;;;;;;;;;Prop-typing for MiniParse.Spec.Base.no_lookahead_weak_on
;;; Fact-ids: Name MiniParse.Spec.Base.no_lookahead_weak_on; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(52,4-52,24); use=MiniParse.Spec.Base.fst(52,4-52,24)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.bare_parser @x0))
(HasType @x2
MiniParse.Spec.Base.bytes)
(HasType @x3
MiniParse.Spec.Base.bytes))
(Valid (Prims.subtype_of (MiniParse.Spec.Base.no_lookahead_weak_on @x0
@x1
@x2
@x3)
Prims.unit)))
 

:pattern ((Prims.subtype_of (MiniParse.Spec.Base.no_lookahead_weak_on @x0
@x1
@x2
@x3)
Prims.unit))
:qid defn_equation_MiniParse.Spec.Base.no_lookahead_weak_on))

:named defn_equation_MiniParse.Spec.Base.no_lookahead_weak_on))
;;;;;;;;;;;;;;;;Prop-typing for MiniParse.Spec.Base.no_lookahead_weak
;;; Fact-ids: Name MiniParse.Spec.Base.no_lookahead_weak; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(81,4-81,21); use=MiniParse.Spec.Base.fst(81,4-81,21)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.bare_parser @x0)))
(Valid (Prims.subtype_of (MiniParse.Spec.Base.no_lookahead_weak @x0
@x1)
Prims.unit)))
 

:pattern ((Prims.subtype_of (MiniParse.Spec.Base.no_lookahead_weak @x0
@x1)
Prims.unit))
:qid defn_equation_MiniParse.Spec.Base.no_lookahead_weak))

:named defn_equation_MiniParse.Spec.Base.no_lookahead_weak))
;;;;;;;;;;;;;;;;Prop-typing for MiniParse.Spec.Base.no_lookahead_on_precond
;;; Fact-ids: Name MiniParse.Spec.Base.no_lookahead_on_precond; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(172,4-172,27); use=MiniParse.Spec.Base.fst(172,4-172,27)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.bare_parser @x0))
(HasType @x2
MiniParse.Spec.Base.bytes)
(HasType @x3
MiniParse.Spec.Base.bytes))
(Valid (Prims.subtype_of (MiniParse.Spec.Base.no_lookahead_on_precond @x0
@x1
@x2
@x3)
Prims.unit)))
 

:pattern ((Prims.subtype_of (MiniParse.Spec.Base.no_lookahead_on_precond @x0
@x1
@x2
@x3)
Prims.unit))
:qid defn_equation_MiniParse.Spec.Base.no_lookahead_on_precond))

:named defn_equation_MiniParse.Spec.Base.no_lookahead_on_precond))
;;;;;;;;;;;;;;;;Prop-typing for MiniParse.Spec.Base.no_lookahead_on_postcond
;;; Fact-ids: Name MiniParse.Spec.Base.no_lookahead_on_postcond; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(184,4-184,28); use=MiniParse.Spec.Base.fst(184,4-184,28)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.bare_parser @x0))
(HasType @x2
MiniParse.Spec.Base.bytes)
(HasType @x3
MiniParse.Spec.Base.bytes))
(Valid (Prims.subtype_of (MiniParse.Spec.Base.no_lookahead_on_postcond @x0
@x1
@x2
@x3)
Prims.unit)))
 

:pattern ((Prims.subtype_of (MiniParse.Spec.Base.no_lookahead_on_postcond @x0
@x1
@x2
@x3)
Prims.unit))
:qid defn_equation_MiniParse.Spec.Base.no_lookahead_on_postcond))

:named defn_equation_MiniParse.Spec.Base.no_lookahead_on_postcond))
;;;;;;;;;;;;;;;;Prop-typing for MiniParse.Spec.Base.no_lookahead_on
;;; Fact-ids: Name MiniParse.Spec.Base.no_lookahead_on; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(198,4-198,19); use=MiniParse.Spec.Base.fst(198,4-198,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.bare_parser @x0))
(HasType @x2
MiniParse.Spec.Base.bytes)
(HasType @x3
MiniParse.Spec.Base.bytes))
(Valid (Prims.subtype_of (MiniParse.Spec.Base.no_lookahead_on @x0
@x1
@x2
@x3)
Prims.unit)))
 

:pattern ((Prims.subtype_of (MiniParse.Spec.Base.no_lookahead_on @x0
@x1
@x2
@x3)
Prims.unit))
:qid defn_equation_MiniParse.Spec.Base.no_lookahead_on))

:named defn_equation_MiniParse.Spec.Base.no_lookahead_on))
;;;;;;;;;;;;;;;;Prop-typing for MiniParse.Spec.Base.no_lookahead
;;; Fact-ids: Name MiniParse.Spec.Base.no_lookahead; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(219,4-219,16); use=MiniParse.Spec.Base.fst(219,4-219,16)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.bare_parser @x0)))
(Valid (Prims.subtype_of (MiniParse.Spec.Base.no_lookahead @x0
@x1)
Prims.unit)))
 

:pattern ((Prims.subtype_of (MiniParse.Spec.Base.no_lookahead @x0
@x1)
Prims.unit))
:qid defn_equation_MiniParse.Spec.Base.no_lookahead))

:named defn_equation_MiniParse.Spec.Base.no_lookahead))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name MiniParse.Spec.Base.parser_spec; Namespace MiniParse.Spec.Base; Name MiniParse.Spec.Base.Parser; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(240,4-240,10); use=MiniParse.Spec.Base.fst(240,4-240,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
(Tm_refine_95482e91a565bbc8d113ac6e95692d97 @x1)))
(HasTypeFuel @u0
(MiniParse.Spec.Base.Parser @x1
@x2)
(MiniParse.Spec.Base.parser_spec @x1)))
 

:pattern ((HasTypeFuel @u0
(MiniParse.Spec.Base.Parser @x1
@x2)
(MiniParse.Spec.Base.parser_spec @x1)))
:qid data_typing_intro_MiniParse.Spec.Base.Parser@tok))

:named data_typing_intro_MiniParse.Spec.Base.Parser@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name MiniParse.Spec.Base.parser_spec; Namespace MiniParse.Spec.Base; Name MiniParse.Spec.Base.Parser; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(240,4-240,10); use=MiniParse.Spec.Base.fst(240,4-240,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(MiniParse.Spec.Base.Parser @x1
@x2)
(MiniParse.Spec.Base.parser_spec @x3))
(and (HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x2
(Tm_refine_95482e91a565bbc8d113ac6e95692d97 @x3))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(MiniParse.Spec.Base.Parser @x1
@x2)
(MiniParse.Spec.Base.parser_spec @x3)))
:qid data_elim_MiniParse.Spec.Base.Parser))

:named data_elim_MiniParse.Spec.Base.Parser))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name MiniParse.Spec.Base.parser_spec; Namespace MiniParse.Spec.Base; Name MiniParse.Spec.Base.Parser; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(238,5-238,16); use=MiniParse.Spec.Base.fst(238,5-238,16)
(forall ((@x0 Term))
 (! (= 128
(Term_constr_id (MiniParse.Spec.Base.parser_spec @x0)))
 

:pattern ((MiniParse.Spec.Base.parser_spec @x0))
:qid constructor_distinct_MiniParse.Spec.Base.parser_spec))

:named constructor_distinct_MiniParse.Spec.Base.parser_spec))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name MiniParse.Spec.Base.parser_spec; Namespace MiniParse.Spec.Base; Name MiniParse.Spec.Base.Parser; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(240,4-240,10); use=MiniParse.Spec.Base.fst(240,4-240,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= 136
(Term_constr_id (MiniParse.Spec.Base.Parser @x0
@x1)))
 

:pattern ((MiniParse.Spec.Base.Parser @x0
@x1))
:qid constructor_distinct_MiniParse.Spec.Base.Parser))

:named constructor_distinct_MiniParse.Spec.Base.Parser))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name MiniParse.Spec.Base.parser_spec; Namespace MiniParse.Spec.Base; Name MiniParse.Spec.Base.Parser; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(238,5-238,16); use=MiniParse.Spec.Base.fst(238,5-238,16)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(MiniParse.Spec.Base.parser_spec @x2))
(= (MiniParse.Spec.Base.parser_spec @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(MiniParse.Spec.Base.parser_spec @x2)))
:qid MiniParse.Spec.Base_pretyping_51873c019c11bc8ab61e1ad685b56f87))

:named MiniParse.Spec.Base_pretyping_51873c019c11bc8ab61e1ad685b56f87))
(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(105,1-107,10)

(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)



; Encoding query formula : forall (sz: Prims.nat)
;   (t: Type)
;   (f:
;   (s: MiniParse.Spec.Base.bytes{FStar.Seq.Base.length s == sz}
;       -> Prims.GTot (FStar.Pervasives.Native.option t))).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post (MiniParse.Spec.Base.parser_spec t)).
;     MiniParse.Spec.Combinators.make_constant_size_parser_precond sz t f /\
;     (forall (pure_result: MiniParse.Spec.Base.parser_spec t). Prims.auto_squash (p pure_result)) ==>
;     MiniParse.Spec.Combinators.make_constant_size_parser_precond sz t f /\
;     (forall (pure_result: Prims.unit).
;         MiniParse.Spec.Base.injective (MiniParse.Spec.Combinators.make_constant_size_parser_aux sz
;               t
;               f) ==>
;         MiniParse.Spec.Base.no_lookahead_weak (MiniParse.Spec.Combinators.make_constant_size_parser_aux
;               sz
;               t
;               f) /\
;         MiniParse.Spec.Base.injective (MiniParse.Spec.Combinators.make_constant_size_parser_aux sz
;               t
;               f) /\
;         MiniParse.Spec.Base.no_lookahead (MiniParse.Spec.Combinators.make_constant_size_parser_aux sz
;               t
;               f) /\
;         (forall (any_result: MiniParse.Spec.Base.bare_parser t).
;             MiniParse.Spec.Combinators.make_constant_size_parser_aux sz t f == any_result ==>
;             (forall (any_result: MiniParse.Spec.Base.parser_spec t).
;                 any_result ==
;                 MiniParse.Spec.Base.Parser
;                 (MiniParse.Spec.Combinators.make_constant_size_parser_aux sz t f) ==>
;                 (forall (return_val: MiniParse.Spec.Base.parser_spec t).
;                     return_val == any_result ==> p return_val))))


; Context: While encoding a query
; While typechecking the top-level declaration `let make_constant_size_parser`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Tm_type)
(HasType @x2
(Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240 @x1
@x0)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post (MiniParse.Spec.Base.parser_spec @x1)))

;; def=MiniParse.Spec.Combinators.fst(101,12-103,3); use=MiniParse.Spec.Combinators.fst(105,1-107,10)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(101,12-103,3); use=MiniParse.Spec.Combinators.fst(105,1-107,10)
(MiniParse.Spec.Combinators.make_constant_size_parser_precond @x0
@x1
@x2)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(105,1-107,10)
(forall ((@x4 Term))
 (! (implies (or label_1
(HasType @x4
(MiniParse.Spec.Base.parser_spec @x1)))

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(105,1-107,10)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(105,1-107,10)
(ApplyTT @x3
@x4)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(105,1-107,10)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(105,1-107,10)
(ApplyTT @x3
@x4)
)
)
:qid @query.2))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(106,2-106,37)
(and 
;; def=MiniParse.Spec.Combinators.fst(72,12-74,3); use=MiniParse.Spec.Combinators.fst(106,2-106,37)
(or label_2

;; def=MiniParse.Spec.Combinators.fst(72,12-74,3); use=MiniParse.Spec.Combinators.fst(106,2-106,37)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(72,12-74,3); use=MiniParse.Spec.Combinators.fst(106,2-106,37)
(MiniParse.Spec.Combinators.make_constant_size_parser_precond @x0
@x1
@x2)
)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(106,2-106,37)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(75,11-77,3); use=MiniParse.Spec.Combinators.fst(106,2-106,37)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(75,11-77,3); use=MiniParse.Spec.Combinators.fst(106,2-106,37)
(MiniParse.Spec.Base.injective @x1
(MiniParse.Spec.Combinators.make_constant_size_parser_aux @x0
@x1
@x2))
)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(105,1-107,10)
(and 
;; def=MiniParse.Spec.Base.fst(241,4-241,23); use=MiniParse.Spec.Combinators.fst(107,9-107,10)
(or label_3

;; def=MiniParse.Spec.Base.fst(241,4-241,23); use=MiniParse.Spec.Combinators.fst(107,9-107,10)
(Valid 
;; def=MiniParse.Spec.Base.fst(241,4-241,23); use=MiniParse.Spec.Combinators.fst(107,9-107,10)
(MiniParse.Spec.Base.no_lookahead_weak @x1
(MiniParse.Spec.Combinators.make_constant_size_parser_aux @x0
@x1
@x2))
)
)


;; def=MiniParse.Spec.Base.fst(242,4-242,15); use=MiniParse.Spec.Combinators.fst(107,9-107,10)
(or label_4

;; def=MiniParse.Spec.Base.fst(242,4-242,15); use=MiniParse.Spec.Combinators.fst(107,9-107,10)
(Valid 
;; def=MiniParse.Spec.Base.fst(242,4-242,15); use=MiniParse.Spec.Combinators.fst(107,9-107,10)
(MiniParse.Spec.Base.injective @x1
(MiniParse.Spec.Combinators.make_constant_size_parser_aux @x0
@x1
@x2))
)
)


;; def=MiniParse.Spec.Base.fst(243,4-243,18); use=MiniParse.Spec.Combinators.fst(107,9-107,10)
(or label_5

;; def=MiniParse.Spec.Base.fst(243,4-243,18); use=MiniParse.Spec.Combinators.fst(107,9-107,10)
(Valid 
;; def=MiniParse.Spec.Base.fst(243,4-243,18); use=MiniParse.Spec.Combinators.fst(107,9-107,10)
(MiniParse.Spec.Base.no_lookahead @x1
(MiniParse.Spec.Combinators.make_constant_size_parser_aux @x0
@x1
@x2))
)
)


;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(105,1-107,10)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(MiniParse.Spec.Base.bare_parser @x1))

;; def=MiniParse.Spec.Base.fst(240,14-240,15); use=MiniParse.Spec.Combinators.fst(105,1-107,10)
(= (MiniParse.Spec.Combinators.make_constant_size_parser_aux @x0
@x1
@x2)
@x5)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(105,1-107,10)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(MiniParse.Spec.Base.parser_spec @x1))

;; def=MiniParse.Spec.Combinators.fst(100,7-107,10); use=MiniParse.Spec.Combinators.fst(105,1-107,10)
(= @x6
(MiniParse.Spec.Base.Parser @x1
(MiniParse.Spec.Combinators.make_constant_size_parser_aux @x0
@x1
@x2)))
)

;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(MiniParse.Spec.Base.parser_spec @x1))

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x7
@x6)
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x3
@x7)
)
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.make_constant_size_parser, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_FStar.Pervasives.Native.None, constructor_distinct_FStar.Pervasives.Native.Some, constructor_distinct_Tm_unit, data_elim_FStar.Pervasives.Native.Some, disc_equation_FStar.Pervasives.Native.Some, equation_MiniParse.Spec.Base.bare_parser, equation_MiniParse.Spec.Base.bparse, equation_MiniParse.Spec.Base.consumed_length, equation_MiniParse.Spec.Base.no_lookahead, equation_MiniParse.Spec.Base.no_lookahead_on, equation_MiniParse.Spec.Base.no_lookahead_on_postcond, equation_MiniParse.Spec.Base.no_lookahead_on_precond, equation_MiniParse.Spec.Base.no_lookahead_weak, equation_MiniParse.Spec.Base.no_lookahead_weak_on, equation_MiniParse.Spec.Combinators.make_constant_size_parser_aux, equation_Prims.nat, fuel_guarded_inversion_FStar.Pervasives.Native.option, fuel_guarded_inversion_FStar.Pervasives.Native.tuple2, int_inversion, interpretation_Tm_abs_32e00b3026b589e7656aa22095079513, kinding_FStar.Pervasives.Native.tuple2@tok, primitive_Prims.op_LessThan, projection_inverse_BoxBool_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_FStar.Pervasives.Native.Some_v, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, typing_FStar.Pervasives.Native.uu___is_Some, typing_MiniParse.Spec.Base.bparse, typing_MiniParse.Spec.Base.consumed_length, typing_Tm_abs_32e00b3026b589e7656aa22095079513

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let make_constant_size_parser


; <Start encoding let make_constant_size_parser>



(declare-fun MiniParse.Spec.Combinators.make_constant_size_parser (Term Term Term) Term)



;;;;;;;;;;;;;;;;sz: Prims.nat ->     t: Type ->     f:       (s: MiniParse.Spec.Base.bytes{FStar.Seq.Base.length s == sz}           -> Prims.GTot (FStar.Pervasives.Native.option t))   -> Prims.Pure (MiniParse.Spec.Base.parser_spec t)
(declare-fun Tm_arrow_083db3aed6954c91c161500c17f64bd8 () Term)
(declare-fun MiniParse.Spec.Combinators.make_constant_size_parser@tok () Term)




; </end encoding let make_constant_size_parser>


; encoding sigelt let make_total_constant_size_parser_precond


; <Start encoding let make_total_constant_size_parser_precond>


;;;;;;;;;;;;;;;;s: MiniParse.Spec.Base.bytes{FStar.Seq.Base.length s == sz} -> Prims.GTot t
(declare-fun Tm_ghost_arrow_f221ab63d8461933925e6e711c0deafa (Term Term) Term)
(declare-fun MiniParse.Spec.Combinators.make_total_constant_size_parser_precond (Term Term Term) Term)


;;;;;;;;;;;;;;;;sz: Prims.nat ->     t: Type ->     f: (s: MiniParse.Spec.Base.bytes{FStar.Seq.Base.length s == sz} -> Prims.GTot t)   -> Prims.GTot Type
(declare-fun Tm_arrow_fb2a384f05c48412a21ada1565eb73eb () Term)
(declare-fun MiniParse.Spec.Combinators.make_total_constant_size_parser_precond@tok () Term)





; </end encoding let make_total_constant_size_parser_precond>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Combinators.make_total_constant_size_parser_precond; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(109,4-109,43); use=MiniParse.Spec.Combinators.fst(109,4-109,43)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Tm_type)
(HasType @x2
(Tm_ghost_arrow_f221ab63d8461933925e6e711c0deafa @x1
@x0)))
(HasType (MiniParse.Spec.Combinators.make_total_constant_size_parser_precond @x0
@x1
@x2)
Tm_type))
 

:pattern ((MiniParse.Spec.Combinators.make_total_constant_size_parser_precond @x0
@x1
@x2))
:qid typing_MiniParse.Spec.Combinators.make_total_constant_size_parser_precond))

:named typing_MiniParse.Spec.Combinators.make_total_constant_size_parser_precond))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Combinators.make_constant_size_parser; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(96,4-96,29); use=MiniParse.Spec.Combinators.fst(96,4-96,29)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and 
;; def=MiniParse.Spec.Combinators.fst(101,12-103,3); use=MiniParse.Spec.Combinators.fst(101,12-103,3)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(101,12-103,3); use=MiniParse.Spec.Combinators.fst(101,12-103,3)
(MiniParse.Spec.Combinators.make_constant_size_parser_precond @x0
@x1
@x2)
)

(HasType @x0
Prims.nat)
(HasType @x1
Tm_type)
(HasType @x2
(Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240 @x1
@x0)))
(HasType (MiniParse.Spec.Combinators.make_constant_size_parser @x0
@x1
@x2)
(Tm_refine_795fb455fe887e79d318ca3f6d129a29 @x1)))
 

:pattern ((MiniParse.Spec.Combinators.make_constant_size_parser @x0
@x1
@x2))
:qid typing_MiniParse.Spec.Combinators.make_constant_size_parser))

:named typing_MiniParse.Spec.Combinators.make_constant_size_parser))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name MiniParse.Spec.Base.coerce_parser; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(274,7-274,23); use=MiniParse.Spec.Base.fst(274,7-274,23)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_795fb455fe887e79d318ca3f6d129a29 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_795fb455fe887e79d318ca3f6d129a29 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_795fb455fe887e79d318ca3f6d129a29))

:named refinement_kinding_Tm_refine_795fb455fe887e79d318ca3f6d129a29))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name MiniParse.Spec.Base.coerce_parser; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(274,7-274,23); use=MiniParse.Spec.Base.fst(274,7-274,23)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_795fb455fe887e79d318ca3f6d129a29 @x2))
(HasTypeFuel @u0
@x1
(MiniParse.Spec.Base.parser_spec @x2)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_795fb455fe887e79d318ca3f6d129a29 @x2)))
:qid refinement_interpretation_Tm_refine_795fb455fe887e79d318ca3f6d129a29))

:named refinement_interpretation_Tm_refine_795fb455fe887e79d318ca3f6d129a29))
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_f221ab63d8461933925e6e711c0deafa
;;; Fact-ids: Name MiniParse.Spec.Combinators.make_total_constant_size_parser_precond; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(111,3-112,38); use=MiniParse.Spec.Combinators.fst(112,7-112,48)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_ghost_arrow_f221ab63d8461933925e6e711c0deafa @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_ghost_arrow_f221ab63d8461933925e6e711c0deafa @x0
@x1)
Tm_type))
:qid kinding_Tm_ghost_arrow_f221ab63d8461933925e6e711c0deafa))

:named kinding_Tm_ghost_arrow_f221ab63d8461933925e6e711c0deafa))
;;;;;;;;;;;;;;;;haseq for Tm_refine_795fb455fe887e79d318ca3f6d129a29
;;; Fact-ids: Name MiniParse.Spec.Base.coerce_parser; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(274,7-274,23); use=MiniParse.Spec.Base.fst(274,7-274,23)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_795fb455fe887e79d318ca3f6d129a29 @x0)))
(Valid (Prims.hasEq (MiniParse.Spec.Base.parser_spec @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_795fb455fe887e79d318ca3f6d129a29 @x0))))
:qid haseqTm_refine_795fb455fe887e79d318ca3f6d129a29))

:named haseqTm_refine_795fb455fe887e79d318ca3f6d129a29))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Combinators.make_total_constant_size_parser_precond
;;; Fact-ids: Name MiniParse.Spec.Combinators.make_total_constant_size_parser_precond; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(109,4-109,43); use=MiniParse.Spec.Combinators.fst(109,4-109,43)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Valid (MiniParse.Spec.Combinators.make_total_constant_size_parser_precond @x0
@x1
@x2))

;; def=MiniParse.Spec.Combinators.fst(114,2-115,34); use=MiniParse.Spec.Combinators.fst(114,2-115,34)
(forall ((@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x3
(Tm_refine_1634311840211d2f5a6f87aecae0847c @x0))
(HasType @x4
(Tm_refine_1634311840211d2f5a6f87aecae0847c @x0))

;; def=MiniParse.Spec.Combinators.fst(115,2-115,14); use=MiniParse.Spec.Combinators.fst(115,2-115,14)
(= (ApplyTT @x2
@x3)
(ApplyTT @x2
@x4))
)

;; def=MiniParse.Spec.Combinators.fst(115,19-115,34); use=MiniParse.Spec.Combinators.fst(115,19-115,34)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(115,19-115,34); use=MiniParse.Spec.Combinators.fst(115,19-115,34)
(FStar.Seq.Base.equal (MiniParse.Spec.Base.byte Dummy_value)
@x3
@x4)
)
)
 
;;no pats
:qid equation_MiniParse.Spec.Combinators.make_total_constant_size_parser_precond.1))
)
 

:pattern ((MiniParse.Spec.Combinators.make_total_constant_size_parser_precond @x0
@x1
@x2))
:qid equation_MiniParse.Spec.Combinators.make_total_constant_size_parser_precond))

:named equation_MiniParse.Spec.Combinators.make_total_constant_size_parser_precond))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Combinators.make_constant_size_parser
;;; Fact-ids: Name MiniParse.Spec.Combinators.make_constant_size_parser; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(96,4-96,29); use=MiniParse.Spec.Combinators.fst(96,4-96,29)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (MiniParse.Spec.Combinators.make_constant_size_parser @x0
@x1
@x2)
(MiniParse.Spec.Base.Parser @x1
(MiniParse.Spec.Combinators.make_constant_size_parser_aux @x0
@x1
@x2)))
 

:pattern ((MiniParse.Spec.Combinators.make_constant_size_parser @x0
@x1
@x2))
:qid equation_MiniParse.Spec.Combinators.make_constant_size_parser))

:named equation_MiniParse.Spec.Combinators.make_constant_size_parser))
;;;;;;;;;;;;;;;;Prop-typing for MiniParse.Spec.Combinators.make_total_constant_size_parser_precond
;;; Fact-ids: Name MiniParse.Spec.Combinators.make_total_constant_size_parser_precond; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(109,4-109,43); use=MiniParse.Spec.Combinators.fst(109,4-109,43)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Tm_type)
(HasType @x2
(Tm_ghost_arrow_f221ab63d8461933925e6e711c0deafa @x1
@x0)))
(Valid (Prims.subtype_of (MiniParse.Spec.Combinators.make_total_constant_size_parser_precond @x0
@x1
@x2)
Prims.unit)))
 

:pattern ((Prims.subtype_of (MiniParse.Spec.Combinators.make_total_constant_size_parser_precond @x0
@x1
@x2)
Prims.unit))
:qid defn_equation_MiniParse.Spec.Combinators.make_total_constant_size_parser_precond))

:named defn_equation_MiniParse.Spec.Combinators.make_total_constant_size_parser_precond))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name MiniParse.Spec.Combinators.make_total_constant_size_parser_precond; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(111,3-112,38); use=MiniParse.Spec.Combinators.fst(112,7-112,48)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_ghost_arrow_f221ab63d8461933925e6e711c0deafa @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_ghost_arrow_f221ab63d8461933925e6e711c0deafa @x2
@x3)))
:qid MiniParse.Spec.Combinators_pre_typing_Tm_ghost_arrow_f221ab63d8461933925e6e711c0deafa))

:named MiniParse.Spec.Combinators_pre_typing_Tm_ghost_arrow_f221ab63d8461933925e6e711c0deafa))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_f221ab63d8461933925e6e711c0deafa
;;; Fact-ids: Name MiniParse.Spec.Combinators.make_total_constant_size_parser_precond; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(111,3-112,38); use=MiniParse.Spec.Combinators.fst(112,7-112,48)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_ghost_arrow_f221ab63d8461933925e6e711c0deafa @x1
@x2))

;; def=MiniParse.Spec.Combinators.fst(111,3-112,38); use=MiniParse.Spec.Combinators.fst(112,7-112,48)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Tm_refine_1634311840211d2f5a6f87aecae0847c @x2))
(HasType (ApplyTT @x0
@x3)
@x1))
 

:pattern ((ApplyTT @x0
@x3))
:qid MiniParse.Spec.Combinators_interpretation_Tm_ghost_arrow_f221ab63d8461933925e6e711c0deafa.1))
)
 

:pattern ((HasTypeZ @x0
(Tm_ghost_arrow_f221ab63d8461933925e6e711c0deafa @x1
@x2)))
:qid MiniParse.Spec.Combinators_interpretation_Tm_ghost_arrow_f221ab63d8461933925e6e711c0deafa))

:named MiniParse.Spec.Combinators_interpretation_Tm_ghost_arrow_f221ab63d8461933925e6e711c0deafa))
(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(126,2-126,54)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)





(declare-fun Tm_abs_8322151be44905be95082db1bf1d0c5b (Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_8322151be44905be95082db1bf1d0c5b
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(126,43-126,53); use=MiniParse.Spec.Combinators.fst(126,2-126,27)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_abs_8322151be44905be95082db1bf1d0c5b @x0
@x1
@x2)
(Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240 @x1
@x2))
 

:pattern ((Tm_abs_8322151be44905be95082db1bf1d0c5b @x0
@x1
@x2))
:qid typing_Tm_abs_8322151be44905be95082db1bf1d0c5b))

:named typing_Tm_abs_8322151be44905be95082db1bf1d0c5b))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_8322151be44905be95082db1bf1d0c5b
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(126,43-126,53); use=MiniParse.Spec.Combinators.fst(126,2-126,27)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (Tm_abs_8322151be44905be95082db1bf1d0c5b @x1
@x2
@x3)
@x0)
(FStar.Pervasives.Native.Some @x2
(ApplyTT @x1
@x0)))
 

:pattern ((ApplyTT (Tm_abs_8322151be44905be95082db1bf1d0c5b @x1
@x2
@x3)
@x0))
:qid interpretation_Tm_abs_8322151be44905be95082db1bf1d0c5b))

:named interpretation_Tm_abs_8322151be44905be95082db1bf1d0c5b))





; Encoding query formula : forall (sz: Prims.nat)
;   (t: Type)
;   (f: (s: MiniParse.Spec.Base.bytes{FStar.Seq.Base.length s == sz} -> Prims.GTot t)).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post (MiniParse.Spec.Base.parser_spec t)).
;     MiniParse.Spec.Combinators.make_total_constant_size_parser_precond sz t f /\
;     (forall (pure_result: MiniParse.Spec.Base.parser_spec t). Prims.auto_squash (p pure_result)) ==>
;     MiniParse.Spec.Combinators.make_constant_size_parser_precond sz
;       t
;       (fun x -> FStar.Pervasives.Native.Some (f x)) /\
;     (forall (pure_result: MiniParse.Spec.Base.parser_spec t).
;         pure_result ==
;         MiniParse.Spec.Combinators.make_constant_size_parser sz
;           t
;           (fun x -> FStar.Pervasives.Native.Some (f x)) ==>
;         (forall (return_val: MiniParse.Spec.Base.parser_spec t).
;             return_val == pure_result ==> p return_val))


; Context: While encoding a query
; While typechecking the top-level declaration `let make_total_constant_size_parser`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Tm_type)
(HasType @x2
(Tm_ghost_arrow_f221ab63d8461933925e6e711c0deafa @x1
@x0)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post (MiniParse.Spec.Base.parser_spec @x1)))

;; def=MiniParse.Spec.Combinators.fst(122,12-124,3); use=MiniParse.Spec.Combinators.fst(126,2-126,54)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(122,12-124,3); use=MiniParse.Spec.Combinators.fst(126,2-126,54)
(MiniParse.Spec.Combinators.make_total_constant_size_parser_precond @x0
@x1
@x2)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(126,2-126,54)
(forall ((@x4 Term))
 (! (implies (or label_1
(HasType @x4
(MiniParse.Spec.Base.parser_spec @x1)))

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(126,2-126,54)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(126,2-126,54)
(ApplyTT @x3
@x4)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(126,2-126,54)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(126,2-126,54)
(ApplyTT @x3
@x4)
)
)
:qid @query.2))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(126,2-126,54)
(and 
;; def=MiniParse.Spec.Combinators.fst(101,12-103,3); use=MiniParse.Spec.Combinators.fst(126,2-126,27)
(or label_2

;; def=MiniParse.Spec.Combinators.fst(101,12-103,3); use=MiniParse.Spec.Combinators.fst(126,2-126,27)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(101,12-103,3); use=MiniParse.Spec.Combinators.fst(126,2-126,27)
(MiniParse.Spec.Combinators.make_constant_size_parser_precond @x0
@x1
(Tm_abs_8322151be44905be95082db1bf1d0c5b @x2
@x1
@x0))
)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(126,2-126,54)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(MiniParse.Spec.Base.parser_spec @x1))

;; def=MiniParse.Spec.Combinators.fst(121,7-126,54); use=MiniParse.Spec.Combinators.fst(126,2-126,54)
(= @x4
(MiniParse.Spec.Combinators.make_constant_size_parser @x0
@x1
(Tm_abs_8322151be44905be95082db1bf1d0c5b @x2
@x1
@x0)))
)

;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(MiniParse.Spec.Base.parser_spec @x1))

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x5
@x4)
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x3
@x5)
)
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.make_total_constant_size_parser, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_MiniParse.Spec.Combinators.make_constant_size_parser_precond, equation_MiniParse.Spec.Combinators.make_constant_size_parser_precond_precond, equation_MiniParse.Spec.Combinators.make_total_constant_size_parser_precond, equation_Prims.nat, int_inversion, interpretation_Tm_abs_8322151be44905be95082db1bf1d0c5b, projection_inverse_FStar.Pervasives.Native.Some_v, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let make_total_constant_size_parser


; <Start encoding let make_total_constant_size_parser>



(declare-fun MiniParse.Spec.Combinators.make_total_constant_size_parser (Term Term Term) Term)



;;;;;;;;;;;;;;;;sz: Prims.nat ->     t: Type ->     f: (s: MiniParse.Spec.Base.bytes{FStar.Seq.Base.length s == sz} -> Prims.GTot t)   -> Prims.Pure (MiniParse.Spec.Base.parser_spec t)
(declare-fun Tm_arrow_28acdfb17e03d0ec2985262c88a90437 () Term)
(declare-fun MiniParse.Spec.Combinators.make_total_constant_size_parser@tok () Term)






(declare-fun Tm_abs_8322151be44905be95082db1bf1d0c5b (Term Term Term) Term)

; </end encoding let make_total_constant_size_parser>

(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(133,2-133,54)

(declare-fun label_1 () Bool)

; Encoding query formula : forall (t: Type) (v: t).
;   (*  - Could not prove post-condition
; *)
;   forall (b: MiniParse.Spec.Base.bytes).
;     (*  - Could not prove post-condition
; *) 0 <= FStar.Seq.Base.length b


; Context: While encoding a query
; While typechecking the top-level declaration `let parse_ret'`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0))

;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(133,2-133,54)
(forall ((@x2 Term))
 (! (implies (HasType @x2
MiniParse.Spec.Base.bytes)

;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(133,30-133,31)
(or label_1

;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(133,30-133,31)
(<= (BoxInt_proj_0 (BoxInt 0))
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x2)))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.parse_ret', 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_MiniParse.Spec.Base.byte, equation_MiniParse.Spec.Base.bytes, equation_Prims.eqtype, equation_Prims.nat, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, typing_FStar.Seq.Base.length, typing_FStar.UInt8.t

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let parse_ret'


; <Start encoding let parse_ret'>

(declare-fun MiniParse.Spec.Combinators.parse_ret_ (Term Term) Term)
;;;;;;;;;;;;;;;;v: t -> MiniParse.Spec.Base.bare_parser t
(declare-fun Tm_arrow_2a6c8f4253e64ac531bca23f9dd950ea () Term)
(declare-fun MiniParse.Spec.Combinators.parse_ret_@tok () Term)

(declare-fun Tm_abs_24c49183d745861a79c9e705ccd478d5 (Term Term) Term)

; </end encoding let parse_ret'>

;;;;;;;;;;;;;;;;typing_Tm_abs_24c49183d745861a79c9e705ccd478d5
;;; Fact-ids: Name MiniParse.Spec.Combinators.parse_ret'; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(133,20-133,54); use=MiniParse.Spec.Combinators.fst(133,20-133,54)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_abs_24c49183d745861a79c9e705ccd478d5 @x0
@x1)
(Tm_ghost_arrow_84eb031c18bd35e3c76ba4886d9ede0b @x1))
 

:pattern ((Tm_abs_24c49183d745861a79c9e705ccd478d5 @x0
@x1))
:qid typing_Tm_abs_24c49183d745861a79c9e705ccd478d5))

:named typing_Tm_abs_24c49183d745861a79c9e705ccd478d5))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_24c49183d745861a79c9e705ccd478d5
;;; Fact-ids: Name MiniParse.Spec.Combinators.parse_ret'; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(133,20-133,54); use=MiniParse.Spec.Combinators.fst(133,20-133,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (Tm_abs_24c49183d745861a79c9e705ccd478d5 @x1
@x2)
@x0)
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x2
(MiniParse.Spec.Base.consumed_length @x0))
(FStar.Pervasives.Native.Mktuple2 @x2
(MiniParse.Spec.Base.consumed_length @x0)
@x1
(BoxInt 0))))
 

:pattern ((ApplyTT (Tm_abs_24c49183d745861a79c9e705ccd478d5 @x1
@x2)
@x0))
:qid interpretation_Tm_abs_24c49183d745861a79c9e705ccd478d5))

:named interpretation_Tm_abs_24c49183d745861a79c9e705ccd478d5))
(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(136,2-136,23)

(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)







; Encoding query formula : forall (t: Type) (v: t).
;   (*  - Could not prove post-condition
; *)
;   MiniParse.Spec.Base.no_lookahead_weak (fun b -> FStar.Pervasives.Native.Some (v, 0)) /\
;   MiniParse.Spec.Base.injective (fun b -> FStar.Pervasives.Native.Some (v, 0)) /\
;   MiniParse.Spec.Base.no_lookahead (fun b -> FStar.Pervasives.Native.Some (v, 0))


; Context: While encoding a query
; While typechecking the top-level declaration `let parse_ret`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0))

;; def=MiniParse.Spec.Base.fst(241,4-243,18); use=MiniParse.Spec.Combinators.fst(136,9-136,23)
(and 
;; def=MiniParse.Spec.Base.fst(241,4-241,23); use=MiniParse.Spec.Combinators.fst(136,9-136,23)
(or label_1

;; def=MiniParse.Spec.Base.fst(241,4-241,23); use=MiniParse.Spec.Combinators.fst(136,9-136,23)
(Valid 
;; def=MiniParse.Spec.Base.fst(241,4-241,23); use=MiniParse.Spec.Combinators.fst(136,9-136,23)
(MiniParse.Spec.Base.no_lookahead_weak @x0
(Tm_abs_24c49183d745861a79c9e705ccd478d5 @x1
@x0))
)
)


;; def=MiniParse.Spec.Base.fst(242,4-242,15); use=MiniParse.Spec.Combinators.fst(136,9-136,23)
(or label_2

;; def=MiniParse.Spec.Base.fst(242,4-242,15); use=MiniParse.Spec.Combinators.fst(136,9-136,23)
(Valid 
;; def=MiniParse.Spec.Base.fst(242,4-242,15); use=MiniParse.Spec.Combinators.fst(136,9-136,23)
(MiniParse.Spec.Base.injective @x0
(Tm_abs_24c49183d745861a79c9e705ccd478d5 @x1
@x0))
)
)


;; def=MiniParse.Spec.Base.fst(243,4-243,18); use=MiniParse.Spec.Combinators.fst(136,9-136,23)
(or label_3

;; def=MiniParse.Spec.Base.fst(243,4-243,18); use=MiniParse.Spec.Combinators.fst(136,9-136,23)
(Valid 
;; def=MiniParse.Spec.Base.fst(243,4-243,18); use=MiniParse.Spec.Combinators.fst(136,9-136,23)
(MiniParse.Spec.Base.no_lookahead @x0
(Tm_abs_24c49183d745861a79c9e705ccd478d5 @x1
@x0))
)
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.parse_ret, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_FStar.Pervasives.Native.Some, disc_equation_FStar.Pervasives.Native.Some, equation_MiniParse.Spec.Base.bare_parser, equation_MiniParse.Spec.Base.bparse, equation_MiniParse.Spec.Base.byte, equation_MiniParse.Spec.Base.bytes, equation_MiniParse.Spec.Base.consumed_length, equation_MiniParse.Spec.Base.injective, equation_MiniParse.Spec.Base.injective_postcond, equation_MiniParse.Spec.Base.injective_precond, equation_MiniParse.Spec.Base.no_lookahead, equation_MiniParse.Spec.Base.no_lookahead_on, equation_MiniParse.Spec.Base.no_lookahead_on_postcond, equation_MiniParse.Spec.Base.no_lookahead_on_precond, equation_MiniParse.Spec.Base.no_lookahead_weak, equation_MiniParse.Spec.Base.no_lookahead_weak_on, equation_Prims.eqtype, equation_Prims.nat, fuel_guarded_inversion_FStar.Pervasives.Native.option, int_typing, interpretation_Tm_abs_24c49183d745861a79c9e705ccd478d5, kinding_FStar.Pervasives.Native.tuple2@tok, lemma_FStar.Seq.Properties.slice_is_empty, projection_inverse_BoxBool_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_FStar.Pervasives.Native.Some_a, projection_inverse_FStar.Pervasives.Native.Some_v, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_b361ba8089a6e963921008d537e799a1, typing_FStar.Pervasives.Native.uu___is_Some, typing_FStar.Seq.Base.length, typing_FStar.UInt8.t, typing_MiniParse.Spec.Base.bparse, typing_MiniParse.Spec.Base.consumed_length, typing_Tm_abs_24c49183d745861a79c9e705ccd478d5

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let parse_ret


; <Start encoding let parse_ret>

(declare-fun MiniParse.Spec.Combinators.parse_ret (Term Term) Term)
;;;;;;;;;;;;;;;;v: t -> MiniParse.Spec.Base.parser_spec t
(declare-fun Tm_arrow_110e7a3862efadc1f211f09444b2675b () Term)
(declare-fun MiniParse.Spec.Combinators.parse_ret@tok () Term)



; </end encoding let parse_ret>


; encoding sigelt let parse_empty


; <Start encoding let parse_empty>

(declare-fun MiniParse.Spec.Combinators.parse_empty (Dummy_sort) Term)

; </end encoding let parse_empty>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Combinators.parse_ret; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(135,4-135,13); use=MiniParse.Spec.Combinators.fst(135,4-135,13)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0))
(HasType (MiniParse.Spec.Combinators.parse_ret @x0
@x1)
(MiniParse.Spec.Base.parser_spec @x0)))
 

:pattern ((MiniParse.Spec.Combinators.parse_ret @x0
@x1))
:qid typing_MiniParse.Spec.Combinators.parse_ret))

:named typing_MiniParse.Spec.Combinators.parse_ret))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Combinators.parse_empty; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(138,4-138,15); use=MiniParse.Spec.Combinators.fst(138,4-138,15)
(forall ((@u0 Dummy_sort))
 (! (HasType (MiniParse.Spec.Combinators.parse_empty @u0)
(MiniParse.Spec.Base.parser_spec Prims.unit))
 

:pattern ((MiniParse.Spec.Combinators.parse_empty @u0))
:qid typing_MiniParse.Spec.Combinators.parse_empty))

:named typing_MiniParse.Spec.Combinators.parse_empty))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Base.serializer_correct; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(287,4-287,22); use=MiniParse.Spec.Base.fst(287,4-287,22)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.parser_spec @x0))
(HasType @x2
(MiniParse.Spec.Base.bare_serializer @x0)))
(HasType (MiniParse.Spec.Base.serializer_correct @x0
@x1
@x2)
Tm_type))
 

:pattern ((MiniParse.Spec.Base.serializer_correct @x0
@x1
@x2))
:qid typing_MiniParse.Spec.Base.serializer_correct))

:named typing_MiniParse.Spec.Base.serializer_correct))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Base.parse; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(250,4-250,9); use=MiniParse.Spec.Base.fst(250,4-250,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.parser_spec @x0))
(HasType @x2
MiniParse.Spec.Base.bytes))
(HasType (MiniParse.Spec.Base.parse @x0
@x1
@x2)
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x2)))))
 

:pattern ((MiniParse.Spec.Base.parse @x0
@x1
@x2))
:qid typing_MiniParse.Spec.Base.parse))

:named typing_MiniParse.Spec.Base.parse))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Base.bare_serializer; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(282,4-282,19); use=MiniParse.Spec.Base.fst(282,4-282,19)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (MiniParse.Spec.Base.bare_serializer @x0)
Tm_type))
 

:pattern ((MiniParse.Spec.Base.bare_serializer @x0))
:qid typing_MiniParse.Spec.Base.bare_serializer))

:named typing_MiniParse.Spec.Base.bare_serializer))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Base.__proj__Parser__item__f; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(240,14-240,15); use=MiniParse.Spec.Base.fst(240,14-240,15)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.parser_spec @x0)))
(HasType (MiniParse.Spec.Base.__proj__Parser__item__f @x0
@x1)
(Tm_refine_95482e91a565bbc8d113ac6e95692d97 @x0)))
 

:pattern ((MiniParse.Spec.Base.__proj__Parser__item__f @x0
@x1))
:qid typing_MiniParse.Spec.Base.__proj__Parser__item__f))

:named typing_MiniParse.Spec.Base.__proj__Parser__item__f))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name MiniParse.Spec.Base.__proj__Parser__item__f; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(240,14-240,15); use=MiniParse.Spec.Base.fst(240,14-240,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (MiniParse.Spec.Base.__proj__Parser__item__f @x0
@x1)
(MiniParse.Spec.Base.Parser_f @x1))
 

:pattern ((MiniParse.Spec.Base.__proj__Parser__item__f @x0
@x1))
:qid proj_equation_MiniParse.Spec.Base.Parser_f))

:named proj_equation_MiniParse.Spec.Base.Parser_f))
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_4502d1a2310fff506c14a9e7677ba599
;;; Fact-ids: Name MiniParse.Spec.Base.bare_serializer; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(283,3-285,17); use=MiniParse.Spec.Base.fst(285,2-285,17)
(forall ((@x0 Term))
 (! (HasType (Tm_ghost_arrow_4502d1a2310fff506c14a9e7677ba599 @x0)
Tm_type)
 

:pattern ((HasType (Tm_ghost_arrow_4502d1a2310fff506c14a9e7677ba599 @x0)
Tm_type))
:qid kinding_Tm_ghost_arrow_4502d1a2310fff506c14a9e7677ba599))

:named kinding_Tm_ghost_arrow_4502d1a2310fff506c14a9e7677ba599))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Combinators.parse_ret
;;; Fact-ids: Name MiniParse.Spec.Combinators.parse_ret; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(135,4-135,13); use=MiniParse.Spec.Combinators.fst(135,4-135,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (MiniParse.Spec.Combinators.parse_ret @x0
@x1)
(MiniParse.Spec.Base.Parser @x0
(Tm_abs_24c49183d745861a79c9e705ccd478d5 @x1
@x0)))
 

:pattern ((MiniParse.Spec.Combinators.parse_ret @x0
@x1))
:qid equation_MiniParse.Spec.Combinators.parse_ret))

:named equation_MiniParse.Spec.Combinators.parse_ret))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Combinators.parse_empty
;;; Fact-ids: Name MiniParse.Spec.Combinators.parse_empty; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(138,4-138,15); use=MiniParse.Spec.Combinators.fst(138,4-138,15)
(forall ((@u0 Dummy_sort))
 (! (= 
;; def=MiniParse.Spec.Combinators.fst(138,4-138,15); use=MiniParse.Spec.Combinators.fst(138,4-138,15)
(MiniParse.Spec.Combinators.parse_empty @u0)

(MiniParse.Spec.Combinators.parse_ret Prims.unit
Tm_unit))
 

:pattern (
;; def=MiniParse.Spec.Combinators.fst(138,4-138,15); use=MiniParse.Spec.Combinators.fst(138,4-138,15)
(MiniParse.Spec.Combinators.parse_empty @u0)
)
:qid equation_MiniParse.Spec.Combinators.parse_empty))

:named equation_MiniParse.Spec.Combinators.parse_empty))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Base.serializer_correct
;;; Fact-ids: Name MiniParse.Spec.Base.serializer_correct; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(287,4-287,22); use=MiniParse.Spec.Base.fst(287,4-287,22)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Valid (MiniParse.Spec.Base.serializer_correct @x0
@x1
@x2))

;; def=MiniParse.Spec.Base.fst(292,2-292,61); use=MiniParse.Spec.Base.fst(292,2-292,61)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x0)

;; def=MiniParse.Spec.Base.fst(292,18-292,61); use=MiniParse.Spec.Base.fst(292,18-292,61)
(= (MiniParse.Spec.Base.parse @x0
@x1
(ApplyTT @x2
@x3))
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length (ApplyTT @x2
@x3)))
(FStar.Pervasives.Native.Mktuple2 @x0
(MiniParse.Spec.Base.consumed_length (ApplyTT @x2
@x3))
@x3
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(ApplyTT @x2
@x3)))))
)
 
;;no pats
:qid equation_MiniParse.Spec.Base.serializer_correct.1))
)
 

:pattern ((MiniParse.Spec.Base.serializer_correct @x0
@x1
@x2))
:qid equation_MiniParse.Spec.Base.serializer_correct))

:named equation_MiniParse.Spec.Base.serializer_correct))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Base.parse
;;; Fact-ids: Name MiniParse.Spec.Base.parse; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(250,4-250,9); use=MiniParse.Spec.Base.fst(250,4-250,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (MiniParse.Spec.Base.parse @x0
@x1
@x2)
(MiniParse.Spec.Base.bparse @x0
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
@x1)
@x2))
 

:pattern ((MiniParse.Spec.Base.parse @x0
@x1
@x2))
:qid equation_MiniParse.Spec.Base.parse))

:named equation_MiniParse.Spec.Base.parse))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Base.bare_serializer
;;; Fact-ids: Name MiniParse.Spec.Base.bare_serializer; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(282,4-282,19); use=MiniParse.Spec.Base.fst(282,4-282,19)
(forall ((@x0 Term))
 (! (= (MiniParse.Spec.Base.bare_serializer @x0)
(Tm_ghost_arrow_4502d1a2310fff506c14a9e7677ba599 @x0))
 

:pattern ((MiniParse.Spec.Base.bare_serializer @x0))
:qid equation_MiniParse.Spec.Base.bare_serializer))

:named equation_MiniParse.Spec.Base.bare_serializer))
;;;;;;;;;;;;;;;;Prop-typing for MiniParse.Spec.Base.serializer_correct
;;; Fact-ids: Name MiniParse.Spec.Base.serializer_correct; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(287,4-287,22); use=MiniParse.Spec.Base.fst(287,4-287,22)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.parser_spec @x0))
(HasType @x2
(MiniParse.Spec.Base.bare_serializer @x0)))
(Valid (Prims.subtype_of (MiniParse.Spec.Base.serializer_correct @x0
@x1
@x2)
Prims.unit)))
 

:pattern ((Prims.subtype_of (MiniParse.Spec.Base.serializer_correct @x0
@x1
@x2)
Prims.unit))
:qid defn_equation_MiniParse.Spec.Base.serializer_correct))

:named defn_equation_MiniParse.Spec.Base.serializer_correct))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name MiniParse.Spec.Base.bare_serializer; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(283,3-285,17); use=MiniParse.Spec.Base.fst(285,2-285,17)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_ghost_arrow_4502d1a2310fff506c14a9e7677ba599 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_ghost_arrow_4502d1a2310fff506c14a9e7677ba599 @x2)))
:qid MiniParse.Spec.Base_pre_typing_Tm_ghost_arrow_4502d1a2310fff506c14a9e7677ba599))

:named MiniParse.Spec.Base_pre_typing_Tm_ghost_arrow_4502d1a2310fff506c14a9e7677ba599))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_4502d1a2310fff506c14a9e7677ba599
;;; Fact-ids: Name MiniParse.Spec.Base.bare_serializer; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(283,3-285,17); use=MiniParse.Spec.Base.fst(285,2-285,17)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_ghost_arrow_4502d1a2310fff506c14a9e7677ba599 @x1))

;; def=MiniParse.Spec.Base.fst(283,3-285,17); use=MiniParse.Spec.Base.fst(285,2-285,17)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x1)
(HasType (ApplyTT @x0
@x2)
MiniParse.Spec.Base.bytes))
 

:pattern ((ApplyTT @x0
@x2))
:qid MiniParse.Spec.Base_interpretation_Tm_ghost_arrow_4502d1a2310fff506c14a9e7677ba599.1))
)
 

:pattern ((HasTypeZ @x0
(Tm_ghost_arrow_4502d1a2310fff506c14a9e7677ba599 @x1)))
:qid MiniParse.Spec.Base_interpretation_Tm_ghost_arrow_4502d1a2310fff506c14a9e7677ba599))

:named MiniParse.Spec.Base_interpretation_Tm_ghost_arrow_4502d1a2310fff506c14a9e7677ba599))
(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(141,0-142,33)

(declare-fun label_1 () Bool)
;;;;;;;;;;;;;;;;_: Prims.unit -> Prims.GTot MiniParse.Spec.Base.bytes
(declare-fun Tm_ghost_arrow_065db388c73c60fcaf4d830a33b1ff74 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_065db388c73c60fcaf4d830a33b1ff74
;;; Fact-ids: 
(assert (! (HasType Tm_ghost_arrow_065db388c73c60fcaf4d830a33b1ff74
Tm_type)
:named kinding_Tm_ghost_arrow_065db388c73c60fcaf4d830a33b1ff74))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(138,30-138,34); use=MiniParse.Spec.Combinators.fst(142,2-142,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_ghost_arrow_065db388c73c60fcaf4d830a33b1ff74)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_ghost_arrow_065db388c73c60fcaf4d830a33b1ff74))
:qid MiniParse.Spec.Combinators_pre_typing_Tm_ghost_arrow_065db388c73c60fcaf4d830a33b1ff74))

:named MiniParse.Spec.Combinators_pre_typing_Tm_ghost_arrow_065db388c73c60fcaf4d830a33b1ff74))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_065db388c73c60fcaf4d830a33b1ff74
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(138,30-138,34); use=MiniParse.Spec.Combinators.fst(142,2-142,12)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_ghost_arrow_065db388c73c60fcaf4d830a33b1ff74)

;; def=MiniParse.Spec.Combinators.fst(138,30-138,34); use=MiniParse.Spec.Combinators.fst(142,2-142,12)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.unit)
(HasType (ApplyTT @x0
@x1)
MiniParse.Spec.Base.bytes))
 

:pattern ((ApplyTT @x0
@x1))
:qid MiniParse.Spec.Combinators_interpretation_Tm_ghost_arrow_065db388c73c60fcaf4d830a33b1ff74.1))
)
 

:pattern ((HasTypeZ @x0
Tm_ghost_arrow_065db388c73c60fcaf4d830a33b1ff74))
:qid MiniParse.Spec.Combinators_interpretation_Tm_ghost_arrow_065db388c73c60fcaf4d830a33b1ff74))

:named MiniParse.Spec.Combinators_interpretation_Tm_ghost_arrow_065db388c73c60fcaf4d830a33b1ff74))
(declare-fun Tm_abs_2d7aa5d41af7bc79e9fc4e0c42fe10d4 () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_2d7aa5d41af7bc79e9fc4e0c42fe10d4
;;; Fact-ids: 
(assert (! (HasType Tm_abs_2d7aa5d41af7bc79e9fc4e0c42fe10d4
Tm_ghost_arrow_065db388c73c60fcaf4d830a33b1ff74)
:named typing_Tm_abs_2d7aa5d41af7bc79e9fc4e0c42fe10d4))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_2d7aa5d41af7bc79e9fc4e0c42fe10d4
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(142,23-142,32); use=MiniParse.Spec.Combinators.fst(142,23-142,32)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_2d7aa5d41af7bc79e9fc4e0c42fe10d4
@x0)
(FStar.Seq.Base.empty (MiniParse.Spec.Base.byte Dummy_value)))
 

:pattern ((ApplyTT Tm_abs_2d7aa5d41af7bc79e9fc4e0c42fe10d4
@x0))
:qid interpretation_Tm_abs_2d7aa5d41af7bc79e9fc4e0c42fe10d4))

:named interpretation_Tm_abs_2d7aa5d41af7bc79e9fc4e0c42fe10d4))

; Encoding query formula : Prims.auto_squash (MiniParse.Spec.Base.serializer_correct MiniParse.Spec.Combinators.parse_empty
;       (fun _ -> seq![]))


; Context: While encoding a query
; While checking for top-level effects
; While typechecking the top-level declaration `let serialize_empty`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=MiniParse.Spec.Base.fst(343,41-343,63); use=MiniParse.Spec.Combinators.fst(142,23-142,32)
(or label_1

;; def=MiniParse.Spec.Base.fst(343,41-343,63); use=MiniParse.Spec.Combinators.fst(142,23-142,32)
(Valid 
;; def=MiniParse.Spec.Base.fst(343,41-343,63); use=MiniParse.Spec.Combinators.fst(142,23-142,32)
(MiniParse.Spec.Base.serializer_correct Prims.unit
(MiniParse.Spec.Combinators.parse_empty Dummy_value)
Tm_abs_2d7aa5d41af7bc79e9fc4e0c42fe10d4)
)
)
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.serialize_empty, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_MiniParse.Spec.Base.bparse, equation_MiniParse.Spec.Base.byte, equation_MiniParse.Spec.Base.parse, equation_MiniParse.Spec.Base.serializer_correct, equation_MiniParse.Spec.Combinators.parse_empty, equation_MiniParse.Spec.Combinators.parse_ret, equation_Prims.eqtype, interpretation_Tm_abs_24c49183d745861a79c9e705ccd478d5, interpretation_Tm_abs_2d7aa5d41af7bc79e9fc4e0c42fe10d4, proj_equation_MiniParse.Spec.Base.Parser_f, projection_inverse_MiniParse.Spec.Base.Parser_f, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_b913a3f691ca99086652e0a655e72f17, typing_FStar.Seq.Base.empty, typing_FStar.UInt8.t, unit_inversion

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let serialize_empty


; <Start encoding let serialize_empty>

(declare-fun MiniParse.Spec.Combinators.serialize_empty (Dummy_sort) Term)
;;;;;;;;;;;;;;;;_: Prims.unit -> Prims.GTot MiniParse.Spec.Base.bytes
(declare-fun Tm_ghost_arrow_065db388c73c60fcaf4d830a33b1ff74 () Term)
(declare-fun Tm_abs_2d7aa5d41af7bc79e9fc4e0c42fe10d4 () Term)

; </end encoding let serialize_empty>


; encoding sigelt #set-options "--z3rlimit 16"


; <Skipped #set-options "--z3rlimit 16"/>


; encoding sigelt let fail_parser'


; <Start encoding let fail_parser'>

(declare-fun MiniParse.Spec.Combinators.fail_parser_ (Term) Term)
;;;;;;;;;;;;;;;;t: Type -> MiniParse.Spec.Base.bare_parser t
(declare-fun Tm_arrow_af7cd95b3e1e1a8b5c28944e7040a457 () Term)
(declare-fun MiniParse.Spec.Combinators.fail_parser_@tok () Term)

(declare-fun Tm_abs_70f489119d60d8732ac22a9de0b5f7be (Term) Term)

; </end encoding let fail_parser'>

;;;;;;;;;;;;;;;;typing_Tm_abs_70f489119d60d8732ac22a9de0b5f7be
;;; Fact-ids: Name MiniParse.Spec.Combinators.fail_parser'; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(149,11-149,15); use=MiniParse.Spec.Combinators.fst(149,11-149,15)
(forall ((@x0 Term))
 (! (HasType (Tm_abs_70f489119d60d8732ac22a9de0b5f7be @x0)
(Tm_ghost_arrow_84eb031c18bd35e3c76ba4886d9ede0b @x0))
 

:pattern ((Tm_abs_70f489119d60d8732ac22a9de0b5f7be @x0))
:qid typing_Tm_abs_70f489119d60d8732ac22a9de0b5f7be))

:named typing_Tm_abs_70f489119d60d8732ac22a9de0b5f7be))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Combinators.fail_parser'; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(146,4-146,16); use=MiniParse.Spec.Combinators.fst(146,4-146,16)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (MiniParse.Spec.Combinators.fail_parser_ @x0)
(MiniParse.Spec.Base.bare_parser @x0)))
 

:pattern ((MiniParse.Spec.Combinators.fail_parser_ @x0))
:qid typing_MiniParse.Spec.Combinators.fail_parser_))

:named typing_MiniParse.Spec.Combinators.fail_parser_))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_70f489119d60d8732ac22a9de0b5f7be
;;; Fact-ids: Name MiniParse.Spec.Combinators.fail_parser'; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(149,11-149,15); use=MiniParse.Spec.Combinators.fst(149,11-149,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (Tm_abs_70f489119d60d8732ac22a9de0b5f7be @x1)
@x0)
(FStar.Pervasives.Native.None (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x0))))
 

:pattern ((ApplyTT (Tm_abs_70f489119d60d8732ac22a9de0b5f7be @x1)
@x0))
:qid interpretation_Tm_abs_70f489119d60d8732ac22a9de0b5f7be))

:named interpretation_Tm_abs_70f489119d60d8732ac22a9de0b5f7be))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Combinators.fail_parser'
;;; Fact-ids: Name MiniParse.Spec.Combinators.fail_parser'; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(146,4-146,16); use=MiniParse.Spec.Combinators.fst(146,4-146,16)
(forall ((@x0 Term))
 (! (= (MiniParse.Spec.Combinators.fail_parser_ @x0)
(Tm_abs_70f489119d60d8732ac22a9de0b5f7be @x0))
 

:pattern ((MiniParse.Spec.Combinators.fail_parser_ @x0))
:qid equation_MiniParse.Spec.Combinators.fail_parser_))

:named equation_MiniParse.Spec.Combinators.fail_parser_))
(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(154,1-155,10)

(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (t: Type).
;   (*  - Could not prove post-condition
; *)
;   MiniParse.Spec.Base.no_lookahead_weak (MiniParse.Spec.Combinators.fail_parser' t) /\
;   MiniParse.Spec.Base.injective (MiniParse.Spec.Combinators.fail_parser' t) /\
;   MiniParse.Spec.Base.no_lookahead (MiniParse.Spec.Combinators.fail_parser' t)


; Context: While encoding a query
; While typechecking the top-level declaration `let fail_parser`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)

;; def=MiniParse.Spec.Base.fst(241,4-243,18); use=MiniParse.Spec.Combinators.fst(155,9-155,10)
(and 
;; def=MiniParse.Spec.Base.fst(241,4-241,23); use=MiniParse.Spec.Combinators.fst(155,9-155,10)
(or label_1

;; def=MiniParse.Spec.Base.fst(241,4-241,23); use=MiniParse.Spec.Combinators.fst(155,9-155,10)
(Valid 
;; def=MiniParse.Spec.Base.fst(241,4-241,23); use=MiniParse.Spec.Combinators.fst(155,9-155,10)
(MiniParse.Spec.Base.no_lookahead_weak @x0
(MiniParse.Spec.Combinators.fail_parser_ @x0))
)
)


;; def=MiniParse.Spec.Base.fst(242,4-242,15); use=MiniParse.Spec.Combinators.fst(155,9-155,10)
(or label_2

;; def=MiniParse.Spec.Base.fst(242,4-242,15); use=MiniParse.Spec.Combinators.fst(155,9-155,10)
(Valid 
;; def=MiniParse.Spec.Base.fst(242,4-242,15); use=MiniParse.Spec.Combinators.fst(155,9-155,10)
(MiniParse.Spec.Base.injective @x0
(MiniParse.Spec.Combinators.fail_parser_ @x0))
)
)


;; def=MiniParse.Spec.Base.fst(243,4-243,18); use=MiniParse.Spec.Combinators.fst(155,9-155,10)
(or label_3

;; def=MiniParse.Spec.Base.fst(243,4-243,18); use=MiniParse.Spec.Combinators.fst(155,9-155,10)
(Valid 
;; def=MiniParse.Spec.Base.fst(243,4-243,18); use=MiniParse.Spec.Combinators.fst(155,9-155,10)
(MiniParse.Spec.Base.no_lookahead @x0
(MiniParse.Spec.Combinators.fail_parser_ @x0))
)
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 8714496)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.fail_parser, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query, constructor_distinct_FStar.Pervasives.Native.None, disc_equation_FStar.Pervasives.Native.Some, equation_MiniParse.Spec.Base.bparse, equation_MiniParse.Spec.Base.injective, equation_MiniParse.Spec.Base.injective_precond, equation_MiniParse.Spec.Base.no_lookahead, equation_MiniParse.Spec.Base.no_lookahead_on, equation_MiniParse.Spec.Base.no_lookahead_on_precond, equation_MiniParse.Spec.Base.no_lookahead_weak, equation_MiniParse.Spec.Base.no_lookahead_weak_on, equation_MiniParse.Spec.Combinators.fail_parser_, interpretation_Tm_abs_70f489119d60d8732ac22a9de0b5f7be, projection_inverse_BoxBool_proj_0

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let fail_parser


; <Start encoding let fail_parser>

(declare-fun MiniParse.Spec.Combinators.fail_parser (Term) Term)
;;;;;;;;;;;;;;;;t: Type -> MiniParse.Spec.Base.parser_spec t
(declare-fun Tm_arrow_1d43e7980a4a39625918984abc7b9f58 () Term)
(declare-fun MiniParse.Spec.Combinators.fail_parser@tok () Term)

; </end encoding let fail_parser>


; encoding sigelt val MiniParse.Spec.Combinators.and_then_bare


; <Skipped val MiniParse.Spec.Combinators.and_then_bare/>

(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(165,4-176,18)

(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
;;;;;;;;;;;;;;;;_: t -> MiniParse.Spec.Base.bare_parser t'
(declare-fun Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc (Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(161,30-163,20); use=MiniParse.Spec.Combinators.fst(163,4-163,20)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc))

:named kinding_Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(161,30-163,20); use=MiniParse.Spec.Combinators.fst(163,4-163,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc @x2
@x3)))
:qid MiniParse.Spec.Combinators_pre_typing_Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc))

:named MiniParse.Spec.Combinators_pre_typing_Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(161,30-163,20); use=MiniParse.Spec.Combinators.fst(163,4-163,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc @x1
@x2))
(and 
;; def=MiniParse.Spec.Combinators.fst(161,30-163,20); use=MiniParse.Spec.Combinators.fst(163,4-163,20)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)
(HasType (ApplyTT @x0
@x3)
(MiniParse.Spec.Base.bare_parser @x1)))
 

:pattern ((ApplyTT @x0
@x3))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc @x1
@x2)))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc))

:named MiniParse.Spec.Combinators_interpretation_Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc))
(declare-fun Tm_refine_276a81d3c3eadebff56bb9e61978d236 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=MiniParse.Spec.Combinators.fst(169,22-169,27)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_276a81d3c3eadebff56bb9e61978d236))

:named refinement_kinding_Tm_refine_276a81d3c3eadebff56bb9e61978d236))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=MiniParse.Spec.Combinators.fst(169,22-169,27)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.nat)
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x2
@x1))
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x1
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x3)))))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_276a81d3c3eadebff56bb9e61978d236))

:named refinement_interpretation_Tm_refine_276a81d3c3eadebff56bb9e61978d236))
;;;;;;;;;;;;;;;;haseq for Tm_refine_276a81d3c3eadebff56bb9e61978d236
;;; Fact-ids: 
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=MiniParse.Spec.Combinators.fst(169,22-169,27)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x0
@x1)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x0
@x1))))
:qid haseqTm_refine_276a81d3c3eadebff56bb9e61978d236))

:named haseqTm_refine_276a81d3c3eadebff56bb9e61978d236))

; Encoding query formula : forall (t: Type)
;   (t': Type)
;   (p: MiniParse.Spec.Base.bare_parser t)
;   (p': (_: t -> MiniParse.Spec.Base.bare_parser t')).
;   (*  - Could not prove post-condition
; *)
;   forall (b: MiniParse.Spec.Base.bytes).
;     (*  - Could not prove post-condition
; *)
;     forall (any_result: FStar.Pervasives.Native.option (t & MiniParse.Spec.Base.consumed_length b)).
;       MiniParse.Spec.Base.bparse p b == any_result ==>
;       (forall (k:
;           Prims.pure_post (FStar.Pervasives.Native.option (t' &
;                   MiniParse.Spec.Base.consumed_length b))).
;           (forall (x: FStar.Pervasives.Native.option (t' & MiniParse.Spec.Base.consumed_length b)).
;               {:pattern Prims.guard_free (k x)}
;               Prims.auto_squash (k x)) ==>
;           (~(Some? (MiniParse.Spec.Base.bparse p b)) /\ ~(None? (MiniParse.Spec.Base.bparse p b)) ==>
;             Prims.l_False) /\
;           (forall (b: t) (b: MiniParse.Spec.Base.consumed_length b).
;               MiniParse.Spec.Base.bparse p b == FStar.Pervasives.Native.Some (b, b) ==>
;               b <= FStar.Seq.Base.length b && FStar.Seq.Base.length b <= FStar.Seq.Base.length b /\
;               (forall (return_val: j: Prims.nat{b <= j && j <= FStar.Seq.Base.length b}).
;                   return_val == FStar.Seq.Base.length b ==>
;                   (forall (any_result: FStar.Seq.Base.seq MiniParse.Spec.Base.byte).
;                       FStar.Seq.Base.slice b b (FStar.Seq.Base.length b) == any_result ==>
;                       (forall (any_result:
;                           FStar.Pervasives.Native.option (t' &
;                               MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice b
;                                     b
;                                     (FStar.Seq.Base.length b)))).
;                           MiniParse.Spec.Base.bparse (p' b)
;                             (FStar.Seq.Base.slice b b (FStar.Seq.Base.length b)) ==
;                           any_result ==>
;                           (forall (k:
;                               Prims.pure_post (FStar.Pervasives.Native.option (t' &
;                                       MiniParse.Spec.Base.consumed_length b))).
;                               (forall (x:
;                                   FStar.Pervasives.Native.option (t' &
;                                       MiniParse.Spec.Base.consumed_length b)).
;                                   {:pattern Prims.guard_free (k x)}
;                                   Prims.auto_squash (k x)) ==>
;                               (~(Some? (MiniParse.Spec.Base.bparse (p' b)
;                                         (FStar.Seq.Base.slice b b (FStar.Seq.Base.length b)))) /\
;                                 ~(None? (MiniParse.Spec.Base.bparse (p' b)
;                                         (FStar.Seq.Base.slice b b (FStar.Seq.Base.length b)))) ==>
;                                 Prims.l_False) /\
;                               (forall (b: t')
;                                   (b:
;                                   MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice b
;                                         b
;                                         (FStar.Seq.Base.length b))).
;                                   MiniParse.Spec.Base.bparse (p' b)
;                                     (FStar.Seq.Base.slice b b (FStar.Seq.Base.length b)) ==
;                                   FStar.Pervasives.Native.Some (b, b) ==>
;                                   b + b >= 0 /\ b + b <= FStar.Seq.Base.length b)))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let and_then_bare`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(MiniParse.Spec.Base.bare_parser @x0))
(HasType @x3
(Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc @x1
@x0)))

;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(165,4-176,18)
(forall ((@x4 Term))
 (! (implies (HasType @x4
MiniParse.Spec.Base.bytes)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(165,4-176,18)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x4))))

;; def=MiniParse.Spec.Combinators.fst(165,10-165,20); use=MiniParse.Spec.Combinators.fst(165,10-165,20)
(= (MiniParse.Spec.Base.bparse @x0
@x2
@x4)
@x5)
)

;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(165,4-176,18)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Prims.pure_post (FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x4)))))

;; def=Prims.fst(402,27-402,88); use=MiniParse.Spec.Combinators.fst(165,4-176,18)
(forall ((@x7 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=MiniParse.Spec.Combinators.fst(165,4-176,18)
(Valid 
;; def=Prims.fst(402,84-402,87); use=MiniParse.Spec.Combinators.fst(165,4-176,18)
(ApplyTT @x6
@x7)
)

 

:pattern ((ApplyTT @x6
@x7))
:qid @query.4))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(165,4-176,18)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(165,10-165,20); use=MiniParse.Spec.Combinators.fst(165,10-165,20)
(and 
;; def=MiniParse.Spec.Combinators.fst(165,10-165,20); use=MiniParse.Spec.Combinators.fst(165,10-165,20)
(not 
;; def=MiniParse.Spec.Combinators.fst(165,10-165,20); use=MiniParse.Spec.Combinators.fst(165,10-165,20)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x4))
(MiniParse.Spec.Base.bparse @x0
@x2
@x4)))
)


;; def=MiniParse.Spec.Combinators.fst(165,10-165,20); use=MiniParse.Spec.Combinators.fst(165,10-165,20)
(not 
;; def=MiniParse.Spec.Combinators.fst(165,10-165,20); use=MiniParse.Spec.Combinators.fst(165,10-165,20)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x4))
(MiniParse.Spec.Base.bparse @x0
@x2
@x4)))
)
)

label_1)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(165,4-176,18)
(forall ((@x7 Term))
 (! (implies (HasType @x7
@x0)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(165,4-176,18)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(MiniParse.Spec.Base.consumed_length @x4))

;; def=MiniParse.Spec.Combinators.fst(165,10-166,17); use=MiniParse.Spec.Combinators.fst(165,10-166,17)
(= (MiniParse.Spec.Base.bparse @x0
@x2
@x4)
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x4))
(FStar.Pervasives.Native.Mktuple2 @x0
(MiniParse.Spec.Base.consumed_length @x4)
@x7
@x8)))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(165,4-176,18)
(and 
;; def=MiniParse.Spec.Combinators.fst(169,32-169,46); use=MiniParse.Spec.Combinators.fst(169,32-169,46)
(or label_2
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x8
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))


;; def=MiniParse.Spec.Combinators.fst(169,32-169,46); use=MiniParse.Spec.Combinators.fst(169,32-169,46)
(or label_3
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))


;; def=Prims.fst(356,2-356,58); use=MiniParse.Spec.Combinators.fst(165,4-176,18)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x8
@x4))

;; def=Prims.fst(356,26-356,41); use=MiniParse.Spec.Combinators.fst(165,4-176,18)
(= @x9
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(165,4-176,18)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=MiniParse.Spec.Combinators.fst(169,5-169,46); use=MiniParse.Spec.Combinators.fst(169,5-169,46)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x8
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))
@x10)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(165,4-176,18)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x8
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))))

;; def=MiniParse.Spec.Combinators.fst(170,7-170,20); use=MiniParse.Spec.Combinators.fst(170,7-170,20)
(= (MiniParse.Spec.Base.bparse @x1
(ApplyTT @x3
@x7)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x8
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
@x11)
)

;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(165,4-176,18)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
(Prims.pure_post (FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x4)))))

;; def=Prims.fst(402,27-402,88); use=MiniParse.Spec.Combinators.fst(165,4-176,18)
(forall ((@x13 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=MiniParse.Spec.Combinators.fst(165,4-176,18)
(Valid 
;; def=Prims.fst(402,84-402,87); use=MiniParse.Spec.Combinators.fst(165,4-176,18)
(ApplyTT @x12
@x13)
)

 

:pattern ((ApplyTT @x12
@x13))
:qid @query.11))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(165,4-176,18)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(170,7-170,20); use=MiniParse.Spec.Combinators.fst(170,7-170,20)
(and 
;; def=MiniParse.Spec.Combinators.fst(170,7-170,20); use=MiniParse.Spec.Combinators.fst(170,7-170,20)
(not 
;; def=MiniParse.Spec.Combinators.fst(170,7-170,20); use=MiniParse.Spec.Combinators.fst(170,7-170,20)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x8
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
(MiniParse.Spec.Base.bparse @x1
(ApplyTT @x3
@x7)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x8
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))
)


;; def=MiniParse.Spec.Combinators.fst(170,7-170,20); use=MiniParse.Spec.Combinators.fst(170,7-170,20)
(not 
;; def=MiniParse.Spec.Combinators.fst(170,7-170,20); use=MiniParse.Spec.Combinators.fst(170,7-170,20)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x8
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
(MiniParse.Spec.Base.bparse @x1
(ApplyTT @x3
@x7)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x8
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))
)
)

label_4)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(165,4-176,18)
(forall ((@x13 Term))
 (! (implies (HasType @x13
@x1)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(165,4-176,18)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x8
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))

;; def=MiniParse.Spec.Combinators.fst(170,7-171,16); use=MiniParse.Spec.Combinators.fst(170,7-171,16)
(= (MiniParse.Spec.Base.bparse @x1
(ApplyTT @x3
@x7)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x8
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x8
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
(FStar.Pervasives.Native.Mktuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x8
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
@x13
@x14)))
)

;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(172,33-172,39)
(and 
;; def=Prims.fst(680,18-680,24); use=MiniParse.Spec.Combinators.fst(172,33-172,39)
(or label_5

;; def=Prims.fst(680,18-680,24); use=MiniParse.Spec.Combinators.fst(172,33-172,39)
(>= (BoxInt_proj_0 (Prims.op_Addition @x8
@x14))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(172,33-172,39)
(or label_6

;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(172,33-172,39)
(<= (BoxInt_proj_0 (Prims.op_Addition @x8
@x14))
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
)
)
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 8714496)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.and_then_bare, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_MiniParse.Spec.Base.byte, equation_MiniParse.Spec.Base.bytes, equation_MiniParse.Spec.Base.consumed_length, equation_Prims.eqtype, equation_Prims.nat, kinding_FStar.Pervasives.Native.tuple2@tok, lemma_FStar.Pervasives.invertOption, lemma_FStar.Seq.Base.lemma_len_slice, primitive_Prims.op_Addition, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_81407705a0828c2c1b1976675443f647, refinement_interpretation_Tm_refine_f1ef48729dd48b5741a77671cc117cd5, typing_FStar.Seq.Base.length, typing_FStar.UInt8.t, typing_MiniParse.Spec.Base.consumed_length

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let and_then_bare


; <Start encoding let and_then_bare>

;;;;;;;;;;;;;;;;_: t -> MiniParse.Spec.Base.bare_parser t'
(declare-fun Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc (Term Term) Term)
(declare-fun MiniParse.Spec.Combinators.and_then_bare (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;p: MiniParse.Spec.Base.bare_parser t -> p': (_: t -> MiniParse.Spec.Base.bare_parser t')   -> MiniParse.Spec.Base.bare_parser t'
(declare-fun Tm_arrow_6bb246360ddc6453cfe7eb87d2823bde () Term)
(declare-fun MiniParse.Spec.Combinators.and_then_bare@tok () Term)


(declare-fun Tm_abs_5a56d64ec9685d0352c27644697b3e56 (Term Term Term Term) Term)

; </end encoding let and_then_bare>


; encoding sigelt val MiniParse.Spec.Combinators.and_then_no_lookahead_weak_on


; <Skipped val MiniParse.Spec.Combinators.and_then_no_lookahead_weak_on/>

;;;;;;;;;;;;;;;;typing_Tm_abs_5a56d64ec9685d0352c27644697b3e56
;;; Fact-ids: Name MiniParse.Spec.Combinators.and_then_bare; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(165,4-176,18); use=MiniParse.Spec.Combinators.fst(165,4-176,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_abs_5a56d64ec9685d0352c27644697b3e56 @x0
@x1
@x2
@x3)
(Tm_ghost_arrow_84eb031c18bd35e3c76ba4886d9ede0b @x3))
 

:pattern ((Tm_abs_5a56d64ec9685d0352c27644697b3e56 @x0
@x1
@x2
@x3))
:qid typing_Tm_abs_5a56d64ec9685d0352c27644697b3e56))

:named typing_Tm_abs_5a56d64ec9685d0352c27644697b3e56))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_and; Namespace Prims
(assert (! 
;; def=Prims.fst(188,5-188,10); use=Prims.fst(188,5-188,10)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.logical)
(HasType @x1
Prims.logical))
(HasType (Prims.l_and @x0
@x1)
Prims.logical))
 

:pattern ((Prims.l_and @x0
@x1))
:qid typing_Prims.l_and))

:named typing_Prims.l_and))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.eq2; Namespace Prims
(assert (! 
;; def=Prims.fst(175,5-175,8); use=Prims.fst(175,5-175,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0)
(HasType @x2
@x0))
(HasType (Prims.eq2 @x0
@x1
@x2)
Prims.logical))
 

:pattern ((Prims.eq2 @x0
@x1
@x2))
:qid typing_Prims.eq2))

:named typing_Prims.eq2))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Combinators.and_then_bare; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(163,4-163,17); use=MiniParse.Spec.Combinators.fst(163,4-163,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(MiniParse.Spec.Base.bare_parser @x0))
(HasType @x3
(Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc @x1
@x0)))
(HasType (MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
(MiniParse.Spec.Base.bare_parser @x1)))
 

:pattern ((MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3))
:qid typing_MiniParse.Spec.Combinators.and_then_bare))

:named typing_MiniParse.Spec.Combinators.and_then_bare))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.pair@tok
@x0)
@x1)
(Prims.pair @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.pair@tok
@x0)
@x1))

:pattern ((Prims.pair @x0
@x1))
:qid token_correspondence_Prims.pair@tok))

:named token_correspondence_Prims.pair@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT Prims.equals@tok
@x0)
@x1)
@x2)
(Prims.equals @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT Prims.equals@tok
@x0)
@x1)
@x2))

:pattern ((Prims.equals @x0
@x1
@x2))
:qid token_correspondence_Prims.equals@tok))

:named token_correspondence_Prims.equals@tok))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name MiniParse.Spec.Combinators.and_then_bare; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(163,4-163,17); use=MiniParse.Spec.Combinators.fst(163,4-163,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3))
:qid token_correspondence_MiniParse.Spec.Combinators.and_then_bare))

:named token_correspondence_MiniParse.Spec.Combinators.and_then_bare))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x5
@x6))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(Prims.Pair @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(Prims.Pair @x1
@x2
@x3
@x4)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x5
@x6)))
:qid subterm_ordering_Prims.Pair))

:named subterm_ordering_Prims.Pair))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Pair_q (Prims.Pair @x0
@x1
@x2
@x3))
@x1)
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Pair_q))

:named projection_inverse_Prims.Pair_q))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Pair_p (Prims.Pair @x0
@x1
@x2
@x3))
@x0)
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Pair_p))

:named projection_inverse_Prims.Pair_p))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Pair__2 (Prims.Pair @x0
@x1
@x2
@x3))
@x3)
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Pair__2))

:named projection_inverse_Prims.Pair__2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Pair__1 (Prims.Pair @x0
@x1
@x2
@x3))
@x2)
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Pair__1))

:named projection_inverse_Prims.Pair__1))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! (is-Tm_arrow (PreType Prims.pair@tok))
:named pre_kinding_Prims.pair@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! (is-Tm_arrow (PreType Prims.equals@tok))
:named pre_kinding_Prims.equals@tok))
;;;;;;;;;;;;;;;;/\ interpretation
;;; Fact-ids: Name Prims.l_and; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (and (Valid @x0)
(Valid @x1))
(Valid (Prims.l_and @x0
@x1)))
 

:pattern ((Prims.l_and @x0
@x1))
:qid l_and-interp))
:named l_and-interp))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc
;;; Fact-ids: Name MiniParse.Spec.Combinators.and_then_bare; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(159,21-161,46); use=MiniParse.Spec.Combinators.fst(161,21-163,17)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc))

:named kinding_Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_6bb246360ddc6453cfe7eb87d2823bde
;;; Fact-ids: Name MiniParse.Spec.Combinators.and_then_bare; Namespace MiniParse.Spec.Combinators
(assert (! (HasType Tm_arrow_6bb246360ddc6453cfe7eb87d2823bde
Tm_type)
:named kinding_Tm_arrow_6bb246360ddc6453cfe7eb87d2823bde))
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! (and (IsTotFun Prims.pair@tok)

;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Prims.pair@tok
@x0))
 

:pattern ((ApplyTT Prims.pair@tok
@x0))
:qid kinding_Prims.pair@tok))


;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.pair @x0
@x1)
Tm_type))
 

:pattern ((Prims.pair @x0
@x1))
:qid kinding_Prims.pair@tok.1))
)
:named kinding_Prims.pair@tok))
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! (and (IsTotFun Prims.equals@tok)

;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Prims.equals@tok
@x0))
 

:pattern ((ApplyTT Prims.equals@tok
@x0))
:qid kinding_Prims.equals@tok))


;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@x0 Term) (@x1 Term))
 (! (IsTotFun (ApplyTT (ApplyTT Prims.equals@tok
@x0)
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.equals@tok
@x0)
@x1))
:qid kinding_Prims.equals@tok.1))


;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0)
(HasType @x2
@x0))
(HasType (Prims.equals @x0
@x1
@x2)
Tm_type))
 

:pattern ((Prims.equals @x0
@x1
@x2))
:qid kinding_Prims.equals@tok.2))
)
:named kinding_Prims.equals@tok))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_5a56d64ec9685d0352c27644697b3e56
;;; Fact-ids: Name MiniParse.Spec.Combinators.and_then_bare; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(165,4-176,18); use=MiniParse.Spec.Combinators.fst(165,4-176,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (Tm_abs_5a56d64ec9685d0352c27644697b3e56 @x1
@x2
@x3
@x4)
@x0)
(let ((@lb5 (MiniParse.Spec.Base.bparse @x2
@x3
@x0)))
(ite (is-FStar.Pervasives.Native.Some @lb5)
(let ((@lb6 (MiniParse.Spec.Base.bparse @x4
(ApplyTT @x1
(FStar.Pervasives.Native.Mktuple2__1 (FStar.Pervasives.Native.Some_v @lb5)))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x0
(FStar.Pervasives.Native.Mktuple2__2 (FStar.Pervasives.Native.Some_v @lb5))
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x0)))))
(ite (is-FStar.Pervasives.Native.Some @lb6)
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x4
(MiniParse.Spec.Base.consumed_length @x0))
(FStar.Pervasives.Native.Mktuple2 @x4
(MiniParse.Spec.Base.consumed_length @x0)
(FStar.Pervasives.Native.Mktuple2__1 (FStar.Pervasives.Native.Some_v @lb6))
(Prims.op_Addition (FStar.Pervasives.Native.Mktuple2__2 (FStar.Pervasives.Native.Some_v @lb5))
(FStar.Pervasives.Native.Mktuple2__2 (FStar.Pervasives.Native.Some_v @lb6)))))
(ite (is-FStar.Pervasives.Native.None @lb6)
(FStar.Pervasives.Native.None (FStar.Pervasives.Native.tuple2 @x4
(MiniParse.Spec.Base.consumed_length @x0)))
Tm_unit)))
(ite (is-FStar.Pervasives.Native.None @lb5)
(FStar.Pervasives.Native.None (FStar.Pervasives.Native.tuple2 @x4
(MiniParse.Spec.Base.consumed_length @x0)))
Tm_unit))))
 

:pattern ((ApplyTT (Tm_abs_5a56d64ec9685d0352c27644697b3e56 @x1
@x2
@x3
@x4)
@x0))
:qid interpretation_Tm_abs_5a56d64ec9685d0352c27644697b3e56))

:named interpretation_Tm_abs_5a56d64ec9685d0352c27644697b3e56))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name MiniParse.Spec.Combinators.and_then_bare; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(163,4-163,17); use=MiniParse.Spec.Combinators.fst(163,4-163,17)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType MiniParse.Spec.Combinators.and_then_bare@tok
Tm_arrow_6bb246360ddc6453cfe7eb87d2823bde))

;; def=MiniParse.Spec.Combinators.fst(163,4-163,17); use=MiniParse.Spec.Combinators.fst(163,4-163,17)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x1)
@x2)
@x3)
@x4)
(MiniParse.Spec.Combinators.and_then_bare @x1
@x2
@x3
@x4))
 

:pattern ((MiniParse.Spec.Combinators.and_then_bare @x1
@x2
@x3
@x4))
:qid function_token_typing_MiniParse.Spec.Combinators.and_then_bare.1))
)
 

:pattern ((ApplyTT @x0
MiniParse.Spec.Combinators.and_then_bare@tok))
:qid function_token_typing_MiniParse.Spec.Combinators.and_then_bare))

:named function_token_typing_MiniParse.Spec.Combinators.and_then_bare))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Prims.pair @x2
@x3))
(and (is-Prims.Pair @x1)
(= @x2
(Prims.Pair_p @x1))
(= @x3
(Prims.Pair_q @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(Prims.pair @x2
@x3)))
:qid fuel_guarded_inversion_Prims.pair))

:named fuel_guarded_inversion_Prims.pair))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Prims.equals @x2
@x3
@x4))
(is-Prims.Refl @x1))
 

:pattern ((HasTypeFuel @u0
@x1
(Prims.equals @x2
@x3
@x4)))
:qid fuel_guarded_inversion_Prims.equals))

:named fuel_guarded_inversion_Prims.equals))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! (= 151
(Term_constr_id Prims.pair@tok))
:named fresh_token_Prims.pair@tok))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! (= 135
(Term_constr_id Prims.equals@tok))
:named fresh_token_Prims.equals@tok))
;;;;;;;;;;;;;;;;Equation for Prims.l_and
;;; Fact-ids: Name Prims.l_and; Namespace Prims
(assert (! 
;; def=Prims.fst(188,5-188,10); use=Prims.fst(188,5-188,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.l_and @x0
@x1)
(Prims.squash (Prims.pair @x0
@x1)))
 

:pattern ((Prims.l_and @x0
@x1))
:qid equation_Prims.l_and))

:named equation_Prims.l_and))
;;;;;;;;;;;;;;;;Equation for Prims.eq2
;;; Fact-ids: Name Prims.eq2; Namespace Prims
(assert (! 
;; def=Prims.fst(175,5-175,8); use=Prims.fst(175,5-175,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.eq2 @x0
@x1
@x2)
(Prims.squash (Prims.equals @x0
@x1
@x2)))
 

:pattern ((Prims.eq2 @x0
@x1
@x2))
:qid equation_Prims.eq2))

:named equation_Prims.eq2))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Combinators.and_then_bare
;;; Fact-ids: Name MiniParse.Spec.Combinators.and_then_bare; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(163,4-163,17); use=MiniParse.Spec.Combinators.fst(163,4-163,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
(Tm_abs_5a56d64ec9685d0352c27644697b3e56 @x3
@x0
@x2
@x1))
 

:pattern ((MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3))
:qid equation_MiniParse.Spec.Combinators.and_then_bare))

:named equation_MiniParse.Spec.Combinators.and_then_bare))
;;;;;;;;;;;;;;;;Eq2 interpretation
;;; Fact-ids: Name Prims.eq2; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (= @x1
@x2)
(Valid (Prims.eq2 @x0
@x1
@x2)))
 

:pattern ((Prims.eq2 @x0
@x1
@x2))
:qid eq2-interp))
:named eq2-interp))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,46-165,50); use=Prims.fst(165,46-165,50)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
@x1)
(= @x2
@x3))
(HasTypeFuel @u0
(Prims.Refl @x1
@x2)
(Prims.equals @x1
@x2
@x3)))
 

:pattern ((HasTypeFuel @u0
(Prims.Refl @x1
@x2)
(Prims.equals @x1
@x2
@x3)))
:qid data_typing_intro_Prims.Refl@tok))

:named data_typing_intro_Prims.Refl@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x1)
(HasTypeFuel @u0
@x4
@x2))
(HasTypeFuel @u0
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x1
@x2)))
:qid data_typing_intro_Prims.Pair@tok))

:named data_typing_intro_Prims.Pair@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,46-165,50); use=Prims.fst(165,46-165,50)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Refl @x1
@x2)
(Prims.equals @x3
@x4
@x5))
(and (= @x4
@x5)
(HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x4
@x3)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Refl @x1
@x2)
(Prims.equals @x3
@x4
@x5)))
:qid data_elim_Prims.Refl))

:named data_elim_Prims.Refl))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x5
@x6))
(and (HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x6
Tm_type)
(HasTypeFuel @u0
@x3
@x5)
(HasTypeFuel @u0
@x4
@x6)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x5
@x6)))
:qid data_elim_Prims.Pair))

:named data_elim_Prims.Pair))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= 150
(Term_constr_id (Prims.pair @x0
@x1)))
 

:pattern ((Prims.pair @x0
@x1))
:qid constructor_distinct_Prims.pair))

:named constructor_distinct_Prims.pair))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 134
(Term_constr_id (Prims.equals @x0
@x1
@x2)))
 

:pattern ((Prims.equals @x0
@x1
@x2))
:qid constructor_distinct_Prims.equals))

:named constructor_distinct_Prims.equals))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,46-165,50); use=Prims.fst(165,46-165,50)
(forall ((@x0 Term) (@x1 Term))
 (! (= 141
(Term_constr_id (Prims.Refl @x0
@x1)))
 

:pattern ((Prims.Refl @x0
@x1))
:qid constructor_distinct_Prims.Refl))

:named constructor_distinct_Prims.Refl))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 157
(Term_constr_id (Prims.Pair @x0
@x1
@x2
@x3)))
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid constructor_distinct_Prims.Pair))

:named constructor_distinct_Prims.Pair))
;;;;;;;;;;;;;;;;Constructor base
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,46-165,50); use=Prims.fst(165,46-165,50)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (is-Prims.Refl (Prims.Refl @x0
@x1))
(= (Prims.Refl @x0
@x1)
Prims.Refl@base))
 

:pattern ((Prims.Refl @x0
@x1))
:qid constructor_base_Prims.Refl))

:named constructor_base_Prims.Refl))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u1
@x0
(Prims.pair @x2
@x3))
(= (Prims.pair @x2
@x3)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(Prims.pair @x2
@x3)))
:qid Prims_pretyping_b7882067459c08225ce8e64864e7b31f))

:named Prims_pretyping_b7882067459c08225ce8e64864e7b31f))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u1
@x0
(Prims.equals @x2
@x3
@x4))
(= (Term_constr_id (Prims.equals @x2
@x3
@x4))
(Term_constr_id (PreType @x0))))
 

:pattern ((HasTypeFuel @u1
@x0
(Prims.equals @x2
@x3
@x4)))
:qid Prims_pretyping_b2d64ca214b8828a9eba2c140aea0816))

:named Prims_pretyping_b2d64ca214b8828a9eba2c140aea0816))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name MiniParse.Spec.Combinators.and_then_bare; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(159,21-161,46); use=MiniParse.Spec.Combinators.fst(161,21-163,17)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc @x2
@x3)))
:qid MiniParse.Spec.Combinators_pre_typing_Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc))

:named MiniParse.Spec.Combinators_pre_typing_Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name MiniParse.Spec.Combinators.and_then_bare; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(159,21-162,36); use=MiniParse.Spec.Combinators.fst(161,21-163,17)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_6bb246360ddc6453cfe7eb87d2823bde)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_6bb246360ddc6453cfe7eb87d2823bde))
:qid MiniParse.Spec.Combinators_pre_typing_Tm_arrow_6bb246360ddc6453cfe7eb87d2823bde))

:named MiniParse.Spec.Combinators_pre_typing_Tm_arrow_6bb246360ddc6453cfe7eb87d2823bde))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc
;;; Fact-ids: Name MiniParse.Spec.Combinators.and_then_bare; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(159,21-161,46); use=MiniParse.Spec.Combinators.fst(161,21-163,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc @x1
@x2))
(and 
;; def=MiniParse.Spec.Combinators.fst(159,21-161,46); use=MiniParse.Spec.Combinators.fst(161,21-163,17)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)
(HasType (ApplyTT @x0
@x3)
(MiniParse.Spec.Base.bare_parser @x1)))
 

:pattern ((ApplyTT @x0
@x3))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc @x1
@x2)))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc))

:named MiniParse.Spec.Combinators_interpretation_Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_6bb246360ddc6453cfe7eb87d2823bde
;;; Fact-ids: Name MiniParse.Spec.Combinators.and_then_bare; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(159,21-162,36); use=MiniParse.Spec.Combinators.fst(161,21-163,17)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_6bb246360ddc6453cfe7eb87d2823bde)
(and 
;; def=MiniParse.Spec.Combinators.fst(159,21-162,36); use=MiniParse.Spec.Combinators.fst(161,21-163,17)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(MiniParse.Spec.Base.bare_parser @x1))
(HasType @x4
(Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc @x2
@x1)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
(MiniParse.Spec.Base.bare_parser @x2)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_6bb246360ddc6453cfe7eb87d2823bde.1))

(IsTotFun @x0)

;; def=MiniParse.Spec.Combinators.fst(159,21-162,36); use=MiniParse.Spec.Combinators.fst(161,21-163,17)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Tm_type)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_6bb246360ddc6453cfe7eb87d2823bde.2))


;; def=MiniParse.Spec.Combinators.fst(159,21-162,36); use=MiniParse.Spec.Combinators.fst(161,21-163,17)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_6bb246360ddc6453cfe7eb87d2823bde.3))


;; def=MiniParse.Spec.Combinators.fst(159,21-162,36); use=MiniParse.Spec.Combinators.fst(161,21-163,17)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(MiniParse.Spec.Base.bare_parser @x1)))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_6bb246360ddc6453cfe7eb87d2823bde.4))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_6bb246360ddc6453cfe7eb87d2823bde))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_6bb246360ddc6453cfe7eb87d2823bde))

:named MiniParse.Spec.Combinators_interpretation_Tm_arrow_6bb246360ddc6453cfe7eb87d2823bde))
(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(192,52-237,13)

(declare-fun label_76 () Bool)
(declare-fun label_75 () Bool)
(declare-fun label_74 () Bool)
(declare-fun label_73 () Bool)
(declare-fun label_72 () Bool)
(declare-fun label_71 () Bool)
(declare-fun label_70 () Bool)
(declare-fun label_69 () Bool)
(declare-fun label_68 () Bool)
(declare-fun label_67 () Bool)
(declare-fun label_66 () Bool)
(declare-fun label_65 () Bool)
(declare-fun label_64 () Bool)
(declare-fun label_63 () Bool)
(declare-fun label_62 () Bool)
(declare-fun label_61 () Bool)
(declare-fun label_60 () Bool)
(declare-fun label_59 () Bool)
(declare-fun label_58 () Bool)
(declare-fun label_57 () Bool)
(declare-fun label_56 () Bool)
(declare-fun label_55 () Bool)
(declare-fun label_54 () Bool)
(declare-fun label_53 () Bool)
(declare-fun label_52 () Bool)
(declare-fun label_51 () Bool)
(declare-fun label_50 () Bool)
(declare-fun label_49 () Bool)
(declare-fun label_48 () Bool)
(declare-fun label_47 () Bool)
(declare-fun label_46 () Bool)
(declare-fun label_45 () Bool)
(declare-fun label_44 () Bool)
(declare-fun label_43 () Bool)
(declare-fun label_42 () Bool)
(declare-fun label_41 () Bool)
(declare-fun label_40 () Bool)
(declare-fun label_39 () Bool)
(declare-fun label_38 () Bool)
(declare-fun label_37 () Bool)
(declare-fun label_36 () Bool)
(declare-fun label_35 () Bool)
(declare-fun label_34 () Bool)
(declare-fun label_33 () Bool)
(declare-fun label_32 () Bool)
(declare-fun label_31 () Bool)
(declare-fun label_30 () Bool)
(declare-fun label_29 () Bool)
(declare-fun label_28 () Bool)
(declare-fun label_27 () Bool)
(declare-fun label_26 () Bool)
(declare-fun label_25 () Bool)
(declare-fun label_24 () Bool)
(declare-fun label_23 () Bool)
(declare-fun label_22 () Bool)
(declare-fun label_21 () Bool)
(declare-fun label_20 () Bool)
(declare-fun label_19 () Bool)
(declare-fun label_18 () Bool)
(declare-fun label_17 () Bool)
(declare-fun label_16 () Bool)
(declare-fun label_15 () Bool)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

(declare-fun Tm_refine_67c7b285aeb4981627ddd60e421600cb (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(203,13-203,92); use=MiniParse.Spec.Combinators.fst(202,12-202,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_67c7b285aeb4981627ddd60e421600cb @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_67c7b285aeb4981627ddd60e421600cb @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_67c7b285aeb4981627ddd60e421600cb))

:named refinement_kinding_Tm_refine_67c7b285aeb4981627ddd60e421600cb))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(203,13-203,92); use=MiniParse.Spec.Combinators.fst(202,12-202,17)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_67c7b285aeb4981627ddd60e421600cb @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(203,14-203,43); use=MiniParse.Spec.Combinators.fst(202,12-202,17)
(<= (BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x2))
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x3)))


;; def=MiniParse.Spec.Combinators.fst(203,47-203,91); use=MiniParse.Spec.Combinators.fst(202,12-202,17)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x2
(BoxInt 0)
@x4)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x3
(BoxInt 0)
@x4))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_67c7b285aeb4981627ddd60e421600cb @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_67c7b285aeb4981627ddd60e421600cb))

:named refinement_interpretation_Tm_refine_67c7b285aeb4981627ddd60e421600cb))
;;;;;;;;;;;;;;;;haseq for Tm_refine_67c7b285aeb4981627ddd60e421600cb
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(203,13-203,92); use=MiniParse.Spec.Combinators.fst(202,12-202,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_67c7b285aeb4981627ddd60e421600cb @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_67c7b285aeb4981627ddd60e421600cb @x0
@x1
@x2))))
:qid haseqTm_refine_67c7b285aeb4981627ddd60e421600cb))

:named haseqTm_refine_67c7b285aeb4981627ddd60e421600cb))

(declare-fun Tm_refine_276a81d3c3eadebff56bb9e61978d236 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=MiniParse.Spec.Combinators.fst(221,24-221,29)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_276a81d3c3eadebff56bb9e61978d236))

:named refinement_kinding_Tm_refine_276a81d3c3eadebff56bb9e61978d236))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=MiniParse.Spec.Combinators.fst(221,24-221,29)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.nat)
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x2
@x1))
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x1
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x3)))))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_276a81d3c3eadebff56bb9e61978d236))

:named refinement_interpretation_Tm_refine_276a81d3c3eadebff56bb9e61978d236))
;;;;;;;;;;;;;;;;haseq for Tm_refine_276a81d3c3eadebff56bb9e61978d236
;;; Fact-ids: 
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=MiniParse.Spec.Combinators.fst(221,24-221,29)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x0
@x1)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x0
@x1))))
:qid haseqTm_refine_276a81d3c3eadebff56bb9e61978d236))

:named haseqTm_refine_276a81d3c3eadebff56bb9e61978d236))

(declare-fun Tm_refine_6c303de0c7cf6ef8ce28b57600b9d4f0 (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=MiniParse.Spec.Combinators.fst(230,39-230,44)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_6c303de0c7cf6ef8ce28b57600b9d4f0 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_6c303de0c7cf6ef8ce28b57600b9d4f0 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_6c303de0c7cf6ef8ce28b57600b9d4f0))

:named refinement_kinding_Tm_refine_6c303de0c7cf6ef8ce28b57600b9d4f0))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=MiniParse.Spec.Combinators.fst(230,39-230,44)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_6c303de0c7cf6ef8ce28b57600b9d4f0 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.nat)
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x2
@x1))
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x1
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x3
(BoxInt 0)
@x4))))))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_6c303de0c7cf6ef8ce28b57600b9d4f0 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_6c303de0c7cf6ef8ce28b57600b9d4f0))

:named refinement_interpretation_Tm_refine_6c303de0c7cf6ef8ce28b57600b9d4f0))
;;;;;;;;;;;;;;;;haseq for Tm_refine_6c303de0c7cf6ef8ce28b57600b9d4f0
;;; Fact-ids: 
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=MiniParse.Spec.Combinators.fst(230,39-230,44)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_6c303de0c7cf6ef8ce28b57600b9d4f0 @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_6c303de0c7cf6ef8ce28b57600b9d4f0 @x0
@x1
@x2))))
:qid haseqTm_refine_6c303de0c7cf6ef8ce28b57600b9d4f0))

:named haseqTm_refine_6c303de0c7cf6ef8ce28b57600b9d4f0))
(declare-fun Tm_refine_8bf524f6c537e1c6f83a8ed6137c5d82 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(202,12-209,6); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (HasType (Tm_refine_8bf524f6c537e1c6f83a8ed6137c5d82 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
Tm_type)
 

:pattern ((HasType (Tm_refine_8bf524f6c537e1c6f83a8ed6137c5d82 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
Tm_type))
:qid refinement_kinding_Tm_refine_8bf524f6c537e1c6f83a8ed6137c5d82))

:named refinement_kinding_Tm_refine_8bf524f6c537e1c6f83a8ed6137c5d82))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(202,12-209,6); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_8bf524f6c537e1c6f83a8ed6137c5d82 @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(635,71-635,97); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(not 
;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(and 
;; def=MiniParse.Spec.Combinators.fst(203,14-203,43); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(<= (BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x2))
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x3)))


;; def=MiniParse.Spec.Combinators.fst(203,47-203,91); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x2
(BoxInt 0)
@x4)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x3
(BoxInt 0)
@x4))


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(205,5-205,24); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x5
(MiniParse.Spec.Base.consumed_length @x2))
(MiniParse.Spec.Base.bparse @x5
(MiniParse.Spec.Combinators.and_then_bare @x6
@x5
@x7
@x8)
@x2)))

(let ((@lb11 (MiniParse.Spec.Base.bparse @x5
(MiniParse.Spec.Combinators.and_then_bare @x6
@x5
@x7
@x8)
@x2)))
(ite (is-FStar.Pervasives.Native.Some @lb11)
(let ((@lb12 (FStar.Pervasives.Native.Some_v @lb11)))

;; def=MiniParse.Spec.Combinators.fst(208,5-208,45); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(and 
;; def=MiniParse.Spec.Combinators.fst(208,5-208,12); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(= @x9
(FStar.Pervasives.Native.Mktuple2__1 @lb12))


;; def=MiniParse.Spec.Combinators.fst(208,16-208,45); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(= @x4
(FStar.Pervasives.Native.Mktuple2__2 @lb12))
)
)
Unreachable)))

;; def=Prims.fst(635,86-635,95); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(not 
;; def=Prims.fst(635,86-635,95); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(= @x10
@x1)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_8bf524f6c537e1c6f83a8ed6137c5d82.1))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_8bf524f6c537e1c6f83a8ed6137c5d82 @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)))
:qid refinement_interpretation_Tm_refine_8bf524f6c537e1c6f83a8ed6137c5d82))

:named refinement_interpretation_Tm_refine_8bf524f6c537e1c6f83a8ed6137c5d82))
;;;;;;;;;;;;;;;;haseq for Tm_refine_8bf524f6c537e1c6f83a8ed6137c5d82
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(202,12-209,6); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_8bf524f6c537e1c6f83a8ed6137c5d82 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_8bf524f6c537e1c6f83a8ed6137c5d82 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))))
:qid haseqTm_refine_8bf524f6c537e1c6f83a8ed6137c5d82))

:named haseqTm_refine_8bf524f6c537e1c6f83a8ed6137c5d82))
;;;;;;;;;;;;;;;;_: Prims.unit   -> FStar.Pervasives.Lemma       (requires         FStar.Seq.Base.length x' <= FStar.Seq.Base.length x /\         FStar.Seq.Base.slice x' 0 b == FStar.Seq.Base.slice x 0 b)       (ensures         Some? (MiniParse.Spec.Base.bparse (and_then_bare p p') x') /\         (let FStar.Pervasives.Native.Some v' = MiniParse.Spec.Base.bparse (and_then_bare p p') x' in           (let y', off' = v' in             b == y' /\ b == off')           <:           Prims.logical))
(declare-fun Tm_arrow_05f18cf3ae472583689b20218973d56c (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_05f18cf3ae472583689b20218973d56c
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(202,7-209,6); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (HasType (Tm_arrow_05f18cf3ae472583689b20218973d56c @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
Tm_type)
 

:pattern ((HasType (Tm_arrow_05f18cf3ae472583689b20218973d56c @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
Tm_type))
:qid kinding_Tm_arrow_05f18cf3ae472583689b20218973d56c))

:named kinding_Tm_arrow_05f18cf3ae472583689b20218973d56c))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(202,7-209,6); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_05f18cf3ae472583689b20218973d56c @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_05f18cf3ae472583689b20218973d56c @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)))
:qid MiniParse.Spec.Combinators_pre_typing_Tm_arrow_05f18cf3ae472583689b20218973d56c))

:named MiniParse.Spec.Combinators_pre_typing_Tm_arrow_05f18cf3ae472583689b20218973d56c))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_05f18cf3ae472583689b20218973d56c
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(202,7-209,6); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_05f18cf3ae472583689b20218973d56c @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
(and 
;; def=MiniParse.Spec.Combinators.fst(202,7-209,6); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x9 Term))
 (! (implies (and 
;; def=MiniParse.Spec.Combinators.fst(203,14-203,43); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(<= (BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x8))
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x7)))


;; def=MiniParse.Spec.Combinators.fst(203,47-203,91); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x8
(BoxInt 0)
@x6)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x7
(BoxInt 0)
@x6))

(HasType @x9
Prims.unit))
(HasType (ApplyTT @x0
@x9)
(Tm_refine_8bf524f6c537e1c6f83a8ed6137c5d82 @x8
@x7
@x6
@x5
@x4
@x3
@x2
@x1)))
 

:pattern ((ApplyTT @x0
@x9))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_05f18cf3ae472583689b20218973d56c.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_05f18cf3ae472583689b20218973d56c @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_05f18cf3ae472583689b20218973d56c))

:named MiniParse.Spec.Combinators_interpretation_Tm_arrow_05f18cf3ae472583689b20218973d56c))
;;;;;;;;;;;;;;;;_: Prims.unit -> Type
(declare-fun Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe
Tm_type)
:named kinding_Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(202,7-202,9); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe))
:qid MiniParse.Spec.Combinators_pre_typing_Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe))

:named MiniParse.Spec.Combinators_pre_typing_Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(202,7-202,9); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe)
(and 
;; def=MiniParse.Spec.Combinators.fst(202,7-202,9); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.unit)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe))

:named MiniParse.Spec.Combinators_interpretation_Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe))


(declare-fun Tm_abs_68d918befe526b82dd7cd018491e8682 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_68d918befe526b82dd7cd018491e8682
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(204,12-209,5); use=MiniParse.Spec.Combinators.fst(235,25-235,26)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (HasType (Tm_abs_68d918befe526b82dd7cd018491e8682 @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe)
 

:pattern ((Tm_abs_68d918befe526b82dd7cd018491e8682 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid typing_Tm_abs_68d918befe526b82dd7cd018491e8682))

:named typing_Tm_abs_68d918befe526b82dd7cd018491e8682))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_68d918befe526b82dd7cd018491e8682
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(204,12-209,5); use=MiniParse.Spec.Combinators.fst(235,25-235,26)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (ApplyTT (Tm_abs_68d918befe526b82dd7cd018491e8682 @x1
@x2
@x3
@x4
@x5
@x6
@x7)
@x0)
(Prims.l_and (Prims.b2t (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x2))
(MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.and_then_bare @x3
@x1
@x4
@x5)
@x2)))
(let ((@lb8 (MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.and_then_bare @x3
@x1
@x4
@x5)
@x2)))
(ite (is-FStar.Pervasives.Native.Some @lb8)
(let ((@lb9 (FStar.Pervasives.Native.Some_v @lb8)))
(Prims.l_and (Prims.eq2 @x1
@x6
(FStar.Pervasives.Native.Mktuple2__1 @lb9))
(Prims.eq2 Prims.nat
@x7
(FStar.Pervasives.Native.Mktuple2__2 @lb9))))
Tm_unit))))
 

:pattern ((ApplyTT (Tm_abs_68d918befe526b82dd7cd018491e8682 @x1
@x2
@x3
@x4
@x5
@x6
@x7)
@x0))
:qid interpretation_Tm_abs_68d918befe526b82dd7cd018491e8682))

:named interpretation_Tm_abs_68d918befe526b82dd7cd018491e8682))

(declare-fun Tm_abs_aa1c64c9f2ccb888b86e39971e19b7ec (Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_aa1c64c9f2ccb888b86e39971e19b7ec
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(203,13-203,92); use=MiniParse.Spec.Combinators.fst(235,25-235,26)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_abs_aa1c64c9f2ccb888b86e39971e19b7ec @x0
@x1
@x2)
Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe)
 

:pattern ((Tm_abs_aa1c64c9f2ccb888b86e39971e19b7ec @x0
@x1
@x2))
:qid typing_Tm_abs_aa1c64c9f2ccb888b86e39971e19b7ec))

:named typing_Tm_abs_aa1c64c9f2ccb888b86e39971e19b7ec))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_aa1c64c9f2ccb888b86e39971e19b7ec
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(203,13-203,92); use=MiniParse.Spec.Combinators.fst(235,25-235,26)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (Tm_abs_aa1c64c9f2ccb888b86e39971e19b7ec @x1
@x2
@x3)
@x0)
(Prims.l_and (Prims.b2t (Prims.op_LessThanOrEqual (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x1)
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x2)))
(Prims.eq2 (FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x1
(BoxInt 0)
@x3)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x2
(BoxInt 0)
@x3))))
 

:pattern ((ApplyTT (Tm_abs_aa1c64c9f2ccb888b86e39971e19b7ec @x1
@x2
@x3)
@x0))
:qid interpretation_Tm_abs_aa1c64c9f2ccb888b86e39971e19b7ec))

:named interpretation_Tm_abs_aa1c64c9f2ccb888b86e39971e19b7ec))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: 
(assert (! (Valid (ApplyTT __uu__PartialApp
MiniParse.Spec.Combinators.and_then_bare@tok))
:named @kick_partial_app_651df1c571857dec4e6f725e8bfc8830))




; Encoding query formula : forall (t: Type)
;   (t': Type)
;   (p: MiniParse.Spec.Base.bare_parser t)
;   (p': (_: t -> MiniParse.Spec.Base.bare_parser t'))
;   (x: MiniParse.Spec.Base.bytes)
;   (x': MiniParse.Spec.Base.bytes).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     MiniParse.Spec.Base.no_lookahead_weak p /\
;     (forall (x: t). MiniParse.Spec.Base.no_lookahead_weak (p' x)) /\
;     (forall (pure_result: Prims.unit).
;         MiniParse.Spec.Base.no_lookahead_weak_on (MiniParse.Spec.Combinators.and_then_bare p p')
;           x
;           x' ==>
;         p pure_result) ==>
;     (forall (any_result:
;         FStar.Pervasives.Native.option (t' & MiniParse.Spec.Base.consumed_length x)).
;         MiniParse.Spec.Combinators.and_then_bare p p' x == any_result ==>
;         (forall (k: Prims.pure_post Prims.unit).
;             (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;             (forall (b: t' & MiniParse.Spec.Base.consumed_length x).
;                 MiniParse.Spec.Combinators.and_then_bare p p' x == FStar.Pervasives.Native.Some b ==>
;                 (forall (b: t') (b: MiniParse.Spec.Base.consumed_length x).
;                     b == (b, b) ==>
;                     b <= FStar.Seq.Base.length x /\
;                     (forall (any_result: Prims.nat).
;                         b == any_result ==>
;                         (forall (k: Prims.pure_post Prims.unit).
;                             (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} k x ==> k x) ==>
;                             (b <= FStar.Seq.Base.length x' == true ==>
;                               b <= FStar.Seq.Base.length x' /\
;                               (forall (any_result: Prims.nat).
;                                   b == any_result ==>
;                                   (forall (_: Prims.unit).
;                                       (FStar.Seq.Base.length x' <= FStar.Seq.Base.length x ==>
;                                         (b <= FStar.Seq.Base.length x' ==>
;                                           0 <= b && b <= FStar.Seq.Base.length x') /\
;                                         (forall (any_result: MiniParse.Spec.Base.consumed_length x')
;                                           .
;                                             b == any_result ==>
;                                             (forall (any_result:
;                                                 FStar.Seq.Base.seq MiniParse.Spec.Base.byte).
;                                                 FStar.Seq.Base.slice x' 0 b == any_result ==>
;                                                 b <= FStar.Seq.Base.length x ==>
;                                                 0 <= b && b <= FStar.Seq.Base.length x))) /\
;                                       (forall (any_result: Prims.logical).
;                                           (FStar.Seq.Base.length x' <= FStar.Seq.Base.length x) /\
;                                           (FStar.Seq.Base.slice x' 0 b == FStar.Seq.Base.slice x 0 b
;                                           ) ==
;                                           any_result ==>
;                                           (FStar.Seq.Base.length x' <= FStar.Seq.Base.length x ==>
;                                             (b <= FStar.Seq.Base.length x' ==>
;                                               0 <= b && b <= FStar.Seq.Base.length x') /\
;                                             (forall (any_result:
;                                                 MiniParse.Spec.Base.consumed_length x').
;                                                 b == any_result ==>
;                                                 (forall (any_result:
;                                                     FStar.Seq.Base.seq MiniParse.Spec.Base.byte).
;                                                     FStar.Seq.Base.slice x' 0 b == any_result ==>
;                                                     b <= FStar.Seq.Base.length x ==>
;                                                     0 <= b && b <= FStar.Seq.Base.length x))) /\
;                                           (forall (_:
;                                               Prims.squash (FStar.Seq.Base.length x' <=
;                                                   FStar.Seq.Base.length x /\
;                                                   FStar.Seq.Base.slice x' 0 b ==
;                                                   FStar.Seq.Base.slice x 0 b)).
;                                               (*  - Could not prove post-condition
; *)
;                                               Some? (MiniParse.Spec.Base.bparse (MiniParse.Spec.Combinators.and_then_bare
;                                                         p
;                                                         p')
;                                                     x') ==>
;                                               (forall (any_result:
;                                                   FStar.Pervasives.Native.option (t' &
;                                                       MiniParse.Spec.Base.consumed_length x')).
;                                                   MiniParse.Spec.Base.bparse (MiniParse.Spec.Combinators.and_then_bare
;                                                         p
;                                                         p')
;                                                     x' ==
;                                                   any_result ==>
;                                                   ~(Some? (MiniParse.Spec.Base.bparse (MiniParse.Spec.Combinators.and_then_bare
;                                                               p
;                                                               p')
;                                                           x')) ==>
;                                                   Prims.l_False)))) /\
;                                   (forall (_: Prims.unit).
;                                       (FStar.Seq.Base.length x' <= FStar.Seq.Base.length x ==>
;                                         (b <= FStar.Seq.Base.length x' ==>
;                                           0 <= b && b <= FStar.Seq.Base.length x') /\
;                                         (forall (any_result: MiniParse.Spec.Base.consumed_length x')
;                                           .
;                                             b == any_result ==>
;                                             (forall (any_result:
;                                                 FStar.Seq.Base.seq MiniParse.Spec.Base.byte).
;                                                 FStar.Seq.Base.slice x' 0 b == any_result ==>
;                                                 b <= FStar.Seq.Base.length x ==>
;                                                 0 <= b && b <= FStar.Seq.Base.length x))) /\
;                                       (forall (any_result: Prims.logical).
;                                           (FStar.Seq.Base.length x' <= FStar.Seq.Base.length x) /\
;                                           (FStar.Seq.Base.slice x' 0 b == FStar.Seq.Base.slice x 0 b
;                                           ) ==
;                                           any_result ==>
;                                           (FStar.Seq.Base.length x' <= FStar.Seq.Base.length x ==>
;                                             (b <= FStar.Seq.Base.length x' ==>
;                                               0 <= b && b <= FStar.Seq.Base.length x') /\
;                                             (forall (any_result:
;                                                 MiniParse.Spec.Base.consumed_length x').
;                                                 b == any_result ==>
;                                                 (forall (any_result:
;                                                     FStar.Seq.Base.seq MiniParse.Spec.Base.byte).
;                                                     FStar.Seq.Base.slice x' 0 b == any_result ==>
;                                                     b <= FStar.Seq.Base.length x ==>
;                                                     0 <= b && b <= FStar.Seq.Base.length x))) /\
;                                           (forall (_:
;                                               Prims.squash (FStar.Seq.Base.length x' <=
;                                                   FStar.Seq.Base.length x /\
;                                                   FStar.Seq.Base.slice x' 0 b ==
;                                                   FStar.Seq.Base.slice x 0 b)).
;                                               (*  - Could not prove post-condition
; *)
;                                               Some? (MiniParse.Spec.Base.bparse (MiniParse.Spec.Combinators.and_then_bare
;                                                         p
;                                                         p')
;                                                     x') ==>
;                                               (forall (any_result:
;                                                   FStar.Pervasives.Native.option (t' &
;                                                       MiniParse.Spec.Base.consumed_length x')).
;                                                   MiniParse.Spec.Base.bparse (MiniParse.Spec.Combinators.and_then_bare
;                                                         p
;                                                         p')
;                                                     x' ==
;                                                   any_result ==>
;                                                   ~(Some? (MiniParse.Spec.Base.bparse (MiniParse.Spec.Combinators.and_then_bare
;                                                               p
;                                                               p')
;                                                           x')) ==>
;                                                   Prims.l_False))) /\
;                                       (forall (p: Prims.pure_post Prims.unit).
;                                           FStar.Seq.Base.length x' <= FStar.Seq.Base.length x /\
;                                           FStar.Seq.Base.slice x' 0 b == FStar.Seq.Base.slice x 0 b /\
;                                           (forall (pure_result: Prims.unit).
;                                               Some? (MiniParse.Spec.Base.bparse (MiniParse.Spec.Combinators.and_then_bare
;                                                         p
;                                                         p')
;                                                     x') /\
;                                               (let FStar.Pervasives.Native.Some v' =
;                                                   MiniParse.Spec.Base.bparse (MiniParse.Spec.Combinators.and_then_bare
;                                                         p
;                                                         p')
;                                                     x'
;                                                 in
;                                                 (let y', off' = v' in
;                                                   b == y' /\ b == off')
;                                                 <:
;                                                 Prims.logical) ==>
;                                               p pure_result) ==>
;                                           Some? (MiniParse.Spec.Base.bparse p x) /\
;                                           (forall (pure_result: Prims.unit).
;                                               Some? (MiniParse.Spec.Base.bparse p x) ==>
;                                               (forall (any_result:
;                                                   FStar.Pervasives.Native.option (t &
;                                                       MiniParse.Spec.Base.consumed_length x)).
;                                                   MiniParse.Spec.Base.bparse p x == any_result ==>
;                                                   (~(Some? (MiniParse.Spec.Base.bparse p x)) ==>
;                                                     Prims.l_False) /\
;                                                   (forall (b: t)
;                                                       (b: MiniParse.Spec.Base.consumed_length x).
;                                                       MiniParse.Spec.Base.bparse p x ==
;                                                       FStar.Pervasives.Native.Some (b, b) ==>
;                                                       b <= b /\
;                                                       (forall (pure_result: Prims.unit).
;                                                           b <= b ==>
;                                                           b <= FStar.Seq.Base.length x' /\
;                                                           (forall (pure_result: Prims.unit).
;                                                               b <= FStar.Seq.Base.length x' ==>
;                                                               (b <= FStar.Seq.Base.length x ==>
;                                                                 0 <= b &&
;                                                                 b <= FStar.Seq.Base.length x') /\
;                                                               (forall (any_result:
;                                                                   MiniParse.Spec.Base.consumed_length
;                                                                     x).
;                                                                   b == any_result ==>
;                                                                   (forall (any_result:
;                                                                       FStar.Seq.Base.seq MiniParse.Spec.Base.byte
;                                                                       ).
;                                                                       FStar.Seq.Base.slice x' 0 b ==
;                                                                       any_result ==>
;                                                                       (b <= FStar.Seq.Base.length x' ==>
;                                                                         0 <= b &&
;                                                                         b <=
;                                                                         FStar.Seq.Base.length x') /\
;                                                                       (forall (any_result:
;                                                                           MiniParse.Spec.Base.consumed_length
;                                                                             x').
;                                                                           b == any_result ==>
;                                                                           (forall (any_result:
;                                                                               FStar.Seq.Base.seq MiniParse.Spec.Base.byte
;                                                                               ).
;                                                                               FStar.Seq.Base.slice x'
;                                                                                 0
;                                                                                 b ==
;                                                                               any_result ==>
;                                                                               (b <=
;                                                                                 FStar.Seq.Base.length
;                                                                                   x ==>
;                                                                                 0 <= b &&
;                                                                                 b <=
;                                                                                 FStar.Seq.Base.length
;                                                                                   (FStar.Seq.Base.slice
;                                                                                       x'
;                                                                                       0
;                                                                                       b)) /\
;                                                                               (forall (any_result:
;                                                                                   MiniParse.Spec.Base.consumed_length
;                                                                                     x).
;                                                                                   b == any_result ==>
;                                                                                   (forall (any_result:
;                                                                                       FStar.Seq.Base.seq
;                                                                                         MiniParse.Spec.Base.byte
;                                                                                       ).
;                                                                                       FStar.Seq.Base.slice
;                                                                                         (FStar.Seq.Base.slice
;                                                                                             x'
;                                                                                             0
;                                                                                             b)
;                                                                                         0
;                                                                                         b ==
;                                                                                       any_result ==>
;                                                                                       (forall (any_result:
;                                                                                           Prims.logical)
;                                                                                         .
;                                                                                           FStar.Seq.Base.slice
;                                                                                             x'
;                                                                                             0
;                                                                                             b ==
;                                                                                           FStar.Seq.Base.slice
;                                                                                             (FStar.Seq.Base.slice
;                                                                                                 x'
;                                                                                                 0
;                                                                                                 b)
;                                                                                             0
;                                                                                             b ==
;                                                                                           any_result ==>
;                                                                                           FStar.Seq.Base.slice
;                                                                                             x'
;                                                                                             0
;                                                                                             b ==
;                                                                                           FStar.Seq.Base.slice
;                                                                                             (FStar.Seq.Base.slice
;                                                                                                 x'
;                                                                                                 0
;                                                                                                 b)
;                                                                                             0
;                                                                                             b /\
;                                                                                           (forall (pure_result:
;                                                                                               Prims.unit)
;                                                                                             .
;                                                                                               FStar.Seq.Base.slice
;                                                                                                 x'
;                                                                                                 0
;                                                                                                 b ==
;                                                                                               FStar.Seq.Base.slice
;                                                                                                 (FStar.Seq.Base.slice
;                                                                                                     x'
;                                                                                                     0
;                                                                                                     b
;                                                                                                   )
;                                                                                                 0
;                                                                                                 b ==>
;                                                                                               (b <=
;                                                                                                 FStar.Seq.Base.length
;                                                                                                   x ==>
;                                                                                                 0 <=
;                                                                                                 b &&
;                                                                                                 b <=
;                                                                                                 FStar.Seq.Base.length
;                                                                                                   x'
;                                                                                               ) /\
;                                                                                               (forall
;                                                                                                   (any_result:
;                                                                                                   MiniParse.Spec.Base.consumed_length
;                                                                                                     x
;                                                                                                   ).
;                                                                                                   b ==
;                                                                                                   any_result ==>
;                                                                                                   (forall
;                                                                                                       (any_result:
;                                                                                                       FStar.Seq.Base.seq
;                                                                                                         MiniParse.Spec.Base.byte
;                                                                                                       )
;                                                                                                     .
;                                                                                                       FStar.Seq.Base.slice
;                                                                                                         x'
;                                                                                                         0
;                                                                                                         b
;                                                                                                        ==
;                                                                                                       any_result ==>
;                                                                                                       (
;                                                                                                         b <=
;                                                                                                         FStar.Seq.Base.length
;                                                                                                           x
;                                                                                                          ==>
;                                                                                                         0 <=
;                                                                                                         b &&
;                                                                                                         b <=
;                                                                                                         FStar.Seq.Base.length
;                                                                                                           x
; 
;                                                                                                       ) /\
;                                                                                                       (
;                                                                                                         forall
;                                                                                                           (any_result:
;                                                                                                           MiniParse.Spec.Base.consumed_length
;                                                                                                             x
;                                                                                                           )
;                                                                                                         .
;                                                                                                           b ==
;                                                                                                           any_result ==>
;                                                                                                           (
;                                                                                                             forall
;                                                                                                               (any_result:
;                                                                                                               FStar.Seq.Base.seq
;                                                                                                                 MiniParse.Spec.Base.byte
;                                                                                                               )
;                                                                                                             .
;                                                                                                               FStar.Seq.Base.slice
;                                                                                                                 x
;                                                                                                                 0
;                                                                                                                 b
;                                                                                                                ==
;                                                                                                               any_result ==>
;                                                                                                               (
;                                                                                                                 forall
;                                                                                                                   (any_result:
;                                                                                                                   Prims.logical)
;                                                                                                                 .
;                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                     x'
;                                                                                                                     0
;                                                                                                                     b
;                                                                                                                    ==
;                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                     x
;                                                                                                                     0
;                                                                                                                     b
;                                                                                                                    ==
;                                                                                                                   any_result ==>
;                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                     x'
;                                                                                                                     0
;                                                                                                                     b
;                                                                                                                    ==
;                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                     x
;                                                                                                                     0
;                                                                                                                     b
;                                                                                                                    /\
;                                                                                                                   (
;                                                                                                                     forall
;                                                                                                                       (pure_result:
;                                                                                                                       Prims.unit)
;                                                                                                                     .
;                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                         x'
;                                                                                                                         0
;                                                                                                                         b
;                                                                                                                        ==
;                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                         x
;                                                                                                                         0
;                                                                                                                         b
;                                                                                                                        ==>
;                                                                                                                       MiniParse.Spec.Base.no_lookahead_weak_on
;                                                                                                                         p
;                                                                                                                         x
;                                                                                                                         x'
;                                                                                                                        /\
;                                                                                                                       (
;                                                                                                                         forall
;                                                                                                                           (pure_result:
;                                                                                                                           Prims.unit)
;                                                                                                                         .
;                                                                                                                           MiniParse.Spec.Base.no_lookahead_weak_on
;                                                                                                                             p
;                                                                                                                             x
;                                                                                                                             x'
;                                                                                                                            ==>
;                                                                                                                           Some?
;                                                                                                                             (
;                                                                                                                               MiniParse.Spec.Base.bparse
;                                                                                                                                 p
;                                                                                                                                 x'
; 
;                                                                                                                             )
;                                                                                                                            /\
;                                                                                                                           (
;                                                                                                                             forall
;                                                                                                                               (pure_result:
;                                                                                                                               Prims.unit)
;                                                                                                                             .
;                                                                                                                               Some?
;                                                                                                                                 (
;                                                                                                                                   MiniParse.Spec.Base.bparse
;                                                                                                                                     p
;                                                                                                                                     x'
; 
;                                                                                                                                 )
;                                                                                                                                ==>
;                                                                                                                               (
;                                                                                                                                 forall
;                                                                                                                                   (any_result:
;                                                                                                                                   FStar.Pervasives.Native.option
;                                                                                                                                     (
;                                                                                                                                       t &
;                                                                                                                                       MiniParse.Spec.Base.consumed_length
;                                                                                                                                         x'
; 
;                                                                                                                                     )
;                                                                                                                                   )
;                                                                                                                                 .
;                                                                                                                                   MiniParse.Spec.Base.bparse
;                                                                                                                                     p
;                                                                                                                                     x'
;                                                                                                                                    ==
;                                                                                                                                   any_result ==>
;                                                                                                                                   (
;                                                                                                                                     ~(
;                                                                                                                                       Some?
;                                                                                                                                         (
;                                                                                                                                           MiniParse.Spec.Base.bparse
;                                                                                                                                             p
;                                                                                                                                             x'
; 
;                                                                                                                                         )
; 
;                                                                                                                                     ) ==>
;                                                                                                                                     Prims.l_False
;                                                                                                                                   ) /\
;                                                                                                                                   (
;                                                                                                                                     forall
;                                                                                                                                       (b:
;                                                                                                                                       t &
;                                                                                                                                       MiniParse.Spec.Base.consumed_length
;                                                                                                                                         x'
;                                                                                                                                       )
;                                                                                                                                     .
;                                                                                                                                       MiniParse.Spec.Base.bparse
;                                                                                                                                         p
;                                                                                                                                         x'
;                                                                                                                                        ==
;                                                                                                                                       FStar.Pervasives.Native.Some
;                                                                                                                                       b ==>
;                                                                                                                                       (
;                                                                                                                                         forall
;                                                                                                                                           (b:
;                                                                                                                                           t)
;                                                                                                                                           (b:
;                                                                                                                                           MiniParse.Spec.Base.consumed_length
;                                                                                                                                             x'
;                                                                                                                                           )
;                                                                                                                                         .
;                                                                                                                                           b ==
;                                                                                                                                           (b,
;                                                                                                                                           b) ==>
;                                                                                                                                           b ==
;                                                                                                                                           b /\
;                                                                                                                                           b ==
;                                                                                                                                           b /\
;                                                                                                                                           (
;                                                                                                                                             forall
;                                                                                                                                               (pure_result:
;                                                                                                                                               Prims.unit)
;                                                                                                                                             .
;                                                                                                                                               b ==
;                                                                                                                                               b /\
;                                                                                                                                               b ==
;                                                                                                                                               b ==>
;                                                                                                                                               b <=
;                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                 x
;                                                                                                                                                &&
;                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                 x
;                                                                                                                                                <=
;                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                 x
;                                                                                                                                                /\
;                                                                                                                                               (
;                                                                                                                                                 forall
;                                                                                                                                                   (return_val:
;                                                                                                                                                   j:
;                                                                                                                                                   Prims.nat
;                                                                                                                                                     {
;                                                                                                                                                       b <=
;                                                                                                                                                       j &&
;                                                                                                                                                       j <=
;                                                                                                                                                       FStar.Seq.Base.length
;                                                                                                                                                         x
; 
;                                                                                                                                                     })
;                                                                                                                                                 .
;                                                                                                                                                   return_val ==
;                                                                                                                                                   FStar.Seq.Base.length
;                                                                                                                                                     x
;                                                                                                                                                    ==>
;                                                                                                                                                   (
;                                                                                                                                                     forall
;                                                                                                                                                       (any_result:
;                                                                                                                                                       FStar.Seq.Base.seq
;                                                                                                                                                         MiniParse.Spec.Base.byte
;                                                                                                                                                       )
;                                                                                                                                                     .
;                                                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                                                         x
;                                                                                                                                                         b
;                                                                                                                                                         (
;                                                                                                                                                           FStar.Seq.Base.length
;                                                                                                                                                             x
; 
;                                                                                                                                                         )
;                                                                                                                                                        ==
;                                                                                                                                                       any_result ==>
;                                                                                                                                                       b <=
;                                                                                                                                                       FStar.Seq.Base.length
;                                                                                                                                                         x'
;                                                                                                                                                        &&
;                                                                                                                                                       FStar.Seq.Base.length
;                                                                                                                                                         x'
;                                                                                                                                                        <=
;                                                                                                                                                       FStar.Seq.Base.length
;                                                                                                                                                         x'
;                                                                                                                                                        /\
;                                                                                                                                                       (
;                                                                                                                                                         forall
;                                                                                                                                                           (return_val:
;                                                                                                                                                           j:
;                                                                                                                                                           Prims.nat
;                                                                                                                                                             {
;                                                                                                                                                               b <=
;                                                                                                                                                               j &&
;                                                                                                                                                               j <=
;                                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                                 x'
; 
;                                                                                                                                                             })
;                                                                                                                                                         .
;                                                                                                                                                           return_val ==
;                                                                                                                                                           FStar.Seq.Base.length
;                                                                                                                                                             x'
;                                                                                                                                                            ==>
;                                                                                                                                                           (
;                                                                                                                                                             forall
;                                                                                                                                                               (any_result:
;                                                                                                                                                               FStar.Seq.Base.seq
;                                                                                                                                                                 MiniParse.Spec.Base.byte
;                                                                                                                                                               )
;                                                                                                                                                             .
;                                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                                 x'
;                                                                                                                                                                 b
;                                                                                                                                                                 (
;                                                                                                                                                                   FStar.Seq.Base.length
;                                                                                                                                                                     x'
; 
;                                                                                                                                                                 )
;                                                                                                                                                                ==
;                                                                                                                                                               any_result ==>
;                                                                                                                                                               Some?
;                                                                                                                                                                 (
;                                                                                                                                                                   MiniParse.Spec.Base.bparse
;                                                                                                                                                                     (
;                                                                                                                                                                       p'
;                                                                                                                                                                         b
; 
;                                                                                                                                                                     )
;                                                                                                                                                                     (
;                                                                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                                                                         x
;                                                                                                                                                                         b
;                                                                                                                                                                         (
;                                                                                                                                                                           FStar.Seq.Base.length
;                                                                                                                                                                             x
; 
;                                                                                                                                                                         )
; 
;                                                                                                                                                                     )
; 
;                                                                                                                                                                 )
;                                                                                                                                                                /\
;                                                                                                                                                               (
;                                                                                                                                                                 forall
;                                                                                                                                                                   (pure_result:
;                                                                                                                                                                   Prims.unit)
;                                                                                                                                                                 .
;                                                                                                                                                                   Some?
;                                                                                                                                                                     (
;                                                                                                                                                                       MiniParse.Spec.Base.bparse
;                                                                                                                                                                         (
;                                                                                                                                                                           p'
;                                                                                                                                                                             b
; 
;                                                                                                                                                                         )
;                                                                                                                                                                         (
;                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                             x
;                                                                                                                                                                             b
;                                                                                                                                                                             (
;                                                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                                                 x
; 
;                                                                                                                                                                             )
; 
;                                                                                                                                                                         )
; 
;                                                                                                                                                                     )
;                                                                                                                                                                    ==>
;                                                                                                                                                                   (
;                                                                                                                                                                     forall
;                                                                                                                                                                       (any_result:
;                                                                                                                                                                       FStar.Pervasives.Native.option
;                                                                                                                                                                         (
;                                                                                                                                                                           t' &
;                                                                                                                                                                           MiniParse.Spec.Base.consumed_length
;                                                                                                                                                                             (
;                                                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                                                 x
;                                                                                                                                                                                 b
;                                                                                                                                                                                 (
;                                                                                                                                                                                   FStar.Seq.Base.length
;                                                                                                                                                                                     x
; 
;                                                                                                                                                                                 )
; 
;                                                                                                                                                                             )
; 
;                                                                                                                                                                         )
;                                                                                                                                                                       )
;                                                                                                                                                                     .
;                                                                                                                                                                       MiniParse.Spec.Base.bparse
;                                                                                                                                                                         (
;                                                                                                                                                                           p'
;                                                                                                                                                                             b
; 
;                                                                                                                                                                         )
;                                                                                                                                                                         (
;                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                             x
;                                                                                                                                                                             b
;                                                                                                                                                                             (
;                                                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                                                 x
; 
;                                                                                                                                                                             )
; 
;                                                                                                                                                                         )
;                                                                                                                                                                        ==
;                                                                                                                                                                       any_result ==>
;                                                                                                                                                                       (
;                                                                                                                                                                         ~(
;                                                                                                                                                                           Some?
;                                                                                                                                                                             (
;                                                                                                                                                                               MiniParse.Spec.Base.bparse
;                                                                                                                                                                                 (
;                                                                                                                                                                                   p'
;                                                                                                                                                                                     b
; 
;                                                                                                                                                                                 )
;                                                                                                                                                                                 (
;                                                                                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                                                                                     x
;                                                                                                                                                                                     b
;                                                                                                                                                                                     (
;                                                                                                                                                                                       FStar.Seq.Base.length
;                                                                                                                                                                                         x
; 
;                                                                                                                                                                                     )
; 
;                                                                                                                                                                                 )
; 
;                                                                                                                                                                             )
; 
;                                                                                                                                                                         ) ==>
;                                                                                                                                                                         Prims.l_False
;                                                                                                                                                                       ) /\
;                                                                                                                                                                       (
;                                                                                                                                                                         forall
;                                                                                                                                                                           (b:
;                                                                                                                                                                           t')
;                                                                                                                                                                           (b:
;                                                                                                                                                                           MiniParse.Spec.Base.consumed_length
;                                                                                                                                                                             (
;                                                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                                                 x
;                                                                                                                                                                                 b
;                                                                                                                                                                                 (
;                                                                                                                                                                                   FStar.Seq.Base.length
;                                                                                                                                                                                     x
; 
;                                                                                                                                                                                 )
; 
;                                                                                                                                                                             )
;                                                                                                                                                                           )
;                                                                                                                                                                         .
;                                                                                                                                                                           MiniParse.Spec.Base.bparse
;                                                                                                                                                                             (
;                                                                                                                                                                               p'
;                                                                                                                                                                                 b
; 
;                                                                                                                                                                             )
;                                                                                                                                                                             (
;                                                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                                                 x
;                                                                                                                                                                                 b
;                                                                                                                                                                                 (
;                                                                                                                                                                                   FStar.Seq.Base.length
;                                                                                                                                                                                     x
; 
;                                                                                                                                                                                 )
; 
;                                                                                                                                                                             )
;                                                                                                                                                                            ==
;                                                                                                                                                                           FStar.Pervasives.Native.Some
;                                                                                                                                                                           (b,
;                                                                                                                                                                           b) ==>
;                                                                                                                                                                           b ==
;                                                                                                                                                                           b +
;                                                                                                                                                                           b /\
;                                                                                                                                                                           (
;                                                                                                                                                                             forall
;                                                                                                                                                                               (pure_result:
;                                                                                                                                                                               Prims.unit)
;                                                                                                                                                                             .
;                                                                                                                                                                               b ==
;                                                                                                                                                                               b +
;                                                                                                                                                                               b ==>
;                                                                                                                                                                               b <=
;                                                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                                                 (
;                                                                                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                                                                                     x
;                                                                                                                                                                                     b
;                                                                                                                                                                                     (
;                                                                                                                                                                                       FStar.Seq.Base.length
;                                                                                                                                                                                         x
; 
;                                                                                                                                                                                     )
; 
;                                                                                                                                                                                 )
;                                                                                                                                                                                /\
;                                                                                                                                                                               (
;                                                                                                                                                                                 forall
;                                                                                                                                                                                   (pure_result:
;                                                                                                                                                                                   Prims.unit)
;                                                                                                                                                                                 .
;                                                                                                                                                                                   b <=
;                                                                                                                                                                                   FStar.Seq.Base.length
;                                                                                                                                                                                     (
;                                                                                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                                                                                         x
;                                                                                                                                                                                         b
;                                                                                                                                                                                         (
;                                                                                                                                                                                           FStar.Seq.Base.length
;                                                                                                                                                                                             x
; 
;                                                                                                                                                                                         )
; 
;                                                                                                                                                                                     )
;                                                                                                                                                                                    ==>
;                                                                                                                                                                                   b <=
;                                                                                                                                                                                   FStar.Seq.Base.length
;                                                                                                                                                                                     (
;                                                                                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                                                                                         x'
;                                                                                                                                                                                         b
;                                                                                                                                                                                         (
;                                                                                                                                                                                           FStar.Seq.Base.length
;                                                                                                                                                                                             x'
; 
;                                                                                                                                                                                         )
; 
;                                                                                                                                                                                     )
;                                                                                                                                                                                    /\
;                                                                                                                                                                                   (
;                                                                                                                                                                                     forall
;                                                                                                                                                                                       (pure_result:
;                                                                                                                                                                                       Prims.unit)
;                                                                                                                                                                                     .
;                                                                                                                                                                                       b <=
;                                                                                                                                                                                       FStar.Seq.Base.length
;                                                                                                                                                                                         (
;                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                             x'
;                                                                                                                                                                                             b
;                                                                                                                                                                                             (
;                                                                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                                                                 x'
; 
;                                                                                                                                                                                             )
; 
;                                                                                                                                                                                         )
;                                                                                                                                                                                        ==>
;                                                                                                                                                                                       FStar.Seq.Base.length
;                                                                                                                                                                                         (
;                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                             x'
;                                                                                                                                                                                             b
;                                                                                                                                                                                             (
;                                                                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                                                                 x'
; 
;                                                                                                                                                                                             )
; 
;                                                                                                                                                                                         )
;                                                                                                                                                                                        <=
;                                                                                                                                                                                       FStar.Seq.Base.length
;                                                                                                                                                                                         (
;                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                             x
;                                                                                                                                                                                             b
;                                                                                                                                                                                             (
;                                                                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                                                                 x
; 
;                                                                                                                                                                                             )
; 
;                                                                                                                                                                                         )
;                                                                                                                                                                                        /\
;                                                                                                                                                                                       (
;                                                                                                                                                                                         forall
;                                                                                                                                                                                           (pure_result:
;                                                                                                                                                                                           Prims.unit)
;                                                                                                                                                                                         .
;                                                                                                                                                                                           FStar.Seq.Base.length
;                                                                                                                                                                                             (
;                                                                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                                                                 x'
;                                                                                                                                                                                                 b
;                                                                                                                                                                                                 (
;                                                                                                                                                                                                   FStar.Seq.Base.length
;                                                                                                                                                                                                     x'
; 
;                                                                                                                                                                                                 )
; 
;                                                                                                                                                                                             )
;                                                                                                                                                                                            <=
;                                                                                                                                                                                           FStar.Seq.Base.length
;                                                                                                                                                                                             (
;                                                                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                                                                 x
;                                                                                                                                                                                                 b
;                                                                                                                                                                                                 (
;                                                                                                                                                                                                   FStar.Seq.Base.length
;                                                                                                                                                                                                     x
; 
;                                                                                                                                                                                                 )
; 
;                                                                                                                                                                                             )
;                                                                                                                                                                                            ==>
;                                                                                                                                                                                           (
;                                                                                                                                                                                             b <=
;                                                                                                                                                                                             FStar.Seq.Base.length
;                                                                                                                                                                                               (
;                                                                                                                                                                                                 FStar.Seq.Base.slice
;                                                                                                                                                                                                   x
;                                                                                                                                                                                                   b
;                                                                                                                                                                                                   (
;                                                                                                                                                                                                     FStar.Seq.Base.length
;                                                                                                                                                                                                       x
; 
;                                                                                                                                                                                                   )
; 
;                                                                                                                                                                                               )
;                                                                                                                                                                                              ==>
;                                                                                                                                                                                             0 <=
;                                                                                                                                                                                             b &&
;                                                                                                                                                                                             b <=
;                                                                                                                                                                                             FStar.Seq.Base.length
;                                                                                                                                                                                               (
;                                                                                                                                                                                                 FStar.Seq.Base.slice
;                                                                                                                                                                                                   x'
;                                                                                                                                                                                                   b
;                                                                                                                                                                                                   (
;                                                                                                                                                                                                     FStar.Seq.Base.length
;                                                                                                                                                                                                       x'
; 
;                                                                                                                                                                                                   )
; 
;                                                                                                                                                                                               )
; 
;                                                                                                                                                                                           ) /\
;                                                                                                                                                                                           (
;                                                                                                                                                                                             forall
;                                                                                                                                                                                               (any_result:
;                                                                                                                                                                                               MiniParse.Spec.Base.consumed_length
;                                                                                                                                                                                                 (
;                                                                                                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                                                                                                     x
;                                                                                                                                                                                                     b
;                                                                                                                                                                                                     (
;                                                                                                                                                                                                       FStar.Seq.Base.length
;                                                                                                                                                                                                         x
; 
;                                                                                                                                                                                                     )
; 
;                                                                                                                                                                                                 )
;                                                                                                                                                                                               )
;                                                                                                                                                                                             .
;                                                                                                                                                                                               b ==
;                                                                                                                                                                                               any_result ==>
;                                                                                                                                                                                               (
;                                                                                                                                                                                                 forall
;                                                                                                                                                                                                   (any_result:
;                                                                                                                                                                                                   FStar.Seq.Base.seq
;                                                                                                                                                                                                     MiniParse.Spec.Base.byte
;                                                                                                                                                                                                   )
;                                                                                                                                                                                                 .
;                                                                                                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                                                                                                     (
;                                                                                                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                                                                                                         x'
;                                                                                                                                                                                                         b
;                                                                                                                                                                                                         (
;                                                                                                                                                                                                           FStar.Seq.Base.length
;                                                                                                                                                                                                             x'
; 
;                                                                                                                                                                                                         )
; 
;                                                                                                                                                                                                     )
;                                                                                                                                                                                                     0
;                                                                                                                                                                                                     b
;                                                                                                                                                                                                    ==
;                                                                                                                                                                                                   any_result ==>
;                                                                                                                                                                                                   (
;                                                                                                                                                                                                     b <=
;                                                                                                                                                                                                     FStar.Seq.Base.length
;                                                                                                                                                                                                       x'
;                                                                                                                                                                                                      ==>
;                                                                                                                                                                                                     0 <=
;                                                                                                                                                                                                     b &&
;                                                                                                                                                                                                     b <=
;                                                                                                                                                                                                     FStar.Seq.Base.length
;                                                                                                                                                                                                       x'
; 
;                                                                                                                                                                                                   ) /\
;                                                                                                                                                                                                   (
;                                                                                                                                                                                                     forall
;                                                                                                                                                                                                       (any_result:
;                                                                                                                                                                                                       MiniParse.Spec.Base.consumed_length
;                                                                                                                                                                                                         x'
;                                                                                                                                                                                                       )
;                                                                                                                                                                                                     .
;                                                                                                                                                                                                       b ==
;                                                                                                                                                                                                       any_result ==>
;                                                                                                                                                                                                       (
;                                                                                                                                                                                                         forall
;                                                                                                                                                                                                           (any_result:
;                                                                                                                                                                                                           FStar.Seq.Base.seq
;                                                                                                                                                                                                             MiniParse.Spec.Base.byte
;                                                                                                                                                                                                           )
;                                                                                                                                                                                                         .
;                                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                                             x'
;                                                                                                                                                                                                             0
;                                                                                                                                                                                                             b
;                                                                                                                                                                                                            ==
;                                                                                                                                                                                                           any_result ==>
;                                                                                                                                                                                                           b +
;                                                                                                                                                                                                           b >=
;                                                                                                                                                                                                           0 /\
;                                                                                                                                                                                                           b <=
;                                                                                                                                                                                                           b +
;                                                                                                                                                                                                           b &&
;                                                                                                                                                                                                           b +
;                                                                                                                                                                                                           b <=
;                                                                                                                                                                                                           FStar.Seq.Base.length
;                                                                                                                                                                                                             (
;                                                                                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                                                                                 x'
;                                                                                                                                                                                                                 0
;                                                                                                                                                                                                                 b
; 
;                                                                                                                                                                                                             )
;                                                                                                                                                                                                            /\
;                                                                                                                                                                                                           (
;                                                                                                                                                                                                             forall
;                                                                                                                                                                                                               (return_val:
;                                                                                                                                                                                                               j:
;                                                                                                                                                                                                               Prims.nat
;                                                                                                                                                                                                                 {
;                                                                                                                                                                                                                   b <=
;                                                                                                                                                                                                                   j &&
;                                                                                                                                                                                                                   j <=
;                                                                                                                                                                                                                   FStar.Seq.Base.length
;                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                                                                                                                         x'
;                                                                                                                                                                                                                         0
;                                                                                                                                                                                                                         b
; 
;                                                                                                                                                                                                                     )
; 
;                                                                                                                                                                                                                 })
;                                                                                                                                                                                                             .
;                                                                                                                                                                                                               return_val ==
;                                                                                                                                                                                                               b +
;                                                                                                                                                                                                               b ==>
;                                                                                                                                                                                                               (
;                                                                                                                                                                                                                 forall
;                                                                                                                                                                                                                   (any_result:
;                                                                                                                                                                                                                   FStar.Seq.Base.seq
;                                                                                                                                                                                                                     MiniParse.Spec.Base.byte
;                                                                                                                                                                                                                   )
;                                                                                                                                                                                                                 .
;                                                                                                                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                                                                                                                         x'
;                                                                                                                                                                                                                         0
;                                                                                                                                                                                                                         b
; 
;                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                     b
;                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                       b +
;                                                                                                                                                                                                                       b
;                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                    ==
;                                                                                                                                                                                                                   any_result ==>
;                                                                                                                                                                                                                   (
;                                                                                                                                                                                                                     forall
;                                                                                                                                                                                                                       (any_result:
;                                                                                                                                                                                                                       Prims.logical)
;                                                                                                                                                                                                                     .
;                                                                                                                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                                                             x'
;                                                                                                                                                                                                                             b
;                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                                                                                                 x'
; 
;                                                                                                                                                                                                                             )
; 
;                                                                                                                                                                                                                         )
;                                                                                                                                                                                                                         0
;                                                                                                                                                                                                                         b
;                                                                                                                                                                                                                        ==
;                                                                                                                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                                                             x'
;                                                                                                                                                                                                                             0
;                                                                                                                                                                                                                             b
; 
;                                                                                                                                                                                                                         )
;                                                                                                                                                                                                                         b
;                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                           b +
;                                                                                                                                                                                                                           b
;                                                                                                                                                                                                                         )
;                                                                                                                                                                                                                        ==
;                                                                                                                                                                                                                       any_result ==>
;                                                                                                                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                                                             x'
;                                                                                                                                                                                                                             b
;                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                                                                                                 x'
; 
;                                                                                                                                                                                                                             )
; 
;                                                                                                                                                                                                                         )
;                                                                                                                                                                                                                         0
;                                                                                                                                                                                                                         b
;                                                                                                                                                                                                                        ==
;                                                                                                                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                                                             x'
;                                                                                                                                                                                                                             0
;                                                                                                                                                                                                                             b
; 
;                                                                                                                                                                                                                         )
;                                                                                                                                                                                                                         b
;                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                           b +
;                                                                                                                                                                                                                           b
;                                                                                                                                                                                                                         )
;                                                                                                                                                                                                                        /\
;                                                                                                                                                                                                                       (
;                                                                                                                                                                                                                         forall
;                                                                                                                                                                                                                           (pure_result:
;                                                                                                                                                                                                                           Prims.unit)
;                                                                                                                                                                                                                         .
;                                                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                                                                                                 x'
;                                                                                                                                                                                                                                 b
;                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                   FStar.Seq.Base.length
;                                                                                                                                                                                                                                     x'
; 
;                                                                                                                                                                                                                                 )
; 
;                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                             0
;                                                                                                                                                                                                                             b
;                                                                                                                                                                                                                            ==
;                                                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                                                                                                 x'
;                                                                                                                                                                                                                                 0
;                                                                                                                                                                                                                                 b
; 
;                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                             b
;                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                               b +
;                                                                                                                                                                                                                               b
;                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                            ==>
;                                                                                                                                                                                                                           (
;                                                                                                                                                                                                                             b <=
;                                                                                                                                                                                                                             FStar.Seq.Base.length
;                                                                                                                                                                                                                               (
;                                                                                                                                                                                                                                 FStar.Seq.Base.slice
;                                                                                                                                                                                                                                   x
;                                                                                                                                                                                                                                   b
;                                                                                                                                                                                                                                   (
;                                                                                                                                                                                                                                     FStar.Seq.Base.length
;                                                                                                                                                                                                                                       x
; 
;                                                                                                                                                                                                                                   )
; 
;                                                                                                                                                                                                                               )
;                                                                                                                                                                                                                              ==>
;                                                                                                                                                                                                                             0 <=
;                                                                                                                                                                                                                             b &&
;                                                                                                                                                                                                                             b <=
;                                                                                                                                                                                                                             FStar.Seq.Base.length
;                                                                                                                                                                                                                               (
;                                                                                                                                                                                                                                 FStar.Seq.Base.slice
;                                                                                                                                                                                                                                   x'
;                                                                                                                                                                                                                                   b
;                                                                                                                                                                                                                                   (
;                                                                                                                                                                                                                                     FStar.Seq.Base.length
;                                                                                                                                                                                                                                       x'
; 
;                                                                                                                                                                                                                                   )
; 
;                                                                                                                                                                                                                               )
; 
;                                                                                                                                                                                                                           ) /\
;                                                                                                                                                                                                                           (
;                                                                                                                                                                                                                             forall
;                                                                                                                                                                                                                               (any_result:
;                                                                                                                                                                                                                               MiniParse.Spec.Base.consumed_length
;                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                                                                                                                                     x
;                                                                                                                                                                                                                                     b
;                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                       FStar.Seq.Base.length
;                                                                                                                                                                                                                                         x
; 
;                                                                                                                                                                                                                                     )
; 
;                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                               )
;                                                                                                                                                                                                                             .
;                                                                                                                                                                                                                               b ==
;                                                                                                                                                                                                                               any_result ==>
;                                                                                                                                                                                                                               (
;                                                                                                                                                                                                                                 forall
;                                                                                                                                                                                                                                   (any_result:
;                                                                                                                                                                                                                                   FStar.Seq.Base.seq
;                                                                                                                                                                                                                                     MiniParse.Spec.Base.byte
;                                                                                                                                                                                                                                   )
;                                                                                                                                                                                                                                 .
;                                                                                                                                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                                                                                                                                         x'
;                                                                                                                                                                                                                                         b
;                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                           FStar.Seq.Base.length
;                                                                                                                                                                                                                                             x'
; 
;                                                                                                                                                                                                                                         )
; 
;                                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                                     0
;                                                                                                                                                                                                                                     b
;                                                                                                                                                                                                                                    ==
;                                                                                                                                                                                                                                   any_result ==>
;                                                                                                                                                                                                                                   (
;                                                                                                                                                                                                                                     b <=
;                                                                                                                                                                                                                                     FStar.Seq.Base.length
;                                                                                                                                                                                                                                       (
;                                                                                                                                                                                                                                         FStar.Seq.Base.slice
;                                                                                                                                                                                                                                           x
;                                                                                                                                                                                                                                           b
;                                                                                                                                                                                                                                           (
;                                                                                                                                                                                                                                             FStar.Seq.Base.length
;                                                                                                                                                                                                                                               x
; 
;                                                                                                                                                                                                                                           )
; 
;                                                                                                                                                                                                                                       )
;                                                                                                                                                                                                                                      ==>
;                                                                                                                                                                                                                                     0 <=
;                                                                                                                                                                                                                                     b &&
;                                                                                                                                                                                                                                     b <=
;                                                                                                                                                                                                                                     FStar.Seq.Base.length
;                                                                                                                                                                                                                                       (
;                                                                                                                                                                                                                                         FStar.Seq.Base.slice
;                                                                                                                                                                                                                                           x
;                                                                                                                                                                                                                                           b
;                                                                                                                                                                                                                                           (
;                                                                                                                                                                                                                                             FStar.Seq.Base.length
;                                                                                                                                                                                                                                               x
; 
;                                                                                                                                                                                                                                           )
; 
;                                                                                                                                                                                                                                       )
; 
;                                                                                                                                                                                                                                   ) /\
;                                                                                                                                                                                                                                   (
;                                                                                                                                                                                                                                     forall
;                                                                                                                                                                                                                                       (any_result:
;                                                                                                                                                                                                                                       MiniParse.Spec.Base.consumed_length
;                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                                                                             x
;                                                                                                                                                                                                                                             b
;                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                                                                                                                 x
; 
;                                                                                                                                                                                                                                             )
; 
;                                                                                                                                                                                                                                         )
;                                                                                                                                                                                                                                       )
;                                                                                                                                                                                                                                     .
;                                                                                                                                                                                                                                       b ==
;                                                                                                                                                                                                                                       any_result ==>
;                                                                                                                                                                                                                                       (
;                                                                                                                                                                                                                                         forall
;                                                                                                                                                                                                                                           (any_result:
;                                                                                                                                                                                                                                           FStar.Seq.Base.seq
;                                                                                                                                                                                                                                             MiniParse.Spec.Base.byte
;                                                                                                                                                                                                                                           )
;                                                                                                                                                                                                                                         .
;                                                                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                 x
;                                                                                                                                                                                                                                                 b
;                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                   FStar.Seq.Base.length
;                                                                                                                                                                                                                                                     x
; 
;                                                                                                                                                                                                                                                 )
; 
;                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                             0
;                                                                                                                                                                                                                                             b
;                                                                                                                                                                                                                                            ==
;                                                                                                                                                                                                                                           any_result ==>
;                                                                                                                                                                                                                                           (
;                                                                                                                                                                                                                                             forall
;                                                                                                                                                                                                                                               (any_result:
;                                                                                                                                                                                                                                               Prims.logical)
;                                                                                                                                                                                                                                             .
;                                                                                                                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                     x'
;                                                                                                                                                                                                                                                     b
;                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                       FStar.Seq.Base.length
;                                                                                                                                                                                                                                                         x'
; 
;                                                                                                                                                                                                                                                     )
; 
;                                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                                 0
;                                                                                                                                                                                                                                                 b
;                                                                                                                                                                                                                                                ==
;                                                                                                                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                     x
;                                                                                                                                                                                                                                                     b
;                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                       FStar.Seq.Base.length
;                                                                                                                                                                                                                                                         x
; 
;                                                                                                                                                                                                                                                     )
; 
;                                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                                 0
;                                                                                                                                                                                                                                                 b
;                                                                                                                                                                                                                                                ==
;                                                                                                                                                                                                                                               any_result ==>
;                                                                                                                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                     x'
;                                                                                                                                                                                                                                                     b
;                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                       FStar.Seq.Base.length
;                                                                                                                                                                                                                                                         x'
; 
;                                                                                                                                                                                                                                                     )
; 
;                                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                                 0
;                                                                                                                                                                                                                                                 b
;                                                                                                                                                                                                                                                ==
;                                                                                                                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                     x
;                                                                                                                                                                                                                                                     b
;                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                       FStar.Seq.Base.length
;                                                                                                                                                                                                                                                         x
; 
;                                                                                                                                                                                                                                                     )
; 
;                                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                                 0
;                                                                                                                                                                                                                                                 b
;                                                                                                                                                                                                                                                /\
;                                                                                                                                                                                                                                               (
;                                                                                                                                                                                                                                                 forall
;                                                                                                                                                                                                                                                   (pure_result:
;                                                                                                                                                                                                                                                   Prims.unit)
;                                                                                                                                                                                                                                                 .
;                                                                                                                                                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                         x'
;                                                                                                                                                                                                                                                         b
;                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                           FStar.Seq.Base.length
;                                                                                                                                                                                                                                                             x'
; 
;                                                                                                                                                                                                                                                         )
; 
;                                                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                                                     0
;                                                                                                                                                                                                                                                     b
;                                                                                                                                                                                                                                                    ==
;                                                                                                                                                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                         x
;                                                                                                                                                                                                                                                         b
;                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                           FStar.Seq.Base.length
;                                                                                                                                                                                                                                                             x
; 
;                                                                                                                                                                                                                                                         )
; 
;                                                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                                                     0
;                                                                                                                                                                                                                                                     b
;                                                                                                                                                                                                                                                    ==>
;                                                                                                                                                                                                                                                   MiniParse.Spec.Base.no_lookahead_weak_on
;                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                       p'
;                                                                                                                                                                                                                                                         b
; 
;                                                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                         x
;                                                                                                                                                                                                                                                         b
;                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                           FStar.Seq.Base.length
;                                                                                                                                                                                                                                                             x
; 
;                                                                                                                                                                                                                                                         )
; 
;                                                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                         x'
;                                                                                                                                                                                                                                                         b
;                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                           FStar.Seq.Base.length
;                                                                                                                                                                                                                                                             x'
; 
;                                                                                                                                                                                                                                                         )
; 
;                                                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                                                    /\
;                                                                                                                                                                                                                                                   (
;                                                                                                                                                                                                                                                     forall
;                                                                                                                                                                                                                                                       (pure_result:
;                                                                                                                                                                                                                                                       Prims.unit)
;                                                                                                                                                                                                                                                     .
;                                                                                                                                                                                                                                                       MiniParse.Spec.Base.no_lookahead_weak_on
;                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                           p'
;                                                                                                                                                                                                                                                             b
; 
;                                                                                                                                                                                                                                                         )
;                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                             x
;                                                                                                                                                                                                                                                             b
;                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                                                                                                                                 x
; 
;                                                                                                                                                                                                                                                             )
; 
;                                                                                                                                                                                                                                                         )
;                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                             x'
;                                                                                                                                                                                                                                                             b
;                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                                                                                                                                 x'
; 
;                                                                                                                                                                                                                                                             )
; 
;                                                                                                                                                                                                                                                         )
;                                                                                                                                                                                                                                                        ==>
;                                                                                                                                                                                                                                                       (
;                                                                                                                                                                                                                                                         forall
;                                                                                                                                                                                                                                                           (any_result:
;                                                                                                                                                                                                                                                           Prims.unit)
;                                                                                                                                                                                                                                                         .
;                                                                                                                                                                                                                                                           p
;                                                                                                                                                                                                                                                             any_result
; 
;                                                                                                                                                                                                                                                       )
;                                                                                                                                                                                                                                                   )
;                                                                                                                                                                                                                                               )
;                                                                                                                                                                                                                                           )
;                                                                                                                                                                                                                                       )
;                                                                                                                                                                                                                                   )
;                                                                                                                                                                                                                               )
;                                                                                                                                                                                                                           )
;                                                                                                                                                                                                                       )
;                                                                                                                                                                                                                   )
;                                                                                                                                                                                                               )
;                                                                                                                                                                                                           )
;                                                                                                                                                                                                       )
;                                                                                                                                                                                                   )
;                                                                                                                                                                                               )
;                                                                                                                                                                                           )
;                                                                                                                                                                                       )
;                                                                                                                                                                                   )
;                                                                                                                                                                               )
;                                                                                                                                                                           )
;                                                                                                                                                                       )
;                                                                                                                                                                   )
;                                                                                                                                                               )
;                                                                                                                                                           )
;                                                                                                                                                       )
;                                                                                                                                                   )
;                                                                                                                                               )
;                                                                                                                                           )
;                                                                                                                                       )
;                                                                                                                                   )
;                                                                                                                               )
;                                                                                                                           )
;                                                                                                                       )
;                                                                                                                   )
;                                                                                                               )
;                                                                                                           )
;                                                                                                       )
;                                                                                                   ))
;                                                                                           ))))))))))
;                                                   ))))) /\
;                                   (forall (any_result:
;                                       (_: Prims.unit
;                                           -> FStar.Pervasives.Lemma
;                                               (requires
;                                                 FStar.Seq.Base.length x' <= FStar.Seq.Base.length x /\
;                                                 FStar.Seq.Base.slice x' 0 b ==
;                                                 FStar.Seq.Base.slice x 0 b)
;                                               (ensures
;                                                 Some? (MiniParse.Spec.Base.bparse (MiniParse.Spec.Combinators.and_then_bare
;                                                           p
;                                                           p')
;                                                       x') /\
;                                                 (let FStar.Pervasives.Native.Some v' =
;                                                     MiniParse.Spec.Base.bparse (MiniParse.Spec.Combinators.and_then_bare
;                                                           p
;                                                           p')
;                                                       x'
;                                                   in
;                                                   (let y', off' = v' in
;                                                     b == y' /\ b == off')
;                                                   <:
;                                                   Prims.logical)))).
;                                       (forall (_: Prims.unit).
;                                           (*  - Could not prove post-condition
; *)
;                                           FStar.Seq.Base.length x' <= FStar.Seq.Base.length x ==>
;                                           (b <= FStar.Seq.Base.length x' ==>
;                                             0 <= b && b <= FStar.Seq.Base.length x') /\
;                                           (forall (any_result:
;                                               MiniParse.Spec.Base.consumed_length x').
;                                               b == any_result ==>
;                                               (forall (any_result:
;                                                   FStar.Seq.Base.seq MiniParse.Spec.Base.byte).
;                                                   FStar.Seq.Base.slice x' 0 b == any_result ==>
;                                                   b <= FStar.Seq.Base.length x ==>
;                                                   0 <= b && b <= FStar.Seq.Base.length x))) /\
;                                       (forall (any_result: (_: Prims.unit -> Type0)).
;                                           (fun _ ->
;                                               FStar.Seq.Base.length x' <= FStar.Seq.Base.length x /\
;                                               FStar.Seq.Base.slice x' 0 b ==
;                                               FStar.Seq.Base.slice x 0 b) ==
;                                           any_result ==>
;                                           (forall (_: Prims.unit).
;                                               (*  - Could not prove post-condition
; *)
;                                               Some? (MiniParse.Spec.Base.bparse (MiniParse.Spec.Combinators.and_then_bare
;                                                         p
;                                                         p')
;                                                     x') ==>
;                                               (forall (any_result:
;                                                   FStar.Pervasives.Native.option (t' &
;                                                       MiniParse.Spec.Base.consumed_length x')).
;                                                   MiniParse.Spec.Base.bparse (MiniParse.Spec.Combinators.and_then_bare
;                                                         p
;                                                         p')
;                                                     x' ==
;                                                   any_result ==>
;                                                   ~(Some? (MiniParse.Spec.Base.bparse (MiniParse.Spec.Combinators.and_then_bare
;                                                               p
;                                                               p')
;                                                           x')) ==>
;                                                   Prims.l_False)) /\
;                                           (forall (any_result: (_: Prims.unit -> Type0)).
;                                               (fun _ ->
;                                                   Some? (MiniParse.Spec.Base.bparse (MiniParse.Spec.Combinators.and_then_bare
;                                                             p
;                                                             p')
;                                                         x') /\
;                                                   (let FStar.Pervasives.Native.Some v' =
;                                                       MiniParse.Spec.Base.bparse (MiniParse.Spec.Combinators.and_then_bare
;                                                             p
;                                                             p')
;                                                         x'
;                                                     in
;                                                     (let y', off' = v' in
;                                                       b == y' /\ b == off')
;                                                     <:
;                                                     Prims.logical)) ==
;                                               any_result ==>
;                                               (forall (pure_result: Prims.unit).
;                                                   (FStar.Seq.Base.length x' <=
;                                                     FStar.Seq.Base.length x /\
;                                                     FStar.Seq.Base.slice x' 0 b ==
;                                                     FStar.Seq.Base.slice x 0 b ==>
;                                                     Some? (MiniParse.Spec.Base.bparse (MiniParse.Spec.Combinators.and_then_bare
;                                                               p
;                                                               p')
;                                                           x') /\
;                                                     (let FStar.Pervasives.Native.Some v' =
;                                                         MiniParse.Spec.Base.bparse (MiniParse.Spec.Combinators.and_then_bare
;                                                               p
;                                                               p')
;                                                           x'
;                                                       in
;                                                       (let y', off' = v' in
;                                                         b == y' /\ b == off')
;                                                       <:
;                                                       Prims.logical)) ==>
;                                                   k pure_result)))))) /\
;                             (~(b <= FStar.Seq.Base.length x' = true) ==>
;                               (forall (b: Prims.bool).
;                                   b <= FStar.Seq.Base.length x' == b ==>
;                                   (forall (any_result: Prims.unit). k any_result))))))) /\
;             (~(Some? (MiniParse.Spec.Combinators.and_then_bare p p' x)) ==>
;               (forall (b:
;                   FStar.Pervasives.Native.option (t' & MiniParse.Spec.Base.consumed_length x)).
;                   MiniParse.Spec.Combinators.and_then_bare p p' x == b ==>
;                   (forall (any_result: Prims.unit). k any_result)))))


; Context: While encoding a query
; While typechecking the top-level declaration `let and_then_no_lookahead_weak_on`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(MiniParse.Spec.Base.bare_parser @x0))
(HasType @x3
(Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc @x1
@x0))
(HasType @x4
MiniParse.Spec.Base.bytes)
(HasType @x5
MiniParse.Spec.Base.bytes))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Prims.pure_post Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(187,6-187,25); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(187,6-187,25); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(MiniParse.Spec.Base.no_lookahead_weak @x0
@x2)
)


;; def=MiniParse.Spec.Combinators.fst(188,6-188,48); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x7 Term))
 (! (implies (HasType @x7
@x0)

;; def=MiniParse.Spec.Combinators.fst(188,23-188,47); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(188,23-188,47); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(MiniParse.Spec.Base.no_lookahead_weak @x1
(ApplyTT @x3
@x7))
)
)
 
;;no pats
:qid @query.2))


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x7 Term))
 (! (implies (and (or label_1
(HasType @x7
Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(190,13-190,61); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(or label_2

;; def=MiniParse.Spec.Combinators.fst(190,13-190,61); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(190,13-190,61); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(MiniParse.Spec.Base.no_lookahead_weak_on @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x4
@x5)
)
)
)

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(ApplyTT @x6
@x7)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(ApplyTT @x6
@x7)
)
)
:qid @query.3))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x4))))

;; def=MiniParse.Spec.Combinators.fst(194,10-194,13); use=MiniParse.Spec.Combinators.fst(194,10-194,13)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x7)
)

;; def=Prims.fst(402,2-402,97); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x9 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(Valid 
;; def=Prims.fst(402,73-402,79); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(ApplyTT @x6
@x9)
)


;; def=Prims.fst(402,84-402,87); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(Valid 
;; def=Prims.fst(402,84-402,87); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(ApplyTT @x8
@x9)
)
)
 :weight 0


:pattern ((ApplyTT @x8
@x9))
:qid @query.6))
)

;; def=Prims.fst(389,2-389,39); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(and 
;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x4)))

;; def=MiniParse.Spec.Combinators.fst(194,10-195,12); use=MiniParse.Spec.Combinators.fst(194,10-195,12)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x4)
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x4))
@x9))
)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x10 Term))
 (! (implies (HasType @x10
@x1)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(MiniParse.Spec.Base.consumed_length @x4))

;; def=MiniParse.Spec.Combinators.fst(196,11-196,17); use=MiniParse.Spec.Combinators.fst(196,11-196,17)
(= @x9
(FStar.Pervasives.Native.Mktuple2 @x1
(MiniParse.Spec.Base.consumed_length @x4)
@x10
@x11))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(and 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(198,41-198,44)
(or label_3

;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(198,41-198,44)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
)


;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.nat)

;; def=MiniParse.Spec.Combinators.fst(197,10-198,16); use=MiniParse.Spec.Combinators.fst(198,11-198,44)
(= @x11
@x12)
)

;; def=Prims.fst(402,2-402,97); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x14 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(Valid 
;; def=Prims.fst(402,73-402,79); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(ApplyTT @x8
@x14)
)


;; def=Prims.fst(402,84-402,87); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(Valid 
;; def=Prims.fst(402,84-402,87); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(ApplyTT @x13
@x14)
)
)
 :weight 0


:pattern ((ApplyTT @x13
@x14))
:qid @query.12))
)

;; def=Prims.fst(389,2-389,39); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(199,9-199,29); use=MiniParse.Spec.Combinators.fst(199,9-199,29)
(= (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxBool true))


;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(and 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(201,37-201,40)
(or label_4

;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(201,37-201,40)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))
)


;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
Prims.nat)

;; def=MiniParse.Spec.Combinators.fst(197,10-201,12); use=MiniParse.Spec.Combinators.fst(201,6-201,40)
(= @x11
@x14)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(and 
;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(201,43-235,29)
(forall ((@x15 Term))
 (! (implies (HasType @x15
Prims.unit)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(202,7-209,6)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(203,14-203,43); use=MiniParse.Spec.Combinators.fst(203,14-203,43)
(<= (BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))


;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(203,13-203,92)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(203,62-203,68)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(203,62-203,68)
(and 
;; def=MiniParse.Spec.Combinators.fst(201,6-201,12); use=MiniParse.Spec.Combinators.fst(203,62-203,68)
(or label_5
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(201,6-201,12); use=MiniParse.Spec.Combinators.fst(203,62-203,68)
(or label_6
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(203,13-203,92)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
(MiniParse.Spec.Base.consumed_length @x5))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(203,13-203,92)
(= @x11
@x16)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(203,13-203,92)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(203,13-203,92)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x17)


;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(203,86-203,91)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
)

;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(203,86-203,91)
(and 
;; def=MiniParse.Spec.Combinators.fst(198,11-198,16); use=MiniParse.Spec.Combinators.fst(203,86-203,91)
(or label_7
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(198,11-198,16); use=MiniParse.Spec.Combinators.fst(203,86-203,91)
(or label_8
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
)
)
 
;;no pats
:qid @query.16))
)
 
;;no pats
:qid @query.15))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(202,7-209,6)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
Prims.logical)

;; def=FStar.Pervasives.fsti(112,28-112,31); use=MiniParse.Spec.Combinators.fst(202,7-209,6)
(= (Prims.l_and (Prims.b2t (Prims.op_LessThanOrEqual (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
(Prims.eq2 (FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x11)))
@x16)
)

;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(202,7-209,6)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(203,14-203,43); use=MiniParse.Spec.Combinators.fst(204,12-209,5)
(<= (BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))


;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(204,12-209,5)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(204,12-209,5)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(204,12-209,5)
(and 
;; def=MiniParse.Spec.Combinators.fst(201,6-201,12); use=MiniParse.Spec.Combinators.fst(203,62-203,68)
(or label_9
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(201,6-201,12); use=MiniParse.Spec.Combinators.fst(203,62-203,68)
(or label_10
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(204,12-209,5)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
(MiniParse.Spec.Base.consumed_length @x5))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(204,12-209,5)
(= @x11
@x17)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(204,12-209,5)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(204,12-209,5)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x18)


;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(204,12-209,5)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
)

;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(204,12-209,5)
(and 
;; def=MiniParse.Spec.Combinators.fst(198,11-198,16); use=MiniParse.Spec.Combinators.fst(203,86-203,91)
(or label_11
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(198,11-198,16); use=MiniParse.Spec.Combinators.fst(203,86-203,91)
(or label_12
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
)
)
 
;;no pats
:qid @query.19))
)
 
;;no pats
:qid @query.18))
)
)

;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(202,7-209,6)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
(Tm_refine_67c7b285aeb4981627ddd60e421600cb @x5
@x4
@x11))

;; def=MiniParse.Spec.Combinators.fst(205,5-205,24); use=MiniParse.Spec.Combinators.fst(205,5-205,24)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x5)))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(204,12-209,5)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))))

;; def=MiniParse.Spec.Combinators.fst(206,10-206,32); use=MiniParse.Spec.Combinators.fst(206,10-206,32)
(= (MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x5)
@x18)


;; def=MiniParse.Spec.Combinators.fst(206,10-206,17); use=MiniParse.Spec.Combinators.fst(206,10-206,17)
(not 
;; def=MiniParse.Spec.Combinators.fst(206,10-206,17); use=MiniParse.Spec.Combinators.fst(206,10-206,17)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x5)))
)
)
label_13)
 
;;no pats
:qid @query.21))
)
 
;;no pats
:qid @query.20))
)
)
 
;;no pats
:qid @query.17))
)
)
 
;;no pats
:qid @query.14))


;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x15 Term))
 (! (implies (HasType @x15
Prims.unit)

;; def=Prims.fst(406,51-459,89); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(203,14-203,43); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(<= (BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))


;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and 
;; def=MiniParse.Spec.Combinators.fst(201,6-201,12); use=MiniParse.Spec.Combinators.fst(203,62-203,68)
(or label_14
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(201,6-201,12); use=MiniParse.Spec.Combinators.fst(203,62-203,68)
(or label_15
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
(MiniParse.Spec.Base.consumed_length @x5))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= @x11
@x16)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x17)


;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
)

;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and 
;; def=MiniParse.Spec.Combinators.fst(198,11-198,16); use=MiniParse.Spec.Combinators.fst(203,86-203,91)
(or label_16
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(198,11-198,16); use=MiniParse.Spec.Combinators.fst(203,86-203,91)
(or label_17
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
)
)
 
;;no pats
:qid @query.24))
)
 
;;no pats
:qid @query.23))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
Prims.logical)

;; def=FStar.Pervasives.fsti(112,28-112,31); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (Prims.l_and (Prims.b2t (Prims.op_LessThanOrEqual (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
(Prims.eq2 (FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x11)))
@x16)
)

;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(203,14-203,43); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(<= (BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))


;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and 
;; def=MiniParse.Spec.Combinators.fst(201,6-201,12); use=MiniParse.Spec.Combinators.fst(203,62-203,68)
(or label_18
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(201,6-201,12); use=MiniParse.Spec.Combinators.fst(203,62-203,68)
(or label_19
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
(MiniParse.Spec.Base.consumed_length @x5))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= @x11
@x17)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x18)


;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
)

;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and 
;; def=MiniParse.Spec.Combinators.fst(198,11-198,16); use=MiniParse.Spec.Combinators.fst(203,86-203,91)
(or label_20
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(198,11-198,16); use=MiniParse.Spec.Combinators.fst(203,86-203,91)
(or label_21
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
)
)
 
;;no pats
:qid @query.27))
)
 
;;no pats
:qid @query.26))
)
)

;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
(Tm_refine_67c7b285aeb4981627ddd60e421600cb @x5
@x4
@x11))

;; def=MiniParse.Spec.Combinators.fst(205,5-205,24); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x5)))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))))

;; def=MiniParse.Spec.Combinators.fst(206,10-206,32); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x5)
@x18)


;; def=MiniParse.Spec.Combinators.fst(206,10-206,17); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(not 
;; def=MiniParse.Spec.Combinators.fst(206,10-206,17); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x5)))
)
)
label_22)
 
;;no pats
:qid @query.29))
)
 
;;no pats
:qid @query.28))
)
)
 
;;no pats
:qid @query.25))


;; def=Prims.fst(406,51-406,91); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
(Prims.pure_post Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(203,14-203,43); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(<= (BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))


;; def=MiniParse.Spec.Combinators.fst(203,47-203,91); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x11))


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x17 Term))
 (! (implies (and (or label_23
(HasType @x17
Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(205,5-205,24); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(or label_24

;; def=MiniParse.Spec.Combinators.fst(205,5-205,24); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x5)))
)

(let ((@lb18 (MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x5)))
(ite (is-FStar.Pervasives.Native.Some @lb18)
(let ((@lb19 (FStar.Pervasives.Native.Some_v @lb18)))

;; def=MiniParse.Spec.Combinators.fst(208,5-208,45); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and 
;; def=MiniParse.Spec.Combinators.fst(208,5-208,12); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(or label_25

;; def=MiniParse.Spec.Combinators.fst(208,5-208,12); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= @x10
(FStar.Pervasives.Native.Mktuple2__1 @lb19))
)


;; def=MiniParse.Spec.Combinators.fst(208,16-208,45); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(or label_26

;; def=MiniParse.Spec.Combinators.fst(208,16-208,45); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= @x11
(FStar.Pervasives.Native.Mktuple2__2 @lb19))
)
)
)
Unreachable)))

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(ApplyTT @x16
@x17)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(ApplyTT @x16
@x17)
)
)
:qid @query.31))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(210,3-210,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(210,10-210,30); use=MiniParse.Spec.Combinators.fst(210,3-210,9)
(or label_27

;; def=MiniParse.Spec.Combinators.fst(210,10-210,30); use=MiniParse.Spec.Combinators.fst(210,3-210,9)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x4))
(MiniParse.Spec.Base.bparse @x0
@x2
@x4)))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(210,3-210,9)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(210,10-210,30); use=MiniParse.Spec.Combinators.fst(210,3-210,9)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x4))
(MiniParse.Spec.Base.bparse @x0
@x2
@x4)))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x4))))

;; def=MiniParse.Spec.Combinators.fst(211,8-211,37); use=MiniParse.Spec.Combinators.fst(211,8-211,37)
(= (MiniParse.Spec.Base.bparse @x0
@x2
@x4)
@x18)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(211,8-211,23); use=MiniParse.Spec.Combinators.fst(211,8-211,23)
(not 
;; def=MiniParse.Spec.Combinators.fst(211,8-211,23); use=MiniParse.Spec.Combinators.fst(211,8-211,23)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x4))
(MiniParse.Spec.Base.bparse @x0
@x2
@x4)))
)

label_28)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x19 Term))
 (! (implies (HasType @x19
@x0)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x20 Term))
 (! (implies (and (HasType @x20
(MiniParse.Spec.Base.consumed_length @x4))

;; def=MiniParse.Spec.Combinators.fst(211,8-211,23); use=MiniParse.Spec.Combinators.fst(211,8-211,23)
(= (MiniParse.Spec.Base.bparse @x0
@x2
@x4)
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x4))
(FStar.Pervasives.Native.Mktuple2 @x0
(MiniParse.Spec.Base.consumed_length @x4)
@x19
@x20)))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(212,3-212,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(212,10-212,23); use=MiniParse.Spec.Combinators.fst(212,3-212,9)
(or label_29

;; def=MiniParse.Spec.Combinators.fst(212,10-212,23); use=MiniParse.Spec.Combinators.fst(212,3-212,9)
(<= (BoxInt_proj_0 @x20)
(BoxInt_proj_0 @x11))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(212,3-212,9)
(forall ((@x21 Term))
 (! (implies (and (HasType @x21
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(212,10-212,23); use=MiniParse.Spec.Combinators.fst(212,3-212,9)
(<= (BoxInt_proj_0 @x20)
(BoxInt_proj_0 @x11))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(213,3-213,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(213,10-213,33); use=MiniParse.Spec.Combinators.fst(213,3-213,9)
(or label_30

;; def=MiniParse.Spec.Combinators.fst(213,10-213,33); use=MiniParse.Spec.Combinators.fst(213,3-213,9)
(<= (BoxInt_proj_0 @x20)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(213,3-213,9)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(213,10-213,33); use=MiniParse.Spec.Combinators.fst(213,3-213,9)
(<= (BoxInt_proj_0 @x20)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(214,26-214,30)
(<= (BoxInt_proj_0 @x20)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(214,26-214,30)
(and 
;; def=MiniParse.Spec.Combinators.fst(211,18-211,22); use=MiniParse.Spec.Combinators.fst(214,26-214,30)
(or label_31
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x20)))


;; def=MiniParse.Spec.Combinators.fst(211,18-211,22); use=MiniParse.Spec.Combinators.fst(214,26-214,30)
(or label_32
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x23 Term))
 (! (implies (and (HasType @x23
(MiniParse.Spec.Base.consumed_length @x4))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= @x20
@x23)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x24 Term))
 (! (implies (and (HasType @x24
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x20)
@x24)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(214,60-214,66)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(214,60-214,66)
(and 
;; def=MiniParse.Spec.Combinators.fst(201,6-201,12); use=MiniParse.Spec.Combinators.fst(214,60-214,66)
(or label_33
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(201,6-201,12); use=MiniParse.Spec.Combinators.fst(214,60-214,66)
(or label_34
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x25 Term))
 (! (implies (and (HasType @x25
(MiniParse.Spec.Base.consumed_length @x5))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= @x11
@x25)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x26 Term))
 (! (implies (and (HasType @x26
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=FStar.Seq.Base.fsti(64,23-64,24); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x26)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(214,70-214,74)
(<= (BoxInt_proj_0 @x20)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(214,70-214,74)
(and 
;; def=MiniParse.Spec.Combinators.fst(211,18-211,22); use=MiniParse.Spec.Combinators.fst(214,70-214,74)
(or label_35
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x20)))


;; def=MiniParse.Spec.Combinators.fst(211,18-211,22); use=MiniParse.Spec.Combinators.fst(214,70-214,74)
(or label_36
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x27 Term))
 (! (implies (and (HasType @x27
(MiniParse.Spec.Base.consumed_length @x4))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= @x20
@x27)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x28 Term))
 (! (implies (and (HasType @x28
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,42-175,43); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
(BoxInt 0)
@x20)
@x28)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x29 Term))
 (! (implies (and (HasType @x29
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (Prims.eq2 (FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x20)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
(BoxInt 0)
@x20))
@x29)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(214,3-214,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(214,10-214,75); use=MiniParse.Spec.Combinators.fst(214,3-214,9)
(or label_37

;; def=MiniParse.Spec.Combinators.fst(214,10-214,75); use=MiniParse.Spec.Combinators.fst(214,3-214,9)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x20)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
(BoxInt 0)
@x20))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(214,3-214,9)
(forall ((@x30 Term))
 (! (implies (and (HasType @x30
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(214,10-214,75); use=MiniParse.Spec.Combinators.fst(214,3-214,9)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x20)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
(BoxInt 0)
@x20))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(215,26-215,30)
(<= (BoxInt_proj_0 @x20)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(215,26-215,30)
(and 
;; def=MiniParse.Spec.Combinators.fst(211,18-211,22); use=MiniParse.Spec.Combinators.fst(215,26-215,30)
(or label_38
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x20)))


;; def=MiniParse.Spec.Combinators.fst(211,18-211,22); use=MiniParse.Spec.Combinators.fst(215,26-215,30)
(or label_39
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x31 Term))
 (! (implies (and (HasType @x31
(MiniParse.Spec.Base.consumed_length @x4))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= @x20
@x31)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x32 Term))
 (! (implies (and (HasType @x32
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x20)
@x32)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(215,48-215,52)
(<= (BoxInt_proj_0 @x20)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(215,48-215,52)
(and 
;; def=MiniParse.Spec.Combinators.fst(211,18-211,22); use=MiniParse.Spec.Combinators.fst(215,48-215,52)
(or label_40
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x20)))


;; def=MiniParse.Spec.Combinators.fst(211,18-211,22); use=MiniParse.Spec.Combinators.fst(215,48-215,52)
(or label_41
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x33 Term))
 (! (implies (and (HasType @x33
(MiniParse.Spec.Base.consumed_length @x4))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= @x20
@x33)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x34 Term))
 (! (implies (and (HasType @x34
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,42-175,43); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x20)
@x34)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x35 Term))
 (! (implies (and (HasType @x35
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (Prims.eq2 (FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x20)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x20))
@x35)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(215,3-215,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(215,10-215,53); use=MiniParse.Spec.Combinators.fst(215,3-215,9)
(or label_42

;; def=MiniParse.Spec.Combinators.fst(215,10-215,53); use=MiniParse.Spec.Combinators.fst(215,3-215,9)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x20)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x20))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(215,3-215,9)
(forall ((@x36 Term))
 (! (implies (and (HasType @x36
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(215,10-215,53); use=MiniParse.Spec.Combinators.fst(215,3-215,9)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x20)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x20))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(216,3-216,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(216,10-216,39); use=MiniParse.Spec.Combinators.fst(216,3-216,9)
(or label_43

;; def=MiniParse.Spec.Combinators.fst(216,10-216,39); use=MiniParse.Spec.Combinators.fst(216,3-216,9)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(216,10-216,39); use=MiniParse.Spec.Combinators.fst(216,3-216,9)
(MiniParse.Spec.Base.no_lookahead_weak_on @x0
@x2
@x4
@x5)
)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(216,3-216,9)
(forall ((@x37 Term))
 (! (implies (and (HasType @x37
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(216,10-216,39); use=MiniParse.Spec.Combinators.fst(216,3-216,9)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(216,10-216,39); use=MiniParse.Spec.Combinators.fst(216,3-216,9)
(MiniParse.Spec.Base.no_lookahead_weak_on @x0
@x2
@x4
@x5)
)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(217,3-217,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(217,10-217,31); use=MiniParse.Spec.Combinators.fst(217,3-217,9)
(or label_44

;; def=MiniParse.Spec.Combinators.fst(217,10-217,31); use=MiniParse.Spec.Combinators.fst(217,3-217,9)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5))
(MiniParse.Spec.Base.bparse @x0
@x2
@x5)))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(217,3-217,9)
(forall ((@x38 Term))
 (! (implies (and (HasType @x38
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(217,10-217,31); use=MiniParse.Spec.Combinators.fst(217,3-217,9)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5))
(MiniParse.Spec.Base.bparse @x0
@x2
@x5)))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x39 Term))
 (! (implies (and (HasType @x39
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5))))

;; def=MiniParse.Spec.Combinators.fst(218,8-218,31); use=MiniParse.Spec.Combinators.fst(218,8-218,31)
(= (MiniParse.Spec.Base.bparse @x0
@x2
@x5)
@x39)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(218,8-218,16); use=MiniParse.Spec.Combinators.fst(218,8-218,16)
(not 
;; def=MiniParse.Spec.Combinators.fst(218,8-218,16); use=MiniParse.Spec.Combinators.fst(218,8-218,16)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5))
(MiniParse.Spec.Base.bparse @x0
@x2
@x5)))
)

label_45)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x40 Term))
 (! (implies (and (HasType @x40
(FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5)))

;; def=MiniParse.Spec.Combinators.fst(218,8-218,16); use=MiniParse.Spec.Combinators.fst(218,8-218,16)
(= (MiniParse.Spec.Base.bparse @x0
@x2
@x5)
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5))
@x40))
)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x41 Term))
 (! (implies (HasType @x41
@x0)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x42 Term))
 (! (implies (and (HasType @x42
(MiniParse.Spec.Base.consumed_length @x5))

;; def=MiniParse.Spec.Combinators.fst(219,8-219,18); use=MiniParse.Spec.Combinators.fst(219,8-219,18)
(= @x40
(FStar.Pervasives.Native.Mktuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5)
@x41
@x42))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(220,3-220,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(220,11-220,20); use=MiniParse.Spec.Combinators.fst(220,3-220,9)
(or label_46

;; def=MiniParse.Spec.Combinators.fst(220,11-220,20); use=MiniParse.Spec.Combinators.fst(220,3-220,9)
(= @x19
@x41)
)


;; def=MiniParse.Spec.Combinators.fst(220,24-220,55); use=MiniParse.Spec.Combinators.fst(220,3-220,9)
(or label_47

;; def=MiniParse.Spec.Combinators.fst(220,24-220,55); use=MiniParse.Spec.Combinators.fst(220,3-220,9)
(= @x20
@x42)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(220,3-220,9)
(forall ((@x43 Term))
 (! (implies (and (HasType @x43
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(220,11-220,20); use=MiniParse.Spec.Combinators.fst(220,3-220,9)
(= @x19
@x41)


;; def=MiniParse.Spec.Combinators.fst(220,24-220,55); use=MiniParse.Spec.Combinators.fst(220,3-220,9)
(= @x20
@x42)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and 
;; def=MiniParse.Spec.Combinators.fst(221,37-221,51); use=MiniParse.Spec.Combinators.fst(221,37-221,51)
(or label_48
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))


;; def=MiniParse.Spec.Combinators.fst(221,37-221,51); use=MiniParse.Spec.Combinators.fst(221,37-221,51)
(or label_49
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))


;; def=Prims.fst(356,2-356,58); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x44 Term))
 (! (implies (and (HasType @x44
(Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x20
@x4))

;; def=Prims.fst(356,26-356,41); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= @x44
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x45 Term))
 (! (implies (and (HasType @x45
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=MiniParse.Spec.Combinators.fst(221,7-221,51); use=MiniParse.Spec.Combinators.fst(221,7-221,51)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))
@x45)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and 
;; def=MiniParse.Spec.Combinators.fst(222,39-222,54); use=MiniParse.Spec.Combinators.fst(222,39-222,54)
(or label_50
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))


;; def=MiniParse.Spec.Combinators.fst(222,39-222,54); use=MiniParse.Spec.Combinators.fst(222,39-222,54)
(or label_51
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))


;; def=Prims.fst(356,2-356,58); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x46 Term))
 (! (implies (and (HasType @x46
(Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x20
@x5))

;; def=Prims.fst(356,26-356,41); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= @x46
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x47 Term))
 (! (implies (and (HasType @x47
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=MiniParse.Spec.Combinators.fst(222,7-222,54); use=MiniParse.Spec.Combinators.fst(222,7-222,54)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
@x47)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(224,3-224,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(224,10-224,32); use=MiniParse.Spec.Combinators.fst(224,3-224,9)
(or label_52

;; def=MiniParse.Spec.Combinators.fst(224,10-224,32); use=MiniParse.Spec.Combinators.fst(224,3-224,9)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
(MiniParse.Spec.Base.bparse @x1
(ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(224,3-224,9)
(forall ((@x48 Term))
 (! (implies (and (HasType @x48
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(224,10-224,32); use=MiniParse.Spec.Combinators.fst(224,3-224,9)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
(MiniParse.Spec.Base.bparse @x1
(ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x49 Term))
 (! (implies (and (HasType @x49
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))))

;; def=MiniParse.Spec.Combinators.fst(225,8-225,39); use=MiniParse.Spec.Combinators.fst(225,8-225,39)
(= (MiniParse.Spec.Base.bparse @x1
(ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
@x49)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(225,8-225,23); use=MiniParse.Spec.Combinators.fst(225,8-225,23)
(not 
;; def=MiniParse.Spec.Combinators.fst(225,8-225,23); use=MiniParse.Spec.Combinators.fst(225,8-225,23)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
(MiniParse.Spec.Base.bparse @x1
(ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))
)

label_53)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x50 Term))
 (! (implies (HasType @x50
@x1)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x51 Term))
 (! (implies (and (HasType @x51
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))

;; def=MiniParse.Spec.Combinators.fst(225,8-225,23); use=MiniParse.Spec.Combinators.fst(225,8-225,23)
(= (MiniParse.Spec.Base.bparse @x1
(ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
(FStar.Pervasives.Native.Mktuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
@x50
@x51)))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(226,3-226,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(226,10-226,30); use=MiniParse.Spec.Combinators.fst(226,3-226,9)
(or label_54

;; def=MiniParse.Spec.Combinators.fst(226,10-226,30); use=MiniParse.Spec.Combinators.fst(226,3-226,9)
(= @x11
(Prims.op_Addition @x20
@x51))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(226,3-226,9)
(forall ((@x52 Term))
 (! (implies (and (HasType @x52
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(226,10-226,30); use=MiniParse.Spec.Combinators.fst(226,3-226,9)
(= @x11
(Prims.op_Addition @x20
@x51))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(227,3-227,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(227,10-227,33); use=MiniParse.Spec.Combinators.fst(227,3-227,9)
(or label_55

;; def=MiniParse.Spec.Combinators.fst(227,10-227,33); use=MiniParse.Spec.Combinators.fst(227,3-227,9)
(<= (BoxInt_proj_0 @x51)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(227,3-227,9)
(forall ((@x53 Term))
 (! (implies (and (HasType @x53
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(227,10-227,33); use=MiniParse.Spec.Combinators.fst(227,3-227,9)
(<= (BoxInt_proj_0 @x51)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(228,3-228,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(228,10-228,34); use=MiniParse.Spec.Combinators.fst(228,3-228,9)
(or label_56

;; def=MiniParse.Spec.Combinators.fst(228,10-228,34); use=MiniParse.Spec.Combinators.fst(228,3-228,9)
(<= (BoxInt_proj_0 @x51)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(228,3-228,9)
(forall ((@x54 Term))
 (! (implies (and (HasType @x54
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(228,10-228,34); use=MiniParse.Spec.Combinators.fst(228,3-228,9)
(<= (BoxInt_proj_0 @x51)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(229,3-229,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(229,10-229,43); use=MiniParse.Spec.Combinators.fst(229,3-229,9)
(or label_57

;; def=MiniParse.Spec.Combinators.fst(229,10-229,43); use=MiniParse.Spec.Combinators.fst(229,3-229,9)
(<= (BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(229,3-229,9)
(forall ((@x55 Term))
 (! (implies (and (HasType @x55
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(229,10-229,43); use=MiniParse.Spec.Combinators.fst(229,3-229,9)
(<= (BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(230,27-230,31)
(<= (BoxInt_proj_0 @x51)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(230,27-230,31)
(and 
;; def=MiniParse.Spec.Combinators.fst(225,18-225,22); use=MiniParse.Spec.Combinators.fst(230,27-230,31)
(or label_58
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x51)))


;; def=MiniParse.Spec.Combinators.fst(225,18-225,22); use=MiniParse.Spec.Combinators.fst(230,27-230,31)
(or label_59
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x51
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x56 Term))
 (! (implies (and (HasType @x56
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= @x51
@x56)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x57 Term))
 (! (implies (and (HasType @x57
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt 0)
@x51)
@x57)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(230,61-230,67)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(230,61-230,67)
(and 
;; def=MiniParse.Spec.Combinators.fst(201,6-201,12); use=MiniParse.Spec.Combinators.fst(230,61-230,67)
(or label_60
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(201,6-201,12); use=MiniParse.Spec.Combinators.fst(230,61-230,67)
(or label_61
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x58 Term))
 (! (implies (and (HasType @x58
(MiniParse.Spec.Base.consumed_length @x5))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= @x11
@x58)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x59 Term))
 (! (implies (and (HasType @x59
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=FStar.Seq.Base.fsti(64,23-64,24); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x59)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and 
;; def=Prims.fst(680,18-680,24); use=MiniParse.Spec.Combinators.fst(230,74-230,87)
(or label_62

;; def=Prims.fst(680,18-680,24); use=MiniParse.Spec.Combinators.fst(230,74-230,87)
(>= (BoxInt_proj_0 (Prims.op_Addition @x20
@x51))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=MiniParse.Spec.Combinators.fst(230,74-230,87); use=MiniParse.Spec.Combinators.fst(230,74-230,87)
(or label_63
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x20
(Prims.op_Addition @x20
@x51))))


;; def=MiniParse.Spec.Combinators.fst(230,74-230,87); use=MiniParse.Spec.Combinators.fst(230,74-230,87)
(or label_64
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (Prims.op_Addition @x20
@x51)
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)))))


;; def=Prims.fst(356,2-356,58); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x60 Term))
 (! (implies (and (HasType @x60
(Tm_refine_6c303de0c7cf6ef8ce28b57600b9d4f0 @x20
@x5
@x11))

;; def=Prims.fst(356,26-356,41); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= @x60
(Prims.op_Addition @x20
@x51))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x61 Term))
 (! (implies (and (HasType @x61
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,42-175,43); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x20
(Prims.op_Addition @x20
@x51))
@x61)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x62 Term))
 (! (implies (and (HasType @x62
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (Prims.eq2 (FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt 0)
@x51)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x20
(Prims.op_Addition @x20
@x51)))
@x62)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(230,3-230,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(230,10-230,88); use=MiniParse.Spec.Combinators.fst(230,3-230,9)
(or label_65

;; def=MiniParse.Spec.Combinators.fst(230,10-230,88); use=MiniParse.Spec.Combinators.fst(230,3-230,9)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt 0)
@x51)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x20
(Prims.op_Addition @x20
@x51)))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(230,3-230,9)
(forall ((@x63 Term))
 (! (implies (and (HasType @x63
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(230,10-230,88); use=MiniParse.Spec.Combinators.fst(230,3-230,9)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt 0)
@x51)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x20
(Prims.op_Addition @x20
@x51)))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(231,27-231,31)
(<= (BoxInt_proj_0 @x51)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(231,27-231,31)
(and 
;; def=MiniParse.Spec.Combinators.fst(225,18-225,22); use=MiniParse.Spec.Combinators.fst(231,27-231,31)
(or label_66
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x51)))


;; def=MiniParse.Spec.Combinators.fst(225,18-225,22); use=MiniParse.Spec.Combinators.fst(231,27-231,31)
(or label_67
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x51
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x64 Term))
 (! (implies (and (HasType @x64
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= @x51
@x64)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x65 Term))
 (! (implies (and (HasType @x65
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt 0)
@x51)
@x65)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(231,50-231,54)
(<= (BoxInt_proj_0 @x51)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(231,50-231,54)
(and 
;; def=MiniParse.Spec.Combinators.fst(225,18-225,22); use=MiniParse.Spec.Combinators.fst(231,50-231,54)
(or label_68
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x51)))


;; def=MiniParse.Spec.Combinators.fst(225,18-225,22); use=MiniParse.Spec.Combinators.fst(231,50-231,54)
(or label_69
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x51
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x66 Term))
 (! (implies (and (HasType @x66
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= @x51
@x66)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x67 Term))
 (! (implies (and (HasType @x67
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,42-175,43); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))
(BoxInt 0)
@x51)
@x67)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x68 Term))
 (! (implies (and (HasType @x68
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (Prims.eq2 (FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt 0)
@x51)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))
(BoxInt 0)
@x51))
@x68)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(231,3-231,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(231,10-231,55); use=MiniParse.Spec.Combinators.fst(231,3-231,9)
(or label_70

;; def=MiniParse.Spec.Combinators.fst(231,10-231,55); use=MiniParse.Spec.Combinators.fst(231,3-231,9)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt 0)
@x51)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))
(BoxInt 0)
@x51))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(231,3-231,9)
(forall ((@x69 Term))
 (! (implies (and (HasType @x69
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(231,10-231,55); use=MiniParse.Spec.Combinators.fst(231,3-231,9)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt 0)
@x51)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))
(BoxInt 0)
@x51))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(232,3-232,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(232,10-232,42); use=MiniParse.Spec.Combinators.fst(232,3-232,9)
(or label_71

;; def=MiniParse.Spec.Combinators.fst(232,10-232,42); use=MiniParse.Spec.Combinators.fst(232,3-232,9)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(232,10-232,42); use=MiniParse.Spec.Combinators.fst(232,3-232,9)
(MiniParse.Spec.Base.no_lookahead_weak_on @x1
(ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))
)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(232,3-232,9)
(forall ((@x70 Term))
 (! (implies (and (HasType @x70
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(232,10-232,42); use=MiniParse.Spec.Combinators.fst(232,3-232,9)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(232,10-232,42); use=MiniParse.Spec.Combinators.fst(232,3-232,9)
(MiniParse.Spec.Base.no_lookahead_weak_on @x1
(ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x71 Term))
 (! (implies (HasType @x71
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(Valid 
;; def=Prims.fst(451,90-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(ApplyTT @x16
@x71)
)
)
 
;;no pats
:qid @query.86))
)
 
;;no pats
:qid @query.85))
)
)
 
;;no pats
:qid @query.84))
)
)
 
;;no pats
:qid @query.83))
)
 
;;no pats
:qid @query.82))
)
 
;;no pats
:qid @query.81))
)
)
 
;;no pats
:qid @query.80))
)
 
;;no pats
:qid @query.79))
)
)
 
;;no pats
:qid @query.78))
)
)
 
;;no pats
:qid @query.77))
)
 
;;no pats
:qid @query.76))
)
 
;;no pats
:qid @query.75))
)
)
 
;;no pats
:qid @query.74))
)
 
;;no pats
:qid @query.73))
)
)
 
;;no pats
:qid @query.72))
)
 
;;no pats
:qid @query.71))
)
)
 
;;no pats
:qid @query.70))
)
)
 
;;no pats
:qid @query.69))
)
)
 
;;no pats
:qid @query.68))
)
)
 
;;no pats
:qid @query.67))
)
)
 
;;no pats
:qid @query.66))
)
 
;;no pats
:qid @query.65))
)
)
 
;;no pats
:qid @query.64))
)
 
;;no pats
:qid @query.63))
)
)
 
;;no pats
:qid @query.62))
)
 
;;no pats
:qid @query.61))
)
)
 
;;no pats
:qid @query.60))
)
 
;;no pats
:qid @query.59))
)
)
 
;;no pats
:qid @query.58))
)
)
 
;;no pats
:qid @query.57))
)
 
;;no pats
:qid @query.56))
)
 
;;no pats
:qid @query.55))
)
)
 
;;no pats
:qid @query.54))
)
 
;;no pats
:qid @query.53))
)
)
 
;;no pats
:qid @query.52))
)
)
 
;;no pats
:qid @query.51))
)
)
 
;;no pats
:qid @query.50))
)
 
;;no pats
:qid @query.49))
)
 
;;no pats
:qid @query.48))
)
)
 
;;no pats
:qid @query.47))
)
 
;;no pats
:qid @query.46))
)
)
 
;;no pats
:qid @query.45))
)
)
 
;;no pats
:qid @query.44))
)
 
;;no pats
:qid @query.43))
)
 
;;no pats
:qid @query.42))
)
)
 
;;no pats
:qid @query.41))
)
 
;;no pats
:qid @query.40))
)
)
 
;;no pats
:qid @query.39))
)
 
;;no pats
:qid @query.38))
)
)
 
;;no pats
:qid @query.37))
)
)
 
;;no pats
:qid @query.36))
)
)
 
;;no pats
:qid @query.35))
)
 
;;no pats
:qid @query.34))
)
)
 
;;no pats
:qid @query.33))
)
 
;;no pats
:qid @query.32))
)
)
 
;;no pats
:qid @query.30))
)
)
 
;;no pats
:qid @query.22))


;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x15 Term))
 (! (implies (HasType @x15
(Tm_arrow_05f18cf3ae472583689b20218973d56c @x10
@x3
@x2
@x0
@x1
@x11
@x4
@x5))

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(and 
;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(203,14-203,43); use=MiniParse.Spec.Combinators.fst(235,25-235,26)
(<= (BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(235,25-235,26)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(235,25-235,26)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(235,25-235,26)
(and 
;; def=MiniParse.Spec.Combinators.fst(201,6-201,12); use=MiniParse.Spec.Combinators.fst(203,62-203,68)
(or label_72
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(201,6-201,12); use=MiniParse.Spec.Combinators.fst(203,62-203,68)
(or label_73
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(235,25-235,26)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
(MiniParse.Spec.Base.consumed_length @x5))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(235,25-235,26)
(= @x11
@x17)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(235,25-235,26)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(235,25-235,26)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x18)


;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(235,25-235,26)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
)

;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(235,25-235,26)
(and 
;; def=MiniParse.Spec.Combinators.fst(198,11-198,16); use=MiniParse.Spec.Combinators.fst(203,86-203,91)
(or label_74
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(198,11-198,16); use=MiniParse.Spec.Combinators.fst(203,86-203,91)
(or label_75
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
)
)
 
;;no pats
:qid @query.90))
)
 
;;no pats
:qid @query.89))
)
)
 
;;no pats
:qid @query.88))


;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe)

;; def=FStar.Classical.fsti(80,8-80,9); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(= (Tm_abs_aa1c64c9f2ccb888b86e39971e19b7ec @x5
@x4
@x11)
@x16)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(and 
;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(205,5-205,24); use=MiniParse.Spec.Combinators.fst(235,25-235,26)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x5)))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(235,25-235,26)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))))

;; def=MiniParse.Spec.Combinators.fst(206,21-206,32); use=MiniParse.Spec.Combinators.fst(235,25-235,26)
(= (MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x5)
@x18)


;; def=MiniParse.Spec.Combinators.fst(206,21-206,32); use=MiniParse.Spec.Combinators.fst(235,25-235,26)
(not 
;; def=MiniParse.Spec.Combinators.fst(206,21-206,32); use=MiniParse.Spec.Combinators.fst(235,25-235,26)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x5)))
)
)
label_76)
 
;;no pats
:qid @query.93))
)
 
;;no pats
:qid @query.92))


;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe)

;; def=FStar.Classical.fsti(80,11-80,12); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(= (Tm_abs_68d918befe526b82dd7cd018491e8682 @x1
@x5
@x0
@x2
@x3
@x10
@x11)
@x17)
)

;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(235,11-235,24)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
Prims.unit)

;; def=FStar.Classical.fsti(83,12-83,25); use=MiniParse.Spec.Combinators.fst(235,11-235,24)
(implies 
;; def=MiniParse.Spec.Combinators.fst(203,13-203,92); use=MiniParse.Spec.Combinators.fst(235,11-235,24)
(and 
;; def=MiniParse.Spec.Combinators.fst(203,14-203,43); use=MiniParse.Spec.Combinators.fst(235,11-235,24)
(<= (BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))


;; def=MiniParse.Spec.Combinators.fst(203,47-203,91); use=MiniParse.Spec.Combinators.fst(235,11-235,24)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x11))
)


;; def=MiniParse.Spec.Combinators.fst(204,12-209,5); use=MiniParse.Spec.Combinators.fst(235,11-235,24)
(and 
;; def=MiniParse.Spec.Combinators.fst(205,5-205,24); use=MiniParse.Spec.Combinators.fst(235,11-235,24)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x5)))

(let ((@lb19 (MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x5)))
(ite (is-FStar.Pervasives.Native.Some @lb19)
(let ((@lb20 (FStar.Pervasives.Native.Some_v @lb19)))

;; def=MiniParse.Spec.Combinators.fst(208,5-208,45); use=MiniParse.Spec.Combinators.fst(235,11-235,24)
(and 
;; def=MiniParse.Spec.Combinators.fst(208,5-208,12); use=MiniParse.Spec.Combinators.fst(235,11-235,24)
(= @x10
(FStar.Pervasives.Native.Mktuple2__1 @lb20))


;; def=MiniParse.Spec.Combinators.fst(208,16-208,45); use=MiniParse.Spec.Combinators.fst(235,11-235,24)
(= @x11
(FStar.Pervasives.Native.Mktuple2__2 @lb20))
)
)
Unreachable)))
)
)

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(235,11-235,24)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(235,11-235,24)
(ApplyTT @x13
@x18)
)
)
 
;;no pats
:qid @query.95))
)
 
;;no pats
:qid @query.94))
)
)
 
;;no pats
:qid @query.91))
)
)
 
;;no pats
:qid @query.87))
)
)
 
;;no pats
:qid @query.13))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(not 
;; def=MiniParse.Spec.Combinators.fst(199,9-199,29); use=MiniParse.Spec.Combinators.fst(199,9-199,29)
(= (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
Prims.bool)

;; def=MiniParse.Spec.Combinators.fst(199,9-236,13); use=MiniParse.Spec.Combinators.fst(199,9-236,13)
(= (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
@x14)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x15 Term))
 (! (implies (HasType @x15
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(Valid 
;; def=Prims.fst(451,90-451,102); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(ApplyTT @x13
@x15)
)
)
 
;;no pats
:qid @query.97))
)
 
;;no pats
:qid @query.96))
))
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))

(implies 
;; def=Prims.fst(389,19-389,21); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(not 
;; def=MiniParse.Spec.Combinators.fst(194,10-194,13); use=MiniParse.Spec.Combinators.fst(194,10-194,13)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x4))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x4)))
)


;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x4))))

;; def=MiniParse.Spec.Combinators.fst(194,10-237,7); use=MiniParse.Spec.Combinators.fst(194,10-237,7)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x9)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x10 Term))
 (! (implies (HasType @x10
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(Valid 
;; def=Prims.fst(451,90-451,102); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(ApplyTT @x8
@x10)
)
)
 
;;no pats
:qid @query.99))
)
 
;;no pats
:qid @query.98))
))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 8714496)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_76")
(eval label_76)
(echo "label_75")
(eval label_75)
(echo "label_74")
(eval label_74)
(echo "label_73")
(eval label_73)
(echo "label_72")
(eval label_72)
(echo "label_71")
(eval label_71)
(echo "label_70")
(eval label_70)
(echo "label_69")
(eval label_69)
(echo "label_68")
(eval label_68)
(echo "label_67")
(eval label_67)
(echo "label_66")
(eval label_66)
(echo "label_65")
(eval label_65)
(echo "label_64")
(eval label_64)
(echo "label_63")
(eval label_63)
(echo "label_62")
(eval label_62)
(echo "label_61")
(eval label_61)
(echo "label_60")
(eval label_60)
(echo "label_59")
(eval label_59)
(echo "label_58")
(eval label_58)
(echo "label_57")
(eval label_57)
(echo "label_56")
(eval label_56)
(echo "label_55")
(eval label_55)
(echo "label_54")
(eval label_54)
(echo "label_53")
(eval label_53)
(echo "label_52")
(eval label_52)
(echo "label_51")
(eval label_51)
(echo "label_50")
(eval label_50)
(echo "label_49")
(eval label_49)
(echo "label_48")
(eval label_48)
(echo "label_47")
(eval label_47)
(echo "label_46")
(eval label_46)
(echo "label_45")
(eval label_45)
(echo "label_44")
(eval label_44)
(echo "label_43")
(eval label_43)
(echo "label_42")
(eval label_42)
(echo "label_41")
(eval label_41)
(echo "label_40")
(eval label_40)
(echo "label_39")
(eval label_39)
(echo "label_38")
(eval label_38)
(echo "label_37")
(eval label_37)
(echo "label_36")
(eval label_36)
(echo "label_35")
(eval label_35)
(echo "label_34")
(eval label_34)
(echo "label_33")
(eval label_33)
(echo "label_32")
(eval label_32)
(echo "label_31")
(eval label_31)
(echo "label_30")
(eval label_30)
(echo "label_29")
(eval label_29)
(echo "label_28")
(eval label_28)
(echo "label_27")
(eval label_27)
(echo "label_26")
(eval label_26)
(echo "label_25")
(eval label_25)
(echo "label_24")
(eval label_24)
(echo "label_23")
(eval label_23)
(echo "label_22")
(eval label_22)
(echo "label_21")
(eval label_21)
(echo "label_20")
(eval label_20)
(echo "label_19")
(eval label_19)
(echo "label_18")
(eval label_18)
(echo "label_17")
(eval label_17)
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.and_then_no_lookahead_weak_on, 1)
; STATUS: unknown because (incomplete quantifiers)

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(push) ;; push{0

; <fuel='2' ifuel='2'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel (SFuel ZFuel)))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(MiniParse.Spec.Base.bare_parser @x0))
(HasType @x3
(Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc @x1
@x0))
(HasType @x4
MiniParse.Spec.Base.bytes)
(HasType @x5
MiniParse.Spec.Base.bytes))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Prims.pure_post Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(187,6-187,25); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(187,6-187,25); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(MiniParse.Spec.Base.no_lookahead_weak @x0
@x2)
)


;; def=MiniParse.Spec.Combinators.fst(188,6-188,48); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x7 Term))
 (! (implies (HasType @x7
@x0)

;; def=MiniParse.Spec.Combinators.fst(188,23-188,47); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(188,23-188,47); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(MiniParse.Spec.Base.no_lookahead_weak @x1
(ApplyTT @x3
@x7))
)
)
 
;;no pats
:qid @query.2))


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x7 Term))
 (! (implies (and (or label_1
(HasType @x7
Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(190,13-190,61); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(or label_2

;; def=MiniParse.Spec.Combinators.fst(190,13-190,61); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(190,13-190,61); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(MiniParse.Spec.Base.no_lookahead_weak_on @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x4
@x5)
)
)
)

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(ApplyTT @x6
@x7)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(ApplyTT @x6
@x7)
)
)
:qid @query.3))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x4))))

;; def=MiniParse.Spec.Combinators.fst(194,10-194,13); use=MiniParse.Spec.Combinators.fst(194,10-194,13)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x7)
)

;; def=Prims.fst(402,2-402,97); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x9 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(Valid 
;; def=Prims.fst(402,73-402,79); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(ApplyTT @x6
@x9)
)


;; def=Prims.fst(402,84-402,87); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(Valid 
;; def=Prims.fst(402,84-402,87); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(ApplyTT @x8
@x9)
)
)
 :weight 0


:pattern ((ApplyTT @x8
@x9))
:qid @query.6))
)

;; def=Prims.fst(389,2-389,39); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(and 
;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x4)))

;; def=MiniParse.Spec.Combinators.fst(194,10-195,12); use=MiniParse.Spec.Combinators.fst(194,10-195,12)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x4)
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x4))
@x9))
)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x10 Term))
 (! (implies (HasType @x10
@x1)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(MiniParse.Spec.Base.consumed_length @x4))

;; def=MiniParse.Spec.Combinators.fst(196,11-196,17); use=MiniParse.Spec.Combinators.fst(196,11-196,17)
(= @x9
(FStar.Pervasives.Native.Mktuple2 @x1
(MiniParse.Spec.Base.consumed_length @x4)
@x10
@x11))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(and 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(198,41-198,44)
(or label_3

;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(198,41-198,44)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
)


;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.nat)

;; def=MiniParse.Spec.Combinators.fst(197,10-198,16); use=MiniParse.Spec.Combinators.fst(198,11-198,44)
(= @x11
@x12)
)

;; def=Prims.fst(402,2-402,97); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x14 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(Valid 
;; def=Prims.fst(402,73-402,79); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(ApplyTT @x8
@x14)
)


;; def=Prims.fst(402,84-402,87); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(Valid 
;; def=Prims.fst(402,84-402,87); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(ApplyTT @x13
@x14)
)
)
 :weight 0


:pattern ((ApplyTT @x13
@x14))
:qid @query.12))
)

;; def=Prims.fst(389,2-389,39); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(199,9-199,29); use=MiniParse.Spec.Combinators.fst(199,9-199,29)
(= (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxBool true))


;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(and 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(201,37-201,40)
(or label_4

;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(201,37-201,40)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))
)


;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
Prims.nat)

;; def=MiniParse.Spec.Combinators.fst(197,10-201,12); use=MiniParse.Spec.Combinators.fst(201,6-201,40)
(= @x11
@x14)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(and 
;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(201,43-235,29)
(forall ((@x15 Term))
 (! (implies (HasType @x15
Prims.unit)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(202,7-209,6)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(203,14-203,43); use=MiniParse.Spec.Combinators.fst(203,14-203,43)
(<= (BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))


;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(203,13-203,92)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(203,62-203,68)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(203,62-203,68)
(and 
;; def=MiniParse.Spec.Combinators.fst(201,6-201,12); use=MiniParse.Spec.Combinators.fst(203,62-203,68)
(or label_5
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(201,6-201,12); use=MiniParse.Spec.Combinators.fst(203,62-203,68)
(or label_6
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(203,13-203,92)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
(MiniParse.Spec.Base.consumed_length @x5))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(203,13-203,92)
(= @x11
@x16)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(203,13-203,92)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(203,13-203,92)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x17)


;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(203,86-203,91)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
)

;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(203,86-203,91)
(and 
;; def=MiniParse.Spec.Combinators.fst(198,11-198,16); use=MiniParse.Spec.Combinators.fst(203,86-203,91)
(or label_7
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(198,11-198,16); use=MiniParse.Spec.Combinators.fst(203,86-203,91)
(or label_8
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
)
)
 
;;no pats
:qid @query.16))
)
 
;;no pats
:qid @query.15))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(202,7-209,6)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
Prims.logical)

;; def=FStar.Pervasives.fsti(112,28-112,31); use=MiniParse.Spec.Combinators.fst(202,7-209,6)
(= (Prims.l_and (Prims.b2t (Prims.op_LessThanOrEqual (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
(Prims.eq2 (FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x11)))
@x16)
)

;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(202,7-209,6)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(203,14-203,43); use=MiniParse.Spec.Combinators.fst(204,12-209,5)
(<= (BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))


;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(204,12-209,5)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(204,12-209,5)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(204,12-209,5)
(and 
;; def=MiniParse.Spec.Combinators.fst(201,6-201,12); use=MiniParse.Spec.Combinators.fst(203,62-203,68)
(or label_9
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(201,6-201,12); use=MiniParse.Spec.Combinators.fst(203,62-203,68)
(or label_10
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(204,12-209,5)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
(MiniParse.Spec.Base.consumed_length @x5))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(204,12-209,5)
(= @x11
@x17)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(204,12-209,5)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(204,12-209,5)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x18)


;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(204,12-209,5)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
)

;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(204,12-209,5)
(and 
;; def=MiniParse.Spec.Combinators.fst(198,11-198,16); use=MiniParse.Spec.Combinators.fst(203,86-203,91)
(or label_11
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(198,11-198,16); use=MiniParse.Spec.Combinators.fst(203,86-203,91)
(or label_12
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
)
)
 
;;no pats
:qid @query.19))
)
 
;;no pats
:qid @query.18))
)
)

;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(202,7-209,6)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
(Tm_refine_67c7b285aeb4981627ddd60e421600cb @x5
@x4
@x11))

;; def=MiniParse.Spec.Combinators.fst(205,5-205,24); use=MiniParse.Spec.Combinators.fst(205,5-205,24)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x5)))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(204,12-209,5)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))))

;; def=MiniParse.Spec.Combinators.fst(206,10-206,32); use=MiniParse.Spec.Combinators.fst(206,10-206,32)
(= (MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x5)
@x18)


;; def=MiniParse.Spec.Combinators.fst(206,10-206,17); use=MiniParse.Spec.Combinators.fst(206,10-206,17)
(not 
;; def=MiniParse.Spec.Combinators.fst(206,10-206,17); use=MiniParse.Spec.Combinators.fst(206,10-206,17)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x5)))
)
)
label_13)
 
;;no pats
:qid @query.21))
)
 
;;no pats
:qid @query.20))
)
)
 
;;no pats
:qid @query.17))
)
)
 
;;no pats
:qid @query.14))


;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x15 Term))
 (! (implies (HasType @x15
Prims.unit)

;; def=Prims.fst(406,51-459,89); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(203,14-203,43); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(<= (BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))


;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and 
;; def=MiniParse.Spec.Combinators.fst(201,6-201,12); use=MiniParse.Spec.Combinators.fst(203,62-203,68)
(or label_14
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(201,6-201,12); use=MiniParse.Spec.Combinators.fst(203,62-203,68)
(or label_15
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
(MiniParse.Spec.Base.consumed_length @x5))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= @x11
@x16)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x17)


;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
)

;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and 
;; def=MiniParse.Spec.Combinators.fst(198,11-198,16); use=MiniParse.Spec.Combinators.fst(203,86-203,91)
(or label_16
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(198,11-198,16); use=MiniParse.Spec.Combinators.fst(203,86-203,91)
(or label_17
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
)
)
 
;;no pats
:qid @query.24))
)
 
;;no pats
:qid @query.23))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
Prims.logical)

;; def=FStar.Pervasives.fsti(112,28-112,31); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (Prims.l_and (Prims.b2t (Prims.op_LessThanOrEqual (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
(Prims.eq2 (FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x11)))
@x16)
)

;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(203,14-203,43); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(<= (BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))


;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and 
;; def=MiniParse.Spec.Combinators.fst(201,6-201,12); use=MiniParse.Spec.Combinators.fst(203,62-203,68)
(or label_18
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(201,6-201,12); use=MiniParse.Spec.Combinators.fst(203,62-203,68)
(or label_19
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
(MiniParse.Spec.Base.consumed_length @x5))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= @x11
@x17)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x18)


;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
)

;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and 
;; def=MiniParse.Spec.Combinators.fst(198,11-198,16); use=MiniParse.Spec.Combinators.fst(203,86-203,91)
(or label_20
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(198,11-198,16); use=MiniParse.Spec.Combinators.fst(203,86-203,91)
(or label_21
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
)
)
 
;;no pats
:qid @query.27))
)
 
;;no pats
:qid @query.26))
)
)

;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
(Tm_refine_67c7b285aeb4981627ddd60e421600cb @x5
@x4
@x11))

;; def=MiniParse.Spec.Combinators.fst(205,5-205,24); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x5)))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))))

;; def=MiniParse.Spec.Combinators.fst(206,10-206,32); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x5)
@x18)


;; def=MiniParse.Spec.Combinators.fst(206,10-206,17); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(not 
;; def=MiniParse.Spec.Combinators.fst(206,10-206,17); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x5)))
)
)
label_22)
 
;;no pats
:qid @query.29))
)
 
;;no pats
:qid @query.28))
)
)
 
;;no pats
:qid @query.25))


;; def=Prims.fst(406,51-406,91); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
(Prims.pure_post Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(203,14-203,43); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(<= (BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))


;; def=MiniParse.Spec.Combinators.fst(203,47-203,91); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x11))


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x17 Term))
 (! (implies (and (or label_23
(HasType @x17
Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(205,5-205,24); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(or label_24

;; def=MiniParse.Spec.Combinators.fst(205,5-205,24); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x5)))
)

(let ((@lb18 (MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x5)))
(ite (is-FStar.Pervasives.Native.Some @lb18)
(let ((@lb19 (FStar.Pervasives.Native.Some_v @lb18)))

;; def=MiniParse.Spec.Combinators.fst(208,5-208,45); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and 
;; def=MiniParse.Spec.Combinators.fst(208,5-208,12); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(or label_25

;; def=MiniParse.Spec.Combinators.fst(208,5-208,12); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= @x10
(FStar.Pervasives.Native.Mktuple2__1 @lb19))
)


;; def=MiniParse.Spec.Combinators.fst(208,16-208,45); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(or label_26

;; def=MiniParse.Spec.Combinators.fst(208,16-208,45); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= @x11
(FStar.Pervasives.Native.Mktuple2__2 @lb19))
)
)
)
Unreachable)))

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(ApplyTT @x16
@x17)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(ApplyTT @x16
@x17)
)
)
:qid @query.31))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(210,3-210,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(210,10-210,30); use=MiniParse.Spec.Combinators.fst(210,3-210,9)
(or label_27

;; def=MiniParse.Spec.Combinators.fst(210,10-210,30); use=MiniParse.Spec.Combinators.fst(210,3-210,9)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x4))
(MiniParse.Spec.Base.bparse @x0
@x2
@x4)))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(210,3-210,9)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(210,10-210,30); use=MiniParse.Spec.Combinators.fst(210,3-210,9)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x4))
(MiniParse.Spec.Base.bparse @x0
@x2
@x4)))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x4))))

;; def=MiniParse.Spec.Combinators.fst(211,8-211,37); use=MiniParse.Spec.Combinators.fst(211,8-211,37)
(= (MiniParse.Spec.Base.bparse @x0
@x2
@x4)
@x18)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(211,8-211,23); use=MiniParse.Spec.Combinators.fst(211,8-211,23)
(not 
;; def=MiniParse.Spec.Combinators.fst(211,8-211,23); use=MiniParse.Spec.Combinators.fst(211,8-211,23)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x4))
(MiniParse.Spec.Base.bparse @x0
@x2
@x4)))
)

label_28)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x19 Term))
 (! (implies (HasType @x19
@x0)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x20 Term))
 (! (implies (and (HasType @x20
(MiniParse.Spec.Base.consumed_length @x4))

;; def=MiniParse.Spec.Combinators.fst(211,8-211,23); use=MiniParse.Spec.Combinators.fst(211,8-211,23)
(= (MiniParse.Spec.Base.bparse @x0
@x2
@x4)
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x4))
(FStar.Pervasives.Native.Mktuple2 @x0
(MiniParse.Spec.Base.consumed_length @x4)
@x19
@x20)))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(212,3-212,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(212,10-212,23); use=MiniParse.Spec.Combinators.fst(212,3-212,9)
(or label_29

;; def=MiniParse.Spec.Combinators.fst(212,10-212,23); use=MiniParse.Spec.Combinators.fst(212,3-212,9)
(<= (BoxInt_proj_0 @x20)
(BoxInt_proj_0 @x11))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(212,3-212,9)
(forall ((@x21 Term))
 (! (implies (and (HasType @x21
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(212,10-212,23); use=MiniParse.Spec.Combinators.fst(212,3-212,9)
(<= (BoxInt_proj_0 @x20)
(BoxInt_proj_0 @x11))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(213,3-213,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(213,10-213,33); use=MiniParse.Spec.Combinators.fst(213,3-213,9)
(or label_30

;; def=MiniParse.Spec.Combinators.fst(213,10-213,33); use=MiniParse.Spec.Combinators.fst(213,3-213,9)
(<= (BoxInt_proj_0 @x20)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(213,3-213,9)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(213,10-213,33); use=MiniParse.Spec.Combinators.fst(213,3-213,9)
(<= (BoxInt_proj_0 @x20)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(214,26-214,30)
(<= (BoxInt_proj_0 @x20)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(214,26-214,30)
(and 
;; def=MiniParse.Spec.Combinators.fst(211,18-211,22); use=MiniParse.Spec.Combinators.fst(214,26-214,30)
(or label_31
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x20)))


;; def=MiniParse.Spec.Combinators.fst(211,18-211,22); use=MiniParse.Spec.Combinators.fst(214,26-214,30)
(or label_32
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x23 Term))
 (! (implies (and (HasType @x23
(MiniParse.Spec.Base.consumed_length @x4))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= @x20
@x23)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x24 Term))
 (! (implies (and (HasType @x24
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x20)
@x24)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(214,60-214,66)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(214,60-214,66)
(and 
;; def=MiniParse.Spec.Combinators.fst(201,6-201,12); use=MiniParse.Spec.Combinators.fst(214,60-214,66)
(or label_33
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(201,6-201,12); use=MiniParse.Spec.Combinators.fst(214,60-214,66)
(or label_34
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x25 Term))
 (! (implies (and (HasType @x25
(MiniParse.Spec.Base.consumed_length @x5))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= @x11
@x25)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x26 Term))
 (! (implies (and (HasType @x26
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=FStar.Seq.Base.fsti(64,23-64,24); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x26)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(214,70-214,74)
(<= (BoxInt_proj_0 @x20)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(214,70-214,74)
(and 
;; def=MiniParse.Spec.Combinators.fst(211,18-211,22); use=MiniParse.Spec.Combinators.fst(214,70-214,74)
(or label_35
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x20)))


;; def=MiniParse.Spec.Combinators.fst(211,18-211,22); use=MiniParse.Spec.Combinators.fst(214,70-214,74)
(or label_36
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x27 Term))
 (! (implies (and (HasType @x27
(MiniParse.Spec.Base.consumed_length @x4))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= @x20
@x27)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x28 Term))
 (! (implies (and (HasType @x28
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,42-175,43); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
(BoxInt 0)
@x20)
@x28)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x29 Term))
 (! (implies (and (HasType @x29
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (Prims.eq2 (FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x20)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
(BoxInt 0)
@x20))
@x29)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(214,3-214,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(214,10-214,75); use=MiniParse.Spec.Combinators.fst(214,3-214,9)
(or label_37

;; def=MiniParse.Spec.Combinators.fst(214,10-214,75); use=MiniParse.Spec.Combinators.fst(214,3-214,9)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x20)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
(BoxInt 0)
@x20))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(214,3-214,9)
(forall ((@x30 Term))
 (! (implies (and (HasType @x30
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(214,10-214,75); use=MiniParse.Spec.Combinators.fst(214,3-214,9)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x20)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
(BoxInt 0)
@x20))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(215,26-215,30)
(<= (BoxInt_proj_0 @x20)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(215,26-215,30)
(and 
;; def=MiniParse.Spec.Combinators.fst(211,18-211,22); use=MiniParse.Spec.Combinators.fst(215,26-215,30)
(or label_38
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x20)))


;; def=MiniParse.Spec.Combinators.fst(211,18-211,22); use=MiniParse.Spec.Combinators.fst(215,26-215,30)
(or label_39
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x31 Term))
 (! (implies (and (HasType @x31
(MiniParse.Spec.Base.consumed_length @x4))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= @x20
@x31)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x32 Term))
 (! (implies (and (HasType @x32
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x20)
@x32)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(215,48-215,52)
(<= (BoxInt_proj_0 @x20)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(215,48-215,52)
(and 
;; def=MiniParse.Spec.Combinators.fst(211,18-211,22); use=MiniParse.Spec.Combinators.fst(215,48-215,52)
(or label_40
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x20)))


;; def=MiniParse.Spec.Combinators.fst(211,18-211,22); use=MiniParse.Spec.Combinators.fst(215,48-215,52)
(or label_41
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x33 Term))
 (! (implies (and (HasType @x33
(MiniParse.Spec.Base.consumed_length @x4))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= @x20
@x33)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x34 Term))
 (! (implies (and (HasType @x34
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,42-175,43); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x20)
@x34)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x35 Term))
 (! (implies (and (HasType @x35
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (Prims.eq2 (FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x20)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x20))
@x35)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(215,3-215,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(215,10-215,53); use=MiniParse.Spec.Combinators.fst(215,3-215,9)
(or label_42

;; def=MiniParse.Spec.Combinators.fst(215,10-215,53); use=MiniParse.Spec.Combinators.fst(215,3-215,9)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x20)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x20))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(215,3-215,9)
(forall ((@x36 Term))
 (! (implies (and (HasType @x36
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(215,10-215,53); use=MiniParse.Spec.Combinators.fst(215,3-215,9)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x20)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x20))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(216,3-216,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(216,10-216,39); use=MiniParse.Spec.Combinators.fst(216,3-216,9)
(or label_43

;; def=MiniParse.Spec.Combinators.fst(216,10-216,39); use=MiniParse.Spec.Combinators.fst(216,3-216,9)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(216,10-216,39); use=MiniParse.Spec.Combinators.fst(216,3-216,9)
(MiniParse.Spec.Base.no_lookahead_weak_on @x0
@x2
@x4
@x5)
)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(216,3-216,9)
(forall ((@x37 Term))
 (! (implies (and (HasType @x37
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(216,10-216,39); use=MiniParse.Spec.Combinators.fst(216,3-216,9)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(216,10-216,39); use=MiniParse.Spec.Combinators.fst(216,3-216,9)
(MiniParse.Spec.Base.no_lookahead_weak_on @x0
@x2
@x4
@x5)
)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(217,3-217,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(217,10-217,31); use=MiniParse.Spec.Combinators.fst(217,3-217,9)
(or label_44

;; def=MiniParse.Spec.Combinators.fst(217,10-217,31); use=MiniParse.Spec.Combinators.fst(217,3-217,9)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5))
(MiniParse.Spec.Base.bparse @x0
@x2
@x5)))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(217,3-217,9)
(forall ((@x38 Term))
 (! (implies (and (HasType @x38
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(217,10-217,31); use=MiniParse.Spec.Combinators.fst(217,3-217,9)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5))
(MiniParse.Spec.Base.bparse @x0
@x2
@x5)))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x39 Term))
 (! (implies (and (HasType @x39
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5))))

;; def=MiniParse.Spec.Combinators.fst(218,8-218,31); use=MiniParse.Spec.Combinators.fst(218,8-218,31)
(= (MiniParse.Spec.Base.bparse @x0
@x2
@x5)
@x39)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(218,8-218,16); use=MiniParse.Spec.Combinators.fst(218,8-218,16)
(not 
;; def=MiniParse.Spec.Combinators.fst(218,8-218,16); use=MiniParse.Spec.Combinators.fst(218,8-218,16)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5))
(MiniParse.Spec.Base.bparse @x0
@x2
@x5)))
)

label_45)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x40 Term))
 (! (implies (and (HasType @x40
(FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5)))

;; def=MiniParse.Spec.Combinators.fst(218,8-218,16); use=MiniParse.Spec.Combinators.fst(218,8-218,16)
(= (MiniParse.Spec.Base.bparse @x0
@x2
@x5)
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5))
@x40))
)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x41 Term))
 (! (implies (HasType @x41
@x0)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x42 Term))
 (! (implies (and (HasType @x42
(MiniParse.Spec.Base.consumed_length @x5))

;; def=MiniParse.Spec.Combinators.fst(219,8-219,18); use=MiniParse.Spec.Combinators.fst(219,8-219,18)
(= @x40
(FStar.Pervasives.Native.Mktuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5)
@x41
@x42))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(220,3-220,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(220,11-220,20); use=MiniParse.Spec.Combinators.fst(220,3-220,9)
(or label_46

;; def=MiniParse.Spec.Combinators.fst(220,11-220,20); use=MiniParse.Spec.Combinators.fst(220,3-220,9)
(= @x19
@x41)
)


;; def=MiniParse.Spec.Combinators.fst(220,24-220,55); use=MiniParse.Spec.Combinators.fst(220,3-220,9)
(or label_47

;; def=MiniParse.Spec.Combinators.fst(220,24-220,55); use=MiniParse.Spec.Combinators.fst(220,3-220,9)
(= @x20
@x42)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(220,3-220,9)
(forall ((@x43 Term))
 (! (implies (and (HasType @x43
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(220,11-220,20); use=MiniParse.Spec.Combinators.fst(220,3-220,9)
(= @x19
@x41)


;; def=MiniParse.Spec.Combinators.fst(220,24-220,55); use=MiniParse.Spec.Combinators.fst(220,3-220,9)
(= @x20
@x42)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and 
;; def=MiniParse.Spec.Combinators.fst(221,37-221,51); use=MiniParse.Spec.Combinators.fst(221,37-221,51)
(or label_48
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))


;; def=MiniParse.Spec.Combinators.fst(221,37-221,51); use=MiniParse.Spec.Combinators.fst(221,37-221,51)
(or label_49
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))


;; def=Prims.fst(356,2-356,58); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x44 Term))
 (! (implies (and (HasType @x44
(Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x20
@x4))

;; def=Prims.fst(356,26-356,41); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= @x44
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x45 Term))
 (! (implies (and (HasType @x45
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=MiniParse.Spec.Combinators.fst(221,7-221,51); use=MiniParse.Spec.Combinators.fst(221,7-221,51)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))
@x45)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and 
;; def=MiniParse.Spec.Combinators.fst(222,39-222,54); use=MiniParse.Spec.Combinators.fst(222,39-222,54)
(or label_50
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))


;; def=MiniParse.Spec.Combinators.fst(222,39-222,54); use=MiniParse.Spec.Combinators.fst(222,39-222,54)
(or label_51
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))


;; def=Prims.fst(356,2-356,58); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x46 Term))
 (! (implies (and (HasType @x46
(Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x20
@x5))

;; def=Prims.fst(356,26-356,41); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= @x46
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x47 Term))
 (! (implies (and (HasType @x47
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=MiniParse.Spec.Combinators.fst(222,7-222,54); use=MiniParse.Spec.Combinators.fst(222,7-222,54)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
@x47)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(224,3-224,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(224,10-224,32); use=MiniParse.Spec.Combinators.fst(224,3-224,9)
(or label_52

;; def=MiniParse.Spec.Combinators.fst(224,10-224,32); use=MiniParse.Spec.Combinators.fst(224,3-224,9)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
(MiniParse.Spec.Base.bparse @x1
(ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(224,3-224,9)
(forall ((@x48 Term))
 (! (implies (and (HasType @x48
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(224,10-224,32); use=MiniParse.Spec.Combinators.fst(224,3-224,9)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
(MiniParse.Spec.Base.bparse @x1
(ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x49 Term))
 (! (implies (and (HasType @x49
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))))

;; def=MiniParse.Spec.Combinators.fst(225,8-225,39); use=MiniParse.Spec.Combinators.fst(225,8-225,39)
(= (MiniParse.Spec.Base.bparse @x1
(ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
@x49)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(225,8-225,23); use=MiniParse.Spec.Combinators.fst(225,8-225,23)
(not 
;; def=MiniParse.Spec.Combinators.fst(225,8-225,23); use=MiniParse.Spec.Combinators.fst(225,8-225,23)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
(MiniParse.Spec.Base.bparse @x1
(ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))
)

label_53)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x50 Term))
 (! (implies (HasType @x50
@x1)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x51 Term))
 (! (implies (and (HasType @x51
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))

;; def=MiniParse.Spec.Combinators.fst(225,8-225,23); use=MiniParse.Spec.Combinators.fst(225,8-225,23)
(= (MiniParse.Spec.Base.bparse @x1
(ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
(FStar.Pervasives.Native.Mktuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
@x50
@x51)))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(226,3-226,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(226,10-226,30); use=MiniParse.Spec.Combinators.fst(226,3-226,9)
(or label_54

;; def=MiniParse.Spec.Combinators.fst(226,10-226,30); use=MiniParse.Spec.Combinators.fst(226,3-226,9)
(= @x11
(Prims.op_Addition @x20
@x51))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(226,3-226,9)
(forall ((@x52 Term))
 (! (implies (and (HasType @x52
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(226,10-226,30); use=MiniParse.Spec.Combinators.fst(226,3-226,9)
(= @x11
(Prims.op_Addition @x20
@x51))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(227,3-227,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(227,10-227,33); use=MiniParse.Spec.Combinators.fst(227,3-227,9)
(or label_55

;; def=MiniParse.Spec.Combinators.fst(227,10-227,33); use=MiniParse.Spec.Combinators.fst(227,3-227,9)
(<= (BoxInt_proj_0 @x51)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(227,3-227,9)
(forall ((@x53 Term))
 (! (implies (and (HasType @x53
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(227,10-227,33); use=MiniParse.Spec.Combinators.fst(227,3-227,9)
(<= (BoxInt_proj_0 @x51)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(228,3-228,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(228,10-228,34); use=MiniParse.Spec.Combinators.fst(228,3-228,9)
(or label_56

;; def=MiniParse.Spec.Combinators.fst(228,10-228,34); use=MiniParse.Spec.Combinators.fst(228,3-228,9)
(<= (BoxInt_proj_0 @x51)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(228,3-228,9)
(forall ((@x54 Term))
 (! (implies (and (HasType @x54
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(228,10-228,34); use=MiniParse.Spec.Combinators.fst(228,3-228,9)
(<= (BoxInt_proj_0 @x51)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(229,3-229,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(229,10-229,43); use=MiniParse.Spec.Combinators.fst(229,3-229,9)
(or label_57

;; def=MiniParse.Spec.Combinators.fst(229,10-229,43); use=MiniParse.Spec.Combinators.fst(229,3-229,9)
(<= (BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(229,3-229,9)
(forall ((@x55 Term))
 (! (implies (and (HasType @x55
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(229,10-229,43); use=MiniParse.Spec.Combinators.fst(229,3-229,9)
(<= (BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(230,27-230,31)
(<= (BoxInt_proj_0 @x51)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(230,27-230,31)
(and 
;; def=MiniParse.Spec.Combinators.fst(225,18-225,22); use=MiniParse.Spec.Combinators.fst(230,27-230,31)
(or label_58
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x51)))


;; def=MiniParse.Spec.Combinators.fst(225,18-225,22); use=MiniParse.Spec.Combinators.fst(230,27-230,31)
(or label_59
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x51
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x56 Term))
 (! (implies (and (HasType @x56
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= @x51
@x56)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x57 Term))
 (! (implies (and (HasType @x57
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt 0)
@x51)
@x57)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(230,61-230,67)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(230,61-230,67)
(and 
;; def=MiniParse.Spec.Combinators.fst(201,6-201,12); use=MiniParse.Spec.Combinators.fst(230,61-230,67)
(or label_60
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(201,6-201,12); use=MiniParse.Spec.Combinators.fst(230,61-230,67)
(or label_61
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x58 Term))
 (! (implies (and (HasType @x58
(MiniParse.Spec.Base.consumed_length @x5))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= @x11
@x58)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x59 Term))
 (! (implies (and (HasType @x59
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=FStar.Seq.Base.fsti(64,23-64,24); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x59)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and 
;; def=Prims.fst(680,18-680,24); use=MiniParse.Spec.Combinators.fst(230,74-230,87)
(or label_62

;; def=Prims.fst(680,18-680,24); use=MiniParse.Spec.Combinators.fst(230,74-230,87)
(>= (BoxInt_proj_0 (Prims.op_Addition @x20
@x51))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=MiniParse.Spec.Combinators.fst(230,74-230,87); use=MiniParse.Spec.Combinators.fst(230,74-230,87)
(or label_63
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x20
(Prims.op_Addition @x20
@x51))))


;; def=MiniParse.Spec.Combinators.fst(230,74-230,87); use=MiniParse.Spec.Combinators.fst(230,74-230,87)
(or label_64
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (Prims.op_Addition @x20
@x51)
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)))))


;; def=Prims.fst(356,2-356,58); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x60 Term))
 (! (implies (and (HasType @x60
(Tm_refine_6c303de0c7cf6ef8ce28b57600b9d4f0 @x20
@x5
@x11))

;; def=Prims.fst(356,26-356,41); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= @x60
(Prims.op_Addition @x20
@x51))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x61 Term))
 (! (implies (and (HasType @x61
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,42-175,43); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x20
(Prims.op_Addition @x20
@x51))
@x61)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x62 Term))
 (! (implies (and (HasType @x62
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (Prims.eq2 (FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt 0)
@x51)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x20
(Prims.op_Addition @x20
@x51)))
@x62)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(230,3-230,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(230,10-230,88); use=MiniParse.Spec.Combinators.fst(230,3-230,9)
(or label_65

;; def=MiniParse.Spec.Combinators.fst(230,10-230,88); use=MiniParse.Spec.Combinators.fst(230,3-230,9)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt 0)
@x51)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x20
(Prims.op_Addition @x20
@x51)))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(230,3-230,9)
(forall ((@x63 Term))
 (! (implies (and (HasType @x63
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(230,10-230,88); use=MiniParse.Spec.Combinators.fst(230,3-230,9)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt 0)
@x51)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x20
(Prims.op_Addition @x20
@x51)))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(231,27-231,31)
(<= (BoxInt_proj_0 @x51)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(231,27-231,31)
(and 
;; def=MiniParse.Spec.Combinators.fst(225,18-225,22); use=MiniParse.Spec.Combinators.fst(231,27-231,31)
(or label_66
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x51)))


;; def=MiniParse.Spec.Combinators.fst(225,18-225,22); use=MiniParse.Spec.Combinators.fst(231,27-231,31)
(or label_67
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x51
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x64 Term))
 (! (implies (and (HasType @x64
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= @x51
@x64)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x65 Term))
 (! (implies (and (HasType @x65
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt 0)
@x51)
@x65)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(231,50-231,54)
(<= (BoxInt_proj_0 @x51)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(231,50-231,54)
(and 
;; def=MiniParse.Spec.Combinators.fst(225,18-225,22); use=MiniParse.Spec.Combinators.fst(231,50-231,54)
(or label_68
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x51)))


;; def=MiniParse.Spec.Combinators.fst(225,18-225,22); use=MiniParse.Spec.Combinators.fst(231,50-231,54)
(or label_69
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x51
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x66 Term))
 (! (implies (and (HasType @x66
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= @x51
@x66)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x67 Term))
 (! (implies (and (HasType @x67
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,42-175,43); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))
(BoxInt 0)
@x51)
@x67)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x68 Term))
 (! (implies (and (HasType @x68
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(= (Prims.eq2 (FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt 0)
@x51)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))
(BoxInt 0)
@x51))
@x68)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(231,3-231,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(231,10-231,55); use=MiniParse.Spec.Combinators.fst(231,3-231,9)
(or label_70

;; def=MiniParse.Spec.Combinators.fst(231,10-231,55); use=MiniParse.Spec.Combinators.fst(231,3-231,9)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt 0)
@x51)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))
(BoxInt 0)
@x51))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(231,3-231,9)
(forall ((@x69 Term))
 (! (implies (and (HasType @x69
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(231,10-231,55); use=MiniParse.Spec.Combinators.fst(231,3-231,9)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt 0)
@x51)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))
(BoxInt 0)
@x51))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(232,3-232,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(232,10-232,42); use=MiniParse.Spec.Combinators.fst(232,3-232,9)
(or label_71

;; def=MiniParse.Spec.Combinators.fst(232,10-232,42); use=MiniParse.Spec.Combinators.fst(232,3-232,9)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(232,10-232,42); use=MiniParse.Spec.Combinators.fst(232,3-232,9)
(MiniParse.Spec.Base.no_lookahead_weak_on @x1
(ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))
)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(232,3-232,9)
(forall ((@x70 Term))
 (! (implies (and (HasType @x70
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(232,10-232,42); use=MiniParse.Spec.Combinators.fst(232,3-232,9)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(232,10-232,42); use=MiniParse.Spec.Combinators.fst(232,3-232,9)
(MiniParse.Spec.Base.no_lookahead_weak_on @x1
(ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(forall ((@x71 Term))
 (! (implies (HasType @x71
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(Valid 
;; def=Prims.fst(451,90-451,102); use=MiniParse.Spec.Combinators.fst(210,3-233,5)
(ApplyTT @x16
@x71)
)
)
 
;;no pats
:qid @query.86))
)
 
;;no pats
:qid @query.85))
)
)
 
;;no pats
:qid @query.84))
)
)
 
;;no pats
:qid @query.83))
)
 
;;no pats
:qid @query.82))
)
 
;;no pats
:qid @query.81))
)
)
 
;;no pats
:qid @query.80))
)
 
;;no pats
:qid @query.79))
)
)
 
;;no pats
:qid @query.78))
)
)
 
;;no pats
:qid @query.77))
)
 
;;no pats
:qid @query.76))
)
 
;;no pats
:qid @query.75))
)
)
 
;;no pats
:qid @query.74))
)
 
;;no pats
:qid @query.73))
)
)
 
;;no pats
:qid @query.72))
)
 
;;no pats
:qid @query.71))
)
)
 
;;no pats
:qid @query.70))
)
)
 
;;no pats
:qid @query.69))
)
)
 
;;no pats
:qid @query.68))
)
)
 
;;no pats
:qid @query.67))
)
)
 
;;no pats
:qid @query.66))
)
 
;;no pats
:qid @query.65))
)
)
 
;;no pats
:qid @query.64))
)
 
;;no pats
:qid @query.63))
)
)
 
;;no pats
:qid @query.62))
)
 
;;no pats
:qid @query.61))
)
)
 
;;no pats
:qid @query.60))
)
 
;;no pats
:qid @query.59))
)
)
 
;;no pats
:qid @query.58))
)
)
 
;;no pats
:qid @query.57))
)
 
;;no pats
:qid @query.56))
)
 
;;no pats
:qid @query.55))
)
)
 
;;no pats
:qid @query.54))
)
 
;;no pats
:qid @query.53))
)
)
 
;;no pats
:qid @query.52))
)
)
 
;;no pats
:qid @query.51))
)
)
 
;;no pats
:qid @query.50))
)
 
;;no pats
:qid @query.49))
)
 
;;no pats
:qid @query.48))
)
)
 
;;no pats
:qid @query.47))
)
 
;;no pats
:qid @query.46))
)
)
 
;;no pats
:qid @query.45))
)
)
 
;;no pats
:qid @query.44))
)
 
;;no pats
:qid @query.43))
)
 
;;no pats
:qid @query.42))
)
)
 
;;no pats
:qid @query.41))
)
 
;;no pats
:qid @query.40))
)
)
 
;;no pats
:qid @query.39))
)
 
;;no pats
:qid @query.38))
)
)
 
;;no pats
:qid @query.37))
)
)
 
;;no pats
:qid @query.36))
)
)
 
;;no pats
:qid @query.35))
)
 
;;no pats
:qid @query.34))
)
)
 
;;no pats
:qid @query.33))
)
 
;;no pats
:qid @query.32))
)
)
 
;;no pats
:qid @query.30))
)
)
 
;;no pats
:qid @query.22))


;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x15 Term))
 (! (implies (HasType @x15
(Tm_arrow_05f18cf3ae472583689b20218973d56c @x10
@x3
@x2
@x0
@x1
@x11
@x4
@x5))

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(and 
;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(203,14-203,43); use=MiniParse.Spec.Combinators.fst(235,25-235,26)
(<= (BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(235,25-235,26)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(235,25-235,26)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(235,25-235,26)
(and 
;; def=MiniParse.Spec.Combinators.fst(201,6-201,12); use=MiniParse.Spec.Combinators.fst(203,62-203,68)
(or label_72
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(201,6-201,12); use=MiniParse.Spec.Combinators.fst(203,62-203,68)
(or label_73
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(235,25-235,26)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
(MiniParse.Spec.Base.consumed_length @x5))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(235,25-235,26)
(= @x11
@x17)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(235,25-235,26)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(235,25-235,26)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x18)


;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(235,25-235,26)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
)

;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(235,25-235,26)
(and 
;; def=MiniParse.Spec.Combinators.fst(198,11-198,16); use=MiniParse.Spec.Combinators.fst(203,86-203,91)
(or label_74
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(198,11-198,16); use=MiniParse.Spec.Combinators.fst(203,86-203,91)
(or label_75
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
)
)
 
;;no pats
:qid @query.90))
)
 
;;no pats
:qid @query.89))
)
)
 
;;no pats
:qid @query.88))


;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe)

;; def=FStar.Classical.fsti(80,8-80,9); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(= (Tm_abs_aa1c64c9f2ccb888b86e39971e19b7ec @x5
@x4
@x11)
@x16)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(and 
;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(205,5-205,24); use=MiniParse.Spec.Combinators.fst(235,25-235,26)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x5)))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(235,25-235,26)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))))

;; def=MiniParse.Spec.Combinators.fst(206,21-206,32); use=MiniParse.Spec.Combinators.fst(235,25-235,26)
(= (MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x5)
@x18)


;; def=MiniParse.Spec.Combinators.fst(206,21-206,32); use=MiniParse.Spec.Combinators.fst(235,25-235,26)
(not 
;; def=MiniParse.Spec.Combinators.fst(206,21-206,32); use=MiniParse.Spec.Combinators.fst(235,25-235,26)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x5)))
)
)
label_76)
 
;;no pats
:qid @query.93))
)
 
;;no pats
:qid @query.92))


;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe)

;; def=FStar.Classical.fsti(80,11-80,12); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(= (Tm_abs_68d918befe526b82dd7cd018491e8682 @x1
@x5
@x0
@x2
@x3
@x10
@x11)
@x17)
)

;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(235,11-235,24)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
Prims.unit)

;; def=FStar.Classical.fsti(83,12-83,25); use=MiniParse.Spec.Combinators.fst(235,11-235,24)
(implies 
;; def=MiniParse.Spec.Combinators.fst(203,13-203,92); use=MiniParse.Spec.Combinators.fst(235,11-235,24)
(and 
;; def=MiniParse.Spec.Combinators.fst(203,14-203,43); use=MiniParse.Spec.Combinators.fst(235,11-235,24)
(<= (BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))


;; def=MiniParse.Spec.Combinators.fst(203,47-203,91); use=MiniParse.Spec.Combinators.fst(235,11-235,24)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x11))
)


;; def=MiniParse.Spec.Combinators.fst(204,12-209,5); use=MiniParse.Spec.Combinators.fst(235,11-235,24)
(and 
;; def=MiniParse.Spec.Combinators.fst(205,5-205,24); use=MiniParse.Spec.Combinators.fst(235,11-235,24)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x5)))

(let ((@lb19 (MiniParse.Spec.Base.bparse @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x5)))
(ite (is-FStar.Pervasives.Native.Some @lb19)
(let ((@lb20 (FStar.Pervasives.Native.Some_v @lb19)))

;; def=MiniParse.Spec.Combinators.fst(208,5-208,45); use=MiniParse.Spec.Combinators.fst(235,11-235,24)
(and 
;; def=MiniParse.Spec.Combinators.fst(208,5-208,12); use=MiniParse.Spec.Combinators.fst(235,11-235,24)
(= @x10
(FStar.Pervasives.Native.Mktuple2__1 @lb20))


;; def=MiniParse.Spec.Combinators.fst(208,16-208,45); use=MiniParse.Spec.Combinators.fst(235,11-235,24)
(= @x11
(FStar.Pervasives.Native.Mktuple2__2 @lb20))
)
)
Unreachable)))
)
)

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(235,11-235,24)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(235,11-235,24)
(ApplyTT @x13
@x18)
)
)
 
;;no pats
:qid @query.95))
)
 
;;no pats
:qid @query.94))
)
)
 
;;no pats
:qid @query.91))
)
)
 
;;no pats
:qid @query.87))
)
)
 
;;no pats
:qid @query.13))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(not 
;; def=MiniParse.Spec.Combinators.fst(199,9-199,29); use=MiniParse.Spec.Combinators.fst(199,9-199,29)
(= (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
Prims.bool)

;; def=MiniParse.Spec.Combinators.fst(199,9-236,13); use=MiniParse.Spec.Combinators.fst(199,9-236,13)
(= (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
@x14)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x15 Term))
 (! (implies (HasType @x15
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(Valid 
;; def=Prims.fst(451,90-451,102); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(ApplyTT @x13
@x15)
)
)
 
;;no pats
:qid @query.97))
)
 
;;no pats
:qid @query.96))
))
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))

(implies 
;; def=Prims.fst(389,19-389,21); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(not 
;; def=MiniParse.Spec.Combinators.fst(194,10-194,13); use=MiniParse.Spec.Combinators.fst(194,10-194,13)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x4))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x4)))
)


;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x4))))

;; def=MiniParse.Spec.Combinators.fst(194,10-237,7); use=MiniParse.Spec.Combinators.fst(194,10-237,7)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x9)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(forall ((@x10 Term))
 (! (implies (HasType @x10
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(Valid 
;; def=Prims.fst(451,90-451,102); use=MiniParse.Spec.Combinators.fst(192,52-237,13)
(ApplyTT @x8
@x10)
)
)
 
;;no pats
:qid @query.99))
)
 
;;no pats
:qid @query.98))
))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 8714496)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_76")
(eval label_76)
(echo "label_75")
(eval label_75)
(echo "label_74")
(eval label_74)
(echo "label_73")
(eval label_73)
(echo "label_72")
(eval label_72)
(echo "label_71")
(eval label_71)
(echo "label_70")
(eval label_70)
(echo "label_69")
(eval label_69)
(echo "label_68")
(eval label_68)
(echo "label_67")
(eval label_67)
(echo "label_66")
(eval label_66)
(echo "label_65")
(eval label_65)
(echo "label_64")
(eval label_64)
(echo "label_63")
(eval label_63)
(echo "label_62")
(eval label_62)
(echo "label_61")
(eval label_61)
(echo "label_60")
(eval label_60)
(echo "label_59")
(eval label_59)
(echo "label_58")
(eval label_58)
(echo "label_57")
(eval label_57)
(echo "label_56")
(eval label_56)
(echo "label_55")
(eval label_55)
(echo "label_54")
(eval label_54)
(echo "label_53")
(eval label_53)
(echo "label_52")
(eval label_52)
(echo "label_51")
(eval label_51)
(echo "label_50")
(eval label_50)
(echo "label_49")
(eval label_49)
(echo "label_48")
(eval label_48)
(echo "label_47")
(eval label_47)
(echo "label_46")
(eval label_46)
(echo "label_45")
(eval label_45)
(echo "label_44")
(eval label_44)
(echo "label_43")
(eval label_43)
(echo "label_42")
(eval label_42)
(echo "label_41")
(eval label_41)
(echo "label_40")
(eval label_40)
(echo "label_39")
(eval label_39)
(echo "label_38")
(eval label_38)
(echo "label_37")
(eval label_37)
(echo "label_36")
(eval label_36)
(echo "label_35")
(eval label_35)
(echo "label_34")
(eval label_34)
(echo "label_33")
(eval label_33)
(echo "label_32")
(eval label_32)
(echo "label_31")
(eval label_31)
(echo "label_30")
(eval label_30)
(echo "label_29")
(eval label_29)
(echo "label_28")
(eval label_28)
(echo "label_27")
(eval label_27)
(echo "label_26")
(eval label_26)
(echo "label_25")
(eval label_25)
(echo "label_24")
(eval label_24)
(echo "label_23")
(eval label_23)
(echo "label_22")
(eval label_22)
(echo "label_21")
(eval label_21)
(echo "label_20")
(eval label_20)
(echo "label_19")
(eval label_19)
(echo "label_18")
(eval label_18)
(echo "label_17")
(eval label_17)
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.and_then_no_lookahead_weak_on, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, MiniParse.Spec.Combinators_interpretation_Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc, constructor_distinct_FStar.Pervasives.Native.None, constructor_distinct_FStar.Pervasives.Native.Some, constructor_distinct_Tm_unit, data_elim_FStar.Pervasives.Native.Mktuple2, data_elim_FStar.Pervasives.Native.Some, disc_equation_FStar.Pervasives.Native.None, disc_equation_FStar.Pervasives.Native.Some, equation_MiniParse.Spec.Base.bparse, equation_MiniParse.Spec.Base.byte, equation_MiniParse.Spec.Base.bytes, equation_MiniParse.Spec.Base.consumed_length, equation_MiniParse.Spec.Base.no_lookahead_weak, equation_MiniParse.Spec.Base.no_lookahead_weak_on, equation_MiniParse.Spec.Combinators.and_then_bare, equation_Prims.eqtype, equation_Prims.nat, fuel_guarded_inversion_FStar.Pervasives.Native.tuple2, int_inversion, int_typing, interpretation_Tm_abs_5a56d64ec9685d0352c27644697b3e56, kinding_FStar.Pervasives.Native.tuple2@tok, lemma_FStar.Pervasives.invertOption, lemma_FStar.Seq.Base.lemma_len_slice, lemma_FStar.Seq.Properties.slice_slice, primitive_Prims.op_Addition, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_FStar.Pervasives.Native.Some_a, projection_inverse_FStar.Pervasives.Native.Some_v, refinement_interpretation_Tm_refine_1ba8fd8bb363097813064c67740b2de5, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_81407705a0828c2c1b1976675443f647, refinement_interpretation_Tm_refine_d3d07693cd71377864ef84dc97d10ec1, refinement_interpretation_Tm_refine_f1ef48729dd48b5741a77671cc117cd5, token_correspondence_MiniParse.Spec.Combinators.and_then_bare, typing_FStar.Seq.Base.length, typing_FStar.Seq.Base.slice, typing_FStar.UInt8.t, typing_MiniParse.Spec.Base.bparse, typing_MiniParse.Spec.Base.consumed_length, unit_inversion, unit_typing

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let and_then_no_lookahead_weak_on


; <Start encoding let and_then_no_lookahead_weak_on>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Combinators.and_then_no_lookahead_weak_on (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Combinators.and_then_no_lookahead_weak_on@tok () Term)

; </end encoding let and_then_no_lookahead_weak_on>

(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(250,2-250,100)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)


; Encoding query formula : forall (t: Type)
;   (t': Type)
;   (p: MiniParse.Spec.Base.bare_parser t)
;   (p': (_: t -> MiniParse.Spec.Base.bare_parser t')).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     MiniParse.Spec.Base.no_lookahead_weak p /\
;     (forall (x: t). MiniParse.Spec.Base.no_lookahead_weak (p' x)) /\
;     (forall (pure_result: Prims.unit).
;         MiniParse.Spec.Base.no_lookahead_weak (MiniParse.Spec.Combinators.and_then_bare p p') ==>
;         p pure_result) ==>
;     (forall (pure_result: Prims.unit).
;         (forall (x: MiniParse.Spec.Base.bytes) (y: MiniParse.Spec.Base.bytes).
;             MiniParse.Spec.Base.no_lookahead_weak p /\
;             (forall (x: t). MiniParse.Spec.Base.no_lookahead_weak (p' x)) ==>
;             MiniParse.Spec.Base.no_lookahead_weak_on (MiniParse.Spec.Combinators.and_then_bare p p')
;               x
;               y) ==>
;         p pure_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let and_then_no_lookahead_weak`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(MiniParse.Spec.Base.bare_parser @x0))
(HasType @x3
(Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc @x1
@x0)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(246,4-246,23); use=MiniParse.Spec.Combinators.fst(250,2-250,100)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(246,4-246,23); use=MiniParse.Spec.Combinators.fst(250,2-250,100)
(MiniParse.Spec.Base.no_lookahead_weak @x0
@x2)
)


;; def=MiniParse.Spec.Combinators.fst(247,4-247,46); use=MiniParse.Spec.Combinators.fst(250,2-250,100)
(forall ((@x5 Term))
 (! (implies (HasType @x5
@x0)

;; def=MiniParse.Spec.Combinators.fst(247,21-247,45); use=MiniParse.Spec.Combinators.fst(250,2-250,100)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(247,21-247,45); use=MiniParse.Spec.Combinators.fst(250,2-250,100)
(MiniParse.Spec.Base.no_lookahead_weak @x1
(ApplyTT @x3
@x5))
)
)
 
;;no pats
:qid @query.2))


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(250,2-250,100)
(forall ((@x5 Term))
 (! (implies (and (or label_1
(HasType @x5
Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(249,11-249,51); use=MiniParse.Spec.Combinators.fst(250,2-250,100)
(or label_2

;; def=MiniParse.Spec.Combinators.fst(249,11-249,51); use=MiniParse.Spec.Combinators.fst(250,2-250,100)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(249,11-249,51); use=MiniParse.Spec.Combinators.fst(250,2-250,100)
(MiniParse.Spec.Base.no_lookahead_weak @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3))
)
)
)

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(250,2-250,100)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(250,2-250,100)
(ApplyTT @x4
@x5)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(250,2-250,100)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(250,2-250,100)
(ApplyTT @x4
@x5)
)
)
:qid @query.3))
)

;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(250,2-250,100)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)

;; def=FStar.Classical.fsti(277,12-277,43); use=MiniParse.Spec.Combinators.fst(250,12-250,26)
(forall ((@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x6
MiniParse.Spec.Base.bytes)
(HasType @x7
MiniParse.Spec.Base.bytes)

;; def=MiniParse.Spec.Combinators.fst(187,6-187,25); use=MiniParse.Spec.Combinators.fst(250,12-250,26)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(187,6-187,25); use=MiniParse.Spec.Combinators.fst(250,12-250,26)
(MiniParse.Spec.Base.no_lookahead_weak @x0
@x2)
)


;; def=MiniParse.Spec.Combinators.fst(188,6-188,48); use=MiniParse.Spec.Combinators.fst(250,12-250,26)
(forall ((@x8 Term))
 (! (implies (HasType @x8
@x0)

;; def=MiniParse.Spec.Combinators.fst(188,23-188,47); use=MiniParse.Spec.Combinators.fst(250,12-250,26)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(188,23-188,47); use=MiniParse.Spec.Combinators.fst(250,12-250,26)
(MiniParse.Spec.Base.no_lookahead_weak @x1
(ApplyTT @x3
@x8))
)
)
 
;;no pats
:qid @query.6))
)

;; def=FStar.Classical.fsti(83,21-83,24); use=MiniParse.Spec.Combinators.fst(250,12-250,26)
(Valid 
;; def=FStar.Classical.fsti(83,21-83,24); use=MiniParse.Spec.Combinators.fst(250,12-250,26)
(MiniParse.Spec.Base.no_lookahead_weak_on @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x6
@x7)
)
)
 
;;no pats
:qid @query.5))
)

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(250,2-250,100)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(250,2-250,100)
(ApplyTT @x4
@x5)
)
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 8714496)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.and_then_no_lookahead_weak, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query, equation_MiniParse.Spec.Base.no_lookahead_weak

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let and_then_no_lookahead_weak


; <Start encoding let and_then_no_lookahead_weak>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Combinators.and_then_no_lookahead_weak (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Combinators.and_then_no_lookahead_weak@tok () Term)

; </end encoding let and_then_no_lookahead_weak>

(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(259,2-264,3)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)


; Encoding query formula : forall (t: Type)
;   (t': Type)
;   (p': (_: t -> MiniParse.Spec.Base.bare_parser t'))
;   (x1: t)
;   (x2: t)
;   (b1: MiniParse.Spec.Base.bytes)
;   (b2: MiniParse.Spec.Base.bytes).
;   (*  - Could not prove post-condition
; *)
;   Some? (p' x1 b1) /\ Some? (p' x2 b2) ==>
;   (forall (any_result: FStar.Pervasives.Native.option (t' & MiniParse.Spec.Base.consumed_length b1))
;     .
;       p' x1 b1 == any_result ==>
;       (~(Some? (p' x1 b1)) ==> Prims.l_False) /\
;       (forall (b: t') (b: MiniParse.Spec.Base.consumed_length b1).
;           p' x1 b1 == FStar.Pervasives.Native.Some (b, b) ==>
;           (forall (any_result:
;               FStar.Pervasives.Native.option (t' & MiniParse.Spec.Base.consumed_length b2)).
;               p' x2 b2 == any_result ==> ~(Some? (p' x2 b2)) ==> Prims.l_False)))


; Context: While encoding a query
; While typechecking the top-level declaration `let and_then_cases_injective_precond`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc @x1
@x0))
(HasType @x3
@x0)
(HasType @x4
@x0)
(HasType @x5
MiniParse.Spec.Base.bytes)
(HasType @x6
MiniParse.Spec.Base.bytes)

;; def=MiniParse.Spec.Combinators.fst(259,2-259,20); use=MiniParse.Spec.Combinators.fst(259,2-259,20)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(ApplyTT (ApplyTT @x2
@x3)
@x5)))


;; def=MiniParse.Spec.Combinators.fst(260,2-260,20); use=MiniParse.Spec.Combinators.fst(260,2-260,20)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x6))
(ApplyTT (ApplyTT @x2
@x4)
@x6)))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(259,2-264,3)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))))

;; def=MiniParse.Spec.Combinators.fst(261,9-261,35); use=MiniParse.Spec.Combinators.fst(261,9-261,35)
(= (ApplyTT (ApplyTT @x2
@x3)
@x5)
@x7)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(259,2-264,3)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(261,9-261,21); use=MiniParse.Spec.Combinators.fst(261,9-261,21)
(not 
;; def=MiniParse.Spec.Combinators.fst(261,9-261,21); use=MiniParse.Spec.Combinators.fst(261,9-261,21)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(ApplyTT (ApplyTT @x2
@x3)
@x5)))
)

label_1)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(259,2-264,3)
(forall ((@x8 Term))
 (! (implies (HasType @x8
@x1)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(259,2-264,3)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(MiniParse.Spec.Base.consumed_length @x5))

;; def=MiniParse.Spec.Combinators.fst(261,9-261,21); use=MiniParse.Spec.Combinators.fst(261,9-261,21)
(= (ApplyTT (ApplyTT @x2
@x3)
@x5)
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(FStar.Pervasives.Native.Mktuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5)
@x8
@x9)))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(259,2-264,3)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x6))))

;; def=MiniParse.Spec.Combinators.fst(262,9-262,35); use=MiniParse.Spec.Combinators.fst(262,9-262,35)
(= (ApplyTT (ApplyTT @x2
@x4)
@x6)
@x10)


;; def=MiniParse.Spec.Combinators.fst(262,9-262,21); use=MiniParse.Spec.Combinators.fst(262,9-262,21)
(not 
;; def=MiniParse.Spec.Combinators.fst(262,9-262,21); use=MiniParse.Spec.Combinators.fst(262,9-262,21)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x6))
(ApplyTT (ApplyTT @x2
@x4)
@x6)))
)
)
label_2)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 8714496)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.and_then_cases_injective_precond, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let and_then_cases_injective_precond


; <Start encoding let and_then_cases_injective_precond>


(declare-fun MiniParse.Spec.Combinators.and_then_cases_injective_precond (Term Term Term Term Term Term Term) Term)

;;;;;;;;;;;;;;;;p': (_: t -> MiniParse.Spec.Base.bare_parser t') ->     x1: t ->     x2: t ->     b1: MiniParse.Spec.Base.bytes ->     b2: MiniParse.Spec.Base.bytes   -> Prims.GTot Type
(declare-fun Tm_arrow_3ec634d353bc35aae984c334df29e7e0 () Term)
(declare-fun MiniParse.Spec.Combinators.and_then_cases_injective_precond@tok () Term)


; </end encoding let and_then_cases_injective_precond>


; encoding sigelt let and_then_cases_injective'


; <Start encoding let and_then_cases_injective'>


(declare-fun MiniParse.Spec.Combinators.and_then_cases_injective_ (Term Term Term) Term)

;;;;;;;;;;;;;;;;p': (_: t -> MiniParse.Spec.Base.bare_parser t') -> Prims.GTot Type
(declare-fun Tm_arrow_1ae05d7e616fc1e5c04b566a2608908a () Term)
(declare-fun MiniParse.Spec.Combinators.and_then_cases_injective_@tok () Term)


; </end encoding let and_then_cases_injective'>


; encoding sigelt let coerce_to_bare_param_parser


; <Start encoding let coerce_to_bare_param_parser>

;;;;;;;;;;;;;;;;_: t -> MiniParse.Spec.Base.parser_spec t'
(declare-fun Tm_arrow_21c34ab6214876c3f64c3607461881fc (Term Term) Term)
(declare-fun MiniParse.Spec.Combinators.coerce_to_bare_param_parser (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;p': (_: t -> MiniParse.Spec.Base.parser_spec t') -> x: t -> MiniParse.Spec.Base.bare_parser t'
(declare-fun Tm_arrow_fe391d6680769aaad08ee4cff3d82de3 () Term)
(declare-fun MiniParse.Spec.Combinators.coerce_to_bare_param_parser@tok () Term)


; </end encoding let coerce_to_bare_param_parser>


; encoding sigelt let and_then_cases_injective


; <Start encoding let and_then_cases_injective>


(declare-fun MiniParse.Spec.Combinators.and_then_cases_injective (Term Term Term) Term)

;;;;;;;;;;;;;;;;p': (_: t -> MiniParse.Spec.Base.parser_spec t') -> Prims.GTot Type
(declare-fun Tm_arrow_4b80c22d8d7c55065f1a400190b88c99 () Term)
(declare-fun MiniParse.Spec.Combinators.and_then_cases_injective@tok () Term)


; </end encoding let and_then_cases_injective>


; encoding sigelt val MiniParse.Spec.Combinators.and_then_injective


; <Skipped val MiniParse.Spec.Combinators.and_then_injective/>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Combinators.and_then_cases_injective_precond; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(252,4-252,36); use=MiniParse.Spec.Combinators.fst(252,4-252,36)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc @x1
@x0))
(HasType @x3
@x0)
(HasType @x4
@x0)
(HasType @x5
MiniParse.Spec.Base.bytes)
(HasType @x6
MiniParse.Spec.Base.bytes))
(HasType (MiniParse.Spec.Combinators.and_then_cases_injective_precond @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type))
 

:pattern ((MiniParse.Spec.Combinators.and_then_cases_injective_precond @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid typing_MiniParse.Spec.Combinators.and_then_cases_injective_precond))

:named typing_MiniParse.Spec.Combinators.and_then_cases_injective_precond))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Combinators.and_then_cases_injective'; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(266,4-266,29); use=MiniParse.Spec.Combinators.fst(266,4-266,29)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc @x1
@x0)))
(HasType (MiniParse.Spec.Combinators.and_then_cases_injective_ @x0
@x1
@x2)
Tm_type))
 

:pattern ((MiniParse.Spec.Combinators.and_then_cases_injective_ @x0
@x1
@x2))
:qid typing_MiniParse.Spec.Combinators.and_then_cases_injective_))

:named typing_MiniParse.Spec.Combinators.and_then_cases_injective_))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Seq.Properties.split; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(56,4-56,9); use=FStar.Seq.Properties.fsti(56,4-56,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
(Tm_refine_17631fa6304dcc08d028bd475a6dd078 @x0
@x1)))
(HasType (FStar.Seq.Properties.split @x0
@x1
@x2)
(FStar.Pervasives.Native.tuple2 (FStar.Seq.Base.seq @x0)
(FStar.Seq.Base.seq @x0))))
 

:pattern ((FStar.Seq.Properties.split @x0
@x1
@x2))
:qid typing_FStar.Seq.Properties.split))

:named typing_FStar.Seq.Properties.split))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Seq.Base.append; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(58,4-58,10); use=FStar.Seq.Base.fsti(58,4-58,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
(FStar.Seq.Base.seq @x0)))
(HasType (FStar.Seq.Base.append @x0
@x1
@x2)
(FStar.Seq.Base.seq @x0)))
 

:pattern ((FStar.Seq.Base.append @x0
@x1
@x2))
:qid typing_FStar.Seq.Base.append))

:named typing_FStar.Seq.Base.append))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.snd; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(63,4-63,7); use=FStar.Pervasives.Native.fst(63,4-63,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives.Native.tuple2 @x0
@x1)))
(HasType (FStar.Pervasives.Native.snd @x0
@x1
@x2)
@x1))
 

:pattern ((FStar.Pervasives.Native.snd @x0
@x1
@x2))
:qid typing_FStar.Pervasives.Native.snd))

:named typing_FStar.Pervasives.Native.snd))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.fst; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(62,4-62,7); use=FStar.Pervasives.Native.fst(62,4-62,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives.Native.tuple2 @x0
@x1)))
(HasType (FStar.Pervasives.Native.fst @x0
@x1
@x2)
@x0))
 

:pattern ((FStar.Pervasives.Native.fst @x0
@x1
@x2))
:qid typing_FStar.Pervasives.Native.fst))

:named typing_FStar.Pervasives.Native.fst))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple2__item___2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,43-59,45); use=FStar.Pervasives.Native.fst(59,43-59,45)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives.Native.tuple2 @x0
@x1)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple2__item___2 @x0
@x1
@x2)
@x1))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple2__item___2 @x0
@x1
@x2))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple2__item___2))

:named typing_FStar.Pervasives.Native.__proj__Mktuple2__item___2))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple2__item___1; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,33-59,35); use=FStar.Pervasives.Native.fst(59,33-59,35)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives.Native.tuple2 @x0
@x1)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple2__item___1 @x0
@x1
@x2)
@x0))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple2__item___1 @x0
@x1
@x2))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple2__item___1))

:named typing_FStar.Pervasives.Native.__proj__Mktuple2__item___1))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Seq.Properties.split; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(56,30-56,64); use=FStar.Seq.Properties.fsti(56,30-56,64)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_17631fa6304dcc08d028bd475a6dd078 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_17631fa6304dcc08d028bd475a6dd078 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_17631fa6304dcc08d028bd475a6dd078))

:named refinement_kinding_Tm_refine_17631fa6304dcc08d028bd475a6dd078))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Seq.Properties.split; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(56,30-56,64); use=FStar.Seq.Properties.fsti(56,30-56,64)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_17631fa6304dcc08d028bd475a6dd078 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=FStar.Seq.Properties.fsti(56,38-56,44); use=FStar.Seq.Properties.fsti(56,38-56,44)
(<= (BoxInt_proj_0 (BoxInt 0))
(BoxInt_proj_0 @x1))


;; def=FStar.Seq.Properties.fsti(56,48-56,61); use=FStar.Seq.Properties.fsti(56,48-56,61)
(<= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (FStar.Seq.Base.length @x2
@x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_17631fa6304dcc08d028bd475a6dd078 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_17631fa6304dcc08d028bd475a6dd078))

:named refinement_interpretation_Tm_refine_17631fa6304dcc08d028bd475a6dd078))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple2__item___2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,43-59,45); use=FStar.Pervasives.Native.fst(59,43-59,45)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple2__item___2 @x0
@x1
@x2)
(FStar.Pervasives.Native.Mktuple2__2 @x2))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple2__item___2 @x0
@x1
@x2))
:qid proj_equation_FStar.Pervasives.Native.Mktuple2__2))

:named proj_equation_FStar.Pervasives.Native.Mktuple2__2))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple2__item___1; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,33-59,35); use=FStar.Pervasives.Native.fst(59,33-59,35)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple2__item___1 @x0
@x1
@x2)
(FStar.Pervasives.Native.Mktuple2__1 @x2))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple2__item___1 @x0
@x1
@x2))
:qid proj_equation_FStar.Pervasives.Native.Mktuple2__1))

:named proj_equation_FStar.Pervasives.Native.Mktuple2__1))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Base.lemma_len_append
;;; Fact-ids: Name FStar.Seq.Base.lemma_len_append; Namespace FStar.Seq.Base
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
(FStar.Seq.Base.seq @x0)))

;; def=FStar.Seq.Base.fsti(124,11-124,58); use=FStar.Seq.Base.fsti(124,11-124,58)
(= (FStar.Seq.Base.length @x0
(FStar.Seq.Base.append @x0
@x1
@x2))
(Prims.op_Addition (FStar.Seq.Base.length @x0
@x1)
(FStar.Seq.Base.length @x0
@x2)))
)
 

:pattern ((FStar.Seq.Base.length @x0
(FStar.Seq.Base.append @x0
@x1
@x2)))
:qid lemma_FStar.Seq.Base.lemma_len_append))
:named lemma_FStar.Seq.Base.lemma_len_append))
;;;;;;;;;;;;;;;;haseq for Tm_refine_17631fa6304dcc08d028bd475a6dd078
;;; Fact-ids: Name FStar.Seq.Properties.split; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(56,30-56,64); use=FStar.Seq.Properties.fsti(56,30-56,64)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_17631fa6304dcc08d028bd475a6dd078 @x0
@x1)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_17631fa6304dcc08d028bd475a6dd078 @x0
@x1))))
:qid haseqTm_refine_17631fa6304dcc08d028bd475a6dd078))

:named haseqTm_refine_17631fa6304dcc08d028bd475a6dd078))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Combinators.and_then_cases_injective_precond
;;; Fact-ids: Name MiniParse.Spec.Combinators.and_then_cases_injective_precond; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(252,4-252,36); use=MiniParse.Spec.Combinators.fst(252,4-252,36)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (Valid (MiniParse.Spec.Combinators.and_then_cases_injective_precond @x0
@x1
@x2
@x3
@x4
@x5
@x6))

;; def=MiniParse.Spec.Combinators.fst(259,2-264,3); use=MiniParse.Spec.Combinators.fst(259,2-264,3)
(and 
;; def=MiniParse.Spec.Combinators.fst(259,2-259,20); use=MiniParse.Spec.Combinators.fst(259,2-259,20)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(ApplyTT (ApplyTT @x2
@x3)
@x5)))


;; def=MiniParse.Spec.Combinators.fst(260,2-260,20); use=MiniParse.Spec.Combinators.fst(260,2-260,20)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x6))
(ApplyTT (ApplyTT @x2
@x4)
@x6)))

(let ((@lb7 (ApplyTT (ApplyTT @x2
@x3)
@x5)))
(ite (is-FStar.Pervasives.Native.Some @lb7)
(let ((@lb8 (ApplyTT (ApplyTT @x2
@x4)
@x6)))
(ite (is-FStar.Pervasives.Native.Some @lb8)

;; def=MiniParse.Spec.Combinators.fst(263,4-263,12); use=MiniParse.Spec.Combinators.fst(263,4-263,12)
(= (FStar.Pervasives.Native.Mktuple2__1 (FStar.Pervasives.Native.Some_v @lb7))
(FStar.Pervasives.Native.Mktuple2__1 (FStar.Pervasives.Native.Some_v @lb8)))

Unreachable))
Unreachable)))
)
 

:pattern ((MiniParse.Spec.Combinators.and_then_cases_injective_precond @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid equation_MiniParse.Spec.Combinators.and_then_cases_injective_precond))

:named equation_MiniParse.Spec.Combinators.and_then_cases_injective_precond))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Combinators.and_then_cases_injective'
;;; Fact-ids: Name MiniParse.Spec.Combinators.and_then_cases_injective'; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(266,4-266,29); use=MiniParse.Spec.Combinators.fst(266,4-266,29)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Valid (MiniParse.Spec.Combinators.and_then_cases_injective_ @x0
@x1
@x2))

;; def=MiniParse.Spec.Combinators.fst(271,2-273,10); use=MiniParse.Spec.Combinators.fst(271,2-273,10)
(forall ((@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x3
@x0)
(HasType @x4
@x0)
(HasType @x5
MiniParse.Spec.Base.bytes)
(HasType @x6
MiniParse.Spec.Base.bytes)

;; def=MiniParse.Spec.Combinators.fst(272,2-272,49); use=MiniParse.Spec.Combinators.fst(272,2-272,49)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(272,2-272,49); use=MiniParse.Spec.Combinators.fst(272,2-272,49)
(MiniParse.Spec.Combinators.and_then_cases_injective_precond @x0
@x1
@x2
@x3
@x4
@x5
@x6)
)
)

;; def=MiniParse.Spec.Combinators.fst(273,2-273,10); use=MiniParse.Spec.Combinators.fst(273,2-273,10)
(= @x3
@x4)
)
 
;;no pats
:qid equation_MiniParse.Spec.Combinators.and_then_cases_injective_.1))
)
 

:pattern ((MiniParse.Spec.Combinators.and_then_cases_injective_ @x0
@x1
@x2))
:qid equation_MiniParse.Spec.Combinators.and_then_cases_injective_))

:named equation_MiniParse.Spec.Combinators.and_then_cases_injective_))
;;;;;;;;;;;;;;;;Equation for FStar.Seq.Properties.split
;;; Fact-ids: Name FStar.Seq.Properties.split; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(56,4-56,9); use=FStar.Seq.Properties.fsti(56,4-56,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Seq.Properties.split @x0
@x1
@x2)
(FStar.Pervasives.Native.Mktuple2 (FStar.Seq.Base.seq @x0)
(FStar.Seq.Base.seq @x0)
(FStar.Seq.Base.slice @x0
@x1
(BoxInt 0)
@x2)
(FStar.Seq.Base.slice @x0
@x1
@x2
(FStar.Seq.Base.length @x0
@x1))))
 

:pattern ((FStar.Seq.Properties.split @x0
@x1
@x2))
:qid equation_FStar.Seq.Properties.split))

:named equation_FStar.Seq.Properties.split))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.Native.snd
;;; Fact-ids: Name FStar.Pervasives.Native.snd; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(63,4-63,7); use=FStar.Pervasives.Native.fst(63,4-63,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.Native.snd @x0
@x1
@x2)
(FStar.Pervasives.Native.__proj__Mktuple2__item___2 @x0
@x1
@x2))
 

:pattern ((FStar.Pervasives.Native.snd @x0
@x1
@x2))
:qid equation_FStar.Pervasives.Native.snd))

:named equation_FStar.Pervasives.Native.snd))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.Native.fst
;;; Fact-ids: Name FStar.Pervasives.Native.fst; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(62,4-62,7); use=FStar.Pervasives.Native.fst(62,4-62,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.Native.fst @x0
@x1
@x2)
(FStar.Pervasives.Native.__proj__Mktuple2__item___1 @x0
@x1
@x2))
 

:pattern ((FStar.Pervasives.Native.fst @x0
@x1
@x2))
:qid equation_FStar.Pervasives.Native.fst))

:named equation_FStar.Pervasives.Native.fst))
;;;;;;;;;;;;;;;;Prop-typing for MiniParse.Spec.Combinators.and_then_cases_injective_precond
;;; Fact-ids: Name MiniParse.Spec.Combinators.and_then_cases_injective_precond; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(252,4-252,36); use=MiniParse.Spec.Combinators.fst(252,4-252,36)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc @x1
@x0))
(HasType @x3
@x0)
(HasType @x4
@x0)
(HasType @x5
MiniParse.Spec.Base.bytes)
(HasType @x6
MiniParse.Spec.Base.bytes))
(Valid (Prims.subtype_of (MiniParse.Spec.Combinators.and_then_cases_injective_precond @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Prims.unit)))
 

:pattern ((Prims.subtype_of (MiniParse.Spec.Combinators.and_then_cases_injective_precond @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Prims.unit))
:qid defn_equation_MiniParse.Spec.Combinators.and_then_cases_injective_precond))

:named defn_equation_MiniParse.Spec.Combinators.and_then_cases_injective_precond))
;;;;;;;;;;;;;;;;Prop-typing for MiniParse.Spec.Combinators.and_then_cases_injective'
;;; Fact-ids: Name MiniParse.Spec.Combinators.and_then_cases_injective'; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(266,4-266,29); use=MiniParse.Spec.Combinators.fst(266,4-266,29)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc @x1
@x0)))
(Valid (Prims.subtype_of (MiniParse.Spec.Combinators.and_then_cases_injective_ @x0
@x1
@x2)
Prims.unit)))
 

:pattern ((Prims.subtype_of (MiniParse.Spec.Combinators.and_then_cases_injective_ @x0
@x1
@x2)
Prims.unit))
:qid defn_equation_MiniParse.Spec.Combinators.and_then_cases_injective_))

:named defn_equation_MiniParse.Spec.Combinators.and_then_cases_injective_))
(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(305,36-332,67)

(declare-fun label_33 () Bool)
(declare-fun label_32 () Bool)
(declare-fun label_31 () Bool)
(declare-fun label_30 () Bool)
(declare-fun label_29 () Bool)
(declare-fun label_28 () Bool)
(declare-fun label_27 () Bool)
(declare-fun label_26 () Bool)
(declare-fun label_25 () Bool)
(declare-fun label_24 () Bool)
(declare-fun label_23 () Bool)
(declare-fun label_22 () Bool)
(declare-fun label_21 () Bool)
(declare-fun label_20 () Bool)
(declare-fun label_19 () Bool)
(declare-fun label_18 () Bool)
(declare-fun label_17 () Bool)
(declare-fun label_16 () Bool)
(declare-fun label_15 () Bool)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

(declare-fun Tm_refine_276a81d3c3eadebff56bb9e61978d236 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=MiniParse.Spec.Combinators.fst(314,26-314,31)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_276a81d3c3eadebff56bb9e61978d236))

:named refinement_kinding_Tm_refine_276a81d3c3eadebff56bb9e61978d236))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=MiniParse.Spec.Combinators.fst(314,26-314,31)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.nat)
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x2
@x1))
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x1
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x3)))))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_276a81d3c3eadebff56bb9e61978d236))

:named refinement_interpretation_Tm_refine_276a81d3c3eadebff56bb9e61978d236))
;;;;;;;;;;;;;;;;haseq for Tm_refine_276a81d3c3eadebff56bb9e61978d236
;;; Fact-ids: 
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=MiniParse.Spec.Combinators.fst(314,26-314,31)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x0
@x1)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x0
@x1))))
:qid haseqTm_refine_276a81d3c3eadebff56bb9e61978d236))

:named haseqTm_refine_276a81d3c3eadebff56bb9e61978d236))

(declare-fun Tm_refine_6a960d0fa25c92f70750ff4a0270d63a (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=MiniParse.Spec.Combinators.fst(328,25-328,30)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_6a960d0fa25c92f70750ff4a0270d63a @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_6a960d0fa25c92f70750ff4a0270d63a @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_6a960d0fa25c92f70750ff4a0270d63a))

:named refinement_kinding_Tm_refine_6a960d0fa25c92f70750ff4a0270d63a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=MiniParse.Spec.Combinators.fst(328,25-328,30)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_6a960d0fa25c92f70750ff4a0270d63a @x2))
(and (HasTypeFuel @u0
@x1
Prims.nat)
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x1))
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x1
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x2)))))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_6a960d0fa25c92f70750ff4a0270d63a @x2)))
:qid refinement_interpretation_Tm_refine_6a960d0fa25c92f70750ff4a0270d63a))

:named refinement_interpretation_Tm_refine_6a960d0fa25c92f70750ff4a0270d63a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_6a960d0fa25c92f70750ff4a0270d63a
;;; Fact-ids: 
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=MiniParse.Spec.Combinators.fst(328,25-328,30)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_6a960d0fa25c92f70750ff4a0270d63a @x0)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_6a960d0fa25c92f70750ff4a0270d63a @x0))))
:qid haseqTm_refine_6a960d0fa25c92f70750ff4a0270d63a))

:named haseqTm_refine_6a960d0fa25c92f70750ff4a0270d63a))

(declare-fun Tm_refine_8aa8974f647fe47543b949d5b871b335 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(309,4-311,43); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_refine_8aa8974f647fe47543b949d5b871b335 @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type)
 

:pattern ((HasType (Tm_refine_8aa8974f647fe47543b949d5b871b335 @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
:qid refinement_kinding_Tm_refine_8aa8974f647fe47543b949d5b871b335))

:named refinement_kinding_Tm_refine_8aa8974f647fe47543b949d5b871b335))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(309,4-311,43); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_8aa8974f647fe47543b949d5b871b335 @x2
@x3
@x4
@x5
@x6
@x7))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(635,71-635,97); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(not 
;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(and 
;; def=MiniParse.Spec.Combinators.fst(310,14-310,42); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(310,14-310,42); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(MiniParse.Spec.Base.injective_precond @x2
(MiniParse.Spec.Combinators.and_then_bare @x3
@x2
@x4
@x5)
@x6
@x7)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(311,13-311,42); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(311,13-311,42); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(MiniParse.Spec.Base.injective_postcond @x2
(MiniParse.Spec.Combinators.and_then_bare @x3
@x2
@x4
@x5)
@x6
@x7)
)
)

;; def=Prims.fst(635,86-635,95); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(not 
;; def=Prims.fst(635,86-635,95); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(= @x8
@x1)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_8aa8974f647fe47543b949d5b871b335.1))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_8aa8974f647fe47543b949d5b871b335 @x2
@x3
@x4
@x5
@x6
@x7)))
:qid refinement_interpretation_Tm_refine_8aa8974f647fe47543b949d5b871b335))

:named refinement_interpretation_Tm_refine_8aa8974f647fe47543b949d5b871b335))
;;;;;;;;;;;;;;;;haseq for Tm_refine_8aa8974f647fe47543b949d5b871b335
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(309,4-311,43); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_8aa8974f647fe47543b949d5b871b335 @x0
@x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_8aa8974f647fe47543b949d5b871b335 @x0
@x1
@x2
@x3
@x4
@x5))))
:qid haseqTm_refine_8aa8974f647fe47543b949d5b871b335))

:named haseqTm_refine_8aa8974f647fe47543b949d5b871b335))
;;;;;;;;;;;;;;;;b1: MiniParse.Spec.Base.bytes -> b2: MiniParse.Spec.Base.bytes   -> FStar.Pervasives.Lemma       (requires MiniParse.Spec.Base.injective_precond (and_then_bare p p') b1 b2)       (ensures MiniParse.Spec.Base.injective_postcond (and_then_bare p p') b1 b2)
(declare-fun Tm_arrow_30488de1b7b3dc27ab132f6a6215c06c (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_30488de1b7b3dc27ab132f6a6215c06c
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(308,12-311,43); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_arrow_30488de1b7b3dc27ab132f6a6215c06c @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_arrow_30488de1b7b3dc27ab132f6a6215c06c @x0
@x1
@x2
@x3)
Tm_type))
:qid kinding_Tm_arrow_30488de1b7b3dc27ab132f6a6215c06c))

:named kinding_Tm_arrow_30488de1b7b3dc27ab132f6a6215c06c))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(308,12-311,43); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_30488de1b7b3dc27ab132f6a6215c06c @x2
@x3
@x4
@x5))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_30488de1b7b3dc27ab132f6a6215c06c @x2
@x3
@x4
@x5)))
:qid MiniParse.Spec.Combinators_pre_typing_Tm_arrow_30488de1b7b3dc27ab132f6a6215c06c))

:named MiniParse.Spec.Combinators_pre_typing_Tm_arrow_30488de1b7b3dc27ab132f6a6215c06c))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_30488de1b7b3dc27ab132f6a6215c06c
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(308,12-311,43); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_30488de1b7b3dc27ab132f6a6215c06c @x1
@x2
@x3
@x4))
(and 
;; def=MiniParse.Spec.Combinators.fst(308,12-311,43); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(forall ((@x5 Term) (@x6 Term))
 (! (implies (and 
;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(310,14-310,42); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(MiniParse.Spec.Base.injective_precond @x4
(MiniParse.Spec.Combinators.and_then_bare @x3
@x4
@x2
@x1)
@x5
@x6)
)

(HasType @x5
MiniParse.Spec.Base.bytes)
(HasType @x6
MiniParse.Spec.Base.bytes))
(HasType (ApplyTT (ApplyTT @x0
@x5)
@x6)
(Tm_refine_8aa8974f647fe47543b949d5b871b335 @x4
@x3
@x2
@x1
@x5
@x6)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x5)
@x6))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_30488de1b7b3dc27ab132f6a6215c06c.1))

(IsTotFun @x0)

;; def=MiniParse.Spec.Combinators.fst(308,12-311,43); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(forall ((@x5 Term))
 (! (implies (HasType @x5
MiniParse.Spec.Base.bytes)
(IsTotFun (ApplyTT @x0
@x5)))
 

:pattern ((ApplyTT @x0
@x5))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_30488de1b7b3dc27ab132f6a6215c06c.2))
))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_30488de1b7b3dc27ab132f6a6215c06c @x1
@x2
@x3
@x4)))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_30488de1b7b3dc27ab132f6a6215c06c))

:named MiniParse.Spec.Combinators_interpretation_Tm_arrow_30488de1b7b3dc27ab132f6a6215c06c))

; Encoding query formula : forall (t: Type)
;   (t': Type)
;   (p: MiniParse.Spec.Base.bare_parser t)
;   (p': (_: t -> MiniParse.Spec.Base.bare_parser t')).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     MiniParse.Spec.Base.injective p /\ (forall (x: t). MiniParse.Spec.Base.injective (p' x)) /\
;     MiniParse.Spec.Combinators.and_then_cases_injective' p' /\
;     (forall (pure_result: Prims.unit).
;         MiniParse.Spec.Base.injective (MiniParse.Spec.Combinators.and_then_bare p p') ==>
;         p pure_result) ==>
;     (forall (b1: MiniParse.Spec.Base.bytes) (b2: MiniParse.Spec.Base.bytes).
;         (*  - Could not prove post-condition
; *)
;         forall (p: Prims.pure_post Prims.unit).
;           MiniParse.Spec.Base.injective_precond (MiniParse.Spec.Combinators.and_then_bare p p')
;             b1
;             b2 /\
;           (forall (pure_result: Prims.unit).
;               MiniParse.Spec.Base.injective_postcond (MiniParse.Spec.Combinators.and_then_bare p p')
;                 b1
;                 b2 ==>
;               p pure_result) ==>
;           (forall (any_result:
;               FStar.Pervasives.Native.option (t & MiniParse.Spec.Base.consumed_length b1)).
;               p b1 == any_result ==>
;               (~(Some? (p b1)) ==> Prims.l_False) /\
;               (forall (b: t) (b: MiniParse.Spec.Base.consumed_length b1).
;                   p b1 == FStar.Pervasives.Native.Some (b, b) ==>
;                   (forall (any_result:
;                       FStar.Pervasives.Native.option (t & MiniParse.Spec.Base.consumed_length b2)).
;                       p b2 == any_result ==>
;                       (~(Some? (p b2)) ==> Prims.l_False) /\
;                       (forall (b: t) (b: MiniParse.Spec.Base.consumed_length b2).
;                           p b2 == FStar.Pervasives.Native.Some (b, b) ==>
;                           b <= FStar.Seq.Base.length b1 &&
;                           FStar.Seq.Base.length b1 <= FStar.Seq.Base.length b1 /\
;                           (forall (return_val:
;                               j: Prims.nat{b <= j && j <= FStar.Seq.Base.length b1}).
;                               return_val == FStar.Seq.Base.length b1 ==>
;                               (forall (any_result: FStar.Seq.Base.seq MiniParse.Spec.Base.byte).
;                                   FStar.Seq.Base.slice b1 b (FStar.Seq.Base.length b1) == any_result ==>
;                                   b <= FStar.Seq.Base.length b2 &&
;                                   FStar.Seq.Base.length b2 <= FStar.Seq.Base.length b2 /\
;                                   (forall (return_val:
;                                       j: Prims.nat{b <= j && j <= FStar.Seq.Base.length b2}).
;                                       return_val == FStar.Seq.Base.length b2 ==>
;                                       (forall (any_result:
;                                           FStar.Seq.Base.seq MiniParse.Spec.Base.byte).
;                                           FStar.Seq.Base.slice b2 b (FStar.Seq.Base.length b2) ==
;                                           any_result ==>
;                                           Some? (p' b
;                                                 (FStar.Seq.Base.slice b1
;                                                     b
;                                                     (FStar.Seq.Base.length b1))) /\
;                                           (forall (pure_result: Prims.unit).
;                                               Some? (p' b
;                                                     (FStar.Seq.Base.slice b1
;                                                         b
;                                                         (FStar.Seq.Base.length b1))) ==>
;                                               Some? (p' b
;                                                     (FStar.Seq.Base.slice b2
;                                                         b
;                                                         (FStar.Seq.Base.length b2))) /\
;                                               (forall (pure_result: Prims.unit).
;                                                   Some? (p' b
;                                                         (FStar.Seq.Base.slice b2
;                                                             b
;                                                             (FStar.Seq.Base.length b2))) ==>
;                                                   MiniParse.Spec.Combinators.and_then_cases_injective_precond
;                                                     p'
;                                                     b
;                                                     b
;                                                     (FStar.Seq.Base.slice b1
;                                                         b
;                                                         (FStar.Seq.Base.length b1))
;                                                     (FStar.Seq.Base.slice b2
;                                                         b
;                                                         (FStar.Seq.Base.length b2)) /\
;                                                   (forall (pure_result: Prims.unit).
;                                                       MiniParse.Spec.Combinators.and_then_cases_injective_precond
;                                                         p'
;                                                         b
;                                                         b
;                                                         (FStar.Seq.Base.slice b1
;                                                             b
;                                                             (FStar.Seq.Base.length b1))
;                                                         (FStar.Seq.Base.slice b2
;                                                             b
;                                                             (FStar.Seq.Base.length b2)) ==>
;                                                       b == b /\
;                                                       (forall (pure_result: Prims.unit).
;                                                           b == b ==>
;                                                           MiniParse.Spec.Base.injective_precond p
;                                                             b1
;                                                             b2 /\
;                                                           (forall (pure_result: Prims.unit).
;                                                               MiniParse.Spec.Base.injective_precond p
;                                                                 b1
;                                                                 b2 ==>
;                                                               b == b /\
;                                                               (forall (pure_result: Prims.unit).
;                                                                   b == b ==>
;                                                                   MiniParse.Spec.Base.injective (p' b
;                                                                       ) /\
;                                                                   (forall (pure_result: Prims.unit).
;                                                                       MiniParse.Spec.Base.injective (
;                                                                           p' b) ==>
;                                                                       MiniParse.Spec.Base.injective_precond
;                                                                         (p' b)
;                                                                         (FStar.Seq.Base.slice b1
;                                                                             b
;                                                                             (FStar.Seq.Base.length b1
;                                                                               ))
;                                                                         (FStar.Seq.Base.slice b2
;                                                                             b
;                                                                             (FStar.Seq.Base.length b2
;                                                                               )) /\
;                                                                       (forall (pure_result:
;                                                                           Prims.unit).
;                                                                           MiniParse.Spec.Base.injective_precond
;                                                                             (p' b)
;                                                                             (FStar.Seq.Base.slice b1
;                                                                                 b
;                                                                                 (FStar.Seq.Base.length
;                                                                                     b1))
;                                                                             (FStar.Seq.Base.slice b2
;                                                                                 b
;                                                                                 (FStar.Seq.Base.length
;                                                                                     b2)) ==>
;                                                                           MiniParse.Spec.Base.injective_postcond
;                                                                             (p' b)
;                                                                             (FStar.Seq.Base.slice b1
;                                                                                 b
;                                                                                 (FStar.Seq.Base.length
;                                                                                     b1))
;                                                                             (FStar.Seq.Base.slice b2
;                                                                                 b
;                                                                                 (FStar.Seq.Base.length
;                                                                                     b2)) /\
;                                                                           (forall (pure_result:
;                                                                               Prims.unit).
;                                                                               MiniParse.Spec.Base.injective_postcond
;                                                                                 (p' b)
;                                                                                 (FStar.Seq.Base.slice
;                                                                                     b1
;                                                                                     b
;                                                                                     (FStar.Seq.Base.length
;                                                                                         b1))
;                                                                                 (FStar.Seq.Base.slice
;                                                                                     b2
;                                                                                     b
;                                                                                     (FStar.Seq.Base.length
;                                                                                         b2)) ==>
;                                                                               (forall (any_result:
;                                                                                   FStar.Pervasives.Native.option
;                                                                                     (t' &
;                                                                                       MiniParse.Spec.Base.consumed_length
;                                                                                         (FStar.Seq.Base.slice
;                                                                                             b1
;                                                                                             b
;                                                                                             (FStar.Seq.Base.length
;                                                                                                 b1))
;                                                                                     )).
;                                                                                   p' b
;                                                                                     (FStar.Seq.Base.slice
;                                                                                         b1
;                                                                                         b
;                                                                                         (FStar.Seq.Base.length
;                                                                                             b1)) ==
;                                                                                   any_result ==>
;                                                                                   (~(Some? (p' b
;                                                                                             (FStar.Seq.Base.slice
;                                                                                                 b1
;                                                                                                 b
;                                                                                                 (FStar.Seq.Base.length
;                                                                                                     b1
;                                                                                                   ))
;                                                                                         )) ==>
;                                                                                     Prims.l_False) /\
;                                                                                   (forall (b: t')
;                                                                                       (b:
;                                                                                       MiniParse.Spec.Base.consumed_length
;                                                                                         (FStar.Seq.Base.slice
;                                                                                             b1
;                                                                                             b
;                                                                                             (FStar.Seq.Base.length
;                                                                                                 b1)))
;                                                                                     .
;                                                                                       p' b
;                                                                                         (FStar.Seq.Base.slice
;                                                                                             b1
;                                                                                             b
;                                                                                             (FStar.Seq.Base.length
;                                                                                                 b1)) ==
;                                                                                       FStar.Pervasives.Native.Some
;                                                                                       (b,
;                                                                                       b) ==>
;                                                                                       (forall (any_result:
;                                                                                           FStar.Pervasives.Native.option
;                                                                                             (t' &
;                                                                                               MiniParse.Spec.Base.consumed_length
;                                                                                                 (FStar.Seq.Base.slice
;                                                                                                     b2
;                                                                                                     b
;                                                                                                     (
;                                                                                                       FStar.Seq.Base.length
;                                                                                                         b2
; 
;                                                                                                     )
;                                                                                                   )))
;                                                                                         .
;                                                                                           p' b
;                                                                                             (FStar.Seq.Base.slice
;                                                                                                 b2
;                                                                                                 b
;                                                                                                 (FStar.Seq.Base.length
;                                                                                                     b2
;                                                                                                   )) ==
;                                                                                           any_result ==>
;                                                                                           (~(Some? (p'
;                                                                                                     b
;                                                                                                     (
;                                                                                                       FStar.Seq.Base.slice
;                                                                                                         b2
;                                                                                                         b
;                                                                                                         (
;                                                                                                           FStar.Seq.Base.length
;                                                                                                             b2
; 
;                                                                                                         )
; 
;                                                                                                     )
;                                                                                                   )) ==>
;                                                                                             Prims.l_False
;                                                                                           ) /\
;                                                                                           (forall (b:
;                                                                                               t')
;                                                                                               (b:
;                                                                                               MiniParse.Spec.Base.consumed_length
;                                                                                                 (FStar.Seq.Base.slice
;                                                                                                     b2
;                                                                                                     b
;                                                                                                     (
;                                                                                                       FStar.Seq.Base.length
;                                                                                                         b2
; 
;                                                                                                     )
;                                                                                                   ))
;                                                                                             .
;                                                                                               p' b
;                                                                                                 (FStar.Seq.Base.slice
;                                                                                                     b2
;                                                                                                     b
;                                                                                                     (
;                                                                                                       FStar.Seq.Base.length
;                                                                                                         b2
; 
;                                                                                                     )
;                                                                                                   ) ==
;                                                                                               FStar.Pervasives.Native.Some
;                                                                                               (b,
;                                                                                               b) ==>
;                                                                                               b == b /\
;                                                                                               (forall
;                                                                                                   (pure_result:
;                                                                                                   Prims.unit)
;                                                                                                 .
;                                                                                                   b ==
;                                                                                                   b ==>
;                                                                                                   b +
;                                                                                                   b >=
;                                                                                                   0 /\
;                                                                                                   0 <=
;                                                                                                   b +
;                                                                                                   b &&
;                                                                                                   b +
;                                                                                                   b <=
;                                                                                                   FStar.Seq.Base.length
;                                                                                                     b1
;                                                                                                    /\
;                                                                                                   (forall
;                                                                                                       (return_val:
;                                                                                                       j:
;                                                                                                       Prims.nat
;                                                                                                         {
;                                                                                                           0 <=
;                                                                                                           j &&
;                                                                                                           j <=
;                                                                                                           FStar.Seq.Base.length
;                                                                                                             b1
; 
;                                                                                                         })
;                                                                                                     .
;                                                                                                       return_val ==
;                                                                                                       b +
;                                                                                                       b ==>
;                                                                                                       (
;                                                                                                         forall
;                                                                                                           (any_result:
;                                                                                                           FStar.Seq.Base.seq
;                                                                                                             MiniParse.Spec.Base.byte
;                                                                                                           )
;                                                                                                         .
;                                                                                                           FStar.Seq.Base.slice
;                                                                                                             b1
;                                                                                                             0
;                                                                                                             (
;                                                                                                               b +
;                                                                                                               b
;                                                                                                             )
;                                                                                                            ==
;                                                                                                           any_result ==>
;                                                                                                           (
;                                                                                                             b <=
;                                                                                                             FStar.Seq.Base.length
;                                                                                                               b1
;                                                                                                              ==>
;                                                                                                             0 <=
;                                                                                                             b /\
;                                                                                                             b <=
;                                                                                                             FStar.Seq.Base.length
;                                                                                                               (
;                                                                                                                 FStar.Seq.Base.slice
;                                                                                                                   b1
;                                                                                                                   0
;                                                                                                                   (
;                                                                                                                     b +
;                                                                                                                     b
;                                                                                                                   )
; 
;                                                                                                               )
; 
;                                                                                                           ) /\
;                                                                                                           (
;                                                                                                             forall
;                                                                                                               (any_result:
;                                                                                                               MiniParse.Spec.Base.consumed_length
;                                                                                                                 b1
;                                                                                                               )
;                                                                                                             .
;                                                                                                               b ==
;                                                                                                               any_result ==>
;                                                                                                               (
;                                                                                                                 forall
;                                                                                                                   (pure_result:
;                                                                                                                   Prims.unit)
;                                                                                                                 .
;                                                                                                                   FStar.Seq.Base.append
;                                                                                                                     (
;                                                                                                                       FStar.Pervasives.Native.fst
;                                                                                                                         (
;                                                                                                                           FStar.Seq.Properties.split
;                                                                                                                             (
;                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                 b1
;                                                                                                                                 0
;                                                                                                                                 (
;                                                                                                                                   b +
;                                                                                                                                   b
;                                                                                                                                 )
; 
;                                                                                                                             )
;                                                                                                                             b
; 
;                                                                                                                         )
; 
;                                                                                                                     )
;                                                                                                                     (
;                                                                                                                       FStar.Pervasives.Native.snd
;                                                                                                                         (
;                                                                                                                           FStar.Seq.Properties.split
;                                                                                                                             (
;                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                 b1
;                                                                                                                                 0
;                                                                                                                                 (
;                                                                                                                                   b +
;                                                                                                                                   b
;                                                                                                                                 )
; 
;                                                                                                                             )
;                                                                                                                             b
; 
;                                                                                                                         )
; 
;                                                                                                                     )
;                                                                                                                    ==
;                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                     b1
;                                                                                                                     0
;                                                                                                                     (
;                                                                                                                       b +
;                                                                                                                       b
;                                                                                                                     )
;                                                                                                                    ==>
;                                                                                                                   b +
;                                                                                                                   b >=
;                                                                                                                   0 /\
;                                                                                                                   0 <=
;                                                                                                                   b +
;                                                                                                                   b &&
;                                                                                                                   b +
;                                                                                                                   b <=
;                                                                                                                   FStar.Seq.Base.length
;                                                                                                                     b2
;                                                                                                                    /\
;                                                                                                                   (
;                                                                                                                     forall
;                                                                                                                       (return_val:
;                                                                                                                       j:
;                                                                                                                       Prims.nat
;                                                                                                                         {
;                                                                                                                           0 <=
;                                                                                                                           j &&
;                                                                                                                           j <=
;                                                                                                                           FStar.Seq.Base.length
;                                                                                                                             b2
; 
;                                                                                                                         })
;                                                                                                                     .
;                                                                                                                       return_val ==
;                                                                                                                       b +
;                                                                                                                       b ==>
;                                                                                                                       (
;                                                                                                                         forall
;                                                                                                                           (any_result:
;                                                                                                                           FStar.Seq.Base.seq
;                                                                                                                             MiniParse.Spec.Base.byte
;                                                                                                                           )
;                                                                                                                         .
;                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                             b2
;                                                                                                                             0
;                                                                                                                             (
;                                                                                                                               b +
;                                                                                                                               b
;                                                                                                                             )
;                                                                                                                            ==
;                                                                                                                           any_result ==>
;                                                                                                                           (
;                                                                                                                             b <=
;                                                                                                                             FStar.Seq.Base.length
;                                                                                                                               b1
;                                                                                                                              ==>
;                                                                                                                             0 <=
;                                                                                                                             b /\
;                                                                                                                             b <=
;                                                                                                                             FStar.Seq.Base.length
;                                                                                                                               (
;                                                                                                                                 FStar.Seq.Base.slice
;                                                                                                                                   b2
;                                                                                                                                   0
;                                                                                                                                   (
;                                                                                                                                     b +
;                                                                                                                                     b
;                                                                                                                                   )
; 
;                                                                                                                               )
; 
;                                                                                                                           ) /\
;                                                                                                                           (
;                                                                                                                             forall
;                                                                                                                               (any_result:
;                                                                                                                               MiniParse.Spec.Base.consumed_length
;                                                                                                                                 b1
;                                                                                                                               )
;                                                                                                                             .
;                                                                                                                               b ==
;                                                                                                                               any_result ==>
;                                                                                                                               (
;                                                                                                                                 forall
;                                                                                                                                   (pure_result:
;                                                                                                                                   Prims.unit)
;                                                                                                                                 .
;                                                                                                                                   FStar.Seq.Base.append
;                                                                                                                                     (
;                                                                                                                                       FStar.Pervasives.Native.fst
;                                                                                                                                         (
;                                                                                                                                           FStar.Seq.Properties.split
;                                                                                                                                             (
;                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                 b2
;                                                                                                                                                 0
;                                                                                                                                                 (
;                                                                                                                                                   b +
;                                                                                                                                                   b
;                                                                                                                                                 )
; 
;                                                                                                                                             )
;                                                                                                                                             b
; 
;                                                                                                                                         )
; 
;                                                                                                                                     )
;                                                                                                                                     (
;                                                                                                                                       FStar.Pervasives.Native.snd
;                                                                                                                                         (
;                                                                                                                                           FStar.Seq.Properties.split
;                                                                                                                                             (
;                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                 b2
;                                                                                                                                                 0
;                                                                                                                                                 (
;                                                                                                                                                   b +
;                                                                                                                                                   b
;                                                                                                                                                 )
; 
;                                                                                                                                             )
;                                                                                                                                             b
; 
;                                                                                                                                         )
; 
;                                                                                                                                     )
;                                                                                                                                    ==
;                                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                                     b2
;                                                                                                                                     0
;                                                                                                                                     (
;                                                                                                                                       b +
;                                                                                                                                       b
;                                                                                                                                     )
;                                                                                                                                    ==>
;                                                                                                                                   MiniParse.Spec.Base.injective_postcond
;                                                                                                                                     (
;                                                                                                                                       MiniParse.Spec.Combinators.and_then_bare
;                                                                                                                                         p
;                                                                                                                                         p'
; 
;                                                                                                                                     )
;                                                                                                                                     b1
;                                                                                                                                     b2
;                                                                                                                                    /\
;                                                                                                                                   (
;                                                                                                                                     forall
;                                                                                                                                       (pure_result:
;                                                                                                                                       Prims.unit)
;                                                                                                                                     .
;                                                                                                                                       MiniParse.Spec.Base.injective_postcond
;                                                                                                                                         (
;                                                                                                                                           MiniParse.Spec.Combinators.and_then_bare
;                                                                                                                                             p
;                                                                                                                                             p'
; 
;                                                                                                                                         )
;                                                                                                                                         b1
;                                                                                                                                         b2
;                                                                                                                                        ==>
;                                                                                                                                       p
;                                                                                                                                         pure_result
; 
;                                                                                                                                   )
;                                                                                                                               )
;                                                                                                                           )
;                                                                                                                       )
;                                                                                                                   )
;                                                                                                               )
;                                                                                                           )
;                                                                                                       )
;                                                                                                   ))
;                                                                                           ))))))))))
;                                                   )))))))))))) /\
;     (forall (any_result:
;         (b1: MiniParse.Spec.Base.bytes -> b2: MiniParse.Spec.Base.bytes
;             -> FStar.Pervasives.Lemma
;                 (requires
;                   MiniParse.Spec.Base.injective_precond (MiniParse.Spec.Combinators.and_then_bare p
;                         p')
;                     b1
;                     b2)
;                 (ensures
;                   MiniParse.Spec.Base.injective_postcond (MiniParse.Spec.Combinators.and_then_bare p
;                         p')
;                     b1
;                     b2)))
;         (pure_result: Prims.unit).
;         (forall (x: MiniParse.Spec.Base.bytes) (y: MiniParse.Spec.Base.bytes).
;             MiniParse.Spec.Base.injective_precond (MiniParse.Spec.Combinators.and_then_bare p p')
;               x
;               y ==>
;             MiniParse.Spec.Base.injective_postcond (MiniParse.Spec.Combinators.and_then_bare p p')
;               x
;               y) ==>
;         p pure_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let and_then_injective`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(MiniParse.Spec.Base.bare_parser @x0))
(HasType @x3
(Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc @x1
@x0)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(297,4-297,15); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(297,4-297,15); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(MiniParse.Spec.Base.injective @x0
@x2)
)


;; def=MiniParse.Spec.Combinators.fst(298,4-298,38); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(forall ((@x5 Term))
 (! (implies (HasType @x5
@x0)

;; def=MiniParse.Spec.Combinators.fst(298,21-298,37); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(298,21-298,37); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(MiniParse.Spec.Base.injective @x1
(ApplyTT @x3
@x5))
)
)
 
;;no pats
:qid @query.2))


;; def=MiniParse.Spec.Combinators.fst(299,4-299,32); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(299,4-299,32); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(MiniParse.Spec.Combinators.and_then_cases_injective_ @x0
@x1
@x3)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(forall ((@x5 Term))
 (! (implies (and (or label_1
(HasType @x5
Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(301,11-303,3); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(or label_2

;; def=MiniParse.Spec.Combinators.fst(301,11-303,3); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(301,11-303,3); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(MiniParse.Spec.Base.injective @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3))
)
)
)

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(ApplyTT @x4
@x5)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(ApplyTT @x4
@x5)
)
)
:qid @query.3))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(and 
;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(forall ((@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x5
MiniParse.Spec.Base.bytes)
(HasType @x6
MiniParse.Spec.Base.bytes))

;; def=Prims.fst(406,51-406,91); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(Prims.pure_post Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(310,14-310,42); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(310,14-310,42); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(MiniParse.Spec.Base.injective_precond @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x5
@x6)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(forall ((@x8 Term))
 (! (implies (and (or label_3
(HasType @x8
Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(311,13-311,42); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(or label_4

;; def=MiniParse.Spec.Combinators.fst(311,13-311,42); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(311,13-311,42); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(MiniParse.Spec.Base.injective_postcond @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x5
@x6)
)
)
)

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(ApplyTT @x7
@x8)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(ApplyTT @x7
@x8)
)
)
:qid @query.6))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5))))

;; def=MiniParse.Spec.Combinators.fst(312,9-312,32); use=MiniParse.Spec.Combinators.fst(312,9-312,32)
(= (ApplyTT @x2
@x5)
@x8)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(312,9-312,24); use=MiniParse.Spec.Combinators.fst(312,9-312,24)
(not 
;; def=MiniParse.Spec.Combinators.fst(312,9-312,24); use=MiniParse.Spec.Combinators.fst(312,9-312,24)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5))
(ApplyTT @x2
@x5)))
)

label_5)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(forall ((@x9 Term))
 (! (implies (HasType @x9
@x0)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(MiniParse.Spec.Base.consumed_length @x5))

;; def=MiniParse.Spec.Combinators.fst(312,9-312,24); use=MiniParse.Spec.Combinators.fst(312,9-312,24)
(= (ApplyTT @x2
@x5)
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5))
(FStar.Pervasives.Native.Mktuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5)
@x9
@x10)))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x6))))

;; def=MiniParse.Spec.Combinators.fst(313,9-313,32); use=MiniParse.Spec.Combinators.fst(313,9-313,32)
(= (ApplyTT @x2
@x6)
@x11)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(313,9-313,24); use=MiniParse.Spec.Combinators.fst(313,9-313,24)
(not 
;; def=MiniParse.Spec.Combinators.fst(313,9-313,24); use=MiniParse.Spec.Combinators.fst(313,9-313,24)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x6))
(ApplyTT @x2
@x6)))
)

label_6)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(forall ((@x12 Term))
 (! (implies (HasType @x12
@x0)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(MiniParse.Spec.Base.consumed_length @x6))

;; def=MiniParse.Spec.Combinators.fst(313,9-313,24); use=MiniParse.Spec.Combinators.fst(313,9-313,24)
(= (ApplyTT @x2
@x6)
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x6))
(FStar.Pervasives.Native.Mktuple2 @x0
(MiniParse.Spec.Base.consumed_length @x6)
@x12
@x13)))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(and 
;; def=MiniParse.Spec.Combinators.fst(314,40-314,55); use=MiniParse.Spec.Combinators.fst(314,40-314,55)
(or label_7
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x10
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))


;; def=MiniParse.Spec.Combinators.fst(314,40-314,55); use=MiniParse.Spec.Combinators.fst(314,40-314,55)
(or label_8
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))


;; def=Prims.fst(356,2-356,58); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
(Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x10
@x5))

;; def=Prims.fst(356,26-356,41); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(= @x14
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=MiniParse.Spec.Combinators.fst(314,8-314,55); use=MiniParse.Spec.Combinators.fst(314,8-314,55)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x10
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
@x15)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(and 
;; def=MiniParse.Spec.Combinators.fst(315,40-315,55); use=MiniParse.Spec.Combinators.fst(315,40-315,55)
(or label_9
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x13
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x6))))


;; def=MiniParse.Spec.Combinators.fst(315,40-315,55); use=MiniParse.Spec.Combinators.fst(315,40-315,55)
(or label_10
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x6)
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x6))))


;; def=Prims.fst(356,2-356,58); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
(Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x13
@x6))

;; def=Prims.fst(356,26-356,41); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(= @x16
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x6))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=MiniParse.Spec.Combinators.fst(315,8-315,55); use=MiniParse.Spec.Combinators.fst(315,8-315,55)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x6
@x13
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x6))
@x17)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(316,4-316,10)
(and 
;; def=MiniParse.Spec.Combinators.fst(316,11-316,32); use=MiniParse.Spec.Combinators.fst(316,4-316,10)
(or label_11

;; def=MiniParse.Spec.Combinators.fst(316,11-316,32); use=MiniParse.Spec.Combinators.fst(316,4-316,10)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x10
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
(ApplyTT (ApplyTT @x3
@x9)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x10
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(316,4-316,10)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(316,11-316,32); use=MiniParse.Spec.Combinators.fst(316,4-316,10)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x10
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
(ApplyTT (ApplyTT @x3
@x9)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x10
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(317,4-317,10)
(and 
;; def=MiniParse.Spec.Combinators.fst(317,11-317,32); use=MiniParse.Spec.Combinators.fst(317,4-317,10)
(or label_12

;; def=MiniParse.Spec.Combinators.fst(317,11-317,32); use=MiniParse.Spec.Combinators.fst(317,4-317,10)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x6
@x13
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x6))))
(ApplyTT (ApplyTT @x3
@x12)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x6
@x13
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x6)))))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(317,4-317,10)
(forall ((@x19 Term))
 (! (implies (and (HasType @x19
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(317,11-317,32); use=MiniParse.Spec.Combinators.fst(317,4-317,10)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x6
@x13
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x6))))
(ApplyTT (ApplyTT @x3
@x12)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x6
@x13
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x6)))))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(318,4-318,10)
(and 
;; def=MiniParse.Spec.Combinators.fst(318,11-318,62); use=MiniParse.Spec.Combinators.fst(318,4-318,10)
(or label_13

;; def=MiniParse.Spec.Combinators.fst(318,11-318,62); use=MiniParse.Spec.Combinators.fst(318,4-318,10)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(318,11-318,62); use=MiniParse.Spec.Combinators.fst(318,4-318,10)
(MiniParse.Spec.Combinators.and_then_cases_injective_precond @x0
@x1
@x3
@x9
@x12
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x10
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x6
@x13
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x6)))
)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(318,4-318,10)
(forall ((@x20 Term))
 (! (implies (and (HasType @x20
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(318,11-318,62); use=MiniParse.Spec.Combinators.fst(318,4-318,10)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(318,11-318,62); use=MiniParse.Spec.Combinators.fst(318,4-318,10)
(MiniParse.Spec.Combinators.and_then_cases_injective_precond @x0
@x1
@x3
@x9
@x12
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x10
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x6
@x13
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x6)))
)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(319,4-319,10)
(and 
;; def=MiniParse.Spec.Combinators.fst(319,11-319,21); use=MiniParse.Spec.Combinators.fst(319,4-319,10)
(or label_14

;; def=MiniParse.Spec.Combinators.fst(319,11-319,21); use=MiniParse.Spec.Combinators.fst(319,4-319,10)
(= @x9
@x12)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(319,4-319,10)
(forall ((@x21 Term))
 (! (implies (and (HasType @x21
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(319,11-319,21); use=MiniParse.Spec.Combinators.fst(319,4-319,10)
(= @x9
@x12)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(320,4-320,10)
(and 
;; def=MiniParse.Spec.Combinators.fst(320,11-320,38); use=MiniParse.Spec.Combinators.fst(320,4-320,10)
(or label_15

;; def=MiniParse.Spec.Combinators.fst(320,11-320,38); use=MiniParse.Spec.Combinators.fst(320,4-320,10)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(320,11-320,38); use=MiniParse.Spec.Combinators.fst(320,4-320,10)
(MiniParse.Spec.Base.injective_precond @x0
@x2
@x5
@x6)
)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(320,4-320,10)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(320,11-320,38); use=MiniParse.Spec.Combinators.fst(320,4-320,10)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(320,11-320,38); use=MiniParse.Spec.Combinators.fst(320,4-320,10)
(MiniParse.Spec.Base.injective_precond @x0
@x2
@x5
@x6)
)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(321,4-321,10)
(and 
;; def=MiniParse.Spec.Combinators.fst(321,11-321,43); use=MiniParse.Spec.Combinators.fst(321,4-321,10)
(or label_16

;; def=MiniParse.Spec.Combinators.fst(321,11-321,43); use=MiniParse.Spec.Combinators.fst(321,4-321,10)
(= @x10
@x13)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(321,4-321,10)
(forall ((@x23 Term))
 (! (implies (and (HasType @x23
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(321,11-321,43); use=MiniParse.Spec.Combinators.fst(321,4-321,10)
(= @x10
@x13)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(322,4-322,10)
(and 
;; def=MiniParse.Spec.Combinators.fst(322,11-322,30); use=MiniParse.Spec.Combinators.fst(322,4-322,10)
(or label_17

;; def=MiniParse.Spec.Combinators.fst(322,11-322,30); use=MiniParse.Spec.Combinators.fst(322,4-322,10)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(322,11-322,30); use=MiniParse.Spec.Combinators.fst(322,4-322,10)
(MiniParse.Spec.Base.injective @x1
(ApplyTT @x3
@x9))
)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(322,4-322,10)
(forall ((@x24 Term))
 (! (implies (and (HasType @x24
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(322,11-322,30); use=MiniParse.Spec.Combinators.fst(322,4-322,10)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(322,11-322,30); use=MiniParse.Spec.Combinators.fst(322,4-322,10)
(MiniParse.Spec.Base.injective @x1
(ApplyTT @x3
@x9))
)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(323,4-323,10)
(and 
;; def=MiniParse.Spec.Combinators.fst(323,11-323,46); use=MiniParse.Spec.Combinators.fst(323,4-323,10)
(or label_18

;; def=MiniParse.Spec.Combinators.fst(323,11-323,46); use=MiniParse.Spec.Combinators.fst(323,4-323,10)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(323,11-323,46); use=MiniParse.Spec.Combinators.fst(323,4-323,10)
(MiniParse.Spec.Base.injective_precond @x1
(ApplyTT @x3
@x9)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x10
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x6
@x13
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x6)))
)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(323,4-323,10)
(forall ((@x25 Term))
 (! (implies (and (HasType @x25
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(323,11-323,46); use=MiniParse.Spec.Combinators.fst(323,4-323,10)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(323,11-323,46); use=MiniParse.Spec.Combinators.fst(323,4-323,10)
(MiniParse.Spec.Base.injective_precond @x1
(ApplyTT @x3
@x9)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x10
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x6
@x13
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x6)))
)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(324,4-324,10)
(and 
;; def=MiniParse.Spec.Combinators.fst(324,11-324,47); use=MiniParse.Spec.Combinators.fst(324,4-324,10)
(or label_19

;; def=MiniParse.Spec.Combinators.fst(324,11-324,47); use=MiniParse.Spec.Combinators.fst(324,4-324,10)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(324,11-324,47); use=MiniParse.Spec.Combinators.fst(324,4-324,10)
(MiniParse.Spec.Base.injective_postcond @x1
(ApplyTT @x3
@x9)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x10
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x6
@x13
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x6)))
)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(324,4-324,10)
(forall ((@x26 Term))
 (! (implies (and (HasType @x26
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(324,11-324,47); use=MiniParse.Spec.Combinators.fst(324,4-324,10)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(324,11-324,47); use=MiniParse.Spec.Combinators.fst(324,4-324,10)
(MiniParse.Spec.Base.injective_postcond @x1
(ApplyTT @x3
@x9)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x10
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x6
@x13
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x6)))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(forall ((@x27 Term))
 (! (implies (and (HasType @x27
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x10
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))))

;; def=MiniParse.Spec.Combinators.fst(325,9-325,39); use=MiniParse.Spec.Combinators.fst(325,9-325,39)
(= (ApplyTT (ApplyTT @x3
@x9)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x10
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))
@x27)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(325,9-325,24); use=MiniParse.Spec.Combinators.fst(325,9-325,24)
(not 
;; def=MiniParse.Spec.Combinators.fst(325,9-325,24); use=MiniParse.Spec.Combinators.fst(325,9-325,24)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x10
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
(ApplyTT (ApplyTT @x3
@x9)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x10
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))))
)

label_20)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(forall ((@x28 Term))
 (! (implies (HasType @x28
@x1)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(forall ((@x29 Term))
 (! (implies (and (HasType @x29
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x10
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))

;; def=MiniParse.Spec.Combinators.fst(325,9-325,24); use=MiniParse.Spec.Combinators.fst(325,9-325,24)
(= (ApplyTT (ApplyTT @x3
@x9)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x10
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x10
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
(FStar.Pervasives.Native.Mktuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x10
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))
@x28
@x29)))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(forall ((@x30 Term))
 (! (implies (and (HasType @x30
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x6
@x13
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x6))))))

;; def=MiniParse.Spec.Combinators.fst(326,9-326,39); use=MiniParse.Spec.Combinators.fst(326,9-326,39)
(= (ApplyTT (ApplyTT @x3
@x12)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x6
@x13
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x6)))
@x30)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(326,9-326,24); use=MiniParse.Spec.Combinators.fst(326,9-326,24)
(not 
;; def=MiniParse.Spec.Combinators.fst(326,9-326,24); use=MiniParse.Spec.Combinators.fst(326,9-326,24)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x6
@x13
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x6))))
(ApplyTT (ApplyTT @x3
@x12)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x6
@x13
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x6)))))
)

label_21)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(forall ((@x31 Term))
 (! (implies (HasType @x31
@x1)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(forall ((@x32 Term))
 (! (implies (and (HasType @x32
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x6
@x13
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x6))))

;; def=MiniParse.Spec.Combinators.fst(326,9-326,24); use=MiniParse.Spec.Combinators.fst(326,9-326,24)
(= (ApplyTT (ApplyTT @x3
@x12)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x6
@x13
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x6)))
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x6
@x13
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x6))))
(FStar.Pervasives.Native.Mktuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x6
@x13
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x6)))
@x31
@x32)))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(327,4-327,10)
(and 
;; def=MiniParse.Spec.Combinators.fst(327,11-327,45); use=MiniParse.Spec.Combinators.fst(327,4-327,10)
(or label_22

;; def=MiniParse.Spec.Combinators.fst(327,11-327,45); use=MiniParse.Spec.Combinators.fst(327,4-327,10)
(= @x29
@x32)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(327,4-327,10)
(forall ((@x33 Term))
 (! (implies (and (HasType @x33
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(327,11-327,45); use=MiniParse.Spec.Combinators.fst(327,4-327,10)
(= @x29
@x32)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(and 
;; def=Prims.fst(680,18-680,24); use=MiniParse.Spec.Combinators.fst(328,36-328,50)
(or label_23

;; def=Prims.fst(680,18-680,24); use=MiniParse.Spec.Combinators.fst(328,36-328,50)
(>= (BoxInt_proj_0 (Prims.op_Addition @x10
@x29))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=MiniParse.Spec.Combinators.fst(328,36-328,50); use=MiniParse.Spec.Combinators.fst(328,36-328,50)
(or label_24
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
(Prims.op_Addition @x10
@x29))))


;; def=MiniParse.Spec.Combinators.fst(328,36-328,50); use=MiniParse.Spec.Combinators.fst(328,36-328,50)
(or label_25
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (Prims.op_Addition @x10
@x29)
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))


;; def=Prims.fst(356,2-356,58); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(forall ((@x34 Term))
 (! (implies (and (HasType @x34
(Tm_refine_6a960d0fa25c92f70750ff4a0270d63a @x5))

;; def=Prims.fst(356,26-356,41); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(= @x34
(Prims.op_Addition @x10
@x29))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(forall ((@x35 Term))
 (! (implies (and (HasType @x35
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=FStar.Seq.Properties.fsti(59,29-59,30); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
(Prims.op_Addition @x10
@x29))
@x35)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(328,52-328,56)
(<= (BoxInt_proj_0 @x10)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))


;; def=FStar.Seq.Properties.fsti(59,46-59,71); use=MiniParse.Spec.Combinators.fst(328,52-328,56)
(and 
;; def=FStar.Seq.Properties.fsti(59,47-59,53); use=MiniParse.Spec.Combinators.fst(328,52-328,56)
(or label_26

;; def=FStar.Seq.Properties.fsti(59,47-59,53); use=MiniParse.Spec.Combinators.fst(328,52-328,56)
(<= (BoxInt_proj_0 (BoxInt 0))
(BoxInt_proj_0 @x10))
)


;; def=FStar.Seq.Properties.fsti(59,57-59,70); use=MiniParse.Spec.Combinators.fst(328,52-328,56)
(or label_27

;; def=FStar.Seq.Properties.fsti(59,57-59,70); use=MiniParse.Spec.Combinators.fst(328,52-328,56)
(<= (BoxInt_proj_0 @x10)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
(Prims.op_Addition @x10
@x29)))))
)
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(forall ((@x36 Term))
 (! (implies (and (HasType @x36
(MiniParse.Spec.Base.consumed_length @x5))

;; def=FStar.Seq.Properties.fsti(59,40-59,41); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(= @x10
@x36)
)

;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(328,8-328,19)
(forall ((@x37 Term))
 (! (implies (and (HasType @x37
Prims.unit)

;; def=FStar.Seq.Properties.fsti(60,11-60,60); use=MiniParse.Spec.Combinators.fst(328,8-328,19)
(= (FStar.Seq.Base.append (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Pervasives.Native.fst (FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value))
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value))
(FStar.Seq.Properties.split (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
(Prims.op_Addition @x10
@x29))
@x10))
(FStar.Pervasives.Native.snd (FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value))
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value))
(FStar.Seq.Properties.split (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
(Prims.op_Addition @x10
@x29))
@x10)))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
(Prims.op_Addition @x10
@x29)))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(and 
;; def=Prims.fst(680,18-680,24); use=MiniParse.Spec.Combinators.fst(329,36-329,50)
(or label_28

;; def=Prims.fst(680,18-680,24); use=MiniParse.Spec.Combinators.fst(329,36-329,50)
(>= (BoxInt_proj_0 (Prims.op_Addition @x13
@x32))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=MiniParse.Spec.Combinators.fst(329,36-329,50); use=MiniParse.Spec.Combinators.fst(329,36-329,50)
(or label_29
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
(Prims.op_Addition @x13
@x32))))


;; def=MiniParse.Spec.Combinators.fst(329,36-329,50); use=MiniParse.Spec.Combinators.fst(329,36-329,50)
(or label_30
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (Prims.op_Addition @x13
@x32)
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x6))))


;; def=Prims.fst(356,2-356,58); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(forall ((@x38 Term))
 (! (implies (and (HasType @x38
(Tm_refine_6a960d0fa25c92f70750ff4a0270d63a @x6))

;; def=Prims.fst(356,26-356,41); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(= @x38
(Prims.op_Addition @x13
@x32))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(forall ((@x39 Term))
 (! (implies (and (HasType @x39
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=FStar.Seq.Properties.fsti(59,29-59,30); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x6
(BoxInt 0)
(Prims.op_Addition @x13
@x32))
@x39)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(329,52-329,56)
(<= (BoxInt_proj_0 @x10)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))


;; def=FStar.Seq.Properties.fsti(59,46-59,71); use=MiniParse.Spec.Combinators.fst(329,52-329,56)
(and 
;; def=FStar.Seq.Properties.fsti(59,47-59,53); use=MiniParse.Spec.Combinators.fst(329,52-329,56)
(or label_31

;; def=FStar.Seq.Properties.fsti(59,47-59,53); use=MiniParse.Spec.Combinators.fst(329,52-329,56)
(<= (BoxInt_proj_0 (BoxInt 0))
(BoxInt_proj_0 @x10))
)


;; def=FStar.Seq.Properties.fsti(59,57-59,70); use=MiniParse.Spec.Combinators.fst(329,52-329,56)
(or label_32

;; def=FStar.Seq.Properties.fsti(59,57-59,70); use=MiniParse.Spec.Combinators.fst(329,52-329,56)
(<= (BoxInt_proj_0 @x10)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x6
(BoxInt 0)
(Prims.op_Addition @x13
@x32)))))
)
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(forall ((@x40 Term))
 (! (implies (and (HasType @x40
(MiniParse.Spec.Base.consumed_length @x5))

;; def=FStar.Seq.Properties.fsti(59,40-59,41); use=MiniParse.Spec.Combinators.fst(312,3-330,40)
(= @x10
@x40)
)

;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(329,8-329,19)
(forall ((@x41 Term))
 (! (implies (and (HasType @x41
Prims.unit)

;; def=FStar.Seq.Properties.fsti(60,11-60,60); use=MiniParse.Spec.Combinators.fst(329,8-329,19)
(= (FStar.Seq.Base.append (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Pervasives.Native.fst (FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value))
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value))
(FStar.Seq.Properties.split (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x6
(BoxInt 0)
(Prims.op_Addition @x13
@x32))
@x10))
(FStar.Pervasives.Native.snd (FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value))
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value))
(FStar.Seq.Properties.split (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x6
(BoxInt 0)
(Prims.op_Addition @x13
@x32))
@x10)))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x6
(BoxInt 0)
(Prims.op_Addition @x13
@x32)))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(330,4-330,10)
(and 
;; def=MiniParse.Spec.Combinators.fst(330,11-330,40); use=MiniParse.Spec.Combinators.fst(330,4-330,10)
(or label_33

;; def=MiniParse.Spec.Combinators.fst(330,11-330,40); use=MiniParse.Spec.Combinators.fst(330,4-330,10)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(330,11-330,40); use=MiniParse.Spec.Combinators.fst(330,4-330,10)
(MiniParse.Spec.Base.injective_postcond @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x5
@x6)
)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(330,4-330,10)
(forall ((@x42 Term))
 (! (implies (and (HasType @x42
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(330,11-330,40); use=MiniParse.Spec.Combinators.fst(330,4-330,10)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(330,11-330,40); use=MiniParse.Spec.Combinators.fst(330,4-330,10)
(MiniParse.Spec.Base.injective_postcond @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x5
@x6)
)
)

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(330,4-330,10)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(330,4-330,10)
(ApplyTT @x7
@x42)
)
)
 
;;no pats
:qid @query.41))
)
)
 
;;no pats
:qid @query.40))
)
 
;;no pats
:qid @query.39))
)
)
 
;;no pats
:qid @query.38))
)
 
;;no pats
:qid @query.37))
)
)
 
;;no pats
:qid @query.36))
)
 
;;no pats
:qid @query.35))
)
)
 
;;no pats
:qid @query.34))
)
 
;;no pats
:qid @query.33))
)
)
 
;;no pats
:qid @query.32))
)
)
 
;;no pats
:qid @query.31))
)
 
;;no pats
:qid @query.30))
)
)
 
;;no pats
:qid @query.29))
)
 
;;no pats
:qid @query.28))
)
 
;;no pats
:qid @query.27))
)
)
 
;;no pats
:qid @query.26))
)
 
;;no pats
:qid @query.25))
)
)
 
;;no pats
:qid @query.24))
)
)
 
;;no pats
:qid @query.23))
)
)
 
;;no pats
:qid @query.22))
)
)
 
;;no pats
:qid @query.21))
)
)
 
;;no pats
:qid @query.20))
)
)
 
;;no pats
:qid @query.19))
)
)
 
;;no pats
:qid @query.18))
)
)
 
;;no pats
:qid @query.17))
)
)
 
;;no pats
:qid @query.16))
)
 
;;no pats
:qid @query.15))
)
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))
)
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))


;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(305,36-332,67)
(forall ((@x5 Term))
 (! (implies (HasType @x5
(Tm_arrow_30488de1b7b3dc27ab132f6a6215c06c @x3
@x2
@x0
@x1))

;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(332,12-332,26)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.unit)

;; def=FStar.Classical.fsti(277,12-277,43); use=MiniParse.Spec.Combinators.fst(332,12-332,26)
(forall ((@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x7
MiniParse.Spec.Base.bytes)
(HasType @x8
MiniParse.Spec.Base.bytes)

;; def=FStar.Classical.fsti(83,13-83,16); use=MiniParse.Spec.Combinators.fst(332,12-332,26)
(Valid 
;; def=FStar.Classical.fsti(83,13-83,16); use=MiniParse.Spec.Combinators.fst(332,12-332,26)
(MiniParse.Spec.Base.injective_precond @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x7
@x8)
)
)

;; def=FStar.Classical.fsti(83,21-83,24); use=MiniParse.Spec.Combinators.fst(332,12-332,26)
(Valid 
;; def=FStar.Classical.fsti(83,21-83,24); use=MiniParse.Spec.Combinators.fst(332,12-332,26)
(MiniParse.Spec.Base.injective_postcond @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x7
@x8)
)
)
 
;;no pats
:qid @query.44))
)

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(332,12-332,26)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(332,12-332,26)
(ApplyTT @x4
@x6)
)
)
 
;;no pats
:qid @query.43))
)
 
;;no pats
:qid @query.42))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 8714496)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_33")
(eval label_33)
(echo "label_32")
(eval label_32)
(echo "label_31")
(eval label_31)
(echo "label_30")
(eval label_30)
(echo "label_29")
(eval label_29)
(echo "label_28")
(eval label_28)
(echo "label_27")
(eval label_27)
(echo "label_26")
(eval label_26)
(echo "label_25")
(eval label_25)
(echo "label_24")
(eval label_24)
(echo "label_23")
(eval label_23)
(echo "label_22")
(eval label_22)
(echo "label_21")
(eval label_21)
(echo "label_20")
(eval label_20)
(echo "label_19")
(eval label_19)
(echo "label_18")
(eval label_18)
(echo "label_17")
(eval label_17)
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.and_then_injective, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, MiniParse.Spec.Base_interpretation_Tm_ghost_arrow_84eb031c18bd35e3c76ba4886d9ede0b, MiniParse.Spec.Combinators_interpretation_Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc, bool_inversion, constructor_distinct_FStar.Pervasives.Native.None, constructor_distinct_FStar.Pervasives.Native.Some, data_elim_FStar.Pervasives.Native.Some, disc_equation_FStar.Pervasives.Native.None, disc_equation_FStar.Pervasives.Native.Some, equation_FStar.Pervasives.Native.fst, equation_FStar.Pervasives.Native.snd, equation_FStar.Seq.Properties.split, equation_MiniParse.Spec.Base.bare_parser, equation_MiniParse.Spec.Base.bparse, equation_MiniParse.Spec.Base.byte, equation_MiniParse.Spec.Base.bytes, equation_MiniParse.Spec.Base.consumed_length, equation_MiniParse.Spec.Base.injective, equation_MiniParse.Spec.Base.injective_postcond, equation_MiniParse.Spec.Base.injective_precond, equation_MiniParse.Spec.Combinators.and_then_bare, equation_MiniParse.Spec.Combinators.and_then_cases_injective_, equation_MiniParse.Spec.Combinators.and_then_cases_injective_precond, equation_Prims.eqtype, equation_Prims.nat, fuel_guarded_inversion_FStar.Pervasives.Native.option, fuel_guarded_inversion_FStar.Pervasives.Native.tuple2, int_inversion, int_typing, interpretation_Tm_abs_5a56d64ec9685d0352c27644697b3e56, kinding_FStar.Pervasives.Native.tuple2@tok, lemma_FStar.Pervasives.invertOption, lemma_FStar.Seq.Base.lemma_len_slice, lemma_FStar.Seq.Properties.slice_slice, primitive_Prims.op_Addition, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Subtraction, proj_equation_FStar.Pervasives.Native.Mktuple2__1, proj_equation_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_FStar.Pervasives.Native.Some_a, projection_inverse_FStar.Pervasives.Native.Some_v, refinement_interpretation_Tm_refine_1ba8fd8bb363097813064c67740b2de5, refinement_interpretation_Tm_refine_276a81d3c3eadebff56bb9e61978d236, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_6a960d0fa25c92f70750ff4a0270d63a, refinement_interpretation_Tm_refine_81407705a0828c2c1b1976675443f647, refinement_interpretation_Tm_refine_d3d07693cd71377864ef84dc97d10ec1, refinement_interpretation_Tm_refine_f1ef48729dd48b5741a77671cc117cd5, typing_FStar.Pervasives.Native.uu___is_Some, typing_FStar.Seq.Base.length, typing_FStar.UInt8.t, typing_MiniParse.Spec.Base.bparse, typing_MiniParse.Spec.Base.consumed_length, typing_MiniParse.Spec.Combinators.and_then_bare

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let and_then_injective


; <Start encoding let and_then_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Combinators.and_then_injective (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Combinators.and_then_injective@tok () Term)

; </end encoding let and_then_injective>


; encoding sigelt val MiniParse.Spec.Combinators.and_then_no_lookahead_on


; <Skipped val MiniParse.Spec.Combinators.and_then_no_lookahead_on/>

(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(349,47-398,13)

(declare-fun label_78 () Bool)
(declare-fun label_77 () Bool)
(declare-fun label_76 () Bool)
(declare-fun label_75 () Bool)
(declare-fun label_74 () Bool)
(declare-fun label_73 () Bool)
(declare-fun label_72 () Bool)
(declare-fun label_71 () Bool)
(declare-fun label_70 () Bool)
(declare-fun label_69 () Bool)
(declare-fun label_68 () Bool)
(declare-fun label_67 () Bool)
(declare-fun label_66 () Bool)
(declare-fun label_65 () Bool)
(declare-fun label_64 () Bool)
(declare-fun label_63 () Bool)
(declare-fun label_62 () Bool)
(declare-fun label_61 () Bool)
(declare-fun label_60 () Bool)
(declare-fun label_59 () Bool)
(declare-fun label_58 () Bool)
(declare-fun label_57 () Bool)
(declare-fun label_56 () Bool)
(declare-fun label_55 () Bool)
(declare-fun label_54 () Bool)
(declare-fun label_53 () Bool)
(declare-fun label_52 () Bool)
(declare-fun label_51 () Bool)
(declare-fun label_50 () Bool)
(declare-fun label_49 () Bool)
(declare-fun label_48 () Bool)
(declare-fun label_47 () Bool)
(declare-fun label_46 () Bool)
(declare-fun label_45 () Bool)
(declare-fun label_44 () Bool)
(declare-fun label_43 () Bool)
(declare-fun label_42 () Bool)
(declare-fun label_41 () Bool)
(declare-fun label_40 () Bool)
(declare-fun label_39 () Bool)
(declare-fun label_38 () Bool)
(declare-fun label_37 () Bool)
(declare-fun label_36 () Bool)
(declare-fun label_35 () Bool)
(declare-fun label_34 () Bool)
(declare-fun label_33 () Bool)
(declare-fun label_32 () Bool)
(declare-fun label_31 () Bool)
(declare-fun label_30 () Bool)
(declare-fun label_29 () Bool)
(declare-fun label_28 () Bool)
(declare-fun label_27 () Bool)
(declare-fun label_26 () Bool)
(declare-fun label_25 () Bool)
(declare-fun label_24 () Bool)
(declare-fun label_23 () Bool)
(declare-fun label_22 () Bool)
(declare-fun label_21 () Bool)
(declare-fun label_20 () Bool)
(declare-fun label_19 () Bool)
(declare-fun label_18 () Bool)
(declare-fun label_17 () Bool)
(declare-fun label_16 () Bool)
(declare-fun label_15 () Bool)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

(declare-fun Tm_refine_8fd7340cbbec74d00bd44b355dba45e4 (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(360,13-360,59); use=MiniParse.Spec.Combinators.fst(359,12-359,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_8fd7340cbbec74d00bd44b355dba45e4 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_8fd7340cbbec74d00bd44b355dba45e4 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_8fd7340cbbec74d00bd44b355dba45e4))

:named refinement_kinding_Tm_refine_8fd7340cbbec74d00bd44b355dba45e4))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(360,13-360,59); use=MiniParse.Spec.Combinators.fst(359,12-359,17)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_8fd7340cbbec74d00bd44b355dba45e4 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(360,13-360,59); use=MiniParse.Spec.Combinators.fst(359,12-359,17)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x2
(BoxInt 0)
@x3)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x3))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_8fd7340cbbec74d00bd44b355dba45e4 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_8fd7340cbbec74d00bd44b355dba45e4))

:named refinement_interpretation_Tm_refine_8fd7340cbbec74d00bd44b355dba45e4))
;;;;;;;;;;;;;;;;haseq for Tm_refine_8fd7340cbbec74d00bd44b355dba45e4
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(360,13-360,59); use=MiniParse.Spec.Combinators.fst(359,12-359,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_8fd7340cbbec74d00bd44b355dba45e4 @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_8fd7340cbbec74d00bd44b355dba45e4 @x0
@x1
@x2))))
:qid haseqTm_refine_8fd7340cbbec74d00bd44b355dba45e4))

:named haseqTm_refine_8fd7340cbbec74d00bd44b355dba45e4))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: 
(assert (! (Valid (ApplyTT __uu__PartialApp
MiniParse.Spec.Combinators.and_then_bare@tok))
:named @kick_partial_app_651df1c571857dec4e6f725e8bfc8830))






(declare-fun Tm_refine_276a81d3c3eadebff56bb9e61978d236 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=MiniParse.Spec.Combinators.fst(380,24-380,29)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_276a81d3c3eadebff56bb9e61978d236))

:named refinement_kinding_Tm_refine_276a81d3c3eadebff56bb9e61978d236))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=MiniParse.Spec.Combinators.fst(380,24-380,29)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.nat)
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x2
@x1))
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x1
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x3)))))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_276a81d3c3eadebff56bb9e61978d236))

:named refinement_interpretation_Tm_refine_276a81d3c3eadebff56bb9e61978d236))
;;;;;;;;;;;;;;;;haseq for Tm_refine_276a81d3c3eadebff56bb9e61978d236
;;; Fact-ids: 
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=MiniParse.Spec.Combinators.fst(380,24-380,29)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x0
@x1)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x0
@x1))))
:qid haseqTm_refine_276a81d3c3eadebff56bb9e61978d236))

:named haseqTm_refine_276a81d3c3eadebff56bb9e61978d236))

(declare-fun Tm_refine_6c303de0c7cf6ef8ce28b57600b9d4f0 (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=MiniParse.Spec.Combinators.fst(388,39-388,44)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_6c303de0c7cf6ef8ce28b57600b9d4f0 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_6c303de0c7cf6ef8ce28b57600b9d4f0 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_6c303de0c7cf6ef8ce28b57600b9d4f0))

:named refinement_kinding_Tm_refine_6c303de0c7cf6ef8ce28b57600b9d4f0))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=MiniParse.Spec.Combinators.fst(388,39-388,44)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_6c303de0c7cf6ef8ce28b57600b9d4f0 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.nat)
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x2
@x1))
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x1
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x3
(BoxInt 0)
@x4))))))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_6c303de0c7cf6ef8ce28b57600b9d4f0 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_6c303de0c7cf6ef8ce28b57600b9d4f0))

:named refinement_interpretation_Tm_refine_6c303de0c7cf6ef8ce28b57600b9d4f0))
;;;;;;;;;;;;;;;;haseq for Tm_refine_6c303de0c7cf6ef8ce28b57600b9d4f0
;;; Fact-ids: 
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=MiniParse.Spec.Combinators.fst(388,39-388,44)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_6c303de0c7cf6ef8ce28b57600b9d4f0 @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_6c303de0c7cf6ef8ce28b57600b9d4f0 @x0
@x1
@x2))))
:qid haseqTm_refine_6c303de0c7cf6ef8ce28b57600b9d4f0))

:named haseqTm_refine_6c303de0c7cf6ef8ce28b57600b9d4f0))




(declare-fun Tm_refine_e1710a74ab7dd683cc4590e764a478f7 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(359,12-366,6); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (HasType (Tm_refine_e1710a74ab7dd683cc4590e764a478f7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
Tm_type)
 

:pattern ((HasType (Tm_refine_e1710a74ab7dd683cc4590e764a478f7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
Tm_type))
:qid refinement_kinding_Tm_refine_e1710a74ab7dd683cc4590e764a478f7))

:named refinement_kinding_Tm_refine_e1710a74ab7dd683cc4590e764a478f7))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(359,12-366,6); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_e1710a74ab7dd683cc4590e764a478f7 @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(635,71-635,97); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(not 
;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(and 
;; def=MiniParse.Spec.Combinators.fst(360,13-360,59); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x2
(BoxInt 0)
@x3)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x3))


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(362,5-362,17); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x5
(MiniParse.Spec.Base.consumed_length @x2))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x6)
@x5)
@x7)
@x8)
@x2)))

(let ((@lb11 (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x6)
@x5)
@x7)
@x8)
@x2)))
(ite (is-FStar.Pervasives.Native.Some @lb11)
(let ((@lb12 (FStar.Pervasives.Native.Some_v @lb11)))

;; def=MiniParse.Spec.Combinators.fst(365,5-365,12); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(= @x9
(FStar.Pervasives.Native.Mktuple2__1 @lb12))
)
Unreachable)))

;; def=Prims.fst(635,86-635,95); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(not 
;; def=Prims.fst(635,86-635,95); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(= @x10
@x1)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_e1710a74ab7dd683cc4590e764a478f7.1))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_e1710a74ab7dd683cc4590e764a478f7 @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)))
:qid refinement_interpretation_Tm_refine_e1710a74ab7dd683cc4590e764a478f7))

:named refinement_interpretation_Tm_refine_e1710a74ab7dd683cc4590e764a478f7))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e1710a74ab7dd683cc4590e764a478f7
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(359,12-366,6); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_e1710a74ab7dd683cc4590e764a478f7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_e1710a74ab7dd683cc4590e764a478f7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))))
:qid haseqTm_refine_e1710a74ab7dd683cc4590e764a478f7))

:named haseqTm_refine_e1710a74ab7dd683cc4590e764a478f7))
;;;;;;;;;;;;;;;;_: Prims.unit   -> FStar.Pervasives.Lemma (requires FStar.Seq.Base.slice x' 0 b == FStar.Seq.Base.slice x 0 b)       (ensures         Some? (and_then_bare p p' x') /\         (let FStar.Pervasives.Native.Some v' = and_then_bare p p' x' in           (let y', _ = v' in             b == y')           <:           Prims.logical))
(declare-fun Tm_arrow_4139f816cf75a5e57bc789d1abf8eb5b (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_4139f816cf75a5e57bc789d1abf8eb5b
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(359,7-366,6); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (HasType (Tm_arrow_4139f816cf75a5e57bc789d1abf8eb5b @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
Tm_type)
 

:pattern ((HasType (Tm_arrow_4139f816cf75a5e57bc789d1abf8eb5b @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
Tm_type))
:qid kinding_Tm_arrow_4139f816cf75a5e57bc789d1abf8eb5b))

:named kinding_Tm_arrow_4139f816cf75a5e57bc789d1abf8eb5b))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(359,7-366,6); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_4139f816cf75a5e57bc789d1abf8eb5b @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_4139f816cf75a5e57bc789d1abf8eb5b @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)))
:qid MiniParse.Spec.Combinators_pre_typing_Tm_arrow_4139f816cf75a5e57bc789d1abf8eb5b))

:named MiniParse.Spec.Combinators_pre_typing_Tm_arrow_4139f816cf75a5e57bc789d1abf8eb5b))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_4139f816cf75a5e57bc789d1abf8eb5b
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(359,7-366,6); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_4139f816cf75a5e57bc789d1abf8eb5b @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
(and 
;; def=MiniParse.Spec.Combinators.fst(359,7-366,6); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x9 Term))
 (! (implies (and 
;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x8
(BoxInt 0)
@x7)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x6
(BoxInt 0)
@x7))

(HasType @x9
Prims.unit))
(HasType (ApplyTT @x0
@x9)
(Tm_refine_e1710a74ab7dd683cc4590e764a478f7 @x8
@x7
@x6
@x5
@x4
@x3
@x2
@x1)))
 

:pattern ((ApplyTT @x0
@x9))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_4139f816cf75a5e57bc789d1abf8eb5b.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_4139f816cf75a5e57bc789d1abf8eb5b @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_4139f816cf75a5e57bc789d1abf8eb5b))

:named MiniParse.Spec.Combinators_interpretation_Tm_arrow_4139f816cf75a5e57bc789d1abf8eb5b))
;;;;;;;;;;;;;;;;_: Prims.unit -> Type
(declare-fun Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe
Tm_type)
:named kinding_Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(359,7-359,9); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe))
:qid MiniParse.Spec.Combinators_pre_typing_Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe))

:named MiniParse.Spec.Combinators_pre_typing_Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(359,7-359,9); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe)
(and 
;; def=MiniParse.Spec.Combinators.fst(359,7-359,9); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.unit)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe))

:named MiniParse.Spec.Combinators_interpretation_Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe))









(declare-fun Tm_abs_31d280ef77bc35bcba85448c74705836 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_31d280ef77bc35bcba85448c74705836
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(361,12-366,5); use=MiniParse.Spec.Combinators.fst(396,25-396,26)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_abs_31d280ef77bc35bcba85448c74705836 @x0
@x1
@x2
@x3
@x4
@x5)
Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe)
 

:pattern ((Tm_abs_31d280ef77bc35bcba85448c74705836 @x0
@x1
@x2
@x3
@x4
@x5))
:qid typing_Tm_abs_31d280ef77bc35bcba85448c74705836))

:named typing_Tm_abs_31d280ef77bc35bcba85448c74705836))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_31d280ef77bc35bcba85448c74705836
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(361,12-366,5); use=MiniParse.Spec.Combinators.fst(396,25-396,26)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (ApplyTT (Tm_abs_31d280ef77bc35bcba85448c74705836 @x1
@x2
@x3
@x4
@x5
@x6)
@x0)
(Prims.l_and (Prims.b2t (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x2))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x3)
@x1)
@x4)
@x5)
@x2)))
(let ((@lb7 (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x3)
@x1)
@x4)
@x5)
@x2)))
(ite (is-FStar.Pervasives.Native.Some @lb7)
(let ((@lb8 (FStar.Pervasives.Native.Some_v @lb7)))
(Prims.eq2 @x1
@x6
(FStar.Pervasives.Native.Mktuple2__1 @lb8)))
Tm_unit))))
 

:pattern ((ApplyTT (Tm_abs_31d280ef77bc35bcba85448c74705836 @x1
@x2
@x3
@x4
@x5
@x6)
@x0))
:qid interpretation_Tm_abs_31d280ef77bc35bcba85448c74705836))

:named interpretation_Tm_abs_31d280ef77bc35bcba85448c74705836))

(declare-fun Tm_abs_e5454e1b3f59315c18dff8f4b08e2baa (Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_e5454e1b3f59315c18dff8f4b08e2baa
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(360,13-360,59); use=MiniParse.Spec.Combinators.fst(396,25-396,26)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_abs_e5454e1b3f59315c18dff8f4b08e2baa @x0
@x1
@x2)
Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe)
 

:pattern ((Tm_abs_e5454e1b3f59315c18dff8f4b08e2baa @x0
@x1
@x2))
:qid typing_Tm_abs_e5454e1b3f59315c18dff8f4b08e2baa))

:named typing_Tm_abs_e5454e1b3f59315c18dff8f4b08e2baa))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_e5454e1b3f59315c18dff8f4b08e2baa
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(360,13-360,59); use=MiniParse.Spec.Combinators.fst(396,25-396,26)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (Tm_abs_e5454e1b3f59315c18dff8f4b08e2baa @x1
@x2
@x3)
@x0)
(Prims.eq2 (FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x1
(BoxInt 0)
@x2)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x3
(BoxInt 0)
@x2)))
 

:pattern ((ApplyTT (Tm_abs_e5454e1b3f59315c18dff8f4b08e2baa @x1
@x2
@x3)
@x0))
:qid interpretation_Tm_abs_e5454e1b3f59315c18dff8f4b08e2baa))

:named interpretation_Tm_abs_e5454e1b3f59315c18dff8f4b08e2baa))





; Encoding query formula : forall (t: Type)
;   (t': Type)
;   (p: MiniParse.Spec.Base.bare_parser t)
;   (p': (_: t -> MiniParse.Spec.Base.bare_parser t'))
;   (x: MiniParse.Spec.Base.bytes)
;   (x': MiniParse.Spec.Base.bytes).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     MiniParse.Spec.Base.no_lookahead p /\ MiniParse.Spec.Base.injective p /\
;     (forall (x: t). MiniParse.Spec.Base.no_lookahead (p' x)) /\
;     (forall (pure_result: Prims.unit).
;         MiniParse.Spec.Base.no_lookahead_on (MiniParse.Spec.Combinators.and_then_bare p p') x x' ==>
;         p pure_result) ==>
;     (forall (any_result:
;         FStar.Pervasives.Native.option (t' & MiniParse.Spec.Base.consumed_length x)).
;         MiniParse.Spec.Combinators.and_then_bare p p' x == any_result ==>
;         (forall (k: Prims.pure_post Prims.unit).
;             (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;             (forall (b: t' & MiniParse.Spec.Base.consumed_length x).
;                 MiniParse.Spec.Combinators.and_then_bare p p' x == FStar.Pervasives.Native.Some b ==>
;                 (forall (b: t') (b: MiniParse.Spec.Base.consumed_length x).
;                     b == (b, b) ==>
;                     b <= FStar.Seq.Base.length x /\
;                     (forall (any_result: Prims.nat).
;                         b == any_result ==>
;                         (forall (k: Prims.pure_post Prims.unit).
;                             (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} k x ==> k x) ==>
;                             (b <= FStar.Seq.Base.length x' == true ==>
;                               b <= FStar.Seq.Base.length x' /\
;                               (forall (any_result: Prims.nat).
;                                   b == any_result ==>
;                                   (forall (_: Prims.unit).
;                                       (b <= FStar.Seq.Base.length x' ==>
;                                         0 <= b && b <= FStar.Seq.Base.length x') /\
;                                       (forall (any_result: MiniParse.Spec.Base.consumed_length x').
;                                           b == any_result ==>
;                                           (forall (any_result:
;                                               FStar.Seq.Base.seq MiniParse.Spec.Base.byte).
;                                               FStar.Seq.Base.slice x' 0 b == any_result ==>
;                                               (b <= FStar.Seq.Base.length x ==>
;                                                 0 <= b && b <= FStar.Seq.Base.length x) /\
;                                               (forall (any_result:
;                                                   MiniParse.Spec.Base.consumed_length x).
;                                                   b == any_result ==>
;                                                   (forall (any_result:
;                                                       FStar.Seq.Base.seq MiniParse.Spec.Base.byte).
;                                                       FStar.Seq.Base.slice x 0 b == any_result ==>
;                                                       (forall (any_result: Prims.logical).
;                                                           FStar.Seq.Base.slice x' 0 b ==
;                                                           FStar.Seq.Base.slice x 0 b ==
;                                                           any_result ==>
;                                                           (b <= FStar.Seq.Base.length x' ==>
;                                                             0 <= b && b <= FStar.Seq.Base.length x') /\
;                                                           (forall (any_result:
;                                                               MiniParse.Spec.Base.consumed_length x')
;                                                             .
;                                                               b == any_result ==>
;                                                               (forall (any_result:
;                                                                   FStar.Seq.Base.seq MiniParse.Spec.Base.byte
;                                                                   ).
;                                                                   FStar.Seq.Base.slice x' 0 b ==
;                                                                   any_result ==>
;                                                                   b <= FStar.Seq.Base.length x ==>
;                                                                   0 <= b &&
;                                                                   b <= FStar.Seq.Base.length x)) /\
;                                                           (forall (_:
;                                                               Prims.squash (FStar.Seq.Base.slice x'
;                                                                     0
;                                                                     b ==
;                                                                   FStar.Seq.Base.slice x 0 b)).
;                                                               (*  - Could not prove post-condition
; *)
;                                                               Some? (MiniParse.Spec.Combinators.and_then_bare
;                                                                     p
;                                                                     p'
;                                                                     x') ==>
;                                                               (forall (any_result:
;                                                                   FStar.Pervasives.Native.option (t' &
;                                                                       MiniParse.Spec.Base.consumed_length
;                                                                         x')).
;                                                                   MiniParse.Spec.Combinators.and_then_bare
;                                                                     p
;                                                                     p'
;                                                                     x' ==
;                                                                   any_result ==>
;                                                                   ~(Some? (MiniParse.Spec.Combinators.and_then_bare
;                                                                           p
;                                                                           p'
;                                                                           x')) ==>
;                                                                   Prims.l_False)))))))) /\
;                                   (forall (_: Prims.unit).
;                                       (b <= FStar.Seq.Base.length x' ==>
;                                         0 <= b && b <= FStar.Seq.Base.length x') /\
;                                       (forall (any_result: MiniParse.Spec.Base.consumed_length x').
;                                           b == any_result ==>
;                                           (forall (any_result:
;                                               FStar.Seq.Base.seq MiniParse.Spec.Base.byte).
;                                               FStar.Seq.Base.slice x' 0 b == any_result ==>
;                                               (b <= FStar.Seq.Base.length x ==>
;                                                 0 <= b && b <= FStar.Seq.Base.length x) /\
;                                               (forall (any_result:
;                                                   MiniParse.Spec.Base.consumed_length x).
;                                                   b == any_result ==>
;                                                   (forall (any_result:
;                                                       FStar.Seq.Base.seq MiniParse.Spec.Base.byte).
;                                                       FStar.Seq.Base.slice x 0 b == any_result ==>
;                                                       (forall (any_result: Prims.logical).
;                                                           FStar.Seq.Base.slice x' 0 b ==
;                                                           FStar.Seq.Base.slice x 0 b ==
;                                                           any_result ==>
;                                                           (b <= FStar.Seq.Base.length x' ==>
;                                                             0 <= b && b <= FStar.Seq.Base.length x') /\
;                                                           (forall (any_result:
;                                                               MiniParse.Spec.Base.consumed_length x')
;                                                             .
;                                                               b == any_result ==>
;                                                               (forall (any_result:
;                                                                   FStar.Seq.Base.seq MiniParse.Spec.Base.byte
;                                                                   ).
;                                                                   FStar.Seq.Base.slice x' 0 b ==
;                                                                   any_result ==>
;                                                                   b <= FStar.Seq.Base.length x ==>
;                                                                   0 <= b &&
;                                                                   b <= FStar.Seq.Base.length x)) /\
;                                                           (forall (_:
;                                                               Prims.squash (FStar.Seq.Base.slice x'
;                                                                     0
;                                                                     b ==
;                                                                   FStar.Seq.Base.slice x 0 b)).
;                                                               (*  - Could not prove post-condition
; *)
;                                                               Some? (MiniParse.Spec.Combinators.and_then_bare
;                                                                     p
;                                                                     p'
;                                                                     x') ==>
;                                                               (forall (any_result:
;                                                                   FStar.Pervasives.Native.option (t' &
;                                                                       MiniParse.Spec.Base.consumed_length
;                                                                         x')).
;                                                                   MiniParse.Spec.Combinators.and_then_bare
;                                                                     p
;                                                                     p'
;                                                                     x' ==
;                                                                   any_result ==>
;                                                                   ~(Some? (MiniParse.Spec.Combinators.and_then_bare
;                                                                           p
;                                                                           p'
;                                                                           x')) ==>
;                                                                   Prims.l_False))))))) /\
;                                       (forall (p: Prims.pure_post Prims.unit).
;                                           FStar.Seq.Base.slice x' 0 b == FStar.Seq.Base.slice x 0 b /\
;                                           (forall (pure_result: Prims.unit).
;                                               Some? (MiniParse.Spec.Combinators.and_then_bare p
;                                                     p'
;                                                     x') /\
;                                               (let FStar.Pervasives.Native.Some v' =
;                                                   MiniParse.Spec.Combinators.and_then_bare p p' x'
;                                                 in
;                                                 (let y', _ = v' in
;                                                   b == y')
;                                                 <:
;                                                 Prims.logical) ==>
;                                               p pure_result) ==>
;                                           Some? (p x) /\
;                                           (forall (pure_result: Prims.unit).
;                                               Some? (p x) ==>
;                                               (forall (any_result:
;                                                   FStar.Pervasives.Native.option (t &
;                                                       MiniParse.Spec.Base.consumed_length x)).
;                                                   p x == any_result ==>
;                                                   (~(Some? (p x)) ==> Prims.l_False) /\
;                                                   (forall (b: t)
;                                                       (b: MiniParse.Spec.Base.consumed_length x).
;                                                       p x == FStar.Pervasives.Native.Some (b, b) ==>
;                                                       b <= b /\
;                                                       (forall (pure_result: Prims.unit).
;                                                           b <= b ==>
;                                                           b <= FStar.Seq.Base.length x' /\
;                                                           (forall (pure_result: Prims.unit).
;                                                               b <= FStar.Seq.Base.length x' ==>
;                                                               (b <= FStar.Seq.Base.length x ==>
;                                                                 0 <= b &&
;                                                                 b <= FStar.Seq.Base.length x') /\
;                                                               (forall (any_result:
;                                                                   MiniParse.Spec.Base.consumed_length
;                                                                     x).
;                                                                   b == any_result ==>
;                                                                   (forall (any_result:
;                                                                       FStar.Seq.Base.seq MiniParse.Spec.Base.byte
;                                                                       ).
;                                                                       FStar.Seq.Base.slice x' 0 b ==
;                                                                       any_result ==>
;                                                                       (b <= FStar.Seq.Base.length x' ==>
;                                                                         0 <= b &&
;                                                                         b <=
;                                                                         FStar.Seq.Base.length x') /\
;                                                                       (forall (any_result:
;                                                                           MiniParse.Spec.Base.consumed_length
;                                                                             x').
;                                                                           b == any_result ==>
;                                                                           (forall (any_result:
;                                                                               FStar.Seq.Base.seq MiniParse.Spec.Base.byte
;                                                                               ).
;                                                                               FStar.Seq.Base.slice x'
;                                                                                 0
;                                                                                 b ==
;                                                                               any_result ==>
;                                                                               (b <=
;                                                                                 FStar.Seq.Base.length
;                                                                                   x ==>
;                                                                                 0 <= b &&
;                                                                                 b <=
;                                                                                 FStar.Seq.Base.length
;                                                                                   (FStar.Seq.Base.slice
;                                                                                       x'
;                                                                                       0
;                                                                                       b)) /\
;                                                                               (forall (any_result:
;                                                                                   MiniParse.Spec.Base.consumed_length
;                                                                                     x).
;                                                                                   b == any_result ==>
;                                                                                   (forall (any_result:
;                                                                                       FStar.Seq.Base.seq
;                                                                                         MiniParse.Spec.Base.byte
;                                                                                       ).
;                                                                                       FStar.Seq.Base.slice
;                                                                                         (FStar.Seq.Base.slice
;                                                                                             x'
;                                                                                             0
;                                                                                             b)
;                                                                                         0
;                                                                                         b ==
;                                                                                       any_result ==>
;                                                                                       (forall (any_result:
;                                                                                           Prims.logical)
;                                                                                         .
;                                                                                           FStar.Seq.Base.slice
;                                                                                             x'
;                                                                                             0
;                                                                                             b ==
;                                                                                           FStar.Seq.Base.slice
;                                                                                             (FStar.Seq.Base.slice
;                                                                                                 x'
;                                                                                                 0
;                                                                                                 b)
;                                                                                             0
;                                                                                             b ==
;                                                                                           any_result ==>
;                                                                                           FStar.Seq.Base.slice
;                                                                                             x'
;                                                                                             0
;                                                                                             b ==
;                                                                                           FStar.Seq.Base.slice
;                                                                                             (FStar.Seq.Base.slice
;                                                                                                 x'
;                                                                                                 0
;                                                                                                 b)
;                                                                                             0
;                                                                                             b /\
;                                                                                           (forall (pure_result:
;                                                                                               Prims.unit)
;                                                                                             .
;                                                                                               FStar.Seq.Base.slice
;                                                                                                 x'
;                                                                                                 0
;                                                                                                 b ==
;                                                                                               FStar.Seq.Base.slice
;                                                                                                 (FStar.Seq.Base.slice
;                                                                                                     x'
;                                                                                                     0
;                                                                                                     b
;                                                                                                   )
;                                                                                                 0
;                                                                                                 b ==>
;                                                                                               (b <=
;                                                                                                 FStar.Seq.Base.length
;                                                                                                   x ==>
;                                                                                                 0 <=
;                                                                                                 b &&
;                                                                                                 b <=
;                                                                                                 FStar.Seq.Base.length
;                                                                                                   x'
;                                                                                               ) /\
;                                                                                               (forall
;                                                                                                   (any_result:
;                                                                                                   MiniParse.Spec.Base.consumed_length
;                                                                                                     x
;                                                                                                   ).
;                                                                                                   b ==
;                                                                                                   any_result ==>
;                                                                                                   (forall
;                                                                                                       (any_result:
;                                                                                                       FStar.Seq.Base.seq
;                                                                                                         MiniParse.Spec.Base.byte
;                                                                                                       )
;                                                                                                     .
;                                                                                                       FStar.Seq.Base.slice
;                                                                                                         x'
;                                                                                                         0
;                                                                                                         b
;                                                                                                        ==
;                                                                                                       any_result ==>
;                                                                                                       (
;                                                                                                         b <=
;                                                                                                         FStar.Seq.Base.length
;                                                                                                           x
;                                                                                                          ==>
;                                                                                                         0 <=
;                                                                                                         b &&
;                                                                                                         b <=
;                                                                                                         FStar.Seq.Base.length
;                                                                                                           x
; 
;                                                                                                       ) /\
;                                                                                                       (
;                                                                                                         forall
;                                                                                                           (any_result:
;                                                                                                           MiniParse.Spec.Base.consumed_length
;                                                                                                             x
;                                                                                                           )
;                                                                                                         .
;                                                                                                           b ==
;                                                                                                           any_result ==>
;                                                                                                           (
;                                                                                                             forall
;                                                                                                               (any_result:
;                                                                                                               FStar.Seq.Base.seq
;                                                                                                                 MiniParse.Spec.Base.byte
;                                                                                                               )
;                                                                                                             .
;                                                                                                               FStar.Seq.Base.slice
;                                                                                                                 x
;                                                                                                                 0
;                                                                                                                 b
;                                                                                                                ==
;                                                                                                               any_result ==>
;                                                                                                               (
;                                                                                                                 forall
;                                                                                                                   (any_result:
;                                                                                                                   Prims.logical)
;                                                                                                                 .
;                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                     x'
;                                                                                                                     0
;                                                                                                                     b
;                                                                                                                    ==
;                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                     x
;                                                                                                                     0
;                                                                                                                     b
;                                                                                                                    ==
;                                                                                                                   any_result ==>
;                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                     x'
;                                                                                                                     0
;                                                                                                                     b
;                                                                                                                    ==
;                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                     x
;                                                                                                                     0
;                                                                                                                     b
;                                                                                                                    /\
;                                                                                                                   (
;                                                                                                                     forall
;                                                                                                                       (pure_result:
;                                                                                                                       Prims.unit)
;                                                                                                                     .
;                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                         x'
;                                                                                                                         0
;                                                                                                                         b
;                                                                                                                        ==
;                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                         x
;                                                                                                                         0
;                                                                                                                         b
;                                                                                                                        ==>
;                                                                                                                       MiniParse.Spec.Base.no_lookahead_on
;                                                                                                                         p
;                                                                                                                         x
;                                                                                                                         x'
;                                                                                                                        /\
;                                                                                                                       (
;                                                                                                                         forall
;                                                                                                                           (pure_result:
;                                                                                                                           Prims.unit)
;                                                                                                                         .
;                                                                                                                           MiniParse.Spec.Base.no_lookahead_on
;                                                                                                                             p
;                                                                                                                             x
;                                                                                                                             x'
;                                                                                                                            ==>
;                                                                                                                           Some?
;                                                                                                                             (
;                                                                                                                               p
;                                                                                                                                 x'
; 
;                                                                                                                             )
;                                                                                                                            /\
;                                                                                                                           (
;                                                                                                                             forall
;                                                                                                                               (pure_result:
;                                                                                                                               Prims.unit)
;                                                                                                                             .
;                                                                                                                               Some?
;                                                                                                                                 (
;                                                                                                                                   p
;                                                                                                                                     x'
; 
;                                                                                                                                 )
;                                                                                                                                ==>
;                                                                                                                               (
;                                                                                                                                 forall
;                                                                                                                                   (any_result:
;                                                                                                                                   FStar.Pervasives.Native.option
;                                                                                                                                     (
;                                                                                                                                       t &
;                                                                                                                                       MiniParse.Spec.Base.consumed_length
;                                                                                                                                         x'
; 
;                                                                                                                                     )
;                                                                                                                                   )
;                                                                                                                                 .
;                                                                                                                                   p
;                                                                                                                                     x'
;                                                                                                                                    ==
;                                                                                                                                   any_result ==>
;                                                                                                                                   (
;                                                                                                                                     ~(
;                                                                                                                                       Some?
;                                                                                                                                         (
;                                                                                                                                           p
;                                                                                                                                             x'
; 
;                                                                                                                                         )
; 
;                                                                                                                                     ) ==>
;                                                                                                                                     Prims.l_False
;                                                                                                                                   ) /\
;                                                                                                                                   (
;                                                                                                                                     forall
;                                                                                                                                       (b:
;                                                                                                                                       t &
;                                                                                                                                       MiniParse.Spec.Base.consumed_length
;                                                                                                                                         x'
;                                                                                                                                       )
;                                                                                                                                     .
;                                                                                                                                       p
;                                                                                                                                         x'
;                                                                                                                                        ==
;                                                                                                                                       FStar.Pervasives.Native.Some
;                                                                                                                                       b ==>
;                                                                                                                                       (
;                                                                                                                                         forall
;                                                                                                                                           (b:
;                                                                                                                                           t)
;                                                                                                                                           (b:
;                                                                                                                                           MiniParse.Spec.Base.consumed_length
;                                                                                                                                             x'
;                                                                                                                                           )
;                                                                                                                                         .
;                                                                                                                                           b ==
;                                                                                                                                           (b,
;                                                                                                                                           b) ==>
;                                                                                                                                           b ==
;                                                                                                                                           b /\
;                                                                                                                                           (
;                                                                                                                                             forall
;                                                                                                                                               (pure_result:
;                                                                                                                                               Prims.unit)
;                                                                                                                                             .
;                                                                                                                                               b ==
;                                                                                                                                               b ==>
;                                                                                                                                               MiniParse.Spec.Base.injective_precond
;                                                                                                                                                 p
;                                                                                                                                                 x
;                                                                                                                                                 x'
;                                                                                                                                                /\
;                                                                                                                                               (
;                                                                                                                                                 forall
;                                                                                                                                                   (pure_result:
;                                                                                                                                                   Prims.unit)
;                                                                                                                                                 .
;                                                                                                                                                   MiniParse.Spec.Base.injective_precond
;                                                                                                                                                     p
;                                                                                                                                                     x
;                                                                                                                                                     x'
;                                                                                                                                                    ==>
;                                                                                                                                                   b ==
;                                                                                                                                                   b /\
;                                                                                                                                                   (
;                                                                                                                                                     forall
;                                                                                                                                                       (pure_result:
;                                                                                                                                                       Prims.unit)
;                                                                                                                                                     .
;                                                                                                                                                       b ==
;                                                                                                                                                       b ==>
;                                                                                                                                                       b <=
;                                                                                                                                                       FStar.Seq.Base.length
;                                                                                                                                                         x
;                                                                                                                                                        &&
;                                                                                                                                                       FStar.Seq.Base.length
;                                                                                                                                                         x
;                                                                                                                                                        <=
;                                                                                                                                                       FStar.Seq.Base.length
;                                                                                                                                                         x
;                                                                                                                                                        /\
;                                                                                                                                                       (
;                                                                                                                                                         forall
;                                                                                                                                                           (return_val:
;                                                                                                                                                           j:
;                                                                                                                                                           Prims.nat
;                                                                                                                                                             {
;                                                                                                                                                               b <=
;                                                                                                                                                               j &&
;                                                                                                                                                               j <=
;                                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                                 x
; 
;                                                                                                                                                             })
;                                                                                                                                                         .
;                                                                                                                                                           return_val ==
;                                                                                                                                                           FStar.Seq.Base.length
;                                                                                                                                                             x
;                                                                                                                                                            ==>
;                                                                                                                                                           (
;                                                                                                                                                             forall
;                                                                                                                                                               (any_result:
;                                                                                                                                                               FStar.Seq.Base.seq
;                                                                                                                                                                 MiniParse.Spec.Base.byte
;                                                                                                                                                               )
;                                                                                                                                                             .
;                                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                                 x
;                                                                                                                                                                 b
;                                                                                                                                                                 (
;                                                                                                                                                                   FStar.Seq.Base.length
;                                                                                                                                                                     x
; 
;                                                                                                                                                                 )
;                                                                                                                                                                ==
;                                                                                                                                                               any_result ==>
;                                                                                                                                                               b <=
;                                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                                 x'
;                                                                                                                                                                &&
;                                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                                 x'
;                                                                                                                                                                <=
;                                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                                 x'
;                                                                                                                                                                /\
;                                                                                                                                                               (
;                                                                                                                                                                 forall
;                                                                                                                                                                   (return_val:
;                                                                                                                                                                   j:
;                                                                                                                                                                   Prims.nat
;                                                                                                                                                                     {
;                                                                                                                                                                       b <=
;                                                                                                                                                                       j &&
;                                                                                                                                                                       j <=
;                                                                                                                                                                       FStar.Seq.Base.length
;                                                                                                                                                                         x'
; 
;                                                                                                                                                                     })
;                                                                                                                                                                 .
;                                                                                                                                                                   return_val ==
;                                                                                                                                                                   FStar.Seq.Base.length
;                                                                                                                                                                     x'
;                                                                                                                                                                    ==>
;                                                                                                                                                                   (
;                                                                                                                                                                     forall
;                                                                                                                                                                       (any_result:
;                                                                                                                                                                       FStar.Seq.Base.seq
;                                                                                                                                                                         MiniParse.Spec.Base.byte
;                                                                                                                                                                       )
;                                                                                                                                                                     .
;                                                                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                                                                         x'
;                                                                                                                                                                         b
;                                                                                                                                                                         (
;                                                                                                                                                                           FStar.Seq.Base.length
;                                                                                                                                                                             x'
; 
;                                                                                                                                                                         )
;                                                                                                                                                                        ==
;                                                                                                                                                                       any_result ==>
;                                                                                                                                                                       Some?
;                                                                                                                                                                         (
;                                                                                                                                                                           p'
;                                                                                                                                                                             b
;                                                                                                                                                                             (
;                                                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                                                 x
;                                                                                                                                                                                 b
;                                                                                                                                                                                 (
;                                                                                                                                                                                   FStar.Seq.Base.length
;                                                                                                                                                                                     x
; 
;                                                                                                                                                                                 )
; 
;                                                                                                                                                                             )
; 
;                                                                                                                                                                         )
;                                                                                                                                                                        /\
;                                                                                                                                                                       (
;                                                                                                                                                                         forall
;                                                                                                                                                                           (pure_result:
;                                                                                                                                                                           Prims.unit)
;                                                                                                                                                                         .
;                                                                                                                                                                           Some?
;                                                                                                                                                                             (
;                                                                                                                                                                               p'
;                                                                                                                                                                                 b
;                                                                                                                                                                                 (
;                                                                                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                                                                                     x
;                                                                                                                                                                                     b
;                                                                                                                                                                                     (
;                                                                                                                                                                                       FStar.Seq.Base.length
;                                                                                                                                                                                         x
; 
;                                                                                                                                                                                     )
; 
;                                                                                                                                                                                 )
; 
;                                                                                                                                                                             )
;                                                                                                                                                                            ==>
;                                                                                                                                                                           (
;                                                                                                                                                                             forall
;                                                                                                                                                                               (any_result:
;                                                                                                                                                                               FStar.Pervasives.Native.option
;                                                                                                                                                                                 (
;                                                                                                                                                                                   t' &
;                                                                                                                                                                                   MiniParse.Spec.Base.consumed_length
;                                                                                                                                                                                     (
;                                                                                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                                                                                         x
;                                                                                                                                                                                         b
;                                                                                                                                                                                         (
;                                                                                                                                                                                           FStar.Seq.Base.length
;                                                                                                                                                                                             x
; 
;                                                                                                                                                                                         )
; 
;                                                                                                                                                                                     )
; 
;                                                                                                                                                                                 )
;                                                                                                                                                                               )
;                                                                                                                                                                             .
;                                                                                                                                                                               p'
;                                                                                                                                                                                 b
;                                                                                                                                                                                 (
;                                                                                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                                                                                     x
;                                                                                                                                                                                     b
;                                                                                                                                                                                     (
;                                                                                                                                                                                       FStar.Seq.Base.length
;                                                                                                                                                                                         x
; 
;                                                                                                                                                                                     )
; 
;                                                                                                                                                                                 )
;                                                                                                                                                                                ==
;                                                                                                                                                                               any_result ==>
;                                                                                                                                                                               (
;                                                                                                                                                                                 ~(
;                                                                                                                                                                                   Some?
;                                                                                                                                                                                     (
;                                                                                                                                                                                       p'
;                                                                                                                                                                                         b
;                                                                                                                                                                                         (
;                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                             x
;                                                                                                                                                                                             b
;                                                                                                                                                                                             (
;                                                                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                                                                 x
; 
;                                                                                                                                                                                             )
; 
;                                                                                                                                                                                         )
; 
;                                                                                                                                                                                     )
; 
;                                                                                                                                                                                 ) ==>
;                                                                                                                                                                                 Prims.l_False
;                                                                                                                                                                               ) /\
;                                                                                                                                                                               (
;                                                                                                                                                                                 forall
;                                                                                                                                                                                   (b:
;                                                                                                                                                                                   t')
;                                                                                                                                                                                   (b:
;                                                                                                                                                                                   MiniParse.Spec.Base.consumed_length
;                                                                                                                                                                                     (
;                                                                                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                                                                                         x
;                                                                                                                                                                                         b
;                                                                                                                                                                                         (
;                                                                                                                                                                                           FStar.Seq.Base.length
;                                                                                                                                                                                             x
; 
;                                                                                                                                                                                         )
; 
;                                                                                                                                                                                     )
;                                                                                                                                                                                   )
;                                                                                                                                                                                 .
;                                                                                                                                                                                   p'
;                                                                                                                                                                                     b
;                                                                                                                                                                                     (
;                                                                                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                                                                                         x
;                                                                                                                                                                                         b
;                                                                                                                                                                                         (
;                                                                                                                                                                                           FStar.Seq.Base.length
;                                                                                                                                                                                             x
; 
;                                                                                                                                                                                         )
; 
;                                                                                                                                                                                     )
;                                                                                                                                                                                    ==
;                                                                                                                                                                                   FStar.Pervasives.Native.Some
;                                                                                                                                                                                   (b,
;                                                                                                                                                                                   b) ==>
;                                                                                                                                                                                   b ==
;                                                                                                                                                                                   b +
;                                                                                                                                                                                   b /\
;                                                                                                                                                                                   (
;                                                                                                                                                                                     forall
;                                                                                                                                                                                       (pure_result:
;                                                                                                                                                                                       Prims.unit)
;                                                                                                                                                                                     .
;                                                                                                                                                                                       b ==
;                                                                                                                                                                                       b +
;                                                                                                                                                                                       b ==>
;                                                                                                                                                                                       b <=
;                                                                                                                                                                                       FStar.Seq.Base.length
;                                                                                                                                                                                         (
;                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                             x
;                                                                                                                                                                                             b
;                                                                                                                                                                                             (
;                                                                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                                                                 x
; 
;                                                                                                                                                                                             )
; 
;                                                                                                                                                                                         )
;                                                                                                                                                                                        /\
;                                                                                                                                                                                       (
;                                                                                                                                                                                         forall
;                                                                                                                                                                                           (pure_result:
;                                                                                                                                                                                           Prims.unit)
;                                                                                                                                                                                         .
;                                                                                                                                                                                           b <=
;                                                                                                                                                                                           FStar.Seq.Base.length
;                                                                                                                                                                                             (
;                                                                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                                                                 x
;                                                                                                                                                                                                 b
;                                                                                                                                                                                                 (
;                                                                                                                                                                                                   FStar.Seq.Base.length
;                                                                                                                                                                                                     x
; 
;                                                                                                                                                                                                 )
; 
;                                                                                                                                                                                             )
;                                                                                                                                                                                            ==>
;                                                                                                                                                                                           b <=
;                                                                                                                                                                                           FStar.Seq.Base.length
;                                                                                                                                                                                             (
;                                                                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                                                                 x'
;                                                                                                                                                                                                 b
;                                                                                                                                                                                                 (
;                                                                                                                                                                                                   FStar.Seq.Base.length
;                                                                                                                                                                                                     x'
; 
;                                                                                                                                                                                                 )
; 
;                                                                                                                                                                                             )
;                                                                                                                                                                                            /\
;                                                                                                                                                                                           (
;                                                                                                                                                                                             forall
;                                                                                                                                                                                               (pure_result:
;                                                                                                                                                                                               Prims.unit)
;                                                                                                                                                                                             .
;                                                                                                                                                                                               b <=
;                                                                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                                                                 (
;                                                                                                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                                                                                                     x'
;                                                                                                                                                                                                     b
;                                                                                                                                                                                                     (
;                                                                                                                                                                                                       FStar.Seq.Base.length
;                                                                                                                                                                                                         x'
; 
;                                                                                                                                                                                                     )
; 
;                                                                                                                                                                                                 )
;                                                                                                                                                                                                ==>
;                                                                                                                                                                                               (
;                                                                                                                                                                                                 b <=
;                                                                                                                                                                                                 FStar.Seq.Base.length
;                                                                                                                                                                                                   (
;                                                                                                                                                                                                     FStar.Seq.Base.slice
;                                                                                                                                                                                                       x
;                                                                                                                                                                                                       b
;                                                                                                                                                                                                       (
;                                                                                                                                                                                                         FStar.Seq.Base.length
;                                                                                                                                                                                                           x
; 
;                                                                                                                                                                                                       )
; 
;                                                                                                                                                                                                   )
;                                                                                                                                                                                                  ==>
;                                                                                                                                                                                                 0 <=
;                                                                                                                                                                                                 b &&
;                                                                                                                                                                                                 b <=
;                                                                                                                                                                                                 FStar.Seq.Base.length
;                                                                                                                                                                                                   (
;                                                                                                                                                                                                     FStar.Seq.Base.slice
;                                                                                                                                                                                                       x'
;                                                                                                                                                                                                       b
;                                                                                                                                                                                                       (
;                                                                                                                                                                                                         FStar.Seq.Base.length
;                                                                                                                                                                                                           x'
; 
;                                                                                                                                                                                                       )
; 
;                                                                                                                                                                                                   )
; 
;                                                                                                                                                                                               ) /\
;                                                                                                                                                                                               (
;                                                                                                                                                                                                 forall
;                                                                                                                                                                                                   (any_result:
;                                                                                                                                                                                                   MiniParse.Spec.Base.consumed_length
;                                                                                                                                                                                                     (
;                                                                                                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                                                                                                         x
;                                                                                                                                                                                                         b
;                                                                                                                                                                                                         (
;                                                                                                                                                                                                           FStar.Seq.Base.length
;                                                                                                                                                                                                             x
; 
;                                                                                                                                                                                                         )
; 
;                                                                                                                                                                                                     )
;                                                                                                                                                                                                   )
;                                                                                                                                                                                                 .
;                                                                                                                                                                                                   b ==
;                                                                                                                                                                                                   any_result ==>
;                                                                                                                                                                                                   (
;                                                                                                                                                                                                     forall
;                                                                                                                                                                                                       (any_result:
;                                                                                                                                                                                                       FStar.Seq.Base.seq
;                                                                                                                                                                                                         MiniParse.Spec.Base.byte
;                                                                                                                                                                                                       )
;                                                                                                                                                                                                     .
;                                                                                                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                                                                                                         (
;                                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                                             x'
;                                                                                                                                                                                                             b
;                                                                                                                                                                                                             (
;                                                                                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                                                                                 x'
; 
;                                                                                                                                                                                                             )
; 
;                                                                                                                                                                                                         )
;                                                                                                                                                                                                         0
;                                                                                                                                                                                                         b
;                                                                                                                                                                                                        ==
;                                                                                                                                                                                                       any_result ==>
;                                                                                                                                                                                                       (
;                                                                                                                                                                                                         b <=
;                                                                                                                                                                                                         FStar.Seq.Base.length
;                                                                                                                                                                                                           x'
;                                                                                                                                                                                                          ==>
;                                                                                                                                                                                                         0 <=
;                                                                                                                                                                                                         b &&
;                                                                                                                                                                                                         b <=
;                                                                                                                                                                                                         FStar.Seq.Base.length
;                                                                                                                                                                                                           x'
; 
;                                                                                                                                                                                                       ) /\
;                                                                                                                                                                                                       (
;                                                                                                                                                                                                         forall
;                                                                                                                                                                                                           (any_result:
;                                                                                                                                                                                                           MiniParse.Spec.Base.consumed_length
;                                                                                                                                                                                                             x'
;                                                                                                                                                                                                           )
;                                                                                                                                                                                                         .
;                                                                                                                                                                                                           b ==
;                                                                                                                                                                                                           any_result ==>
;                                                                                                                                                                                                           (
;                                                                                                                                                                                                             forall
;                                                                                                                                                                                                               (any_result:
;                                                                                                                                                                                                               FStar.Seq.Base.seq
;                                                                                                                                                                                                                 MiniParse.Spec.Base.byte
;                                                                                                                                                                                                               )
;                                                                                                                                                                                                             .
;                                                                                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                                                                                 x'
;                                                                                                                                                                                                                 0
;                                                                                                                                                                                                                 b
;                                                                                                                                                                                                                ==
;                                                                                                                                                                                                               any_result ==>
;                                                                                                                                                                                                               b +
;                                                                                                                                                                                                               b >=
;                                                                                                                                                                                                               0 /\
;                                                                                                                                                                                                               b <=
;                                                                                                                                                                                                               b +
;                                                                                                                                                                                                               b &&
;                                                                                                                                                                                                               b +
;                                                                                                                                                                                                               b <=
;                                                                                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                                                                                                                     x'
;                                                                                                                                                                                                                     0
;                                                                                                                                                                                                                     b
; 
;                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                /\
;                                                                                                                                                                                                               (
;                                                                                                                                                                                                                 forall
;                                                                                                                                                                                                                   (return_val:
;                                                                                                                                                                                                                   j:
;                                                                                                                                                                                                                   Prims.nat
;                                                                                                                                                                                                                     {
;                                                                                                                                                                                                                       b <=
;                                                                                                                                                                                                                       j &&
;                                                                                                                                                                                                                       j <=
;                                                                                                                                                                                                                       FStar.Seq.Base.length
;                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                                                             x'
;                                                                                                                                                                                                                             0
;                                                                                                                                                                                                                             b
; 
;                                                                                                                                                                                                                         )
; 
;                                                                                                                                                                                                                     })
;                                                                                                                                                                                                                 .
;                                                                                                                                                                                                                   return_val ==
;                                                                                                                                                                                                                   b +
;                                                                                                                                                                                                                   b ==>
;                                                                                                                                                                                                                   (
;                                                                                                                                                                                                                     forall
;                                                                                                                                                                                                                       (any_result:
;                                                                                                                                                                                                                       FStar.Seq.Base.seq
;                                                                                                                                                                                                                         MiniParse.Spec.Base.byte
;                                                                                                                                                                                                                       )
;                                                                                                                                                                                                                     .
;                                                                                                                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                                                             x'
;                                                                                                                                                                                                                             0
;                                                                                                                                                                                                                             b
; 
;                                                                                                                                                                                                                         )
;                                                                                                                                                                                                                         b
;                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                           b +
;                                                                                                                                                                                                                           b
;                                                                                                                                                                                                                         )
;                                                                                                                                                                                                                        ==
;                                                                                                                                                                                                                       any_result ==>
;                                                                                                                                                                                                                       (
;                                                                                                                                                                                                                         forall
;                                                                                                                                                                                                                           (any_result:
;                                                                                                                                                                                                                           Prims.logical)
;                                                                                                                                                                                                                         .
;                                                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                                                                                                 x'
;                                                                                                                                                                                                                                 b
;                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                   FStar.Seq.Base.length
;                                                                                                                                                                                                                                     x'
; 
;                                                                                                                                                                                                                                 )
; 
;                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                             0
;                                                                                                                                                                                                                             b
;                                                                                                                                                                                                                            ==
;                                                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                                                                                                 x'
;                                                                                                                                                                                                                                 0
;                                                                                                                                                                                                                                 b
; 
;                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                             b
;                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                               b +
;                                                                                                                                                                                                                               b
;                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                            ==
;                                                                                                                                                                                                                           any_result ==>
;                                                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                                                                                                 x'
;                                                                                                                                                                                                                                 b
;                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                   FStar.Seq.Base.length
;                                                                                                                                                                                                                                     x'
; 
;                                                                                                                                                                                                                                 )
; 
;                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                             0
;                                                                                                                                                                                                                             b
;                                                                                                                                                                                                                            ==
;                                                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                                                                                                 x'
;                                                                                                                                                                                                                                 0
;                                                                                                                                                                                                                                 b
; 
;                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                             b
;                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                               b +
;                                                                                                                                                                                                                               b
;                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                            /\
;                                                                                                                                                                                                                           (
;                                                                                                                                                                                                                             forall
;                                                                                                                                                                                                                               (pure_result:
;                                                                                                                                                                                                                               Prims.unit)
;                                                                                                                                                                                                                             .
;                                                                                                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                                                                                                                                     x'
;                                                                                                                                                                                                                                     b
;                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                       FStar.Seq.Base.length
;                                                                                                                                                                                                                                         x'
; 
;                                                                                                                                                                                                                                     )
; 
;                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                 0
;                                                                                                                                                                                                                                 b
;                                                                                                                                                                                                                                ==
;                                                                                                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                                                                                                                                     x'
;                                                                                                                                                                                                                                     0
;                                                                                                                                                                                                                                     b
; 
;                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                 b
;                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                   b +
;                                                                                                                                                                                                                                   b
;                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                ==>
;                                                                                                                                                                                                                               (
;                                                                                                                                                                                                                                 b <=
;                                                                                                                                                                                                                                 FStar.Seq.Base.length
;                                                                                                                                                                                                                                   (
;                                                                                                                                                                                                                                     FStar.Seq.Base.slice
;                                                                                                                                                                                                                                       x
;                                                                                                                                                                                                                                       b
;                                                                                                                                                                                                                                       (
;                                                                                                                                                                                                                                         FStar.Seq.Base.length
;                                                                                                                                                                                                                                           x
; 
;                                                                                                                                                                                                                                       )
; 
;                                                                                                                                                                                                                                   )
;                                                                                                                                                                                                                                  ==>
;                                                                                                                                                                                                                                 0 <=
;                                                                                                                                                                                                                                 b &&
;                                                                                                                                                                                                                                 b <=
;                                                                                                                                                                                                                                 FStar.Seq.Base.length
;                                                                                                                                                                                                                                   (
;                                                                                                                                                                                                                                     FStar.Seq.Base.slice
;                                                                                                                                                                                                                                       x'
;                                                                                                                                                                                                                                       b
;                                                                                                                                                                                                                                       (
;                                                                                                                                                                                                                                         FStar.Seq.Base.length
;                                                                                                                                                                                                                                           x'
; 
;                                                                                                                                                                                                                                       )
; 
;                                                                                                                                                                                                                                   )
; 
;                                                                                                                                                                                                                               ) /\
;                                                                                                                                                                                                                               (
;                                                                                                                                                                                                                                 forall
;                                                                                                                                                                                                                                   (any_result:
;                                                                                                                                                                                                                                   MiniParse.Spec.Base.consumed_length
;                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                                                                                                                                         x
;                                                                                                                                                                                                                                         b
;                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                           FStar.Seq.Base.length
;                                                                                                                                                                                                                                             x
; 
;                                                                                                                                                                                                                                         )
; 
;                                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                                   )
;                                                                                                                                                                                                                                 .
;                                                                                                                                                                                                                                   b ==
;                                                                                                                                                                                                                                   any_result ==>
;                                                                                                                                                                                                                                   (
;                                                                                                                                                                                                                                     forall
;                                                                                                                                                                                                                                       (any_result:
;                                                                                                                                                                                                                                       FStar.Seq.Base.seq
;                                                                                                                                                                                                                                         MiniParse.Spec.Base.byte
;                                                                                                                                                                                                                                       )
;                                                                                                                                                                                                                                     .
;                                                                                                                                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                                                                             x'
;                                                                                                                                                                                                                                             b
;                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                                                                                                                 x'
; 
;                                                                                                                                                                                                                                             )
; 
;                                                                                                                                                                                                                                         )
;                                                                                                                                                                                                                                         0
;                                                                                                                                                                                                                                         b
;                                                                                                                                                                                                                                        ==
;                                                                                                                                                                                                                                       any_result ==>
;                                                                                                                                                                                                                                       (
;                                                                                                                                                                                                                                         b <=
;                                                                                                                                                                                                                                         FStar.Seq.Base.length
;                                                                                                                                                                                                                                           (
;                                                                                                                                                                                                                                             FStar.Seq.Base.slice
;                                                                                                                                                                                                                                               x
;                                                                                                                                                                                                                                               b
;                                                                                                                                                                                                                                               (
;                                                                                                                                                                                                                                                 FStar.Seq.Base.length
;                                                                                                                                                                                                                                                   x
; 
;                                                                                                                                                                                                                                               )
; 
;                                                                                                                                                                                                                                           )
;                                                                                                                                                                                                                                          ==>
;                                                                                                                                                                                                                                         0 <=
;                                                                                                                                                                                                                                         b &&
;                                                                                                                                                                                                                                         b <=
;                                                                                                                                                                                                                                         FStar.Seq.Base.length
;                                                                                                                                                                                                                                           (
;                                                                                                                                                                                                                                             FStar.Seq.Base.slice
;                                                                                                                                                                                                                                               x
;                                                                                                                                                                                                                                               b
;                                                                                                                                                                                                                                               (
;                                                                                                                                                                                                                                                 FStar.Seq.Base.length
;                                                                                                                                                                                                                                                   x
; 
;                                                                                                                                                                                                                                               )
; 
;                                                                                                                                                                                                                                           )
; 
;                                                                                                                                                                                                                                       ) /\
;                                                                                                                                                                                                                                       (
;                                                                                                                                                                                                                                         forall
;                                                                                                                                                                                                                                           (any_result:
;                                                                                                                                                                                                                                           MiniParse.Spec.Base.consumed_length
;                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                 x
;                                                                                                                                                                                                                                                 b
;                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                   FStar.Seq.Base.length
;                                                                                                                                                                                                                                                     x
; 
;                                                                                                                                                                                                                                                 )
; 
;                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                           )
;                                                                                                                                                                                                                                         .
;                                                                                                                                                                                                                                           b ==
;                                                                                                                                                                                                                                           any_result ==>
;                                                                                                                                                                                                                                           (
;                                                                                                                                                                                                                                             forall
;                                                                                                                                                                                                                                               (any_result:
;                                                                                                                                                                                                                                               FStar.Seq.Base.seq
;                                                                                                                                                                                                                                                 MiniParse.Spec.Base.byte
;                                                                                                                                                                                                                                               )
;                                                                                                                                                                                                                                             .
;                                                                                                                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                     x
;                                                                                                                                                                                                                                                     b
;                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                       FStar.Seq.Base.length
;                                                                                                                                                                                                                                                         x
; 
;                                                                                                                                                                                                                                                     )
; 
;                                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                                 0
;                                                                                                                                                                                                                                                 b
;                                                                                                                                                                                                                                                ==
;                                                                                                                                                                                                                                               any_result ==>
;                                                                                                                                                                                                                                               (
;                                                                                                                                                                                                                                                 forall
;                                                                                                                                                                                                                                                   (any_result:
;                                                                                                                                                                                                                                                   Prims.logical)
;                                                                                                                                                                                                                                                 .
;                                                                                                                                                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                         x'
;                                                                                                                                                                                                                                                         b
;                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                           FStar.Seq.Base.length
;                                                                                                                                                                                                                                                             x'
; 
;                                                                                                                                                                                                                                                         )
; 
;                                                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                                                     0
;                                                                                                                                                                                                                                                     b
;                                                                                                                                                                                                                                                    ==
;                                                                                                                                                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                         x
;                                                                                                                                                                                                                                                         b
;                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                           FStar.Seq.Base.length
;                                                                                                                                                                                                                                                             x
; 
;                                                                                                                                                                                                                                                         )
; 
;                                                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                                                     0
;                                                                                                                                                                                                                                                     b
;                                                                                                                                                                                                                                                    ==
;                                                                                                                                                                                                                                                   any_result ==>
;                                                                                                                                                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                         x'
;                                                                                                                                                                                                                                                         b
;                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                           FStar.Seq.Base.length
;                                                                                                                                                                                                                                                             x'
; 
;                                                                                                                                                                                                                                                         )
; 
;                                                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                                                     0
;                                                                                                                                                                                                                                                     b
;                                                                                                                                                                                                                                                    ==
;                                                                                                                                                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                         x
;                                                                                                                                                                                                                                                         b
;                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                           FStar.Seq.Base.length
;                                                                                                                                                                                                                                                             x
; 
;                                                                                                                                                                                                                                                         )
; 
;                                                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                                                     0
;                                                                                                                                                                                                                                                     b
;                                                                                                                                                                                                                                                    /\
;                                                                                                                                                                                                                                                   (
;                                                                                                                                                                                                                                                     forall
;                                                                                                                                                                                                                                                       (pure_result:
;                                                                                                                                                                                                                                                       Prims.unit)
;                                                                                                                                                                                                                                                     .
;                                                                                                                                                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                             x'
;                                                                                                                                                                                                                                                             b
;                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                                                                                                                                 x'
; 
;                                                                                                                                                                                                                                                             )
; 
;                                                                                                                                                                                                                                                         )
;                                                                                                                                                                                                                                                         0
;                                                                                                                                                                                                                                                         b
;                                                                                                                                                                                                                                                        ==
;                                                                                                                                                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                             x
;                                                                                                                                                                                                                                                             b
;                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                                                                                                                                 x
; 
;                                                                                                                                                                                                                                                             )
; 
;                                                                                                                                                                                                                                                         )
;                                                                                                                                                                                                                                                         0
;                                                                                                                                                                                                                                                         b
;                                                                                                                                                                                                                                                        ==>
;                                                                                                                                                                                                                                                       MiniParse.Spec.Base.no_lookahead_on
;                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                           p'
;                                                                                                                                                                                                                                                             b
; 
;                                                                                                                                                                                                                                                         )
;                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                             x
;                                                                                                                                                                                                                                                             b
;                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                                                                                                                                 x
; 
;                                                                                                                                                                                                                                                             )
; 
;                                                                                                                                                                                                                                                         )
;                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                             x'
;                                                                                                                                                                                                                                                             b
;                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                                                                                                                                 x'
; 
;                                                                                                                                                                                                                                                             )
; 
;                                                                                                                                                                                                                                                         )
;                                                                                                                                                                                                                                                        /\
;                                                                                                                                                                                                                                                       (
;                                                                                                                                                                                                                                                         forall
;                                                                                                                                                                                                                                                           (pure_result:
;                                                                                                                                                                                                                                                           Prims.unit)
;                                                                                                                                                                                                                                                         .
;                                                                                                                                                                                                                                                           MiniParse.Spec.Base.no_lookahead_on
;                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                               p'
;                                                                                                                                                                                                                                                                 b
; 
;                                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                                 x
;                                                                                                                                                                                                                                                                 b
;                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                   FStar.Seq.Base.length
;                                                                                                                                                                                                                                                                     x
; 
;                                                                                                                                                                                                                                                                 )
; 
;                                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                                 x'
;                                                                                                                                                                                                                                                                 b
;                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                   FStar.Seq.Base.length
;                                                                                                                                                                                                                                                                     x'
; 
;                                                                                                                                                                                                                                                                 )
; 
;                                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                                            ==>
;                                                                                                                                                                                                                                                           Some?
;                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                               p'
;                                                                                                                                                                                                                                                                 b
;                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                                     x'
;                                                                                                                                                                                                                                                                     b
;                                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                                       FStar.Seq.Base.length
;                                                                                                                                                                                                                                                                         x'
; 
;                                                                                                                                                                                                                                                                     )
; 
;                                                                                                                                                                                                                                                                 )
; 
;                                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                                            /\
;                                                                                                                                                                                                                                                           (
;                                                                                                                                                                                                                                                             forall
;                                                                                                                                                                                                                                                               (pure_result:
;                                                                                                                                                                                                                                                               Prims.unit)
;                                                                                                                                                                                                                                                             .
;                                                                                                                                                                                                                                                               Some?
;                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                   p'
;                                                                                                                                                                                                                                                                     b
;                                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                                         x'
;                                                                                                                                                                                                                                                                         b
;                                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                                           FStar.Seq.Base.length
;                                                                                                                                                                                                                                                                             x'
; 
;                                                                                                                                                                                                                                                                         )
; 
;                                                                                                                                                                                                                                                                     )
; 
;                                                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                                                ==>
;                                                                                                                                                                                                                                                               (
;                                                                                                                                                                                                                                                                 forall
;                                                                                                                                                                                                                                                                   (any_result:
;                                                                                                                                                                                                                                                                   FStar.Pervasives.Native.option
;                                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                                       t' &
;                                                                                                                                                                                                                                                                       MiniParse.Spec.Base.consumed_length
;                                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                                             x'
;                                                                                                                                                                                                                                                                             b
;                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                                                                                                                                                 x'
; 
;                                                                                                                                                                                                                                                                             )
; 
;                                                                                                                                                                                                                                                                         )
; 
;                                                                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                                                                   )
;                                                                                                                                                                                                                                                                 .
;                                                                                                                                                                                                                                                                   p'
;                                                                                                                                                                                                                                                                     b
;                                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                                         x'
;                                                                                                                                                                                                                                                                         b
;                                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                                           FStar.Seq.Base.length
;                                                                                                                                                                                                                                                                             x'
; 
;                                                                                                                                                                                                                                                                         )
; 
;                                                                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                                                                    ==
;                                                                                                                                                                                                                                                                   any_result ==>
;                                                                                                                                                                                                                                                                   (
;                                                                                                                                                                                                                                                                     ~(
;                                                                                                                                                                                                                                                                       Some?
;                                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                                           p'
;                                                                                                                                                                                                                                                                             b
;                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                                                 x'
;                                                                                                                                                                                                                                                                                 b
;                                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                                   FStar.Seq.Base.length
;                                                                                                                                                                                                                                                                                     x'
; 
;                                                                                                                                                                                                                                                                                 )
; 
;                                                                                                                                                                                                                                                                             )
; 
;                                                                                                                                                                                                                                                                         )
; 
;                                                                                                                                                                                                                                                                     ) ==>
;                                                                                                                                                                                                                                                                     Prims.l_False
;                                                                                                                                                                                                                                                                   ) /\
;                                                                                                                                                                                                                                                                   (
;                                                                                                                                                                                                                                                                     forall
;                                                                                                                                                                                                                                                                       (b:
;                                                                                                                                                                                                                                                                       t' &
;                                                                                                                                                                                                                                                                       MiniParse.Spec.Base.consumed_length
;                                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                                             x'
;                                                                                                                                                                                                                                                                             b
;                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                                                                                                                                                 x'
; 
;                                                                                                                                                                                                                                                                             )
; 
;                                                                                                                                                                                                                                                                         )
;                                                                                                                                                                                                                                                                       )
;                                                                                                                                                                                                                                                                     .
;                                                                                                                                                                                                                                                                       p'
;                                                                                                                                                                                                                                                                         b
;                                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                                             x'
;                                                                                                                                                                                                                                                                             b
;                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                                                                                                                                                 x'
; 
;                                                                                                                                                                                                                                                                             )
; 
;                                                                                                                                                                                                                                                                         )
;                                                                                                                                                                                                                                                                        ==
;                                                                                                                                                                                                                                                                       FStar.Pervasives.Native.Some
;                                                                                                                                                                                                                                                                       b ==>
;                                                                                                                                                                                                                                                                       (
;                                                                                                                                                                                                                                                                         forall
;                                                                                                                                                                                                                                                                           (b:
;                                                                                                                                                                                                                                                                           t')
;                                                                                                                                                                                                                                                                           (b:
;                                                                                                                                                                                                                                                                           MiniParse.Spec.Base.consumed_length
;                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                                                 x'
;                                                                                                                                                                                                                                                                                 b
;                                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                                   FStar.Seq.Base.length
;                                                                                                                                                                                                                                                                                     x'
; 
;                                                                                                                                                                                                                                                                                 )
; 
;                                                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                                                           )
;                                                                                                                                                                                                                                                                         .
;                                                                                                                                                                                                                                                                           b ==
;                                                                                                                                                                                                                                                                           (b,
;                                                                                                                                                                                                                                                                           b) ==>
;                                                                                                                                                                                                                                                                           b ==
;                                                                                                                                                                                                                                                                           b /\
;                                                                                                                                                                                                                                                                           (
;                                                                                                                                                                                                                                                                             forall
;                                                                                                                                                                                                                                                                               (pure_result:
;                                                                                                                                                                                                                                                                               Prims.unit)
;                                                                                                                                                                                                                                                                             .
;                                                                                                                                                                                                                                                                               b ==
;                                                                                                                                                                                                                                                                               b ==>
;                                                                                                                                                                                                                                                                               p
;                                                                                                                                                                                                                                                                                 pure_result
; 
;                                                                                                                                                                                                                                                                           )
;                                                                                                                                                                                                                                                                       )
;                                                                                                                                                                                                                                                                   )
;                                                                                                                                                                                                                                                               )
;                                                                                                                                                                                                                                                           )
;                                                                                                                                                                                                                                                       )
;                                                                                                                                                                                                                                                   )
;                                                                                                                                                                                                                                               )
;                                                                                                                                                                                                                                           )
;                                                                                                                                                                                                                                       )
;                                                                                                                                                                                                                                   )
;                                                                                                                                                                                                                               )
;                                                                                                                                                                                                                           )
;                                                                                                                                                                                                                       )
;                                                                                                                                                                                                                   )
;                                                                                                                                                                                                               )
;                                                                                                                                                                                                           )
;                                                                                                                                                                                                       )
;                                                                                                                                                                                                   )
;                                                                                                                                                                                               )
;                                                                                                                                                                                           )
;                                                                                                                                                                                       )
;                                                                                                                                                                                   )
;                                                                                                                                                                               )
;                                                                                                                                                                           )
;                                                                                                                                                                       )
;                                                                                                                                                                   )
;                                                                                                                                                               )
;                                                                                                                                                           )
;                                                                                                                                                       )
;                                                                                                                                                   )
;                                                                                                                                               )
;                                                                                                                                           )
;                                                                                                                                       )
;                                                                                                                                   )
;                                                                                                                               )
;                                                                                                                           )
;                                                                                                                       )
;                                                                                                                   )
;                                                                                                               )
;                                                                                                           )
;                                                                                                       )
;                                                                                                   ))
;                                                                                           ))))))))))
;                                                   ))))) /\
;                                   (forall (any_result:
;                                       (_: Prims.unit
;                                           -> FStar.Pervasives.Lemma
;                                               (requires
;                                                 FStar.Seq.Base.slice x' 0 b ==
;                                                 FStar.Seq.Base.slice x 0 b)
;                                               (ensures
;                                                 Some? (MiniParse.Spec.Combinators.and_then_bare p
;                                                       p'
;                                                       x') /\
;                                                 (let FStar.Pervasives.Native.Some v' =
;                                                     MiniParse.Spec.Combinators.and_then_bare p p' x'
;                                                   in
;                                                   (let y', _ = v' in
;                                                     b == y')
;                                                   <:
;                                                   Prims.logical)))).
;                                       (forall (_: Prims.unit).
;                                           (*  - Could not prove post-condition
; *)
;                                           (b <= FStar.Seq.Base.length x' ==>
;                                             0 <= b && b <= FStar.Seq.Base.length x') /\
;                                           (forall (any_result:
;                                               MiniParse.Spec.Base.consumed_length x').
;                                               b == any_result ==>
;                                               (forall (any_result:
;                                                   FStar.Seq.Base.seq MiniParse.Spec.Base.byte).
;                                                   FStar.Seq.Base.slice x' 0 b == any_result ==>
;                                                   b <= FStar.Seq.Base.length x ==>
;                                                   0 <= b && b <= FStar.Seq.Base.length x))) /\
;                                       (forall (any_result: (_: Prims.unit -> Type0)).
;                                           (fun _ ->
;                                               FStar.Seq.Base.slice x' 0 b ==
;                                               FStar.Seq.Base.slice x 0 b) ==
;                                           any_result ==>
;                                           (forall (_: Prims.unit).
;                                               (*  - Could not prove post-condition
; *)
;                                               Some? (MiniParse.Spec.Combinators.and_then_bare p
;                                                     p'
;                                                     x') ==>
;                                               (forall (any_result:
;                                                   FStar.Pervasives.Native.option (t' &
;                                                       MiniParse.Spec.Base.consumed_length x')).
;                                                   MiniParse.Spec.Combinators.and_then_bare p p' x' ==
;                                                   any_result ==>
;                                                   ~(Some? (MiniParse.Spec.Combinators.and_then_bare p
;                                                           p'
;                                                           x')) ==>
;                                                   Prims.l_False)) /\
;                                           (forall (any_result: (_: Prims.unit -> Type0)).
;                                               (fun _ ->
;                                                   Some? (MiniParse.Spec.Combinators.and_then_bare p
;                                                         p'
;                                                         x') /\
;                                                   (let FStar.Pervasives.Native.Some v' =
;                                                       MiniParse.Spec.Combinators.and_then_bare p
;                                                         p'
;                                                         x'
;                                                     in
;                                                     (let y', _ = v' in
;                                                       b == y')
;                                                     <:
;                                                     Prims.logical)) ==
;                                               any_result ==>
;                                               (forall (pure_result: Prims.unit).
;                                                   (FStar.Seq.Base.slice x' 0 b ==
;                                                     FStar.Seq.Base.slice x 0 b ==>
;                                                     Some? (MiniParse.Spec.Combinators.and_then_bare p
;                                                           p'
;                                                           x') /\
;                                                     (let FStar.Pervasives.Native.Some v' =
;                                                         MiniParse.Spec.Combinators.and_then_bare p
;                                                           p'
;                                                           x'
;                                                       in
;                                                       (let y', _ = v' in
;                                                         b == y')
;                                                       <:
;                                                       Prims.logical)) ==>
;                                                   k pure_result)))))) /\
;                             (~(b <= FStar.Seq.Base.length x' = true) ==>
;                               (forall (b: Prims.bool).
;                                   b <= FStar.Seq.Base.length x' == b ==>
;                                   (forall (any_result: Prims.unit). k any_result))))))) /\
;             (~(Some? (MiniParse.Spec.Combinators.and_then_bare p p' x)) ==>
;               (forall (b:
;                   FStar.Pervasives.Native.option (t' & MiniParse.Spec.Base.consumed_length x)).
;                   MiniParse.Spec.Combinators.and_then_bare p p' x == b ==>
;                   (forall (any_result: Prims.unit). k any_result)))))


; Context: While encoding a query
; While typechecking the top-level declaration `let and_then_no_lookahead_on`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(MiniParse.Spec.Base.bare_parser @x0))
(HasType @x3
(Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc @x1
@x0))
(HasType @x4
MiniParse.Spec.Base.bytes)
(HasType @x5
MiniParse.Spec.Base.bytes))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Prims.pure_post Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(343,6-343,20); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(343,6-343,20); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(MiniParse.Spec.Base.no_lookahead @x0
@x2)
)


;; def=MiniParse.Spec.Combinators.fst(344,6-344,17); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(344,6-344,17); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(MiniParse.Spec.Base.injective @x0
@x2)
)


;; def=MiniParse.Spec.Combinators.fst(345,6-345,43); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x7 Term))
 (! (implies (HasType @x7
@x0)

;; def=MiniParse.Spec.Combinators.fst(345,23-345,42); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(345,23-345,42); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(MiniParse.Spec.Base.no_lookahead @x1
(ApplyTT @x3
@x7))
)
)
 
;;no pats
:qid @query.2))


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x7 Term))
 (! (implies (and (or label_1
(HasType @x7
Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(347,13-347,56); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(or label_2

;; def=MiniParse.Spec.Combinators.fst(347,13-347,56); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(347,13-347,56); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(MiniParse.Spec.Base.no_lookahead_on @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x4
@x5)
)
)
)

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(ApplyTT @x6
@x7)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(ApplyTT @x6
@x7)
)
)
:qid @query.3))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x4))))

;; def=MiniParse.Spec.Combinators.fst(351,10-351,13); use=MiniParse.Spec.Combinators.fst(351,10-351,13)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x7)
)

;; def=Prims.fst(402,2-402,97); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x9 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(Valid 
;; def=Prims.fst(402,73-402,79); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(ApplyTT @x6
@x9)
)


;; def=Prims.fst(402,84-402,87); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(Valid 
;; def=Prims.fst(402,84-402,87); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(ApplyTT @x8
@x9)
)
)
 :weight 0


:pattern ((ApplyTT @x8
@x9))
:qid @query.6))
)

;; def=Prims.fst(389,2-389,39); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(and 
;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x4)))

;; def=MiniParse.Spec.Combinators.fst(351,10-352,12); use=MiniParse.Spec.Combinators.fst(351,10-352,12)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x4)
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x4))
@x9))
)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x10 Term))
 (! (implies (HasType @x10
@x1)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(MiniParse.Spec.Base.consumed_length @x4))

;; def=MiniParse.Spec.Combinators.fst(353,11-353,17); use=MiniParse.Spec.Combinators.fst(353,11-353,17)
(= @x9
(FStar.Pervasives.Native.Mktuple2 @x1
(MiniParse.Spec.Base.consumed_length @x4)
@x10
@x11))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(and 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(355,41-355,44)
(or label_3

;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(355,41-355,44)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
)


;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.nat)

;; def=MiniParse.Spec.Combinators.fst(354,10-355,16); use=MiniParse.Spec.Combinators.fst(355,11-355,44)
(= @x11
@x12)
)

;; def=Prims.fst(402,2-402,97); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x14 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(Valid 
;; def=Prims.fst(402,73-402,79); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(ApplyTT @x8
@x14)
)


;; def=Prims.fst(402,84-402,87); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(Valid 
;; def=Prims.fst(402,84-402,87); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(ApplyTT @x13
@x14)
)
)
 :weight 0


:pattern ((ApplyTT @x13
@x14))
:qid @query.12))
)

;; def=Prims.fst(389,2-389,39); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(356,9-356,29); use=MiniParse.Spec.Combinators.fst(356,9-356,29)
(= (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxBool true))


;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(and 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(358,37-358,40)
(or label_4

;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(358,37-358,40)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))
)


;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
Prims.nat)

;; def=MiniParse.Spec.Combinators.fst(354,10-358,12); use=MiniParse.Spec.Combinators.fst(358,6-358,40)
(= @x11
@x14)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(and 
;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(358,43-396,29)
(forall ((@x15 Term))
 (! (implies (HasType @x15
Prims.unit)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(359,7-366,6)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(360,29-360,35)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(360,29-360,35)
(and 
;; def=MiniParse.Spec.Combinators.fst(358,6-358,12); use=MiniParse.Spec.Combinators.fst(360,29-360,35)
(or label_5
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(358,6-358,12); use=MiniParse.Spec.Combinators.fst(360,29-360,35)
(or label_6
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(359,7-366,6)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
(MiniParse.Spec.Base.consumed_length @x5))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(359,7-366,6)
(= @x11
@x16)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(359,7-366,6)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(359,7-366,6)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x17)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(359,7-366,6)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(360,53-360,58)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(360,53-360,58)
(and 
;; def=MiniParse.Spec.Combinators.fst(355,11-355,16); use=MiniParse.Spec.Combinators.fst(360,53-360,58)
(or label_7
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(355,11-355,16); use=MiniParse.Spec.Combinators.fst(360,53-360,58)
(or label_8
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(359,7-366,6)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(MiniParse.Spec.Base.consumed_length @x4))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(359,7-366,6)
(= @x11
@x18)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(359,7-366,6)
(forall ((@x19 Term))
 (! (implies (and (HasType @x19
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,42-175,43); use=MiniParse.Spec.Combinators.fst(359,7-366,6)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x11)
@x19)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(359,7-366,6)
(forall ((@x20 Term))
 (! (implies (and (HasType @x20
Prims.logical)

;; def=FStar.Pervasives.fsti(112,28-112,31); use=MiniParse.Spec.Combinators.fst(359,7-366,6)
(= (Prims.eq2 (FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x11))
@x20)
)

;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(359,7-366,6)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(361,12-366,5)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(361,12-366,5)
(and 
;; def=MiniParse.Spec.Combinators.fst(358,6-358,12); use=MiniParse.Spec.Combinators.fst(360,29-360,35)
(or label_9
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(358,6-358,12); use=MiniParse.Spec.Combinators.fst(360,29-360,35)
(or label_10
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(361,12-366,5)
(forall ((@x21 Term))
 (! (implies (and (HasType @x21
(MiniParse.Spec.Base.consumed_length @x5))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(361,12-366,5)
(= @x11
@x21)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(361,12-366,5)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(361,12-366,5)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x22)


;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(361,12-366,5)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
)

;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(361,12-366,5)
(and 
;; def=MiniParse.Spec.Combinators.fst(355,11-355,16); use=MiniParse.Spec.Combinators.fst(360,53-360,58)
(or label_11
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(355,11-355,16); use=MiniParse.Spec.Combinators.fst(360,53-360,58)
(or label_12
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
)
)
 
;;no pats
:qid @query.21))
)
 
;;no pats
:qid @query.20))


;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(359,7-366,6)
(forall ((@x21 Term))
 (! (implies (and (HasType @x21
(Tm_refine_8fd7340cbbec74d00bd44b355dba45e4 @x5
@x11
@x4))

;; def=MiniParse.Spec.Combinators.fst(362,5-362,17); use=MiniParse.Spec.Combinators.fst(362,5-362,17)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x5)))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(361,12-366,5)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))))

;; def=MiniParse.Spec.Combinators.fst(363,10-363,25); use=MiniParse.Spec.Combinators.fst(363,10-363,25)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x5)
@x22)


;; def=MiniParse.Spec.Combinators.fst(363,10-363,17); use=MiniParse.Spec.Combinators.fst(363,10-363,17)
(not 
;; def=MiniParse.Spec.Combinators.fst(363,10-363,17); use=MiniParse.Spec.Combinators.fst(363,10-363,17)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x5)))
)
)
label_13)
 
;;no pats
:qid @query.23))
)
 
;;no pats
:qid @query.22))
)
)
 
;;no pats
:qid @query.19))
)
 
;;no pats
:qid @query.18))
)
 
;;no pats
:qid @query.17))
)
)
 
;;no pats
:qid @query.16))
)
 
;;no pats
:qid @query.15))
)
)
 
;;no pats
:qid @query.14))


;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x15 Term))
 (! (implies (HasType @x15
Prims.unit)

;; def=Prims.fst(406,51-459,89); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and 
;; def=MiniParse.Spec.Combinators.fst(358,6-358,12); use=MiniParse.Spec.Combinators.fst(360,29-360,35)
(or label_14
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(358,6-358,12); use=MiniParse.Spec.Combinators.fst(360,29-360,35)
(or label_15
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
(MiniParse.Spec.Base.consumed_length @x5))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= @x11
@x16)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x17)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and 
;; def=MiniParse.Spec.Combinators.fst(355,11-355,16); use=MiniParse.Spec.Combinators.fst(360,53-360,58)
(or label_16
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(355,11-355,16); use=MiniParse.Spec.Combinators.fst(360,53-360,58)
(or label_17
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(MiniParse.Spec.Base.consumed_length @x4))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= @x11
@x18)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x19 Term))
 (! (implies (and (HasType @x19
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,42-175,43); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x11)
@x19)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x20 Term))
 (! (implies (and (HasType @x20
Prims.logical)

;; def=FStar.Pervasives.fsti(112,28-112,31); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (Prims.eq2 (FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x11))
@x20)
)

;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and 
;; def=MiniParse.Spec.Combinators.fst(358,6-358,12); use=MiniParse.Spec.Combinators.fst(360,29-360,35)
(or label_18
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(358,6-358,12); use=MiniParse.Spec.Combinators.fst(360,29-360,35)
(or label_19
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x21 Term))
 (! (implies (and (HasType @x21
(MiniParse.Spec.Base.consumed_length @x5))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= @x11
@x21)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x22)


;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
)

;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and 
;; def=MiniParse.Spec.Combinators.fst(355,11-355,16); use=MiniParse.Spec.Combinators.fst(360,53-360,58)
(or label_20
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(355,11-355,16); use=MiniParse.Spec.Combinators.fst(360,53-360,58)
(or label_21
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
)
)
 
;;no pats
:qid @query.31))
)
 
;;no pats
:qid @query.30))


;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x21 Term))
 (! (implies (and (HasType @x21
(Tm_refine_8fd7340cbbec74d00bd44b355dba45e4 @x5
@x11
@x4))

;; def=MiniParse.Spec.Combinators.fst(362,5-362,17); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x5)))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))))

;; def=MiniParse.Spec.Combinators.fst(363,10-363,25); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x5)
@x22)


;; def=MiniParse.Spec.Combinators.fst(363,10-363,17); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(not 
;; def=MiniParse.Spec.Combinators.fst(363,10-363,17); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x5)))
)
)
label_22)
 
;;no pats
:qid @query.33))
)
 
;;no pats
:qid @query.32))
)
)
 
;;no pats
:qid @query.29))
)
 
;;no pats
:qid @query.28))
)
 
;;no pats
:qid @query.27))
)
)
 
;;no pats
:qid @query.26))
)
 
;;no pats
:qid @query.25))


;; def=Prims.fst(406,51-406,91); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
(Prims.pure_post Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(360,13-360,59); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x11))


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x17 Term))
 (! (implies (and (or label_23
(HasType @x17
Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(362,5-362,17); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(or label_24

;; def=MiniParse.Spec.Combinators.fst(362,5-362,17); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x5)))
)

(let ((@lb18 (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x5)))
(ite (is-FStar.Pervasives.Native.Some @lb18)
(let ((@lb19 (FStar.Pervasives.Native.Some_v @lb18)))

;; def=MiniParse.Spec.Combinators.fst(365,5-365,12); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(or label_25

;; def=MiniParse.Spec.Combinators.fst(365,5-365,12); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= @x10
(FStar.Pervasives.Native.Mktuple2__1 @lb19))
)
)
Unreachable)))

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(ApplyTT @x16
@x17)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(ApplyTT @x16
@x17)
)
)
:qid @query.35))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(367,3-367,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(367,10-367,23); use=MiniParse.Spec.Combinators.fst(367,3-367,9)
(or label_26

;; def=MiniParse.Spec.Combinators.fst(367,10-367,23); use=MiniParse.Spec.Combinators.fst(367,3-367,9)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x4))
(ApplyTT @x2
@x4)))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(367,3-367,9)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(367,10-367,23); use=MiniParse.Spec.Combinators.fst(367,3-367,9)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x4))
(ApplyTT @x2
@x4)))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x4))))

;; def=MiniParse.Spec.Combinators.fst(368,8-368,30); use=MiniParse.Spec.Combinators.fst(368,8-368,30)
(= (ApplyTT @x2
@x4)
@x18)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(368,8-368,23); use=MiniParse.Spec.Combinators.fst(368,8-368,23)
(not 
;; def=MiniParse.Spec.Combinators.fst(368,8-368,23); use=MiniParse.Spec.Combinators.fst(368,8-368,23)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x4))
(ApplyTT @x2
@x4)))
)

label_27)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x19 Term))
 (! (implies (HasType @x19
@x0)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x20 Term))
 (! (implies (and (HasType @x20
(MiniParse.Spec.Base.consumed_length @x4))

;; def=MiniParse.Spec.Combinators.fst(368,8-368,23); use=MiniParse.Spec.Combinators.fst(368,8-368,23)
(= (ApplyTT @x2
@x4)
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x4))
(FStar.Pervasives.Native.Mktuple2 @x0
(MiniParse.Spec.Base.consumed_length @x4)
@x19
@x20)))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(369,3-369,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(369,10-369,23); use=MiniParse.Spec.Combinators.fst(369,3-369,9)
(or label_28

;; def=MiniParse.Spec.Combinators.fst(369,10-369,23); use=MiniParse.Spec.Combinators.fst(369,3-369,9)
(<= (BoxInt_proj_0 @x20)
(BoxInt_proj_0 @x11))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(369,3-369,9)
(forall ((@x21 Term))
 (! (implies (and (HasType @x21
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(369,10-369,23); use=MiniParse.Spec.Combinators.fst(369,3-369,9)
(<= (BoxInt_proj_0 @x20)
(BoxInt_proj_0 @x11))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(370,3-370,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(370,10-370,33); use=MiniParse.Spec.Combinators.fst(370,3-370,9)
(or label_29

;; def=MiniParse.Spec.Combinators.fst(370,10-370,33); use=MiniParse.Spec.Combinators.fst(370,3-370,9)
(<= (BoxInt_proj_0 @x20)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(370,3-370,9)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(370,10-370,33); use=MiniParse.Spec.Combinators.fst(370,3-370,9)
(<= (BoxInt_proj_0 @x20)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(371,26-371,30)
(<= (BoxInt_proj_0 @x20)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(371,26-371,30)
(and 
;; def=MiniParse.Spec.Combinators.fst(368,18-368,22); use=MiniParse.Spec.Combinators.fst(371,26-371,30)
(or label_30
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x20)))


;; def=MiniParse.Spec.Combinators.fst(368,18-368,22); use=MiniParse.Spec.Combinators.fst(371,26-371,30)
(or label_31
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x23 Term))
 (! (implies (and (HasType @x23
(MiniParse.Spec.Base.consumed_length @x4))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= @x20
@x23)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x24 Term))
 (! (implies (and (HasType @x24
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x20)
@x24)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(371,60-371,66)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(371,60-371,66)
(and 
;; def=MiniParse.Spec.Combinators.fst(358,6-358,12); use=MiniParse.Spec.Combinators.fst(371,60-371,66)
(or label_32
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(358,6-358,12); use=MiniParse.Spec.Combinators.fst(371,60-371,66)
(or label_33
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x25 Term))
 (! (implies (and (HasType @x25
(MiniParse.Spec.Base.consumed_length @x5))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= @x11
@x25)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x26 Term))
 (! (implies (and (HasType @x26
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=FStar.Seq.Base.fsti(64,23-64,24); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x26)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(371,70-371,74)
(<= (BoxInt_proj_0 @x20)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(371,70-371,74)
(and 
;; def=MiniParse.Spec.Combinators.fst(368,18-368,22); use=MiniParse.Spec.Combinators.fst(371,70-371,74)
(or label_34
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x20)))


;; def=MiniParse.Spec.Combinators.fst(368,18-368,22); use=MiniParse.Spec.Combinators.fst(371,70-371,74)
(or label_35
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x27 Term))
 (! (implies (and (HasType @x27
(MiniParse.Spec.Base.consumed_length @x4))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= @x20
@x27)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x28 Term))
 (! (implies (and (HasType @x28
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,42-175,43); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
(BoxInt 0)
@x20)
@x28)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x29 Term))
 (! (implies (and (HasType @x29
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (Prims.eq2 (FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x20)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
(BoxInt 0)
@x20))
@x29)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(371,3-371,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(371,10-371,75); use=MiniParse.Spec.Combinators.fst(371,3-371,9)
(or label_36

;; def=MiniParse.Spec.Combinators.fst(371,10-371,75); use=MiniParse.Spec.Combinators.fst(371,3-371,9)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x20)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
(BoxInt 0)
@x20))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(371,3-371,9)
(forall ((@x30 Term))
 (! (implies (and (HasType @x30
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(371,10-371,75); use=MiniParse.Spec.Combinators.fst(371,3-371,9)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x20)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
(BoxInt 0)
@x20))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(372,26-372,30)
(<= (BoxInt_proj_0 @x20)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(372,26-372,30)
(and 
;; def=MiniParse.Spec.Combinators.fst(368,18-368,22); use=MiniParse.Spec.Combinators.fst(372,26-372,30)
(or label_37
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x20)))


;; def=MiniParse.Spec.Combinators.fst(368,18-368,22); use=MiniParse.Spec.Combinators.fst(372,26-372,30)
(or label_38
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x31 Term))
 (! (implies (and (HasType @x31
(MiniParse.Spec.Base.consumed_length @x4))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= @x20
@x31)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x32 Term))
 (! (implies (and (HasType @x32
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x20)
@x32)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(372,48-372,52)
(<= (BoxInt_proj_0 @x20)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(372,48-372,52)
(and 
;; def=MiniParse.Spec.Combinators.fst(368,18-368,22); use=MiniParse.Spec.Combinators.fst(372,48-372,52)
(or label_39
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x20)))


;; def=MiniParse.Spec.Combinators.fst(368,18-368,22); use=MiniParse.Spec.Combinators.fst(372,48-372,52)
(or label_40
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x33 Term))
 (! (implies (and (HasType @x33
(MiniParse.Spec.Base.consumed_length @x4))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= @x20
@x33)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x34 Term))
 (! (implies (and (HasType @x34
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,42-175,43); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x20)
@x34)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x35 Term))
 (! (implies (and (HasType @x35
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (Prims.eq2 (FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x20)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x20))
@x35)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(372,3-372,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(372,10-372,53); use=MiniParse.Spec.Combinators.fst(372,3-372,9)
(or label_41

;; def=MiniParse.Spec.Combinators.fst(372,10-372,53); use=MiniParse.Spec.Combinators.fst(372,3-372,9)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x20)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x20))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(372,3-372,9)
(forall ((@x36 Term))
 (! (implies (and (HasType @x36
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(372,10-372,53); use=MiniParse.Spec.Combinators.fst(372,3-372,9)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x20)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x20))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(373,3-373,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(373,10-373,34); use=MiniParse.Spec.Combinators.fst(373,3-373,9)
(or label_42

;; def=MiniParse.Spec.Combinators.fst(373,10-373,34); use=MiniParse.Spec.Combinators.fst(373,3-373,9)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(373,10-373,34); use=MiniParse.Spec.Combinators.fst(373,3-373,9)
(MiniParse.Spec.Base.no_lookahead_on @x0
@x2
@x4
@x5)
)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(373,3-373,9)
(forall ((@x37 Term))
 (! (implies (and (HasType @x37
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(373,10-373,34); use=MiniParse.Spec.Combinators.fst(373,3-373,9)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(373,10-373,34); use=MiniParse.Spec.Combinators.fst(373,3-373,9)
(MiniParse.Spec.Base.no_lookahead_on @x0
@x2
@x4
@x5)
)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(374,3-374,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(374,10-374,24); use=MiniParse.Spec.Combinators.fst(374,3-374,9)
(or label_43

;; def=MiniParse.Spec.Combinators.fst(374,10-374,24); use=MiniParse.Spec.Combinators.fst(374,3-374,9)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5))
(ApplyTT @x2
@x5)))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(374,3-374,9)
(forall ((@x38 Term))
 (! (implies (and (HasType @x38
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(374,10-374,24); use=MiniParse.Spec.Combinators.fst(374,3-374,9)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5))
(ApplyTT @x2
@x5)))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x39 Term))
 (! (implies (and (HasType @x39
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5))))

;; def=MiniParse.Spec.Combinators.fst(375,8-375,24); use=MiniParse.Spec.Combinators.fst(375,8-375,24)
(= (ApplyTT @x2
@x5)
@x39)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(375,8-375,16); use=MiniParse.Spec.Combinators.fst(375,8-375,16)
(not 
;; def=MiniParse.Spec.Combinators.fst(375,8-375,16); use=MiniParse.Spec.Combinators.fst(375,8-375,16)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5))
(ApplyTT @x2
@x5)))
)

label_44)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x40 Term))
 (! (implies (and (HasType @x40
(FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5)))

;; def=MiniParse.Spec.Combinators.fst(375,8-375,16); use=MiniParse.Spec.Combinators.fst(375,8-375,16)
(= (ApplyTT @x2
@x5)
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5))
@x40))
)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x41 Term))
 (! (implies (HasType @x41
@x0)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x42 Term))
 (! (implies (and (HasType @x42
(MiniParse.Spec.Base.consumed_length @x5))

;; def=MiniParse.Spec.Combinators.fst(376,8-376,18); use=MiniParse.Spec.Combinators.fst(376,8-376,18)
(= @x40
(FStar.Pervasives.Native.Mktuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5)
@x41
@x42))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(377,3-377,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(377,10-377,21); use=MiniParse.Spec.Combinators.fst(377,3-377,9)
(or label_45

;; def=MiniParse.Spec.Combinators.fst(377,10-377,21); use=MiniParse.Spec.Combinators.fst(377,3-377,9)
(= @x19
@x41)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(377,3-377,9)
(forall ((@x43 Term))
 (! (implies (and (HasType @x43
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(377,10-377,21); use=MiniParse.Spec.Combinators.fst(377,3-377,9)
(= @x19
@x41)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(378,3-378,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(378,10-378,36); use=MiniParse.Spec.Combinators.fst(378,3-378,9)
(or label_46

;; def=MiniParse.Spec.Combinators.fst(378,10-378,36); use=MiniParse.Spec.Combinators.fst(378,3-378,9)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(378,10-378,36); use=MiniParse.Spec.Combinators.fst(378,3-378,9)
(MiniParse.Spec.Base.injective_precond @x0
@x2
@x4
@x5)
)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(378,3-378,9)
(forall ((@x44 Term))
 (! (implies (and (HasType @x44
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(378,10-378,36); use=MiniParse.Spec.Combinators.fst(378,3-378,9)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(378,10-378,36); use=MiniParse.Spec.Combinators.fst(378,3-378,9)
(MiniParse.Spec.Base.injective_precond @x0
@x2
@x4
@x5)
)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(379,3-379,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(379,10-379,43); use=MiniParse.Spec.Combinators.fst(379,3-379,9)
(or label_47

;; def=MiniParse.Spec.Combinators.fst(379,10-379,43); use=MiniParse.Spec.Combinators.fst(379,3-379,9)
(= @x20
@x42)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(379,3-379,9)
(forall ((@x45 Term))
 (! (implies (and (HasType @x45
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(379,10-379,43); use=MiniParse.Spec.Combinators.fst(379,3-379,9)
(= @x20
@x42)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and 
;; def=MiniParse.Spec.Combinators.fst(380,37-380,51); use=MiniParse.Spec.Combinators.fst(380,37-380,51)
(or label_48
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))


;; def=MiniParse.Spec.Combinators.fst(380,37-380,51); use=MiniParse.Spec.Combinators.fst(380,37-380,51)
(or label_49
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))


;; def=Prims.fst(356,2-356,58); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x46 Term))
 (! (implies (and (HasType @x46
(Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x20
@x4))

;; def=Prims.fst(356,26-356,41); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= @x46
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x47 Term))
 (! (implies (and (HasType @x47
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=MiniParse.Spec.Combinators.fst(380,7-380,51); use=MiniParse.Spec.Combinators.fst(380,7-380,51)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))
@x47)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and 
;; def=MiniParse.Spec.Combinators.fst(381,39-381,54); use=MiniParse.Spec.Combinators.fst(381,39-381,54)
(or label_50
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))


;; def=MiniParse.Spec.Combinators.fst(381,39-381,54); use=MiniParse.Spec.Combinators.fst(381,39-381,54)
(or label_51
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))


;; def=Prims.fst(356,2-356,58); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x48 Term))
 (! (implies (and (HasType @x48
(Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x20
@x5))

;; def=Prims.fst(356,26-356,41); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= @x48
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x49 Term))
 (! (implies (and (HasType @x49
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=MiniParse.Spec.Combinators.fst(381,7-381,54); use=MiniParse.Spec.Combinators.fst(381,7-381,54)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
@x49)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(383,3-383,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(383,10-383,25); use=MiniParse.Spec.Combinators.fst(383,3-383,9)
(or label_52

;; def=MiniParse.Spec.Combinators.fst(383,10-383,25); use=MiniParse.Spec.Combinators.fst(383,3-383,9)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
(ApplyTT (ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(383,3-383,9)
(forall ((@x50 Term))
 (! (implies (and (HasType @x50
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(383,10-383,25); use=MiniParse.Spec.Combinators.fst(383,3-383,9)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
(ApplyTT (ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x51 Term))
 (! (implies (and (HasType @x51
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))))

;; def=MiniParse.Spec.Combinators.fst(384,8-384,32); use=MiniParse.Spec.Combinators.fst(384,8-384,32)
(= (ApplyTT (ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
@x51)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(384,8-384,23); use=MiniParse.Spec.Combinators.fst(384,8-384,23)
(not 
;; def=MiniParse.Spec.Combinators.fst(384,8-384,23); use=MiniParse.Spec.Combinators.fst(384,8-384,23)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
(ApplyTT (ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))
)

label_53)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x52 Term))
 (! (implies (HasType @x52
@x1)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x53 Term))
 (! (implies (and (HasType @x53
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))

;; def=MiniParse.Spec.Combinators.fst(384,8-384,23); use=MiniParse.Spec.Combinators.fst(384,8-384,23)
(= (ApplyTT (ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
(FStar.Pervasives.Native.Mktuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
@x52
@x53)))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(385,3-385,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(385,10-385,30); use=MiniParse.Spec.Combinators.fst(385,3-385,9)
(or label_54

;; def=MiniParse.Spec.Combinators.fst(385,10-385,30); use=MiniParse.Spec.Combinators.fst(385,3-385,9)
(= @x11
(Prims.op_Addition @x20
@x53))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(385,3-385,9)
(forall ((@x54 Term))
 (! (implies (and (HasType @x54
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(385,10-385,30); use=MiniParse.Spec.Combinators.fst(385,3-385,9)
(= @x11
(Prims.op_Addition @x20
@x53))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(386,3-386,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(386,10-386,33); use=MiniParse.Spec.Combinators.fst(386,3-386,9)
(or label_55

;; def=MiniParse.Spec.Combinators.fst(386,10-386,33); use=MiniParse.Spec.Combinators.fst(386,3-386,9)
(<= (BoxInt_proj_0 @x53)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(386,3-386,9)
(forall ((@x55 Term))
 (! (implies (and (HasType @x55
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(386,10-386,33); use=MiniParse.Spec.Combinators.fst(386,3-386,9)
(<= (BoxInt_proj_0 @x53)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(387,3-387,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(387,10-387,34); use=MiniParse.Spec.Combinators.fst(387,3-387,9)
(or label_56

;; def=MiniParse.Spec.Combinators.fst(387,10-387,34); use=MiniParse.Spec.Combinators.fst(387,3-387,9)
(<= (BoxInt_proj_0 @x53)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(387,3-387,9)
(forall ((@x56 Term))
 (! (implies (and (HasType @x56
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(387,10-387,34); use=MiniParse.Spec.Combinators.fst(387,3-387,9)
(<= (BoxInt_proj_0 @x53)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(388,27-388,31)
(<= (BoxInt_proj_0 @x53)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(388,27-388,31)
(and 
;; def=MiniParse.Spec.Combinators.fst(384,18-384,22); use=MiniParse.Spec.Combinators.fst(388,27-388,31)
(or label_57
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x53)))


;; def=MiniParse.Spec.Combinators.fst(384,18-384,22); use=MiniParse.Spec.Combinators.fst(388,27-388,31)
(or label_58
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x53
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x57 Term))
 (! (implies (and (HasType @x57
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= @x53
@x57)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x58 Term))
 (! (implies (and (HasType @x58
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt 0)
@x53)
@x58)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(388,61-388,67)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(388,61-388,67)
(and 
;; def=MiniParse.Spec.Combinators.fst(358,6-358,12); use=MiniParse.Spec.Combinators.fst(388,61-388,67)
(or label_59
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(358,6-358,12); use=MiniParse.Spec.Combinators.fst(388,61-388,67)
(or label_60
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x59 Term))
 (! (implies (and (HasType @x59
(MiniParse.Spec.Base.consumed_length @x5))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= @x11
@x59)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x60 Term))
 (! (implies (and (HasType @x60
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=FStar.Seq.Base.fsti(64,23-64,24); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x60)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and 
;; def=Prims.fst(680,18-680,24); use=MiniParse.Spec.Combinators.fst(388,74-388,87)
(or label_61

;; def=Prims.fst(680,18-680,24); use=MiniParse.Spec.Combinators.fst(388,74-388,87)
(>= (BoxInt_proj_0 (Prims.op_Addition @x20
@x53))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=MiniParse.Spec.Combinators.fst(388,74-388,87); use=MiniParse.Spec.Combinators.fst(388,74-388,87)
(or label_62
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x20
(Prims.op_Addition @x20
@x53))))


;; def=MiniParse.Spec.Combinators.fst(388,74-388,87); use=MiniParse.Spec.Combinators.fst(388,74-388,87)
(or label_63
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (Prims.op_Addition @x20
@x53)
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)))))


;; def=Prims.fst(356,2-356,58); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x61 Term))
 (! (implies (and (HasType @x61
(Tm_refine_6c303de0c7cf6ef8ce28b57600b9d4f0 @x20
@x5
@x11))

;; def=Prims.fst(356,26-356,41); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= @x61
(Prims.op_Addition @x20
@x53))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x62 Term))
 (! (implies (and (HasType @x62
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,42-175,43); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x20
(Prims.op_Addition @x20
@x53))
@x62)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x63 Term))
 (! (implies (and (HasType @x63
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (Prims.eq2 (FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt 0)
@x53)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x20
(Prims.op_Addition @x20
@x53)))
@x63)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(388,3-388,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(388,10-388,88); use=MiniParse.Spec.Combinators.fst(388,3-388,9)
(or label_64

;; def=MiniParse.Spec.Combinators.fst(388,10-388,88); use=MiniParse.Spec.Combinators.fst(388,3-388,9)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt 0)
@x53)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x20
(Prims.op_Addition @x20
@x53)))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(388,3-388,9)
(forall ((@x64 Term))
 (! (implies (and (HasType @x64
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(388,10-388,88); use=MiniParse.Spec.Combinators.fst(388,3-388,9)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt 0)
@x53)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x20
(Prims.op_Addition @x20
@x53)))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(389,27-389,31)
(<= (BoxInt_proj_0 @x53)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(389,27-389,31)
(and 
;; def=MiniParse.Spec.Combinators.fst(384,18-384,22); use=MiniParse.Spec.Combinators.fst(389,27-389,31)
(or label_65
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x53)))


;; def=MiniParse.Spec.Combinators.fst(384,18-384,22); use=MiniParse.Spec.Combinators.fst(389,27-389,31)
(or label_66
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x53
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x65 Term))
 (! (implies (and (HasType @x65
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= @x53
@x65)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x66 Term))
 (! (implies (and (HasType @x66
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt 0)
@x53)
@x66)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(389,50-389,54)
(<= (BoxInt_proj_0 @x53)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(389,50-389,54)
(and 
;; def=MiniParse.Spec.Combinators.fst(384,18-384,22); use=MiniParse.Spec.Combinators.fst(389,50-389,54)
(or label_67
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x53)))


;; def=MiniParse.Spec.Combinators.fst(384,18-384,22); use=MiniParse.Spec.Combinators.fst(389,50-389,54)
(or label_68
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x53
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x67 Term))
 (! (implies (and (HasType @x67
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= @x53
@x67)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x68 Term))
 (! (implies (and (HasType @x68
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,42-175,43); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))
(BoxInt 0)
@x53)
@x68)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x69 Term))
 (! (implies (and (HasType @x69
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (Prims.eq2 (FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt 0)
@x53)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))
(BoxInt 0)
@x53))
@x69)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(389,3-389,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(389,10-389,55); use=MiniParse.Spec.Combinators.fst(389,3-389,9)
(or label_69

;; def=MiniParse.Spec.Combinators.fst(389,10-389,55); use=MiniParse.Spec.Combinators.fst(389,3-389,9)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt 0)
@x53)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))
(BoxInt 0)
@x53))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(389,3-389,9)
(forall ((@x70 Term))
 (! (implies (and (HasType @x70
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(389,10-389,55); use=MiniParse.Spec.Combinators.fst(389,3-389,9)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt 0)
@x53)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))
(BoxInt 0)
@x53))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(390,3-390,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(390,10-390,37); use=MiniParse.Spec.Combinators.fst(390,3-390,9)
(or label_70

;; def=MiniParse.Spec.Combinators.fst(390,10-390,37); use=MiniParse.Spec.Combinators.fst(390,3-390,9)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(390,10-390,37); use=MiniParse.Spec.Combinators.fst(390,3-390,9)
(MiniParse.Spec.Base.no_lookahead_on @x1
(ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))
)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(390,3-390,9)
(forall ((@x71 Term))
 (! (implies (and (HasType @x71
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(390,10-390,37); use=MiniParse.Spec.Combinators.fst(390,3-390,9)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(390,10-390,37); use=MiniParse.Spec.Combinators.fst(390,3-390,9)
(MiniParse.Spec.Base.no_lookahead_on @x1
(ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))
)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(391,3-391,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(391,10-391,26); use=MiniParse.Spec.Combinators.fst(391,3-391,9)
(or label_71

;; def=MiniParse.Spec.Combinators.fst(391,10-391,26); use=MiniParse.Spec.Combinators.fst(391,3-391,9)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
(ApplyTT (ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(391,3-391,9)
(forall ((@x72 Term))
 (! (implies (and (HasType @x72
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(391,10-391,26); use=MiniParse.Spec.Combinators.fst(391,3-391,9)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
(ApplyTT (ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x73 Term))
 (! (implies (and (HasType @x73
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))))

;; def=MiniParse.Spec.Combinators.fst(392,8-392,26); use=MiniParse.Spec.Combinators.fst(392,8-392,26)
(= (ApplyTT (ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))
@x73)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(392,8-392,16); use=MiniParse.Spec.Combinators.fst(392,8-392,16)
(not 
;; def=MiniParse.Spec.Combinators.fst(392,8-392,16); use=MiniParse.Spec.Combinators.fst(392,8-392,16)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
(ApplyTT (ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))))
)

label_72)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x74 Term))
 (! (implies (and (HasType @x74
(FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))))

;; def=MiniParse.Spec.Combinators.fst(392,8-392,16); use=MiniParse.Spec.Combinators.fst(392,8-392,16)
(= (ApplyTT (ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
@x74))
)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x75 Term))
 (! (implies (HasType @x75
@x1)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x76 Term))
 (! (implies (and (HasType @x76
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))

;; def=MiniParse.Spec.Combinators.fst(393,8-393,14); use=MiniParse.Spec.Combinators.fst(393,8-393,14)
(= @x74
(FStar.Pervasives.Native.Mktuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))
@x75
@x76))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(394,3-394,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(394,10-394,21); use=MiniParse.Spec.Combinators.fst(394,3-394,9)
(or label_73

;; def=MiniParse.Spec.Combinators.fst(394,10-394,21); use=MiniParse.Spec.Combinators.fst(394,3-394,9)
(= @x52
@x75)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(394,3-394,9)
(forall ((@x77 Term))
 (! (implies (and (HasType @x77
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(394,10-394,21); use=MiniParse.Spec.Combinators.fst(394,3-394,9)
(= @x52
@x75)
)

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(394,3-394,9)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(394,3-394,9)
(ApplyTT @x16
@x77)
)
)
 
;;no pats
:qid @query.96))
)
)
 
;;no pats
:qid @query.95))
)
 
;;no pats
:qid @query.94))
)
 
;;no pats
:qid @query.93))
)
)
 
;;no pats
:qid @query.92))
)
 
;;no pats
:qid @query.91))
)
)
 
;;no pats
:qid @query.90))
)
)
 
;;no pats
:qid @query.89))
)
)
 
;;no pats
:qid @query.88))
)
 
;;no pats
:qid @query.87))
)
 
;;no pats
:qid @query.86))
)
)
 
;;no pats
:qid @query.85))
)
 
;;no pats
:qid @query.84))
)
)
 
;;no pats
:qid @query.83))
)
)
 
;;no pats
:qid @query.82))
)
 
;;no pats
:qid @query.81))
)
 
;;no pats
:qid @query.80))
)
)
 
;;no pats
:qid @query.79))
)
 
;;no pats
:qid @query.78))
)
)
 
;;no pats
:qid @query.77))
)
 
;;no pats
:qid @query.76))
)
)
 
;;no pats
:qid @query.75))
)
)
 
;;no pats
:qid @query.74))
)
)
 
;;no pats
:qid @query.73))
)
)
 
;;no pats
:qid @query.72))
)
 
;;no pats
:qid @query.71))
)
)
 
;;no pats
:qid @query.70))
)
 
;;no pats
:qid @query.69))
)
)
 
;;no pats
:qid @query.68))
)
 
;;no pats
:qid @query.67))
)
)
 
;;no pats
:qid @query.66))
)
 
;;no pats
:qid @query.65))
)
)
 
;;no pats
:qid @query.64))
)
)
 
;;no pats
:qid @query.63))
)
)
 
;;no pats
:qid @query.62))
)
)
 
;;no pats
:qid @query.61))
)
 
;;no pats
:qid @query.60))
)
 
;;no pats
:qid @query.59))
)
)
 
;;no pats
:qid @query.58))
)
 
;;no pats
:qid @query.57))
)
)
 
;;no pats
:qid @query.56))
)
)
 
;;no pats
:qid @query.55))
)
)
 
;;no pats
:qid @query.54))
)
 
;;no pats
:qid @query.53))
)
 
;;no pats
:qid @query.52))
)
)
 
;;no pats
:qid @query.51))
)
 
;;no pats
:qid @query.50))
)
)
 
;;no pats
:qid @query.49))
)
)
 
;;no pats
:qid @query.48))
)
 
;;no pats
:qid @query.47))
)
 
;;no pats
:qid @query.46))
)
)
 
;;no pats
:qid @query.45))
)
 
;;no pats
:qid @query.44))
)
)
 
;;no pats
:qid @query.43))
)
 
;;no pats
:qid @query.42))
)
)
 
;;no pats
:qid @query.41))
)
)
 
;;no pats
:qid @query.40))
)
)
 
;;no pats
:qid @query.39))
)
 
;;no pats
:qid @query.38))
)
)
 
;;no pats
:qid @query.37))
)
 
;;no pats
:qid @query.36))
)
)
 
;;no pats
:qid @query.34))
)
)
 
;;no pats
:qid @query.24))


;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x15 Term))
 (! (implies (HasType @x15
(Tm_arrow_4139f816cf75a5e57bc789d1abf8eb5b @x10
@x3
@x2
@x0
@x1
@x4
@x11
@x5))

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(and 
;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x16 Term))
 (! (implies (HasType @x16
Prims.unit)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(396,25-396,26)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(396,25-396,26)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(396,25-396,26)
(and 
;; def=MiniParse.Spec.Combinators.fst(358,6-358,12); use=MiniParse.Spec.Combinators.fst(360,29-360,35)
(or label_74
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(358,6-358,12); use=MiniParse.Spec.Combinators.fst(360,29-360,35)
(or label_75
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(396,25-396,26)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
(MiniParse.Spec.Base.consumed_length @x5))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(396,25-396,26)
(= @x11
@x17)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(396,25-396,26)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(396,25-396,26)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x18)


;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(396,25-396,26)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
)

;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(396,25-396,26)
(and 
;; def=MiniParse.Spec.Combinators.fst(355,11-355,16); use=MiniParse.Spec.Combinators.fst(360,53-360,58)
(or label_76
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(355,11-355,16); use=MiniParse.Spec.Combinators.fst(360,53-360,58)
(or label_77
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
)
)
 
;;no pats
:qid @query.100))
)
 
;;no pats
:qid @query.99))
)
)
 
;;no pats
:qid @query.98))


;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe)

;; def=FStar.Classical.fsti(80,8-80,9); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(= (Tm_abs_e5454e1b3f59315c18dff8f4b08e2baa @x5
@x11
@x4)
@x16)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(and 
;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(362,5-362,17); use=MiniParse.Spec.Combinators.fst(396,25-396,26)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x5)))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(396,25-396,26)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))))

;; def=MiniParse.Spec.Combinators.fst(363,21-363,25); use=MiniParse.Spec.Combinators.fst(396,25-396,26)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x5)
@x18)


;; def=MiniParse.Spec.Combinators.fst(363,21-363,25); use=MiniParse.Spec.Combinators.fst(396,25-396,26)
(not 
;; def=MiniParse.Spec.Combinators.fst(363,21-363,25); use=MiniParse.Spec.Combinators.fst(396,25-396,26)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x5)))
)
)
label_78)
 
;;no pats
:qid @query.103))
)
 
;;no pats
:qid @query.102))


;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe)

;; def=FStar.Classical.fsti(80,11-80,12); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(= (Tm_abs_31d280ef77bc35bcba85448c74705836 @x1
@x5
@x0
@x2
@x3
@x10)
@x17)
)

;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(396,11-396,24)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
Prims.unit)

;; def=FStar.Classical.fsti(83,12-83,25); use=MiniParse.Spec.Combinators.fst(396,11-396,24)
(implies 
;; def=MiniParse.Spec.Combinators.fst(360,13-360,59); use=MiniParse.Spec.Combinators.fst(396,11-396,24)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x11))


;; def=MiniParse.Spec.Combinators.fst(361,12-366,5); use=MiniParse.Spec.Combinators.fst(396,11-396,24)
(and 
;; def=MiniParse.Spec.Combinators.fst(362,5-362,17); use=MiniParse.Spec.Combinators.fst(396,11-396,24)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x5)))

(let ((@lb19 (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x5)))
(ite (is-FStar.Pervasives.Native.Some @lb19)
(let ((@lb20 (FStar.Pervasives.Native.Some_v @lb19)))

;; def=MiniParse.Spec.Combinators.fst(365,5-365,12); use=MiniParse.Spec.Combinators.fst(396,11-396,24)
(= @x10
(FStar.Pervasives.Native.Mktuple2__1 @lb20))
)
Unreachable)))
)
)

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(396,11-396,24)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(396,11-396,24)
(ApplyTT @x13
@x18)
)
)
 
;;no pats
:qid @query.105))
)
 
;;no pats
:qid @query.104))
)
)
 
;;no pats
:qid @query.101))
)
)
 
;;no pats
:qid @query.97))
)
)
 
;;no pats
:qid @query.13))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(not 
;; def=MiniParse.Spec.Combinators.fst(356,9-356,29); use=MiniParse.Spec.Combinators.fst(356,9-356,29)
(= (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
Prims.bool)

;; def=MiniParse.Spec.Combinators.fst(356,9-397,13); use=MiniParse.Spec.Combinators.fst(356,9-397,13)
(= (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
@x14)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x15 Term))
 (! (implies (HasType @x15
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(Valid 
;; def=Prims.fst(451,90-451,102); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(ApplyTT @x13
@x15)
)
)
 
;;no pats
:qid @query.107))
)
 
;;no pats
:qid @query.106))
))
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))

(implies 
;; def=Prims.fst(389,19-389,21); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(not 
;; def=MiniParse.Spec.Combinators.fst(351,10-351,13); use=MiniParse.Spec.Combinators.fst(351,10-351,13)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x4))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x4)))
)


;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x4))))

;; def=MiniParse.Spec.Combinators.fst(351,10-398,7); use=MiniParse.Spec.Combinators.fst(351,10-398,7)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x9)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x10 Term))
 (! (implies (HasType @x10
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(Valid 
;; def=Prims.fst(451,90-451,102); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(ApplyTT @x8
@x10)
)
)
 
;;no pats
:qid @query.109))
)
 
;;no pats
:qid @query.108))
))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 8714496)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_78")
(eval label_78)
(echo "label_77")
(eval label_77)
(echo "label_76")
(eval label_76)
(echo "label_75")
(eval label_75)
(echo "label_74")
(eval label_74)
(echo "label_73")
(eval label_73)
(echo "label_72")
(eval label_72)
(echo "label_71")
(eval label_71)
(echo "label_70")
(eval label_70)
(echo "label_69")
(eval label_69)
(echo "label_68")
(eval label_68)
(echo "label_67")
(eval label_67)
(echo "label_66")
(eval label_66)
(echo "label_65")
(eval label_65)
(echo "label_64")
(eval label_64)
(echo "label_63")
(eval label_63)
(echo "label_62")
(eval label_62)
(echo "label_61")
(eval label_61)
(echo "label_60")
(eval label_60)
(echo "label_59")
(eval label_59)
(echo "label_58")
(eval label_58)
(echo "label_57")
(eval label_57)
(echo "label_56")
(eval label_56)
(echo "label_55")
(eval label_55)
(echo "label_54")
(eval label_54)
(echo "label_53")
(eval label_53)
(echo "label_52")
(eval label_52)
(echo "label_51")
(eval label_51)
(echo "label_50")
(eval label_50)
(echo "label_49")
(eval label_49)
(echo "label_48")
(eval label_48)
(echo "label_47")
(eval label_47)
(echo "label_46")
(eval label_46)
(echo "label_45")
(eval label_45)
(echo "label_44")
(eval label_44)
(echo "label_43")
(eval label_43)
(echo "label_42")
(eval label_42)
(echo "label_41")
(eval label_41)
(echo "label_40")
(eval label_40)
(echo "label_39")
(eval label_39)
(echo "label_38")
(eval label_38)
(echo "label_37")
(eval label_37)
(echo "label_36")
(eval label_36)
(echo "label_35")
(eval label_35)
(echo "label_34")
(eval label_34)
(echo "label_33")
(eval label_33)
(echo "label_32")
(eval label_32)
(echo "label_31")
(eval label_31)
(echo "label_30")
(eval label_30)
(echo "label_29")
(eval label_29)
(echo "label_28")
(eval label_28)
(echo "label_27")
(eval label_27)
(echo "label_26")
(eval label_26)
(echo "label_25")
(eval label_25)
(echo "label_24")
(eval label_24)
(echo "label_23")
(eval label_23)
(echo "label_22")
(eval label_22)
(echo "label_21")
(eval label_21)
(echo "label_20")
(eval label_20)
(echo "label_19")
(eval label_19)
(echo "label_18")
(eval label_18)
(echo "label_17")
(eval label_17)
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.and_then_no_lookahead_on, 1)
; STATUS: unknown because (incomplete quantifiers)

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(push) ;; push{0

; <fuel='2' ifuel='2'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel (SFuel ZFuel)))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(MiniParse.Spec.Base.bare_parser @x0))
(HasType @x3
(Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc @x1
@x0))
(HasType @x4
MiniParse.Spec.Base.bytes)
(HasType @x5
MiniParse.Spec.Base.bytes))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Prims.pure_post Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(343,6-343,20); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(343,6-343,20); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(MiniParse.Spec.Base.no_lookahead @x0
@x2)
)


;; def=MiniParse.Spec.Combinators.fst(344,6-344,17); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(344,6-344,17); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(MiniParse.Spec.Base.injective @x0
@x2)
)


;; def=MiniParse.Spec.Combinators.fst(345,6-345,43); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x7 Term))
 (! (implies (HasType @x7
@x0)

;; def=MiniParse.Spec.Combinators.fst(345,23-345,42); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(345,23-345,42); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(MiniParse.Spec.Base.no_lookahead @x1
(ApplyTT @x3
@x7))
)
)
 
;;no pats
:qid @query.2))


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x7 Term))
 (! (implies (and (or label_1
(HasType @x7
Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(347,13-347,56); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(or label_2

;; def=MiniParse.Spec.Combinators.fst(347,13-347,56); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(347,13-347,56); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(MiniParse.Spec.Base.no_lookahead_on @x1
(MiniParse.Spec.Combinators.and_then_bare @x0
@x1
@x2
@x3)
@x4
@x5)
)
)
)

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(ApplyTT @x6
@x7)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(ApplyTT @x6
@x7)
)
)
:qid @query.3))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x4))))

;; def=MiniParse.Spec.Combinators.fst(351,10-351,13); use=MiniParse.Spec.Combinators.fst(351,10-351,13)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x7)
)

;; def=Prims.fst(402,2-402,97); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x9 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(Valid 
;; def=Prims.fst(402,73-402,79); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(ApplyTT @x6
@x9)
)


;; def=Prims.fst(402,84-402,87); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(Valid 
;; def=Prims.fst(402,84-402,87); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(ApplyTT @x8
@x9)
)
)
 :weight 0


:pattern ((ApplyTT @x8
@x9))
:qid @query.6))
)

;; def=Prims.fst(389,2-389,39); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(and 
;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x4)))

;; def=MiniParse.Spec.Combinators.fst(351,10-352,12); use=MiniParse.Spec.Combinators.fst(351,10-352,12)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x4)
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x4))
@x9))
)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x10 Term))
 (! (implies (HasType @x10
@x1)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(MiniParse.Spec.Base.consumed_length @x4))

;; def=MiniParse.Spec.Combinators.fst(353,11-353,17); use=MiniParse.Spec.Combinators.fst(353,11-353,17)
(= @x9
(FStar.Pervasives.Native.Mktuple2 @x1
(MiniParse.Spec.Base.consumed_length @x4)
@x10
@x11))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(and 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(355,41-355,44)
(or label_3

;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(355,41-355,44)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
)


;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.nat)

;; def=MiniParse.Spec.Combinators.fst(354,10-355,16); use=MiniParse.Spec.Combinators.fst(355,11-355,44)
(= @x11
@x12)
)

;; def=Prims.fst(402,2-402,97); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x14 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(Valid 
;; def=Prims.fst(402,73-402,79); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(ApplyTT @x8
@x14)
)


;; def=Prims.fst(402,84-402,87); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(Valid 
;; def=Prims.fst(402,84-402,87); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(ApplyTT @x13
@x14)
)
)
 :weight 0


:pattern ((ApplyTT @x13
@x14))
:qid @query.12))
)

;; def=Prims.fst(389,2-389,39); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(356,9-356,29); use=MiniParse.Spec.Combinators.fst(356,9-356,29)
(= (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxBool true))


;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(and 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(358,37-358,40)
(or label_4

;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(358,37-358,40)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))
)


;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
Prims.nat)

;; def=MiniParse.Spec.Combinators.fst(354,10-358,12); use=MiniParse.Spec.Combinators.fst(358,6-358,40)
(= @x11
@x14)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(and 
;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(358,43-396,29)
(forall ((@x15 Term))
 (! (implies (HasType @x15
Prims.unit)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(359,7-366,6)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(360,29-360,35)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(360,29-360,35)
(and 
;; def=MiniParse.Spec.Combinators.fst(358,6-358,12); use=MiniParse.Spec.Combinators.fst(360,29-360,35)
(or label_5
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(358,6-358,12); use=MiniParse.Spec.Combinators.fst(360,29-360,35)
(or label_6
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(359,7-366,6)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
(MiniParse.Spec.Base.consumed_length @x5))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(359,7-366,6)
(= @x11
@x16)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(359,7-366,6)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(359,7-366,6)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x17)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(359,7-366,6)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(360,53-360,58)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(360,53-360,58)
(and 
;; def=MiniParse.Spec.Combinators.fst(355,11-355,16); use=MiniParse.Spec.Combinators.fst(360,53-360,58)
(or label_7
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(355,11-355,16); use=MiniParse.Spec.Combinators.fst(360,53-360,58)
(or label_8
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(359,7-366,6)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(MiniParse.Spec.Base.consumed_length @x4))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(359,7-366,6)
(= @x11
@x18)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(359,7-366,6)
(forall ((@x19 Term))
 (! (implies (and (HasType @x19
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,42-175,43); use=MiniParse.Spec.Combinators.fst(359,7-366,6)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x11)
@x19)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(359,7-366,6)
(forall ((@x20 Term))
 (! (implies (and (HasType @x20
Prims.logical)

;; def=FStar.Pervasives.fsti(112,28-112,31); use=MiniParse.Spec.Combinators.fst(359,7-366,6)
(= (Prims.eq2 (FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x11))
@x20)
)

;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(359,7-366,6)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(361,12-366,5)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(361,12-366,5)
(and 
;; def=MiniParse.Spec.Combinators.fst(358,6-358,12); use=MiniParse.Spec.Combinators.fst(360,29-360,35)
(or label_9
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(358,6-358,12); use=MiniParse.Spec.Combinators.fst(360,29-360,35)
(or label_10
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(361,12-366,5)
(forall ((@x21 Term))
 (! (implies (and (HasType @x21
(MiniParse.Spec.Base.consumed_length @x5))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(361,12-366,5)
(= @x11
@x21)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(361,12-366,5)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(361,12-366,5)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x22)


;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(361,12-366,5)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
)

;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(361,12-366,5)
(and 
;; def=MiniParse.Spec.Combinators.fst(355,11-355,16); use=MiniParse.Spec.Combinators.fst(360,53-360,58)
(or label_11
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(355,11-355,16); use=MiniParse.Spec.Combinators.fst(360,53-360,58)
(or label_12
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
)
)
 
;;no pats
:qid @query.21))
)
 
;;no pats
:qid @query.20))


;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(359,7-366,6)
(forall ((@x21 Term))
 (! (implies (and (HasType @x21
(Tm_refine_8fd7340cbbec74d00bd44b355dba45e4 @x5
@x11
@x4))

;; def=MiniParse.Spec.Combinators.fst(362,5-362,17); use=MiniParse.Spec.Combinators.fst(362,5-362,17)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x5)))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(361,12-366,5)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))))

;; def=MiniParse.Spec.Combinators.fst(363,10-363,25); use=MiniParse.Spec.Combinators.fst(363,10-363,25)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x5)
@x22)


;; def=MiniParse.Spec.Combinators.fst(363,10-363,17); use=MiniParse.Spec.Combinators.fst(363,10-363,17)
(not 
;; def=MiniParse.Spec.Combinators.fst(363,10-363,17); use=MiniParse.Spec.Combinators.fst(363,10-363,17)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x5)))
)
)
label_13)
 
;;no pats
:qid @query.23))
)
 
;;no pats
:qid @query.22))
)
)
 
;;no pats
:qid @query.19))
)
 
;;no pats
:qid @query.18))
)
 
;;no pats
:qid @query.17))
)
)
 
;;no pats
:qid @query.16))
)
 
;;no pats
:qid @query.15))
)
)
 
;;no pats
:qid @query.14))


;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x15 Term))
 (! (implies (HasType @x15
Prims.unit)

;; def=Prims.fst(406,51-459,89); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and 
;; def=MiniParse.Spec.Combinators.fst(358,6-358,12); use=MiniParse.Spec.Combinators.fst(360,29-360,35)
(or label_14
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(358,6-358,12); use=MiniParse.Spec.Combinators.fst(360,29-360,35)
(or label_15
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
(MiniParse.Spec.Base.consumed_length @x5))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= @x11
@x16)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x17)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and 
;; def=MiniParse.Spec.Combinators.fst(355,11-355,16); use=MiniParse.Spec.Combinators.fst(360,53-360,58)
(or label_16
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(355,11-355,16); use=MiniParse.Spec.Combinators.fst(360,53-360,58)
(or label_17
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(MiniParse.Spec.Base.consumed_length @x4))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= @x11
@x18)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x19 Term))
 (! (implies (and (HasType @x19
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,42-175,43); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x11)
@x19)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x20 Term))
 (! (implies (and (HasType @x20
Prims.logical)

;; def=FStar.Pervasives.fsti(112,28-112,31); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (Prims.eq2 (FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x11))
@x20)
)

;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and 
;; def=MiniParse.Spec.Combinators.fst(358,6-358,12); use=MiniParse.Spec.Combinators.fst(360,29-360,35)
(or label_18
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(358,6-358,12); use=MiniParse.Spec.Combinators.fst(360,29-360,35)
(or label_19
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x21 Term))
 (! (implies (and (HasType @x21
(MiniParse.Spec.Base.consumed_length @x5))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= @x11
@x21)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x22)


;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
)

;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and 
;; def=MiniParse.Spec.Combinators.fst(355,11-355,16); use=MiniParse.Spec.Combinators.fst(360,53-360,58)
(or label_20
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(355,11-355,16); use=MiniParse.Spec.Combinators.fst(360,53-360,58)
(or label_21
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
)
)
 
;;no pats
:qid @query.31))
)
 
;;no pats
:qid @query.30))


;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x21 Term))
 (! (implies (and (HasType @x21
(Tm_refine_8fd7340cbbec74d00bd44b355dba45e4 @x5
@x11
@x4))

;; def=MiniParse.Spec.Combinators.fst(362,5-362,17); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x5)))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))))

;; def=MiniParse.Spec.Combinators.fst(363,10-363,25); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x5)
@x22)


;; def=MiniParse.Spec.Combinators.fst(363,10-363,17); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(not 
;; def=MiniParse.Spec.Combinators.fst(363,10-363,17); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x5)))
)
)
label_22)
 
;;no pats
:qid @query.33))
)
 
;;no pats
:qid @query.32))
)
)
 
;;no pats
:qid @query.29))
)
 
;;no pats
:qid @query.28))
)
 
;;no pats
:qid @query.27))
)
)
 
;;no pats
:qid @query.26))
)
 
;;no pats
:qid @query.25))


;; def=Prims.fst(406,51-406,91); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
(Prims.pure_post Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(360,13-360,59); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x11))


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x17 Term))
 (! (implies (and (or label_23
(HasType @x17
Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(362,5-362,17); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(or label_24

;; def=MiniParse.Spec.Combinators.fst(362,5-362,17); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x5)))
)

(let ((@lb18 (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x5)))
(ite (is-FStar.Pervasives.Native.Some @lb18)
(let ((@lb19 (FStar.Pervasives.Native.Some_v @lb18)))

;; def=MiniParse.Spec.Combinators.fst(365,5-365,12); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(or label_25

;; def=MiniParse.Spec.Combinators.fst(365,5-365,12); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= @x10
(FStar.Pervasives.Native.Mktuple2__1 @lb19))
)
)
Unreachable)))

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(ApplyTT @x16
@x17)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(ApplyTT @x16
@x17)
)
)
:qid @query.35))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(367,3-367,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(367,10-367,23); use=MiniParse.Spec.Combinators.fst(367,3-367,9)
(or label_26

;; def=MiniParse.Spec.Combinators.fst(367,10-367,23); use=MiniParse.Spec.Combinators.fst(367,3-367,9)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x4))
(ApplyTT @x2
@x4)))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(367,3-367,9)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(367,10-367,23); use=MiniParse.Spec.Combinators.fst(367,3-367,9)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x4))
(ApplyTT @x2
@x4)))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x4))))

;; def=MiniParse.Spec.Combinators.fst(368,8-368,30); use=MiniParse.Spec.Combinators.fst(368,8-368,30)
(= (ApplyTT @x2
@x4)
@x18)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(368,8-368,23); use=MiniParse.Spec.Combinators.fst(368,8-368,23)
(not 
;; def=MiniParse.Spec.Combinators.fst(368,8-368,23); use=MiniParse.Spec.Combinators.fst(368,8-368,23)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x4))
(ApplyTT @x2
@x4)))
)

label_27)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x19 Term))
 (! (implies (HasType @x19
@x0)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x20 Term))
 (! (implies (and (HasType @x20
(MiniParse.Spec.Base.consumed_length @x4))

;; def=MiniParse.Spec.Combinators.fst(368,8-368,23); use=MiniParse.Spec.Combinators.fst(368,8-368,23)
(= (ApplyTT @x2
@x4)
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x4))
(FStar.Pervasives.Native.Mktuple2 @x0
(MiniParse.Spec.Base.consumed_length @x4)
@x19
@x20)))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(369,3-369,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(369,10-369,23); use=MiniParse.Spec.Combinators.fst(369,3-369,9)
(or label_28

;; def=MiniParse.Spec.Combinators.fst(369,10-369,23); use=MiniParse.Spec.Combinators.fst(369,3-369,9)
(<= (BoxInt_proj_0 @x20)
(BoxInt_proj_0 @x11))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(369,3-369,9)
(forall ((@x21 Term))
 (! (implies (and (HasType @x21
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(369,10-369,23); use=MiniParse.Spec.Combinators.fst(369,3-369,9)
(<= (BoxInt_proj_0 @x20)
(BoxInt_proj_0 @x11))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(370,3-370,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(370,10-370,33); use=MiniParse.Spec.Combinators.fst(370,3-370,9)
(or label_29

;; def=MiniParse.Spec.Combinators.fst(370,10-370,33); use=MiniParse.Spec.Combinators.fst(370,3-370,9)
(<= (BoxInt_proj_0 @x20)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(370,3-370,9)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(370,10-370,33); use=MiniParse.Spec.Combinators.fst(370,3-370,9)
(<= (BoxInt_proj_0 @x20)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(371,26-371,30)
(<= (BoxInt_proj_0 @x20)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(371,26-371,30)
(and 
;; def=MiniParse.Spec.Combinators.fst(368,18-368,22); use=MiniParse.Spec.Combinators.fst(371,26-371,30)
(or label_30
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x20)))


;; def=MiniParse.Spec.Combinators.fst(368,18-368,22); use=MiniParse.Spec.Combinators.fst(371,26-371,30)
(or label_31
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x23 Term))
 (! (implies (and (HasType @x23
(MiniParse.Spec.Base.consumed_length @x4))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= @x20
@x23)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x24 Term))
 (! (implies (and (HasType @x24
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x20)
@x24)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(371,60-371,66)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(371,60-371,66)
(and 
;; def=MiniParse.Spec.Combinators.fst(358,6-358,12); use=MiniParse.Spec.Combinators.fst(371,60-371,66)
(or label_32
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(358,6-358,12); use=MiniParse.Spec.Combinators.fst(371,60-371,66)
(or label_33
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x25 Term))
 (! (implies (and (HasType @x25
(MiniParse.Spec.Base.consumed_length @x5))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= @x11
@x25)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x26 Term))
 (! (implies (and (HasType @x26
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=FStar.Seq.Base.fsti(64,23-64,24); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x26)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(371,70-371,74)
(<= (BoxInt_proj_0 @x20)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(371,70-371,74)
(and 
;; def=MiniParse.Spec.Combinators.fst(368,18-368,22); use=MiniParse.Spec.Combinators.fst(371,70-371,74)
(or label_34
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x20)))


;; def=MiniParse.Spec.Combinators.fst(368,18-368,22); use=MiniParse.Spec.Combinators.fst(371,70-371,74)
(or label_35
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x27 Term))
 (! (implies (and (HasType @x27
(MiniParse.Spec.Base.consumed_length @x4))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= @x20
@x27)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x28 Term))
 (! (implies (and (HasType @x28
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,42-175,43); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
(BoxInt 0)
@x20)
@x28)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x29 Term))
 (! (implies (and (HasType @x29
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (Prims.eq2 (FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x20)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
(BoxInt 0)
@x20))
@x29)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(371,3-371,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(371,10-371,75); use=MiniParse.Spec.Combinators.fst(371,3-371,9)
(or label_36

;; def=MiniParse.Spec.Combinators.fst(371,10-371,75); use=MiniParse.Spec.Combinators.fst(371,3-371,9)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x20)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
(BoxInt 0)
@x20))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(371,3-371,9)
(forall ((@x30 Term))
 (! (implies (and (HasType @x30
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(371,10-371,75); use=MiniParse.Spec.Combinators.fst(371,3-371,9)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x20)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
(BoxInt 0)
@x20))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(372,26-372,30)
(<= (BoxInt_proj_0 @x20)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(372,26-372,30)
(and 
;; def=MiniParse.Spec.Combinators.fst(368,18-368,22); use=MiniParse.Spec.Combinators.fst(372,26-372,30)
(or label_37
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x20)))


;; def=MiniParse.Spec.Combinators.fst(368,18-368,22); use=MiniParse.Spec.Combinators.fst(372,26-372,30)
(or label_38
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x31 Term))
 (! (implies (and (HasType @x31
(MiniParse.Spec.Base.consumed_length @x4))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= @x20
@x31)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x32 Term))
 (! (implies (and (HasType @x32
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x20)
@x32)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(372,48-372,52)
(<= (BoxInt_proj_0 @x20)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(372,48-372,52)
(and 
;; def=MiniParse.Spec.Combinators.fst(368,18-368,22); use=MiniParse.Spec.Combinators.fst(372,48-372,52)
(or label_39
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x20)))


;; def=MiniParse.Spec.Combinators.fst(368,18-368,22); use=MiniParse.Spec.Combinators.fst(372,48-372,52)
(or label_40
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x33 Term))
 (! (implies (and (HasType @x33
(MiniParse.Spec.Base.consumed_length @x4))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= @x20
@x33)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x34 Term))
 (! (implies (and (HasType @x34
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,42-175,43); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x20)
@x34)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x35 Term))
 (! (implies (and (HasType @x35
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (Prims.eq2 (FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x20)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x20))
@x35)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(372,3-372,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(372,10-372,53); use=MiniParse.Spec.Combinators.fst(372,3-372,9)
(or label_41

;; def=MiniParse.Spec.Combinators.fst(372,10-372,53); use=MiniParse.Spec.Combinators.fst(372,3-372,9)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x20)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x20))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(372,3-372,9)
(forall ((@x36 Term))
 (! (implies (and (HasType @x36
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(372,10-372,53); use=MiniParse.Spec.Combinators.fst(372,3-372,9)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x20)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x20))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(373,3-373,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(373,10-373,34); use=MiniParse.Spec.Combinators.fst(373,3-373,9)
(or label_42

;; def=MiniParse.Spec.Combinators.fst(373,10-373,34); use=MiniParse.Spec.Combinators.fst(373,3-373,9)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(373,10-373,34); use=MiniParse.Spec.Combinators.fst(373,3-373,9)
(MiniParse.Spec.Base.no_lookahead_on @x0
@x2
@x4
@x5)
)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(373,3-373,9)
(forall ((@x37 Term))
 (! (implies (and (HasType @x37
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(373,10-373,34); use=MiniParse.Spec.Combinators.fst(373,3-373,9)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(373,10-373,34); use=MiniParse.Spec.Combinators.fst(373,3-373,9)
(MiniParse.Spec.Base.no_lookahead_on @x0
@x2
@x4
@x5)
)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(374,3-374,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(374,10-374,24); use=MiniParse.Spec.Combinators.fst(374,3-374,9)
(or label_43

;; def=MiniParse.Spec.Combinators.fst(374,10-374,24); use=MiniParse.Spec.Combinators.fst(374,3-374,9)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5))
(ApplyTT @x2
@x5)))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(374,3-374,9)
(forall ((@x38 Term))
 (! (implies (and (HasType @x38
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(374,10-374,24); use=MiniParse.Spec.Combinators.fst(374,3-374,9)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5))
(ApplyTT @x2
@x5)))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x39 Term))
 (! (implies (and (HasType @x39
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5))))

;; def=MiniParse.Spec.Combinators.fst(375,8-375,24); use=MiniParse.Spec.Combinators.fst(375,8-375,24)
(= (ApplyTT @x2
@x5)
@x39)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(375,8-375,16); use=MiniParse.Spec.Combinators.fst(375,8-375,16)
(not 
;; def=MiniParse.Spec.Combinators.fst(375,8-375,16); use=MiniParse.Spec.Combinators.fst(375,8-375,16)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5))
(ApplyTT @x2
@x5)))
)

label_44)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x40 Term))
 (! (implies (and (HasType @x40
(FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5)))

;; def=MiniParse.Spec.Combinators.fst(375,8-375,16); use=MiniParse.Spec.Combinators.fst(375,8-375,16)
(= (ApplyTT @x2
@x5)
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5))
@x40))
)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x41 Term))
 (! (implies (HasType @x41
@x0)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x42 Term))
 (! (implies (and (HasType @x42
(MiniParse.Spec.Base.consumed_length @x5))

;; def=MiniParse.Spec.Combinators.fst(376,8-376,18); use=MiniParse.Spec.Combinators.fst(376,8-376,18)
(= @x40
(FStar.Pervasives.Native.Mktuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5)
@x41
@x42))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(377,3-377,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(377,10-377,21); use=MiniParse.Spec.Combinators.fst(377,3-377,9)
(or label_45

;; def=MiniParse.Spec.Combinators.fst(377,10-377,21); use=MiniParse.Spec.Combinators.fst(377,3-377,9)
(= @x19
@x41)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(377,3-377,9)
(forall ((@x43 Term))
 (! (implies (and (HasType @x43
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(377,10-377,21); use=MiniParse.Spec.Combinators.fst(377,3-377,9)
(= @x19
@x41)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(378,3-378,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(378,10-378,36); use=MiniParse.Spec.Combinators.fst(378,3-378,9)
(or label_46

;; def=MiniParse.Spec.Combinators.fst(378,10-378,36); use=MiniParse.Spec.Combinators.fst(378,3-378,9)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(378,10-378,36); use=MiniParse.Spec.Combinators.fst(378,3-378,9)
(MiniParse.Spec.Base.injective_precond @x0
@x2
@x4
@x5)
)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(378,3-378,9)
(forall ((@x44 Term))
 (! (implies (and (HasType @x44
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(378,10-378,36); use=MiniParse.Spec.Combinators.fst(378,3-378,9)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(378,10-378,36); use=MiniParse.Spec.Combinators.fst(378,3-378,9)
(MiniParse.Spec.Base.injective_precond @x0
@x2
@x4
@x5)
)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(379,3-379,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(379,10-379,43); use=MiniParse.Spec.Combinators.fst(379,3-379,9)
(or label_47

;; def=MiniParse.Spec.Combinators.fst(379,10-379,43); use=MiniParse.Spec.Combinators.fst(379,3-379,9)
(= @x20
@x42)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(379,3-379,9)
(forall ((@x45 Term))
 (! (implies (and (HasType @x45
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(379,10-379,43); use=MiniParse.Spec.Combinators.fst(379,3-379,9)
(= @x20
@x42)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and 
;; def=MiniParse.Spec.Combinators.fst(380,37-380,51); use=MiniParse.Spec.Combinators.fst(380,37-380,51)
(or label_48
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))


;; def=MiniParse.Spec.Combinators.fst(380,37-380,51); use=MiniParse.Spec.Combinators.fst(380,37-380,51)
(or label_49
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))


;; def=Prims.fst(356,2-356,58); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x46 Term))
 (! (implies (and (HasType @x46
(Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x20
@x4))

;; def=Prims.fst(356,26-356,41); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= @x46
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x47 Term))
 (! (implies (and (HasType @x47
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=MiniParse.Spec.Combinators.fst(380,7-380,51); use=MiniParse.Spec.Combinators.fst(380,7-380,51)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))
@x47)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and 
;; def=MiniParse.Spec.Combinators.fst(381,39-381,54); use=MiniParse.Spec.Combinators.fst(381,39-381,54)
(or label_50
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))


;; def=MiniParse.Spec.Combinators.fst(381,39-381,54); use=MiniParse.Spec.Combinators.fst(381,39-381,54)
(or label_51
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))


;; def=Prims.fst(356,2-356,58); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x48 Term))
 (! (implies (and (HasType @x48
(Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x20
@x5))

;; def=Prims.fst(356,26-356,41); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= @x48
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x49 Term))
 (! (implies (and (HasType @x49
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=MiniParse.Spec.Combinators.fst(381,7-381,54); use=MiniParse.Spec.Combinators.fst(381,7-381,54)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
@x49)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(383,3-383,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(383,10-383,25); use=MiniParse.Spec.Combinators.fst(383,3-383,9)
(or label_52

;; def=MiniParse.Spec.Combinators.fst(383,10-383,25); use=MiniParse.Spec.Combinators.fst(383,3-383,9)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
(ApplyTT (ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(383,3-383,9)
(forall ((@x50 Term))
 (! (implies (and (HasType @x50
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(383,10-383,25); use=MiniParse.Spec.Combinators.fst(383,3-383,9)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
(ApplyTT (ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x51 Term))
 (! (implies (and (HasType @x51
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))))

;; def=MiniParse.Spec.Combinators.fst(384,8-384,32); use=MiniParse.Spec.Combinators.fst(384,8-384,32)
(= (ApplyTT (ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
@x51)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(384,8-384,23); use=MiniParse.Spec.Combinators.fst(384,8-384,23)
(not 
;; def=MiniParse.Spec.Combinators.fst(384,8-384,23); use=MiniParse.Spec.Combinators.fst(384,8-384,23)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
(ApplyTT (ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))
)

label_53)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x52 Term))
 (! (implies (HasType @x52
@x1)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x53 Term))
 (! (implies (and (HasType @x53
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))

;; def=MiniParse.Spec.Combinators.fst(384,8-384,23); use=MiniParse.Spec.Combinators.fst(384,8-384,23)
(= (ApplyTT (ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
(FStar.Pervasives.Native.Mktuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
@x52
@x53)))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(385,3-385,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(385,10-385,30); use=MiniParse.Spec.Combinators.fst(385,3-385,9)
(or label_54

;; def=MiniParse.Spec.Combinators.fst(385,10-385,30); use=MiniParse.Spec.Combinators.fst(385,3-385,9)
(= @x11
(Prims.op_Addition @x20
@x53))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(385,3-385,9)
(forall ((@x54 Term))
 (! (implies (and (HasType @x54
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(385,10-385,30); use=MiniParse.Spec.Combinators.fst(385,3-385,9)
(= @x11
(Prims.op_Addition @x20
@x53))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(386,3-386,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(386,10-386,33); use=MiniParse.Spec.Combinators.fst(386,3-386,9)
(or label_55

;; def=MiniParse.Spec.Combinators.fst(386,10-386,33); use=MiniParse.Spec.Combinators.fst(386,3-386,9)
(<= (BoxInt_proj_0 @x53)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(386,3-386,9)
(forall ((@x55 Term))
 (! (implies (and (HasType @x55
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(386,10-386,33); use=MiniParse.Spec.Combinators.fst(386,3-386,9)
(<= (BoxInt_proj_0 @x53)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(387,3-387,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(387,10-387,34); use=MiniParse.Spec.Combinators.fst(387,3-387,9)
(or label_56

;; def=MiniParse.Spec.Combinators.fst(387,10-387,34); use=MiniParse.Spec.Combinators.fst(387,3-387,9)
(<= (BoxInt_proj_0 @x53)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(387,3-387,9)
(forall ((@x56 Term))
 (! (implies (and (HasType @x56
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(387,10-387,34); use=MiniParse.Spec.Combinators.fst(387,3-387,9)
(<= (BoxInt_proj_0 @x53)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(388,27-388,31)
(<= (BoxInt_proj_0 @x53)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(388,27-388,31)
(and 
;; def=MiniParse.Spec.Combinators.fst(384,18-384,22); use=MiniParse.Spec.Combinators.fst(388,27-388,31)
(or label_57
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x53)))


;; def=MiniParse.Spec.Combinators.fst(384,18-384,22); use=MiniParse.Spec.Combinators.fst(388,27-388,31)
(or label_58
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x53
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x57 Term))
 (! (implies (and (HasType @x57
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= @x53
@x57)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x58 Term))
 (! (implies (and (HasType @x58
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt 0)
@x53)
@x58)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(388,61-388,67)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(388,61-388,67)
(and 
;; def=MiniParse.Spec.Combinators.fst(358,6-358,12); use=MiniParse.Spec.Combinators.fst(388,61-388,67)
(or label_59
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(358,6-358,12); use=MiniParse.Spec.Combinators.fst(388,61-388,67)
(or label_60
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x59 Term))
 (! (implies (and (HasType @x59
(MiniParse.Spec.Base.consumed_length @x5))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= @x11
@x59)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x60 Term))
 (! (implies (and (HasType @x60
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=FStar.Seq.Base.fsti(64,23-64,24); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x60)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and 
;; def=Prims.fst(680,18-680,24); use=MiniParse.Spec.Combinators.fst(388,74-388,87)
(or label_61

;; def=Prims.fst(680,18-680,24); use=MiniParse.Spec.Combinators.fst(388,74-388,87)
(>= (BoxInt_proj_0 (Prims.op_Addition @x20
@x53))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=MiniParse.Spec.Combinators.fst(388,74-388,87); use=MiniParse.Spec.Combinators.fst(388,74-388,87)
(or label_62
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x20
(Prims.op_Addition @x20
@x53))))


;; def=MiniParse.Spec.Combinators.fst(388,74-388,87); use=MiniParse.Spec.Combinators.fst(388,74-388,87)
(or label_63
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (Prims.op_Addition @x20
@x53)
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)))))


;; def=Prims.fst(356,2-356,58); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x61 Term))
 (! (implies (and (HasType @x61
(Tm_refine_6c303de0c7cf6ef8ce28b57600b9d4f0 @x20
@x5
@x11))

;; def=Prims.fst(356,26-356,41); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= @x61
(Prims.op_Addition @x20
@x53))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x62 Term))
 (! (implies (and (HasType @x62
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,42-175,43); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x20
(Prims.op_Addition @x20
@x53))
@x62)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x63 Term))
 (! (implies (and (HasType @x63
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (Prims.eq2 (FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt 0)
@x53)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x20
(Prims.op_Addition @x20
@x53)))
@x63)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(388,3-388,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(388,10-388,88); use=MiniParse.Spec.Combinators.fst(388,3-388,9)
(or label_64

;; def=MiniParse.Spec.Combinators.fst(388,10-388,88); use=MiniParse.Spec.Combinators.fst(388,3-388,9)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt 0)
@x53)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x20
(Prims.op_Addition @x20
@x53)))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(388,3-388,9)
(forall ((@x64 Term))
 (! (implies (and (HasType @x64
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(388,10-388,88); use=MiniParse.Spec.Combinators.fst(388,3-388,9)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt 0)
@x53)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x20
(Prims.op_Addition @x20
@x53)))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(389,27-389,31)
(<= (BoxInt_proj_0 @x53)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(389,27-389,31)
(and 
;; def=MiniParse.Spec.Combinators.fst(384,18-384,22); use=MiniParse.Spec.Combinators.fst(389,27-389,31)
(or label_65
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x53)))


;; def=MiniParse.Spec.Combinators.fst(384,18-384,22); use=MiniParse.Spec.Combinators.fst(389,27-389,31)
(or label_66
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x53
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x65 Term))
 (! (implies (and (HasType @x65
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= @x53
@x65)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x66 Term))
 (! (implies (and (HasType @x66
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt 0)
@x53)
@x66)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(389,50-389,54)
(<= (BoxInt_proj_0 @x53)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(389,50-389,54)
(and 
;; def=MiniParse.Spec.Combinators.fst(384,18-384,22); use=MiniParse.Spec.Combinators.fst(389,50-389,54)
(or label_67
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x53)))


;; def=MiniParse.Spec.Combinators.fst(384,18-384,22); use=MiniParse.Spec.Combinators.fst(389,50-389,54)
(or label_68
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x53
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x67 Term))
 (! (implies (and (HasType @x67
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= @x53
@x67)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x68 Term))
 (! (implies (and (HasType @x68
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,42-175,43); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))
(BoxInt 0)
@x53)
@x68)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x69 Term))
 (! (implies (and (HasType @x69
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(= (Prims.eq2 (FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt 0)
@x53)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))
(BoxInt 0)
@x53))
@x69)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(389,3-389,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(389,10-389,55); use=MiniParse.Spec.Combinators.fst(389,3-389,9)
(or label_69

;; def=MiniParse.Spec.Combinators.fst(389,10-389,55); use=MiniParse.Spec.Combinators.fst(389,3-389,9)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt 0)
@x53)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))
(BoxInt 0)
@x53))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(389,3-389,9)
(forall ((@x70 Term))
 (! (implies (and (HasType @x70
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(389,10-389,55); use=MiniParse.Spec.Combinators.fst(389,3-389,9)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxInt 0)
@x53)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))
(BoxInt 0)
@x53))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(390,3-390,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(390,10-390,37); use=MiniParse.Spec.Combinators.fst(390,3-390,9)
(or label_70

;; def=MiniParse.Spec.Combinators.fst(390,10-390,37); use=MiniParse.Spec.Combinators.fst(390,3-390,9)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(390,10-390,37); use=MiniParse.Spec.Combinators.fst(390,3-390,9)
(MiniParse.Spec.Base.no_lookahead_on @x1
(ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))
)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(390,3-390,9)
(forall ((@x71 Term))
 (! (implies (and (HasType @x71
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(390,10-390,37); use=MiniParse.Spec.Combinators.fst(390,3-390,9)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(390,10-390,37); use=MiniParse.Spec.Combinators.fst(390,3-390,9)
(MiniParse.Spec.Base.no_lookahead_on @x1
(ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))
)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(391,3-391,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(391,10-391,26); use=MiniParse.Spec.Combinators.fst(391,3-391,9)
(or label_71

;; def=MiniParse.Spec.Combinators.fst(391,10-391,26); use=MiniParse.Spec.Combinators.fst(391,3-391,9)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
(ApplyTT (ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(391,3-391,9)
(forall ((@x72 Term))
 (! (implies (and (HasType @x72
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(391,10-391,26); use=MiniParse.Spec.Combinators.fst(391,3-391,9)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
(ApplyTT (ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x73 Term))
 (! (implies (and (HasType @x73
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))))

;; def=MiniParse.Spec.Combinators.fst(392,8-392,26); use=MiniParse.Spec.Combinators.fst(392,8-392,26)
(= (ApplyTT (ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))
@x73)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(392,8-392,16); use=MiniParse.Spec.Combinators.fst(392,8-392,16)
(not 
;; def=MiniParse.Spec.Combinators.fst(392,8-392,16); use=MiniParse.Spec.Combinators.fst(392,8-392,16)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
(ApplyTT (ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))))
)

label_72)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x74 Term))
 (! (implies (and (HasType @x74
(FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))))

;; def=MiniParse.Spec.Combinators.fst(392,8-392,16); use=MiniParse.Spec.Combinators.fst(392,8-392,16)
(= (ApplyTT (ApplyTT @x3
@x19)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
@x74))
)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x75 Term))
 (! (implies (HasType @x75
@x1)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(367,3-394,21)
(forall ((@x76 Term))
 (! (implies (and (HasType @x76
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))

;; def=MiniParse.Spec.Combinators.fst(393,8-393,14); use=MiniParse.Spec.Combinators.fst(393,8-393,14)
(= @x74
(FStar.Pervasives.Native.Mktuple2 @x1
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
@x20
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))
@x75
@x76))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(394,3-394,9)
(and 
;; def=MiniParse.Spec.Combinators.fst(394,10-394,21); use=MiniParse.Spec.Combinators.fst(394,3-394,9)
(or label_73

;; def=MiniParse.Spec.Combinators.fst(394,10-394,21); use=MiniParse.Spec.Combinators.fst(394,3-394,9)
(= @x52
@x75)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(394,3-394,9)
(forall ((@x77 Term))
 (! (implies (and (HasType @x77
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(394,10-394,21); use=MiniParse.Spec.Combinators.fst(394,3-394,9)
(= @x52
@x75)
)

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(394,3-394,9)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(394,3-394,9)
(ApplyTT @x16
@x77)
)
)
 
;;no pats
:qid @query.96))
)
)
 
;;no pats
:qid @query.95))
)
 
;;no pats
:qid @query.94))
)
 
;;no pats
:qid @query.93))
)
)
 
;;no pats
:qid @query.92))
)
 
;;no pats
:qid @query.91))
)
)
 
;;no pats
:qid @query.90))
)
)
 
;;no pats
:qid @query.89))
)
)
 
;;no pats
:qid @query.88))
)
 
;;no pats
:qid @query.87))
)
 
;;no pats
:qid @query.86))
)
)
 
;;no pats
:qid @query.85))
)
 
;;no pats
:qid @query.84))
)
)
 
;;no pats
:qid @query.83))
)
)
 
;;no pats
:qid @query.82))
)
 
;;no pats
:qid @query.81))
)
 
;;no pats
:qid @query.80))
)
)
 
;;no pats
:qid @query.79))
)
 
;;no pats
:qid @query.78))
)
)
 
;;no pats
:qid @query.77))
)
 
;;no pats
:qid @query.76))
)
)
 
;;no pats
:qid @query.75))
)
)
 
;;no pats
:qid @query.74))
)
)
 
;;no pats
:qid @query.73))
)
)
 
;;no pats
:qid @query.72))
)
 
;;no pats
:qid @query.71))
)
)
 
;;no pats
:qid @query.70))
)
 
;;no pats
:qid @query.69))
)
)
 
;;no pats
:qid @query.68))
)
 
;;no pats
:qid @query.67))
)
)
 
;;no pats
:qid @query.66))
)
 
;;no pats
:qid @query.65))
)
)
 
;;no pats
:qid @query.64))
)
)
 
;;no pats
:qid @query.63))
)
)
 
;;no pats
:qid @query.62))
)
)
 
;;no pats
:qid @query.61))
)
 
;;no pats
:qid @query.60))
)
 
;;no pats
:qid @query.59))
)
)
 
;;no pats
:qid @query.58))
)
 
;;no pats
:qid @query.57))
)
)
 
;;no pats
:qid @query.56))
)
)
 
;;no pats
:qid @query.55))
)
)
 
;;no pats
:qid @query.54))
)
 
;;no pats
:qid @query.53))
)
 
;;no pats
:qid @query.52))
)
)
 
;;no pats
:qid @query.51))
)
 
;;no pats
:qid @query.50))
)
)
 
;;no pats
:qid @query.49))
)
)
 
;;no pats
:qid @query.48))
)
 
;;no pats
:qid @query.47))
)
 
;;no pats
:qid @query.46))
)
)
 
;;no pats
:qid @query.45))
)
 
;;no pats
:qid @query.44))
)
)
 
;;no pats
:qid @query.43))
)
 
;;no pats
:qid @query.42))
)
)
 
;;no pats
:qid @query.41))
)
)
 
;;no pats
:qid @query.40))
)
)
 
;;no pats
:qid @query.39))
)
 
;;no pats
:qid @query.38))
)
)
 
;;no pats
:qid @query.37))
)
 
;;no pats
:qid @query.36))
)
)
 
;;no pats
:qid @query.34))
)
)
 
;;no pats
:qid @query.24))


;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x15 Term))
 (! (implies (HasType @x15
(Tm_arrow_4139f816cf75a5e57bc789d1abf8eb5b @x10
@x3
@x2
@x0
@x1
@x4
@x11
@x5))

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(and 
;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x16 Term))
 (! (implies (HasType @x16
Prims.unit)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(396,25-396,26)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(396,25-396,26)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5)))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(396,25-396,26)
(and 
;; def=MiniParse.Spec.Combinators.fst(358,6-358,12); use=MiniParse.Spec.Combinators.fst(360,29-360,35)
(or label_74
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(358,6-358,12); use=MiniParse.Spec.Combinators.fst(360,29-360,35)
(or label_75
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(396,25-396,26)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
(MiniParse.Spec.Base.consumed_length @x5))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(396,25-396,26)
(= @x11
@x17)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(396,25-396,26)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(396,25-396,26)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
@x18)


;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(396,25-396,26)
(<= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
)

;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(396,25-396,26)
(and 
;; def=MiniParse.Spec.Combinators.fst(355,11-355,16); use=MiniParse.Spec.Combinators.fst(360,53-360,58)
(or label_76
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x11)))


;; def=MiniParse.Spec.Combinators.fst(355,11-355,16); use=MiniParse.Spec.Combinators.fst(360,53-360,58)
(or label_77
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
)
)
 
;;no pats
:qid @query.100))
)
 
;;no pats
:qid @query.99))
)
)
 
;;no pats
:qid @query.98))


;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe)

;; def=FStar.Classical.fsti(80,8-80,9); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(= (Tm_abs_e5454e1b3f59315c18dff8f4b08e2baa @x5
@x11
@x4)
@x16)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(and 
;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(362,5-362,17); use=MiniParse.Spec.Combinators.fst(396,25-396,26)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x5)))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(396,25-396,26)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))))

;; def=MiniParse.Spec.Combinators.fst(363,21-363,25); use=MiniParse.Spec.Combinators.fst(396,25-396,26)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x5)
@x18)


;; def=MiniParse.Spec.Combinators.fst(363,21-363,25); use=MiniParse.Spec.Combinators.fst(396,25-396,26)
(not 
;; def=MiniParse.Spec.Combinators.fst(363,21-363,25); use=MiniParse.Spec.Combinators.fst(396,25-396,26)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x5)))
)
)
label_78)
 
;;no pats
:qid @query.103))
)
 
;;no pats
:qid @query.102))


;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe)

;; def=FStar.Classical.fsti(80,11-80,12); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(= (Tm_abs_31d280ef77bc35bcba85448c74705836 @x1
@x5
@x0
@x2
@x3
@x10)
@x17)
)

;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(396,11-396,24)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
Prims.unit)

;; def=FStar.Classical.fsti(83,12-83,25); use=MiniParse.Spec.Combinators.fst(396,11-396,24)
(implies 
;; def=MiniParse.Spec.Combinators.fst(360,13-360,59); use=MiniParse.Spec.Combinators.fst(396,11-396,24)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x5
(BoxInt 0)
@x11)
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(BoxInt 0)
@x11))


;; def=MiniParse.Spec.Combinators.fst(361,12-366,5); use=MiniParse.Spec.Combinators.fst(396,11-396,24)
(and 
;; def=MiniParse.Spec.Combinators.fst(362,5-362,17); use=MiniParse.Spec.Combinators.fst(396,11-396,24)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x5)))

(let ((@lb19 (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x5)))
(ite (is-FStar.Pervasives.Native.Some @lb19)
(let ((@lb20 (FStar.Pervasives.Native.Some_v @lb19)))

;; def=MiniParse.Spec.Combinators.fst(365,5-365,12); use=MiniParse.Spec.Combinators.fst(396,11-396,24)
(= @x10
(FStar.Pervasives.Native.Mktuple2__1 @lb20))
)
Unreachable)))
)
)

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(396,11-396,24)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(396,11-396,24)
(ApplyTT @x13
@x18)
)
)
 
;;no pats
:qid @query.105))
)
 
;;no pats
:qid @query.104))
)
)
 
;;no pats
:qid @query.101))
)
)
 
;;no pats
:qid @query.97))
)
)
 
;;no pats
:qid @query.13))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(not 
;; def=MiniParse.Spec.Combinators.fst(356,9-356,29); use=MiniParse.Spec.Combinators.fst(356,9-356,29)
(= (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
Prims.bool)

;; def=MiniParse.Spec.Combinators.fst(356,9-397,13); use=MiniParse.Spec.Combinators.fst(356,9-397,13)
(= (Prims.op_LessThanOrEqual @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x5))
@x14)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x15 Term))
 (! (implies (HasType @x15
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(Valid 
;; def=Prims.fst(451,90-451,102); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(ApplyTT @x13
@x15)
)
)
 
;;no pats
:qid @query.107))
)
 
;;no pats
:qid @query.106))
))
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))

(implies 
;; def=Prims.fst(389,19-389,21); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(not 
;; def=MiniParse.Spec.Combinators.fst(351,10-351,13); use=MiniParse.Spec.Combinators.fst(351,10-351,13)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x4))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x4)))
)


;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x4))))

;; def=MiniParse.Spec.Combinators.fst(351,10-398,7); use=MiniParse.Spec.Combinators.fst(351,10-398,7)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.and_then_bare@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x9)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(forall ((@x10 Term))
 (! (implies (HasType @x10
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(Valid 
;; def=Prims.fst(451,90-451,102); use=MiniParse.Spec.Combinators.fst(349,47-398,13)
(ApplyTT @x8
@x10)
)
)
 
;;no pats
:qid @query.109))
)
 
;;no pats
:qid @query.108))
))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 8714496)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_78")
(eval label_78)
(echo "label_77")
(eval label_77)
(echo "label_76")
(eval label_76)
(echo "label_75")
(eval label_75)
(echo "label_74")
(eval label_74)
(echo "label_73")
(eval label_73)
(echo "label_72")
(eval label_72)
(echo "label_71")
(eval label_71)
(echo "label_70")
(eval label_70)
(echo "label_69")
(eval label_69)
(echo "label_68")
(eval label_68)
(echo "label_67")
(eval label_67)
(echo "label_66")
(eval label_66)
(echo "label_65")
(eval label_65)
(echo "label_64")
(eval label_64)
(echo "label_63")
(eval label_63)
(echo "label_62")
(eval label_62)
(echo "label_61")
(eval label_61)
(echo "label_60")
(eval label_60)
(echo "label_59")
(eval label_59)
(echo "label_58")
(eval label_58)
(echo "label_57")
(eval label_57)
(echo "label_56")
(eval label_56)
(echo "label_55")
(eval label_55)
(echo "label_54")
(eval label_54)
(echo "label_53")
(eval label_53)
(echo "label_52")
(eval label_52)
(echo "label_51")
(eval label_51)
(echo "label_50")
(eval label_50)
(echo "label_49")
(eval label_49)
(echo "label_48")
(eval label_48)
(echo "label_47")
(eval label_47)
(echo "label_46")
(eval label_46)
(echo "label_45")
(eval label_45)
(echo "label_44")
(eval label_44)
(echo "label_43")
(eval label_43)
(echo "label_42")
(eval label_42)
(echo "label_41")
(eval label_41)
(echo "label_40")
(eval label_40)
(echo "label_39")
(eval label_39)
(echo "label_38")
(eval label_38)
(echo "label_37")
(eval label_37)
(echo "label_36")
(eval label_36)
(echo "label_35")
(eval label_35)
(echo "label_34")
(eval label_34)
(echo "label_33")
(eval label_33)
(echo "label_32")
(eval label_32)
(echo "label_31")
(eval label_31)
(echo "label_30")
(eval label_30)
(echo "label_29")
(eval label_29)
(echo "label_28")
(eval label_28)
(echo "label_27")
(eval label_27)
(echo "label_26")
(eval label_26)
(echo "label_25")
(eval label_25)
(echo "label_24")
(eval label_24)
(echo "label_23")
(eval label_23)
(echo "label_22")
(eval label_22)
(echo "label_21")
(eval label_21)
(echo "label_20")
(eval label_20)
(echo "label_19")
(eval label_19)
(echo "label_18")
(eval label_18)
(echo "label_17")
(eval label_17)
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.and_then_no_lookahead_on, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, MiniParse.Spec.Base_interpretation_Tm_ghost_arrow_84eb031c18bd35e3c76ba4886d9ede0b, MiniParse.Spec.Combinators_interpretation_Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc, constructor_distinct_FStar.Pervasives.Native.None, constructor_distinct_FStar.Pervasives.Native.Some, constructor_distinct_Tm_unit, data_elim_FStar.Pervasives.Native.Mktuple2, data_elim_FStar.Pervasives.Native.Some, disc_equation_FStar.Pervasives.Native.None, disc_equation_FStar.Pervasives.Native.Some, equation_MiniParse.Spec.Base.bare_parser, equation_MiniParse.Spec.Base.bparse, equation_MiniParse.Spec.Base.byte, equation_MiniParse.Spec.Base.bytes, equation_MiniParse.Spec.Base.consumed_length, equation_MiniParse.Spec.Base.injective, equation_MiniParse.Spec.Base.injective_postcond, equation_MiniParse.Spec.Base.injective_precond, equation_MiniParse.Spec.Base.no_lookahead, equation_MiniParse.Spec.Base.no_lookahead_on, equation_MiniParse.Spec.Base.no_lookahead_on_postcond, equation_MiniParse.Spec.Base.no_lookahead_on_precond, equation_MiniParse.Spec.Combinators.and_then_bare, equation_Prims.eqtype, equation_Prims.nat, fuel_guarded_inversion_FStar.Pervasives.Native.option, fuel_guarded_inversion_FStar.Pervasives.Native.tuple2, int_inversion, int_typing, interpretation_Tm_abs_5a56d64ec9685d0352c27644697b3e56, kinding_FStar.Pervasives.Native.tuple2@tok, lemma_FStar.Pervasives.invertOption, lemma_FStar.Seq.Base.lemma_len_slice, lemma_FStar.Seq.Properties.slice_slice, primitive_Prims.op_Addition, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_FStar.Pervasives.Native.Some_a, projection_inverse_FStar.Pervasives.Native.Some_v, refinement_interpretation_Tm_refine_1ba8fd8bb363097813064c67740b2de5, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_81407705a0828c2c1b1976675443f647, refinement_interpretation_Tm_refine_d3d07693cd71377864ef84dc97d10ec1, refinement_interpretation_Tm_refine_f1ef48729dd48b5741a77671cc117cd5, token_correspondence_MiniParse.Spec.Combinators.and_then_bare, typing_FStar.Seq.Base.length, typing_FStar.Seq.Base.slice, typing_FStar.UInt8.t, typing_MiniParse.Spec.Base.bparse, typing_MiniParse.Spec.Base.consumed_length, unit_inversion, unit_typing

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let and_then_no_lookahead_on


; <Start encoding let and_then_no_lookahead_on>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Combinators.and_then_no_lookahead_on (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Combinators.and_then_no_lookahead_on@tok () Term)

; </end encoding let and_then_no_lookahead_on>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Combinators.coerce_to_bare_param_parser; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(275,4-275,31); use=MiniParse.Spec.Combinators.fst(275,4-275,31)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(Tm_arrow_21c34ab6214876c3f64c3607461881fc @x1
@x0))
(HasType @x3
@x0))
(HasType (MiniParse.Spec.Combinators.coerce_to_bare_param_parser @x0
@x1
@x2
@x3)
(MiniParse.Spec.Base.bare_parser @x1)))
 

:pattern ((MiniParse.Spec.Combinators.coerce_to_bare_param_parser @x0
@x1
@x2
@x3))
:qid typing_MiniParse.Spec.Combinators.coerce_to_bare_param_parser))

:named typing_MiniParse.Spec.Combinators.coerce_to_bare_param_parser))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Combinators.and_then_cases_injective; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(283,4-283,28); use=MiniParse.Spec.Combinators.fst(283,4-283,28)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(Tm_arrow_21c34ab6214876c3f64c3607461881fc @x1
@x0)))
(HasType (MiniParse.Spec.Combinators.and_then_cases_injective @x0
@x1
@x2)
Tm_type))
 

:pattern ((MiniParse.Spec.Combinators.and_then_cases_injective @x0
@x1
@x2))
:qid typing_MiniParse.Spec.Combinators.and_then_cases_injective))

:named typing_MiniParse.Spec.Combinators.and_then_cases_injective))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name MiniParse.Spec.Combinators.coerce_to_bare_param_parser; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(275,4-275,31); use=MiniParse.Spec.Combinators.fst(275,4-275,31)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.coerce_to_bare_param_parser@tok
@x0)
@x1)
@x2)
@x3)
(MiniParse.Spec.Combinators.coerce_to_bare_param_parser @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.coerce_to_bare_param_parser@tok
@x0)
@x1)
@x2)
@x3))
:qid token_correspondence_MiniParse.Spec.Combinators.coerce_to_bare_param_parser))

:named token_correspondence_MiniParse.Spec.Combinators.coerce_to_bare_param_parser))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_fe391d6680769aaad08ee4cff3d82de3
;;; Fact-ids: Name MiniParse.Spec.Combinators.coerce_to_bare_param_parser; Namespace MiniParse.Spec.Combinators
(assert (! (HasType Tm_arrow_fe391d6680769aaad08ee4cff3d82de3
Tm_type)
:named kinding_Tm_arrow_fe391d6680769aaad08ee4cff3d82de3))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_21c34ab6214876c3f64c3607461881fc
;;; Fact-ids: Name MiniParse.Spec.Combinators.coerce_to_bare_param_parser; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(276,4-278,34); use=MiniParse.Spec.Combinators.fst(278,9-278,34)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_21c34ab6214876c3f64c3607461881fc @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_21c34ab6214876c3f64c3607461881fc @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_21c34ab6214876c3f64c3607461881fc))

:named kinding_Tm_arrow_21c34ab6214876c3f64c3607461881fc))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name MiniParse.Spec.Combinators.coerce_to_bare_param_parser; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(275,4-275,31); use=MiniParse.Spec.Combinators.fst(275,4-275,31)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType MiniParse.Spec.Combinators.coerce_to_bare_param_parser@tok
Tm_arrow_fe391d6680769aaad08ee4cff3d82de3))

;; def=MiniParse.Spec.Combinators.fst(275,4-275,31); use=MiniParse.Spec.Combinators.fst(275,4-275,31)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.coerce_to_bare_param_parser@tok
@x1)
@x2)
@x3)
@x4)
(MiniParse.Spec.Combinators.coerce_to_bare_param_parser @x1
@x2
@x3
@x4))
 

:pattern ((MiniParse.Spec.Combinators.coerce_to_bare_param_parser @x1
@x2
@x3
@x4))
:qid function_token_typing_MiniParse.Spec.Combinators.coerce_to_bare_param_parser.1))
)
 

:pattern ((ApplyTT @x0
MiniParse.Spec.Combinators.coerce_to_bare_param_parser@tok))
:qid function_token_typing_MiniParse.Spec.Combinators.coerce_to_bare_param_parser))

:named function_token_typing_MiniParse.Spec.Combinators.coerce_to_bare_param_parser))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Combinators.coerce_to_bare_param_parser
;;; Fact-ids: Name MiniParse.Spec.Combinators.coerce_to_bare_param_parser; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(275,4-275,31); use=MiniParse.Spec.Combinators.fst(275,4-275,31)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (MiniParse.Spec.Combinators.coerce_to_bare_param_parser @x0
@x1
@x2
@x3)
(MiniParse.Spec.Base.__proj__Parser__item__f @x1
(ApplyTT @x2
@x3)))
 

:pattern ((MiniParse.Spec.Combinators.coerce_to_bare_param_parser @x0
@x1
@x2
@x3))
:qid equation_MiniParse.Spec.Combinators.coerce_to_bare_param_parser))

:named equation_MiniParse.Spec.Combinators.coerce_to_bare_param_parser))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Combinators.and_then_cases_injective
;;; Fact-ids: Name MiniParse.Spec.Combinators.and_then_cases_injective; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(283,4-283,28); use=MiniParse.Spec.Combinators.fst(283,4-283,28)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (MiniParse.Spec.Combinators.and_then_cases_injective @x0
@x1
@x2)
(MiniParse.Spec.Combinators.and_then_cases_injective_ @x0
@x1
(ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.coerce_to_bare_param_parser@tok
@x0)
@x1)
@x2)))
 

:pattern ((MiniParse.Spec.Combinators.and_then_cases_injective @x0
@x1
@x2))
:qid equation_MiniParse.Spec.Combinators.and_then_cases_injective))

:named equation_MiniParse.Spec.Combinators.and_then_cases_injective))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name MiniParse.Spec.Combinators.coerce_to_bare_param_parser; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(276,4-280,22); use=MiniParse.Spec.Combinators.fst(276,7-280,22)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_fe391d6680769aaad08ee4cff3d82de3)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_fe391d6680769aaad08ee4cff3d82de3))
:qid MiniParse.Spec.Combinators_pre_typing_Tm_arrow_fe391d6680769aaad08ee4cff3d82de3))

:named MiniParse.Spec.Combinators_pre_typing_Tm_arrow_fe391d6680769aaad08ee4cff3d82de3))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name MiniParse.Spec.Combinators.coerce_to_bare_param_parser; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(276,4-278,34); use=MiniParse.Spec.Combinators.fst(278,9-278,34)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_21c34ab6214876c3f64c3607461881fc @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_21c34ab6214876c3f64c3607461881fc @x2
@x3)))
:qid MiniParse.Spec.Combinators_pre_typing_Tm_arrow_21c34ab6214876c3f64c3607461881fc))

:named MiniParse.Spec.Combinators_pre_typing_Tm_arrow_21c34ab6214876c3f64c3607461881fc))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_fe391d6680769aaad08ee4cff3d82de3
;;; Fact-ids: Name MiniParse.Spec.Combinators.coerce_to_bare_param_parser; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(276,4-280,22); use=MiniParse.Spec.Combinators.fst(276,7-280,22)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_fe391d6680769aaad08ee4cff3d82de3)
(and 
;; def=MiniParse.Spec.Combinators.fst(276,4-280,22); use=MiniParse.Spec.Combinators.fst(276,7-280,22)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(Tm_arrow_21c34ab6214876c3f64c3607461881fc @x2
@x1))
(HasType @x4
@x1))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
(MiniParse.Spec.Base.bare_parser @x2)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_fe391d6680769aaad08ee4cff3d82de3.1))

(IsTotFun @x0)

;; def=MiniParse.Spec.Combinators.fst(276,4-280,22); use=MiniParse.Spec.Combinators.fst(276,7-280,22)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Tm_type)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_fe391d6680769aaad08ee4cff3d82de3.2))


;; def=MiniParse.Spec.Combinators.fst(276,4-280,22); use=MiniParse.Spec.Combinators.fst(276,7-280,22)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_fe391d6680769aaad08ee4cff3d82de3.3))


;; def=MiniParse.Spec.Combinators.fst(276,4-280,22); use=MiniParse.Spec.Combinators.fst(276,7-280,22)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(Tm_arrow_21c34ab6214876c3f64c3607461881fc @x2
@x1)))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_fe391d6680769aaad08ee4cff3d82de3.4))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_fe391d6680769aaad08ee4cff3d82de3))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_fe391d6680769aaad08ee4cff3d82de3))

:named MiniParse.Spec.Combinators_interpretation_Tm_arrow_fe391d6680769aaad08ee4cff3d82de3))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_21c34ab6214876c3f64c3607461881fc
;;; Fact-ids: Name MiniParse.Spec.Combinators.coerce_to_bare_param_parser; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(276,4-278,34); use=MiniParse.Spec.Combinators.fst(278,9-278,34)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_21c34ab6214876c3f64c3607461881fc @x1
@x2))
(and 
;; def=MiniParse.Spec.Combinators.fst(276,4-278,34); use=MiniParse.Spec.Combinators.fst(278,9-278,34)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)
(HasType (ApplyTT @x0
@x3)
(MiniParse.Spec.Base.parser_spec @x1)))
 

:pattern ((ApplyTT @x0
@x3))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_21c34ab6214876c3f64c3607461881fc.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_21c34ab6214876c3f64c3607461881fc @x1
@x2)))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_21c34ab6214876c3f64c3607461881fc))

:named MiniParse.Spec.Combinators_interpretation_Tm_arrow_21c34ab6214876c3f64c3607461881fc))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name MiniParse.Spec.Combinators.and_then_cases_injective; Namespace MiniParse.Spec.Combinators
(assert (! (Valid (ApplyTT __uu__PartialApp
MiniParse.Spec.Combinators.coerce_to_bare_param_parser@tok))
:named @kick_partial_app_9ab5738a9f18b75861865b7206bb55e7))
(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(410,2-410,151)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)




; Encoding query formula : forall (t: Type)
;   (p: MiniParse.Spec.Base.parser_spec t)
;   (t': Type)
;   (p': (_: t -> MiniParse.Spec.Base.parser_spec t')).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     MiniParse.Spec.Combinators.and_then_cases_injective p' /\
;     (forall (pure_result: Prims.unit).
;         MiniParse.Spec.Base.no_lookahead (MiniParse.Spec.Combinators.and_then_bare p.f
;               (MiniParse.Spec.Combinators.coerce_to_bare_param_parser p')) ==>
;         p pure_result) ==>
;     (forall (pure_result: Prims.unit).
;         (forall (x: MiniParse.Spec.Base.bytes) (y: MiniParse.Spec.Base.bytes).
;             MiniParse.Spec.Base.no_lookahead p.f /\ MiniParse.Spec.Base.injective p.f /\
;             (forall (x: t).
;                 MiniParse.Spec.Base.no_lookahead (MiniParse.Spec.Combinators.coerce_to_bare_param_parser
;                       p'
;                       x)) ==>
;             MiniParse.Spec.Base.no_lookahead_on (MiniParse.Spec.Combinators.and_then_bare p.f
;                   (MiniParse.Spec.Combinators.coerce_to_bare_param_parser p'))
;               x
;               y) ==>
;         p pure_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let and_then_no_lookahead`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.parser_spec @x0))
(HasType @x2
Tm_type)
(HasType @x3
(Tm_arrow_21c34ab6214876c3f64c3607461881fc @x2
@x0)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(406,12-408,3); use=MiniParse.Spec.Combinators.fst(410,2-410,151)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(406,12-408,3); use=MiniParse.Spec.Combinators.fst(410,2-410,151)
(MiniParse.Spec.Combinators.and_then_cases_injective @x0
@x2
@x3)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(410,2-410,151)
(forall ((@x5 Term))
 (! (implies (and (or label_1
(HasType @x5
Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(409,11-409,102); use=MiniParse.Spec.Combinators.fst(410,2-410,151)
(or label_2

;; def=MiniParse.Spec.Combinators.fst(409,11-409,102); use=MiniParse.Spec.Combinators.fst(410,2-410,151)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(409,11-409,102); use=MiniParse.Spec.Combinators.fst(410,2-410,151)
(MiniParse.Spec.Base.no_lookahead @x2
(MiniParse.Spec.Combinators.and_then_bare @x0
@x2
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
@x1)
(ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.coerce_to_bare_param_parser@tok
@x0)
@x2)
@x3)))
)
)
)

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(410,2-410,151)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(410,2-410,151)
(ApplyTT @x4
@x5)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(410,2-410,151)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(410,2-410,151)
(ApplyTT @x4
@x5)
)
)
:qid @query.2))
)

;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(410,2-410,151)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)

;; def=FStar.Classical.fsti(277,12-277,43); use=MiniParse.Spec.Combinators.fst(410,12-410,26)
(forall ((@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x6
MiniParse.Spec.Base.bytes)
(HasType @x7
MiniParse.Spec.Base.bytes)

;; def=MiniParse.Spec.Combinators.fst(343,6-343,20); use=MiniParse.Spec.Combinators.fst(410,12-410,26)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(343,6-343,20); use=MiniParse.Spec.Combinators.fst(410,12-410,26)
(MiniParse.Spec.Base.no_lookahead @x0
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
@x1))
)


;; def=MiniParse.Spec.Combinators.fst(344,6-344,17); use=MiniParse.Spec.Combinators.fst(410,12-410,26)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(344,6-344,17); use=MiniParse.Spec.Combinators.fst(410,12-410,26)
(MiniParse.Spec.Base.injective @x0
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
@x1))
)


;; def=MiniParse.Spec.Combinators.fst(345,6-345,43); use=MiniParse.Spec.Combinators.fst(410,12-410,26)
(forall ((@x8 Term))
 (! (implies (HasType @x8
@x0)

;; def=MiniParse.Spec.Combinators.fst(345,23-345,42); use=MiniParse.Spec.Combinators.fst(410,12-410,26)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(345,23-345,42); use=MiniParse.Spec.Combinators.fst(410,12-410,26)
(MiniParse.Spec.Base.no_lookahead @x2
(MiniParse.Spec.Combinators.coerce_to_bare_param_parser @x0
@x2
@x3
@x8))
)
)
 
;;no pats
:qid @query.5))
)

;; def=FStar.Classical.fsti(83,21-83,24); use=MiniParse.Spec.Combinators.fst(410,12-410,26)
(Valid 
;; def=FStar.Classical.fsti(83,21-83,24); use=MiniParse.Spec.Combinators.fst(410,12-410,26)
(MiniParse.Spec.Base.no_lookahead_on @x2
(MiniParse.Spec.Combinators.and_then_bare @x0
@x2
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
@x1)
(ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.coerce_to_bare_param_parser@tok
@x0)
@x2)
@x3))
@x6
@x7)
)
)
 
;;no pats
:qid @query.4))
)

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(410,2-410,151)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(410,2-410,151)
(ApplyTT @x4
@x5)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 8714496)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.and_then_no_lookahead, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, MiniParse.Spec.Combinators_interpretation_Tm_arrow_21c34ab6214876c3f64c3607461881fc, equation_MiniParse.Spec.Base.no_lookahead, equation_MiniParse.Spec.Combinators.coerce_to_bare_param_parser, fuel_guarded_inversion_MiniParse.Spec.Base.parser_spec, proj_equation_MiniParse.Spec.Base.Parser_f, refinement_interpretation_Tm_refine_95482e91a565bbc8d113ac6e95692d97, typing_MiniParse.Spec.Base.__proj__Parser__item__f

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let and_then_no_lookahead


; <Start encoding let and_then_no_lookahead>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Combinators.and_then_no_lookahead (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Combinators.and_then_no_lookahead@tok () Term)

; </end encoding let and_then_no_lookahead>


; encoding sigelt #set-options "--max_fuel 8 --max_ifuel 8 --z3rlimit 64"


; <Skipped #set-options "--max_fuel 8 --max_ifuel 8 --z3rlimit 64"/>

(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(428,2-430,28)

(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)









; Encoding query formula : forall (t: Type)
;   (p: MiniParse.Spec.Base.parser_spec t)
;   (t': Type)
;   (p': (_: t -> MiniParse.Spec.Base.parser_spec t')).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     MiniParse.Spec.Combinators.and_then_cases_injective p' /\
;     (forall (pure_result: Prims.unit).
;         MiniParse.Spec.Base.no_lookahead_weak (MiniParse.Spec.Combinators.and_then_bare p.f
;               (MiniParse.Spec.Combinators.coerce_to_bare_param_parser p')) /\
;         MiniParse.Spec.Base.injective (MiniParse.Spec.Combinators.and_then_bare p.f
;               (MiniParse.Spec.Combinators.coerce_to_bare_param_parser p')) /\
;         MiniParse.Spec.Base.no_lookahead (MiniParse.Spec.Combinators.and_then_bare p.f
;               (MiniParse.Spec.Combinators.coerce_to_bare_param_parser p')) ==>
;         p pure_result) ==>
;     MiniParse.Spec.Base.no_lookahead_weak p.f /\
;     (forall (x: t).
;         MiniParse.Spec.Base.no_lookahead_weak (MiniParse.Spec.Combinators.coerce_to_bare_param_parser
;               p'
;               x)) /\
;     (forall (pure_result: Prims.unit).
;         MiniParse.Spec.Base.no_lookahead_weak (MiniParse.Spec.Combinators.and_then_bare p.f
;               (MiniParse.Spec.Combinators.coerce_to_bare_param_parser p')) ==>
;         MiniParse.Spec.Base.injective p.f /\
;         (forall (x: t).
;             MiniParse.Spec.Base.injective (MiniParse.Spec.Combinators.coerce_to_bare_param_parser p'
;                   x)) /\
;         MiniParse.Spec.Combinators.and_then_cases_injective' (MiniParse.Spec.Combinators.coerce_to_bare_param_parser
;               p') /\
;         (forall (pure_result: Prims.unit).
;             MiniParse.Spec.Base.injective (MiniParse.Spec.Combinators.and_then_bare p.f
;                   (MiniParse.Spec.Combinators.coerce_to_bare_param_parser p')) ==>
;             MiniParse.Spec.Combinators.and_then_cases_injective p' /\
;             (forall (pure_result: Prims.unit).
;                 MiniParse.Spec.Base.no_lookahead (MiniParse.Spec.Combinators.and_then_bare p.f
;                       (MiniParse.Spec.Combinators.coerce_to_bare_param_parser p')) ==>
;                 p pure_result)))


; Context: While encoding a query
; While typechecking the top-level declaration `let and_then_correct`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.parser_spec @x0))
(HasType @x2
Tm_type)
(HasType @x3
(Tm_arrow_21c34ab6214876c3f64c3607461881fc @x2
@x0)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(420,12-422,3); use=MiniParse.Spec.Combinators.fst(428,2-430,28)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(420,12-422,3); use=MiniParse.Spec.Combinators.fst(428,2-430,28)
(MiniParse.Spec.Combinators.and_then_cases_injective @x0
@x2
@x3)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(428,2-430,28)
(forall ((@x5 Term))
 (! (implies (and (or label_1
(HasType @x5
Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(424,4-424,98); use=MiniParse.Spec.Combinators.fst(428,2-430,28)
(or label_2

;; def=MiniParse.Spec.Combinators.fst(424,4-424,98); use=MiniParse.Spec.Combinators.fst(428,2-430,28)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(424,4-424,98); use=MiniParse.Spec.Combinators.fst(428,2-430,28)
(MiniParse.Spec.Base.no_lookahead_weak @x2
(MiniParse.Spec.Combinators.and_then_bare @x0
@x2
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
@x1)
(ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.coerce_to_bare_param_parser@tok
@x0)
@x2)
@x3)))
)
)


;; def=MiniParse.Spec.Combinators.fst(425,4-425,90); use=MiniParse.Spec.Combinators.fst(428,2-430,28)
(or label_3

;; def=MiniParse.Spec.Combinators.fst(425,4-425,90); use=MiniParse.Spec.Combinators.fst(428,2-430,28)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(425,4-425,90); use=MiniParse.Spec.Combinators.fst(428,2-430,28)
(MiniParse.Spec.Base.injective @x2
(MiniParse.Spec.Combinators.and_then_bare @x0
@x2
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
@x1)
(ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.coerce_to_bare_param_parser@tok
@x0)
@x2)
@x3)))
)
)


;; def=MiniParse.Spec.Combinators.fst(426,4-426,93); use=MiniParse.Spec.Combinators.fst(428,2-430,28)
(or label_4

;; def=MiniParse.Spec.Combinators.fst(426,4-426,93); use=MiniParse.Spec.Combinators.fst(428,2-430,28)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(426,4-426,93); use=MiniParse.Spec.Combinators.fst(428,2-430,28)
(MiniParse.Spec.Base.no_lookahead @x2
(MiniParse.Spec.Combinators.and_then_bare @x0
@x2
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
@x1)
(ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.coerce_to_bare_param_parser@tok
@x0)
@x2)
@x3)))
)
)
)

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(428,2-430,28)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(428,2-430,28)
(ApplyTT @x4
@x5)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(428,2-430,28)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(428,2-430,28)
(ApplyTT @x4
@x5)
)
)
:qid @query.2))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(428,2-428,28)
(and 
;; def=MiniParse.Spec.Combinators.fst(246,4-246,23); use=MiniParse.Spec.Combinators.fst(428,2-428,28)
(or label_5

;; def=MiniParse.Spec.Combinators.fst(246,4-246,23); use=MiniParse.Spec.Combinators.fst(428,2-428,28)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(246,4-246,23); use=MiniParse.Spec.Combinators.fst(428,2-428,28)
(MiniParse.Spec.Base.no_lookahead_weak @x0
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
@x1))
)
)


;; def=MiniParse.Spec.Combinators.fst(247,4-247,46); use=MiniParse.Spec.Combinators.fst(428,2-428,28)
(forall ((@x5 Term))
 (! (implies (HasType @x5
@x0)

;; def=MiniParse.Spec.Combinators.fst(247,21-247,45); use=MiniParse.Spec.Combinators.fst(428,2-428,28)
(or label_6

;; def=MiniParse.Spec.Combinators.fst(247,21-247,45); use=MiniParse.Spec.Combinators.fst(428,2-428,28)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(247,21-247,45); use=MiniParse.Spec.Combinators.fst(428,2-428,28)
(MiniParse.Spec.Base.no_lookahead_weak @x2
(MiniParse.Spec.Combinators.coerce_to_bare_param_parser @x0
@x2
@x3
@x5))
)
)
)
 
;;no pats
:qid @query.3))


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(428,2-428,28)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(249,11-249,51); use=MiniParse.Spec.Combinators.fst(428,2-428,28)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(249,11-249,51); use=MiniParse.Spec.Combinators.fst(428,2-428,28)
(MiniParse.Spec.Base.no_lookahead_weak @x2
(MiniParse.Spec.Combinators.and_then_bare @x0
@x2
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
@x1)
(ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.coerce_to_bare_param_parser@tok
@x0)
@x2)
@x3)))
)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(429,2-429,20)
(and 
;; def=MiniParse.Spec.Combinators.fst(297,4-297,15); use=MiniParse.Spec.Combinators.fst(429,2-429,20)
(or label_7

;; def=MiniParse.Spec.Combinators.fst(297,4-297,15); use=MiniParse.Spec.Combinators.fst(429,2-429,20)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(297,4-297,15); use=MiniParse.Spec.Combinators.fst(429,2-429,20)
(MiniParse.Spec.Base.injective @x0
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
@x1))
)
)


;; def=MiniParse.Spec.Combinators.fst(298,4-298,38); use=MiniParse.Spec.Combinators.fst(429,2-429,20)
(forall ((@x6 Term))
 (! (implies (HasType @x6
@x0)

;; def=MiniParse.Spec.Combinators.fst(298,21-298,37); use=MiniParse.Spec.Combinators.fst(429,2-429,20)
(or label_8

;; def=MiniParse.Spec.Combinators.fst(298,21-298,37); use=MiniParse.Spec.Combinators.fst(429,2-429,20)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(298,21-298,37); use=MiniParse.Spec.Combinators.fst(429,2-429,20)
(MiniParse.Spec.Base.injective @x2
(MiniParse.Spec.Combinators.coerce_to_bare_param_parser @x0
@x2
@x3
@x6))
)
)
)
 
;;no pats
:qid @query.5))


;; def=MiniParse.Spec.Combinators.fst(299,4-299,32); use=MiniParse.Spec.Combinators.fst(429,2-429,20)
(or label_9

;; def=MiniParse.Spec.Combinators.fst(299,4-299,32); use=MiniParse.Spec.Combinators.fst(429,2-429,20)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(299,4-299,32); use=MiniParse.Spec.Combinators.fst(429,2-429,20)
(MiniParse.Spec.Combinators.and_then_cases_injective_ @x0
@x2
(ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.coerce_to_bare_param_parser@tok
@x0)
@x2)
@x3))
)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(429,2-429,20)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(301,11-303,3); use=MiniParse.Spec.Combinators.fst(429,2-429,20)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(301,11-303,3); use=MiniParse.Spec.Combinators.fst(429,2-429,20)
(MiniParse.Spec.Base.injective @x2
(MiniParse.Spec.Combinators.and_then_bare @x0
@x2
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
@x1)
(ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.coerce_to_bare_param_parser@tok
@x0)
@x2)
@x3)))
)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(430,2-430,23)
(and 
;; def=MiniParse.Spec.Combinators.fst(406,12-408,3); use=MiniParse.Spec.Combinators.fst(430,2-430,23)
(or label_10

;; def=MiniParse.Spec.Combinators.fst(406,12-408,3); use=MiniParse.Spec.Combinators.fst(430,2-430,23)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(406,12-408,3); use=MiniParse.Spec.Combinators.fst(430,2-430,23)
(MiniParse.Spec.Combinators.and_then_cases_injective @x0
@x2
@x3)
)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(430,2-430,23)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(409,11-409,102); use=MiniParse.Spec.Combinators.fst(430,2-430,23)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(409,11-409,102); use=MiniParse.Spec.Combinators.fst(430,2-430,23)
(MiniParse.Spec.Base.no_lookahead @x2
(MiniParse.Spec.Combinators.and_then_bare @x0
@x2
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
@x1)
(ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.coerce_to_bare_param_parser@tok
@x0)
@x2)
@x3)))
)
)

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(430,2-430,23)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(430,2-430,23)
(ApplyTT @x4
@x7)
)
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 34857984)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.and_then_correct, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, MiniParse.Spec.Combinators_interpretation_Tm_arrow_21c34ab6214876c3f64c3607461881fc, data_elim_MiniParse.Spec.Base.Parser, equation_MiniParse.Spec.Combinators.and_then_cases_injective, equation_MiniParse.Spec.Combinators.coerce_to_bare_param_parser, fuel_guarded_inversion_MiniParse.Spec.Base.parser_spec, proj_equation_MiniParse.Spec.Base.Parser_f, refinement_interpretation_Tm_refine_95482e91a565bbc8d113ac6e95692d97, typing_MiniParse.Spec.Base.__proj__Parser__item__f

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let and_then_correct


; <Start encoding let and_then_correct>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Combinators.and_then_correct (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Combinators.and_then_correct@tok () Term)

; </end encoding let and_then_correct>


; encoding sigelt #reset-options


; <Skipped #reset-options/>


; encoding sigelt val MiniParse.Spec.Combinators.and_then


; <Skipped val MiniParse.Spec.Combinators.and_then/>

(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(445,26-448,10)

(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)










; Encoding query formula : forall (t: Type)
;   (p: MiniParse.Spec.Base.parser_spec t)
;   (t': Type)
;   (p': (_: t -> MiniParse.Spec.Base.parser_spec t')).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post (MiniParse.Spec.Base.parser_spec t')).
;     MiniParse.Spec.Combinators.and_then_cases_injective p' /\
;     (forall (pure_result: MiniParse.Spec.Base.parser_spec t'). Prims.auto_squash (p pure_result)) ==>
;     MiniParse.Spec.Combinators.and_then_cases_injective p' /\
;     (forall (pure_result: Prims.unit).
;         MiniParse.Spec.Base.no_lookahead_weak (MiniParse.Spec.Combinators.and_then_bare p.f
;               (MiniParse.Spec.Combinators.coerce_to_bare_param_parser p')) /\
;         MiniParse.Spec.Base.injective (MiniParse.Spec.Combinators.and_then_bare p.f
;               (MiniParse.Spec.Combinators.coerce_to_bare_param_parser p')) /\
;         MiniParse.Spec.Base.no_lookahead (MiniParse.Spec.Combinators.and_then_bare p.f
;               (MiniParse.Spec.Combinators.coerce_to_bare_param_parser p')) ==>
;         MiniParse.Spec.Base.no_lookahead_weak (MiniParse.Spec.Combinators.and_then_bare p.f
;               (MiniParse.Spec.Combinators.coerce_to_bare_param_parser p')) /\
;         MiniParse.Spec.Base.injective (MiniParse.Spec.Combinators.and_then_bare p.f
;               (MiniParse.Spec.Combinators.coerce_to_bare_param_parser p')) /\
;         MiniParse.Spec.Base.no_lookahead (MiniParse.Spec.Combinators.and_then_bare p.f
;               (MiniParse.Spec.Combinators.coerce_to_bare_param_parser p')) /\
;         (forall (any_result: MiniParse.Spec.Base.bare_parser t').
;             MiniParse.Spec.Combinators.and_then_bare p.f
;               (MiniParse.Spec.Combinators.coerce_to_bare_param_parser p') ==
;             any_result ==>
;             (forall (any_result: MiniParse.Spec.Base.parser_spec t').
;                 any_result ==
;                 MiniParse.Spec.Base.Parser
;                 (MiniParse.Spec.Combinators.and_then_bare p.f
;                     (MiniParse.Spec.Combinators.coerce_to_bare_param_parser p')) ==>
;                 (forall (return_val: MiniParse.Spec.Base.parser_spec t').
;                     return_val == any_result ==> p return_val))))


; Context: While encoding a query
; While typechecking the top-level declaration `let and_then`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.parser_spec @x0))
(HasType @x2
Tm_type)
(HasType @x3
(Tm_arrow_21c34ab6214876c3f64c3607461881fc @x2
@x0)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post (MiniParse.Spec.Base.parser_spec @x2)))

;; def=MiniParse.Spec.Combinators.fst(440,12-442,3); use=MiniParse.Spec.Combinators.fst(445,26-448,10)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(440,12-442,3); use=MiniParse.Spec.Combinators.fst(445,26-448,10)
(MiniParse.Spec.Combinators.and_then_cases_injective @x0
@x2
@x3)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(445,26-448,10)
(forall ((@x5 Term))
 (! (implies (or label_1
(HasType @x5
(MiniParse.Spec.Base.parser_spec @x2)))

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(445,26-448,10)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(445,26-448,10)
(ApplyTT @x4
@x5)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(445,26-448,10)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(445,26-448,10)
(ApplyTT @x4
@x5)
)
)
:qid @query.2))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(447,2-447,18)
(and 
;; def=MiniParse.Spec.Combinators.fst(420,12-422,3); use=MiniParse.Spec.Combinators.fst(447,2-447,18)
(or label_2

;; def=MiniParse.Spec.Combinators.fst(420,12-422,3); use=MiniParse.Spec.Combinators.fst(447,2-447,18)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(420,12-422,3); use=MiniParse.Spec.Combinators.fst(447,2-447,18)
(MiniParse.Spec.Combinators.and_then_cases_injective @x0
@x2
@x3)
)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(447,2-447,18)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(424,4-424,98); use=MiniParse.Spec.Combinators.fst(447,2-447,18)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(424,4-424,98); use=MiniParse.Spec.Combinators.fst(447,2-447,18)
(MiniParse.Spec.Base.no_lookahead_weak @x2
(MiniParse.Spec.Combinators.and_then_bare @x0
@x2
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
@x1)
(ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.coerce_to_bare_param_parser@tok
@x0)
@x2)
@x3)))
)


;; def=MiniParse.Spec.Combinators.fst(425,4-425,90); use=MiniParse.Spec.Combinators.fst(447,2-447,18)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(425,4-425,90); use=MiniParse.Spec.Combinators.fst(447,2-447,18)
(MiniParse.Spec.Base.injective @x2
(MiniParse.Spec.Combinators.and_then_bare @x0
@x2
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
@x1)
(ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.coerce_to_bare_param_parser@tok
@x0)
@x2)
@x3)))
)


;; def=MiniParse.Spec.Combinators.fst(426,4-426,93); use=MiniParse.Spec.Combinators.fst(447,2-447,18)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(426,4-426,93); use=MiniParse.Spec.Combinators.fst(447,2-447,18)
(MiniParse.Spec.Base.no_lookahead @x2
(MiniParse.Spec.Combinators.and_then_bare @x0
@x2
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
@x1)
(ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.coerce_to_bare_param_parser@tok
@x0)
@x2)
@x3)))
)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(445,26-448,10)
(and 
;; def=MiniParse.Spec.Base.fst(241,4-241,23); use=MiniParse.Spec.Combinators.fst(448,9-448,10)
(or label_3

;; def=MiniParse.Spec.Base.fst(241,4-241,23); use=MiniParse.Spec.Combinators.fst(448,9-448,10)
(Valid 
;; def=MiniParse.Spec.Base.fst(241,4-241,23); use=MiniParse.Spec.Combinators.fst(448,9-448,10)
(MiniParse.Spec.Base.no_lookahead_weak @x2
(MiniParse.Spec.Combinators.and_then_bare @x0
@x2
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
@x1)
(ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.coerce_to_bare_param_parser@tok
@x0)
@x2)
@x3)))
)
)


;; def=MiniParse.Spec.Base.fst(242,4-242,15); use=MiniParse.Spec.Combinators.fst(448,9-448,10)
(or label_4

;; def=MiniParse.Spec.Base.fst(242,4-242,15); use=MiniParse.Spec.Combinators.fst(448,9-448,10)
(Valid 
;; def=MiniParse.Spec.Base.fst(242,4-242,15); use=MiniParse.Spec.Combinators.fst(448,9-448,10)
(MiniParse.Spec.Base.injective @x2
(MiniParse.Spec.Combinators.and_then_bare @x0
@x2
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
@x1)
(ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.coerce_to_bare_param_parser@tok
@x0)
@x2)
@x3)))
)
)


;; def=MiniParse.Spec.Base.fst(243,4-243,18); use=MiniParse.Spec.Combinators.fst(448,9-448,10)
(or label_5

;; def=MiniParse.Spec.Base.fst(243,4-243,18); use=MiniParse.Spec.Combinators.fst(448,9-448,10)
(Valid 
;; def=MiniParse.Spec.Base.fst(243,4-243,18); use=MiniParse.Spec.Combinators.fst(448,9-448,10)
(MiniParse.Spec.Base.no_lookahead @x2
(MiniParse.Spec.Combinators.and_then_bare @x0
@x2
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
@x1)
(ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.coerce_to_bare_param_parser@tok
@x0)
@x2)
@x3)))
)
)


;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(445,26-448,10)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(MiniParse.Spec.Base.bare_parser @x2))

;; def=MiniParse.Spec.Base.fst(240,14-240,15); use=MiniParse.Spec.Combinators.fst(445,26-448,10)
(= (MiniParse.Spec.Combinators.and_then_bare @x0
@x2
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
@x1)
(ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.coerce_to_bare_param_parser@tok
@x0)
@x2)
@x3))
@x6)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(445,26-448,10)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(MiniParse.Spec.Base.parser_spec @x2))

;; def=MiniParse.Spec.Combinators.fst(439,7-448,10); use=MiniParse.Spec.Combinators.fst(445,26-448,10)
(= @x7
(MiniParse.Spec.Base.Parser @x2
(MiniParse.Spec.Combinators.and_then_bare @x0
@x2
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
@x1)
(ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.coerce_to_bare_param_parser@tok
@x0)
@x2)
@x3))))
)

;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(MiniParse.Spec.Base.parser_spec @x2))

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x8
@x7)
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x4
@x8)
)
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.and_then, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let and_then


; <Start encoding let and_then>


(declare-fun MiniParse.Spec.Combinators.and_then (Term Term Term Term) Term)


;;;;;;;;;;;;;;;;p: MiniParse.Spec.Base.parser_spec t -> p': (_: t -> MiniParse.Spec.Base.parser_spec t')   -> Prims.Pure (MiniParse.Spec.Base.parser_spec t')
(declare-fun Tm_arrow_2369fd909083477d520f1f9f872723e0 () Term)
(declare-fun MiniParse.Spec.Combinators.and_then@tok () Term)




; </end encoding let and_then>


; encoding sigelt #set-options "--z3rlimit 16"


; <Skipped #set-options "--z3rlimit 16"/>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Combinators.and_then; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(445,4-445,12); use=MiniParse.Spec.Combinators.fst(445,4-445,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and 
;; def=MiniParse.Spec.Combinators.fst(440,12-442,3); use=MiniParse.Spec.Combinators.fst(445,4-445,12)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(440,12-442,3); use=MiniParse.Spec.Combinators.fst(445,4-445,12)
(MiniParse.Spec.Combinators.and_then_cases_injective @x0
@x2
@x3)
)

(HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.parser_spec @x0))
(HasType @x2
Tm_type)
(HasType @x3
(Tm_arrow_21c34ab6214876c3f64c3607461881fc @x2
@x0)))
(HasType (MiniParse.Spec.Combinators.and_then @x0
@x1
@x2
@x3)
(Tm_refine_795fb455fe887e79d318ca3f6d129a29 @x2)))
 

:pattern ((MiniParse.Spec.Combinators.and_then @x0
@x1
@x2
@x3))
:qid typing_MiniParse.Spec.Combinators.and_then))

:named typing_MiniParse.Spec.Combinators.and_then))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Combinators.and_then
;;; Fact-ids: Name MiniParse.Spec.Combinators.and_then; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(445,4-445,12); use=MiniParse.Spec.Combinators.fst(445,4-445,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (MiniParse.Spec.Combinators.and_then @x0
@x1
@x2
@x3)
(MiniParse.Spec.Base.Parser @x2
(MiniParse.Spec.Combinators.and_then_bare @x0
@x2
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
@x1)
(ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.coerce_to_bare_param_parser@tok
@x0)
@x2)
@x3))))
 

:pattern ((MiniParse.Spec.Combinators.and_then @x0
@x1
@x2
@x3))
:qid equation_MiniParse.Spec.Combinators.and_then))

:named equation_MiniParse.Spec.Combinators.and_then))
(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(460,2-460,74)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
;;;;;;;;;;;;;;;;v2: t2 -> MiniParse.Spec.Base.parser_spec (t1 & t2)
(declare-fun Tm_arrow_383de413e051f04d83f8d52608a46263 (Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_383de413e051f04d83f8d52608a46263
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(438,17-457,6); use=MiniParse.Spec.Combinators.fst(458,19-460,39)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_383de413e051f04d83f8d52608a46263 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_383de413e051f04d83f8d52608a46263 @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_383de413e051f04d83f8d52608a46263))

:named kinding_Tm_arrow_383de413e051f04d83f8d52608a46263))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(438,17-457,6); use=MiniParse.Spec.Combinators.fst(458,19-460,39)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_383de413e051f04d83f8d52608a46263 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_383de413e051f04d83f8d52608a46263 @x2
@x3)))
:qid MiniParse.Spec.Combinators_pre_typing_Tm_arrow_383de413e051f04d83f8d52608a46263))

:named MiniParse.Spec.Combinators_pre_typing_Tm_arrow_383de413e051f04d83f8d52608a46263))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_383de413e051f04d83f8d52608a46263
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(438,17-457,6); use=MiniParse.Spec.Combinators.fst(458,19-460,39)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_383de413e051f04d83f8d52608a46263 @x1
@x2))
(and 
;; def=MiniParse.Spec.Combinators.fst(438,17-457,6); use=MiniParse.Spec.Combinators.fst(458,19-460,39)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)
(HasType (ApplyTT @x0
@x3)
(MiniParse.Spec.Base.parser_spec (FStar.Pervasives.Native.tuple2 @x1
@x2))))
 

:pattern ((ApplyTT @x0
@x3))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_383de413e051f04d83f8d52608a46263.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_383de413e051f04d83f8d52608a46263 @x1
@x2)))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_383de413e051f04d83f8d52608a46263))

:named MiniParse.Spec.Combinators_interpretation_Tm_arrow_383de413e051f04d83f8d52608a46263))
(declare-fun Tm_abs_b1966e89e7cd8f7f0d8af601292dbb6f (Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_b1966e89e7cd8f7f0d8af601292dbb6f
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(460,52-460,72); use=MiniParse.Spec.Combinators.fst(460,31-460,39)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_abs_b1966e89e7cd8f7f0d8af601292dbb6f @x0
@x1
@x2)
(Tm_arrow_383de413e051f04d83f8d52608a46263 @x1
@x2))
 

:pattern ((Tm_abs_b1966e89e7cd8f7f0d8af601292dbb6f @x0
@x1
@x2))
:qid typing_Tm_abs_b1966e89e7cd8f7f0d8af601292dbb6f))

:named typing_Tm_abs_b1966e89e7cd8f7f0d8af601292dbb6f))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_b1966e89e7cd8f7f0d8af601292dbb6f
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(460,52-460,72); use=MiniParse.Spec.Combinators.fst(460,31-460,39)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (Tm_abs_b1966e89e7cd8f7f0d8af601292dbb6f @x1
@x2
@x3)
@x0)
(MiniParse.Spec.Combinators.parse_ret (FStar.Pervasives.Native.tuple2 @x2
@x3)
(FStar.Pervasives.Native.Mktuple2 @x2
@x3
@x1
@x0)))
 

:pattern ((ApplyTT (Tm_abs_b1966e89e7cd8f7f0d8af601292dbb6f @x1
@x2
@x3)
@x0))
:qid interpretation_Tm_abs_b1966e89e7cd8f7f0d8af601292dbb6f))

:named interpretation_Tm_abs_b1966e89e7cd8f7f0d8af601292dbb6f))
;;;;;;;;;;;;;;;;_: t1 -> MiniParse.Spec.Base.parser_spec (t1 & t2)
(declare-fun Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5 (Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(438,17-455,6); use=MiniParse.Spec.Combinators.fst(456,19-460,74)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5 @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5))

:named kinding_Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(438,17-455,6); use=MiniParse.Spec.Combinators.fst(456,19-460,74)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5 @x2
@x3)))
:qid MiniParse.Spec.Combinators_pre_typing_Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5))

:named MiniParse.Spec.Combinators_pre_typing_Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(438,17-455,6); use=MiniParse.Spec.Combinators.fst(456,19-460,74)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5 @x1
@x2))
(and 
;; def=MiniParse.Spec.Combinators.fst(438,17-455,6); use=MiniParse.Spec.Combinators.fst(456,19-460,74)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)
(HasType (ApplyTT @x0
@x3)
(MiniParse.Spec.Base.parser_spec (FStar.Pervasives.Native.tuple2 @x2
@x1))))
 

:pattern ((ApplyTT @x0
@x3))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5 @x1
@x2)))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5))

:named MiniParse.Spec.Combinators_interpretation_Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5))



(declare-fun Tm_abs_9b0fdcdb7bad65cf740850da64bc002a (Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_9b0fdcdb7bad65cf740850da64bc002a
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(460,27-460,73); use=MiniParse.Spec.Combinators.fst(460,6-460,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_abs_9b0fdcdb7bad65cf740850da64bc002a @x0
@x1
@x2)
(Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5 @x1
@x2))
 

:pattern ((Tm_abs_9b0fdcdb7bad65cf740850da64bc002a @x0
@x1
@x2))
:qid typing_Tm_abs_9b0fdcdb7bad65cf740850da64bc002a))

:named typing_Tm_abs_9b0fdcdb7bad65cf740850da64bc002a))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_9b0fdcdb7bad65cf740850da64bc002a
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(460,27-460,73); use=MiniParse.Spec.Combinators.fst(460,6-460,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (Tm_abs_9b0fdcdb7bad65cf740850da64bc002a @x1
@x2
@x3)
@x0)
(MiniParse.Spec.Combinators.and_then @x2
@x1
(FStar.Pervasives.Native.tuple2 @x3
@x2)
(Tm_abs_b1966e89e7cd8f7f0d8af601292dbb6f @x0
@x3
@x2)))
 

:pattern ((ApplyTT (Tm_abs_9b0fdcdb7bad65cf740850da64bc002a @x1
@x2
@x3)
@x0))
:qid interpretation_Tm_abs_9b0fdcdb7bad65cf740850da64bc002a))

:named interpretation_Tm_abs_9b0fdcdb7bad65cf740850da64bc002a))





; Encoding query formula : forall (t1: Type)
;   (p1: MiniParse.Spec.Base.parser_spec t1)
;   (t2: Type)
;   (p2: MiniParse.Spec.Base.parser_spec t2).
;   (*  - Could not prove post-condition
; *)
;   (forall (v1: t1).
;       (*  - Could not prove post-condition
; *)
;       Prims.auto_squash (MiniParse.Spec.Combinators.and_then_cases_injective (fun v2 ->
;                 MiniParse.Spec.Combinators.parse_ret (v1, v2)))) /\
;   (forall (any_result: (_: t1 -> MiniParse.Spec.Base.parser_spec (t1 & t2))).
;       (fun v1 ->
;           MiniParse.Spec.Combinators.and_then p2
;             (fun v2 -> MiniParse.Spec.Combinators.parse_ret (v1, v2))) ==
;       any_result ==>
;       MiniParse.Spec.Combinators.and_then_cases_injective (fun v1 ->
;             MiniParse.Spec.Combinators.and_then p2
;               (fun v2 -> MiniParse.Spec.Combinators.parse_ret (v1, v2))))


; Context: While encoding a query
; While typechecking the top-level declaration `let nondep_then`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.parser_spec @x0))
(HasType @x2
Tm_type)
(HasType @x3
(MiniParse.Spec.Base.parser_spec @x2)))

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(460,2-460,74)
(and 
;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(460,2-460,74)
(forall ((@x4 Term))
 (! (implies (HasType @x4
@x0)

;; def=MiniParse.Spec.Combinators.fst(440,12-442,3); use=MiniParse.Spec.Combinators.fst(460,31-460,39)
(or label_1

;; def=MiniParse.Spec.Combinators.fst(440,12-442,3); use=MiniParse.Spec.Combinators.fst(460,31-460,39)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(440,12-442,3); use=MiniParse.Spec.Combinators.fst(460,31-460,39)
(MiniParse.Spec.Combinators.and_then_cases_injective @x2
(FStar.Pervasives.Native.tuple2 @x0
@x2)
(Tm_abs_b1966e89e7cd8f7f0d8af601292dbb6f @x4
@x0
@x2))
)
)
)
 
;;no pats
:qid @query.1))


;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(460,2-460,74)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5 @x2
@x0))

;; def=MiniParse.Spec.Combinators.fst(438,3-460,73); use=MiniParse.Spec.Combinators.fst(460,2-460,74)
(= (Tm_abs_9b0fdcdb7bad65cf740850da64bc002a @x3
@x2
@x0)
@x4)
)

;; def=MiniParse.Spec.Combinators.fst(440,12-442,3); use=MiniParse.Spec.Combinators.fst(460,6-460,14)
(or label_2

;; def=MiniParse.Spec.Combinators.fst(440,12-442,3); use=MiniParse.Spec.Combinators.fst(460,6-460,14)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(440,12-442,3); use=MiniParse.Spec.Combinators.fst(460,6-460,14)
(MiniParse.Spec.Combinators.and_then_cases_injective @x0
(FStar.Pervasives.Native.tuple2 @x0
@x2)
(Tm_abs_9b0fdcdb7bad65cf740850da64bc002a @x3
@x2
@x0))
)
)
)
 
;;no pats
:qid @query.2))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 8714496)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.nondep_then, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, constructor_distinct_FStar.Pervasives.Native.None, constructor_distinct_Tm_unit, equation_MiniParse.Spec.Base.bparse, equation_MiniParse.Spec.Base.consumed_length, equation_MiniParse.Spec.Combinators.and_then, equation_MiniParse.Spec.Combinators.and_then_bare, equation_MiniParse.Spec.Combinators.and_then_cases_injective, equation_MiniParse.Spec.Combinators.and_then_cases_injective_, equation_MiniParse.Spec.Combinators.and_then_cases_injective_precond, equation_MiniParse.Spec.Combinators.coerce_to_bare_param_parser, equation_MiniParse.Spec.Combinators.parse_ret, fuel_guarded_inversion_MiniParse.Spec.Base.parser_spec, interpretation_Tm_abs_24c49183d745861a79c9e705ccd478d5, interpretation_Tm_abs_5a56d64ec9685d0352c27644697b3e56, interpretation_Tm_abs_9b0fdcdb7bad65cf740850da64bc002a, interpretation_Tm_abs_b1966e89e7cd8f7f0d8af601292dbb6f, proj_equation_MiniParse.Spec.Base.Parser_f, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_FStar.Pervasives.Native.Some_v, projection_inverse_MiniParse.Spec.Base.Parser_f, token_correspondence_MiniParse.Spec.Combinators.coerce_to_bare_param_parser

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let nondep_then


; <Start encoding let nondep_then>

(declare-fun MiniParse.Spec.Combinators.nondep_then (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;p1: MiniParse.Spec.Base.parser_spec t1 -> p2: MiniParse.Spec.Base.parser_spec t2   -> MiniParse.Spec.Base.parser_spec (t1 & t2)
(declare-fun Tm_arrow_a8780ac7271bfe1e8f85e52ecd64da36 () Term)
(declare-fun MiniParse.Spec.Combinators.nondep_then@tok () Term)
;;;;;;;;;;;;;;;;v2: t2 -> MiniParse.Spec.Base.parser_spec (t1 & t2)
(declare-fun Tm_arrow_383de413e051f04d83f8d52608a46263 (Term Term) Term)
(declare-fun Tm_abs_b1966e89e7cd8f7f0d8af601292dbb6f (Term Term Term) Term)
;;;;;;;;;;;;;;;;v1: t1 -> MiniParse.Spec.Base.parser_spec (t1 & t2)
(declare-fun Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5 (Term Term) Term)
(declare-fun Tm_abs_9b0fdcdb7bad65cf740850da64bc002a (Term Term Term) Term)

; </end encoding let nondep_then>

;;;;;;;;;;;;;;;;typing_Tm_abs_b1966e89e7cd8f7f0d8af601292dbb6f
;;; Fact-ids: Name MiniParse.Spec.Combinators.nondep_then; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(460,52-460,72); use=MiniParse.Spec.Combinators.fst(460,52-460,72)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_abs_b1966e89e7cd8f7f0d8af601292dbb6f @x0
@x1
@x2)
(Tm_arrow_383de413e051f04d83f8d52608a46263 @x1
@x2))
 

:pattern ((Tm_abs_b1966e89e7cd8f7f0d8af601292dbb6f @x0
@x1
@x2))
:qid typing_Tm_abs_b1966e89e7cd8f7f0d8af601292dbb6f))

:named typing_Tm_abs_b1966e89e7cd8f7f0d8af601292dbb6f))
;;;;;;;;;;;;;;;;typing_Tm_abs_9b0fdcdb7bad65cf740850da64bc002a
;;; Fact-ids: Name MiniParse.Spec.Combinators.nondep_then; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(460,27-460,73); use=MiniParse.Spec.Combinators.fst(460,27-460,73)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_abs_9b0fdcdb7bad65cf740850da64bc002a @x0
@x1
@x2)
(Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5 @x1
@x2))
 

:pattern ((Tm_abs_9b0fdcdb7bad65cf740850da64bc002a @x0
@x1
@x2))
:qid typing_Tm_abs_9b0fdcdb7bad65cf740850da64bc002a))

:named typing_Tm_abs_9b0fdcdb7bad65cf740850da64bc002a))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Combinators.nondep_then; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(454,4-454,15); use=MiniParse.Spec.Combinators.fst(454,4-454,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.parser_spec @x0))
(HasType @x2
Tm_type)
(HasType @x3
(MiniParse.Spec.Base.parser_spec @x2)))
(HasType (MiniParse.Spec.Combinators.nondep_then @x0
@x1
@x2
@x3)
(MiniParse.Spec.Base.parser_spec (FStar.Pervasives.Native.tuple2 @x0
@x2))))
 

:pattern ((MiniParse.Spec.Combinators.nondep_then @x0
@x1
@x2
@x3))
:qid typing_MiniParse.Spec.Combinators.nondep_then))

:named typing_MiniParse.Spec.Combinators.nondep_then))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5
;;; Fact-ids: Name MiniParse.Spec.Combinators.nondep_then; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(438,17-455,6); use=MiniParse.Spec.Combinators.fst(456,19-460,14)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5 @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5))

:named kinding_Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_383de413e051f04d83f8d52608a46263
;;; Fact-ids: Name MiniParse.Spec.Combinators.nondep_then; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(438,17-457,6); use=MiniParse.Spec.Combinators.fst(458,19-460,39)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_383de413e051f04d83f8d52608a46263 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_383de413e051f04d83f8d52608a46263 @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_383de413e051f04d83f8d52608a46263))

:named kinding_Tm_arrow_383de413e051f04d83f8d52608a46263))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_b1966e89e7cd8f7f0d8af601292dbb6f
;;; Fact-ids: Name MiniParse.Spec.Combinators.nondep_then; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(460,52-460,72); use=MiniParse.Spec.Combinators.fst(460,52-460,72)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (Tm_abs_b1966e89e7cd8f7f0d8af601292dbb6f @x1
@x2
@x3)
@x0)
(MiniParse.Spec.Combinators.parse_ret (FStar.Pervasives.Native.tuple2 @x2
@x3)
(FStar.Pervasives.Native.Mktuple2 @x2
@x3
@x1
@x0)))
 

:pattern ((ApplyTT (Tm_abs_b1966e89e7cd8f7f0d8af601292dbb6f @x1
@x2
@x3)
@x0))
:qid interpretation_Tm_abs_b1966e89e7cd8f7f0d8af601292dbb6f))

:named interpretation_Tm_abs_b1966e89e7cd8f7f0d8af601292dbb6f))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_9b0fdcdb7bad65cf740850da64bc002a
;;; Fact-ids: Name MiniParse.Spec.Combinators.nondep_then; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(460,27-460,73); use=MiniParse.Spec.Combinators.fst(460,27-460,73)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (Tm_abs_9b0fdcdb7bad65cf740850da64bc002a @x1
@x2
@x3)
@x0)
(MiniParse.Spec.Combinators.and_then @x2
@x1
(FStar.Pervasives.Native.tuple2 @x3
@x2)
(Tm_abs_b1966e89e7cd8f7f0d8af601292dbb6f @x0
@x3
@x2)))
 

:pattern ((ApplyTT (Tm_abs_9b0fdcdb7bad65cf740850da64bc002a @x1
@x2
@x3)
@x0))
:qid interpretation_Tm_abs_9b0fdcdb7bad65cf740850da64bc002a))

:named interpretation_Tm_abs_9b0fdcdb7bad65cf740850da64bc002a))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Combinators.nondep_then
;;; Fact-ids: Name MiniParse.Spec.Combinators.nondep_then; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(454,4-454,15); use=MiniParse.Spec.Combinators.fst(454,4-454,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (MiniParse.Spec.Combinators.nondep_then @x0
@x1
@x2
@x3)
(MiniParse.Spec.Combinators.and_then @x0
@x1
(FStar.Pervasives.Native.tuple2 @x0
@x2)
(Tm_abs_9b0fdcdb7bad65cf740850da64bc002a @x3
@x2
@x0)))
 

:pattern ((MiniParse.Spec.Combinators.nondep_then @x0
@x1
@x2
@x3))
:qid equation_MiniParse.Spec.Combinators.nondep_then))

:named equation_MiniParse.Spec.Combinators.nondep_then))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name MiniParse.Spec.Combinators.nondep_then; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(438,17-455,6); use=MiniParse.Spec.Combinators.fst(456,19-460,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5 @x2
@x3)))
:qid MiniParse.Spec.Combinators_pre_typing_Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5))

:named MiniParse.Spec.Combinators_pre_typing_Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name MiniParse.Spec.Combinators.nondep_then; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(438,17-457,6); use=MiniParse.Spec.Combinators.fst(458,19-460,39)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_383de413e051f04d83f8d52608a46263 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_383de413e051f04d83f8d52608a46263 @x2
@x3)))
:qid MiniParse.Spec.Combinators_pre_typing_Tm_arrow_383de413e051f04d83f8d52608a46263))

:named MiniParse.Spec.Combinators_pre_typing_Tm_arrow_383de413e051f04d83f8d52608a46263))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5
;;; Fact-ids: Name MiniParse.Spec.Combinators.nondep_then; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(438,17-455,6); use=MiniParse.Spec.Combinators.fst(456,19-460,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5 @x1
@x2))
(and 
;; def=MiniParse.Spec.Combinators.fst(438,17-455,6); use=MiniParse.Spec.Combinators.fst(456,19-460,14)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)
(HasType (ApplyTT @x0
@x3)
(MiniParse.Spec.Base.parser_spec (FStar.Pervasives.Native.tuple2 @x2
@x1))))
 

:pattern ((ApplyTT @x0
@x3))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5 @x1
@x2)))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5))

:named MiniParse.Spec.Combinators_interpretation_Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_383de413e051f04d83f8d52608a46263
;;; Fact-ids: Name MiniParse.Spec.Combinators.nondep_then; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(438,17-457,6); use=MiniParse.Spec.Combinators.fst(458,19-460,39)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_383de413e051f04d83f8d52608a46263 @x1
@x2))
(and 
;; def=MiniParse.Spec.Combinators.fst(438,17-457,6); use=MiniParse.Spec.Combinators.fst(458,19-460,39)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)
(HasType (ApplyTT @x0
@x3)
(MiniParse.Spec.Base.parser_spec (FStar.Pervasives.Native.tuple2 @x1
@x2))))
 

:pattern ((ApplyTT @x0
@x3))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_383de413e051f04d83f8d52608a46263.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_383de413e051f04d83f8d52608a46263 @x1
@x2)))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_383de413e051f04d83f8d52608a46263))

:named MiniParse.Spec.Combinators_interpretation_Tm_arrow_383de413e051f04d83f8d52608a46263))
(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(479,2-479,4)

(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
Tm_type)
:named refinement_kinding_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(468,2-478,4); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasTypeFuel @u0
@x1
Prims.unit))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
:qid refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

:named refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
(declare-fun Tm_refine_276a81d3c3eadebff56bb9e61978d236 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_276a81d3c3eadebff56bb9e61978d236))

:named refinement_kinding_Tm_refine_276a81d3c3eadebff56bb9e61978d236))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.nat)
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x2
@x1))
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x1
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x3)))))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_276a81d3c3eadebff56bb9e61978d236))

:named refinement_interpretation_Tm_refine_276a81d3c3eadebff56bb9e61978d236))
;;;;;;;;;;;;;;;;haseq for Tm_refine_276a81d3c3eadebff56bb9e61978d236
;;; Fact-ids: 
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x0
@x1)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x0
@x1))))
:qid haseqTm_refine_276a81d3c3eadebff56bb9e61978d236))

:named haseqTm_refine_276a81d3c3eadebff56bb9e61978d236))

; Encoding query formula : forall (t1: Type)
;   (p1: MiniParse.Spec.Base.parser_spec t1)
;   (t2: Type)
;   (p2: MiniParse.Spec.Base.parser_spec t2)
;   (b: MiniParse.Spec.Base.bytes).
;   (forall (_: Prims.squash Prims.l_True).
;       (*  - Could not prove post-condition
; *)
;       forall (any_result:
;         FStar.Pervasives.Native.option ((t1 & t2) & MiniParse.Spec.Base.consumed_length b)).
;         MiniParse.Spec.Base.parse (MiniParse.Spec.Combinators.nondep_then p1 p2) b == any_result ==>
;         (forall (any_result:
;             FStar.Pervasives.Native.option (t1 & MiniParse.Spec.Base.consumed_length b)).
;             MiniParse.Spec.Base.parse p1 b == any_result ==>
;             (forall (k:
;                 Prims.pure_post (FStar.Pervasives.Native.option ((t1 & t2) &
;                         MiniParse.Spec.Base.consumed_length b))).
;                 (forall (x:
;                     FStar.Pervasives.Native.option ((t1 & t2) &
;                         MiniParse.Spec.Base.consumed_length b)).
;                     {:pattern Prims.guard_free (k x)}
;                     Prims.auto_squash (k x)) ==>
;                 (forall (b: t1) (b: MiniParse.Spec.Base.consumed_length b).
;                     MiniParse.Spec.Base.parse p1 b == FStar.Pervasives.Native.Some (b, b) ==>
;                     b <= FStar.Seq.Base.length b &&
;                     FStar.Seq.Base.length b <= FStar.Seq.Base.length b /\
;                     (forall (return_val: j: Prims.nat{b <= j && j <= FStar.Seq.Base.length b}).
;                         return_val == FStar.Seq.Base.length b ==>
;                         (forall (any_result: FStar.Seq.Base.seq MiniParse.Spec.Base.byte).
;                             FStar.Seq.Base.slice b b (FStar.Seq.Base.length b) == any_result ==>
;                             (forall (any_result:
;                                 FStar.Pervasives.Native.option (t2 &
;                                     MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice b
;                                           b
;                                           (FStar.Seq.Base.length b)))).
;                                 MiniParse.Spec.Base.parse p2
;                                   (FStar.Seq.Base.slice b b (FStar.Seq.Base.length b)) ==
;                                 any_result ==>
;                                 (forall (k:
;                                     Prims.pure_post (FStar.Pervasives.Native.option ((t1 & t2) &
;                                             MiniParse.Spec.Base.consumed_length b))).
;                                     (forall (x:
;                                         FStar.Pervasives.Native.option ((t1 & t2) &
;                                             MiniParse.Spec.Base.consumed_length b)).
;                                         {:pattern Prims.guard_free (k x)}
;                                         Prims.auto_squash (k x)) ==>
;                                     (forall (b: t2)
;                                         (b:
;                                         MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice b
;                                               b
;                                               (FStar.Seq.Base.length b))).
;                                         MiniParse.Spec.Base.parse p2
;                                           (FStar.Seq.Base.slice b b (FStar.Seq.Base.length b)) ==
;                                         FStar.Pervasives.Native.Some (b, b) ==>
;                                         b + b >= 0 /\ b + b <= FStar.Seq.Base.length b))))))))) /\
;   (forall (p: Prims.pure_post Prims.unit).
;       (forall (pure_result: Prims.unit).
;           MiniParse.Spec.Base.parse (MiniParse.Spec.Combinators.nondep_then p1 p2) b ==
;           (match MiniParse.Spec.Base.parse p1 b with
;             | FStar.Pervasives.Native.Some (x1, consumed1) ->
;               (match
;                   MiniParse.Spec.Base.parse p2
;                     (FStar.Seq.Base.slice b consumed1 (FStar.Seq.Base.length b))
;                 with
;                 | FStar.Pervasives.Native.Some (x2, consumed2) ->
;                   FStar.Pervasives.Native.Some ((x1, x2), consumed1 + consumed2)
;                 | _ -> FStar.Pervasives.Native.None)
;               <:
;               FStar.Pervasives.Native.option ((t1 & t2) & MiniParse.Spec.Base.consumed_length b)
;             | _ -> FStar.Pervasives.Native.None) ==>
;           p pure_result) ==>
;       (forall (any_result: Prims.unit). p any_result))


; Context: While encoding a query
; While typechecking the top-level declaration `let nondep_then_eq`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.parser_spec @x0))
(HasType @x2
Tm_type)
(HasType @x3
(MiniParse.Spec.Base.parser_spec @x2))
(HasType @x4
MiniParse.Spec.Base.bytes))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(and 
;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(forall ((@x5 Term))
 (! (implies (HasType @x5
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 (FStar.Pervasives.Native.tuple2 @x0
@x2)
(MiniParse.Spec.Base.consumed_length @x4))))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(= (MiniParse.Spec.Base.parse (FStar.Pervasives.Native.tuple2 @x0
@x2)
(MiniParse.Spec.Combinators.nondep_then @x0
@x1
@x2
@x3)
@x4)
@x6)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x4))))

;; def=MiniParse.Spec.Combinators.fst(469,41-469,51); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(= (MiniParse.Spec.Base.parse @x0
@x1
@x4)
@x7)
)

;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Prims.pure_post (FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 (FStar.Pervasives.Native.tuple2 @x0
@x2)
(MiniParse.Spec.Base.consumed_length @x4)))))

;; def=Prims.fst(402,27-402,88); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(forall ((@x9 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(Valid 
;; def=Prims.fst(402,84-402,87); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(ApplyTT @x8
@x9)
)

 

:pattern ((ApplyTT @x8
@x9))
:qid @query.5))
)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(forall ((@x9 Term))
 (! (implies (HasType @x9
@x0)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(MiniParse.Spec.Base.consumed_length @x4))

;; def=MiniParse.Spec.Combinators.fst(469,41-470,24); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(= (MiniParse.Spec.Base.parse @x0
@x1
@x4)
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x4))
(FStar.Pervasives.Native.Mktuple2 @x0
(MiniParse.Spec.Base.consumed_length @x4)
@x9
@x10)))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(and 
;; def=MiniParse.Spec.Combinators.fst(471,35-471,49); use=MiniParse.Spec.Combinators.fst(471,35-471,49)
(or label_1
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x10
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))


;; def=MiniParse.Spec.Combinators.fst(471,35-471,49); use=MiniParse.Spec.Combinators.fst(471,35-471,49)
(or label_2
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))


;; def=Prims.fst(356,2-356,58); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(Tm_refine_276a81d3c3eadebff56bb9e61978d236 @x10
@x4))

;; def=Prims.fst(356,26-356,41); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(= @x11
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=MiniParse.Spec.Combinators.fst(471,8-471,49); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x10
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))
@x12)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x2
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x10
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))))

;; def=MiniParse.Spec.Combinators.fst(472,16-472,27); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(= (MiniParse.Spec.Base.parse @x2
@x3
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x10
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
@x13)
)

;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
(Prims.pure_post (FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 (FStar.Pervasives.Native.tuple2 @x0
@x2)
(MiniParse.Spec.Base.consumed_length @x4)))))

;; def=Prims.fst(402,27-402,88); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(forall ((@x15 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(Valid 
;; def=Prims.fst(402,84-402,87); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(ApplyTT @x14
@x15)
)

 

:pattern ((ApplyTT @x14
@x15))
:qid @query.12))
)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(forall ((@x15 Term))
 (! (implies (HasType @x15
@x2)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x10
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))

;; def=MiniParse.Spec.Combinators.fst(472,16-473,26); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(= (MiniParse.Spec.Base.parse @x2
@x3
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x10
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x2
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x10
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4))))
(FStar.Pervasives.Native.Mktuple2 @x2
(MiniParse.Spec.Base.consumed_length (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
@x10
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
@x15
@x16)))
)

;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(and 
;; def=Prims.fst(680,18-680,24); use=MiniParse.Spec.Combinators.fst(474,22-474,43)
(or label_3

;; def=Prims.fst(680,18-680,24); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(>= (BoxInt_proj_0 (Prims.op_Addition @x10
@x16))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(474,22-474,43)
(or label_4

;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(<= (BoxInt_proj_0 (Prims.op_Addition @x10
@x16))
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
)
)
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))


;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(forall ((@x6 Term))
 (! (implies (and (or label_5
(HasType @x6
Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(469,2-478,4); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(or label_6

;; def=MiniParse.Spec.Combinators.fst(469,2-478,4); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(= (MiniParse.Spec.Base.parse (FStar.Pervasives.Native.tuple2 @x0
@x2)
(MiniParse.Spec.Combinators.nondep_then @x0
@x1
@x2
@x3)
@x4)
(let ((@lb7 (MiniParse.Spec.Base.parse @x0
@x1
@x4)))
(ite (is-FStar.Pervasives.Native.Some @lb7)
(let ((@lb8 (MiniParse.Spec.Base.parse @x2
@x3
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
@x4
(FStar.Pervasives.Native.Mktuple2__2 (FStar.Pervasives.Native.Some_v @lb7))
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))))
(ite (is-FStar.Pervasives.Native.Some @lb8)
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 (FStar.Pervasives.Native.tuple2 @x0
@x2)
(MiniParse.Spec.Base.consumed_length @x4))
(FStar.Pervasives.Native.Mktuple2 (FStar.Pervasives.Native.tuple2 @x0
@x2)
(MiniParse.Spec.Base.consumed_length @x4)
(FStar.Pervasives.Native.Mktuple2 @x0
@x2
(FStar.Pervasives.Native.Mktuple2__1 (FStar.Pervasives.Native.Some_v @lb7))
(FStar.Pervasives.Native.Mktuple2__1 (FStar.Pervasives.Native.Some_v @lb8)))
(Prims.op_Addition (FStar.Pervasives.Native.Mktuple2__2 (FStar.Pervasives.Native.Some_v @lb7))
(FStar.Pervasives.Native.Mktuple2__2 (FStar.Pervasives.Native.Some_v @lb8)))))
(FStar.Pervasives.Native.None (FStar.Pervasives.Native.tuple2 (FStar.Pervasives.Native.tuple2 @x0
@x2)
(MiniParse.Spec.Base.consumed_length @x4)))))
(FStar.Pervasives.Native.None (FStar.Pervasives.Native.tuple2 (FStar.Pervasives.Native.tuple2 @x0
@x2)
(MiniParse.Spec.Base.consumed_length @x4))))))
)
)

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(ApplyTT @x5
@x6)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(479,2-479,4)
(ApplyTT @x5
@x6)
)
)
:qid @query.16))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x6 Term))
 (! (implies (HasType @x6
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(ApplyTT @x5
@x6)
)
)
 
;;no pats
:qid @query.17))
)
 
;;no pats
:qid @query.15))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 8714496)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.nondep_then_eq, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, constructor_distinct_FStar.Pervasives.Native.None, constructor_distinct_FStar.Pervasives.Native.Some, constructor_distinct_Tm_unit, equation_MiniParse.Spec.Base.bparse, equation_MiniParse.Spec.Base.byte, equation_MiniParse.Spec.Base.bytes, equation_MiniParse.Spec.Base.consumed_length, equation_MiniParse.Spec.Base.parse, equation_MiniParse.Spec.Combinators.and_then, equation_MiniParse.Spec.Combinators.and_then_bare, equation_MiniParse.Spec.Combinators.coerce_to_bare_param_parser, equation_MiniParse.Spec.Combinators.nondep_then, equation_MiniParse.Spec.Combinators.parse_ret, equation_Prims.eqtype, equation_Prims.nat, fuel_guarded_inversion_FStar.Pervasives.Native.option, fuel_guarded_inversion_MiniParse.Spec.Base.parser_spec, interpretation_Tm_abs_24c49183d745861a79c9e705ccd478d5, interpretation_Tm_abs_5a56d64ec9685d0352c27644697b3e56, interpretation_Tm_abs_9b0fdcdb7bad65cf740850da64bc002a, interpretation_Tm_abs_b1966e89e7cd8f7f0d8af601292dbb6f, kinding_FStar.Pervasives.Native.tuple2@tok, lemma_FStar.Seq.Base.lemma_len_slice, primitive_Prims.op_Addition, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Subtraction, proj_equation_MiniParse.Spec.Base.Parser_f, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_FStar.Pervasives.Native.Some_a, projection_inverse_FStar.Pervasives.Native.Some_v, projection_inverse_MiniParse.Spec.Base.Parser_f, refinement_interpretation_Tm_refine_276a81d3c3eadebff56bb9e61978d236, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_81407705a0828c2c1b1976675443f647, refinement_interpretation_Tm_refine_f1ef48729dd48b5741a77671cc117cd5, token_correspondence_MiniParse.Spec.Combinators.coerce_to_bare_param_parser, typing_FStar.Seq.Base.length, typing_FStar.UInt8.t, typing_MiniParse.Spec.Base.parse, typing_MiniParse.Spec.Combinators.nondep_then

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let nondep_then_eq


; <Start encoding let nondep_then_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Combinators.nondep_then_eq (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Combinators.nondep_then_eq@tok () Term)

; </end encoding let nondep_then_eq>


; encoding sigelt let bare_serialize_nondep_then


; <Start encoding let bare_serialize_nondep_then>

(declare-fun MiniParse.Spec.Combinators.bare_serialize_nondep_then (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;p1: MiniParse.Spec.Base.parser_spec t1 ->     s1: MiniParse.Spec.Base.serializer_spec p1 ->     p2: MiniParse.Spec.Base.parser_spec t2 ->     s2: MiniParse.Spec.Base.serializer_spec p2   -> MiniParse.Spec.Base.bare_serializer (t1 & t2)
(declare-fun Tm_arrow_6f45af358a0859bbc40786d00743b12c () Term)
(declare-fun MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok () Term)
;;;;;;;;;;;;;;;;x: t1 & t2 -> Prims.GTot MiniParse.Spec.Base.bytes
(declare-fun Tm_ghost_arrow_74d5ca20293ddc2696b34978f3cd4f0a (Term Term) Term)
(declare-fun Tm_abs_84ca3be552b2abb245b330ca14b3d71f (Term Term Term Term Term Term) Term)

; </end encoding let bare_serialize_nondep_then>

;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_app2; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(153,57-153,107); use=FStar.Seq.Base.fsti(153,57-153,107)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_ac201cf927190d39c033967b63cb957b @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_ac201cf927190d39c033967b63cb957b @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_ac201cf927190d39c033967b63cb957b))

:named refinement_kinding_Tm_refine_ac201cf927190d39c033967b63cb957b))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_app2; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(153,57-153,107); use=FStar.Seq.Base.fsti(153,57-153,107)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_ac201cf927190d39c033967b63cb957b @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=FStar.Seq.Base.fsti(153,63-153,88); use=FStar.Seq.Base.fsti(153,63-153,88)
(< (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (Prims.op_Addition (FStar.Seq.Base.length @x2
@x3)
(FStar.Seq.Base.length @x2
@x4))))


;; def=FStar.Seq.Base.fsti(153,92-153,106); use=FStar.Seq.Base.fsti(153,92-153,106)
(<= (BoxInt_proj_0 (FStar.Seq.Base.length @x2
@x3))
(BoxInt_proj_0 @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_ac201cf927190d39c033967b63cb957b @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_ac201cf927190d39c033967b63cb957b))

:named refinement_interpretation_Tm_refine_ac201cf927190d39c033967b63cb957b))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Base.lemma_index_app2
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_app2; Namespace FStar.Seq.Base
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
(FStar.Seq.Base.seq @x0))
(HasType @x3
(Tm_refine_ac201cf927190d39c033967b63cb957b @x0
@x1
@x2)))

;; def=FStar.Seq.Base.fsti(155,11-155,63); use=FStar.Seq.Base.fsti(155,11-155,63)
(= (FStar.Seq.Base.index @x0
(FStar.Seq.Base.append @x0
@x1
@x2)
@x3)
(FStar.Seq.Base.index @x0
@x2
(Prims.op_Subtraction @x3
(FStar.Seq.Base.length @x0
@x1))))
)
 

:pattern ((FStar.Seq.Base.index @x0
(FStar.Seq.Base.append @x0
@x1
@x2)
@x3))
:qid lemma_FStar.Seq.Base.lemma_index_app2))
:named lemma_FStar.Seq.Base.lemma_index_app2))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Base.lemma_index_app1
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_app1; Namespace FStar.Seq.Base
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
(FStar.Seq.Base.seq @x0))
(HasType @x3
(Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 @x0
@x1)))

;; def=FStar.Seq.Base.fsti(150,11-150,49); use=FStar.Seq.Base.fsti(150,11-150,49)
(= (FStar.Seq.Base.index @x0
(FStar.Seq.Base.append @x0
@x1
@x2)
@x3)
(FStar.Seq.Base.index @x0
@x1
@x3))
)
 

:pattern ((FStar.Seq.Base.index @x0
(FStar.Seq.Base.append @x0
@x1
@x2)
@x3))
:qid lemma_FStar.Seq.Base.lemma_index_app1))
:named lemma_FStar.Seq.Base.lemma_index_app1))
;;;;;;;;;;;;;;;;haseq for Tm_refine_ac201cf927190d39c033967b63cb957b
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_app2; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(153,57-153,107); use=FStar.Seq.Base.fsti(153,57-153,107)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_ac201cf927190d39c033967b63cb957b @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_ac201cf927190d39c033967b63cb957b @x0
@x1
@x2))))
:qid haseqTm_refine_ac201cf927190d39c033967b63cb957b))

:named haseqTm_refine_ac201cf927190d39c033967b63cb957b))
(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(498,2-498,72)

(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
Tm_type)
:named refinement_kinding_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(496,2-497,56); use=MiniParse.Spec.Combinators.fst(498,2-498,72)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasTypeFuel @u0
@x1
Prims.unit))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
:qid refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

:named refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
(declare-fun Tm_refine_f0ea2cd12d365af73fc937e14e60086d (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=MiniParse.Spec.Combinators.fst(498,25-498,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_f0ea2cd12d365af73fc937e14e60086d @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_f0ea2cd12d365af73fc937e14e60086d @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_f0ea2cd12d365af73fc937e14e60086d))

:named refinement_kinding_Tm_refine_f0ea2cd12d365af73fc937e14e60086d))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=MiniParse.Spec.Combinators.fst(498,25-498,30)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_f0ea2cd12d365af73fc937e14e60086d @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.nat)
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x1))
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x1
(FStar.Seq.Base.length @x2
(FStar.Seq.Base.append @x2
@x3
@x4))))))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_f0ea2cd12d365af73fc937e14e60086d @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_f0ea2cd12d365af73fc937e14e60086d))

:named refinement_interpretation_Tm_refine_f0ea2cd12d365af73fc937e14e60086d))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f0ea2cd12d365af73fc937e14e60086d
;;; Fact-ids: 
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=MiniParse.Spec.Combinators.fst(498,25-498,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_f0ea2cd12d365af73fc937e14e60086d @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_f0ea2cd12d365af73fc937e14e60086d @x0
@x1
@x2))))
:qid haseqTm_refine_f0ea2cd12d365af73fc937e14e60086d))

:named haseqTm_refine_f0ea2cd12d365af73fc937e14e60086d))

; Encoding query formula : forall (t: Type) (s1: FStar.Seq.Base.seq t) (s2: FStar.Seq.Base.seq t).
;   (forall (_: Prims.squash Prims.l_True).
;       (*  - Could not prove post-condition
; *)
;       0 <= FStar.Seq.Base.length s1 &&
;       FStar.Seq.Base.length s1 <= FStar.Seq.Base.length (FStar.Seq.Base.append s1 s2)) /\
;   (forall (p: Prims.pure_post Prims.unit).
;       (forall (pure_result: Prims.unit).
;           FStar.Seq.Base.slice (FStar.Seq.Base.append s1 s2) 0 (FStar.Seq.Base.length s1) == s1 ==>
;           p pure_result) ==>
;       0 <= FStar.Seq.Base.length s1 &&
;       FStar.Seq.Base.length s1 <= FStar.Seq.Base.length (FStar.Seq.Base.append s1 s2) /\
;       (forall (return_val:
;           j: Prims.nat{0 <= j && j <= FStar.Seq.Base.length (FStar.Seq.Base.append s1 s2)}).
;           return_val == FStar.Seq.Base.length s1 ==>
;           (forall (any_result: FStar.Seq.Base.seq t).
;               FStar.Seq.Base.slice (FStar.Seq.Base.append s1 s2) 0 (FStar.Seq.Base.length s1) ==
;               any_result ==>
;               (forall (any_result: Prims.prop).
;                   FStar.Seq.Base.equal (FStar.Seq.Base.slice (FStar.Seq.Base.append s1 s2)
;                         0
;                         (FStar.Seq.Base.length s1))
;                     s1 ==
;                   any_result ==>
;                   (forall (return_val: Prims.prop).
;                       return_val ==
;                       FStar.Seq.Base.equal (FStar.Seq.Base.slice (FStar.Seq.Base.append s1 s2)
;                             0
;                             (FStar.Seq.Base.length s1))
;                         s1 ==>
;                       FStar.Seq.Base.equal (FStar.Seq.Base.slice (FStar.Seq.Base.append s1 s2)
;                             0
;                             (FStar.Seq.Base.length s1))
;                         s1 ==
;                       return_val ==>
;                       FStar.Seq.Base.equal (FStar.Seq.Base.slice (FStar.Seq.Base.append s1 s2)
;                             0
;                             (FStar.Seq.Base.length s1))
;                         s1 /\
;                       (forall (pure_result: Prims.unit).
;                           FStar.Seq.Base.equal (FStar.Seq.Base.slice (FStar.Seq.Base.append s1 s2)
;                                 0
;                                 (FStar.Seq.Base.length s1))
;                             s1 ==>
;                           p pure_result))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let seq_slice_append_l`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
(FStar.Seq.Base.seq @x0)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(and 
;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(498,2-498,72)
(forall ((@x3 Term))
 (! (implies (HasType @x3
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)

;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(498,2-498,72)
(and 
;; def=MiniParse.Spec.Combinators.fst(497,34-497,49); use=MiniParse.Spec.Combinators.fst(497,34-497,49)
(or label_1
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
(FStar.Seq.Base.length @x0
@x1))))


;; def=MiniParse.Spec.Combinators.fst(497,34-497,49); use=MiniParse.Spec.Combinators.fst(497,34-497,49)
(or label_2
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (FStar.Seq.Base.length @x0
@x1)
(FStar.Seq.Base.length @x0
(FStar.Seq.Base.append @x0
@x1
@x2)))))
)
)
 
;;no pats
:qid @query.1))


;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(498,2-498,72)
(forall ((@x4 Term))
 (! (implies (and (or label_3
(HasType @x4
Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(497,2-497,56); use=MiniParse.Spec.Combinators.fst(498,2-498,72)
(or label_4

;; def=MiniParse.Spec.Combinators.fst(497,2-497,56); use=MiniParse.Spec.Combinators.fst(498,2-498,72)
(= (FStar.Seq.Base.slice @x0
(FStar.Seq.Base.append @x0
@x1
@x2)
(BoxInt 0)
(FStar.Seq.Base.length @x0
@x1))
@x1)
)
)

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(498,2-498,72)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(498,2-498,72)
(ApplyTT @x3
@x4)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(498,2-498,72)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(498,2-498,72)
(ApplyTT @x3
@x4)
)
)
:qid @query.3))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(498,2-498,72)
(and 
;; def=MiniParse.Spec.Combinators.fst(498,52-498,67); use=MiniParse.Spec.Combinators.fst(498,52-498,67)
(or label_5
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
(FStar.Seq.Base.length @x0
@x1))))


;; def=MiniParse.Spec.Combinators.fst(498,52-498,67); use=MiniParse.Spec.Combinators.fst(498,52-498,67)
(or label_6
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (FStar.Seq.Base.length @x0
@x1)
(FStar.Seq.Base.length @x0
(FStar.Seq.Base.append @x0
@x1
@x2)))))


;; def=Prims.fst(356,2-356,58); use=MiniParse.Spec.Combinators.fst(498,2-498,72)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Tm_refine_f0ea2cd12d365af73fc937e14e60086d @x0
@x1
@x2))

;; def=Prims.fst(356,26-356,41); use=MiniParse.Spec.Combinators.fst(498,2-498,72)
(= @x4
(FStar.Seq.Base.length @x0
@x1))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(498,2-498,72)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(FStar.Seq.Base.seq @x0))

;; def=FStar.Seq.Base.fsti(166,21-166,23); use=MiniParse.Spec.Combinators.fst(498,2-498,72)
(= (FStar.Seq.Base.slice @x0
(FStar.Seq.Base.append @x0
@x1
@x2)
(BoxInt 0)
(FStar.Seq.Base.length @x0
@x1))
@x5)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(498,2-498,72)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.prop)

;; def=FStar.Seq.Base.fsti(166,48-166,52); use=MiniParse.Spec.Combinators.fst(498,9-498,72)
(= (FStar.Seq.Base.equal @x0
(FStar.Seq.Base.slice @x0
(FStar.Seq.Base.append @x0
@x1
@x2)
(BoxInt 0)
(FStar.Seq.Base.length @x0
@x1))
@x1)
@x6)
)

;; def=Prims.fst(356,2-356,58); use=MiniParse.Spec.Combinators.fst(498,2-498,72)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.prop)

;; def=Prims.fst(356,26-356,41); use=MiniParse.Spec.Combinators.fst(498,2-498,72)
(= @x7
(FStar.Seq.Base.equal @x0
(FStar.Seq.Base.slice @x0
(FStar.Seq.Base.append @x0
@x1
@x2)
(BoxInt 0)
(FStar.Seq.Base.length @x0
@x1))
@x1))


;; def=Prims.fst(672,13-672,14); use=MiniParse.Spec.Combinators.fst(498,2-498,72)
(= (FStar.Seq.Base.equal @x0
(FStar.Seq.Base.slice @x0
(FStar.Seq.Base.append @x0
@x1
@x2)
(BoxInt 0)
(FStar.Seq.Base.length @x0
@x1))
@x1)
@x7)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(498,2-498,8)
(and 
;; def=MiniParse.Spec.Combinators.fst(498,9-498,72); use=MiniParse.Spec.Combinators.fst(498,2-498,8)
(or label_7

;; def=MiniParse.Spec.Combinators.fst(498,9-498,72); use=MiniParse.Spec.Combinators.fst(498,2-498,8)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(498,9-498,72); use=MiniParse.Spec.Combinators.fst(498,2-498,8)
(FStar.Seq.Base.equal @x0
(FStar.Seq.Base.slice @x0
(FStar.Seq.Base.append @x0
@x1
@x2)
(BoxInt 0)
(FStar.Seq.Base.length @x0
@x1))
@x1)
)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(498,2-498,8)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(498,9-498,72); use=MiniParse.Spec.Combinators.fst(498,2-498,8)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(498,9-498,72); use=MiniParse.Spec.Combinators.fst(498,2-498,8)
(FStar.Seq.Base.equal @x0
(FStar.Seq.Base.slice @x0
(FStar.Seq.Base.append @x0
@x1
@x2)
(BoxInt 0)
(FStar.Seq.Base.length @x0
@x1))
@x1)
)
)

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(498,2-498,8)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(498,2-498,8)
(ApplyTT @x3
@x8)
)
)
 
;;no pats
:qid @query.8))
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query.2))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 8714496)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.seq_slice_append_l, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Prims.nat, int_inversion, int_typing, lemma_FStar.Seq.Base.lemma_eq_elim, lemma_FStar.Seq.Base.lemma_eq_intro, lemma_FStar.Seq.Base.lemma_index_app1, lemma_FStar.Seq.Base.lemma_index_slice, lemma_FStar.Seq.Base.lemma_len_append, lemma_FStar.Seq.Base.lemma_len_slice, primitive_Prims.op_Addition, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_81407705a0828c2c1b1976675443f647, refinement_interpretation_Tm_refine_d3d07693cd71377864ef84dc97d10ec1, refinement_interpretation_Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55, refinement_interpretation_Tm_refine_f0ea2cd12d365af73fc937e14e60086d, typing_FStar.Seq.Base.append, typing_FStar.Seq.Base.length

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let seq_slice_append_l


; <Start encoding let seq_slice_append_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Combinators.seq_slice_append_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Combinators.seq_slice_append_l@tok () Term)

; </end encoding let seq_slice_append_l>

(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(505,2-505,102)

(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
Tm_type)
:named refinement_kinding_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(503,2-504,86); use=MiniParse.Spec.Combinators.fst(505,2-505,102)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasTypeFuel @u0
@x1
Prims.unit))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
:qid refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

:named refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
(declare-fun Tm_refine_029e9ae182bcbfc60680e2719e1a1fdb (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=MiniParse.Spec.Combinators.fst(505,25-505,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_029e9ae182bcbfc60680e2719e1a1fdb @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_029e9ae182bcbfc60680e2719e1a1fdb @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_029e9ae182bcbfc60680e2719e1a1fdb))

:named refinement_kinding_Tm_refine_029e9ae182bcbfc60680e2719e1a1fdb))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=MiniParse.Spec.Combinators.fst(505,25-505,30)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_029e9ae182bcbfc60680e2719e1a1fdb @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.nat)
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (FStar.Seq.Base.length @x2
@x3)
@x1))
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x1
(FStar.Seq.Base.length @x2
(FStar.Seq.Base.append @x2
@x3
@x4))))))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_029e9ae182bcbfc60680e2719e1a1fdb @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_029e9ae182bcbfc60680e2719e1a1fdb))

:named refinement_interpretation_Tm_refine_029e9ae182bcbfc60680e2719e1a1fdb))
;;;;;;;;;;;;;;;;haseq for Tm_refine_029e9ae182bcbfc60680e2719e1a1fdb
;;; Fact-ids: 
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=MiniParse.Spec.Combinators.fst(505,25-505,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_029e9ae182bcbfc60680e2719e1a1fdb @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_029e9ae182bcbfc60680e2719e1a1fdb @x0
@x1
@x2))))
:qid haseqTm_refine_029e9ae182bcbfc60680e2719e1a1fdb))

:named haseqTm_refine_029e9ae182bcbfc60680e2719e1a1fdb))

; Encoding query formula : forall (t: Type) (s1: FStar.Seq.Base.seq t) (s2: FStar.Seq.Base.seq t).
;   (forall (_: Prims.squash Prims.l_True).
;       (*  - Could not prove post-condition
; *)
;       FStar.Seq.Base.length s1 <= FStar.Seq.Base.length (FStar.Seq.Base.append s1 s2) &&
;       FStar.Seq.Base.length (FStar.Seq.Base.append s1 s2) <=
;       FStar.Seq.Base.length (FStar.Seq.Base.append s1 s2)) /\
;   (forall (p: Prims.pure_post Prims.unit).
;       (forall (pure_result: Prims.unit).
;           FStar.Seq.Base.slice (FStar.Seq.Base.append s1 s2)
;             (FStar.Seq.Base.length s1)
;             (FStar.Seq.Base.length (FStar.Seq.Base.append s1 s2)) ==
;           s2 ==>
;           p pure_result) ==>
;       FStar.Seq.Base.length s1 <= FStar.Seq.Base.length (FStar.Seq.Base.append s1 s2) &&
;       FStar.Seq.Base.length (FStar.Seq.Base.append s1 s2) <=
;       FStar.Seq.Base.length (FStar.Seq.Base.append s1 s2) /\
;       (forall (return_val:
;           j:
;           Prims.nat
;             { FStar.Seq.Base.length s1 <= j &&
;               j <= FStar.Seq.Base.length (FStar.Seq.Base.append s1 s2) }).
;           return_val == FStar.Seq.Base.length (FStar.Seq.Base.append s1 s2) ==>
;           (forall (any_result: FStar.Seq.Base.seq t).
;               FStar.Seq.Base.slice (FStar.Seq.Base.append s1 s2)
;                 (FStar.Seq.Base.length s1)
;                 (FStar.Seq.Base.length (FStar.Seq.Base.append s1 s2)) ==
;               any_result ==>
;               (forall (any_result: Prims.prop).
;                   FStar.Seq.Base.equal (FStar.Seq.Base.slice (FStar.Seq.Base.append s1 s2)
;                         (FStar.Seq.Base.length s1)
;                         (FStar.Seq.Base.length (FStar.Seq.Base.append s1 s2)))
;                     s2 ==
;                   any_result ==>
;                   (forall (return_val: Prims.prop).
;                       return_val ==
;                       FStar.Seq.Base.equal (FStar.Seq.Base.slice (FStar.Seq.Base.append s1 s2)
;                             (FStar.Seq.Base.length s1)
;                             (FStar.Seq.Base.length (FStar.Seq.Base.append s1 s2)))
;                         s2 ==>
;                       FStar.Seq.Base.equal (FStar.Seq.Base.slice (FStar.Seq.Base.append s1 s2)
;                             (FStar.Seq.Base.length s1)
;                             (FStar.Seq.Base.length (FStar.Seq.Base.append s1 s2)))
;                         s2 ==
;                       return_val ==>
;                       FStar.Seq.Base.equal (FStar.Seq.Base.slice (FStar.Seq.Base.append s1 s2)
;                             (FStar.Seq.Base.length s1)
;                             (FStar.Seq.Base.length (FStar.Seq.Base.append s1 s2)))
;                         s2 /\
;                       (forall (pure_result: Prims.unit).
;                           FStar.Seq.Base.equal (FStar.Seq.Base.slice (FStar.Seq.Base.append s1 s2)
;                                 (FStar.Seq.Base.length s1)
;                                 (FStar.Seq.Base.length (FStar.Seq.Base.append s1 s2)))
;                             s2 ==>
;                           p pure_result))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let seq_slice_append_r`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
(FStar.Seq.Base.seq @x0)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(and 
;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(505,2-505,102)
(forall ((@x3 Term))
 (! (implies (HasType @x3
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)

;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(505,2-505,102)
(and 
;; def=MiniParse.Spec.Combinators.fst(504,48-504,79); use=MiniParse.Spec.Combinators.fst(504,48-504,79)
(or label_1
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (FStar.Seq.Base.length @x0
@x1)
(FStar.Seq.Base.length @x0
(FStar.Seq.Base.append @x0
@x1
@x2)))))


;; def=MiniParse.Spec.Combinators.fst(504,48-504,79); use=MiniParse.Spec.Combinators.fst(504,48-504,79)
(or label_2
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (FStar.Seq.Base.length @x0
(FStar.Seq.Base.append @x0
@x1
@x2))
(FStar.Seq.Base.length @x0
(FStar.Seq.Base.append @x0
@x1
@x2)))))
)
)
 
;;no pats
:qid @query.1))


;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(505,2-505,102)
(forall ((@x4 Term))
 (! (implies (and (or label_3
(HasType @x4
Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(504,2-504,86); use=MiniParse.Spec.Combinators.fst(505,2-505,102)
(or label_4

;; def=MiniParse.Spec.Combinators.fst(504,2-504,86); use=MiniParse.Spec.Combinators.fst(505,2-505,102)
(= (FStar.Seq.Base.slice @x0
(FStar.Seq.Base.append @x0
@x1
@x2)
(FStar.Seq.Base.length @x0
@x1)
(FStar.Seq.Base.length @x0
(FStar.Seq.Base.append @x0
@x1
@x2)))
@x2)
)
)

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(505,2-505,102)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(505,2-505,102)
(ApplyTT @x3
@x4)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(505,2-505,102)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(505,2-505,102)
(ApplyTT @x3
@x4)
)
)
:qid @query.3))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(505,2-505,102)
(and 
;; def=MiniParse.Spec.Combinators.fst(505,66-505,97); use=MiniParse.Spec.Combinators.fst(505,66-505,97)
(or label_5
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (FStar.Seq.Base.length @x0
@x1)
(FStar.Seq.Base.length @x0
(FStar.Seq.Base.append @x0
@x1
@x2)))))


;; def=MiniParse.Spec.Combinators.fst(505,66-505,97); use=MiniParse.Spec.Combinators.fst(505,66-505,97)
(or label_6
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (FStar.Seq.Base.length @x0
(FStar.Seq.Base.append @x0
@x1
@x2))
(FStar.Seq.Base.length @x0
(FStar.Seq.Base.append @x0
@x1
@x2)))))


;; def=Prims.fst(356,2-356,58); use=MiniParse.Spec.Combinators.fst(505,2-505,102)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Tm_refine_029e9ae182bcbfc60680e2719e1a1fdb @x0
@x1
@x2))

;; def=Prims.fst(356,26-356,41); use=MiniParse.Spec.Combinators.fst(505,2-505,102)
(= @x4
(FStar.Seq.Base.length @x0
(FStar.Seq.Base.append @x0
@x1
@x2)))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(505,2-505,102)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(FStar.Seq.Base.seq @x0))

;; def=FStar.Seq.Base.fsti(166,21-166,23); use=MiniParse.Spec.Combinators.fst(505,2-505,102)
(= (FStar.Seq.Base.slice @x0
(FStar.Seq.Base.append @x0
@x1
@x2)
(FStar.Seq.Base.length @x0
@x1)
(FStar.Seq.Base.length @x0
(FStar.Seq.Base.append @x0
@x1
@x2)))
@x5)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(505,2-505,102)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.prop)

;; def=FStar.Seq.Base.fsti(166,48-166,52); use=MiniParse.Spec.Combinators.fst(505,9-505,102)
(= (FStar.Seq.Base.equal @x0
(FStar.Seq.Base.slice @x0
(FStar.Seq.Base.append @x0
@x1
@x2)
(FStar.Seq.Base.length @x0
@x1)
(FStar.Seq.Base.length @x0
(FStar.Seq.Base.append @x0
@x1
@x2)))
@x2)
@x6)
)

;; def=Prims.fst(356,2-356,58); use=MiniParse.Spec.Combinators.fst(505,2-505,102)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.prop)

;; def=Prims.fst(356,26-356,41); use=MiniParse.Spec.Combinators.fst(505,2-505,102)
(= @x7
(FStar.Seq.Base.equal @x0
(FStar.Seq.Base.slice @x0
(FStar.Seq.Base.append @x0
@x1
@x2)
(FStar.Seq.Base.length @x0
@x1)
(FStar.Seq.Base.length @x0
(FStar.Seq.Base.append @x0
@x1
@x2)))
@x2))


;; def=Prims.fst(672,13-672,14); use=MiniParse.Spec.Combinators.fst(505,2-505,102)
(= (FStar.Seq.Base.equal @x0
(FStar.Seq.Base.slice @x0
(FStar.Seq.Base.append @x0
@x1
@x2)
(FStar.Seq.Base.length @x0
@x1)
(FStar.Seq.Base.length @x0
(FStar.Seq.Base.append @x0
@x1
@x2)))
@x2)
@x7)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(505,2-505,8)
(and 
;; def=MiniParse.Spec.Combinators.fst(505,9-505,102); use=MiniParse.Spec.Combinators.fst(505,2-505,8)
(or label_7

;; def=MiniParse.Spec.Combinators.fst(505,9-505,102); use=MiniParse.Spec.Combinators.fst(505,2-505,8)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(505,9-505,102); use=MiniParse.Spec.Combinators.fst(505,2-505,8)
(FStar.Seq.Base.equal @x0
(FStar.Seq.Base.slice @x0
(FStar.Seq.Base.append @x0
@x1
@x2)
(FStar.Seq.Base.length @x0
@x1)
(FStar.Seq.Base.length @x0
(FStar.Seq.Base.append @x0
@x1
@x2)))
@x2)
)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(505,2-505,8)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(505,9-505,102); use=MiniParse.Spec.Combinators.fst(505,2-505,8)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(505,9-505,102); use=MiniParse.Spec.Combinators.fst(505,2-505,8)
(FStar.Seq.Base.equal @x0
(FStar.Seq.Base.slice @x0
(FStar.Seq.Base.append @x0
@x1
@x2)
(FStar.Seq.Base.length @x0
@x1)
(FStar.Seq.Base.length @x0
(FStar.Seq.Base.append @x0
@x1
@x2)))
@x2)
)
)

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(505,2-505,8)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(505,2-505,8)
(ApplyTT @x3
@x8)
)
)
 
;;no pats
:qid @query.8))
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query.2))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 8714496)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.seq_slice_append_r, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Prims.nat, int_inversion, int_typing, lemma_FStar.Seq.Base.lemma_eq_elim, lemma_FStar.Seq.Base.lemma_eq_intro, lemma_FStar.Seq.Base.lemma_index_app2, lemma_FStar.Seq.Base.lemma_index_slice, lemma_FStar.Seq.Base.lemma_len_append, lemma_FStar.Seq.Base.lemma_len_slice, primitive_Prims.op_Addition, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_029e9ae182bcbfc60680e2719e1a1fdb, refinement_interpretation_Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_81407705a0828c2c1b1976675443f647, refinement_interpretation_Tm_refine_ac201cf927190d39c033967b63cb957b, refinement_interpretation_Tm_refine_d3d07693cd71377864ef84dc97d10ec1, refinement_interpretation_Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55, typing_FStar.Seq.Base.append, typing_FStar.Seq.Base.length

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let seq_slice_append_r


; <Start encoding let seq_slice_append_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Combinators.seq_slice_append_r (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Combinators.seq_slice_append_r@tok () Term)

; </end encoding let seq_slice_append_r>

;;;;;;;;;;;;;;;;typing_Tm_abs_84ca3be552b2abb245b330ca14b3d71f
;;; Fact-ids: Name MiniParse.Spec.Combinators.bare_serialize_nondep_then; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(489,21-491,48); use=MiniParse.Spec.Combinators.fst(489,21-491,48)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_abs_84ca3be552b2abb245b330ca14b3d71f @x0
@x1
@x2
@x3
@x4
@x5)
(Tm_ghost_arrow_74d5ca20293ddc2696b34978f3cd4f0a @x4
@x5))
 

:pattern ((Tm_abs_84ca3be552b2abb245b330ca14b3d71f @x0
@x1
@x2
@x3
@x4
@x5))
:qid typing_Tm_abs_84ca3be552b2abb245b330ca14b3d71f))

:named typing_Tm_abs_84ca3be552b2abb245b330ca14b3d71f))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Combinators.bare_serialize_nondep_then; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(481,4-481,30); use=MiniParse.Spec.Combinators.fst(481,4-481,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.parser_spec @x0))
(HasType @x2
(MiniParse.Spec.Base.serializer_spec @x0
@x1))
(HasType @x3
Tm_type)
(HasType @x4
(MiniParse.Spec.Base.parser_spec @x3))
(HasType @x5
(MiniParse.Spec.Base.serializer_spec @x3
@x4)))
(HasType (MiniParse.Spec.Combinators.bare_serialize_nondep_then @x0
@x1
@x2
@x3
@x4
@x5)
(MiniParse.Spec.Base.bare_serializer (FStar.Pervasives.Native.tuple2 @x0
@x3))))
 

:pattern ((MiniParse.Spec.Combinators.bare_serialize_nondep_then @x0
@x1
@x2
@x3
@x4
@x5))
:qid typing_MiniParse.Spec.Combinators.bare_serialize_nondep_then))

:named typing_MiniParse.Spec.Combinators.bare_serialize_nondep_then))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Base.serialize; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(378,4-378,13); use=MiniParse.Spec.Base.fst(378,4-378,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.parser_spec @x0))
(HasType @x2
(MiniParse.Spec.Base.serializer_spec @x0
@x1))
(HasType @x3
@x0))
(HasType (MiniParse.Spec.Base.serialize @x0
@x1
@x2
@x3)
MiniParse.Spec.Base.bytes))
 

:pattern ((MiniParse.Spec.Base.serialize @x0
@x1
@x2
@x3))
:qid typing_MiniParse.Spec.Base.serialize))

:named typing_MiniParse.Spec.Base.serialize))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Base.__proj__Serializer__item__f; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(343,18-343,19); use=MiniParse.Spec.Base.fst(343,18-343,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.parser_spec @x0))
(HasType @x2
(MiniParse.Spec.Base.serializer_spec @x0
@x1)))
(HasType (MiniParse.Spec.Base.__proj__Serializer__item__f @x0
@x1
@x2)
(Tm_refine_8da27fc70f74cdb01995c74e5b0aab3a @x0
@x1)))
 

:pattern ((MiniParse.Spec.Base.__proj__Serializer__item__f @x0
@x1
@x2))
:qid typing_MiniParse.Spec.Base.__proj__Serializer__item__f))

:named typing_MiniParse.Spec.Base.__proj__Serializer__item__f))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name MiniParse.Spec.Combinators.bare_serialize_nondep_then; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(481,4-481,30); use=MiniParse.Spec.Combinators.fst(481,4-481,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
(MiniParse.Spec.Combinators.bare_serialize_nondep_then @x0
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5))
:qid token_correspondence_MiniParse.Spec.Combinators.bare_serialize_nondep_then))

:named token_correspondence_MiniParse.Spec.Combinators.bare_serialize_nondep_then))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name MiniParse.Spec.Base.serializer_spec; Namespace MiniParse.Spec.Base; Name MiniParse.Spec.Base.Serializer; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(340,5-340,20); use=MiniParse.Spec.Base.fst(340,5-340,20)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT MiniParse.Spec.Base.serializer_spec@tok
@x0)
@x1)
(MiniParse.Spec.Base.serializer_spec @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT MiniParse.Spec.Base.serializer_spec@tok
@x0)
@x1))

:pattern ((MiniParse.Spec.Base.serializer_spec @x0
@x1))
:qid token_correspondence_MiniParse.Spec.Base.serializer_spec@tok))

:named token_correspondence_MiniParse.Spec.Base.serializer_spec@tok))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name MiniParse.Spec.Base.__proj__Serializer__item__f; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(343,18-343,19); use=MiniParse.Spec.Base.fst(343,18-343,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Base.__proj__Serializer__item__f@tok
@x0)
@x1)
@x2)
(MiniParse.Spec.Base.__proj__Serializer__item__f @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Base.__proj__Serializer__item__f@tok
@x0)
@x1)
@x2))
:qid token_correspondence_MiniParse.Spec.Base.__proj__Serializer__item__f))

:named token_correspondence_MiniParse.Spec.Base.__proj__Serializer__item__f))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name MiniParse.Spec.Base.serializer_spec; Namespace MiniParse.Spec.Base; Name MiniParse.Spec.Base.Serializer; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(343,4-343,14); use=MiniParse.Spec.Base.fst(343,4-343,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(MiniParse.Spec.Base.Serializer @x1
@x2
@x3)
(MiniParse.Spec.Base.serializer_spec @x4
@x5))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(MiniParse.Spec.Base.Serializer @x1
@x2
@x3))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(MiniParse.Spec.Base.Serializer @x1
@x2
@x3)
(MiniParse.Spec.Base.serializer_spec @x4
@x5)))
:qid subterm_ordering_MiniParse.Spec.Base.Serializer))

:named subterm_ordering_MiniParse.Spec.Base.Serializer))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name MiniParse.Spec.Base.serializer_spec; Namespace MiniParse.Spec.Base; Name MiniParse.Spec.Base.Serializer; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(343,17-343,67); use=MiniParse.Spec.Base.fst(343,17-343,67)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_8da27fc70f74cdb01995c74e5b0aab3a @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_8da27fc70f74cdb01995c74e5b0aab3a @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_8da27fc70f74cdb01995c74e5b0aab3a))

:named refinement_kinding_Tm_refine_8da27fc70f74cdb01995c74e5b0aab3a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name MiniParse.Spec.Base.serializer_spec; Namespace MiniParse.Spec.Base; Name MiniParse.Spec.Base.Serializer; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(343,17-343,67); use=MiniParse.Spec.Base.fst(343,17-343,67)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_8da27fc70f74cdb01995c74e5b0aab3a @x2
@x3))
(and (HasTypeFuel @u0
@x1
(MiniParse.Spec.Base.bare_serializer @x2))

;; def=MiniParse.Spec.Base.fst(343,41-343,63); use=MiniParse.Spec.Base.fst(343,41-343,63)
(Valid 
;; def=MiniParse.Spec.Base.fst(343,41-343,63); use=MiniParse.Spec.Base.fst(343,41-343,63)
(MiniParse.Spec.Base.serializer_correct @x2
@x3
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_8da27fc70f74cdb01995c74e5b0aab3a @x2
@x3)))
:qid refinement_interpretation_Tm_refine_8da27fc70f74cdb01995c74e5b0aab3a))

:named refinement_interpretation_Tm_refine_8da27fc70f74cdb01995c74e5b0aab3a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name MiniParse.Spec.Base.serializer_spec; Namespace MiniParse.Spec.Base; Name MiniParse.Spec.Base.Serializer; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(343,4-343,14); use=MiniParse.Spec.Base.fst(343,4-343,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (MiniParse.Spec.Base.Serializer_t (MiniParse.Spec.Base.Serializer @x0
@x1
@x2))
@x0)
 

:pattern ((MiniParse.Spec.Base.Serializer @x0
@x1
@x2))
:qid projection_inverse_MiniParse.Spec.Base.Serializer_t))

:named projection_inverse_MiniParse.Spec.Base.Serializer_t))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name MiniParse.Spec.Base.serializer_spec; Namespace MiniParse.Spec.Base; Name MiniParse.Spec.Base.Serializer; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(343,4-343,14); use=MiniParse.Spec.Base.fst(343,4-343,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (MiniParse.Spec.Base.Serializer_p (MiniParse.Spec.Base.Serializer @x0
@x1
@x2))
@x1)
 

:pattern ((MiniParse.Spec.Base.Serializer @x0
@x1
@x2))
:qid projection_inverse_MiniParse.Spec.Base.Serializer_p))

:named projection_inverse_MiniParse.Spec.Base.Serializer_p))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name MiniParse.Spec.Base.serializer_spec; Namespace MiniParse.Spec.Base; Name MiniParse.Spec.Base.Serializer; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(343,4-343,14); use=MiniParse.Spec.Base.fst(343,4-343,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (MiniParse.Spec.Base.Serializer_f (MiniParse.Spec.Base.Serializer @x0
@x1
@x2))
@x2)
 

:pattern ((MiniParse.Spec.Base.Serializer @x0
@x1
@x2))
:qid projection_inverse_MiniParse.Spec.Base.Serializer_f))

:named projection_inverse_MiniParse.Spec.Base.Serializer_f))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name MiniParse.Spec.Base.__proj__Serializer__item__f; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(343,18-343,19); use=MiniParse.Spec.Base.fst(343,18-343,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (MiniParse.Spec.Base.__proj__Serializer__item__f @x0
@x1
@x2)
(MiniParse.Spec.Base.Serializer_f @x2))
 

:pattern ((MiniParse.Spec.Base.__proj__Serializer__item__f @x0
@x1
@x2))
:qid proj_equation_MiniParse.Spec.Base.Serializer_f))

:named proj_equation_MiniParse.Spec.Base.Serializer_f))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name MiniParse.Spec.Base.serializer_spec; Namespace MiniParse.Spec.Base; Name MiniParse.Spec.Base.Serializer; Namespace MiniParse.Spec.Base
(assert (! (is-Tm_arrow (PreType MiniParse.Spec.Base.serializer_spec@tok))
:named pre_kinding_MiniParse.Spec.Base.serializer_spec@tok))
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_74d5ca20293ddc2696b34978f3cd4f0a
;;; Fact-ids: Name MiniParse.Spec.Combinators.bare_serialize_nondep_then; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(489,10-489,17); use=MiniParse.Spec.Combinators.fst(489,10-489,17)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_ghost_arrow_74d5ca20293ddc2696b34978f3cd4f0a @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_ghost_arrow_74d5ca20293ddc2696b34978f3cd4f0a @x0
@x1)
Tm_type))
:qid kinding_Tm_ghost_arrow_74d5ca20293ddc2696b34978f3cd4f0a))

:named kinding_Tm_ghost_arrow_74d5ca20293ddc2696b34978f3cd4f0a))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_6fff714fa503dca55f8dee51ce96a75c
;;; Fact-ids: Name MiniParse.Spec.Base.__proj__Serializer__item__f; Namespace MiniParse.Spec.Base
(assert (! (HasType Tm_arrow_6fff714fa503dca55f8dee51ce96a75c
Tm_type)
:named kinding_Tm_arrow_6fff714fa503dca55f8dee51ce96a75c))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_6f45af358a0859bbc40786d00743b12c
;;; Fact-ids: Name MiniParse.Spec.Combinators.bare_serialize_nondep_then; Namespace MiniParse.Spec.Combinators
(assert (! (HasType Tm_arrow_6f45af358a0859bbc40786d00743b12c
Tm_type)
:named kinding_Tm_arrow_6f45af358a0859bbc40786d00743b12c))
;;; Fact-ids: Name MiniParse.Spec.Base.serializer_spec; Namespace MiniParse.Spec.Base; Name MiniParse.Spec.Base.Serializer; Namespace MiniParse.Spec.Base
(assert (! (and (IsTotFun MiniParse.Spec.Base.serializer_spec@tok)

;; def=MiniParse.Spec.Base.fst(340,5-340,20); use=MiniParse.Spec.Base.fst(340,5-340,20)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT MiniParse.Spec.Base.serializer_spec@tok
@x0))
 

:pattern ((ApplyTT MiniParse.Spec.Base.serializer_spec@tok
@x0))
:qid kinding_MiniParse.Spec.Base.serializer_spec@tok))


;; def=MiniParse.Spec.Base.fst(340,5-340,20); use=MiniParse.Spec.Base.fst(340,5-340,20)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.parser_spec @x0)))
(HasType (MiniParse.Spec.Base.serializer_spec @x0
@x1)
Tm_type))
 

:pattern ((MiniParse.Spec.Base.serializer_spec @x0
@x1))
:qid kinding_MiniParse.Spec.Base.serializer_spec@tok.1))
)
:named kinding_MiniParse.Spec.Base.serializer_spec@tok))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_84ca3be552b2abb245b330ca14b3d71f
;;; Fact-ids: Name MiniParse.Spec.Combinators.bare_serialize_nondep_then; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(489,21-491,48); use=MiniParse.Spec.Combinators.fst(489,21-491,48)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (ApplyTT (Tm_abs_84ca3be552b2abb245b330ca14b3d71f @x1
@x2
@x3
@x4
@x5
@x6)
@x0)
(let ((@lb7 @x0))
(FStar.Seq.Base.append (MiniParse.Spec.Base.byte Dummy_value)
(MiniParse.Spec.Base.serialize @x6
@x1
@x2
(FStar.Pervasives.Native.Mktuple2__1 @lb7))
(MiniParse.Spec.Base.serialize @x5
@x3
@x4
(FStar.Pervasives.Native.Mktuple2__2 @lb7)))))
 

:pattern ((ApplyTT (Tm_abs_84ca3be552b2abb245b330ca14b3d71f @x1
@x2
@x3
@x4
@x5
@x6)
@x0))
:qid interpretation_Tm_abs_84ca3be552b2abb245b330ca14b3d71f))

:named interpretation_Tm_abs_84ca3be552b2abb245b330ca14b3d71f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_8da27fc70f74cdb01995c74e5b0aab3a
;;; Fact-ids: Name MiniParse.Spec.Base.serializer_spec; Namespace MiniParse.Spec.Base; Name MiniParse.Spec.Base.Serializer; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(343,17-343,67); use=MiniParse.Spec.Base.fst(343,17-343,67)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_8da27fc70f74cdb01995c74e5b0aab3a @x0
@x1)))
(Valid (Prims.hasEq (MiniParse.Spec.Base.bare_serializer @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_8da27fc70f74cdb01995c74e5b0aab3a @x0
@x1))))
:qid haseqTm_refine_8da27fc70f74cdb01995c74e5b0aab3a))

:named haseqTm_refine_8da27fc70f74cdb01995c74e5b0aab3a))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name MiniParse.Spec.Combinators.bare_serialize_nondep_then; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(481,4-481,30); use=MiniParse.Spec.Combinators.fst(481,4-481,30)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
Tm_arrow_6f45af358a0859bbc40786d00743b12c))

;; def=MiniParse.Spec.Combinators.fst(481,4-481,30); use=MiniParse.Spec.Combinators.fst(481,4-481,30)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
(MiniParse.Spec.Combinators.bare_serialize_nondep_then @x1
@x2
@x3
@x4
@x5
@x6))
 

:pattern ((MiniParse.Spec.Combinators.bare_serialize_nondep_then @x1
@x2
@x3
@x4
@x5
@x6))
:qid function_token_typing_MiniParse.Spec.Combinators.bare_serialize_nondep_then.1))
)
 

:pattern ((ApplyTT @x0
MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok))
:qid function_token_typing_MiniParse.Spec.Combinators.bare_serialize_nondep_then))

:named function_token_typing_MiniParse.Spec.Combinators.bare_serialize_nondep_then))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name MiniParse.Spec.Base.__proj__Serializer__item__f; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(343,18-343,19); use=MiniParse.Spec.Base.fst(343,18-343,19)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType MiniParse.Spec.Base.__proj__Serializer__item__f@tok
Tm_arrow_6fff714fa503dca55f8dee51ce96a75c))

;; def=MiniParse.Spec.Base.fst(343,18-343,19); use=MiniParse.Spec.Base.fst(343,18-343,19)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Base.__proj__Serializer__item__f@tok
@x1)
@x2)
@x3)
(MiniParse.Spec.Base.__proj__Serializer__item__f @x1
@x2
@x3))
 

:pattern ((MiniParse.Spec.Base.__proj__Serializer__item__f @x1
@x2
@x3))
:qid function_token_typing_MiniParse.Spec.Base.__proj__Serializer__item__f.1))
)
 

:pattern ((ApplyTT @x0
MiniParse.Spec.Base.__proj__Serializer__item__f@tok))
:qid function_token_typing_MiniParse.Spec.Base.__proj__Serializer__item__f))

:named function_token_typing_MiniParse.Spec.Base.__proj__Serializer__item__f))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name MiniParse.Spec.Base.serializer_spec; Namespace MiniParse.Spec.Base; Name MiniParse.Spec.Base.Serializer; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(340,5-340,20); use=MiniParse.Spec.Base.fst(340,5-340,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(MiniParse.Spec.Base.serializer_spec @x2
@x3))
(and (is-MiniParse.Spec.Base.Serializer @x1)
(= @x2
(MiniParse.Spec.Base.Serializer_t @x1))
(= @x3
(MiniParse.Spec.Base.Serializer_p @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(MiniParse.Spec.Base.serializer_spec @x2
@x3)))
:qid fuel_guarded_inversion_MiniParse.Spec.Base.serializer_spec))

:named fuel_guarded_inversion_MiniParse.Spec.Base.serializer_spec))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name MiniParse.Spec.Base.serializer_spec; Namespace MiniParse.Spec.Base; Name MiniParse.Spec.Base.Serializer; Namespace MiniParse.Spec.Base
(assert (! (= 168
(Term_constr_id MiniParse.Spec.Base.serializer_spec@tok))
:named fresh_token_MiniParse.Spec.Base.serializer_spec@tok))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Combinators.bare_serialize_nondep_then
;;; Fact-ids: Name MiniParse.Spec.Combinators.bare_serialize_nondep_then; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(481,4-481,30); use=MiniParse.Spec.Combinators.fst(481,4-481,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (MiniParse.Spec.Combinators.bare_serialize_nondep_then @x0
@x1
@x2
@x3
@x4
@x5)
(Tm_abs_84ca3be552b2abb245b330ca14b3d71f @x1
@x2
@x4
@x5
@x3
@x0))
 

:pattern ((MiniParse.Spec.Combinators.bare_serialize_nondep_then @x0
@x1
@x2
@x3
@x4
@x5))
:qid equation_MiniParse.Spec.Combinators.bare_serialize_nondep_then))

:named equation_MiniParse.Spec.Combinators.bare_serialize_nondep_then))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Base.serialize
;;; Fact-ids: Name MiniParse.Spec.Base.serialize; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(378,4-378,13); use=MiniParse.Spec.Base.fst(378,4-378,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (MiniParse.Spec.Base.serialize @x0
@x1
@x2
@x3)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Base.__proj__Serializer__item__f@tok
@x0)
@x1)
@x2)
@x3))
 

:pattern ((MiniParse.Spec.Base.serialize @x0
@x1
@x2
@x3))
:qid equation_MiniParse.Spec.Base.serialize))

:named equation_MiniParse.Spec.Base.serialize))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name MiniParse.Spec.Base.serializer_spec; Namespace MiniParse.Spec.Base; Name MiniParse.Spec.Base.Serializer; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(343,4-343,14); use=MiniParse.Spec.Base.fst(343,4-343,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
(MiniParse.Spec.Base.parser_spec @x1))
(HasTypeFuel @u0
@x3
(Tm_refine_8da27fc70f74cdb01995c74e5b0aab3a @x1
@x2)))
(HasTypeFuel @u0
(MiniParse.Spec.Base.Serializer @x1
@x2
@x3)
(MiniParse.Spec.Base.serializer_spec @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(MiniParse.Spec.Base.Serializer @x1
@x2
@x3)
(MiniParse.Spec.Base.serializer_spec @x1
@x2)))
:qid data_typing_intro_MiniParse.Spec.Base.Serializer@tok))

:named data_typing_intro_MiniParse.Spec.Base.Serializer@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name MiniParse.Spec.Base.serializer_spec; Namespace MiniParse.Spec.Base; Name MiniParse.Spec.Base.Serializer; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(343,4-343,14); use=MiniParse.Spec.Base.fst(343,4-343,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(MiniParse.Spec.Base.Serializer @x1
@x2
@x3)
(MiniParse.Spec.Base.serializer_spec @x4
@x5))
(and (HasTypeFuel @u0
@x4
Tm_type)
(HasTypeFuel @u0
@x5
(MiniParse.Spec.Base.parser_spec @x4))
(HasTypeFuel @u0
@x3
(Tm_refine_8da27fc70f74cdb01995c74e5b0aab3a @x4
@x5))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(MiniParse.Spec.Base.Serializer @x1
@x2
@x3)
(MiniParse.Spec.Base.serializer_spec @x4
@x5)))
:qid data_elim_MiniParse.Spec.Base.Serializer))

:named data_elim_MiniParse.Spec.Base.Serializer))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name MiniParse.Spec.Base.serializer_spec; Namespace MiniParse.Spec.Base; Name MiniParse.Spec.Base.Serializer; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(340,5-340,20); use=MiniParse.Spec.Base.fst(340,5-340,20)
(forall ((@x0 Term) (@x1 Term))
 (! (= 167
(Term_constr_id (MiniParse.Spec.Base.serializer_spec @x0
@x1)))
 

:pattern ((MiniParse.Spec.Base.serializer_spec @x0
@x1))
:qid constructor_distinct_MiniParse.Spec.Base.serializer_spec))

:named constructor_distinct_MiniParse.Spec.Base.serializer_spec))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name MiniParse.Spec.Base.serializer_spec; Namespace MiniParse.Spec.Base; Name MiniParse.Spec.Base.Serializer; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(343,4-343,14); use=MiniParse.Spec.Base.fst(343,4-343,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 175
(Term_constr_id (MiniParse.Spec.Base.Serializer @x0
@x1
@x2)))
 

:pattern ((MiniParse.Spec.Base.Serializer @x0
@x1
@x2))
:qid constructor_distinct_MiniParse.Spec.Base.Serializer))

:named constructor_distinct_MiniParse.Spec.Base.Serializer))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name MiniParse.Spec.Combinators.bare_serialize_nondep_then; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(489,10-489,17); use=MiniParse.Spec.Combinators.fst(489,10-489,17)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_ghost_arrow_74d5ca20293ddc2696b34978f3cd4f0a @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_ghost_arrow_74d5ca20293ddc2696b34978f3cd4f0a @x2
@x3)))
:qid MiniParse.Spec.Combinators_pre_typing_Tm_ghost_arrow_74d5ca20293ddc2696b34978f3cd4f0a))

:named MiniParse.Spec.Combinators_pre_typing_Tm_ghost_arrow_74d5ca20293ddc2696b34978f3cd4f0a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name MiniParse.Spec.Combinators.bare_serialize_nondep_then; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(482,8-488,33); use=MiniParse.Spec.Combinators.fst(482,8-488,33)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_6f45af358a0859bbc40786d00743b12c)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_6f45af358a0859bbc40786d00743b12c))
:qid MiniParse.Spec.Combinators_pre_typing_Tm_arrow_6f45af358a0859bbc40786d00743b12c))

:named MiniParse.Spec.Combinators_pre_typing_Tm_arrow_6f45af358a0859bbc40786d00743b12c))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_74d5ca20293ddc2696b34978f3cd4f0a
;;; Fact-ids: Name MiniParse.Spec.Combinators.bare_serialize_nondep_then; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(489,10-489,17); use=MiniParse.Spec.Combinators.fst(489,10-489,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_ghost_arrow_74d5ca20293ddc2696b34978f3cd4f0a @x1
@x2))

;; def=MiniParse.Spec.Combinators.fst(489,10-489,17); use=MiniParse.Spec.Combinators.fst(489,10-489,17)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(FStar.Pervasives.Native.tuple2 @x2
@x1))
(HasType (ApplyTT @x0
@x3)
MiniParse.Spec.Base.bytes))
 

:pattern ((ApplyTT @x0
@x3))
:qid MiniParse.Spec.Combinators_interpretation_Tm_ghost_arrow_74d5ca20293ddc2696b34978f3cd4f0a.1))
)
 

:pattern ((HasTypeZ @x0
(Tm_ghost_arrow_74d5ca20293ddc2696b34978f3cd4f0a @x1
@x2)))
:qid MiniParse.Spec.Combinators_interpretation_Tm_ghost_arrow_74d5ca20293ddc2696b34978f3cd4f0a))

:named MiniParse.Spec.Combinators_interpretation_Tm_ghost_arrow_74d5ca20293ddc2696b34978f3cd4f0a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_6f45af358a0859bbc40786d00743b12c
;;; Fact-ids: Name MiniParse.Spec.Combinators.bare_serialize_nondep_then; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(482,8-488,33); use=MiniParse.Spec.Combinators.fst(482,8-488,33)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_6f45af358a0859bbc40786d00743b12c)
(and 
;; def=MiniParse.Spec.Combinators.fst(482,8-488,33); use=MiniParse.Spec.Combinators.fst(482,8-488,33)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(MiniParse.Spec.Base.parser_spec @x1))
(HasType @x3
(MiniParse.Spec.Base.serializer_spec @x1
@x2))
(HasType @x4
Tm_type)
(HasType @x5
(MiniParse.Spec.Base.parser_spec @x4))
(HasType @x6
(MiniParse.Spec.Base.serializer_spec @x4
@x5)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
(MiniParse.Spec.Base.bare_serializer (FStar.Pervasives.Native.tuple2 @x1
@x4))))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_6f45af358a0859bbc40786d00743b12c.1))

(IsTotFun @x0)

;; def=MiniParse.Spec.Combinators.fst(482,8-488,33); use=MiniParse.Spec.Combinators.fst(482,8-488,33)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Tm_type)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_6f45af358a0859bbc40786d00743b12c.2))


;; def=MiniParse.Spec.Combinators.fst(482,8-488,33); use=MiniParse.Spec.Combinators.fst(482,8-488,33)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(MiniParse.Spec.Base.parser_spec @x1)))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_6f45af358a0859bbc40786d00743b12c.3))


;; def=MiniParse.Spec.Combinators.fst(482,8-488,33); use=MiniParse.Spec.Combinators.fst(482,8-488,33)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(MiniParse.Spec.Base.parser_spec @x1))
(HasType @x3
(MiniParse.Spec.Base.serializer_spec @x1
@x2)))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_6f45af358a0859bbc40786d00743b12c.4))


;; def=MiniParse.Spec.Combinators.fst(482,8-488,33); use=MiniParse.Spec.Combinators.fst(482,8-488,33)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(MiniParse.Spec.Base.parser_spec @x1))
(HasType @x3
(MiniParse.Spec.Base.serializer_spec @x1
@x2))
(HasType @x4
Tm_type))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_6f45af358a0859bbc40786d00743b12c.5))


;; def=MiniParse.Spec.Combinators.fst(482,8-488,33); use=MiniParse.Spec.Combinators.fst(482,8-488,33)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(MiniParse.Spec.Base.parser_spec @x1))
(HasType @x3
(MiniParse.Spec.Base.serializer_spec @x1
@x2))
(HasType @x4
Tm_type)
(HasType @x5
(MiniParse.Spec.Base.parser_spec @x4)))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_6f45af358a0859bbc40786d00743b12c.6))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_6f45af358a0859bbc40786d00743b12c))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_6f45af358a0859bbc40786d00743b12c))

:named MiniParse.Spec.Combinators_interpretation_Tm_arrow_6f45af358a0859bbc40786d00743b12c))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name MiniParse.Spec.Base.serializer_spec; Namespace MiniParse.Spec.Base; Name MiniParse.Spec.Base.Serializer; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(340,5-340,20); use=MiniParse.Spec.Base.fst(340,5-340,20)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u1
@x0
(MiniParse.Spec.Base.serializer_spec @x2
@x3))
(= (MiniParse.Spec.Base.serializer_spec @x2
@x3)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(MiniParse.Spec.Base.serializer_spec @x2
@x3)))
:qid MiniParse.Spec.Base_pretyping_1ef9a736b87d07ab3d10328c467e9c25))

:named MiniParse.Spec.Base_pretyping_1ef9a736b87d07ab3d10328c467e9c25))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name MiniParse.Spec.Base.__proj__Serializer__item__f; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(341,7-343,67); use=MiniParse.Spec.Base.fst(341,7-343,67)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_6fff714fa503dca55f8dee51ce96a75c)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_6fff714fa503dca55f8dee51ce96a75c))
:qid MiniParse.Spec.Base_pre_typing_Tm_arrow_6fff714fa503dca55f8dee51ce96a75c))

:named MiniParse.Spec.Base_pre_typing_Tm_arrow_6fff714fa503dca55f8dee51ce96a75c))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_6fff714fa503dca55f8dee51ce96a75c
;;; Fact-ids: Name MiniParse.Spec.Base.__proj__Serializer__item__f; Namespace MiniParse.Spec.Base
(assert (! 
;; def=MiniParse.Spec.Base.fst(341,7-343,67); use=MiniParse.Spec.Base.fst(341,7-343,67)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_6fff714fa503dca55f8dee51ce96a75c)
(and 
;; def=MiniParse.Spec.Base.fst(341,7-343,67); use=MiniParse.Spec.Base.fst(341,7-343,67)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(MiniParse.Spec.Base.parser_spec @x1))
(HasType @x3
(MiniParse.Spec.Base.serializer_spec @x1
@x2)))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
(Tm_refine_8da27fc70f74cdb01995c74e5b0aab3a @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid MiniParse.Spec.Base_interpretation_Tm_arrow_6fff714fa503dca55f8dee51ce96a75c.1))

(IsTotFun @x0)

;; def=MiniParse.Spec.Base.fst(341,7-343,67); use=MiniParse.Spec.Base.fst(341,7-343,67)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Tm_type)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid MiniParse.Spec.Base_interpretation_Tm_arrow_6fff714fa503dca55f8dee51ce96a75c.2))


;; def=MiniParse.Spec.Base.fst(341,7-343,67); use=MiniParse.Spec.Base.fst(341,7-343,67)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(MiniParse.Spec.Base.parser_spec @x1)))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid MiniParse.Spec.Base_interpretation_Tm_arrow_6fff714fa503dca55f8dee51ce96a75c.3))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_6fff714fa503dca55f8dee51ce96a75c))
:qid MiniParse.Spec.Base_interpretation_Tm_arrow_6fff714fa503dca55f8dee51ce96a75c))

:named MiniParse.Spec.Base_interpretation_Tm_arrow_6fff714fa503dca55f8dee51ce96a75c))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name MiniParse.Spec.Base.serialize; Namespace MiniParse.Spec.Base
(assert (! (Valid (ApplyTT __uu__PartialApp
MiniParse.Spec.Base.__proj__Serializer__item__f@tok))
:named @kick_partial_app_03b1e9dfb8076d5f8b6a9e440bf10796))
(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(516,1-545,28)

(declare-fun label_29 () Bool)
(declare-fun label_28 () Bool)
(declare-fun label_27 () Bool)
(declare-fun label_26 () Bool)
(declare-fun label_25 () Bool)
(declare-fun label_24 () Bool)
(declare-fun label_23 () Bool)
(declare-fun label_22 () Bool)
(declare-fun label_21 () Bool)
(declare-fun label_20 () Bool)
(declare-fun label_19 () Bool)
(declare-fun label_18 () Bool)
(declare-fun label_17 () Bool)
(declare-fun label_16 () Bool)
(declare-fun label_15 () Bool)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
Tm_type)
:named refinement_kinding_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(518,4-518,147); use=MiniParse.Spec.Combinators.fst(518,4-518,9)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasTypeFuel @u0
@x1
Prims.unit))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
:qid refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

:named refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: 
(assert (! (Valid (ApplyTT __uu__PartialApp
MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok))
:named @kick_partial_app_b27fb2d750f85c4743acdafeb48b65b3))









































































(declare-fun Tm_refine_c960e8f8ae98845bb6d9ed7ada63406e (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(518,4-518,147); use=MiniParse.Spec.Combinators.fst(516,1-545,28)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (HasType (Tm_refine_c960e8f8ae98845bb6d9ed7ada63406e @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type)
 

:pattern ((HasType (Tm_refine_c960e8f8ae98845bb6d9ed7ada63406e @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type))
:qid refinement_kinding_Tm_refine_c960e8f8ae98845bb6d9ed7ada63406e))

:named refinement_kinding_Tm_refine_c960e8f8ae98845bb6d9ed7ada63406e))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(518,4-518,147); use=MiniParse.Spec.Combinators.fst(516,1-545,28)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_c960e8f8ae98845bb6d9ed7ada63406e @x2
@x3
@x4
@x5
@x6
@x7
@x8))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(635,71-635,97); use=MiniParse.Spec.Combinators.fst(516,1-545,28)
(not 
;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(516,1-545,28)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(518,10-518,147); use=MiniParse.Spec.Combinators.fst(516,1-545,28)
(= (MiniParse.Spec.Base.parse (FStar.Pervasives.Native.tuple2 @x2
@x3)
(MiniParse.Spec.Combinators.nondep_then @x2
@x4
@x3
@x5)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x2)
@x4)
@x6)
@x3)
@x5)
@x7)
@x8))
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 (FStar.Pervasives.Native.tuple2 @x2
@x3)
(MiniParse.Spec.Base.consumed_length (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x2)
@x4)
@x6)
@x3)
@x5)
@x7)
@x8)))
(FStar.Pervasives.Native.Mktuple2 (FStar.Pervasives.Native.tuple2 @x2
@x3)
(MiniParse.Spec.Base.consumed_length (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x2)
@x4)
@x6)
@x3)
@x5)
@x7)
@x8))
@x8
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x2)
@x4)
@x6)
@x3)
@x5)
@x7)
@x8)))))
)

;; def=Prims.fst(635,86-635,95); use=MiniParse.Spec.Combinators.fst(516,1-545,28)
(not 
;; def=Prims.fst(635,86-635,95); use=MiniParse.Spec.Combinators.fst(516,1-545,28)
(= @x9
@x1)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_c960e8f8ae98845bb6d9ed7ada63406e.1))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_c960e8f8ae98845bb6d9ed7ada63406e @x2
@x3
@x4
@x5
@x6
@x7
@x8)))
:qid refinement_interpretation_Tm_refine_c960e8f8ae98845bb6d9ed7ada63406e))

:named refinement_interpretation_Tm_refine_c960e8f8ae98845bb6d9ed7ada63406e))
;;;;;;;;;;;;;;;;haseq for Tm_refine_c960e8f8ae98845bb6d9ed7ada63406e
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(518,4-518,147); use=MiniParse.Spec.Combinators.fst(516,1-545,28)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_c960e8f8ae98845bb6d9ed7ada63406e @x0
@x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_c960e8f8ae98845bb6d9ed7ada63406e @x0
@x1
@x2
@x3
@x4
@x5
@x6))))
:qid haseqTm_refine_c960e8f8ae98845bb6d9ed7ada63406e))

:named haseqTm_refine_c960e8f8ae98845bb6d9ed7ada63406e))
;;;;;;;;;;;;;;;;x: t1 & t2   -> FStar.Pervasives.Lemma     (ensures       MiniParse.Spec.Base.parse (nondep_then p1 p2) (bare_serialize_nondep_then p1 s1 p2 s2 x) ==       FStar.Pervasives.Native.Some       (x,       FStar.Seq.Base.length (bare_serialize_nondep_then p1 s1 p2 s2 x)))
(declare-fun Tm_arrow_99e3e7b79d61b475d57f3035080b122a (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_99e3e7b79d61b475d57f3035080b122a
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(517,8-518,147); use=MiniParse.Spec.Combinators.fst(516,1-545,28)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_arrow_99e3e7b79d61b475d57f3035080b122a @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type)
 

:pattern ((HasType (Tm_arrow_99e3e7b79d61b475d57f3035080b122a @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
:qid kinding_Tm_arrow_99e3e7b79d61b475d57f3035080b122a))

:named kinding_Tm_arrow_99e3e7b79d61b475d57f3035080b122a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(517,8-518,147); use=MiniParse.Spec.Combinators.fst(516,1-545,28)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_99e3e7b79d61b475d57f3035080b122a @x2
@x3
@x4
@x5
@x6
@x7))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_99e3e7b79d61b475d57f3035080b122a @x2
@x3
@x4
@x5
@x6
@x7)))
:qid MiniParse.Spec.Combinators_pre_typing_Tm_arrow_99e3e7b79d61b475d57f3035080b122a))

:named MiniParse.Spec.Combinators_pre_typing_Tm_arrow_99e3e7b79d61b475d57f3035080b122a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_99e3e7b79d61b475d57f3035080b122a
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(517,8-518,147); use=MiniParse.Spec.Combinators.fst(516,1-545,28)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_99e3e7b79d61b475d57f3035080b122a @x1
@x2
@x3
@x4
@x5
@x6))
(and 
;; def=MiniParse.Spec.Combinators.fst(517,8-518,147); use=MiniParse.Spec.Combinators.fst(516,1-545,28)
(forall ((@x7 Term))
 (! (implies (HasType @x7
(FStar.Pervasives.Native.tuple2 @x6
@x5))
(HasType (ApplyTT @x0
@x7)
(Tm_refine_c960e8f8ae98845bb6d9ed7ada63406e @x6
@x5
@x4
@x3
@x2
@x1
@x7)))
 

:pattern ((ApplyTT @x0
@x7))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_99e3e7b79d61b475d57f3035080b122a.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_99e3e7b79d61b475d57f3035080b122a @x1
@x2
@x3
@x4
@x5
@x6)))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_99e3e7b79d61b475d57f3035080b122a))

:named MiniParse.Spec.Combinators_interpretation_Tm_arrow_99e3e7b79d61b475d57f3035080b122a))





;;;;;;;;;;;;;;;;_: t1 & t2 -> Prims.GTot Type
(declare-fun Tm_arrow_e582d335e47d6840e0aed28d317c4bc1 (Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_e582d335e47d6840e0aed28d317c4bc1
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(517,8-517,15); use=MiniParse.Spec.Combinators.fst(516,1-545,28)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_e582d335e47d6840e0aed28d317c4bc1 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_e582d335e47d6840e0aed28d317c4bc1 @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_e582d335e47d6840e0aed28d317c4bc1))

:named kinding_Tm_arrow_e582d335e47d6840e0aed28d317c4bc1))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(517,8-517,15); use=MiniParse.Spec.Combinators.fst(516,1-545,28)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_e582d335e47d6840e0aed28d317c4bc1 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_e582d335e47d6840e0aed28d317c4bc1 @x2
@x3)))
:qid MiniParse.Spec.Combinators_pre_typing_Tm_arrow_e582d335e47d6840e0aed28d317c4bc1))

:named MiniParse.Spec.Combinators_pre_typing_Tm_arrow_e582d335e47d6840e0aed28d317c4bc1))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_e582d335e47d6840e0aed28d317c4bc1
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(517,8-517,15); use=MiniParse.Spec.Combinators.fst(516,1-545,28)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_e582d335e47d6840e0aed28d317c4bc1 @x1
@x2))
(and 
;; def=MiniParse.Spec.Combinators.fst(517,8-517,15); use=MiniParse.Spec.Combinators.fst(516,1-545,28)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(FStar.Pervasives.Native.tuple2 @x2
@x1))
(HasType (ApplyTT @x0
@x3)
Tm_type))
 

:pattern ((ApplyTT @x0
@x3))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_e582d335e47d6840e0aed28d317c4bc1.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_e582d335e47d6840e0aed28d317c4bc1 @x1
@x2)))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_e582d335e47d6840e0aed28d317c4bc1))

:named MiniParse.Spec.Combinators_interpretation_Tm_arrow_e582d335e47d6840e0aed28d317c4bc1))










(declare-fun Tm_abs_7cc928bd72935dd5d9bfe8ee2c177f1d (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_7cc928bd72935dd5d9bfe8ee2c177f1d
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(518,10-518,147); use=MiniParse.Spec.Combinators.fst(545,25-545,28)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_abs_7cc928bd72935dd5d9bfe8ee2c177f1d @x0
@x1
@x2
@x3
@x4
@x5)
(Tm_arrow_e582d335e47d6840e0aed28d317c4bc1 @x4
@x5))
 

:pattern ((Tm_abs_7cc928bd72935dd5d9bfe8ee2c177f1d @x0
@x1
@x2
@x3
@x4
@x5))
:qid typing_Tm_abs_7cc928bd72935dd5d9bfe8ee2c177f1d))

:named typing_Tm_abs_7cc928bd72935dd5d9bfe8ee2c177f1d))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_7cc928bd72935dd5d9bfe8ee2c177f1d
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(518,10-518,147); use=MiniParse.Spec.Combinators.fst(545,25-545,28)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (ApplyTT (Tm_abs_7cc928bd72935dd5d9bfe8ee2c177f1d @x1
@x2
@x3
@x4
@x5
@x6)
@x0)
(Prims.eq2 (FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 (FStar.Pervasives.Native.tuple2 @x6
@x5)
(MiniParse.Spec.Base.consumed_length (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x6)
@x1)
@x2)
@x5)
@x3)
@x4)
@x0))))
(MiniParse.Spec.Base.parse (FStar.Pervasives.Native.tuple2 @x6
@x5)
(MiniParse.Spec.Combinators.nondep_then @x6
@x1
@x5
@x3)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x6)
@x1)
@x2)
@x5)
@x3)
@x4)
@x0))
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 (FStar.Pervasives.Native.tuple2 @x6
@x5)
(MiniParse.Spec.Base.consumed_length (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x6)
@x1)
@x2)
@x5)
@x3)
@x4)
@x0)))
(FStar.Pervasives.Native.Mktuple2 (FStar.Pervasives.Native.tuple2 @x6
@x5)
(MiniParse.Spec.Base.consumed_length (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x6)
@x1)
@x2)
@x5)
@x3)
@x4)
@x0))
@x0
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x6)
@x1)
@x2)
@x5)
@x3)
@x4)
@x0))))))
 

:pattern ((ApplyTT (Tm_abs_7cc928bd72935dd5d9bfe8ee2c177f1d @x1
@x2
@x3
@x4
@x5
@x6)
@x0))
:qid interpretation_Tm_abs_7cc928bd72935dd5d9bfe8ee2c177f1d))

:named interpretation_Tm_abs_7cc928bd72935dd5d9bfe8ee2c177f1d))

; Encoding query formula : forall (t1: Type)
;   (p1: MiniParse.Spec.Base.parser_spec t1)
;   (s1: MiniParse.Spec.Base.serializer_spec p1)
;   (t2: Type)
;   (p2: MiniParse.Spec.Base.parser_spec t2)
;   (s2: MiniParse.Spec.Base.serializer_spec p2).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     (forall (pure_result: Prims.unit).
;         MiniParse.Spec.Base.serializer_correct (MiniParse.Spec.Combinators.nondep_then p1 p2)
;           (MiniParse.Spec.Combinators.bare_serialize_nondep_then p1 s1 p2 s2) ==>
;         p pure_result) ==>
;     (forall (x: t1 & t2) (_: Prims.squash Prims.l_True).
;         (*  - Could not prove post-condition
; *)
;         forall (any_result:
;           FStar.Pervasives.Native.option ((t1 & t2) &
;               MiniParse.Spec.Base.consumed_length (MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                     p1
;                     s1
;                     p2
;                     s2
;                     x))).
;           MiniParse.Spec.Base.parse (MiniParse.Spec.Combinators.nondep_then p1 p2)
;             (MiniParse.Spec.Combinators.bare_serialize_nondep_then p1 s1 p2 s2 x) ==
;           any_result ==>
;           (forall (any_result: Prims.nat).
;               FStar.Seq.Base.length (MiniParse.Spec.Combinators.bare_serialize_nondep_then p1
;                     s1
;                     p2
;                     s2
;                     x) ==
;               any_result ==>
;               FStar.Seq.Base.length (MiniParse.Spec.Combinators.bare_serialize_nondep_then p1
;                     s1
;                     p2
;                     s2
;                     x) <=
;               FStar.Seq.Base.length (MiniParse.Spec.Combinators.bare_serialize_nondep_then p1
;                     s1
;                     p2
;                     s2
;                     x))) /\
;     (forall (x: t1 & t2).
;         (forall (_: Prims.squash Prims.l_True).
;             (*  - Could not prove post-condition
; *)
;             forall (any_result:
;               FStar.Pervasives.Native.option ((t1 & t2) &
;                   MiniParse.Spec.Base.consumed_length (MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                         p1
;                         s1
;                         p2
;                         s2
;                         x))).
;               MiniParse.Spec.Base.parse (MiniParse.Spec.Combinators.nondep_then p1 p2)
;                 (MiniParse.Spec.Combinators.bare_serialize_nondep_then p1 s1 p2 s2 x) ==
;               any_result ==>
;               (forall (any_result: Prims.nat).
;                   FStar.Seq.Base.length (MiniParse.Spec.Combinators.bare_serialize_nondep_then p1
;                         s1
;                         p2
;                         s2
;                         x) ==
;                   any_result ==>
;                   FStar.Seq.Base.length (MiniParse.Spec.Combinators.bare_serialize_nondep_then p1
;                         s1
;                         p2
;                         s2
;                         x) <=
;                   FStar.Seq.Base.length (MiniParse.Spec.Combinators.bare_serialize_nondep_then p1
;                         s1
;                         p2
;                         s2
;                         x))) /\
;         (forall (p: Prims.pure_post Prims.unit).
;             (forall (pure_result: Prims.unit).
;                 MiniParse.Spec.Base.parse (MiniParse.Spec.Combinators.nondep_then p1 p2)
;                   (MiniParse.Spec.Combinators.bare_serialize_nondep_then p1 s1 p2 s2 x) ==
;                 FStar.Pervasives.Native.Some
;                 (x,
;                 FStar.Seq.Base.length (MiniParse.Spec.Combinators.bare_serialize_nondep_then p1
;                       s1
;                       p2
;                       s2
;                       x)) ==>
;                 p pure_result) ==>
;             (forall (any_result:
;                 FStar.Pervasives.Native.option (t1 &
;                     MiniParse.Spec.Base.consumed_length (MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                           p1
;                           s1
;                           p2
;                           s2
;                           x))).
;                 MiniParse.Spec.Base.parse p1
;                   (MiniParse.Spec.Combinators.bare_serialize_nondep_then p1 s1 p2 s2 x) ==
;                 any_result ==>
;                 (forall (any_result:
;                     FStar.Pervasives.Native.option (t1 &
;                         MiniParse.Spec.Base.consumed_length (MiniParse.Spec.Base.serialize s1
;                               (FStar.Pervasives.Native.fst x)))).
;                     MiniParse.Spec.Base.parse p1
;                       (MiniParse.Spec.Base.serialize s1 (FStar.Pervasives.Native.fst x)) ==
;                     any_result ==>
;                     Some? (MiniParse.Spec.Base.parse p1
;                           (MiniParse.Spec.Base.serialize s1 (FStar.Pervasives.Native.fst x))) /\
;                     (forall (pure_result: Prims.unit).
;                         Some? (MiniParse.Spec.Base.parse p1
;                               (MiniParse.Spec.Base.serialize s1 (FStar.Pervasives.Native.fst x))) ==>
;                         MiniParse.Spec.Base.no_lookahead_on p1.f
;                           (MiniParse.Spec.Base.serialize s1 (FStar.Pervasives.Native.fst x))
;                           (MiniParse.Spec.Combinators.bare_serialize_nondep_then p1 s1 p2 s2 x) /\
;                         (forall (pure_result: Prims.unit).
;                             MiniParse.Spec.Base.no_lookahead_on p1.f
;                               (MiniParse.Spec.Base.serialize s1 (FStar.Pervasives.Native.fst x))
;                               (MiniParse.Spec.Combinators.bare_serialize_nondep_then p1 s1 p2 s2 x) ==>
;                             (forall (any_result:
;                                 FStar.Pervasives.Native.option (t1 &
;                                     MiniParse.Spec.Base.consumed_length (MiniParse.Spec.Base.serialize
;                                           s1
;                                           (FStar.Pervasives.Native.fst x)))).
;                                 MiniParse.Spec.Base.parse p1
;                                   (MiniParse.Spec.Base.serialize s1 (FStar.Pervasives.Native.fst x)) ==
;                                 any_result ==>
;                                 (~(Some? (MiniParse.Spec.Base.parse p1
;                                           (MiniParse.Spec.Base.serialize s1
;                                               (FStar.Pervasives.Native.fst x)))) ==>
;                                   Prims.l_False) /\
;                                 (forall (b: t1)
;                                     (b:
;                                     MiniParse.Spec.Base.consumed_length (MiniParse.Spec.Base.serialize
;                                           s1
;                                           (FStar.Pervasives.Native.fst x))).
;                                     MiniParse.Spec.Base.parse p1
;                                       (MiniParse.Spec.Base.serialize s1
;                                           (FStar.Pervasives.Native.fst x)) ==
;                                     FStar.Pervasives.Native.Some (b, b) ==>
;                                     b ==
;                                     FStar.Seq.Base.length (MiniParse.Spec.Base.serialize s1
;                                           (FStar.Pervasives.Native.fst x)) /\
;                                     (forall (pure_result: Prims.unit).
;                                         b ==
;                                         FStar.Seq.Base.length (MiniParse.Spec.Base.serialize s1
;                                               (FStar.Pervasives.Native.fst x)) ==>
;                                         b <=
;                                         FStar.Seq.Base.length (MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                                               p1
;                                               s1
;                                               p2
;                                               s2
;                                               x) /\
;                                         (forall (pure_result: Prims.unit).
;                                             b <=
;                                             FStar.Seq.Base.length (MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                                                   p1
;                                                   s1
;                                                   p2
;                                                   s2
;                                                   x) ==>
;                                             (forall (any_result:
;                                                 FStar.Seq.Base.seq MiniParse.Spec.Base.byte).
;                                                 MiniParse.Spec.Base.serialize s1
;                                                   (FStar.Pervasives.Native.fst x) ==
;                                                 any_result ==>
;                                                 (b <=
;                                                   FStar.Seq.Base.length (MiniParse.Spec.Base.serialize
;                                                         s1
;                                                         (FStar.Pervasives.Native.fst x)) ==>
;                                                   0 <= b &&
;                                                   b <=
;                                                   FStar.Seq.Base.length (MiniParse.Spec.Base.serialize
;                                                         s1
;                                                         (FStar.Pervasives.Native.fst x))) /\
;                                                 (forall (any_result:
;                                                     MiniParse.Spec.Base.consumed_length (MiniParse.Spec.Base.serialize
;                                                           s1
;                                                           (FStar.Pervasives.Native.fst x))).
;                                                     b == any_result ==>
;                                                     (forall (any_result:
;                                                         FStar.Seq.Base.seq MiniParse.Spec.Base.byte)
;                                                       .
;                                                         FStar.Seq.Base.slice (MiniParse.Spec.Base.serialize
;                                                               s1
;                                                               (FStar.Pervasives.Native.fst x))
;                                                           0
;                                                           b ==
;                                                         any_result ==>
;                                                         (forall (any_result: Prims.logical).
;                                                             FStar.Seq.Base.slice (MiniParse.Spec.Base.serialize
;                                                                   s1
;                                                                   (FStar.Pervasives.Native.fst x))
;                                                               0
;                                                               b ==
;                                                             MiniParse.Spec.Base.serialize s1
;                                                               (FStar.Pervasives.Native.fst x) ==
;                                                             any_result ==>
;                                                             FStar.Seq.Base.slice (MiniParse.Spec.Base.serialize
;                                                                   s1
;                                                                   (FStar.Pervasives.Native.fst x))
;                                                               0
;                                                               b ==
;                                                             MiniParse.Spec.Base.serialize s1
;                                                               (FStar.Pervasives.Native.fst x) /\
;                                                             (forall (pure_result: Prims.unit).
;                                                                 FStar.Seq.Base.slice (MiniParse.Spec.Base.serialize
;                                                                       s1
;                                                                       (FStar.Pervasives.Native.fst x
;                                                                       ))
;                                                                   0
;                                                                   b ==
;                                                                 MiniParse.Spec.Base.serialize s1
;                                                                   (FStar.Pervasives.Native.fst x) ==>
;                                                                 (forall (any_result:
;                                                                     FStar.Seq.Base.seq MiniParse.Spec.Base.byte
;                                                                     ).
;                                                                     MiniParse.Spec.Base.serialize s1
;                                                                       (FStar.Pervasives.Native.fst x
;                                                                       ) ==
;                                                                     any_result ==>
;                                                                     (forall (any_result:
;                                                                         FStar.Seq.Base.seq MiniParse.Spec.Base.byte
;                                                                         ).
;                                                                         MiniParse.Spec.Base.serialize
;                                                                           s2
;                                                                           (FStar.Pervasives.Native.snd
;                                                                               x) ==
;                                                                         any_result ==>
;                                                                         (forall (pure_result:
;                                                                             Prims.unit).
;                                                                             FStar.Seq.Base.slice (FStar.Seq.Base.append
;                                                                                   (MiniParse.Spec.Base.serialize
;                                                                                       s1
;                                                                                       (FStar.Pervasives.Native.fst
;                                                                                           x))
;                                                                                   (MiniParse.Spec.Base.serialize
;                                                                                       s2
;                                                                                       (FStar.Pervasives.Native.snd
;                                                                                           x)))
;                                                                               0
;                                                                               (FStar.Seq.Base.length
;                                                                                   (MiniParse.Spec.Base.serialize
;                                                                                       s1
;                                                                                       (FStar.Pervasives.Native.fst
;                                                                                           x))) ==
;                                                                             MiniParse.Spec.Base.serialize
;                                                                               s1
;                                                                               (FStar.Pervasives.Native.fst
;                                                                                   x) ==>
;                                                                             MiniParse.Spec.Base.no_lookahead_on_precond
;                                                                               p1.f
;                                                                               (MiniParse.Spec.Base.serialize
;                                                                                   s1
;                                                                                   (FStar.Pervasives.Native.fst
;                                                                                       x))
;                                                                               (MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                                                                                   p1
;                                                                                   s1
;                                                                                   p2
;                                                                                   s2
;                                                                                   x) /\
;                                                                             (forall (pure_result:
;                                                                                 Prims.unit).
;                                                                                 MiniParse.Spec.Base.no_lookahead_on_precond
;                                                                                   p1.f
;                                                                                   (MiniParse.Spec.Base.serialize
;                                                                                       s1
;                                                                                       (FStar.Pervasives.Native.fst
;                                                                                           x))
;                                                                                   (MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                                                                                       p1
;                                                                                       s1
;                                                                                       p2
;                                                                                       s2
;                                                                                       x) ==>
;                                                                                 MiniParse.Spec.Base.no_lookahead_on_postcond
;                                                                                   p1.f
;                                                                                   (MiniParse.Spec.Base.serialize
;                                                                                       s1
;                                                                                       (FStar.Pervasives.Native.fst
;                                                                                           x))
;                                                                                   (MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                                                                                       p1
;                                                                                       s1
;                                                                                       p2
;                                                                                       s2
;                                                                                       x) /\
;                                                                                 (forall (pure_result:
;                                                                                     Prims.unit).
;                                                                                     MiniParse.Spec.Base.no_lookahead_on_postcond
;                                                                                       p1.f
;                                                                                       (MiniParse.Spec.Base.serialize
;                                                                                           s1
;                                                                                           (FStar.Pervasives.Native.fst
;                                                                                               x))
;                                                                                       (MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                                                                                           p1
;                                                                                           s1
;                                                                                           p2
;                                                                                           s2
;                                                                                           x) ==>
;                                                                                     Some? (MiniParse.Spec.Base.parse
;                                                                                           p1
;                                                                                           (MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                                                                                               p1
;                                                                                               s1
;                                                                                               p2
;                                                                                               s2
;                                                                                               x)) /\
;                                                                                     (forall (pure_result:
;                                                                                         Prims.unit).
;                                                                                         Some? (MiniParse.Spec.Base.parse
;                                                                                               p1
;                                                                                               (MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                                                                                                   p1
;                                                                                                   s1
;                                                                                                   p2
;                                                                                                   s2
;                                                                                                   x)
;                                                                                           ) ==>
;                                                                                         MiniParse.Spec.Base.injective_precond
;                                                                                           p1.f
;                                                                                           (MiniParse.Spec.Base.serialize
;                                                                                               s1
;                                                                                               (FStar.Pervasives.Native.fst
;                                                                                                   x)
;                                                                                           )
;                                                                                           (MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                                                                                               p1
;                                                                                               s1
;                                                                                               p2
;                                                                                               s2
;                                                                                               x) /\
;                                                                                         (forall (pure_result:
;                                                                                             Prims.unit)
;                                                                                           .
;                                                                                             MiniParse.Spec.Base.injective_precond
;                                                                                               p1.f
;                                                                                               (MiniParse.Spec.Base.serialize
;                                                                                                   s1
;                                                                                                   (FStar.Pervasives.Native.fst
;                                                                                                       x
; 
;                                                                                                   ))
;                                                                                               (MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                                                                                                   p1
;                                                                                                   s1
;                                                                                                   p2
;                                                                                                   s2
;                                                                                                   x) ==>
;                                                                                             MiniParse.Spec.Base.injective_postcond
;                                                                                               p1.f
;                                                                                               (MiniParse.Spec.Base.serialize
;                                                                                                   s1
;                                                                                                   (FStar.Pervasives.Native.fst
;                                                                                                       x
; 
;                                                                                                   ))
;                                                                                               (MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                                                                                                   p1
;                                                                                                   s1
;                                                                                                   p2
;                                                                                                   s2
;                                                                                                   x) /\
;                                                                                             (forall (pure_result:
;                                                                                                 Prims.unit)
;                                                                                               .
;                                                                                                 MiniParse.Spec.Base.injective_postcond
;                                                                                                   p1
;                                                                                                     .f
;                                                                                                   (MiniParse.Spec.Base.serialize
;                                                                                                       s1
;                                                                                                       (
;                                                                                                         FStar.Pervasives.Native.fst
;                                                                                                           x
; 
;                                                                                                       )
; 
;                                                                                                   )
;                                                                                                   (MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                                                                                                       p1
;                                                                                                       s1
;                                                                                                       p2
;                                                                                                       s2
;                                                                                                       x
; 
;                                                                                                   ) ==>
;                                                                                                 (~(Some?
;                                                                                                       (
;                                                                                                         MiniParse.Spec.Base.parse
;                                                                                                           p1
;                                                                                                           (
;                                                                                                             MiniParse.Spec.Base.serialize
;                                                                                                               s1
;                                                                                                               (
;                                                                                                                 FStar.Pervasives.Native.fst
;                                                                                                                   x
; 
;                                                                                                               )
; 
;                                                                                                           )
; 
;                                                                                                       )
; 
;                                                                                                   ) ==>
;                                                                                                   Prims.l_False
;                                                                                                 ) /\
;                                                                                                 (forall
;                                                                                                     (b:
;                                                                                                     t1)
;                                                                                                     (b:
;                                                                                                     MiniParse.Spec.Base.consumed_length
;                                                                                                       (
;                                                                                                         MiniParse.Spec.Base.serialize
;                                                                                                           s1
;                                                                                                           (
;                                                                                                             FStar.Pervasives.Native.fst
;                                                                                                               x
; 
;                                                                                                           )
; 
;                                                                                                       )
;                                                                                                     )
;                                                                                                   .
;                                                                                                     MiniParse.Spec.Base.parse
;                                                                                                       p1
;                                                                                                       (
;                                                                                                         MiniParse.Spec.Base.serialize
;                                                                                                           s1
;                                                                                                           (
;                                                                                                             FStar.Pervasives.Native.fst
;                                                                                                               x
; 
;                                                                                                           )
; 
;                                                                                                       )
;                                                                                                      ==
;                                                                                                     FStar.Pervasives.Native.Some
;                                                                                                     (b,
;                                                                                                     b) ==>
;                                                                                                     (
;                                                                                                       ~(
;                                                                                                         Some?
;                                                                                                           (
;                                                                                                             MiniParse.Spec.Base.parse
;                                                                                                               p1
;                                                                                                               (
;                                                                                                                 MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                                                                                                                   p1
;                                                                                                                   s1
;                                                                                                                   p2
;                                                                                                                   s2
;                                                                                                                   x
; 
;                                                                                                               )
; 
;                                                                                                           )
; 
;                                                                                                       ) ==>
;                                                                                                       Prims.l_False
;                                                                                                     ) /\
;                                                                                                     (
;                                                                                                       forall
;                                                                                                         (b:
;                                                                                                         t1)
;                                                                                                         (b:
;                                                                                                         MiniParse.Spec.Base.consumed_length
;                                                                                                           (
;                                                                                                             MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                                                                                                               p1
;                                                                                                               s1
;                                                                                                               p2
;                                                                                                               s2
;                                                                                                               x
; 
;                                                                                                           )
;                                                                                                         )
;                                                                                                       .
;                                                                                                         MiniParse.Spec.Base.parse
;                                                                                                           p1
;                                                                                                           (
;                                                                                                             MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                                                                                                               p1
;                                                                                                               s1
;                                                                                                               p2
;                                                                                                               s2
;                                                                                                               x
; 
;                                                                                                           )
;                                                                                                          ==
;                                                                                                         FStar.Pervasives.Native.Some
;                                                                                                         (b,
;                                                                                                         b) ==>
;                                                                                                         b ==
;                                                                                                         b /\
;                                                                                                         (
;                                                                                                           forall
;                                                                                                             (pure_result:
;                                                                                                             Prims.unit)
;                                                                                                           .
;                                                                                                             b ==
;                                                                                                             b ==>
;                                                                                                             b ==
;                                                                                                             b /\
;                                                                                                             (
;                                                                                                               forall
;                                                                                                                 (pure_result:
;                                                                                                                 Prims.unit)
;                                                                                                               .
;                                                                                                                 b ==
;                                                                                                                 b ==>
;                                                                                                                 b ==
;                                                                                                                 FStar.Pervasives.Native.fst
;                                                                                                                   x
;                                                                                                                  /\
;                                                                                                                 (
;                                                                                                                   forall
;                                                                                                                     (pure_result:
;                                                                                                                     Prims.unit)
;                                                                                                                   .
;                                                                                                                     b ==
;                                                                                                                     FStar.Pervasives.Native.fst
;                                                                                                                       x
;                                                                                                                      ==>
;                                                                                                                     b ==
;                                                                                                                     FStar.Seq.Base.length
;                                                                                                                       (
;                                                                                                                         MiniParse.Spec.Base.serialize
;                                                                                                                           s1
;                                                                                                                           (
;                                                                                                                             FStar.Pervasives.Native.fst
;                                                                                                                               x
; 
;                                                                                                                           )
; 
;                                                                                                                       )
;                                                                                                                      /\
;                                                                                                                     (
;                                                                                                                       forall
;                                                                                                                         (pure_result:
;                                                                                                                         Prims.unit)
;                                                                                                                       .
;                                                                                                                         b ==
;                                                                                                                         FStar.Seq.Base.length
;                                                                                                                           (
;                                                                                                                             MiniParse.Spec.Base.serialize
;                                                                                                                               s1
;                                                                                                                               (
;                                                                                                                                 FStar.Pervasives.Native.fst
;                                                                                                                                   x
; 
;                                                                                                                               )
; 
;                                                                                                                           )
;                                                                                                                          ==>
;                                                                                                                         MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                                                                                                                           p1
;                                                                                                                           s1
;                                                                                                                           p2
;                                                                                                                           s2
;                                                                                                                           x
;                                                                                                                          ==
;                                                                                                                         FStar.Seq.Base.append
;                                                                                                                           (
;                                                                                                                             MiniParse.Spec.Base.serialize
;                                                                                                                               s1
;                                                                                                                               (
;                                                                                                                                 FStar.Pervasives.Native.fst
;                                                                                                                                   x
; 
;                                                                                                                               )
; 
;                                                                                                                           )
;                                                                                                                           (
;                                                                                                                             MiniParse.Spec.Base.serialize
;                                                                                                                               s2
;                                                                                                                               (
;                                                                                                                                 FStar.Pervasives.Native.snd
;                                                                                                                                   x
; 
;                                                                                                                               )
; 
;                                                                                                                           )
;                                                                                                                          /\
;                                                                                                                         (
;                                                                                                                           forall
;                                                                                                                             (pure_result:
;                                                                                                                             Prims.unit)
;                                                                                                                           .
;                                                                                                                             MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                                                                                                                               p1
;                                                                                                                               s1
;                                                                                                                               p2
;                                                                                                                               s2
;                                                                                                                               x
;                                                                                                                              ==
;                                                                                                                             FStar.Seq.Base.append
;                                                                                                                               (
;                                                                                                                                 MiniParse.Spec.Base.serialize
;                                                                                                                                   s1
;                                                                                                                                   (
;                                                                                                                                     FStar.Pervasives.Native.fst
;                                                                                                                                       x
; 
;                                                                                                                                   )
; 
;                                                                                                                               )
;                                                                                                                               (
;                                                                                                                                 MiniParse.Spec.Base.serialize
;                                                                                                                                   s2
;                                                                                                                                   (
;                                                                                                                                     FStar.Pervasives.Native.snd
;                                                                                                                                       x
; 
;                                                                                                                                   )
; 
;                                                                                                                               )
;                                                                                                                              ==>
;                                                                                                                             (
;                                                                                                                               forall
;                                                                                                                                 (any_result:
;                                                                                                                                 MiniParse.Spec.Base.bytes)
;                                                                                                                               .
;                                                                                                                                 MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                                                                                                                                   p1
;                                                                                                                                   s1
;                                                                                                                                   p2
;                                                                                                                                   s2
;                                                                                                                                   x
;                                                                                                                                  ==
;                                                                                                                                 any_result ==>
;                                                                                                                                 (
;                                                                                                                                   forall
;                                                                                                                                     (any_result:
;                                                                                                                                     FStar.Seq.Base.seq
;                                                                                                                                       MiniParse.Spec.Base.byte
;                                                                                                                                     )
;                                                                                                                                   .
;                                                                                                                                     MiniParse.Spec.Base.serialize
;                                                                                                                                       s1
;                                                                                                                                       (
;                                                                                                                                         FStar.Pervasives.Native.fst
;                                                                                                                                           x
; 
;                                                                                                                                       )
;                                                                                                                                      ==
;                                                                                                                                     any_result ==>
;                                                                                                                                     (
;                                                                                                                                       forall
;                                                                                                                                         (any_result:
;                                                                                                                                         FStar.Seq.Base.seq
;                                                                                                                                           MiniParse.Spec.Base.byte
;                                                                                                                                         )
;                                                                                                                                       .
;                                                                                                                                         MiniParse.Spec.Base.serialize
;                                                                                                                                           s2
;                                                                                                                                           (
;                                                                                                                                             FStar.Pervasives.Native.snd
;                                                                                                                                               x
; 
;                                                                                                                                           )
;                                                                                                                                          ==
;                                                                                                                                         any_result ==>
;                                                                                                                                         (
;                                                                                                                                           forall
;                                                                                                                                             (pure_result:
;                                                                                                                                             Prims.unit)
;                                                                                                                                           .
;                                                                                                                                             FStar.Seq.Base.slice
;                                                                                                                                               (
;                                                                                                                                                 FStar.Seq.Base.append
;                                                                                                                                                   (
;                                                                                                                                                     MiniParse.Spec.Base.serialize
;                                                                                                                                                       s1
;                                                                                                                                                       (
;                                                                                                                                                         FStar.Pervasives.Native.fst
;                                                                                                                                                           x
; 
;                                                                                                                                                       )
; 
;                                                                                                                                                   )
;                                                                                                                                                   (
;                                                                                                                                                     MiniParse.Spec.Base.serialize
;                                                                                                                                                       s2
;                                                                                                                                                       (
;                                                                                                                                                         FStar.Pervasives.Native.snd
;                                                                                                                                                           x
; 
;                                                                                                                                                       )
; 
;                                                                                                                                                   )
; 
;                                                                                                                                               )
;                                                                                                                                               (
;                                                                                                                                                 FStar.Seq.Base.length
;                                                                                                                                                   (
;                                                                                                                                                     MiniParse.Spec.Base.serialize
;                                                                                                                                                       s1
;                                                                                                                                                       (
;                                                                                                                                                         FStar.Pervasives.Native.fst
;                                                                                                                                                           x
; 
;                                                                                                                                                       )
; 
;                                                                                                                                                   )
; 
;                                                                                                                                               )
;                                                                                                                                               (
;                                                                                                                                                 FStar.Seq.Base.length
;                                                                                                                                                   (
;                                                                                                                                                     FStar.Seq.Base.append
;                                                                                                                                                       (
;                                                                                                                                                         MiniParse.Spec.Base.serialize
;                                                                                                                                                           s1
;                                                                                                                                                           (
;                                                                                                                                                             FStar.Pervasives.Native.fst
;                                                                                                                                                               x
; 
;                                                                                                                                                           )
; 
;                                                                                                                                                       )
;                                                                                                                                                       (
;                                                                                                                                                         MiniParse.Spec.Base.serialize
;                                                                                                                                                           s2
;                                                                                                                                                           (
;                                                                                                                                                             FStar.Pervasives.Native.snd
;                                                                                                                                                               x
; 
;                                                                                                                                                           )
; 
;                                                                                                                                                       )
; 
;                                                                                                                                                   )
; 
;                                                                                                                                               )
;                                                                                                                                              ==
;                                                                                                                                             MiniParse.Spec.Base.serialize
;                                                                                                                                               s2
;                                                                                                                                               (
;                                                                                                                                                 FStar.Pervasives.Native.snd
;                                                                                                                                                   x
; 
;                                                                                                                                               )
;                                                                                                                                              ==>
;                                                                                                                                             (
;                                                                                                                                               forall
;                                                                                                                                                 (any_result:
;                                                                                                                                                 FStar.Pervasives.Native.option
;                                                                                                                                                   (
;                                                                                                                                                     (t1 &
;                                                                                                                                                     t2) &
;                                                                                                                                                     MiniParse.Spec.Base.consumed_length
;                                                                                                                                                       (
;                                                                                                                                                         MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                                                                                                                                                           p1
;                                                                                                                                                           s1
;                                                                                                                                                           p2
;                                                                                                                                                           s2
;                                                                                                                                                           x
; 
;                                                                                                                                                       )
; 
;                                                                                                                                                   )
;                                                                                                                                                 )
;                                                                                                                                               .
;                                                                                                                                                 MiniParse.Spec.Base.parse
;                                                                                                                                                   (
;                                                                                                                                                     MiniParse.Spec.Combinators.nondep_then
;                                                                                                                                                       p1
;                                                                                                                                                       p2
; 
;                                                                                                                                                   )
;                                                                                                                                                   (
;                                                                                                                                                     MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                                                                                                                                                       p1
;                                                                                                                                                       s1
;                                                                                                                                                       p2
;                                                                                                                                                       s2
;                                                                                                                                                       x
; 
;                                                                                                                                                   )
;                                                                                                                                                  ==
;                                                                                                                                                 any_result ==>
;                                                                                                                                                 (
;                                                                                                                                                   forall
;                                                                                                                                                     (any_result:
;                                                                                                                                                     Prims.nat)
;                                                                                                                                                   .
;                                                                                                                                                     FStar.Seq.Base.length
;                                                                                                                                                       (
;                                                                                                                                                         MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                                                                                                                                                           p1
;                                                                                                                                                           s1
;                                                                                                                                                           p2
;                                                                                                                                                           s2
;                                                                                                                                                           x
; 
;                                                                                                                                                       )
;                                                                                                                                                      ==
;                                                                                                                                                     any_result ==>
;                                                                                                                                                     FStar.Seq.Base.length
;                                                                                                                                                       (
;                                                                                                                                                         MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                                                                                                                                                           p1
;                                                                                                                                                           s1
;                                                                                                                                                           p2
;                                                                                                                                                           s2
;                                                                                                                                                           x
; 
;                                                                                                                                                       )
;                                                                                                                                                      <=
;                                                                                                                                                     FStar.Seq.Base.length
;                                                                                                                                                       (
;                                                                                                                                                         MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                                                                                                                                                           p1
;                                                                                                                                                           s1
;                                                                                                                                                           p2
;                                                                                                                                                           s2
;                                                                                                                                                           x
; 
;                                                                                                                                                       )
;                                                                                                                                                      /\
;                                                                                                                                                     (
;                                                                                                                                                       forall
;                                                                                                                                                         (return_val:
;                                                                                                                                                         MiniParse.Spec.Base.consumed_length
;                                                                                                                                                           (
;                                                                                                                                                             MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                                                                                                                                                               p1
;                                                                                                                                                               s1
;                                                                                                                                                               p2
;                                                                                                                                                               s2
;                                                                                                                                                               x
; 
;                                                                                                                                                           )
;                                                                                                                                                         )
;                                                                                                                                                       .
;                                                                                                                                                         return_val ==
;                                                                                                                                                         FStar.Seq.Base.length
;                                                                                                                                                           (
;                                                                                                                                                             MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                                                                                                                                                               p1
;                                                                                                                                                               s1
;                                                                                                                                                               p2
;                                                                                                                                                               s2
;                                                                                                                                                               x
; 
;                                                                                                                                                           )
;                                                                                                                                                          ==>
;                                                                                                                                                         FStar.Seq.Base.length
;                                                                                                                                                           (
;                                                                                                                                                             MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                                                                                                                                                               p1
;                                                                                                                                                               s1
;                                                                                                                                                               p2
;                                                                                                                                                               s2
;                                                                                                                                                               x
; 
;                                                                                                                                                           )
;                                                                                                                                                          ==
;                                                                                                                                                         return_val ==>
;                                                                                                                                                         (
;                                                                                                                                                           forall
;                                                                                                                                                             (any_result:
;                                                                                                                                                             (t1 &
;                                                                                                                                                             t2) &
;                                                                                                                                                             MiniParse.Spec.Base.consumed_length
;                                                                                                                                                               (
;                                                                                                                                                                 MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                                                                                                                                                                   p1
;                                                                                                                                                                   s1
;                                                                                                                                                                   p2
;                                                                                                                                                                   s2
;                                                                                                                                                                   x
; 
;                                                                                                                                                               )
;                                                                                                                                                             )
;                                                                                                                                                           .
;                                                                                                                                                             (x,
;                                                                                                                                                             FStar.Seq.Base.length
;                                                                                                                                                               (
;                                                                                                                                                                 MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                                                                                                                                                                   p1
;                                                                                                                                                                   s1
;                                                                                                                                                                   p2
;                                                                                                                                                                   s2
;                                                                                                                                                                   x
; 
;                                                                                                                                                               )
;                                                                                                                                                             ) ==
;                                                                                                                                                             any_result ==>
;                                                                                                                                                             (
;                                                                                                                                                               forall
;                                                                                                                                                                 (any_result:
;                                                                                                                                                                 FStar.Pervasives.Native.option
;                                                                                                                                                                   (
;                                                                                                                                                                     (t1 &
;                                                                                                                                                                     t2) &
;                                                                                                                                                                     MiniParse.Spec.Base.consumed_length
;                                                                                                                                                                       (
;                                                                                                                                                                         MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                                                                                                                                                                           p1
;                                                                                                                                                                           s1
;                                                                                                                                                                           p2
;                                                                                                                                                                           s2
;                                                                                                                                                                           x
; 
;                                                                                                                                                                       )
; 
;                                                                                                                                                                   )
;                                                                                                                                                                 )
;                                                                                                                                                               .
;                                                                                                                                                                 FStar.Pervasives.Native.Some
;                                                                                                                                                                 (x,
;                                                                                                                                                                 FStar.Seq.Base.length
;                                                                                                                                                                   (
;                                                                                                                                                                     MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                                                                                                                                                                       p1
;                                                                                                                                                                       s1
;                                                                                                                                                                       p2
;                                                                                                                                                                       s2
;                                                                                                                                                                       x
; 
;                                                                                                                                                                   )
;                                                                                                                                                                 ) ==
;                                                                                                                                                                 any_result ==>
;                                                                                                                                                                 (
;                                                                                                                                                                   forall
;                                                                                                                                                                     (any_result:
;                                                                                                                                                                     Prims.logical)
;                                                                                                                                                                   .
;                                                                                                                                                                     MiniParse.Spec.Base.parse
;                                                                                                                                                                       (
;                                                                                                                                                                         MiniParse.Spec.Combinators.nondep_then
;                                                                                                                                                                           p1
;                                                                                                                                                                           p2
; 
;                                                                                                                                                                       )
;                                                                                                                                                                       (
;                                                                                                                                                                         MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                                                                                                                                                                           p1
;                                                                                                                                                                           s1
;                                                                                                                                                                           p2
;                                                                                                                                                                           s2
;                                                                                                                                                                           x
; 
;                                                                                                                                                                       )
;                                                                                                                                                                      ==
;                                                                                                                                                                     FStar.Pervasives.Native.Some
;                                                                                                                                                                     (x,
;                                                                                                                                                                     FStar.Seq.Base.length
;                                                                                                                                                                       (
;                                                                                                                                                                         MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                                                                                                                                                                           p1
;                                                                                                                                                                           s1
;                                                                                                                                                                           p2
;                                                                                                                                                                           s2
;                                                                                                                                                                           x
; 
;                                                                                                                                                                       )
;                                                                                                                                                                     ) ==
;                                                                                                                                                                     any_result ==>
;                                                                                                                                                                     MiniParse.Spec.Base.parse
;                                                                                                                                                                       (
;                                                                                                                                                                         MiniParse.Spec.Combinators.nondep_then
;                                                                                                                                                                           p1
;                                                                                                                                                                           p2
; 
;                                                                                                                                                                       )
;                                                                                                                                                                       (
;                                                                                                                                                                         MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                                                                                                                                                                           p1
;                                                                                                                                                                           s1
;                                                                                                                                                                           p2
;                                                                                                                                                                           s2
;                                                                                                                                                                           x
; 
;                                                                                                                                                                       )
;                                                                                                                                                                      ==
;                                                                                                                                                                     FStar.Pervasives.Native.Some
;                                                                                                                                                                     (x,
;                                                                                                                                                                     FStar.Seq.Base.length
;                                                                                                                                                                       (
;                                                                                                                                                                         MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                                                                                                                                                                           p1
;                                                                                                                                                                           s1
;                                                                                                                                                                           p2
;                                                                                                                                                                           s2
;                                                                                                                                                                           x
; 
;                                                                                                                                                                       )
;                                                                                                                                                                     ) /\
;                                                                                                                                                                     (
;                                                                                                                                                                       forall
;                                                                                                                                                                         (pure_result:
;                                                                                                                                                                         Prims.unit)
;                                                                                                                                                                       .
;                                                                                                                                                                         MiniParse.Spec.Base.parse
;                                                                                                                                                                           (
;                                                                                                                                                                             MiniParse.Spec.Combinators.nondep_then
;                                                                                                                                                                               p1
;                                                                                                                                                                               p2
; 
;                                                                                                                                                                           )
;                                                                                                                                                                           (
;                                                                                                                                                                             MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                                                                                                                                                                               p1
;                                                                                                                                                                               s1
;                                                                                                                                                                               p2
;                                                                                                                                                                               s2
;                                                                                                                                                                               x
; 
;                                                                                                                                                                           )
;                                                                                                                                                                          ==
;                                                                                                                                                                         FStar.Pervasives.Native.Some
;                                                                                                                                                                         (x,
;                                                                                                                                                                         FStar.Seq.Base.length
;                                                                                                                                                                           (
;                                                                                                                                                                             MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                                                                                                                                                                               p1
;                                                                                                                                                                               s1
;                                                                                                                                                                               p2
;                                                                                                                                                                               s2
;                                                                                                                                                                               x
; 
;                                                                                                                                                                           )
;                                                                                                                                                                         ) ==>
;                                                                                                                                                                         (
;                                                                                                                                                                           forall
;                                                                                                                                                                             (any_result:
;                                                                                                                                                                             Prims.unit)
;                                                                                                                                                                           .
;                                                                                                                                                                             p
;                                                                                                                                                                               any_result
; 
;                                                                                                                                                                         )
;                                                                                                                                                                     )
;                                                                                                                                                                 )
;                                                                                                                                                             )
;                                                                                                                                                         )
;                                                                                                                                                     )
;                                                                                                                                                 )
;                                                                                                                                             )
;                                                                                                                                         )
;                                                                                                                                     )
;                                                                                                                                 )
;                                                                                                                             )
;                                                                                                                         )
;                                                                                                                     )
;                                                                                                                 )
;                                                                                                             )
;                                                                                                         )
;                                                                                                     )
;                                                                                                 ))))
;                                                                                 )))))))))))))))))))) /\
;     (forall (any_result:
;         (x: t1 & t2
;             -> FStar.Pervasives.Lemma
;               (ensures
;                 MiniParse.Spec.Base.parse (MiniParse.Spec.Combinators.nondep_then p1 p2)
;                   (MiniParse.Spec.Combinators.bare_serialize_nondep_then p1 s1 p2 s2 x) ==
;                 FStar.Pervasives.Native.Some
;                 (x,
;                 FStar.Seq.Base.length (MiniParse.Spec.Combinators.bare_serialize_nondep_then p1
;                       s1
;                       p2
;                       s2
;                       x))))).
;         (forall (x: t1 & t2).
;             (*  - Could not prove post-condition
; *)
;             forall (any_result:
;               FStar.Pervasives.Native.option ((t1 & t2) &
;                   MiniParse.Spec.Base.consumed_length (MiniParse.Spec.Combinators.bare_serialize_nondep_then
;                         p1
;                         s1
;                         p2
;                         s2
;                         x))).
;               MiniParse.Spec.Base.parse (MiniParse.Spec.Combinators.nondep_then p1 p2)
;                 (MiniParse.Spec.Combinators.bare_serialize_nondep_then p1 s1 p2 s2 x) ==
;               any_result ==>
;               (forall (any_result: Prims.nat).
;                   FStar.Seq.Base.length (MiniParse.Spec.Combinators.bare_serialize_nondep_then p1
;                         s1
;                         p2
;                         s2
;                         x) ==
;                   any_result ==>
;                   FStar.Seq.Base.length (MiniParse.Spec.Combinators.bare_serialize_nondep_then p1
;                         s1
;                         p2
;                         s2
;                         x) <=
;                   FStar.Seq.Base.length (MiniParse.Spec.Combinators.bare_serialize_nondep_then p1
;                         s1
;                         p2
;                         s2
;                         x))) /\
;         (forall (any_result: (_: t1 & t2 -> Prims.GTot Type0)).
;             (fun x ->
;                 MiniParse.Spec.Base.parse (MiniParse.Spec.Combinators.nondep_then p1 p2)
;                   (MiniParse.Spec.Combinators.bare_serialize_nondep_then p1 s1 p2 s2 x) ==
;                 FStar.Pervasives.Native.Some
;                 (x,
;                 FStar.Seq.Base.length (MiniParse.Spec.Combinators.bare_serialize_nondep_then p1
;                       s1
;                       p2
;                       s2
;                       x))) ==
;             any_result ==>
;             (forall (pure_result: Prims.unit).
;                 (forall (x: t1 & t2).
;                     MiniParse.Spec.Base.parse (MiniParse.Spec.Combinators.nondep_then p1 p2)
;                       (MiniParse.Spec.Combinators.bare_serialize_nondep_then p1 s1 p2 s2 x) ==
;                     FStar.Pervasives.Native.Some
;                     (x,
;                     FStar.Seq.Base.length (MiniParse.Spec.Combinators.bare_serialize_nondep_then p1
;                           s1
;                           p2
;                           s2
;                           x))) ==>
;                 p pure_result)))


; Context: While encoding a query
; While typechecking the top-level declaration `let bare_serialize_nondep_then_correct`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.parser_spec @x0))
(HasType @x2
(MiniParse.Spec.Base.serializer_spec @x0
@x1))
(HasType @x3
Tm_type)
(HasType @x4
(MiniParse.Spec.Base.parser_spec @x3))
(HasType @x5
(MiniParse.Spec.Base.serializer_spec @x3
@x4)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(516,1-545,28)
(forall ((@x7 Term))
 (! (implies (and (or label_1
(HasType @x7
Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(515,11-515,92); use=MiniParse.Spec.Combinators.fst(516,1-545,28)
(or label_2

;; def=MiniParse.Spec.Combinators.fst(515,11-515,92); use=MiniParse.Spec.Combinators.fst(516,1-545,28)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(515,11-515,92); use=MiniParse.Spec.Combinators.fst(516,1-545,28)
(MiniParse.Spec.Base.serializer_correct (FStar.Pervasives.Native.tuple2 @x0
@x3)
(MiniParse.Spec.Combinators.nondep_then @x0
@x1
@x3
@x4)
(MiniParse.Spec.Combinators.bare_serialize_nondep_then @x0
@x1
@x2
@x3
@x4
@x5))
)
)
)

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(516,1-545,28)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(516,1-545,28)
(ApplyTT @x6
@x7)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(516,1-545,28)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(516,1-545,28)
(ApplyTT @x6
@x7)
)
)
:qid @query.2))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(516,1-545,28)
(and 
;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(516,1-545,28)
(forall ((@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x7
(FStar.Pervasives.Native.tuple2 @x0
@x3))
(HasType @x8
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(518,10-518,147)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 (FStar.Pervasives.Native.tuple2 @x0
@x3)
(MiniParse.Spec.Base.consumed_length (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7)))))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(518,10-518,147)
(= (MiniParse.Spec.Base.parse (FStar.Pervasives.Native.tuple2 @x0
@x3)
(MiniParse.Spec.Combinators.nondep_then @x0
@x1
@x3
@x4)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))
@x9)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(518,10-518,147)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.nat)

;; def=MiniParse.Spec.Base.fst(254,20-254,41); use=MiniParse.Spec.Combinators.fst(518,83-518,146)
(= (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))
@x10)
)

;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(518,92-518,145)
(or label_3

;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(518,92-518,145)
(<= (BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7)))
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))))
)
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))


;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(516,1-545,28)
(forall ((@x7 Term))
 (! (implies (HasType @x7
(FStar.Pervasives.Native.tuple2 @x0
@x3))

;; def=Prims.fst(406,51-406,91); use=MiniParse.Spec.Combinators.fst(516,1-545,28)
(and 
;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(forall ((@x8 Term))
 (! (implies (HasType @x8
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 (FStar.Pervasives.Native.tuple2 @x0
@x3)
(MiniParse.Spec.Base.consumed_length (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7)))))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(= (MiniParse.Spec.Base.parse (FStar.Pervasives.Native.tuple2 @x0
@x3)
(MiniParse.Spec.Combinators.nondep_then @x0
@x1
@x3
@x4)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))
@x9)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.nat)

;; def=MiniParse.Spec.Base.fst(254,20-254,41); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(= (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))
@x10)
)

;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(518,92-518,145)
(or label_4

;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(<= (BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7)))
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))))
)
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))


;; def=Prims.fst(406,51-406,91); use=MiniParse.Spec.Combinators.fst(516,1-545,28)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(forall ((@x9 Term))
 (! (implies (and (or label_5
(HasType @x9
Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(518,10-518,147); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(or label_6

;; def=MiniParse.Spec.Combinators.fst(518,10-518,147); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(= (MiniParse.Spec.Base.parse (FStar.Pervasives.Native.tuple2 @x0
@x3)
(MiniParse.Spec.Combinators.nondep_then @x0
@x1
@x3
@x4)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 (FStar.Pervasives.Native.tuple2 @x0
@x3)
(MiniParse.Spec.Base.consumed_length (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7)))
(FStar.Pervasives.Native.Mktuple2 (FStar.Pervasives.Native.tuple2 @x0
@x3)
(MiniParse.Spec.Base.consumed_length (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))
@x7
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7)))))
)
)

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(ApplyTT @x8
@x9)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(ApplyTT @x8
@x9)
)
)
:qid @query.11))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7)))))

;; def=MiniParse.Spec.Combinators.fst(519,8-519,65); use=MiniParse.Spec.Combinators.fst(519,8-519,65)
(= (MiniParse.Spec.Base.parse @x0
@x1
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))
@x9)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length (MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))))))

;; def=MiniParse.Spec.Combinators.fst(520,8-520,44); use=MiniParse.Spec.Combinators.fst(520,8-520,44)
(= (MiniParse.Spec.Base.parse @x0
@x1
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7)))
@x10)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(521,4-521,10)
(and 
;; def=MiniParse.Spec.Combinators.fst(521,11-521,21); use=MiniParse.Spec.Combinators.fst(521,4-521,10)
(or label_7

;; def=MiniParse.Spec.Combinators.fst(521,11-521,21); use=MiniParse.Spec.Combinators.fst(521,4-521,10)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length (MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))))
(MiniParse.Spec.Base.parse @x0
@x1
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7)))))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(521,4-521,10)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(521,11-521,21); use=MiniParse.Spec.Combinators.fst(521,4-521,10)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length (MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))))
(MiniParse.Spec.Base.parse @x0
@x1
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7)))))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(522,4-522,10)
(and 
;; def=MiniParse.Spec.Combinators.fst(522,11-522,123); use=MiniParse.Spec.Combinators.fst(522,4-522,10)
(or label_8

;; def=MiniParse.Spec.Combinators.fst(522,11-522,123); use=MiniParse.Spec.Combinators.fst(522,4-522,10)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(522,11-522,123); use=MiniParse.Spec.Combinators.fst(522,4-522,10)
(MiniParse.Spec.Base.no_lookahead_on @x0
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
@x1)
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))
)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(522,4-522,10)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(522,11-522,123); use=MiniParse.Spec.Combinators.fst(522,4-522,10)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(522,11-522,123); use=MiniParse.Spec.Combinators.fst(522,4-522,10)
(MiniParse.Spec.Base.no_lookahead_on @x0
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
@x1)
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length (MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))))))

;; def=MiniParse.Spec.Combinators.fst(523,9-523,58); use=MiniParse.Spec.Combinators.fst(523,9-523,58)
(= (MiniParse.Spec.Base.parse @x0
@x1
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7)))
@x13)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(523,9-523,23); use=MiniParse.Spec.Combinators.fst(523,9-523,23)
(not 
;; def=MiniParse.Spec.Combinators.fst(523,9-523,23); use=MiniParse.Spec.Combinators.fst(523,9-523,23)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length (MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))))
(MiniParse.Spec.Base.parse @x0
@x1
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7)))))
)

label_9)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(forall ((@x14 Term))
 (! (implies (HasType @x14
@x0)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
(MiniParse.Spec.Base.consumed_length (MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))))

;; def=MiniParse.Spec.Combinators.fst(523,9-523,23); use=MiniParse.Spec.Combinators.fst(523,9-523,23)
(= (MiniParse.Spec.Base.parse @x0
@x1
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7)))
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length (MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))))
(FStar.Pervasives.Native.Mktuple2 @x0
(MiniParse.Spec.Base.consumed_length (MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7)))
@x14
@x15)))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(524,4-524,10)
(and 
;; def=MiniParse.Spec.Combinators.fst(524,11-524,54); use=MiniParse.Spec.Combinators.fst(524,4-524,10)
(or label_10

;; def=MiniParse.Spec.Combinators.fst(524,11-524,54); use=MiniParse.Spec.Combinators.fst(524,4-524,10)
(= @x15
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(524,4-524,10)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(524,11-524,54); use=MiniParse.Spec.Combinators.fst(524,4-524,10)
(= @x15
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(525,4-525,10)
(and 
;; def=MiniParse.Spec.Combinators.fst(525,11-525,74); use=MiniParse.Spec.Combinators.fst(525,4-525,10)
(or label_11

;; def=MiniParse.Spec.Combinators.fst(525,11-525,74); use=MiniParse.Spec.Combinators.fst(525,4-525,10)
(<= (BoxInt_proj_0 @x15)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(525,4-525,10)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(525,11-525,74); use=MiniParse.Spec.Combinators.fst(525,4-525,10)
(<= (BoxInt_proj_0 @x15)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=FStar.Seq.Base.fsti(64,23-64,24); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(= (MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))
@x18)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(and (implies 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(526,47-526,51)
(<= (BoxInt_proj_0 @x15)
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7)))))


;; def=FStar.Seq.Base.fsti(64,49-64,72); use=MiniParse.Spec.Combinators.fst(526,47-526,51)
(and 
;; def=MiniParse.Spec.Combinators.fst(523,18-523,22); use=MiniParse.Spec.Combinators.fst(526,47-526,51)
(or label_12
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x15)))


;; def=MiniParse.Spec.Combinators.fst(523,18-523,22); use=MiniParse.Spec.Combinators.fst(526,47-526,51)
(or label_13
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x15
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))))))
)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(forall ((@x19 Term))
 (! (implies (and (HasType @x19
(MiniParse.Spec.Base.consumed_length (MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))))

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(= @x15
@x19)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(forall ((@x20 Term))
 (! (implies (and (HasType @x20
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))
(BoxInt 0)
@x15)
@x20)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(forall ((@x21 Term))
 (! (implies (and (HasType @x21
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(= (Prims.eq2 (FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value))
(FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))
(BoxInt 0)
@x15)
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7)))
@x21)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(526,4-526,10)
(and 
;; def=MiniParse.Spec.Combinators.fst(526,11-526,76); use=MiniParse.Spec.Combinators.fst(526,4-526,10)
(or label_14

;; def=MiniParse.Spec.Combinators.fst(526,11-526,76); use=MiniParse.Spec.Combinators.fst(526,4-526,10)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))
(BoxInt 0)
@x15)
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7)))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(526,4-526,10)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(526,11-526,76); use=MiniParse.Spec.Combinators.fst(526,4-526,10)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))
(BoxInt 0)
@x15)
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7)))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(forall ((@x23 Term))
 (! (implies (and (HasType @x23
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=MiniParse.Spec.Combinators.fst(495,3-527,45); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(= (MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))
@x23)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(forall ((@x24 Term))
 (! (implies (and (HasType @x24
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=MiniParse.Spec.Combinators.fst(495,6-527,68); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(= (MiniParse.Spec.Base.serialize @x3
@x4
@x5
(FStar.Pervasives.Native.snd @x0
@x3
@x7))
@x24)
)

;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(527,4-527,22)
(forall ((@x25 Term))
 (! (implies (and (HasType @x25
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(497,2-497,56); use=MiniParse.Spec.Combinators.fst(527,4-527,22)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.append (MiniParse.Spec.Base.byte Dummy_value)
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))
(MiniParse.Spec.Base.serialize @x3
@x4
@x5
(FStar.Pervasives.Native.snd @x0
@x3
@x7)))
(BoxInt 0)
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))))
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7)))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(528,4-528,10)
(and 
;; def=MiniParse.Spec.Combinators.fst(528,11-528,131); use=MiniParse.Spec.Combinators.fst(528,4-528,10)
(or label_15

;; def=MiniParse.Spec.Combinators.fst(528,11-528,131); use=MiniParse.Spec.Combinators.fst(528,4-528,10)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(528,11-528,131); use=MiniParse.Spec.Combinators.fst(528,4-528,10)
(MiniParse.Spec.Base.no_lookahead_on_precond @x0
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
@x1)
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))
)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(528,4-528,10)
(forall ((@x26 Term))
 (! (implies (and (HasType @x26
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(528,11-528,131); use=MiniParse.Spec.Combinators.fst(528,4-528,10)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(528,11-528,131); use=MiniParse.Spec.Combinators.fst(528,4-528,10)
(MiniParse.Spec.Base.no_lookahead_on_precond @x0
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
@x1)
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))
)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(529,4-529,10)
(and 
;; def=MiniParse.Spec.Combinators.fst(529,11-529,132); use=MiniParse.Spec.Combinators.fst(529,4-529,10)
(or label_16

;; def=MiniParse.Spec.Combinators.fst(529,11-529,132); use=MiniParse.Spec.Combinators.fst(529,4-529,10)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(529,11-529,132); use=MiniParse.Spec.Combinators.fst(529,4-529,10)
(MiniParse.Spec.Base.no_lookahead_on_postcond @x0
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
@x1)
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))
)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(529,4-529,10)
(forall ((@x27 Term))
 (! (implies (and (HasType @x27
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(529,11-529,132); use=MiniParse.Spec.Combinators.fst(529,4-529,10)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(529,11-529,132); use=MiniParse.Spec.Combinators.fst(529,4-529,10)
(MiniParse.Spec.Base.no_lookahead_on_postcond @x0
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
@x1)
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))
)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(530,4-530,10)
(and 
;; def=MiniParse.Spec.Combinators.fst(530,11-530,22); use=MiniParse.Spec.Combinators.fst(530,4-530,10)
(or label_17

;; def=MiniParse.Spec.Combinators.fst(530,11-530,22); use=MiniParse.Spec.Combinators.fst(530,4-530,10)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7)))
(MiniParse.Spec.Base.parse @x0
@x1
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(530,4-530,10)
(forall ((@x28 Term))
 (! (implies (and (HasType @x28
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(530,11-530,22); use=MiniParse.Spec.Combinators.fst(530,4-530,10)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7)))
(MiniParse.Spec.Base.parse @x0
@x1
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(531,4-531,10)
(and 
;; def=MiniParse.Spec.Combinators.fst(531,11-531,125); use=MiniParse.Spec.Combinators.fst(531,4-531,10)
(or label_18

;; def=MiniParse.Spec.Combinators.fst(531,11-531,125); use=MiniParse.Spec.Combinators.fst(531,4-531,10)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(531,11-531,125); use=MiniParse.Spec.Combinators.fst(531,4-531,10)
(MiniParse.Spec.Base.injective_precond @x0
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
@x1)
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))
)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(531,4-531,10)
(forall ((@x29 Term))
 (! (implies (and (HasType @x29
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(531,11-531,125); use=MiniParse.Spec.Combinators.fst(531,4-531,10)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(531,11-531,125); use=MiniParse.Spec.Combinators.fst(531,4-531,10)
(MiniParse.Spec.Base.injective_precond @x0
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
@x1)
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))
)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(532,4-532,10)
(and 
;; def=MiniParse.Spec.Combinators.fst(532,11-532,126); use=MiniParse.Spec.Combinators.fst(532,4-532,10)
(or label_19

;; def=MiniParse.Spec.Combinators.fst(532,11-532,126); use=MiniParse.Spec.Combinators.fst(532,4-532,10)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(532,11-532,126); use=MiniParse.Spec.Combinators.fst(532,4-532,10)
(MiniParse.Spec.Base.injective_postcond @x0
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
@x1)
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))
)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(532,4-532,10)
(forall ((@x30 Term))
 (! (implies (and (HasType @x30
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(532,11-532,126); use=MiniParse.Spec.Combinators.fst(532,4-532,10)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(532,11-532,126); use=MiniParse.Spec.Combinators.fst(532,4-532,10)
(MiniParse.Spec.Base.injective_postcond @x0
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
@x1)
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))
)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(533,9-533,24); use=MiniParse.Spec.Combinators.fst(533,9-533,24)
(not 
;; def=MiniParse.Spec.Combinators.fst(533,9-533,24); use=MiniParse.Spec.Combinators.fst(533,9-533,24)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length (MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))))
(MiniParse.Spec.Base.parse @x0
@x1
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7)))))
)

label_20)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(forall ((@x31 Term))
 (! (implies (HasType @x31
@x0)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(forall ((@x32 Term))
 (! (implies (and (HasType @x32
(MiniParse.Spec.Base.consumed_length (MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))))

;; def=MiniParse.Spec.Combinators.fst(533,9-533,24); use=MiniParse.Spec.Combinators.fst(533,9-533,24)
(= (MiniParse.Spec.Base.parse @x0
@x1
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7)))
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length (MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))))
(FStar.Pervasives.Native.Mktuple2 @x0
(MiniParse.Spec.Base.consumed_length (MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7)))
@x31
@x32)))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(and (implies 
;; def=MiniParse.Spec.Combinators.fst(534,9-534,26); use=MiniParse.Spec.Combinators.fst(534,9-534,26)
(not 
;; def=MiniParse.Spec.Combinators.fst(534,9-534,26); use=MiniParse.Spec.Combinators.fst(534,9-534,26)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7)))
(MiniParse.Spec.Base.parse @x0
@x1
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))))
)

label_21)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(forall ((@x33 Term))
 (! (implies (HasType @x33
@x0)

;; def=Prims.fst(413,99-413,120); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(forall ((@x34 Term))
 (! (implies (and (HasType @x34
(MiniParse.Spec.Base.consumed_length (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7)))

;; def=MiniParse.Spec.Combinators.fst(534,9-534,26); use=MiniParse.Spec.Combinators.fst(534,9-534,26)
(= (MiniParse.Spec.Base.parse @x0
@x1
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7)))
(FStar.Pervasives.Native.Mktuple2 @x0
(MiniParse.Spec.Base.consumed_length (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))
@x33
@x34)))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(535,4-535,10)
(and 
;; def=MiniParse.Spec.Combinators.fst(535,11-535,22); use=MiniParse.Spec.Combinators.fst(535,4-535,10)
(or label_22

;; def=MiniParse.Spec.Combinators.fst(535,11-535,22); use=MiniParse.Spec.Combinators.fst(535,4-535,10)
(= @x31
@x33)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(535,4-535,10)
(forall ((@x35 Term))
 (! (implies (and (HasType @x35
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(535,11-535,22); use=MiniParse.Spec.Combinators.fst(535,4-535,10)
(= @x31
@x33)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(536,4-536,10)
(and 
;; def=MiniParse.Spec.Combinators.fst(536,11-536,44); use=MiniParse.Spec.Combinators.fst(536,4-536,10)
(or label_23

;; def=MiniParse.Spec.Combinators.fst(536,11-536,44); use=MiniParse.Spec.Combinators.fst(536,4-536,10)
(= @x32
@x34)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(536,4-536,10)
(forall ((@x36 Term))
 (! (implies (and (HasType @x36
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(536,11-536,44); use=MiniParse.Spec.Combinators.fst(536,4-536,10)
(= @x32
@x34)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(537,4-537,10)
(and 
;; def=MiniParse.Spec.Combinators.fst(537,11-537,24); use=MiniParse.Spec.Combinators.fst(537,4-537,10)
(or label_24

;; def=MiniParse.Spec.Combinators.fst(537,11-537,24); use=MiniParse.Spec.Combinators.fst(537,4-537,10)
(= @x31
(FStar.Pervasives.Native.fst @x0
@x3
@x7))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(537,4-537,10)
(forall ((@x37 Term))
 (! (implies (and (HasType @x37
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(537,11-537,24); use=MiniParse.Spec.Combinators.fst(537,4-537,10)
(= @x31
(FStar.Pervasives.Native.fst @x0
@x3
@x7))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(538,4-538,10)
(and 
;; def=MiniParse.Spec.Combinators.fst(538,11-538,54); use=MiniParse.Spec.Combinators.fst(538,4-538,10)
(or label_25

;; def=MiniParse.Spec.Combinators.fst(538,11-538,54); use=MiniParse.Spec.Combinators.fst(538,4-538,10)
(= @x32
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(538,4-538,10)
(forall ((@x38 Term))
 (! (implies (and (HasType @x38
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(538,11-538,54); use=MiniParse.Spec.Combinators.fst(538,4-538,10)
(= @x32
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(539,4-539,10)
(and 
;; def=MiniParse.Spec.Combinators.fst(539,11-539,113); use=MiniParse.Spec.Combinators.fst(539,4-539,10)
(or label_26

;; def=MiniParse.Spec.Combinators.fst(539,11-539,113); use=MiniParse.Spec.Combinators.fst(539,4-539,10)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7)
(FStar.Seq.Base.append (MiniParse.Spec.Base.byte Dummy_value)
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))
(MiniParse.Spec.Base.serialize @x3
@x4
@x5
(FStar.Pervasives.Native.snd @x0
@x3
@x7))))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(539,4-539,10)
(forall ((@x39 Term))
 (! (implies (and (HasType @x39
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(539,11-539,113); use=MiniParse.Spec.Combinators.fst(539,4-539,10)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7)
(FStar.Seq.Base.append (MiniParse.Spec.Base.byte Dummy_value)
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))
(MiniParse.Spec.Base.serialize @x3
@x4
@x5
(FStar.Pervasives.Native.snd @x0
@x3
@x7))))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(forall ((@x40 Term))
 (! (implies (and (HasType @x40
MiniParse.Spec.Base.bytes)

;; def=MiniParse.Spec.Combinators.fst(540,8-540,52); use=MiniParse.Spec.Combinators.fst(540,8-540,52)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7)
@x40)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(forall ((@x41 Term))
 (! (implies (and (HasType @x41
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=MiniParse.Spec.Combinators.fst(502,3-541,45); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(= (MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))
@x41)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(forall ((@x42 Term))
 (! (implies (and (HasType @x42
(FStar.Seq.Base.seq (MiniParse.Spec.Base.byte Dummy_value)))

;; def=MiniParse.Spec.Combinators.fst(502,6-541,68); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(= (MiniParse.Spec.Base.serialize @x3
@x4
@x5
(FStar.Pervasives.Native.snd @x0
@x3
@x7))
@x42)
)

;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(541,4-541,22)
(forall ((@x43 Term))
 (! (implies (and (HasType @x43
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(504,2-504,86); use=MiniParse.Spec.Combinators.fst(541,4-541,22)
(= (FStar.Seq.Base.slice (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.append (MiniParse.Spec.Base.byte Dummy_value)
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))
(MiniParse.Spec.Base.serialize @x3
@x4
@x5
(FStar.Pervasives.Native.snd @x0
@x3
@x7)))
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7)))
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(FStar.Seq.Base.append (MiniParse.Spec.Base.byte Dummy_value)
(MiniParse.Spec.Base.serialize @x0
@x1
@x2
(FStar.Pervasives.Native.fst @x0
@x3
@x7))
(MiniParse.Spec.Base.serialize @x3
@x4
@x5
(FStar.Pervasives.Native.snd @x0
@x3
@x7)))))
(MiniParse.Spec.Base.serialize @x3
@x4
@x5
(FStar.Pervasives.Native.snd @x0
@x3
@x7)))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(forall ((@x44 Term))
 (! (implies (and (HasType @x44
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 (FStar.Pervasives.Native.tuple2 @x0
@x3)
(MiniParse.Spec.Base.consumed_length (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7)))))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(= (MiniParse.Spec.Base.parse (FStar.Pervasives.Native.tuple2 @x0
@x3)
(MiniParse.Spec.Combinators.nondep_then @x0
@x1
@x3
@x4)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))
@x44)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(forall ((@x45 Term))
 (! (implies (and (HasType @x45
Prims.nat)

;; def=MiniParse.Spec.Base.fst(254,20-254,41); use=MiniParse.Spec.Combinators.fst(542,84-542,147)
(= (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))
@x45)
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(and 
;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(542,93-542,146)
(or label_27

;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(542,93-542,146)
(<= (BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7)))
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))))
)


;; def=Prims.fst(356,2-356,58); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(forall ((@x46 Term))
 (! (implies (and (HasType @x46
(MiniParse.Spec.Base.consumed_length (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7)))

;; def=Prims.fst(356,26-356,41); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(= @x46
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7)))


;; def=FStar.Pervasives.Native.fst(59,43-59,45); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(= (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))
@x46)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(forall ((@x47 Term))
 (! (implies (and (HasType @x47
(FStar.Pervasives.Native.tuple2 (FStar.Pervasives.Native.tuple2 @x0
@x3)
(MiniParse.Spec.Base.consumed_length (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))))

;; def=FStar.Pervasives.Native.fst(33,11-33,12); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(= (FStar.Pervasives.Native.Mktuple2 (FStar.Pervasives.Native.tuple2 @x0
@x3)
(MiniParse.Spec.Base.consumed_length (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))
@x7
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7)))
@x47)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(forall ((@x48 Term))
 (! (implies (and (HasType @x48
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 (FStar.Pervasives.Native.tuple2 @x0
@x3)
(MiniParse.Spec.Base.consumed_length (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7)))))

;; def=Prims.fst(175,42-175,43); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(= (FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 (FStar.Pervasives.Native.tuple2 @x0
@x3)
(MiniParse.Spec.Base.consumed_length (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7)))
(FStar.Pervasives.Native.Mktuple2 (FStar.Pervasives.Native.tuple2 @x0
@x3)
(MiniParse.Spec.Base.consumed_length (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))
@x7
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))))
@x48)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(forall ((@x49 Term))
 (! (implies (and (HasType @x49
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(= (Prims.eq2 (FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 (FStar.Pervasives.Native.tuple2 @x0
@x3)
(MiniParse.Spec.Base.consumed_length (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))))
(MiniParse.Spec.Base.parse (FStar.Pervasives.Native.tuple2 @x0
@x3)
(MiniParse.Spec.Combinators.nondep_then @x0
@x1
@x3
@x4)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 (FStar.Pervasives.Native.tuple2 @x0
@x3)
(MiniParse.Spec.Base.consumed_length (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7)))
(FStar.Pervasives.Native.Mktuple2 (FStar.Pervasives.Native.tuple2 @x0
@x3)
(MiniParse.Spec.Base.consumed_length (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))
@x7
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7)))))
@x49)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(542,4-542,10)
(and 
;; def=MiniParse.Spec.Combinators.fst(542,11-542,148); use=MiniParse.Spec.Combinators.fst(542,4-542,10)
(or label_28

;; def=MiniParse.Spec.Combinators.fst(542,11-542,148); use=MiniParse.Spec.Combinators.fst(542,4-542,10)
(= (MiniParse.Spec.Base.parse (FStar.Pervasives.Native.tuple2 @x0
@x3)
(MiniParse.Spec.Combinators.nondep_then @x0
@x1
@x3
@x4)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 (FStar.Pervasives.Native.tuple2 @x0
@x3)
(MiniParse.Spec.Base.consumed_length (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7)))
(FStar.Pervasives.Native.Mktuple2 (FStar.Pervasives.Native.tuple2 @x0
@x3)
(MiniParse.Spec.Base.consumed_length (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))
@x7
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7)))))
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(542,4-542,10)
(forall ((@x50 Term))
 (! (implies (and (HasType @x50
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(542,11-542,148); use=MiniParse.Spec.Combinators.fst(542,4-542,10)
(= (MiniParse.Spec.Base.parse (FStar.Pervasives.Native.tuple2 @x0
@x3)
(MiniParse.Spec.Combinators.nondep_then @x0
@x1
@x3
@x4)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 (FStar.Pervasives.Native.tuple2 @x0
@x3)
(MiniParse.Spec.Base.consumed_length (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7)))
(FStar.Pervasives.Native.Mktuple2 (FStar.Pervasives.Native.tuple2 @x0
@x3)
(MiniParse.Spec.Base.consumed_length (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7))
@x7
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x7)))))
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(forall ((@x51 Term))
 (! (implies (HasType @x51
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(Valid 
;; def=Prims.fst(451,90-451,102); use=MiniParse.Spec.Combinators.fst(519,3-543,6)
(ApplyTT @x8
@x51)
)
)
 
;;no pats
:qid @query.54))
)
 
;;no pats
:qid @query.53))
)
)
 
;;no pats
:qid @query.52))
)
 
;;no pats
:qid @query.51))
)
 
;;no pats
:qid @query.50))
)
 
;;no pats
:qid @query.49))
)
)
 
;;no pats
:qid @query.48))
)
 
;;no pats
:qid @query.47))
)
 
;;no pats
:qid @query.46))
)
 
;;no pats
:qid @query.45))
)
 
;;no pats
:qid @query.44))
)
 
;;no pats
:qid @query.43))
)
 
;;no pats
:qid @query.42))
)
)
 
;;no pats
:qid @query.41))
)
)
 
;;no pats
:qid @query.40))
)
)
 
;;no pats
:qid @query.39))
)
)
 
;;no pats
:qid @query.38))
)
)
 
;;no pats
:qid @query.37))
)
 
;;no pats
:qid @query.36))
)
)
 
;;no pats
:qid @query.35))
)
 
;;no pats
:qid @query.34))
)
)
 
;;no pats
:qid @query.33))
)
)
 
;;no pats
:qid @query.32))
)
)
 
;;no pats
:qid @query.31))
)
)
 
;;no pats
:qid @query.30))
)
)
 
;;no pats
:qid @query.29))
)
)
 
;;no pats
:qid @query.28))
)
 
;;no pats
:qid @query.27))
)
 
;;no pats
:qid @query.26))
)
 
;;no pats
:qid @query.25))
)
)
 
;;no pats
:qid @query.24))
)
 
;;no pats
:qid @query.23))
)
 
;;no pats
:qid @query.22))
)
)
 
;;no pats
:qid @query.21))
)
 
;;no pats
:qid @query.20))
)
)
 
;;no pats
:qid @query.19))
)
)
 
;;no pats
:qid @query.18))
)
 
;;no pats
:qid @query.17))
)
)
 
;;no pats
:qid @query.16))
)
 
;;no pats
:qid @query.15))
)
)
 
;;no pats
:qid @query.14))
)
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.6))


;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(516,1-545,28)
(forall ((@x7 Term))
 (! (implies (HasType @x7
(Tm_arrow_99e3e7b79d61b475d57f3035080b122a @x5
@x2
@x4
@x1
@x3
@x0))

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.Combinators.fst(516,1-545,28)
(and 
;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(516,1-545,28)
(forall ((@x8 Term))
 (! (implies (HasType @x8
(FStar.Pervasives.Native.tuple2 @x0
@x3))

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(545,25-545,28)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 (FStar.Pervasives.Native.tuple2 @x0
@x3)
(MiniParse.Spec.Base.consumed_length (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x8)))))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(545,25-545,28)
(= (MiniParse.Spec.Base.parse (FStar.Pervasives.Native.tuple2 @x0
@x3)
(MiniParse.Spec.Combinators.nondep_then @x0
@x1
@x3
@x4)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x8))
@x9)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(545,25-545,28)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.nat)

;; def=MiniParse.Spec.Base.fst(254,20-254,41); use=MiniParse.Spec.Combinators.fst(545,25-545,28)
(= (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x8))
@x10)
)

;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(545,25-545,28)
(or label_29

;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(545,25-545,28)
(<= (BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x8)))
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x8))))
)
)
 
;;no pats
:qid @query.58))
)
 
;;no pats
:qid @query.57))
)
 
;;no pats
:qid @query.56))


;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(516,1-545,28)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Tm_arrow_e582d335e47d6840e0aed28d317c4bc1 @x3
@x0))

;; def=FStar.Classical.fsti(240,30-240,31); use=MiniParse.Spec.Combinators.fst(516,1-545,28)
(= (Tm_abs_7cc928bd72935dd5d9bfe8ee2c177f1d @x1
@x2
@x4
@x5
@x3
@x0)
@x8)
)

;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(545,12-545,24)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.unit)

;; def=FStar.Classical.fsti(241,12-241,32); use=MiniParse.Spec.Combinators.fst(545,12-545,24)
(forall ((@x10 Term))
 (! (implies (HasType @x10
(FStar.Pervasives.Native.tuple2 @x0
@x3))

;; def=MiniParse.Spec.Combinators.fst(518,10-518,147); use=MiniParse.Spec.Combinators.fst(545,12-545,24)
(= (MiniParse.Spec.Base.parse (FStar.Pervasives.Native.tuple2 @x0
@x3)
(MiniParse.Spec.Combinators.nondep_then @x0
@x1
@x3
@x4)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x10))
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 (FStar.Pervasives.Native.tuple2 @x0
@x3)
(MiniParse.Spec.Base.consumed_length (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x10)))
(FStar.Pervasives.Native.Mktuple2 (FStar.Pervasives.Native.tuple2 @x0
@x3)
(MiniParse.Spec.Base.consumed_length (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x10))
@x10
(FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x10)))))
)
 
;;no pats
:qid @query.61))
)

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(545,12-545,24)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(545,12-545,24)
(ApplyTT @x6
@x9)
)
)
 
;;no pats
:qid @query.60))
)
 
;;no pats
:qid @query.59))
)
)
 
;;no pats
:qid @query.55))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 8714496)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_29")
(eval label_29)
(echo "label_28")
(eval label_28)
(echo "label_27")
(eval label_27)
(echo "label_26")
(eval label_26)
(echo "label_25")
(eval label_25)
(echo "label_24")
(eval label_24)
(echo "label_23")
(eval label_23)
(echo "label_22")
(eval label_22)
(echo "label_21")
(eval label_21)
(echo "label_20")
(eval label_20)
(echo "label_19")
(eval label_19)
(echo "label_18")
(eval label_18)
(echo "label_17")
(eval label_17)
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.bare_serialize_nondep_then_correct, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, MiniParse.Spec.Base_interpretation_Tm_ghost_arrow_4502d1a2310fff506c14a9e7677ba599, MiniParse.Spec.Combinators_interpretation_Tm_arrow_21c34ab6214876c3f64c3607461881fc, MiniParse.Spec.Combinators_interpretation_Tm_arrow_383de413e051f04d83f8d52608a46263, MiniParse.Spec.Combinators_interpretation_Tm_arrow_6f45af358a0859bbc40786d00743b12c, MiniParse.Spec.Combinators_interpretation_Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5, MiniParse.Spec.Combinators_interpretation_Tm_arrow_fe391d6680769aaad08ee4cff3d82de3, constructor_distinct_FStar.Pervasives.Native.Some, constructor_distinct_Tm_unit, data_elim_FStar.Pervasives.Native.Mktuple2, data_elim_MiniParse.Spec.Base.Parser, data_elim_MiniParse.Spec.Base.Serializer, disc_equation_FStar.Pervasives.Native.Some, equation_FStar.Pervasives.Native.fst, equation_FStar.Pervasives.Native.snd, equation_MiniParse.Spec.Base.bare_serializer, equation_MiniParse.Spec.Base.bparse, equation_MiniParse.Spec.Base.byte, equation_MiniParse.Spec.Base.bytes, equation_MiniParse.Spec.Base.consumed_length, equation_MiniParse.Spec.Base.injective, equation_MiniParse.Spec.Base.injective_postcond, equation_MiniParse.Spec.Base.injective_precond, equation_MiniParse.Spec.Base.no_lookahead, equation_MiniParse.Spec.Base.no_lookahead_on, equation_MiniParse.Spec.Base.no_lookahead_on_postcond, equation_MiniParse.Spec.Base.no_lookahead_on_precond, equation_MiniParse.Spec.Base.parse, equation_MiniParse.Spec.Base.serialize, equation_MiniParse.Spec.Base.serializer_correct, equation_MiniParse.Spec.Combinators.and_then, equation_MiniParse.Spec.Combinators.and_then_bare, equation_MiniParse.Spec.Combinators.bare_serialize_nondep_then, equation_MiniParse.Spec.Combinators.coerce_to_bare_param_parser, equation_MiniParse.Spec.Combinators.nondep_then, equation_MiniParse.Spec.Combinators.parse_ret, equation_Prims.eqtype, equation_Prims.nat, fuel_guarded_inversion_FStar.Pervasives.Native.option, fuel_guarded_inversion_FStar.Pervasives.Native.tuple2, fuel_guarded_inversion_MiniParse.Spec.Base.parser_spec, fuel_guarded_inversion_MiniParse.Spec.Base.serializer_spec, function_token_typing_MiniParse.Spec.Combinators.bare_serialize_nondep_then, function_token_typing_MiniParse.Spec.Combinators.coerce_to_bare_param_parser, int_inversion, interpretation_Tm_abs_24c49183d745861a79c9e705ccd478d5, interpretation_Tm_abs_5a56d64ec9685d0352c27644697b3e56, interpretation_Tm_abs_84ca3be552b2abb245b330ca14b3d71f, interpretation_Tm_abs_9b0fdcdb7bad65cf740850da64bc002a, interpretation_Tm_abs_b1966e89e7cd8f7f0d8af601292dbb6f, kinding_FStar.Pervasives.Native.tuple2@tok, lemma_FStar.Seq.Base.lemma_len_append, lemma_FStar.Seq.Properties.slice_is_empty, lemma_FStar.Seq.Properties.slice_length, primitive_Prims.op_Addition, primitive_Prims.op_LessThanOrEqual, proj_equation_FStar.Pervasives.Native.Mktuple2__1, proj_equation_FStar.Pervasives.Native.Mktuple2__2, proj_equation_MiniParse.Spec.Base.Parser_f, proj_equation_MiniParse.Spec.Base.Serializer_f, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_FStar.Pervasives.Native.Some_a, projection_inverse_FStar.Pervasives.Native.Some_v, projection_inverse_MiniParse.Spec.Base.Parser_f, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_8da27fc70f74cdb01995c74e5b0aab3a, refinement_interpretation_Tm_refine_95482e91a565bbc8d113ac6e95692d97, refinement_interpretation_Tm_refine_b361ba8089a6e963921008d537e799a1, refinement_interpretation_Tm_refine_b913a3f691ca99086652e0a655e72f17, token_correspondence_MiniParse.Spec.Base.__proj__Serializer__item__f, token_correspondence_MiniParse.Spec.Combinators.bare_serialize_nondep_then, token_correspondence_MiniParse.Spec.Combinators.coerce_to_bare_param_parser, typing_FStar.Pervasives.Native.__proj__Mktuple2__item___1, typing_FStar.Pervasives.Native.fst, typing_FStar.Seq.Base.empty, typing_FStar.Seq.Base.length, typing_FStar.UInt8.t, typing_MiniParse.Spec.Base.bparse, typing_MiniParse.Spec.Base.serialize, typing_MiniParse.Spec.Combinators.coerce_to_bare_param_parser, typing_Tm_abs_9b0fdcdb7bad65cf740850da64bc002a, typing_Tm_abs_b1966e89e7cd8f7f0d8af601292dbb6f

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let bare_serialize_nondep_then_correct


; <Start encoding let bare_serialize_nondep_then_correct>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Combinators.bare_serialize_nondep_then_correct (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Combinators.bare_serialize_nondep_then_correct@tok () Term)

; </end encoding let bare_serialize_nondep_then_correct>

(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(555,2-556,53)

(declare-fun label_1 () Bool)

; Encoding query formula : forall (t1: Type)
;   (p1: MiniParse.Spec.Base.parser_spec t1)
;   (s1: MiniParse.Spec.Base.serializer_spec p1)
;   (t2: Type)
;   (p2: MiniParse.Spec.Base.parser_spec t2)
;   (s2: MiniParse.Spec.Base.serializer_spec p2).
;   (*  - Could not prove post-condition
; *)
;   forall (pure_result: Prims.unit).
;     MiniParse.Spec.Base.serializer_correct (MiniParse.Spec.Combinators.nondep_then p1 p2)
;       (MiniParse.Spec.Combinators.bare_serialize_nondep_then p1 s1 p2 s2) ==>
;     Prims.auto_squash (MiniParse.Spec.Base.serializer_correct (MiniParse.Spec.Combinators.nondep_then
;               p1
;               p2)
;           (MiniParse.Spec.Combinators.bare_serialize_nondep_then p1 s1 p2 s2))


; Context: While encoding a query
; While typechecking the top-level declaration `let serialize_nondep_then`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.parser_spec @x0))
(HasType @x2
(MiniParse.Spec.Base.serializer_spec @x0
@x1))
(HasType @x3
Tm_type)
(HasType @x4
(MiniParse.Spec.Base.parser_spec @x3))
(HasType @x5
(MiniParse.Spec.Base.serializer_spec @x3
@x4)))

;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(555,2-555,36)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(515,11-515,92); use=MiniParse.Spec.Combinators.fst(555,2-555,36)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(515,11-515,92); use=MiniParse.Spec.Combinators.fst(555,2-555,36)
(MiniParse.Spec.Base.serializer_correct (FStar.Pervasives.Native.tuple2 @x0
@x3)
(MiniParse.Spec.Combinators.nondep_then @x0
@x1
@x3
@x4)
(MiniParse.Spec.Combinators.bare_serialize_nondep_then @x0
@x1
@x2
@x3
@x4
@x5))
)
)

;; def=MiniParse.Spec.Base.fst(343,41-343,63); use=MiniParse.Spec.Combinators.fst(556,13-556,53)
(or label_1

;; def=MiniParse.Spec.Base.fst(343,41-343,63); use=MiniParse.Spec.Combinators.fst(556,13-556,53)
(Valid 
;; def=MiniParse.Spec.Base.fst(343,41-343,63); use=MiniParse.Spec.Combinators.fst(556,13-556,53)
(MiniParse.Spec.Base.serializer_correct (FStar.Pervasives.Native.tuple2 @x0
@x3)
(MiniParse.Spec.Combinators.nondep_then @x0
@x1
@x3
@x4)
(MiniParse.Spec.Combinators.bare_serialize_nondep_then @x0
@x1
@x2
@x3
@x4
@x5))
)
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 8714496)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.serialize_nondep_then, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let serialize_nondep_then


; <Start encoding let serialize_nondep_then>

(declare-fun MiniParse.Spec.Combinators.serialize_nondep_then (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;s1: MiniParse.Spec.Base.serializer_spec p1 -> s2: MiniParse.Spec.Base.serializer_spec p2   -> MiniParse.Spec.Base.serializer_spec (nondep_then p1 p2)
(declare-fun Tm_arrow_0d481d9eb351bb9b3ab476fbe718c7d9 () Term)
(declare-fun MiniParse.Spec.Combinators.serialize_nondep_then@tok () Term)

; </end encoding let serialize_nondep_then>

;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a
;;; Fact-ids: Name Prims.l_imp; Namespace Prims
(assert (! 
;; def=Prims.fst(204,12-204,26); use=Prims.fst(204,57-204,68)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x0
@x1)
Tm_type))
:qid kinding_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a))

:named kinding_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.l_imp; Namespace Prims
(assert (! 
;; def=Prims.fst(204,12-204,26); use=Prims.fst(204,57-204,68)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x2
@x3)))
:qid Prims_pre_typing_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a))

:named Prims_pre_typing_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a
;;; Fact-ids: Name Prims.l_imp; Namespace Prims
(assert (! 
;; def=Prims.fst(204,12-204,26); use=Prims.fst(204,57-204,68)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x1
@x2))

;; def=Prims.fst(204,12-204,26); use=Prims.fst(204,57-204,68)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)
(HasType (ApplyTT @x0
@x3)
@x1))
 

:pattern ((ApplyTT @x0
@x3))
:qid Prims_interpretation_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a.1))
)
 

:pattern ((HasTypeZ @x0
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x1
@x2)))
:qid Prims_interpretation_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a))

:named Prims_interpretation_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a))
(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(562,2-562,56)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (t: Type) (t': Type) (f: (_: t -> Prims.GTot t')) (v: t).
;   (*  - Could not prove post-condition
; *)
;   forall (b: MiniParse.Spec.Base.bytes).
;     (*  - Could not prove post-condition
; *)
;     forall (any_result: t'). f v == any_result ==> 0 <= FStar.Seq.Base.length b


; Context: While encoding a query
; While typechecking the top-level declaration `let parse_fret'`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x1
@x0))
(HasType @x3
@x0))

;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(562,2-562,56)
(forall ((@x4 Term))
 (! (implies (HasType @x4
MiniParse.Spec.Base.bytes)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(562,20-562,56)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
@x1)

;; def=FStar.Pervasives.Native.fst(59,33-59,35); use=MiniParse.Spec.Combinators.fst(562,20-562,56)
(= (ApplyTT @x2
@x3)
@x5)
)

;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(562,32-562,33)
(or label_1

;; def=MiniParse.Spec.Base.fst(40,55-40,72); use=MiniParse.Spec.Combinators.fst(562,32-562,33)
(<= (BoxInt_proj_0 (BoxInt 0))
(BoxInt_proj_0 (FStar.Seq.Base.length (MiniParse.Spec.Base.byte Dummy_value)
@x4)))
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 8714496)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.parse_fret', 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_MiniParse.Spec.Base.byte, equation_MiniParse.Spec.Base.bytes, equation_Prims.eqtype, equation_Prims.nat, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, typing_FStar.Seq.Base.length, typing_FStar.UInt8.t

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let parse_fret'


; <Start encoding let parse_fret'>


(declare-fun MiniParse.Spec.Combinators.parse_fret_ (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;f: (_: t -> Prims.GTot t') -> v: t -> MiniParse.Spec.Base.bare_parser t'
(declare-fun Tm_arrow_9e674f301f3e8bceee18d6c7c72e851f () Term)
(declare-fun MiniParse.Spec.Combinators.parse_fret_@tok () Term)


(declare-fun Tm_abs_1fb4b12c5e13644b16cddd2d7e9d02d4 (Term Term Term) Term)

; </end encoding let parse_fret'>

;;;;;;;;;;;;;;;;typing_Tm_abs_1fb4b12c5e13644b16cddd2d7e9d02d4
;;; Fact-ids: Name MiniParse.Spec.Combinators.parse_fret'; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(562,20-562,56); use=MiniParse.Spec.Combinators.fst(562,20-562,56)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_abs_1fb4b12c5e13644b16cddd2d7e9d02d4 @x0
@x1
@x2)
(Tm_ghost_arrow_84eb031c18bd35e3c76ba4886d9ede0b @x2))
 

:pattern ((Tm_abs_1fb4b12c5e13644b16cddd2d7e9d02d4 @x0
@x1
@x2))
:qid typing_Tm_abs_1fb4b12c5e13644b16cddd2d7e9d02d4))

:named typing_Tm_abs_1fb4b12c5e13644b16cddd2d7e9d02d4))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_1fb4b12c5e13644b16cddd2d7e9d02d4
;;; Fact-ids: Name MiniParse.Spec.Combinators.parse_fret'; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(562,20-562,56); use=MiniParse.Spec.Combinators.fst(562,20-562,56)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (Tm_abs_1fb4b12c5e13644b16cddd2d7e9d02d4 @x1
@x2
@x3)
@x0)
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x3
(MiniParse.Spec.Base.consumed_length @x0))
(FStar.Pervasives.Native.Mktuple2 @x3
(MiniParse.Spec.Base.consumed_length @x0)
(ApplyTT @x1
@x2)
(BoxInt 0))))
 

:pattern ((ApplyTT (Tm_abs_1fb4b12c5e13644b16cddd2d7e9d02d4 @x1
@x2
@x3)
@x0))
:qid interpretation_Tm_abs_1fb4b12c5e13644b16cddd2d7e9d02d4))

:named interpretation_Tm_abs_1fb4b12c5e13644b16cddd2d7e9d02d4))
(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(566,2-566,26)

(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)








; Encoding query formula : forall (t: Type) (t': Type) (f: (_: t -> Prims.GTot t')) (v: t).
;   (*  - Could not prove post-condition
; *)
;   MiniParse.Spec.Base.no_lookahead_weak (fun b -> FStar.Pervasives.Native.Some (f v, 0)) /\
;   MiniParse.Spec.Base.injective (fun b -> FStar.Pervasives.Native.Some (f v, 0)) /\
;   MiniParse.Spec.Base.no_lookahead (fun b -> FStar.Pervasives.Native.Some (f v, 0))


; Context: While encoding a query
; While typechecking the top-level declaration `let parse_fret`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x1
@x0))
(HasType @x3
@x0))

;; def=MiniParse.Spec.Base.fst(241,4-243,18); use=MiniParse.Spec.Combinators.fst(566,9-566,26)
(and 
;; def=MiniParse.Spec.Base.fst(241,4-241,23); use=MiniParse.Spec.Combinators.fst(566,9-566,26)
(or label_1

;; def=MiniParse.Spec.Base.fst(241,4-241,23); use=MiniParse.Spec.Combinators.fst(566,9-566,26)
(Valid 
;; def=MiniParse.Spec.Base.fst(241,4-241,23); use=MiniParse.Spec.Combinators.fst(566,9-566,26)
(MiniParse.Spec.Base.no_lookahead_weak @x1
(Tm_abs_1fb4b12c5e13644b16cddd2d7e9d02d4 @x2
@x3
@x1))
)
)


;; def=MiniParse.Spec.Base.fst(242,4-242,15); use=MiniParse.Spec.Combinators.fst(566,9-566,26)
(or label_2

;; def=MiniParse.Spec.Base.fst(242,4-242,15); use=MiniParse.Spec.Combinators.fst(566,9-566,26)
(Valid 
;; def=MiniParse.Spec.Base.fst(242,4-242,15); use=MiniParse.Spec.Combinators.fst(566,9-566,26)
(MiniParse.Spec.Base.injective @x1
(Tm_abs_1fb4b12c5e13644b16cddd2d7e9d02d4 @x2
@x3
@x1))
)
)


;; def=MiniParse.Spec.Base.fst(243,4-243,18); use=MiniParse.Spec.Combinators.fst(566,9-566,26)
(or label_3

;; def=MiniParse.Spec.Base.fst(243,4-243,18); use=MiniParse.Spec.Combinators.fst(566,9-566,26)
(Valid 
;; def=MiniParse.Spec.Base.fst(243,4-243,18); use=MiniParse.Spec.Combinators.fst(566,9-566,26)
(MiniParse.Spec.Base.no_lookahead @x1
(Tm_abs_1fb4b12c5e13644b16cddd2d7e9d02d4 @x2
@x3
@x1))
)
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 8714496)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.parse_fret, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, constructor_distinct_FStar.Pervasives.Native.Some, disc_equation_FStar.Pervasives.Native.None, disc_equation_FStar.Pervasives.Native.Some, equation_MiniParse.Spec.Base.bare_parser, equation_MiniParse.Spec.Base.bparse, equation_MiniParse.Spec.Base.byte, equation_MiniParse.Spec.Base.bytes, equation_MiniParse.Spec.Base.consumed_length, equation_MiniParse.Spec.Base.injective, equation_MiniParse.Spec.Base.injective_postcond, equation_MiniParse.Spec.Base.injective_precond, equation_MiniParse.Spec.Base.no_lookahead, equation_MiniParse.Spec.Base.no_lookahead_on, equation_MiniParse.Spec.Base.no_lookahead_on_postcond, equation_MiniParse.Spec.Base.no_lookahead_on_precond, equation_MiniParse.Spec.Base.no_lookahead_weak, equation_MiniParse.Spec.Base.no_lookahead_weak_on, equation_Prims.eqtype, equation_Prims.nat, int_typing, interpretation_Tm_abs_1fb4b12c5e13644b16cddd2d7e9d02d4, kinding_FStar.Pervasives.Native.tuple2@tok, lemma_FStar.Pervasives.invertOption, lemma_FStar.Seq.Properties.slice_is_empty, projection_inverse_BoxBool_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_FStar.Pervasives.Native.Some_a, projection_inverse_FStar.Pervasives.Native.Some_v, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_b361ba8089a6e963921008d537e799a1, typing_FStar.Seq.Base.length, typing_FStar.UInt8.t, typing_MiniParse.Spec.Base.bparse, typing_MiniParse.Spec.Base.consumed_length, typing_Tm_abs_1fb4b12c5e13644b16cddd2d7e9d02d4

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let parse_fret


; <Start encoding let parse_fret>


(declare-fun MiniParse.Spec.Combinators.parse_fret (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;f: (_: t -> Prims.GTot t') -> v: t -> MiniParse.Spec.Base.parser_spec t'
(declare-fun Tm_arrow_9e28ecc2cc9dde5d7005e9d849c7cc4e () Term)
(declare-fun MiniParse.Spec.Combinators.parse_fret@tok () Term)




; </end encoding let parse_fret>


; encoding sigelt let synth_inverse


; <Start encoding let synth_inverse>



(declare-fun MiniParse.Spec.Combinators.synth_inverse (Term Term Term Term) Term)


;;;;;;;;;;;;;;;;f2: (_: t1 -> Prims.GTot t2) -> g1: (_: t2 -> Prims.GTot t1) -> Prims.GTot Type
(declare-fun Tm_arrow_e990ba0d546fe5f30f22053a4e876d5d () Term)
(declare-fun MiniParse.Spec.Combinators.synth_inverse@tok () Term)



; </end encoding let synth_inverse>

(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(586,2-586,44)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)




(declare-fun Tm_abs_957e8ad743772cbc360e7d8acd225cc1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_957e8ad743772cbc360e7d8acd225cc1
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(586,26-586,42); use=MiniParse.Spec.Combinators.fst(586,3-586,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_abs_957e8ad743772cbc360e7d8acd225cc1 @x0
@x1
@x2)
(Tm_arrow_21c34ab6214876c3f64c3607461881fc @x1
@x2))
 

:pattern ((Tm_abs_957e8ad743772cbc360e7d8acd225cc1 @x0
@x1
@x2))
:qid typing_Tm_abs_957e8ad743772cbc360e7d8acd225cc1))

:named typing_Tm_abs_957e8ad743772cbc360e7d8acd225cc1))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_957e8ad743772cbc360e7d8acd225cc1
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(586,26-586,42); use=MiniParse.Spec.Combinators.fst(586,3-586,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (Tm_abs_957e8ad743772cbc360e7d8acd225cc1 @x1
@x2
@x3)
@x0)
(MiniParse.Spec.Base.Parser @x2
(Tm_abs_1fb4b12c5e13644b16cddd2d7e9d02d4 @x1
@x0
@x2)))
 

:pattern ((ApplyTT (Tm_abs_957e8ad743772cbc360e7d8acd225cc1 @x1
@x2
@x3)
@x0))
:qid interpretation_Tm_abs_957e8ad743772cbc360e7d8acd225cc1))

:named interpretation_Tm_abs_957e8ad743772cbc360e7d8acd225cc1))





; Encoding query formula : forall (t1: Type)
;   (t2: Type)
;   (p1: MiniParse.Spec.Base.parser_spec t1)
;   (f2: (_: t1 -> Prims.GTot t2)).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post (MiniParse.Spec.Base.parser_spec t2)).
;     (forall (x: t1) (x': t1). f2 x == f2 x' ==> x == x') /\
;     (forall (pure_result: MiniParse.Spec.Base.parser_spec t2). Prims.auto_squash (p pure_result)) ==>
;     MiniParse.Spec.Combinators.and_then_cases_injective (fun v1 ->
;           MiniParse.Spec.Base.Parser (fun b -> FStar.Pervasives.Native.Some (f2 v1, 0))
;           <:
;           MiniParse.Spec.Base.parser_spec t2) /\
;     (forall (pure_result: MiniParse.Spec.Base.parser_spec t2).
;         pure_result ==
;         MiniParse.Spec.Combinators.and_then p1
;           (fun v1 ->
;               MiniParse.Spec.Base.Parser (fun b -> FStar.Pervasives.Native.Some (f2 v1, 0))
;               <:
;               MiniParse.Spec.Base.parser_spec t2) ==>
;         (forall (return_val: MiniParse.Spec.Base.parser_spec t2).
;             return_val == pure_result ==> p return_val))


; Context: While encoding a query
; While typechecking the top-level declaration `let parse_synth'`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(MiniParse.Spec.Base.parser_spec @x0))
(HasType @x3
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x1
@x0)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post (MiniParse.Spec.Base.parser_spec @x1)))

;; def=MiniParse.Spec.Combinators.fst(582,12-584,3); use=MiniParse.Spec.Combinators.fst(586,2-586,44)
(forall ((@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x5
@x0)
(HasType @x6
@x0)

;; def=MiniParse.Spec.Combinators.fst(583,25-583,38); use=MiniParse.Spec.Combinators.fst(586,2-586,44)
(= (ApplyTT @x3
@x5)
(ApplyTT @x3
@x6))
)

;; def=MiniParse.Spec.Combinators.fst(583,43-583,50); use=MiniParse.Spec.Combinators.fst(586,2-586,44)
(= @x5
@x6)
)
 
;;no pats
:qid @query.2))


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(586,2-586,44)
(forall ((@x5 Term))
 (! (implies (or label_1
(HasType @x5
(MiniParse.Spec.Base.parser_spec @x1)))

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(586,2-586,44)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(586,2-586,44)
(ApplyTT @x4
@x5)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(586,2-586,44)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(586,2-586,44)
(ApplyTT @x4
@x5)
)
)
:qid @query.3))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(586,2-586,44)
(and 
;; def=MiniParse.Spec.Combinators.fst(440,12-442,3); use=MiniParse.Spec.Combinators.fst(586,3-586,11)
(or label_2

;; def=MiniParse.Spec.Combinators.fst(440,12-442,3); use=MiniParse.Spec.Combinators.fst(586,3-586,11)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(440,12-442,3); use=MiniParse.Spec.Combinators.fst(586,3-586,11)
(MiniParse.Spec.Combinators.and_then_cases_injective @x0
@x1
(Tm_abs_957e8ad743772cbc360e7d8acd225cc1 @x3
@x1
@x0))
)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(586,2-586,44)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(MiniParse.Spec.Base.parser_spec @x1))

;; def=MiniParse.Spec.Combinators.fst(581,7-586,44); use=MiniParse.Spec.Combinators.fst(586,2-586,44)
(= @x5
(MiniParse.Spec.Combinators.and_then @x0
@x2
@x1
(Tm_abs_957e8ad743772cbc360e7d8acd225cc1 @x3
@x1
@x0)))
)

;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(MiniParse.Spec.Base.parser_spec @x1))

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x6
@x5)
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x4
@x6)
)
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 8714496)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.parse_synth', 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_MiniParse.Spec.Base.consumed_length, equation_MiniParse.Spec.Combinators.and_then_cases_injective, equation_MiniParse.Spec.Combinators.and_then_cases_injective_, equation_MiniParse.Spec.Combinators.and_then_cases_injective_precond, equation_MiniParse.Spec.Combinators.coerce_to_bare_param_parser, fuel_guarded_inversion_MiniParse.Spec.Base.parser_spec, interpretation_Tm_abs_1fb4b12c5e13644b16cddd2d7e9d02d4, interpretation_Tm_abs_957e8ad743772cbc360e7d8acd225cc1, proj_equation_MiniParse.Spec.Base.Parser_f, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Some_v, projection_inverse_MiniParse.Spec.Base.Parser_f, token_correspondence_MiniParse.Spec.Combinators.coerce_to_bare_param_parser

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let parse_synth'


; <Start encoding let parse_synth'>


(declare-fun MiniParse.Spec.Combinators.parse_synth_ (Term Term Term Term) Term)


;;;;;;;;;;;;;;;;p1: MiniParse.Spec.Base.parser_spec t1 -> f2: (_: t1 -> Prims.GTot t2)   -> Prims.Pure (MiniParse.Spec.Base.parser_spec t2)
(declare-fun Tm_arrow_28008a06201b152df9c3b545f8ffb89f () Term)
(declare-fun MiniParse.Spec.Combinators.parse_synth_@tok () Term)





(declare-fun Tm_abs_957e8ad743772cbc360e7d8acd225cc1 (Term Term Term) Term)

; </end encoding let parse_synth'>

;;;;;;;;;;;;;;;;typing_Tm_abs_957e8ad743772cbc360e7d8acd225cc1
;;; Fact-ids: Name MiniParse.Spec.Combinators.parse_synth'; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(586,26-586,42); use=MiniParse.Spec.Combinators.fst(586,26-586,42)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_abs_957e8ad743772cbc360e7d8acd225cc1 @x0
@x1
@x2)
(Tm_arrow_21c34ab6214876c3f64c3607461881fc @x1
@x2))
 

:pattern ((Tm_abs_957e8ad743772cbc360e7d8acd225cc1 @x0
@x1
@x2))
:qid typing_Tm_abs_957e8ad743772cbc360e7d8acd225cc1))

:named typing_Tm_abs_957e8ad743772cbc360e7d8acd225cc1))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Combinators.synth_inverse; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(568,4-568,17); use=MiniParse.Spec.Combinators.fst(568,4-568,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x1
@x0))
(HasType @x3
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x0
@x1)))
(HasType (MiniParse.Spec.Combinators.synth_inverse @x0
@x1
@x2
@x3)
Tm_type))
 

:pattern ((MiniParse.Spec.Combinators.synth_inverse @x0
@x1
@x2
@x3))
:qid typing_MiniParse.Spec.Combinators.synth_inverse))

:named typing_MiniParse.Spec.Combinators.synth_inverse))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_957e8ad743772cbc360e7d8acd225cc1
;;; Fact-ids: Name MiniParse.Spec.Combinators.parse_synth'; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(586,26-586,42); use=MiniParse.Spec.Combinators.fst(586,26-586,42)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (Tm_abs_957e8ad743772cbc360e7d8acd225cc1 @x1
@x2
@x3)
@x0)
(MiniParse.Spec.Base.Parser @x2
(Tm_abs_1fb4b12c5e13644b16cddd2d7e9d02d4 @x1
@x0
@x2)))
 

:pattern ((ApplyTT (Tm_abs_957e8ad743772cbc360e7d8acd225cc1 @x1
@x2
@x3)
@x0))
:qid interpretation_Tm_abs_957e8ad743772cbc360e7d8acd225cc1))

:named interpretation_Tm_abs_957e8ad743772cbc360e7d8acd225cc1))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Combinators.synth_inverse
;;; Fact-ids: Name MiniParse.Spec.Combinators.synth_inverse; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(568,4-568,17); use=MiniParse.Spec.Combinators.fst(568,4-568,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Valid (MiniParse.Spec.Combinators.synth_inverse @x0
@x1
@x2
@x3))

;; def=MiniParse.Spec.Combinators.fst(574,2-574,36); use=MiniParse.Spec.Combinators.fst(574,2-574,36)
(forall ((@x4 Term))
 (! (implies (HasType @x4
@x1)

;; def=MiniParse.Spec.Combinators.fst(574,21-574,35); use=MiniParse.Spec.Combinators.fst(574,21-574,35)
(= (ApplyTT @x2
(ApplyTT @x3
@x4))
@x4)
)
 
;;no pats
:qid equation_MiniParse.Spec.Combinators.synth_inverse.1))
)
 

:pattern ((MiniParse.Spec.Combinators.synth_inverse @x0
@x1
@x2
@x3))
:qid equation_MiniParse.Spec.Combinators.synth_inverse))

:named equation_MiniParse.Spec.Combinators.synth_inverse))
;;;;;;;;;;;;;;;;Prop-typing for MiniParse.Spec.Combinators.synth_inverse
;;; Fact-ids: Name MiniParse.Spec.Combinators.synth_inverse; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(568,4-568,17); use=MiniParse.Spec.Combinators.fst(568,4-568,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x1
@x0))
(HasType @x3
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x0
@x1)))
(Valid (Prims.subtype_of (MiniParse.Spec.Combinators.synth_inverse @x0
@x1
@x2
@x3)
Prims.unit)))
 

:pattern ((Prims.subtype_of (MiniParse.Spec.Combinators.synth_inverse @x0
@x1
@x2
@x3)
Prims.unit))
:qid defn_equation_MiniParse.Spec.Combinators.synth_inverse))

:named defn_equation_MiniParse.Spec.Combinators.synth_inverse))
(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(599,2-599,44)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)











; Encoding query formula : forall (t1: Type)
;   (t2: Type)
;   (p1: MiniParse.Spec.Base.parser_spec t1)
;   (f2: (_: t1 -> Prims.GTot t2))
;   (g1: (_: t2 -> Prims.GTot t1)).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post (MiniParse.Spec.Base.parser_spec t2)).
;     MiniParse.Spec.Combinators.synth_inverse g1 f2 /\
;     (forall (pure_result: MiniParse.Spec.Base.parser_spec t2). Prims.auto_squash (p pure_result)) ==>
;     MiniParse.Spec.Combinators.and_then_cases_injective (fun v1 ->
;           MiniParse.Spec.Base.Parser (fun b -> FStar.Pervasives.Native.Some (f2 v1, 0))
;           <:
;           MiniParse.Spec.Base.parser_spec t2) /\
;     (forall (pure_result: MiniParse.Spec.Base.parser_spec t2).
;         pure_result ==
;         MiniParse.Spec.Combinators.and_then p1
;           (fun v1 ->
;               MiniParse.Spec.Base.Parser (fun b -> FStar.Pervasives.Native.Some (f2 v1, 0))
;               <:
;               MiniParse.Spec.Base.parser_spec t2) ==>
;         (forall (return_val: MiniParse.Spec.Base.parser_spec t2).
;             return_val == pure_result ==> p return_val))


; Context: While encoding a query
; While typechecking the top-level declaration `let parse_synth`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(MiniParse.Spec.Base.parser_spec @x0))
(HasType @x3
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x1
@x0))
(HasType @x4
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x0
@x1)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Prims.pure_post (MiniParse.Spec.Base.parser_spec @x1)))

;; def=MiniParse.Spec.Combinators.fst(595,12-597,3); use=MiniParse.Spec.Combinators.fst(599,2-599,44)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(595,12-597,3); use=MiniParse.Spec.Combinators.fst(599,2-599,44)
(MiniParse.Spec.Combinators.synth_inverse @x1
@x0
@x4
@x3)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(599,2-599,44)
(forall ((@x6 Term))
 (! (implies (or label_1
(HasType @x6
(MiniParse.Spec.Base.parser_spec @x1)))

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(599,2-599,44)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(599,2-599,44)
(ApplyTT @x5
@x6)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(599,2-599,44)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(599,2-599,44)
(ApplyTT @x5
@x6)
)
)
:qid @query.2))
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(599,2-599,44)
(and 
;; def=MiniParse.Spec.Combinators.fst(440,12-442,3); use=MiniParse.Spec.Combinators.fst(599,3-599,11)
(or label_2

;; def=MiniParse.Spec.Combinators.fst(440,12-442,3); use=MiniParse.Spec.Combinators.fst(599,3-599,11)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(440,12-442,3); use=MiniParse.Spec.Combinators.fst(599,3-599,11)
(MiniParse.Spec.Combinators.and_then_cases_injective @x0
@x1
(Tm_abs_957e8ad743772cbc360e7d8acd225cc1 @x3
@x1
@x0))
)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(599,2-599,44)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(MiniParse.Spec.Base.parser_spec @x1))

;; def=MiniParse.Spec.Combinators.fst(594,7-599,44); use=MiniParse.Spec.Combinators.fst(599,2-599,44)
(= @x6
(MiniParse.Spec.Combinators.and_then @x0
@x2
@x1
(Tm_abs_957e8ad743772cbc360e7d8acd225cc1 @x3
@x1
@x0)))
)

;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(MiniParse.Spec.Base.parser_spec @x1))

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x7
@x6)
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x5
@x7)
)
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 8714496)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.parse_synth, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_MiniParse.Spec.Base.consumed_length, equation_MiniParse.Spec.Combinators.and_then_cases_injective, equation_MiniParse.Spec.Combinators.and_then_cases_injective_, equation_MiniParse.Spec.Combinators.and_then_cases_injective_precond, equation_MiniParse.Spec.Combinators.coerce_to_bare_param_parser, equation_MiniParse.Spec.Combinators.synth_inverse, fuel_guarded_inversion_MiniParse.Spec.Base.parser_spec, interpretation_Tm_abs_1fb4b12c5e13644b16cddd2d7e9d02d4, interpretation_Tm_abs_957e8ad743772cbc360e7d8acd225cc1, proj_equation_MiniParse.Spec.Base.Parser_f, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Some_v, projection_inverse_MiniParse.Spec.Base.Parser_f, token_correspondence_MiniParse.Spec.Combinators.coerce_to_bare_param_parser

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let parse_synth


; <Start encoding let parse_synth>



(declare-fun MiniParse.Spec.Combinators.parse_synth (Term Term Term Term Term) Term)



;;;;;;;;;;;;;;;;p1: MiniParse.Spec.Base.parser_spec t1 ->     f2: (_: t1 -> Prims.GTot t2) ->     g1: (_: t2 -> Prims.GTot t1)   -> Prims.Pure (MiniParse.Spec.Base.parser_spec t2)
(declare-fun Tm_arrow_cb43d55b5c029e80ed235e7586227650 () Term)
(declare-fun MiniParse.Spec.Combinators.parse_synth@tok () Term)








; </end encoding let parse_synth>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Combinators.parse_synth; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(588,4-588,15); use=MiniParse.Spec.Combinators.fst(588,4-588,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and 
;; def=MiniParse.Spec.Combinators.fst(595,12-597,3); use=MiniParse.Spec.Combinators.fst(595,12-597,3)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(595,12-597,3); use=MiniParse.Spec.Combinators.fst(595,12-597,3)
(MiniParse.Spec.Combinators.synth_inverse @x1
@x0
@x4
@x3)
)

(HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(MiniParse.Spec.Base.parser_spec @x0))
(HasType @x3
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x1
@x0))
(HasType @x4
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x0
@x1)))
(HasType (MiniParse.Spec.Combinators.parse_synth @x0
@x1
@x2
@x3
@x4)
(Tm_refine_795fb455fe887e79d318ca3f6d129a29 @x1)))
 

:pattern ((MiniParse.Spec.Combinators.parse_synth @x0
@x1
@x2
@x3
@x4))
:qid typing_MiniParse.Spec.Combinators.parse_synth))

:named typing_MiniParse.Spec.Combinators.parse_synth))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Combinators.parse_synth
;;; Fact-ids: Name MiniParse.Spec.Combinators.parse_synth; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(588,4-588,15); use=MiniParse.Spec.Combinators.fst(588,4-588,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (MiniParse.Spec.Combinators.parse_synth @x0
@x1
@x2
@x3
@x4)
(MiniParse.Spec.Combinators.and_then @x0
@x2
@x1
(Tm_abs_957e8ad743772cbc360e7d8acd225cc1 @x3
@x1
@x0)))
 

:pattern ((MiniParse.Spec.Combinators.parse_synth @x0
@x1
@x2
@x3
@x4))
:qid equation_MiniParse.Spec.Combinators.parse_synth))

:named equation_MiniParse.Spec.Combinators.parse_synth))
(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(613,2-613,4)

(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)



; Encoding query formula : forall (t1: Type)
;   (t2: Type)
;   (p1: MiniParse.Spec.Base.parser_spec t1)
;   (f2: (_: t1 -> Prims.GTot t2))
;   (g1: (_: t2 -> Prims.GTot t1))
;   (b: MiniParse.Spec.Base.bytes).
;   (forall (_: Prims.squash (MiniParse.Spec.Combinators.synth_inverse g1 f2)).
;       (*  - Could not prove post-condition
; *)
;       MiniParse.Spec.Combinators.synth_inverse g1 f2 /\
;       (forall (pure_result: MiniParse.Spec.Base.parser_spec t2).
;           MiniParse.Spec.Combinators.parse_synth p1 f2 g1 == pure_result ==>
;           (forall (any_result:
;               FStar.Pervasives.Native.option (t2 & MiniParse.Spec.Base.consumed_length b)).
;               MiniParse.Spec.Base.parse (MiniParse.Spec.Combinators.parse_synth p1 f2 g1) b ==
;               any_result ==>
;               (forall (any_result:
;                   FStar.Pervasives.Native.option (t1 & MiniParse.Spec.Base.consumed_length b)).
;                   MiniParse.Spec.Base.parse p1 b == any_result ==>
;                   (forall (k:
;                       Prims.pure_post (FStar.Pervasives.Native.option (t2 &
;                               MiniParse.Spec.Base.consumed_length b))).
;                       (forall (x:
;                           FStar.Pervasives.Native.option (t2 & MiniParse.Spec.Base.consumed_length b
;                             )).
;                           {:pattern Prims.guard_free (k x)}
;                           Prims.auto_squash (k x)) ==>
;                       ~(None? (MiniParse.Spec.Base.parse p1 b)) /\
;                       ~(Some? (MiniParse.Spec.Base.parse p1 b)) ==>
;                       Prims.l_False))))) /\
;   (forall (p: Prims.pure_post Prims.unit).
;       MiniParse.Spec.Combinators.synth_inverse g1 f2 /\
;       (forall (pure_result: Prims.unit).
;           MiniParse.Spec.Base.parse (MiniParse.Spec.Combinators.parse_synth p1 f2 g1) b ==
;           (match MiniParse.Spec.Base.parse p1 b with
;             | FStar.Pervasives.Native.None  -> FStar.Pervasives.Native.None
;             | FStar.Pervasives.Native.Some (x1, consumed) ->
;               FStar.Pervasives.Native.Some (f2 x1, consumed)) ==>
;           p pure_result) ==>
;       (forall (any_result: Prims.unit). p any_result))


; Context: While encoding a query
; While typechecking the top-level declaration `let parse_synth_eq`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(MiniParse.Spec.Base.parser_spec @x0))
(HasType @x3
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x1
@x0))
(HasType @x4
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x0
@x1))
(HasType @x5
MiniParse.Spec.Base.bytes))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(and 
;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(forall ((@x6 Term))
 (! (implies (HasType @x6
(Prims.squash (MiniParse.Spec.Combinators.synth_inverse @x1
@x0
@x4
@x3)))

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(and 
;; def=MiniParse.Spec.Combinators.fst(595,12-597,3); use=MiniParse.Spec.Combinators.fst(610,11-612,51)
(or label_1

;; def=MiniParse.Spec.Combinators.fst(595,12-597,3); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(595,12-597,3); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(MiniParse.Spec.Combinators.synth_inverse @x1
@x0
@x4
@x3)
)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(MiniParse.Spec.Base.parser_spec @x1))

;; def=MiniParse.Spec.Base.fst(252,3-252,4); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(= (MiniParse.Spec.Combinators.parse_synth @x0
@x1
@x2
@x3
@x4)
@x7)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(= (MiniParse.Spec.Base.parse @x1
(MiniParse.Spec.Combinators.parse_synth @x0
@x1
@x2
@x3
@x4)
@x5)
@x8)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5))))

;; def=MiniParse.Spec.Combinators.fst(610,53-610,63); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(= (MiniParse.Spec.Base.parse @x0
@x2
@x5)
@x9)
)

;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(Prims.pure_post (FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5)))))

;; def=Prims.fst(402,27-402,88); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(forall ((@x11 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(Valid 
;; def=Prims.fst(402,84-402,87); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(ApplyTT @x10
@x11)
)

 

:pattern ((ApplyTT @x10
@x11))
:qid @query.6))


;; def=MiniParse.Spec.Combinators.fst(610,53-610,63); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(not 
;; def=MiniParse.Spec.Combinators.fst(610,53-610,63); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5))
(MiniParse.Spec.Base.parse @x0
@x2
@x5)))
)


;; def=MiniParse.Spec.Combinators.fst(610,53-610,63); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(not 
;; def=MiniParse.Spec.Combinators.fst(610,53-610,63); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5))
(MiniParse.Spec.Base.parse @x0
@x2
@x5)))
)
)
label_2)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
)
)
 
;;no pats
:qid @query.1))


;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Prims.pure_post Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(609,12-609,33); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(609,12-609,33); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(MiniParse.Spec.Combinators.synth_inverse @x1
@x0
@x4
@x3)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(forall ((@x7 Term))
 (! (implies (and (or label_3
(HasType @x7
Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(610,11-612,51); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(or label_4

;; def=MiniParse.Spec.Combinators.fst(610,11-612,51); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(= (MiniParse.Spec.Base.parse @x1
(MiniParse.Spec.Combinators.parse_synth @x0
@x1
@x2
@x3
@x4)
@x5)
(let ((@lb8 (MiniParse.Spec.Base.parse @x0
@x2
@x5)))
(ite (is-FStar.Pervasives.Native.None @lb8)
(FStar.Pervasives.Native.None (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5)))
(ite (is-FStar.Pervasives.Native.Some @lb8)
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(FStar.Pervasives.Native.Mktuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5)
(ApplyTT @x3
(FStar.Pervasives.Native.Mktuple2__1 (FStar.Pervasives.Native.Some_v @lb8)))
(FStar.Pervasives.Native.Mktuple2__2 (FStar.Pervasives.Native.Some_v @lb8))))
Tm_unit))))
)
)

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(ApplyTT @x6
@x7)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(ApplyTT @x6
@x7)
)
)
:qid @query.8))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x7 Term))
 (! (implies (HasType @x7
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(ApplyTT @x6
@x7)
)
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 8714496)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.parse_synth_eq, 1)
; STATUS: unknown because (incomplete quantifiers)

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(push) ;; push{0

; <fuel='2' ifuel='2'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel (SFuel ZFuel)))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(MiniParse.Spec.Base.parser_spec @x0))
(HasType @x3
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x1
@x0))
(HasType @x4
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x0
@x1))
(HasType @x5
MiniParse.Spec.Base.bytes))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(and 
;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(forall ((@x6 Term))
 (! (implies (HasType @x6
(Prims.squash (MiniParse.Spec.Combinators.synth_inverse @x1
@x0
@x4
@x3)))

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(and 
;; def=MiniParse.Spec.Combinators.fst(595,12-597,3); use=MiniParse.Spec.Combinators.fst(610,11-612,51)
(or label_1

;; def=MiniParse.Spec.Combinators.fst(595,12-597,3); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(595,12-597,3); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(MiniParse.Spec.Combinators.synth_inverse @x1
@x0
@x4
@x3)
)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(MiniParse.Spec.Base.parser_spec @x1))

;; def=MiniParse.Spec.Base.fst(252,3-252,4); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(= (MiniParse.Spec.Combinators.parse_synth @x0
@x1
@x2
@x3
@x4)
@x7)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))))

;; def=Prims.fst(175,35-175,36); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(= (MiniParse.Spec.Base.parse @x1
(MiniParse.Spec.Combinators.parse_synth @x0
@x1
@x2
@x3
@x4)
@x5)
@x8)
)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5))))

;; def=MiniParse.Spec.Combinators.fst(610,53-610,63); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(= (MiniParse.Spec.Base.parse @x0
@x2
@x5)
@x9)
)

;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(Prims.pure_post (FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5)))))

;; def=Prims.fst(402,27-402,88); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(forall ((@x11 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(Valid 
;; def=Prims.fst(402,84-402,87); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(ApplyTT @x10
@x11)
)

 

:pattern ((ApplyTT @x10
@x11))
:qid @query.6))


;; def=MiniParse.Spec.Combinators.fst(610,53-610,63); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(not 
;; def=MiniParse.Spec.Combinators.fst(610,53-610,63); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5))
(MiniParse.Spec.Base.parse @x0
@x2
@x5)))
)


;; def=MiniParse.Spec.Combinators.fst(610,53-610,63); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(not 
;; def=MiniParse.Spec.Combinators.fst(610,53-610,63); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (FStar.Pervasives.Native.tuple2 @x0
(MiniParse.Spec.Base.consumed_length @x5))
(MiniParse.Spec.Base.parse @x0
@x2
@x5)))
)
)
label_2)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
)
)
 
;;no pats
:qid @query.1))


;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Prims.pure_post Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(609,12-609,33); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(609,12-609,33); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(MiniParse.Spec.Combinators.synth_inverse @x1
@x0
@x4
@x3)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(forall ((@x7 Term))
 (! (implies (and (or label_3
(HasType @x7
Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(610,11-612,51); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(or label_4

;; def=MiniParse.Spec.Combinators.fst(610,11-612,51); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(= (MiniParse.Spec.Base.parse @x1
(MiniParse.Spec.Combinators.parse_synth @x0
@x1
@x2
@x3
@x4)
@x5)
(let ((@lb8 (MiniParse.Spec.Base.parse @x0
@x2
@x5)))
(ite (is-FStar.Pervasives.Native.None @lb8)
(FStar.Pervasives.Native.None (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5)))
(ite (is-FStar.Pervasives.Native.Some @lb8)
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5))
(FStar.Pervasives.Native.Mktuple2 @x1
(MiniParse.Spec.Base.consumed_length @x5)
(ApplyTT @x3
(FStar.Pervasives.Native.Mktuple2__1 (FStar.Pervasives.Native.Some_v @lb8)))
(FStar.Pervasives.Native.Mktuple2__2 (FStar.Pervasives.Native.Some_v @lb8))))
Tm_unit))))
)
)

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(ApplyTT @x6
@x7)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(613,2-613,4)
(ApplyTT @x6
@x7)
)
)
:qid @query.8))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x7 Term))
 (! (implies (HasType @x7
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(ApplyTT @x6
@x7)
)
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 8714496)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.parse_synth_eq, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, constructor_distinct_FStar.Pervasives.Native.Some, data_elim_FStar.Pervasives.Native.Mktuple2, data_elim_FStar.Pervasives.Native.Some, disc_equation_FStar.Pervasives.Native.None, disc_equation_FStar.Pervasives.Native.Some, equation_MiniParse.Spec.Base.bparse, equation_MiniParse.Spec.Base.consumed_length, equation_MiniParse.Spec.Base.parse, equation_MiniParse.Spec.Combinators.and_then, equation_MiniParse.Spec.Combinators.and_then_bare, equation_MiniParse.Spec.Combinators.coerce_to_bare_param_parser, equation_MiniParse.Spec.Combinators.parse_synth, equation_Prims.nat, equation_Prims.squash, fuel_guarded_inversion_FStar.Pervasives.Native.option, fuel_guarded_inversion_FStar.Pervasives.Native.tuple2, fuel_guarded_inversion_MiniParse.Spec.Base.parser_spec, int_inversion, interpretation_Tm_abs_1fb4b12c5e13644b16cddd2d7e9d02d4, interpretation_Tm_abs_5a56d64ec9685d0352c27644697b3e56, interpretation_Tm_abs_957e8ad743772cbc360e7d8acd225cc1, kinding_FStar.Pervasives.Native.tuple2@tok, lemma_FStar.Pervasives.invertOption, primitive_Prims.op_Addition, proj_equation_MiniParse.Spec.Base.Parser_f, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_FStar.Pervasives.Native.Some_a, projection_inverse_FStar.Pervasives.Native.Some_v, projection_inverse_MiniParse.Spec.Base.Parser_f, refinement_interpretation_Tm_refine_2de20c066034c13bf76e9c0b94f4806c, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_95482e91a565bbc8d113ac6e95692d97, refinement_interpretation_Tm_refine_f1ef48729dd48b5741a77671cc117cd5, token_correspondence_MiniParse.Spec.Combinators.coerce_to_bare_param_parser, typing_MiniParse.Spec.Base.__proj__Parser__item__f, typing_MiniParse.Spec.Base.bparse, typing_MiniParse.Spec.Base.consumed_length

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let parse_synth_eq


; <Start encoding let parse_synth_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Combinators.parse_synth_eq (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Combinators.parse_synth_eq@tok () Term)

; </end encoding let parse_synth_eq>


; encoding sigelt val MiniParse.Spec.Combinators.bare_serialize_synth


; <Skipped val MiniParse.Spec.Combinators.bare_serialize_synth/>


; encoding sigelt let bare_serialize_synth


; <Start encoding let bare_serialize_synth>



(declare-fun MiniParse.Spec.Combinators.bare_serialize_synth (Term Term Term Term Term Term) Term)


;;;;;;;;;;;;;;;;p1: MiniParse.Spec.Base.parser_spec t1 ->     f2: (_: t1 -> Prims.GTot t2) ->     s1: MiniParse.Spec.Base.serializer_spec p1 ->     g1: (_: t2 -> Prims.GTot t1)   -> MiniParse.Spec.Base.bare_serializer t2
(declare-fun Tm_arrow_0fb5e89f73edc8ed64078638d56ed8e2 () Term)
(declare-fun MiniParse.Spec.Combinators.bare_serialize_synth@tok () Term)



(declare-fun Tm_abs_5726c850e5adc579388e02f8d1747910 (Term Term Term Term Term) Term)

; </end encoding let bare_serialize_synth>

(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(627,0-639,91)

(declare-fun label_1 () Bool)


(declare-fun Tm_refine_e5dad5ef51a93741fdb3aaf46e97fb95 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(635,12-638,3); use=MiniParse.Spec.Combinators.fst(634,2-634,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_e5dad5ef51a93741fdb3aaf46e97fb95 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_e5dad5ef51a93741fdb3aaf46e97fb95 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_e5dad5ef51a93741fdb3aaf46e97fb95))

:named refinement_kinding_Tm_refine_e5dad5ef51a93741fdb3aaf46e97fb95))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(635,12-638,3); use=MiniParse.Spec.Combinators.fst(634,2-634,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_e5dad5ef51a93741fdb3aaf46e97fb95 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(636,4-636,23); use=MiniParse.Spec.Combinators.fst(634,2-634,7)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(636,4-636,23); use=MiniParse.Spec.Combinators.fst(634,2-634,7)
(MiniParse.Spec.Combinators.synth_inverse @x2
@x3
@x4
@x5)
)


;; def=MiniParse.Spec.Combinators.fst(637,4-637,23); use=MiniParse.Spec.Combinators.fst(634,2-634,7)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(637,4-637,23); use=MiniParse.Spec.Combinators.fst(634,2-634,7)
(MiniParse.Spec.Combinators.synth_inverse @x3
@x2
@x5
@x4)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_e5dad5ef51a93741fdb3aaf46e97fb95 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_e5dad5ef51a93741fdb3aaf46e97fb95))

:named refinement_interpretation_Tm_refine_e5dad5ef51a93741fdb3aaf46e97fb95))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e5dad5ef51a93741fdb3aaf46e97fb95
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(635,12-638,3); use=MiniParse.Spec.Combinators.fst(634,2-634,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_e5dad5ef51a93741fdb3aaf46e97fb95 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_e5dad5ef51a93741fdb3aaf46e97fb95 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_e5dad5ef51a93741fdb3aaf46e97fb95))

:named haseqTm_refine_e5dad5ef51a93741fdb3aaf46e97fb95))

; Encoding query formula : forall (t1: Type0)
;   (t2: Type0)
;   (p1: MiniParse.Spec.Base.parser_spec t1)
;   (f2: (_: t1 -> Prims.GTot t2))
;   (s1: MiniParse.Spec.Base.serializer_spec p1)
;   (g1: (_: t2 -> Prims.GTot t1))
;   (_:
;   Prims.squash (MiniParse.Spec.Combinators.synth_inverse g1 f2 /\
;       MiniParse.Spec.Combinators.synth_inverse f2 g1)).
;   (*  - Could not prove post-condition
; *)
;   Prims.auto_squash (MiniParse.Spec.Combinators.synth_inverse g1 f2)


; Context: While encoding a query
; While typechecking the top-level declaration `val MiniParse.Spec.Combinators.bare_serialize_synth_correct`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(627,0-639,91)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(MiniParse.Spec.Base.parser_spec @x0))
(HasType @x3
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x1
@x0))
(HasType @x4
(MiniParse.Spec.Base.serializer_spec @x0
@x2))
(HasType @x5
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x0
@x1))
(HasType @x6
(Tm_refine_e5dad5ef51a93741fdb3aaf46e97fb95 @x1
@x0
@x5
@x3)))

;; def=MiniParse.Spec.Combinators.fst(595,12-597,3); use=MiniParse.Spec.Combinators.fst(639,32-639,43)
(or label_1

;; def=MiniParse.Spec.Combinators.fst(595,12-597,3); use=MiniParse.Spec.Combinators.fst(639,32-639,43)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(595,12-597,3); use=MiniParse.Spec.Combinators.fst(639,32-639,43)
(MiniParse.Spec.Combinators.synth_inverse @x1
@x0
@x5
@x3)
)
)
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 8714496)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.bare_serialize_synth_correct, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_e5dad5ef51a93741fdb3aaf46e97fb95

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt val MiniParse.Spec.Combinators.bare_serialize_synth_correct


; <Skipped val MiniParse.Spec.Combinators.bare_serialize_synth_correct/>

;;;;;;;;;;;;;;;;typing_Tm_abs_5726c850e5adc579388e02f8d1747910
;;; Fact-ids: Name MiniParse.Spec.Combinators.bare_serialize_synth; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(625,17-625,36); use=MiniParse.Spec.Combinators.fst(625,17-625,36)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_abs_5726c850e5adc579388e02f8d1747910 @x0
@x1
@x2
@x3
@x4)
(Tm_ghost_arrow_4502d1a2310fff506c14a9e7677ba599 @x4))
 

:pattern ((Tm_abs_5726c850e5adc579388e02f8d1747910 @x0
@x1
@x2
@x3
@x4))
:qid typing_Tm_abs_5726c850e5adc579388e02f8d1747910))

:named typing_Tm_abs_5726c850e5adc579388e02f8d1747910))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Combinators.bare_serialize_synth; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(624,4-624,24); use=MiniParse.Spec.Combinators.fst(624,4-624,24)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(MiniParse.Spec.Base.parser_spec @x0))
(HasType @x3
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x1
@x0))
(HasType @x4
(MiniParse.Spec.Base.serializer_spec @x0
@x2))
(HasType @x5
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x0
@x1)))
(HasType (MiniParse.Spec.Combinators.bare_serialize_synth @x0
@x1
@x2
@x3
@x4
@x5)
(MiniParse.Spec.Base.bare_serializer @x1)))
 

:pattern ((MiniParse.Spec.Combinators.bare_serialize_synth @x0
@x1
@x2
@x3
@x4
@x5))
:qid typing_MiniParse.Spec.Combinators.bare_serialize_synth))

:named typing_MiniParse.Spec.Combinators.bare_serialize_synth))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_5726c850e5adc579388e02f8d1747910
;;; Fact-ids: Name MiniParse.Spec.Combinators.bare_serialize_synth; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(625,17-625,36); use=MiniParse.Spec.Combinators.fst(625,17-625,36)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (ApplyTT (Tm_abs_5726c850e5adc579388e02f8d1747910 @x1
@x2
@x3
@x4
@x5)
@x0)
(MiniParse.Spec.Base.serialize @x1
@x2
@x3
(ApplyTT @x4
@x0)))
 

:pattern ((ApplyTT (Tm_abs_5726c850e5adc579388e02f8d1747910 @x1
@x2
@x3
@x4
@x5)
@x0))
:qid interpretation_Tm_abs_5726c850e5adc579388e02f8d1747910))

:named interpretation_Tm_abs_5726c850e5adc579388e02f8d1747910))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Combinators.bare_serialize_synth
;;; Fact-ids: Name MiniParse.Spec.Combinators.bare_serialize_synth; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(624,4-624,24); use=MiniParse.Spec.Combinators.fst(624,4-624,24)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (MiniParse.Spec.Combinators.bare_serialize_synth @x0
@x1
@x2
@x3
@x4
@x5)
(Tm_abs_5726c850e5adc579388e02f8d1747910 @x0
@x2
@x4
@x5
@x1))
 

:pattern ((MiniParse.Spec.Combinators.bare_serialize_synth @x0
@x1
@x2
@x3
@x4
@x5))
:qid equation_MiniParse.Spec.Combinators.bare_serialize_synth))

:named equation_MiniParse.Spec.Combinators.bare_serialize_synth))
(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(642,2-642,4)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)



; Encoding query formula : forall (k: Type)
;   (t1: Type)
;   (p1: MiniParse.Spec.Base.parser_spec k)
;   (f2: (_: k -> Prims.GTot t1))
;   (s1: MiniParse.Spec.Base.serializer_spec p1)
;   (g1: (_: t1 -> Prims.GTot k)).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     MiniParse.Spec.Combinators.synth_inverse g1 f2 /\ MiniParse.Spec.Combinators.synth_inverse f2 g1 /\
;     (forall (pure_result: Prims.unit).
;         MiniParse.Spec.Base.serializer_correct (MiniParse.Spec.Combinators.parse_synth p1 f2 g1)
;           (MiniParse.Spec.Combinators.bare_serialize_synth p1 f2 s1 g1) ==>
;         p pure_result) ==>
;     (forall (any_result: Prims.unit). p any_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let bare_serialize_synth_correct`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(MiniParse.Spec.Base.parser_spec @x0))
(HasType @x3
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x1
@x0))
(HasType @x4
(MiniParse.Spec.Base.serializer_spec @x0
@x2))
(HasType @x5
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x0
@x1)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Prims.pure_post Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(636,4-636,23); use=MiniParse.Spec.Combinators.fst(642,2-642,4)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(636,4-636,23); use=MiniParse.Spec.Combinators.fst(642,2-642,4)
(MiniParse.Spec.Combinators.synth_inverse @x1
@x0
@x5
@x3)
)


;; def=MiniParse.Spec.Combinators.fst(637,4-637,23); use=MiniParse.Spec.Combinators.fst(642,2-642,4)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(637,4-637,23); use=MiniParse.Spec.Combinators.fst(642,2-642,4)
(MiniParse.Spec.Combinators.synth_inverse @x0
@x1
@x3
@x5)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(642,2-642,4)
(forall ((@x7 Term))
 (! (implies (and (or label_1
(HasType @x7
Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(639,11-639,90); use=MiniParse.Spec.Combinators.fst(642,2-642,4)
(or label_2

;; def=MiniParse.Spec.Combinators.fst(639,11-639,90); use=MiniParse.Spec.Combinators.fst(642,2-642,4)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(639,11-639,90); use=MiniParse.Spec.Combinators.fst(642,2-642,4)
(MiniParse.Spec.Base.serializer_correct @x1
(MiniParse.Spec.Combinators.parse_synth @x0
@x1
@x2
@x3
@x5)
(MiniParse.Spec.Combinators.bare_serialize_synth @x0
@x1
@x2
@x3
@x4
@x5))
)
)
)

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(642,2-642,4)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(642,2-642,4)
(ApplyTT @x6
@x7)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(642,2-642,4)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(642,2-642,4)
(ApplyTT @x6
@x7)
)
)
:qid @query.2))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x7 Term))
 (! (implies (HasType @x7
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(ApplyTT @x6
@x7)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 8714496)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.bare_serialize_synth_correct, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, Prims_interpretation_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a, constructor_distinct_FStar.Pervasives.Native.Some, data_elim_MiniParse.Spec.Base.Serializer, equation_MiniParse.Spec.Base.bparse, equation_MiniParse.Spec.Base.byte, equation_MiniParse.Spec.Base.bytes, equation_MiniParse.Spec.Base.parse, equation_MiniParse.Spec.Base.serialize, equation_MiniParse.Spec.Base.serializer_correct, equation_MiniParse.Spec.Combinators.and_then, equation_MiniParse.Spec.Combinators.and_then_bare, equation_MiniParse.Spec.Combinators.bare_serialize_synth, equation_MiniParse.Spec.Combinators.coerce_to_bare_param_parser, equation_MiniParse.Spec.Combinators.parse_synth, equation_MiniParse.Spec.Combinators.synth_inverse, equation_Prims.eqtype, equation_Prims.nat, fuel_guarded_inversion_MiniParse.Spec.Base.serializer_spec, int_inversion, interpretation_Tm_abs_1fb4b12c5e13644b16cddd2d7e9d02d4, interpretation_Tm_abs_5726c850e5adc579388e02f8d1747910, interpretation_Tm_abs_5a56d64ec9685d0352c27644697b3e56, interpretation_Tm_abs_957e8ad743772cbc360e7d8acd225cc1, primitive_Prims.op_Addition, proj_equation_MiniParse.Spec.Base.Parser_f, proj_equation_MiniParse.Spec.Base.Serializer_f, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_FStar.Pervasives.Native.Some_a, projection_inverse_FStar.Pervasives.Native.Some_v, projection_inverse_MiniParse.Spec.Base.Parser_f, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_8da27fc70f74cdb01995c74e5b0aab3a, token_correspondence_MiniParse.Spec.Base.__proj__Serializer__item__f, token_correspondence_MiniParse.Spec.Combinators.coerce_to_bare_param_parser, typing_FStar.Seq.Base.length, typing_FStar.UInt8.t, typing_MiniParse.Spec.Base.serialize

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let bare_serialize_synth_correct


; <Start encoding let bare_serialize_synth_correct>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Combinators.bare_serialize_synth_correct (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Combinators.bare_serialize_synth_correct@tok () Term)

; </end encoding let bare_serialize_synth_correct>

(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(652,2-652,4)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)



; Encoding query formula : forall (t1: Type) (t2: Type) (f2: (_: t1 -> Prims.GTot t2)) (g1: (_: t2 -> Prims.GTot t1)).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     (forall (x: t2). f2 (g1 x) == x) /\
;     (forall (pure_result: Prims.unit).
;         MiniParse.Spec.Combinators.synth_inverse f2 g1 ==> p pure_result) ==>
;     (forall (any_result: Prims.unit). p any_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let synth_inverse_intro`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x1
@x0))
(HasType @x3
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x0
@x1)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(650,12-650,46); use=MiniParse.Spec.Combinators.fst(652,2-652,4)
(forall ((@x5 Term))
 (! (implies (HasType @x5
@x1)

;; def=MiniParse.Spec.Combinators.fst(650,31-650,45); use=MiniParse.Spec.Combinators.fst(652,2-652,4)
(= (ApplyTT @x2
(ApplyTT @x3
@x5))
@x5)
)
 
;;no pats
:qid @query.2))


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(652,2-652,4)
(forall ((@x5 Term))
 (! (implies (and (or label_1
(HasType @x5
Prims.unit))

;; def=MiniParse.Spec.Combinators.fst(651,11-651,32); use=MiniParse.Spec.Combinators.fst(652,2-652,4)
(or label_2

;; def=MiniParse.Spec.Combinators.fst(651,11-651,32); use=MiniParse.Spec.Combinators.fst(652,2-652,4)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(651,11-651,32); use=MiniParse.Spec.Combinators.fst(652,2-652,4)
(MiniParse.Spec.Combinators.synth_inverse @x0
@x1
@x2
@x3)
)
)
)

;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(652,2-652,4)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(652,2-652,4)
(ApplyTT @x4
@x5)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(652,2-652,4)
(Valid 
;; def=Prims.fst(441,83-441,96); use=MiniParse.Spec.Combinators.fst(652,2-652,4)
(ApplyTT @x4
@x5)
)
)
:qid @query.3))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x5 Term))
 (! (implies (HasType @x5
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(ApplyTT @x4
@x5)
)
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 8714496)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.synth_inverse_intro, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query, equation_MiniParse.Spec.Combinators.synth_inverse

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let synth_inverse_intro


; <Start encoding let synth_inverse_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Combinators.synth_inverse_intro (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Combinators.synth_inverse_intro@tok () Term)

; </end encoding let synth_inverse_intro>

(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(666,2-667,47)

(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)


(declare-fun Tm_refine_e5dad5ef51a93741fdb3aaf46e97fb95 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(661,13-664,3); use=MiniParse.Spec.Combinators.fst(661,13-664,3)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_e5dad5ef51a93741fdb3aaf46e97fb95 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_e5dad5ef51a93741fdb3aaf46e97fb95 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_e5dad5ef51a93741fdb3aaf46e97fb95))

:named refinement_kinding_Tm_refine_e5dad5ef51a93741fdb3aaf46e97fb95))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(661,13-664,3); use=MiniParse.Spec.Combinators.fst(661,13-664,3)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_e5dad5ef51a93741fdb3aaf46e97fb95 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(662,4-662,23); use=MiniParse.Spec.Combinators.fst(662,4-662,23)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(662,4-662,23); use=MiniParse.Spec.Combinators.fst(662,4-662,23)
(MiniParse.Spec.Combinators.synth_inverse @x2
@x3
@x4
@x5)
)


;; def=MiniParse.Spec.Combinators.fst(663,4-663,23); use=MiniParse.Spec.Combinators.fst(663,4-663,23)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(663,4-663,23); use=MiniParse.Spec.Combinators.fst(663,4-663,23)
(MiniParse.Spec.Combinators.synth_inverse @x3
@x2
@x5
@x4)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_e5dad5ef51a93741fdb3aaf46e97fb95 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_e5dad5ef51a93741fdb3aaf46e97fb95))

:named refinement_interpretation_Tm_refine_e5dad5ef51a93741fdb3aaf46e97fb95))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e5dad5ef51a93741fdb3aaf46e97fb95
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(661,13-664,3); use=MiniParse.Spec.Combinators.fst(661,13-664,3)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_e5dad5ef51a93741fdb3aaf46e97fb95 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_e5dad5ef51a93741fdb3aaf46e97fb95 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_e5dad5ef51a93741fdb3aaf46e97fb95))

:named haseqTm_refine_e5dad5ef51a93741fdb3aaf46e97fb95))

; Encoding query formula : forall (t1: Type)
;   (t2: Type)
;   (p1: MiniParse.Spec.Base.parser_spec t1)
;   (s1: MiniParse.Spec.Base.serializer_spec p1)
;   (f2: (_: t1 -> Prims.GTot t2))
;   (g1: (_: t2 -> Prims.GTot t1))
;   (u648:
;   Prims.squash (MiniParse.Spec.Combinators.synth_inverse f2 g1 /\
;       MiniParse.Spec.Combinators.synth_inverse g1 f2)).
;   MiniParse.Spec.Combinators.synth_inverse g1 f2 /\
;   MiniParse.Spec.Combinators.synth_inverse g1 f2 /\ MiniParse.Spec.Combinators.synth_inverse f2 g1 /\
;   (forall (pure_result: Prims.unit).
;       MiniParse.Spec.Base.serializer_correct (MiniParse.Spec.Combinators.parse_synth p1 f2 g1)
;         (MiniParse.Spec.Combinators.bare_serialize_synth p1 f2 s1 g1) ==>
;       MiniParse.Spec.Combinators.synth_inverse g1 f2 /\
;       (forall (pure_result: MiniParse.Spec.Base.parser_spec t2).
;           MiniParse.Spec.Combinators.parse_synth p1 f2 g1 == pure_result ==>
;           Prims.auto_squash (MiniParse.Spec.Base.serializer_correct (MiniParse.Spec.Combinators.parse_synth
;                     p1
;                     f2
;                     g1)
;                 (MiniParse.Spec.Combinators.bare_serialize_synth p1 f2 s1 g1))))


; Context: While encoding a query
; While typechecking the top-level declaration `let serialize_synth`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(MiniParse.Spec.Base.parser_spec @x0))
(HasType @x3
(MiniParse.Spec.Base.serializer_spec @x0
@x2))
(HasType @x4
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x1
@x0))
(HasType @x5
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x0
@x1))
(HasType @x6
(Tm_refine_e5dad5ef51a93741fdb3aaf46e97fb95 @x0
@x1
@x4
@x5)))

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(666,2-667,47)
(and 
;; def=MiniParse.Spec.Combinators.fst(595,12-597,3); use=MiniParse.Spec.Combinators.fst(666,2-667,47)
(or label_1

;; def=MiniParse.Spec.Combinators.fst(595,12-597,3); use=MiniParse.Spec.Combinators.fst(666,2-667,47)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(595,12-597,3); use=MiniParse.Spec.Combinators.fst(666,2-667,47)
(MiniParse.Spec.Combinators.synth_inverse @x1
@x0
@x5
@x4)
)
)


;; def=MiniParse.Spec.Combinators.fst(636,4-636,23); use=MiniParse.Spec.Combinators.fst(666,2-666,30)
(or label_2

;; def=MiniParse.Spec.Combinators.fst(636,4-636,23); use=MiniParse.Spec.Combinators.fst(666,2-666,30)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(636,4-636,23); use=MiniParse.Spec.Combinators.fst(666,2-666,30)
(MiniParse.Spec.Combinators.synth_inverse @x1
@x0
@x5
@x4)
)
)


;; def=MiniParse.Spec.Combinators.fst(637,4-637,23); use=MiniParse.Spec.Combinators.fst(666,2-666,30)
(or label_3

;; def=MiniParse.Spec.Combinators.fst(637,4-637,23); use=MiniParse.Spec.Combinators.fst(666,2-666,30)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(637,4-637,23); use=MiniParse.Spec.Combinators.fst(666,2-666,30)
(MiniParse.Spec.Combinators.synth_inverse @x0
@x1
@x4
@x5)
)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(666,2-666,30)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.unit)

;; def=MiniParse.Spec.Combinators.fst(639,11-639,90); use=MiniParse.Spec.Combinators.fst(666,2-666,30)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(639,11-639,90); use=MiniParse.Spec.Combinators.fst(666,2-666,30)
(MiniParse.Spec.Base.serializer_correct @x1
(MiniParse.Spec.Combinators.parse_synth @x0
@x1
@x2
@x4
@x5)
(MiniParse.Spec.Combinators.bare_serialize_synth @x0
@x1
@x2
@x4
@x3
@x5))
)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(666,2-667,47)
(and 
;; def=MiniParse.Spec.Combinators.fst(595,12-597,3); use=MiniParse.Spec.Combinators.fst(666,2-667,47)
(or label_4

;; def=MiniParse.Spec.Combinators.fst(595,12-597,3); use=MiniParse.Spec.Combinators.fst(666,2-667,47)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(595,12-597,3); use=MiniParse.Spec.Combinators.fst(666,2-667,47)
(MiniParse.Spec.Combinators.synth_inverse @x1
@x0
@x5
@x4)
)
)


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(666,2-667,47)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(MiniParse.Spec.Base.parser_spec @x1))

;; def=MiniParse.Spec.Base.fst(342,3-342,4); use=MiniParse.Spec.Combinators.fst(666,2-667,47)
(= (MiniParse.Spec.Combinators.parse_synth @x0
@x1
@x2
@x4
@x5)
@x8)
)

;; def=MiniParse.Spec.Base.fst(343,41-343,63); use=MiniParse.Spec.Combinators.fst(667,13-667,47)
(or label_5

;; def=MiniParse.Spec.Base.fst(343,41-343,63); use=MiniParse.Spec.Combinators.fst(667,13-667,47)
(Valid 
;; def=MiniParse.Spec.Base.fst(343,41-343,63); use=MiniParse.Spec.Combinators.fst(667,13-667,47)
(MiniParse.Spec.Base.serializer_correct @x1
(MiniParse.Spec.Combinators.parse_synth @x0
@x1
@x2
@x4
@x5)
(MiniParse.Spec.Combinators.bare_serialize_synth @x0
@x1
@x2
@x4
@x3
@x5))
)
)
)
 
;;no pats
:qid @query.2))
)
)
 
;;no pats
:qid @query.1))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 8714496)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.serialize_synth, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_e5dad5ef51a93741fdb3aaf46e97fb95

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let serialize_synth


; <Start encoding let serialize_synth>



(declare-fun Tm_refine_e5dad5ef51a93741fdb3aaf46e97fb95 (Term Term Term Term) Term)
(declare-fun MiniParse.Spec.Combinators.serialize_synth (Term Term Term Term Term Term Term) Term)



;;;;;;;;;;;;;;;;s1: MiniParse.Spec.Base.serializer_spec p1 ->     f2: (_: t1 -> Prims.GTot t2) ->     g1: (_: t2 -> Prims.GTot t1) ->     u775: Prims.squash (synth_inverse f2 g1 /\ synth_inverse g1 f2)   -> MiniParse.Spec.Base.serializer_spec (parse_synth p1 f2 g1)
(declare-fun Tm_arrow_8d6cd4b92df433ef773395d055d524e4 () Term)
(declare-fun MiniParse.Spec.Combinators.serialize_synth@tok () Term)




; </end encoding let serialize_synth>


; encoding sigelt let lift_parser'


; <Start encoding let lift_parser'>

;;;;;;;;;;;;;;;;_: Prims.unit -> Prims.GTot (MiniParse.Spec.Base.parser_spec t)
(declare-fun Tm_ghost_arrow_ac6e6f456246d2c100c6577d38c5a1e7 (Term) Term)
(declare-fun MiniParse.Spec.Combinators.lift_parser_ (Term Term) Term)

;;;;;;;;;;;;;;;;f: (_: Prims.unit -> Prims.GTot (MiniParse.Spec.Base.parser_spec t))   -> MiniParse.Spec.Base.bare_parser t
(declare-fun Tm_arrow_e459e0b029b354663edf1c6c9963a790 () Term)
(declare-fun MiniParse.Spec.Combinators.lift_parser_@tok () Term)


(declare-fun Tm_abs_fb66773af7f5fd01e183cbed4fff8be6 (Term Term) Term)

; </end encoding let lift_parser'>

;;;;;;;;;;;;;;;;typing_Tm_abs_fb66773af7f5fd01e183cbed4fff8be6
;;; Fact-ids: Name MiniParse.Spec.Combinators.lift_parser'; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(677,24-677,42); use=MiniParse.Spec.Combinators.fst(677,24-677,42)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_abs_fb66773af7f5fd01e183cbed4fff8be6 @x0
@x1)
(Tm_ghost_arrow_84eb031c18bd35e3c76ba4886d9ede0b @x1))
 

:pattern ((Tm_abs_fb66773af7f5fd01e183cbed4fff8be6 @x0
@x1))
:qid typing_Tm_abs_fb66773af7f5fd01e183cbed4fff8be6))

:named typing_Tm_abs_fb66773af7f5fd01e183cbed4fff8be6))
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_ac6e6f456246d2c100c6577d38c5a1e7
;;; Fact-ids: Name MiniParse.Spec.Combinators.lift_parser'; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(675,6-675,34); use=MiniParse.Spec.Combinators.fst(675,6-675,34)
(forall ((@x0 Term))
 (! (HasType (Tm_ghost_arrow_ac6e6f456246d2c100c6577d38c5a1e7 @x0)
Tm_type)
 

:pattern ((HasType (Tm_ghost_arrow_ac6e6f456246d2c100c6577d38c5a1e7 @x0)
Tm_type))
:qid kinding_Tm_ghost_arrow_ac6e6f456246d2c100c6577d38c5a1e7))

:named kinding_Tm_ghost_arrow_ac6e6f456246d2c100c6577d38c5a1e7))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_fb66773af7f5fd01e183cbed4fff8be6
;;; Fact-ids: Name MiniParse.Spec.Combinators.lift_parser'; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(677,24-677,42); use=MiniParse.Spec.Combinators.fst(677,24-677,42)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (Tm_abs_fb66773af7f5fd01e183cbed4fff8be6 @x1
@x2)
@x0)
(MiniParse.Spec.Base.parse @x2
(ApplyTT @x1
Tm_unit)
@x0))
 

:pattern ((ApplyTT (Tm_abs_fb66773af7f5fd01e183cbed4fff8be6 @x1
@x2)
@x0))
:qid interpretation_Tm_abs_fb66773af7f5fd01e183cbed4fff8be6))

:named interpretation_Tm_abs_fb66773af7f5fd01e183cbed4fff8be6))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name MiniParse.Spec.Combinators.lift_parser'; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(675,6-675,34); use=MiniParse.Spec.Combinators.fst(675,6-675,34)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_ghost_arrow_ac6e6f456246d2c100c6577d38c5a1e7 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_ghost_arrow_ac6e6f456246d2c100c6577d38c5a1e7 @x2)))
:qid MiniParse.Spec.Combinators_pre_typing_Tm_ghost_arrow_ac6e6f456246d2c100c6577d38c5a1e7))

:named MiniParse.Spec.Combinators_pre_typing_Tm_ghost_arrow_ac6e6f456246d2c100c6577d38c5a1e7))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_ac6e6f456246d2c100c6577d38c5a1e7
;;; Fact-ids: Name MiniParse.Spec.Combinators.lift_parser'; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(675,6-675,34); use=MiniParse.Spec.Combinators.fst(675,6-675,34)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_ghost_arrow_ac6e6f456246d2c100c6577d38c5a1e7 @x1))

;; def=MiniParse.Spec.Combinators.fst(675,6-675,34); use=MiniParse.Spec.Combinators.fst(675,6-675,34)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)
(HasType (ApplyTT @x0
@x2)
(MiniParse.Spec.Base.parser_spec @x1)))
 

:pattern ((ApplyTT @x0
@x2))
:qid MiniParse.Spec.Combinators_interpretation_Tm_ghost_arrow_ac6e6f456246d2c100c6577d38c5a1e7.1))
)
 

:pattern ((HasTypeZ @x0
(Tm_ghost_arrow_ac6e6f456246d2c100c6577d38c5a1e7 @x1)))
:qid MiniParse.Spec.Combinators_interpretation_Tm_ghost_arrow_ac6e6f456246d2c100c6577d38c5a1e7))

:named MiniParse.Spec.Combinators_interpretation_Tm_ghost_arrow_ac6e6f456246d2c100c6577d38c5a1e7))
(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(684,1-688,10)

(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)




















; Encoding query formula : forall (t: Type) (f: (_: Prims.unit -> Prims.GTot (MiniParse.Spec.Base.parser_spec t))).
;   (*  - Could not prove post-condition
; *)
;   (forall (b: MiniParse.Spec.Base.bytes).
;       MiniParse.Spec.Base.bparse (f ()).f b ==
;       MiniParse.Spec.Base.bparse (fun input -> MiniParse.Spec.Base.parse (f ()) input) b) /\
;   (forall (pure_result: Prims.unit).
;       (MiniParse.Spec.Base.no_lookahead_weak (f ()).f <==>
;         MiniParse.Spec.Base.no_lookahead_weak (fun input -> MiniParse.Spec.Base.parse (f ()) input)) ==>
;       (forall (b: MiniParse.Spec.Base.bytes).
;           MiniParse.Spec.Base.bparse (f ()).f b ==
;           MiniParse.Spec.Base.bparse (fun input -> MiniParse.Spec.Base.parse (f ()) input) b) /\
;       (forall (pure_result: Prims.unit).
;           (MiniParse.Spec.Base.no_lookahead (f ()).f <==>
;             MiniParse.Spec.Base.no_lookahead (fun input -> MiniParse.Spec.Base.parse (f ()) input)) ==>
;           (forall (b: MiniParse.Spec.Base.bytes).
;               MiniParse.Spec.Base.bparse (f ()).f b ==
;               MiniParse.Spec.Base.bparse (fun input -> MiniParse.Spec.Base.parse (f ()) input) b) /\
;           (forall (pure_result: Prims.unit).
;               (MiniParse.Spec.Base.injective (f ()).f <==>
;                 MiniParse.Spec.Base.injective (fun input -> MiniParse.Spec.Base.parse (f ()) input)) ==>
;               MiniParse.Spec.Base.no_lookahead_weak (fun input ->
;                     MiniParse.Spec.Base.parse (f ()) input) /\
;               MiniParse.Spec.Base.injective (fun input -> MiniParse.Spec.Base.parse (f ()) input) /\
;               MiniParse.Spec.Base.no_lookahead (fun input -> MiniParse.Spec.Base.parse (f ()) input)
;           )))


; Context: While encoding a query
; While typechecking the top-level declaration `let lift_parser`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_ghost_arrow_ac6e6f456246d2c100c6577d38c5a1e7 @x0)))

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(685,2-685,23)
(and 
;; def=MiniParse.Spec.Base.fst(91,12-93,3); use=MiniParse.Spec.Combinators.fst(685,2-685,23)
(forall ((@x2 Term))
 (! (implies (HasType @x2
MiniParse.Spec.Base.bytes)

;; def=MiniParse.Spec.Base.fst(92,25-92,51); use=MiniParse.Spec.Combinators.fst(685,2-685,23)
(or label_1

;; def=MiniParse.Spec.Base.fst(92,25-92,51); use=MiniParse.Spec.Combinators.fst(685,2-685,23)
(= (MiniParse.Spec.Base.bparse @x0
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
(ApplyTT @x1
Tm_unit))
@x2)
(MiniParse.Spec.Base.bparse @x0
(Tm_abs_fb66773af7f5fd01e183cbed4fff8be6 @x1
@x0)
@x2))
)
)
 
;;no pats
:qid @query.1))


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(685,2-685,23)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
Prims.unit)

;; def=MiniParse.Spec.Base.fst(94,11-96,3); use=MiniParse.Spec.Combinators.fst(685,2-685,23)
(iff 
;; def=MiniParse.Spec.Base.fst(95,4-95,24); use=MiniParse.Spec.Combinators.fst(685,2-685,23)
(Valid 
;; def=MiniParse.Spec.Base.fst(95,4-95,24); use=MiniParse.Spec.Combinators.fst(685,2-685,23)
(MiniParse.Spec.Base.no_lookahead_weak @x0
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
(ApplyTT @x1
Tm_unit)))
)


;; def=MiniParse.Spec.Base.fst(95,30-95,50); use=MiniParse.Spec.Combinators.fst(685,2-685,23)
(Valid 
;; def=MiniParse.Spec.Base.fst(95,30-95,50); use=MiniParse.Spec.Combinators.fst(685,2-685,23)
(MiniParse.Spec.Base.no_lookahead_weak @x0
(Tm_abs_fb66773af7f5fd01e183cbed4fff8be6 @x1
@x0))
)
)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(686,2-686,18)
(and 
;; def=MiniParse.Spec.Base.fst(229,12-231,3); use=MiniParse.Spec.Combinators.fst(686,2-686,18)
(forall ((@x3 Term))
 (! (implies (HasType @x3
MiniParse.Spec.Base.bytes)

;; def=MiniParse.Spec.Base.fst(230,24-230,50); use=MiniParse.Spec.Combinators.fst(686,2-686,18)
(or label_2

;; def=MiniParse.Spec.Base.fst(230,24-230,50); use=MiniParse.Spec.Combinators.fst(686,2-686,18)
(= (MiniParse.Spec.Base.bparse @x0
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
(ApplyTT @x1
Tm_unit))
@x3)
(MiniParse.Spec.Base.bparse @x0
(Tm_abs_fb66773af7f5fd01e183cbed4fff8be6 @x1
@x0)
@x3))
)
)
 
;;no pats
:qid @query.3))


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(686,2-686,18)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.unit)

;; def=MiniParse.Spec.Base.fst(232,11-234,3); use=MiniParse.Spec.Combinators.fst(686,2-686,18)
(iff 
;; def=MiniParse.Spec.Base.fst(233,4-233,19); use=MiniParse.Spec.Combinators.fst(686,2-686,18)
(Valid 
;; def=MiniParse.Spec.Base.fst(233,4-233,19); use=MiniParse.Spec.Combinators.fst(686,2-686,18)
(MiniParse.Spec.Base.no_lookahead @x0
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
(ApplyTT @x1
Tm_unit)))
)


;; def=MiniParse.Spec.Base.fst(233,25-233,40); use=MiniParse.Spec.Combinators.fst(686,2-686,18)
(Valid 
;; def=MiniParse.Spec.Base.fst(233,25-233,40); use=MiniParse.Spec.Combinators.fst(686,2-686,18)
(MiniParse.Spec.Base.no_lookahead @x0
(Tm_abs_fb66773af7f5fd01e183cbed4fff8be6 @x1
@x0))
)
)
)

;; def=Prims.fst(441,29-441,97); use=MiniParse.Spec.Combinators.fst(687,2-687,15)
(and 
;; def=MiniParse.Spec.Base.fst(163,12-165,3); use=MiniParse.Spec.Combinators.fst(687,2-687,15)
(forall ((@x4 Term))
 (! (implies (HasType @x4
MiniParse.Spec.Base.bytes)

;; def=MiniParse.Spec.Base.fst(164,24-164,50); use=MiniParse.Spec.Combinators.fst(687,2-687,15)
(or label_3

;; def=MiniParse.Spec.Base.fst(164,24-164,50); use=MiniParse.Spec.Combinators.fst(687,2-687,15)
(= (MiniParse.Spec.Base.bparse @x0
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
(ApplyTT @x1
Tm_unit))
@x4)
(MiniParse.Spec.Base.bparse @x0
(Tm_abs_fb66773af7f5fd01e183cbed4fff8be6 @x1
@x0)
@x4))
)
)
 
;;no pats
:qid @query.5))


;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.Combinators.fst(687,2-687,15)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.unit)

;; def=MiniParse.Spec.Base.fst(166,11-168,3); use=MiniParse.Spec.Combinators.fst(687,2-687,15)
(iff 
;; def=MiniParse.Spec.Base.fst(167,4-167,16); use=MiniParse.Spec.Combinators.fst(687,2-687,15)
(Valid 
;; def=MiniParse.Spec.Base.fst(167,4-167,16); use=MiniParse.Spec.Combinators.fst(687,2-687,15)
(MiniParse.Spec.Base.injective @x0
(MiniParse.Spec.Base.__proj__Parser__item__f @x0
(ApplyTT @x1
Tm_unit)))
)


;; def=MiniParse.Spec.Base.fst(167,22-167,34); use=MiniParse.Spec.Combinators.fst(687,2-687,15)
(Valid 
;; def=MiniParse.Spec.Base.fst(167,22-167,34); use=MiniParse.Spec.Combinators.fst(687,2-687,15)
(MiniParse.Spec.Base.injective @x0
(Tm_abs_fb66773af7f5fd01e183cbed4fff8be6 @x1
@x0))
)
)
)

;; def=MiniParse.Spec.Base.fst(241,4-243,18); use=MiniParse.Spec.Combinators.fst(688,9-688,10)
(and 
;; def=MiniParse.Spec.Base.fst(241,4-241,23); use=MiniParse.Spec.Combinators.fst(688,9-688,10)
(or label_4

;; def=MiniParse.Spec.Base.fst(241,4-241,23); use=MiniParse.Spec.Combinators.fst(688,9-688,10)
(Valid 
;; def=MiniParse.Spec.Base.fst(241,4-241,23); use=MiniParse.Spec.Combinators.fst(688,9-688,10)
(MiniParse.Spec.Base.no_lookahead_weak @x0
(Tm_abs_fb66773af7f5fd01e183cbed4fff8be6 @x1
@x0))
)
)


;; def=MiniParse.Spec.Base.fst(242,4-242,15); use=MiniParse.Spec.Combinators.fst(688,9-688,10)
(or label_5

;; def=MiniParse.Spec.Base.fst(242,4-242,15); use=MiniParse.Spec.Combinators.fst(688,9-688,10)
(Valid 
;; def=MiniParse.Spec.Base.fst(242,4-242,15); use=MiniParse.Spec.Combinators.fst(688,9-688,10)
(MiniParse.Spec.Base.injective @x0
(Tm_abs_fb66773af7f5fd01e183cbed4fff8be6 @x1
@x0))
)
)


;; def=MiniParse.Spec.Base.fst(243,4-243,18); use=MiniParse.Spec.Combinators.fst(688,9-688,10)
(or label_6

;; def=MiniParse.Spec.Base.fst(243,4-243,18); use=MiniParse.Spec.Combinators.fst(688,9-688,10)
(Valid 
;; def=MiniParse.Spec.Base.fst(243,4-243,18); use=MiniParse.Spec.Combinators.fst(688,9-688,10)
(MiniParse.Spec.Base.no_lookahead @x0
(Tm_abs_fb66773af7f5fd01e183cbed4fff8be6 @x1
@x0))
)
)
)
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query.2))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 8714496)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.lift_parser, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, MiniParse.Spec.Combinators_interpretation_Tm_ghost_arrow_ac6e6f456246d2c100c6577d38c5a1e7, equation_MiniParse.Spec.Base.bparse, equation_MiniParse.Spec.Base.parse, fuel_guarded_inversion_MiniParse.Spec.Base.parser_spec, interpretation_Tm_abs_fb66773af7f5fd01e183cbed4fff8be6, proj_equation_MiniParse.Spec.Base.Parser_f, refinement_interpretation_Tm_refine_95482e91a565bbc8d113ac6e95692d97, typing_MiniParse.Spec.Base.__proj__Parser__item__f, unit_typing

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let lift_parser


; <Start encoding let lift_parser>


(declare-fun MiniParse.Spec.Combinators.lift_parser (Term Term) Term)

;;;;;;;;;;;;;;;;f: (_: Prims.unit -> Prims.GTot (MiniParse.Spec.Base.parser_spec t))   -> MiniParse.Spec.Base.parser_spec t
(declare-fun Tm_arrow_59650df95974a587798fd6dc9814cabf () Term)
(declare-fun MiniParse.Spec.Combinators.lift_parser@tok () Term)




; </end encoding let lift_parser>

;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_9a34a9deaac3ca72ad48c3ec79b6656c
;;; Fact-ids: Name FStar.Seq.Properties.ghost_find_l; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(340,23-340,48); use=FStar.Seq.Properties.fsti(340,34-340,48)
(forall ((@x0 Term))
 (! (HasType (Tm_ghost_arrow_9a34a9deaac3ca72ad48c3ec79b6656c @x0)
Tm_type)
 

:pattern ((HasType (Tm_ghost_arrow_9a34a9deaac3ca72ad48c3ec79b6656c @x0)
Tm_type))
:qid kinding_Tm_ghost_arrow_9a34a9deaac3ca72ad48c3ec79b6656c))

:named kinding_Tm_ghost_arrow_9a34a9deaac3ca72ad48c3ec79b6656c))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Seq.Properties.ghost_find_l; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(340,23-340,48); use=FStar.Seq.Properties.fsti(340,34-340,48)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_ghost_arrow_9a34a9deaac3ca72ad48c3ec79b6656c @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_ghost_arrow_9a34a9deaac3ca72ad48c3ec79b6656c @x2)))
:qid FStar.Seq.Properties_pre_typing_Tm_ghost_arrow_9a34a9deaac3ca72ad48c3ec79b6656c))

:named FStar.Seq.Properties_pre_typing_Tm_ghost_arrow_9a34a9deaac3ca72ad48c3ec79b6656c))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_9a34a9deaac3ca72ad48c3ec79b6656c
;;; Fact-ids: Name FStar.Seq.Properties.ghost_find_l; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(340,23-340,48); use=FStar.Seq.Properties.fsti(340,34-340,48)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_ghost_arrow_9a34a9deaac3ca72ad48c3ec79b6656c @x1))

;; def=FStar.Seq.Properties.fsti(340,23-340,48); use=FStar.Seq.Properties.fsti(340,34-340,48)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x1)
(HasType (ApplyTT @x0
@x2)
Prims.bool))
 

:pattern ((ApplyTT @x0
@x2))
:qid FStar.Seq.Properties_interpretation_Tm_ghost_arrow_9a34a9deaac3ca72ad48c3ec79b6656c.1))
)
 

:pattern ((HasTypeZ @x0
(Tm_ghost_arrow_9a34a9deaac3ca72ad48c3ec79b6656c @x1)))
:qid FStar.Seq.Properties_interpretation_Tm_ghost_arrow_9a34a9deaac3ca72ad48c3ec79b6656c))

:named FStar.Seq.Properties_interpretation_Tm_ghost_arrow_9a34a9deaac3ca72ad48c3ec79b6656c))
(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(697,2-703,3)

(declare-fun label_1 () Bool)

(declare-fun Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(702,21-702,42); use=MiniParse.Spec.Combinators.fst(698,4-702,42)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef))

:named refinement_kinding_Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(702,21-702,42); use=MiniParse.Spec.Combinators.fst(698,4-702,42)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef @x2
@x3))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=MiniParse.Spec.Combinators.fst(702,28-702,39); use=MiniParse.Spec.Combinators.fst(698,4-702,42)
(= (ApplyTT @x3
@x1)
(BoxBool true))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef @x2
@x3)))
:qid refinement_interpretation_Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef))

:named refinement_interpretation_Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef))
;;;;;;;;;;;;;;;;haseq for Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef
;;; Fact-ids: 
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(702,21-702,42); use=MiniParse.Spec.Combinators.fst(698,4-702,42)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef @x0
@x1)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef @x0
@x1))))
:qid haseqTm_refine_47a1a40ac1f83f95f3b324d5e73614ef))

:named haseqTm_refine_47a1a40ac1f83f95f3b324d5e73614ef))


; Encoding query formula : forall (t: Type) (f: (_: t -> Prims.GTot Prims.bool)) (v: t).
;   (*  - Could not prove post-condition
; *)
;   forall (_: Prims.unit).
;     (*  - Could not prove post-condition
; *)
;     forall (any_result: Prims.bool).
;       f v == any_result ==>
;       (forall (k: Prims.pure_post (MiniParse.Spec.Base.parser_spec (x: t{f x == true}))).
;           (forall (x: MiniParse.Spec.Base.parser_spec (x: t{f x == true})).
;               {:pattern Prims.guard_free (k x)}
;               Prims.auto_squash (k x)) ==>
;           f v == true ==> f v == true)


; Context: While encoding a query
; While typechecking the top-level declaration `let parse_filter_payload`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_ghost_arrow_9a34a9deaac3ca72ad48c3ec79b6656c @x0))
(HasType @x2
@x0))

;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(697,2-703,3)
(forall ((@x3 Term))
 (! (implies (HasType @x3
Prims.unit)

;; def=Prims.fst(451,66-451,102); use=MiniParse.Spec.Combinators.fst(698,4-702,42)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.bool)

;; def=MiniParse.Spec.Combinators.fst(698,7-698,10); use=MiniParse.Spec.Combinators.fst(698,7-698,10)
(= (ApplyTT @x1
@x2)
@x4)
)

;; def=dummy(0,0-0,0); use=MiniParse.Spec.Combinators.fst(697,2-703,3)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Prims.pure_post (MiniParse.Spec.Base.parser_spec (Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef @x0
@x1))))

;; def=Prims.fst(402,27-402,88); use=MiniParse.Spec.Combinators.fst(698,4-702,42)
(forall ((@x6 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=MiniParse.Spec.Combinators.fst(698,4-702,42)
(Valid 
;; def=Prims.fst(402,84-402,87); use=MiniParse.Spec.Combinators.fst(698,4-702,42)
(ApplyTT @x5
@x6)
)

 

:pattern ((ApplyTT @x5
@x6))
:qid @query.4))


;; def=MiniParse.Spec.Combinators.fst(698,7-698,10); use=MiniParse.Spec.Combinators.fst(698,7-698,10)
(= (ApplyTT @x1
@x2)
(BoxBool true))
)

;; def=MiniParse.Spec.Combinators.fst(700,23-700,34); use=MiniParse.Spec.Combinators.fst(700,41-700,42)
(or label_1

;; def=MiniParse.Spec.Combinators.fst(700,23-700,34); use=MiniParse.Spec.Combinators.fst(700,41-700,42)
(= (ApplyTT @x1
@x2)
(BoxBool true))
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 8714496)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.parse_filter_payload, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let parse_filter_payload


; <Start encoding let parse_filter_payload>


(declare-fun MiniParse.Spec.Combinators.parse_filter_payload (Term Term Term) Term)

(declare-fun Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef (Term Term) Term)
;;;;;;;;;;;;;;;;f: (_: t -> Prims.GTot Prims.bool) -> v: t -> MiniParse.Spec.Base.parser_spec (x: t{f x == true})
(declare-fun Tm_arrow_dd40325d19cf9e9f3e68140eb0c1fb89 () Term)
(declare-fun MiniParse.Spec.Combinators.parse_filter_payload@tok () Term)







;;;;;;;;;;;;;;;;input: MiniParse.Spec.Base.bytes   -> Prims.GTot     (FStar.Pervasives.Native.option (x: t{f x == true} & MiniParse.Spec.Base.consumed_length input))
(declare-fun Tm_ghost_arrow_a887c201afc5c7ee61d46806b9f63ea8 (Term Term) Term)
(declare-fun Tm_abs_2c62dd15e28a3b1b5c37052636225b47 (Term Term Term) Term)

; </end encoding let parse_filter_payload>

;;;;;;;;;;;;;;;;typing_Tm_abs_2c62dd15e28a3b1b5c37052636225b47
;;; Fact-ids: Name MiniParse.Spec.Combinators.parse_filter_payload; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(677,24-677,42); use=MiniParse.Spec.Combinators.fst(697,2-697,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_abs_2c62dd15e28a3b1b5c37052636225b47 @x0
@x1
@x2)
(Tm_ghost_arrow_a887c201afc5c7ee61d46806b9f63ea8 @x1
@x2))
 

:pattern ((Tm_abs_2c62dd15e28a3b1b5c37052636225b47 @x0
@x1
@x2))
:qid typing_Tm_abs_2c62dd15e28a3b1b5c37052636225b47))

:named typing_Tm_abs_2c62dd15e28a3b1b5c37052636225b47))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Combinators.parse_filter_payload; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(692,4-692,24); use=MiniParse.Spec.Combinators.fst(692,4-692,24)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_ghost_arrow_9a34a9deaac3ca72ad48c3ec79b6656c @x0))
(HasType @x2
@x0))
(HasType (MiniParse.Spec.Combinators.parse_filter_payload @x0
@x1
@x2)
(MiniParse.Spec.Base.parser_spec (Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef @x0
@x1))))
 

:pattern ((MiniParse.Spec.Combinators.parse_filter_payload @x0
@x1
@x2))
:qid typing_MiniParse.Spec.Combinators.parse_filter_payload))

:named typing_MiniParse.Spec.Combinators.parse_filter_payload))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Combinators.fail_parser; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(151,4-151,15); use=MiniParse.Spec.Combinators.fst(151,4-151,15)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (MiniParse.Spec.Combinators.fail_parser @x0)
(MiniParse.Spec.Base.parser_spec @x0)))
 

:pattern ((MiniParse.Spec.Combinators.fail_parser @x0))
:qid typing_MiniParse.Spec.Combinators.fail_parser))

:named typing_MiniParse.Spec.Combinators.fail_parser))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name MiniParse.Spec.Combinators.parse_filter_payload; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(692,4-692,24); use=MiniParse.Spec.Combinators.fst(692,4-692,24)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.parse_filter_payload@tok
@x0)
@x1)
@x2)
(MiniParse.Spec.Combinators.parse_filter_payload @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.parse_filter_payload@tok
@x0)
@x1)
@x2))
:qid token_correspondence_MiniParse.Spec.Combinators.parse_filter_payload))

:named token_correspondence_MiniParse.Spec.Combinators.parse_filter_payload))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name MiniParse.Spec.Combinators.parse_filter_payload; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(696,19-696,41); use=MiniParse.Spec.Combinators.fst(696,19-696,41)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef))

:named refinement_kinding_Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name MiniParse.Spec.Combinators.parse_filter_payload; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(696,19-696,41); use=MiniParse.Spec.Combinators.fst(696,19-696,41)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef @x2
@x3))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=MiniParse.Spec.Combinators.fst(696,27-696,38); use=MiniParse.Spec.Combinators.fst(696,27-696,38)
(= (ApplyTT @x3
@x1)
(BoxBool true))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef @x2
@x3)))
:qid refinement_interpretation_Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef))

:named refinement_interpretation_Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef))
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_a887c201afc5c7ee61d46806b9f63ea8
;;; Fact-ids: Name MiniParse.Spec.Combinators.parse_filter_payload; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(677,14-677,19); use=MiniParse.Spec.Combinators.fst(697,2-697,13)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_ghost_arrow_a887c201afc5c7ee61d46806b9f63ea8 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_ghost_arrow_a887c201afc5c7ee61d46806b9f63ea8 @x0
@x1)
Tm_type))
:qid kinding_Tm_ghost_arrow_a887c201afc5c7ee61d46806b9f63ea8))

:named kinding_Tm_ghost_arrow_a887c201afc5c7ee61d46806b9f63ea8))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_dd40325d19cf9e9f3e68140eb0c1fb89
;;; Fact-ids: Name MiniParse.Spec.Combinators.parse_filter_payload; Namespace MiniParse.Spec.Combinators
(assert (! (HasType Tm_arrow_dd40325d19cf9e9f3e68140eb0c1fb89
Tm_type)
:named kinding_Tm_arrow_dd40325d19cf9e9f3e68140eb0c1fb89))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_2c62dd15e28a3b1b5c37052636225b47
;;; Fact-ids: Name MiniParse.Spec.Combinators.parse_filter_payload; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(677,24-677,42); use=MiniParse.Spec.Combinators.fst(697,2-697,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (Tm_abs_2c62dd15e28a3b1b5c37052636225b47 @x1
@x2
@x3)
@x0)
(MiniParse.Spec.Base.parse (Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef @x3
@x2)
(let ((@lb4 (ApplyTT @x2
@x1)))
(ite (= @lb4
(BoxBool true))
(MiniParse.Spec.Combinators.parse_ret (Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef @x3
@x2)
@x1)
(MiniParse.Spec.Combinators.fail_parser (Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef @x3
@x2))))
@x0))
 

:pattern ((ApplyTT (Tm_abs_2c62dd15e28a3b1b5c37052636225b47 @x1
@x2
@x3)
@x0))
:qid interpretation_Tm_abs_2c62dd15e28a3b1b5c37052636225b47))

:named interpretation_Tm_abs_2c62dd15e28a3b1b5c37052636225b47))
;;;;;;;;;;;;;;;;haseq for Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef
;;; Fact-ids: Name MiniParse.Spec.Combinators.parse_filter_payload; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(696,19-696,41); use=MiniParse.Spec.Combinators.fst(696,19-696,41)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef @x0
@x1)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef @x0
@x1))))
:qid haseqTm_refine_47a1a40ac1f83f95f3b324d5e73614ef))

:named haseqTm_refine_47a1a40ac1f83f95f3b324d5e73614ef))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name MiniParse.Spec.Combinators.parse_filter_payload; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(692,4-692,24); use=MiniParse.Spec.Combinators.fst(692,4-692,24)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType MiniParse.Spec.Combinators.parse_filter_payload@tok
Tm_arrow_dd40325d19cf9e9f3e68140eb0c1fb89))

;; def=MiniParse.Spec.Combinators.fst(692,4-692,24); use=MiniParse.Spec.Combinators.fst(692,4-692,24)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Combinators.parse_filter_payload@tok
@x1)
@x2)
@x3)
(MiniParse.Spec.Combinators.parse_filter_payload @x1
@x2
@x3))
 

:pattern ((MiniParse.Spec.Combinators.parse_filter_payload @x1
@x2
@x3))
:qid function_token_typing_MiniParse.Spec.Combinators.parse_filter_payload.1))
)
 

:pattern ((ApplyTT @x0
MiniParse.Spec.Combinators.parse_filter_payload@tok))
:qid function_token_typing_MiniParse.Spec.Combinators.parse_filter_payload))

:named function_token_typing_MiniParse.Spec.Combinators.parse_filter_payload))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Combinators.parse_filter_payload
;;; Fact-ids: Name MiniParse.Spec.Combinators.parse_filter_payload; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(692,4-692,24); use=MiniParse.Spec.Combinators.fst(692,4-692,24)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (MiniParse.Spec.Combinators.parse_filter_payload @x0
@x1
@x2)
(MiniParse.Spec.Base.Parser (Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef @x0
@x1)
(Tm_abs_2c62dd15e28a3b1b5c37052636225b47 @x2
@x1
@x0)))
 

:pattern ((MiniParse.Spec.Combinators.parse_filter_payload @x0
@x1
@x2))
:qid equation_MiniParse.Spec.Combinators.parse_filter_payload))

:named equation_MiniParse.Spec.Combinators.parse_filter_payload))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Combinators.fail_parser
;;; Fact-ids: Name MiniParse.Spec.Combinators.fail_parser; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(151,4-151,15); use=MiniParse.Spec.Combinators.fst(151,4-151,15)
(forall ((@x0 Term))
 (! (= (MiniParse.Spec.Combinators.fail_parser @x0)
(MiniParse.Spec.Base.Parser @x0
(MiniParse.Spec.Combinators.fail_parser_ @x0)))
 

:pattern ((MiniParse.Spec.Combinators.fail_parser @x0))
:qid equation_MiniParse.Spec.Combinators.fail_parser))

:named equation_MiniParse.Spec.Combinators.fail_parser))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name MiniParse.Spec.Combinators.parse_filter_payload; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(677,14-677,19); use=MiniParse.Spec.Combinators.fst(697,2-697,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_ghost_arrow_a887c201afc5c7ee61d46806b9f63ea8 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_ghost_arrow_a887c201afc5c7ee61d46806b9f63ea8 @x2
@x3)))
:qid MiniParse.Spec.Combinators_pre_typing_Tm_ghost_arrow_a887c201afc5c7ee61d46806b9f63ea8))

:named MiniParse.Spec.Combinators_pre_typing_Tm_ghost_arrow_a887c201afc5c7ee61d46806b9f63ea8))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name MiniParse.Spec.Combinators.parse_filter_payload; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(693,4-696,42); use=MiniParse.Spec.Combinators.fst(693,7-696,42)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_dd40325d19cf9e9f3e68140eb0c1fb89)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_dd40325d19cf9e9f3e68140eb0c1fb89))
:qid MiniParse.Spec.Combinators_pre_typing_Tm_arrow_dd40325d19cf9e9f3e68140eb0c1fb89))

:named MiniParse.Spec.Combinators_pre_typing_Tm_arrow_dd40325d19cf9e9f3e68140eb0c1fb89))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_a887c201afc5c7ee61d46806b9f63ea8
;;; Fact-ids: Name MiniParse.Spec.Combinators.parse_filter_payload; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(677,14-677,19); use=MiniParse.Spec.Combinators.fst(697,2-697,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_ghost_arrow_a887c201afc5c7ee61d46806b9f63ea8 @x1
@x2))

;; def=MiniParse.Spec.Combinators.fst(677,14-677,19); use=MiniParse.Spec.Combinators.fst(697,2-697,13)
(forall ((@x3 Term))
 (! (implies (HasType @x3
MiniParse.Spec.Base.bytes)
(HasType (ApplyTT @x0
@x3)
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 (Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef @x2
@x1)
(MiniParse.Spec.Base.consumed_length @x3)))))
 

:pattern ((ApplyTT @x0
@x3))
:qid MiniParse.Spec.Combinators_interpretation_Tm_ghost_arrow_a887c201afc5c7ee61d46806b9f63ea8.1))
)
 

:pattern ((HasTypeZ @x0
(Tm_ghost_arrow_a887c201afc5c7ee61d46806b9f63ea8 @x1
@x2)))
:qid MiniParse.Spec.Combinators_interpretation_Tm_ghost_arrow_a887c201afc5c7ee61d46806b9f63ea8))

:named MiniParse.Spec.Combinators_interpretation_Tm_ghost_arrow_a887c201afc5c7ee61d46806b9f63ea8))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_dd40325d19cf9e9f3e68140eb0c1fb89
;;; Fact-ids: Name MiniParse.Spec.Combinators.parse_filter_payload; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(693,4-696,42); use=MiniParse.Spec.Combinators.fst(693,7-696,42)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_dd40325d19cf9e9f3e68140eb0c1fb89)
(and 
;; def=MiniParse.Spec.Combinators.fst(693,4-696,42); use=MiniParse.Spec.Combinators.fst(693,7-696,42)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(Tm_ghost_arrow_9a34a9deaac3ca72ad48c3ec79b6656c @x1))
(HasType @x3
@x1))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
(MiniParse.Spec.Base.parser_spec (Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef @x1
@x2))))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_dd40325d19cf9e9f3e68140eb0c1fb89.1))

(IsTotFun @x0)

;; def=MiniParse.Spec.Combinators.fst(693,4-696,42); use=MiniParse.Spec.Combinators.fst(693,7-696,42)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Tm_type)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_dd40325d19cf9e9f3e68140eb0c1fb89.2))


;; def=MiniParse.Spec.Combinators.fst(693,4-696,42); use=MiniParse.Spec.Combinators.fst(693,7-696,42)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(Tm_ghost_arrow_9a34a9deaac3ca72ad48c3ec79b6656c @x1)))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_dd40325d19cf9e9f3e68140eb0c1fb89.3))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_dd40325d19cf9e9f3e68140eb0c1fb89))
:qid MiniParse.Spec.Combinators_interpretation_Tm_arrow_dd40325d19cf9e9f3e68140eb0c1fb89))

:named MiniParse.Spec.Combinators_interpretation_Tm_arrow_dd40325d19cf9e9f3e68140eb0c1fb89))
(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(710,2-710,39)

(declare-fun label_1 () Bool)


;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: 
(assert (! (Valid (ApplyTT __uu__PartialApp
MiniParse.Spec.Combinators.parse_filter_payload@tok))
:named @kick_partial_app_4e1a758f12c5ac1ac9208ba4596ce95c))

; Encoding query formula : forall (t: Type) (p: MiniParse.Spec.Base.parser_spec t) (f: (_: t -> Prims.GTot Prims.bool)).
;   (*  - Could not prove post-condition
; *)
;   Prims.auto_squash (MiniParse.Spec.Combinators.and_then_cases_injective (MiniParse.Spec.Combinators.parse_filter_payload
;             f))


; Context: While encoding a query
; While typechecking the top-level declaration `let parse_filter`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.parser_spec @x0))
(HasType @x2
(Tm_ghost_arrow_9a34a9deaac3ca72ad48c3ec79b6656c @x0)))

;; def=MiniParse.Spec.Combinators.fst(440,12-442,3); use=MiniParse.Spec.Combinators.fst(710,5-710,13)
(or label_1

;; def=MiniParse.Spec.Combinators.fst(440,12-442,3); use=MiniParse.Spec.Combinators.fst(710,5-710,13)
(Valid 
;; def=MiniParse.Spec.Combinators.fst(440,12-442,3); use=MiniParse.Spec.Combinators.fst(710,5-710,13)
(MiniParse.Spec.Combinators.and_then_cases_injective @x0
(Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef @x0
@x2)
(ApplyTT (ApplyTT MiniParse.Spec.Combinators.parse_filter_payload@tok
@x0)
@x2))
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 8714496)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.parse_filter, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, MiniParse.Spec.Combinators_interpretation_Tm_arrow_dd40325d19cf9e9f3e68140eb0c1fb89, constructor_distinct_FStar.Pervasives.Native.None, data_elim_MiniParse.Spec.Base.Parser, equation_MiniParse.Spec.Base.bare_parser, equation_MiniParse.Spec.Base.bparse, equation_MiniParse.Spec.Base.consumed_length, equation_MiniParse.Spec.Base.parse, equation_MiniParse.Spec.Combinators.and_then_cases_injective, equation_MiniParse.Spec.Combinators.and_then_cases_injective_, equation_MiniParse.Spec.Combinators.and_then_cases_injective_precond, equation_MiniParse.Spec.Combinators.coerce_to_bare_param_parser, equation_MiniParse.Spec.Combinators.fail_parser, equation_MiniParse.Spec.Combinators.fail_parser_, equation_MiniParse.Spec.Combinators.parse_filter_payload, equation_MiniParse.Spec.Combinators.parse_ret, fuel_guarded_inversion_FStar.Pervasives.Native.option, fuel_guarded_inversion_MiniParse.Spec.Base.parser_spec, function_token_typing_MiniParse.Spec.Combinators.parse_filter_payload, interpretation_Tm_abs_24c49183d745861a79c9e705ccd478d5, interpretation_Tm_abs_2c62dd15e28a3b1b5c37052636225b47, interpretation_Tm_abs_70f489119d60d8732ac22a9de0b5f7be, proj_equation_MiniParse.Spec.Base.Parser_f, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Some_v, projection_inverse_MiniParse.Spec.Base.Parser_f, token_correspondence_MiniParse.Spec.Combinators.coerce_to_bare_param_parser, token_correspondence_MiniParse.Spec.Combinators.parse_filter_payload, typing_MiniParse.Spec.Base.bparse, typing_MiniParse.Spec.Base.parse, typing_MiniParse.Spec.Combinators.fail_parser, typing_Tm_abs_24c49183d745861a79c9e705ccd478d5

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let parse_filter


; <Start encoding let parse_filter>


(declare-fun MiniParse.Spec.Combinators.parse_filter (Term Term Term) Term)


;;;;;;;;;;;;;;;;p: MiniParse.Spec.Base.parser_spec t -> f: (_: t -> Prims.GTot Prims.bool)   -> MiniParse.Spec.Base.parser_spec (x: t{f x == true})
(declare-fun Tm_arrow_411bd0b36152d316a78d2cd5db308f39 () Term)
(declare-fun MiniParse.Spec.Combinators.parse_filter@tok () Term)




; </end encoding let parse_filter>


; encoding sigelt let serialize_filter'


; <Start encoding let serialize_filter'>


(declare-fun MiniParse.Spec.Combinators.serialize_filter_ (Term Term Term Term) Term)


;;;;;;;;;;;;;;;;s: MiniParse.Spec.Base.serializer_spec p -> f: (_: t -> Prims.GTot Prims.bool)   -> MiniParse.Spec.Base.bare_serializer (x: t{f x == true})
(declare-fun Tm_arrow_9866077b0e71eea1a17290163e6e9b02 () Term)
(declare-fun MiniParse.Spec.Combinators.serialize_filter_@tok () Term)




;;;;;;;;;;;;;;;;input: t{f input == true} -> Prims.GTot MiniParse.Spec.Base.bytes
(declare-fun Tm_ghost_arrow_243f74750f91235d9f183b18d2e554d2 (Term Term) Term)
(declare-fun Tm_abs_f1ff1752f992f8166b0d544dd38cf6b2 (Term Term Term Term) Term)

; </end encoding let serialize_filter'>

;;;;;;;;;;;;;;;;typing_Tm_abs_f1ff1752f992f8166b0d544dd38cf6b2
;;; Fact-ids: Name MiniParse.Spec.Combinators.serialize_filter'; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(718,41-718,58); use=MiniParse.Spec.Combinators.fst(718,41-718,58)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_abs_f1ff1752f992f8166b0d544dd38cf6b2 @x0
@x1
@x2
@x3)
(Tm_ghost_arrow_243f74750f91235d9f183b18d2e554d2 @x2
@x3))
 

:pattern ((Tm_abs_f1ff1752f992f8166b0d544dd38cf6b2 @x0
@x1
@x2
@x3))
:qid typing_Tm_abs_f1ff1752f992f8166b0d544dd38cf6b2))

:named typing_Tm_abs_f1ff1752f992f8166b0d544dd38cf6b2))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Combinators.serialize_filter'; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(712,4-712,21); use=MiniParse.Spec.Combinators.fst(712,4-712,21)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.parser_spec @x0))
(HasType @x2
(MiniParse.Spec.Base.serializer_spec @x0
@x1))
(HasType @x3
(Tm_ghost_arrow_9a34a9deaac3ca72ad48c3ec79b6656c @x0)))
(HasType (MiniParse.Spec.Combinators.serialize_filter_ @x0
@x1
@x2
@x3)
(MiniParse.Spec.Base.bare_serializer (Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef @x0
@x3))))
 

:pattern ((MiniParse.Spec.Combinators.serialize_filter_ @x0
@x1
@x2
@x3))
:qid typing_MiniParse.Spec.Combinators.serialize_filter_))

:named typing_MiniParse.Spec.Combinators.serialize_filter_))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Combinators.parse_filter; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(705,4-705,16); use=MiniParse.Spec.Combinators.fst(705,4-705,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.parser_spec @x0))
(HasType @x2
(Tm_ghost_arrow_9a34a9deaac3ca72ad48c3ec79b6656c @x0)))
(HasType (MiniParse.Spec.Combinators.parse_filter @x0
@x1
@x2)
(MiniParse.Spec.Base.parser_spec (Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef @x0
@x2))))
 

:pattern ((MiniParse.Spec.Combinators.parse_filter @x0
@x1
@x2))
:qid typing_MiniParse.Spec.Combinators.parse_filter))

:named typing_MiniParse.Spec.Combinators.parse_filter))
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_243f74750f91235d9f183b18d2e554d2
;;; Fact-ids: Name MiniParse.Spec.Combinators.serialize_filter'; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(718,6-718,37); use=MiniParse.Spec.Combinators.fst(718,6-718,37)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_ghost_arrow_243f74750f91235d9f183b18d2e554d2 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_ghost_arrow_243f74750f91235d9f183b18d2e554d2 @x0
@x1)
Tm_type))
:qid kinding_Tm_ghost_arrow_243f74750f91235d9f183b18d2e554d2))

:named kinding_Tm_ghost_arrow_243f74750f91235d9f183b18d2e554d2))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_f1ff1752f992f8166b0d544dd38cf6b2
;;; Fact-ids: Name MiniParse.Spec.Combinators.serialize_filter'; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(718,41-718,58); use=MiniParse.Spec.Combinators.fst(718,41-718,58)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (Tm_abs_f1ff1752f992f8166b0d544dd38cf6b2 @x1
@x2
@x3
@x4)
@x0)
(MiniParse.Spec.Base.serialize @x4
@x1
@x2
@x0))
 

:pattern ((ApplyTT (Tm_abs_f1ff1752f992f8166b0d544dd38cf6b2 @x1
@x2
@x3
@x4)
@x0))
:qid interpretation_Tm_abs_f1ff1752f992f8166b0d544dd38cf6b2))

:named interpretation_Tm_abs_f1ff1752f992f8166b0d544dd38cf6b2))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Combinators.serialize_filter'
;;; Fact-ids: Name MiniParse.Spec.Combinators.serialize_filter'; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(712,4-712,21); use=MiniParse.Spec.Combinators.fst(712,4-712,21)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (MiniParse.Spec.Combinators.serialize_filter_ @x0
@x1
@x2
@x3)
(Tm_abs_f1ff1752f992f8166b0d544dd38cf6b2 @x1
@x2
@x3
@x0))
 

:pattern ((MiniParse.Spec.Combinators.serialize_filter_ @x0
@x1
@x2
@x3))
:qid equation_MiniParse.Spec.Combinators.serialize_filter_))

:named equation_MiniParse.Spec.Combinators.serialize_filter_))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Combinators.parse_filter
;;; Fact-ids: Name MiniParse.Spec.Combinators.parse_filter; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(705,4-705,16); use=MiniParse.Spec.Combinators.fst(705,4-705,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (MiniParse.Spec.Combinators.parse_filter @x0
@x1
@x2)
(MiniParse.Spec.Combinators.and_then @x0
@x1
(Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef @x0
@x2)
(ApplyTT (ApplyTT MiniParse.Spec.Combinators.parse_filter_payload@tok
@x0)
@x2)))
 

:pattern ((MiniParse.Spec.Combinators.parse_filter @x0
@x1
@x2))
:qid equation_MiniParse.Spec.Combinators.parse_filter))

:named equation_MiniParse.Spec.Combinators.parse_filter))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name MiniParse.Spec.Combinators.serialize_filter'; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(718,6-718,37); use=MiniParse.Spec.Combinators.fst(718,6-718,37)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_ghost_arrow_243f74750f91235d9f183b18d2e554d2 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_ghost_arrow_243f74750f91235d9f183b18d2e554d2 @x2
@x3)))
:qid MiniParse.Spec.Combinators_pre_typing_Tm_ghost_arrow_243f74750f91235d9f183b18d2e554d2))

:named MiniParse.Spec.Combinators_pre_typing_Tm_ghost_arrow_243f74750f91235d9f183b18d2e554d2))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_243f74750f91235d9f183b18d2e554d2
;;; Fact-ids: Name MiniParse.Spec.Combinators.serialize_filter'; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(718,6-718,37); use=MiniParse.Spec.Combinators.fst(718,6-718,37)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_ghost_arrow_243f74750f91235d9f183b18d2e554d2 @x1
@x2))

;; def=MiniParse.Spec.Combinators.fst(718,6-718,37); use=MiniParse.Spec.Combinators.fst(718,6-718,37)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef @x2
@x1))
(HasType (ApplyTT @x0
@x3)
MiniParse.Spec.Base.bytes))
 

:pattern ((ApplyTT @x0
@x3))
:qid MiniParse.Spec.Combinators_interpretation_Tm_ghost_arrow_243f74750f91235d9f183b18d2e554d2.1))
)
 

:pattern ((HasTypeZ @x0
(Tm_ghost_arrow_243f74750f91235d9f183b18d2e554d2 @x1
@x2)))
:qid MiniParse.Spec.Combinators_interpretation_Tm_ghost_arrow_243f74750f91235d9f183b18d2e554d2))

:named MiniParse.Spec.Combinators_interpretation_Tm_ghost_arrow_243f74750f91235d9f183b18d2e554d2))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name MiniParse.Spec.Combinators.parse_filter; Namespace MiniParse.Spec.Combinators
(assert (! (Valid (ApplyTT __uu__PartialApp
MiniParse.Spec.Combinators.parse_filter_payload@tok))
:named @kick_partial_app_4e1a758f12c5ac1ac9208ba4596ce95c))
(push) ;; push{2

; Starting query at MiniParse.Spec.Combinators.fst(726,2-726,36)

(declare-fun label_1 () Bool)



; Encoding query formula : forall (t: Type)
;   (p: MiniParse.Spec.Base.parser_spec t)
;   (s: MiniParse.Spec.Base.serializer_spec p)
;   (f: (_: t -> Prims.GTot Prims.bool)).
;   (*  - Could not prove post-condition
; *)
;   Prims.auto_squash (MiniParse.Spec.Base.serializer_correct (MiniParse.Spec.Combinators.parse_filter
;             p
;             f)
;         (MiniParse.Spec.Combinators.serialize_filter' s f))


; Context: While encoding a query
; While typechecking the top-level declaration `let serialize_filter`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(MiniParse.Spec.Base.parser_spec @x0))
(HasType @x2
(MiniParse.Spec.Base.serializer_spec @x0
@x1))
(HasType @x3
(Tm_ghost_arrow_9a34a9deaac3ca72ad48c3ec79b6656c @x0)))

;; def=MiniParse.Spec.Base.fst(343,41-343,63); use=MiniParse.Spec.Combinators.fst(726,13-726,36)
(or label_1

;; def=MiniParse.Spec.Base.fst(343,41-343,63); use=MiniParse.Spec.Combinators.fst(726,13-726,36)
(Valid 
;; def=MiniParse.Spec.Base.fst(343,41-343,63); use=MiniParse.Spec.Combinators.fst(726,13-726,36)
(MiniParse.Spec.Base.serializer_correct (Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef @x0
@x3)
(MiniParse.Spec.Combinators.parse_filter @x0
@x1
@x3)
(MiniParse.Spec.Combinators.serialize_filter_ @x0
@x1
@x2
@x3))
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 8714496)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.Combinators.serialize_filter, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, MiniParse.Spec.Combinators_interpretation_Tm_arrow_dd40325d19cf9e9f3e68140eb0c1fb89, constructor_distinct_FStar.Pervasives.Native.Some, data_elim_MiniParse.Spec.Base.Parser, data_elim_MiniParse.Spec.Base.Serializer, equation_MiniParse.Spec.Base.bparse, equation_MiniParse.Spec.Base.byte, equation_MiniParse.Spec.Base.bytes, equation_MiniParse.Spec.Base.consumed_length, equation_MiniParse.Spec.Base.parse, equation_MiniParse.Spec.Base.serialize, equation_MiniParse.Spec.Base.serializer_correct, equation_MiniParse.Spec.Combinators.and_then, equation_MiniParse.Spec.Combinators.and_then_bare, equation_MiniParse.Spec.Combinators.coerce_to_bare_param_parser, equation_MiniParse.Spec.Combinators.parse_filter, equation_MiniParse.Spec.Combinators.parse_filter_payload, equation_MiniParse.Spec.Combinators.parse_ret, equation_MiniParse.Spec.Combinators.serialize_filter_, equation_Prims.eqtype, equation_Prims.nat, fuel_guarded_inversion_FStar.Pervasives.Native.option, fuel_guarded_inversion_MiniParse.Spec.Base.parser_spec, fuel_guarded_inversion_MiniParse.Spec.Base.serializer_spec, function_token_typing_MiniParse.Spec.Combinators.parse_filter_payload, int_inversion, int_typing, interpretation_Tm_abs_24c49183d745861a79c9e705ccd478d5, interpretation_Tm_abs_2c62dd15e28a3b1b5c37052636225b47, interpretation_Tm_abs_5a56d64ec9685d0352c27644697b3e56, interpretation_Tm_abs_f1ff1752f992f8166b0d544dd38cf6b2, primitive_Prims.op_Addition, primitive_Prims.op_LessThanOrEqual, proj_equation_MiniParse.Spec.Base.Parser_f, proj_equation_MiniParse.Spec.Base.Serializer_f, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_FStar.Pervasives.Native.Some_a, projection_inverse_FStar.Pervasives.Native.Some_v, projection_inverse_MiniParse.Spec.Base.Parser_f, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_81407705a0828c2c1b1976675443f647, refinement_interpretation_Tm_refine_8da27fc70f74cdb01995c74e5b0aab3a, refinement_interpretation_Tm_refine_95482e91a565bbc8d113ac6e95692d97, token_correspondence_MiniParse.Spec.Base.__proj__Serializer__item__f, token_correspondence_MiniParse.Spec.Combinators.coerce_to_bare_param_parser, token_correspondence_MiniParse.Spec.Combinators.parse_filter_payload, typing_FStar.Seq.Base.length, typing_FStar.Seq.Base.slice, typing_FStar.UInt8.t, typing_MiniParse.Spec.Base.__proj__Parser__item__f, typing_MiniParse.Spec.Base.bparse, typing_MiniParse.Spec.Base.serialize, typing_MiniParse.Spec.Combinators.parse_filter
