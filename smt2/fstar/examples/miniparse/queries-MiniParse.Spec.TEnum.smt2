
; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(set-option :global-decls false)
(set-option :smt.mbqi false)
(set-option :auto_config false)
(set-option :produce-unsat-cores true)
(set-option :model true)
(set-option :smt.case_split 3)
(set-option :smt.relevancy 2)
(set-option :smt.arith.solver 2)


(declare-sort FString)
(declare-fun FString_constr_id (FString) Int)

(declare-sort Term)
(declare-fun Term_constr_id (Term) Int)
(declare-sort Dummy_sort)
(declare-fun Dummy_value () Dummy_sort)
(declare-datatypes () ((Fuel 
(ZFuel) 
(SFuel (prec Fuel)))))
(declare-fun MaxIFuel () Fuel)
(declare-fun MaxFuel () Fuel)
(declare-fun PreType (Term) Term)
(declare-fun Valid (Term) Bool)
(declare-fun HasTypeFuel (Fuel Term Term) Bool)
(define-fun HasTypeZ ((x Term) (t Term)) Bool
(HasTypeFuel ZFuel x t))
(define-fun HasType ((x Term) (t Term)) Bool
(HasTypeFuel MaxIFuel x t))
(declare-fun IsTotFun (Term) Bool)

                ;;fuel irrelevance
(assert (forall ((f Fuel) (x Term) (t Term))
(! (= (HasTypeFuel (SFuel f) x t)
(HasTypeZ x t))
:pattern ((HasTypeFuel (SFuel f) x t)))))
(declare-fun NoHoist (Term Bool) Bool)
;;no-hoist
(assert (forall ((dummy Term) (b Bool))
(! (= (NoHoist dummy b)
b)
:pattern ((NoHoist dummy b)))))
(define-fun  IsTyped ((x Term)) Bool
(exists ((t Term)) (HasTypeZ x t)))
(declare-fun ApplyTF (Term Fuel) Term)
(declare-fun ApplyTT (Term Term) Term)
(declare-fun Prec (Term Term) Bool)
(assert (forall ((x Term) (y Term) (z Term))
(! (implies (and (Prec x y) (Prec y z))
(Prec x z))
                                   :pattern ((Prec x z) (Prec x y)))))
(assert (forall ((x Term) (y Term))
(implies (Prec x y)
(not (Prec y x)))))
(declare-fun Closure (Term) Term)
(declare-fun ConsTerm (Term Term) Term)
(declare-fun ConsFuel (Fuel Term) Term)
(declare-fun Tm_uvar (Int) Term)
(define-fun Reify ((x Term)) Term x)
(declare-fun Prims.precedes (Term Term Term Term) Term)
(declare-fun Range_const (Int) Term)
(declare-fun _mul (Int Int) Int)
(declare-fun _div (Int Int) Int)
(declare-fun _mod (Int Int) Int)
(declare-fun __uu__PartialApp () Term)
(assert (forall ((x Int) (y Int)) (! (= (_mul x y) (* x y)) :pattern ((_mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (_div x y) (div x y)) :pattern ((_div x y)))))
(assert (forall ((x Int) (y Int)) (! (= (_mod x y) (mod x y)) :pattern ((_mod x y)))))
(declare-fun _rmul (Real Real) Real)
(declare-fun _rdiv (Real Real) Real)
(assert (forall ((x Real) (y Real)) (! (= (_rmul x y) (* x y)) :pattern ((_rmul x y)))))
(assert (forall ((x Real) (y Real)) (! (= (_rdiv x y) (/ x y)) :pattern ((_rdiv x y)))))
(define-fun Unreachable () Bool false)
; <start constructor FString_const>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FString_const (Int) FString)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 0
(FString_constr_id (FString_const @u0)))
 

:pattern ((FString_const @u0))
:qid constructor_distinct_FString_const))
:named constructor_distinct_FString_const))
;;;;;;;;;;;;;;;;Projector
(declare-fun FString_const_proj_0 (FString) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (FString_const_proj_0 (FString_const @u0))
@u0)
 

:pattern ((FString_const @u0))
:qid projection_inverse_FString_const_proj_0))
:named projection_inverse_FString_const_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FString_const ((__@u0 FString)) Bool
 (and (= (FString_constr_id __@u0)
0)
(= __@u0
(FString_const (FString_const_proj_0 __@u0)))))

; </end constructor FString_const>


; <start constructor Tm_type>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_type () Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (= 2
(Term_constr_id Tm_type))
:named constructor_distinct_Tm_type))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_type ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
2)
(= __@x0
Tm_type)))

; </end constructor Tm_type>


; <start constructor Tm_arrow>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_arrow (Int) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 3
(Term_constr_id (Tm_arrow @u0)))
 

:pattern ((Tm_arrow @u0))
:qid constructor_distinct_Tm_arrow))
:named constructor_distinct_Tm_arrow))
;;;;;;;;;;;;;;;;Projector
(declare-fun Tm_arrow_id (Term) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (Tm_arrow_id (Tm_arrow @u0))
@u0)
 

:pattern ((Tm_arrow @u0))
:qid projection_inverse_Tm_arrow_id))
:named projection_inverse_Tm_arrow_id))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_arrow ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
3)
(= __@x0
(Tm_arrow (Tm_arrow_id __@x0)))))

; </end constructor Tm_arrow>


; <start constructor Tm_unit>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_unit () Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (= 6
(Term_constr_id Tm_unit))
:named constructor_distinct_Tm_unit))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_unit ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
6)
(= __@x0
Tm_unit)))

; </end constructor Tm_unit>


; <start constructor BoxInt>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxInt (Int) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 7
(Term_constr_id (BoxInt @u0)))
 

:pattern ((BoxInt @u0))
:qid constructor_distinct_BoxInt))
:named constructor_distinct_BoxInt))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxInt_proj_0 (Term) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (BoxInt_proj_0 (BoxInt @u0))
@u0)
 

:pattern ((BoxInt @u0))
:qid projection_inverse_BoxInt_proj_0))
:named projection_inverse_BoxInt_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxInt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
7)
(= __@x0
(BoxInt (BoxInt_proj_0 __@x0)))))

; </end constructor BoxInt>


; <start constructor BoxBool>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxBool (Bool) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Bool))
 (! (= 8
(Term_constr_id (BoxBool @u0)))
 

:pattern ((BoxBool @u0))
:qid constructor_distinct_BoxBool))
:named constructor_distinct_BoxBool))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxBool_proj_0 (Term) Bool)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Bool))
 (! (= (BoxBool_proj_0 (BoxBool @u0))
@u0)
 

:pattern ((BoxBool @u0))
:qid projection_inverse_BoxBool_proj_0))
:named projection_inverse_BoxBool_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxBool ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
8)
(= __@x0
(BoxBool (BoxBool_proj_0 __@x0)))))

; </end constructor BoxBool>


; <start constructor BoxString>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxString (FString) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 FString))
 (! (= 9
(Term_constr_id (BoxString @u0)))
 

:pattern ((BoxString @u0))
:qid constructor_distinct_BoxString))
:named constructor_distinct_BoxString))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxString_proj_0 (Term) FString)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 FString))
 (! (= (BoxString_proj_0 (BoxString @u0))
@u0)
 

:pattern ((BoxString @u0))
:qid projection_inverse_BoxString_proj_0))
:named projection_inverse_BoxString_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxString ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
9)
(= __@x0
(BoxString (BoxString_proj_0 __@x0)))))

; </end constructor BoxString>


; <start constructor BoxReal>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxReal (Real) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Real))
 (! (= 10
(Term_constr_id (BoxReal @u0)))
 

:pattern ((BoxReal @u0))
:qid constructor_distinct_BoxReal))
:named constructor_distinct_BoxReal))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxReal_proj_0 (Term) Real)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Real))
 (! (= (BoxReal_proj_0 (BoxReal @u0))
@u0)
 

:pattern ((BoxReal @u0))
:qid projection_inverse_BoxReal_proj_0))
:named projection_inverse_BoxReal_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxReal ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
10)
(= __@x0
(BoxReal (BoxReal_proj_0 __@x0)))))

; </end constructor BoxReal>

(declare-fun Prims.precedes@tok () Term)
(assert
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
(! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.precedes@tok
@x0)
@x1)
@x2)
@x3)
(Prims.precedes @x0 @x1 @x2 @x3))

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.precedes@tok
@x0)
@x1)
@x2)
@x3)))))

(declare-fun Prims.lex_t () Term)
(assert (forall ((t1 Term) (t2 Term) (e1 Term) (e2 Term))
(! (iff (Valid (Prims.precedes t1 t2 e1 e2))
(Valid (Prims.precedes Prims.lex_t Prims.lex_t e1 e2)))
:pattern (Prims.precedes t1 t2 e1 e2))))
(assert (forall ((t1 Term) (t2 Term))
(! (iff (Valid (Prims.precedes Prims.lex_t Prims.lex_t t1 t2)) 
(Prec t1 t2))
:pattern ((Prims.precedes Prims.lex_t Prims.lex_t t1 t2)))))
(assert (forall ((e Term) (t Term))
(! (implies (HasType e t)
(Valid t))
:pattern ((HasType e t)
(Valid t))
:qid __prelude_valid_intro)))


; Externals for module Prims


; <Start encoding val Prims.attribute>

(declare-fun Prims.attribute () Term)

; </end encoding val Prims.attribute>


; <Start encoding val Prims.cps>

(declare-fun Prims.cps () Term)

; </end encoding val Prims.cps>


; <Start encoding val Prims.tac_opaque>

(declare-fun Prims.tac_opaque () Term)

; </end encoding val Prims.tac_opaque>


; <Start encoding val Prims.unrefine>

(declare-fun Prims.unrefine () Term)

; </end encoding val Prims.unrefine>


; <Start encoding val Prims.do_not_unrefine>

(declare-fun Prims.do_not_unrefine () Term)

; </end encoding val Prims.do_not_unrefine>


; <Start encoding val Prims.hasEq>

(declare-fun Prims.hasEq (Term) Term)
(declare-fun Tm_arrow_ef9cb512a25ee351fa5536d617490497 () Term)
(declare-fun Prims.hasEq@tok () Term)

; </end encoding val Prims.hasEq>


; <Start encoding let eqtype>

(declare-fun Prims.eqtype () Term)
(declare-fun Tm_refine_414d0a9f578ab0048252f8c8f552b99f () Term)

; </end encoding let eqtype>


; <Start encoding val Prims.bool>

(declare-fun Prims.bool () Term)

; </end encoding val Prims.bool>


; <Start encoding type Prims.empty>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.empty () Term)

; <start constructor Prims.empty>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.empty ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
111)
(= __@x0
Prims.empty)))

; </end constructor Prims.empty>


; </end encoding type Prims.empty>


; <Start encoding type Prims.trivial>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.trivial () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.T () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.T
(declare-fun Prims.T@tok () Term)

; <start constructor Prims.trivial>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.trivial ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
116)
(= __@x0
Prims.trivial)))

; </end constructor Prims.trivial>


; <start constructor Prims.T>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.T ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
122)
(= __@x0
Prims.T)))

; </end constructor Prims.T>


; </end encoding type Prims.trivial>


; <Start encoding val Prims.uu___is_T>

(declare-fun Prims.uu___is_T (Term) Term)
(declare-fun Tm_arrow_053f01f066524059a49c5dc621e6494a () Term)
(declare-fun Prims.uu___is_T@tok () Term)

; </end encoding val Prims.uu___is_T>


; <Start encoding val Prims.unit>

(declare-fun Prims.unit () Term)

; </end encoding val Prims.unit>


; <Start encoding let squash>

(declare-fun Prims.squash (Term) Term)

(declare-fun Prims.squash@tok () Term)
(declare-fun Tm_refine_2de20c066034c13bf76e9c0b94f4806c (Term) Term)

; </end encoding let squash>


; <Start encoding let auto_squash>

(declare-fun Prims.auto_squash (Term) Term)

(declare-fun Prims.auto_squash@tok () Term)

; </end encoding let auto_squash>


; <Start encoding let logical>

(declare-fun Prims.logical () Term)

; </end encoding let logical>


; <Start encoding val Prims.smt_theory_symbol>

(declare-fun Prims.smt_theory_symbol () Term)

; </end encoding val Prims.smt_theory_symbol>


; <Start encoding let l_True>

(declare-fun Prims.l_True () Term)

; </end encoding let l_True>


; <Start encoding let l_False>

(declare-fun Prims.l_False () Term)

; </end encoding let l_False>


; <Start encoding type Prims.equals>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.equals (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.equals@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Refl (Term Term) Term)
;;;;;;;;;;;;;;;;Constructor base
(declare-fun Prims.Refl@base () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Refl
(declare-fun Prims.Refl@tok () Term)
(declare-fun Tm_arrow_8e00c6263684633abbc1d1a87608e391 () Term)

; <start constructor Prims.equals>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.equals ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
134)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(Prims.equals @x0
@x1
@x2))
 
;;no pats
:qid is-Prims.equals))))

; </end constructor Prims.equals>


; <start constructor Prims.Refl>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Refl ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
141)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.Refl @x0
@x1))
 
;;no pats
:qid is-Prims.Refl))))

; </end constructor Prims.Refl>


; </end encoding type Prims.equals>


; <Start encoding val Prims.uu___is_Refl>

(declare-fun Prims.uu___is_Refl (Term Term Term Term) Term)
(declare-fun Tm_arrow_2a4540f76c8969717ea911077d7b4d15 () Term)
(declare-fun Prims.uu___is_Refl@tok () Term)

; </end encoding val Prims.uu___is_Refl>


; <Start encoding let eq2>

(declare-fun Prims.eq2 (Term Term Term) Term)
(declare-fun Tm_arrow_1ec40cec1da281b45a559c74dd57f3b7 () Term)
(declare-fun Prims.eq2@tok () Term)

; </end encoding let eq2>


; <Start encoding let b2t>

(declare-fun Prims.b2t (Term) Term)

; </end encoding let b2t>


; <Start encoding type Prims.pair>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.pair (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.pair@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Pair (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Pair
(declare-fun Prims.Pair@tok () Term)
(declare-fun Tm_arrow_e2b0096073073582c70f249d40f91c5d () Term)

; <start constructor Prims.pair>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.pair ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
150)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.pair @x0
@x1))
 
;;no pats
:qid is-Prims.pair))))

; </end constructor Prims.pair>


; <start constructor Prims.Pair>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Pair ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
157)
(= __@x0
(Prims.Pair (Prims.Pair_p __@x0)
(Prims.Pair_q __@x0)
(Prims.Pair__1 __@x0)
(Prims.Pair__2 __@x0)))))

; </end constructor Prims.Pair>


; </end encoding type Prims.pair>


; <Start encoding val Prims.uu___is_Pair>

(declare-fun Prims.uu___is_Pair (Term Term Term) Term)
(declare-fun Tm_arrow_0a519c999e1325381ee4c9b1d93a06b2 () Term)
(declare-fun Prims.uu___is_Pair@tok () Term)

; </end encoding val Prims.uu___is_Pair>


; <Start encoding val Prims.__proj__Pair__item___1>

(declare-fun Prims.__proj__Pair__item___1 (Term Term Term) Term)
(declare-fun Tm_arrow_214b45775d1504fb2699ff0d156b6857 () Term)
(declare-fun Prims.__proj__Pair__item___1@tok () Term)

; </end encoding val Prims.__proj__Pair__item___1>


; <Start encoding val Prims.__proj__Pair__item___2>

(declare-fun Prims.__proj__Pair__item___2 (Term Term Term) Term)
(declare-fun Tm_arrow_1b97dbe8f5eb289f51cc2556690371e3 () Term)
(declare-fun Prims.__proj__Pair__item___2@tok () Term)

; </end encoding val Prims.__proj__Pair__item___2>


; <Start encoding let l_and>

(declare-fun Prims.l_and (Term Term) Term)
(declare-fun Tm_arrow_289ee2cc5874944bf725b9e3db8c0fd6 () Term)
(declare-fun Prims.l_and@tok () Term)

; </end encoding let l_and>


; <Start encoding type Prims.sum>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.sum (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.sum@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Left
(declare-fun Prims.Left@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Right
(declare-fun Prims.Right@tok () Term)
(declare-fun Tm_arrow_4ef073c03ed003774fe6ccb4064aeebd () Term)
(declare-fun Tm_arrow_c537ccd7fef2183d55f1a6960ee793b0 () Term)

; <start constructor Prims.sum>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.sum ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
169)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.sum @x0
@x1))
 
;;no pats
:qid is-Prims.sum))))

; </end constructor Prims.sum>


; <start constructor Prims.Left>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Left ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
176)
(= __@x0
(Prims.Left (Prims.Left_p __@x0)
(Prims.Left_q __@x0)
(Prims.Left_v __@x0)))))

; </end constructor Prims.Left>


; <start constructor Prims.Right>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Right ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
181)
(= __@x0
(Prims.Right (Prims.Right_p __@x0)
(Prims.Right_q __@x0)
(Prims.Right_v __@x0)))))

; </end constructor Prims.Right>


; </end encoding type Prims.sum>


; <Start encoding val Prims.uu___is_Left>

(declare-fun Prims.uu___is_Left (Term Term Term) Term)
(declare-fun Tm_arrow_3c254c463840bdea2ca63f23cf7c2f0c () Term)
(declare-fun Prims.uu___is_Left@tok () Term)

; </end encoding val Prims.uu___is_Left>


; <Start encoding val Prims.__proj__Left__item__v>

(declare-fun Tm_refine_6140be01a70b18051829f178aaf0270b (Term Term) Term)
(declare-fun Prims.__proj__Left__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_aaf070885513892396497eef726adce1 () Term)
(declare-fun Prims.__proj__Left__item__v@tok () Term)

; </end encoding val Prims.__proj__Left__item__v>


; <Start encoding val Prims.uu___is_Right>

(declare-fun Prims.uu___is_Right (Term Term Term) Term)

(declare-fun Prims.uu___is_Right@tok () Term)

; </end encoding val Prims.uu___is_Right>


; <Start encoding val Prims.__proj__Right__item__v>

(declare-fun Tm_refine_43ea5cf89e866ce271f97bd6ce102588 (Term Term) Term)
(declare-fun Prims.__proj__Right__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_4ae0e7dd85e55aec7e8190dea6e3997f () Term)
(declare-fun Prims.__proj__Right__item__v@tok () Term)

; </end encoding val Prims.__proj__Right__item__v>


; <Start encoding let l_or>

(declare-fun Prims.l_or (Term Term) Term)

(declare-fun Prims.l_or@tok () Term)

; </end encoding let l_or>


; <Start encoding let l_imp>

(declare-fun Prims.l_imp (Term Term) Term)

(declare-fun Prims.l_imp@tok () Term)
(declare-fun Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a (Term Term) Term)

; </end encoding let l_imp>


; <Start encoding let l_iff>

(declare-fun Prims.l_iff (Term Term) Term)

(declare-fun Prims.l_iff@tok () Term)

; </end encoding let l_iff>


; <Start encoding let l_not>

(declare-fun Prims.l_not (Term) Term)
(declare-fun Tm_arrow_8178e3b6934aa50ea45bb0ccea2d9711 () Term)
(declare-fun Prims.l_not@tok () Term)

; </end encoding let l_not>


; <Skipped let l_ITE/>


; <Skipped val Prims.precedes/>


; <Start encoding val Prims.string>

(declare-fun Prims.string () Term)

; </end encoding val Prims.string>


; <Start encoding val Prims.warn_on_use>

(declare-fun Prims.warn_on_use (Term) Term)
(declare-fun Tm_arrow_2863eb88d7490a9c3cf347c16ca04740 () Term)
(declare-fun Prims.warn_on_use@tok () Term)

; </end encoding val Prims.warn_on_use>


; <Start encoding val Prims.deprecated>

(declare-fun Prims.deprecated (Term) Term)

(declare-fun Prims.deprecated@tok () Term)

; </end encoding val Prims.deprecated>


; <Start encoding val Prims.has_type>

(declare-fun Prims.has_type (Term Term Term) Term)
(declare-fun Tm_arrow_b5d8ed0243b8c7c893f2b329de57c62b () Term)
(declare-fun Prims.has_type@tok () Term)

; </end encoding val Prims.has_type>


; <Start encoding let l_Forall>

(declare-fun Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da (Term) Term)
(declare-fun Prims.l_Forall (Term Term) Term)

(declare-fun Tm_arrow_977ec6901669a051ac66211b8e72666a () Term)
(declare-fun Prims.l_Forall@tok () Term)

(declare-fun Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f (Term Term) Term)

; </end encoding let l_Forall>


; <Skipped #push-options "--warn_error -288"/>


; <Start encoding let subtype_of>

(declare-fun Prims.subtype_of (Term Term) Term)
(declare-fun Tm_arrow_28becc0427b69ebf63ea956148504d97 () Term)
(declare-fun Prims.subtype_of@tok () Term)

; </end encoding let subtype_of>


; <Skipped #pop-options/>


; <Start encoding let prop>

(declare-fun Prims.prop () Term)
(declare-fun Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf () Term)

; </end encoding let prop>


; <Start encoding let pure_pre>

(declare-fun Prims.pure_pre () Term)

; </end encoding let pure_pre>


; <Start encoding let pure_post'>

(declare-fun Prims.pure_post_ (Term Term) Term)
(declare-fun Tm_arrow_e4cf09589736facd1137944a1f5a00a6 () Term)
(declare-fun Prims.pure_post_@tok () Term)
(declare-fun Tm_refine_8d65e998a07dd53ec478e27017d9dba5 (Term Term) Term)
(declare-fun Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 (Term Term) Term)

; </end encoding let pure_post'>


; <Start encoding let pure_post>

(declare-fun Prims.pure_post (Term) Term)

(declare-fun Prims.pure_post@tok () Term)

; </end encoding let pure_post>


; <Start encoding let pure_wp'>

(declare-fun Prims.pure_wp_ (Term) Term)

(declare-fun Prims.pure_wp_@tok () Term)
(declare-fun Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4 (Term) Term)

; </end encoding let pure_wp'>


; <Start encoding let pure_wp_monotonic0>

(declare-fun Prims.pure_wp_monotonic0 (Term Term) Term)
(declare-fun Tm_arrow_85436e2c1c64a4dd0159a737ef5b212e () Term)
(declare-fun Prims.pure_wp_monotonic0@tok () Term)

; </end encoding let pure_wp_monotonic0>


; <Start encoding let pure_wp_monotonic>

(declare-fun Prims.pure_wp_monotonic (Term Term) Term)

(declare-fun Prims.pure_wp_monotonic@tok () Term)

; </end encoding let pure_wp_monotonic>


; <Start encoding let pure_wp>

(declare-fun Prims.pure_wp (Term) Term)

(declare-fun Prims.pure_wp@tok () Term)
(declare-fun Tm_refine_15e0beb75f7033bad5fae236999feebe (Term) Term)

; </end encoding let pure_wp>


; <Start encoding val Prims.guard_free>

(declare-fun Prims.guard_free (Term) Term)

(declare-fun Prims.guard_free@tok () Term)

; </end encoding val Prims.guard_free>


; <Skipped let pure_return0/>


; <Skipped let pure_bind_wp0/>


; <Skipped let pure_if_then_else0/>


; <Skipped let pure_ite_wp0/>


; <Skipped let pure_stronger/>


; <Skipped let pure_close_wp0/>


; <Skipped let pure_trivial/>


; <Skipped new_effect { PURE ... }/>


; <Skipped effect Pure a pre post = Prims.PURE a/>


; <Skipped effect Admit a = Prims.PURE a/>


; <Skipped let pure_null_wp0/>


; <Skipped effect Tot a = Prims.PURE a/>


; <Start encoding let pure_assert_wp0>

(declare-fun Prims.pure_assert_wp0 (Term) Term)
(declare-fun Tm_arrow_14bcf5e7fc38d91827ecd9d25d3b3a67 () Term)
(declare-fun Prims.pure_assert_wp0@tok () Term)

; </end encoding let pure_assert_wp0>


; <Start encoding let pure_assume_wp0>

(declare-fun Prims.pure_assume_wp0 (Term) Term)

(declare-fun Prims.pure_assume_wp0@tok () Term)

; </end encoding let pure_assume_wp0>


; <Skipped new_effect { GHOST ... }/>


; <Skipped let purewp_id/>


; <Skipped sub_effect PURE ~> GHOST/>


; <Skipped effect Ghost a pre post = Prims.GHOST a/>


; <Skipped effect GTot a = Prims.GHOST a/>


; <Start encoding let op_Equals_Equals_Equals>

(declare-fun Prims.op_Equals_Equals_Equals (Term Term Term Term) Term)
(declare-fun Tm_arrow_7fcb145b23c2ac843afd9b126c4f71a9 () Term)
(declare-fun Prims.op_Equals_Equals_Equals@tok () Term)

; </end encoding let op_Equals_Equals_Equals>


; <Start encoding type Prims.dtuple2>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.dtuple2 (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.dtuple2@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Mkdtuple2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Mkdtuple2
(declare-fun Prims.Mkdtuple2@tok () Term)



(declare-fun Tm_arrow_22a50f5c5c9bb74bac4384fb8999be8b () Term)

; <start constructor Prims.dtuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.dtuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
258)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.dtuple2 @x0
@x1))
 
;;no pats
:qid is-Prims.dtuple2))))

; </end constructor Prims.dtuple2>


; <start constructor Prims.Mkdtuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Mkdtuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
267)
(= __@x0
(Prims.Mkdtuple2 (Prims.Mkdtuple2_a __@x0)
(Prims.Mkdtuple2_b __@x0)
(Prims.Mkdtuple2__1 __@x0)
(Prims.Mkdtuple2__2 __@x0)))))

; </end constructor Prims.Mkdtuple2>


; </end encoding type Prims.dtuple2>


; <Start encoding assume Prims.dtuple2__uu___haseq>



; </end encoding assume Prims.dtuple2__uu___haseq>


; <Start encoding val Prims.uu___is_Mkdtuple2>


(declare-fun Prims.uu___is_Mkdtuple2 (Term Term Term) Term)

(declare-fun Tm_arrow_e6f9f7cb1936ec43b52469e706dcadcc () Term)
(declare-fun Prims.uu___is_Mkdtuple2@tok () Term)

; </end encoding val Prims.uu___is_Mkdtuple2>


; <Skipped let uu___is_Mkdtuple2/>


; <Start encoding val Prims.__proj__Mkdtuple2__item___1>


(declare-fun Prims.__proj__Mkdtuple2__item___1 (Term Term Term) Term)

(declare-fun Tm_arrow_26c013ffba39d4f7eeb4bcc80d2d4e22 () Term)
(declare-fun Prims.__proj__Mkdtuple2__item___1@tok () Term)

; </end encoding val Prims.__proj__Mkdtuple2__item___1>


; <Skipped let __proj__Mkdtuple2__item___1/>


; <Start encoding val Prims.__proj__Mkdtuple2__item___2>


(declare-fun Prims.__proj__Mkdtuple2__item___2 (Term Term Term) Term)

(declare-fun Tm_arrow_870cc7701a0d9a8a2d6fb92427a97d66 () Term)
(declare-fun Prims.__proj__Mkdtuple2__item___2@tok () Term)

; </end encoding val Prims.__proj__Mkdtuple2__item___2>


; <Skipped let __proj__Mkdtuple2__item___2/>


; <Start encoding let l_Exists>


(declare-fun Prims.l_Exists (Term Term) Term)


(declare-fun Prims.l_Exists@tok () Term)


(declare-fun Tm_abs_6ba36691ee58dee85cd144324b083848 (Term Term) Term)

; </end encoding let l_Exists>


; <Start encoding val Prims.int>

(declare-fun Prims.int () Term)

; </end encoding val Prims.int>


; <Start encoding val Prims.op_AmpAmp>

(declare-fun Prims.op_AmpAmp (Term Term) Term)
(declare-fun Prims.op_AmpAmp@tok () Term)

; </end encoding val Prims.op_AmpAmp>


; <Start encoding val Prims.op_BarBar>

(declare-fun Prims.op_BarBar (Term Term) Term)
(declare-fun Prims.op_BarBar@tok () Term)

; </end encoding val Prims.op_BarBar>


; <Start encoding val Prims.op_Negation>

(declare-fun Prims.op_Negation (Term) Term)
(declare-fun Prims.op_Negation@tok () Term)

; </end encoding val Prims.op_Negation>


; <Start encoding val Prims.op_Multiply>

(declare-fun Prims.op_Multiply (Term Term) Term)
(declare-fun Prims.op_Multiply@tok () Term)

; </end encoding val Prims.op_Multiply>


; <Start encoding val Prims.op_Subtraction>

(declare-fun Prims.op_Subtraction (Term Term) Term)
(declare-fun Prims.op_Subtraction@tok () Term)

; </end encoding val Prims.op_Subtraction>


; <Start encoding val Prims.op_Addition>

(declare-fun Prims.op_Addition (Term Term) Term)
(declare-fun Prims.op_Addition@tok () Term)

; </end encoding val Prims.op_Addition>


; <Start encoding val Prims.op_Minus>

(declare-fun Prims.op_Minus (Term) Term)
(declare-fun Prims.op_Minus@tok () Term)

; </end encoding val Prims.op_Minus>


; <Start encoding val Prims.op_LessThanOrEqual>

(declare-fun Prims.op_LessThanOrEqual (Term Term) Term)
(declare-fun Prims.op_LessThanOrEqual@tok () Term)

; </end encoding val Prims.op_LessThanOrEqual>


; <Start encoding val Prims.op_GreaterThan>

(declare-fun Prims.op_GreaterThan (Term Term) Term)
(declare-fun Prims.op_GreaterThan@tok () Term)

; </end encoding val Prims.op_GreaterThan>


; <Start encoding val Prims.op_GreaterThanOrEqual>

(declare-fun Prims.op_GreaterThanOrEqual (Term Term) Term)
(declare-fun Prims.op_GreaterThanOrEqual@tok () Term)

; </end encoding val Prims.op_GreaterThanOrEqual>


; <Start encoding val Prims.op_LessThan>

(declare-fun Prims.op_LessThan (Term Term) Term)
(declare-fun Prims.op_LessThan@tok () Term)

; </end encoding val Prims.op_LessThan>


; <Start encoding val Prims.op_Equality>

(declare-fun Prims.op_Equality (Term Term Term) Term)
(declare-fun Prims.op_Equality@tok () Term)

; </end encoding val Prims.op_Equality>


; <Start encoding val Prims.op_disEquality>

(declare-fun Prims.op_disEquality (Term Term Term) Term)
(declare-fun Prims.op_disEquality@tok () Term)

; </end encoding val Prims.op_disEquality>


; <Start encoding val Prims.exn>

(declare-fun Prims.exn () Term)

; </end encoding val Prims.exn>


; <Start encoding val Prims.array>

(declare-fun Prims.array (Term) Term)

(declare-fun Prims.array@tok () Term)

; </end encoding val Prims.array>


; <Start encoding val Prims.strcat>

(declare-fun Prims.strcat (Term Term) Term)
(declare-fun Tm_arrow_b66cecec1d56111347abe61e89557dd1 () Term)
(declare-fun Prims.strcat@tok () Term)

; </end encoding val Prims.strcat>


; <Skipped let op_Hat/>


; <Start encoding type Prims.list>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.list (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.list@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Nil (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Nil_a (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Nil
(declare-fun Prims.Nil@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_hd (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_tl (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Cons
(declare-fun Prims.Cons@tok () Term)
(declare-fun Tm_arrow_3864bd5fbb999b4fe4487408df9b3401 () Term)
(declare-fun Tm_arrow_02c072760cbad0f5a4706f6cffab6c94 () Term)

; <start constructor Prims.list>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.list ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
318)
(exists ((@x0 Term))
 (! (= __@x0
(Prims.list @x0))
 
;;no pats
:qid is-Prims.list))))

; </end constructor Prims.list>


; <start constructor Prims.Nil>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Nil ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
325)
(= __@x0
(Prims.Nil (Prims.Nil_a __@x0)))))

; </end constructor Prims.Nil>


; <start constructor Prims.Cons>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Cons ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
330)
(= __@x0
(Prims.Cons (Prims.Cons_a __@x0)
(Prims.Cons_hd __@x0)
(Prims.Cons_tl __@x0)))))

; </end constructor Prims.Cons>


; </end encoding type Prims.list>


; <Start encoding assume Prims.list__uu___haseq>


; </end encoding assume Prims.list__uu___haseq>


; <Start encoding val Prims.uu___is_Nil>

(declare-fun Prims.uu___is_Nil (Term Term) Term)
(declare-fun Tm_arrow_606904b0fa72729a20285beb231f9f2e () Term)
(declare-fun Prims.uu___is_Nil@tok () Term)

; </end encoding val Prims.uu___is_Nil>


; <Skipped let uu___is_Nil/>


; <Start encoding val Prims.uu___is_Cons>

(declare-fun Prims.uu___is_Cons (Term Term) Term)

(declare-fun Prims.uu___is_Cons@tok () Term)

; </end encoding val Prims.uu___is_Cons>


; <Skipped let uu___is_Cons/>


; <Start encoding val Prims.__proj__Cons__item__hd>

(declare-fun Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 (Term) Term)
(declare-fun Prims.__proj__Cons__item__hd (Term Term) Term)

(declare-fun Tm_arrow_27c3547831737e5a63950f3d18bf3d22 () Term)
(declare-fun Prims.__proj__Cons__item__hd@tok () Term)

; </end encoding val Prims.__proj__Cons__item__hd>


; <Skipped let __proj__Cons__item__hd/>


; <Start encoding val Prims.__proj__Cons__item__tl>


(declare-fun Prims.__proj__Cons__item__tl (Term Term) Term)

(declare-fun Tm_arrow_4e740085106d54d8b48ffe3c6c20ef21 () Term)
(declare-fun Prims.__proj__Cons__item__tl@tok () Term)

; </end encoding val Prims.__proj__Cons__item__tl>


; <Skipped let __proj__Cons__item__tl/>


; <Skipped effect M a = a/>


; <Start encoding let returnM>

(declare-fun Prims.returnM (Term Term) Term)
(declare-fun Tm_arrow_99724436653747ac6f5a6a00c64ff8bc () Term)
(declare-fun Prims.returnM@tok () Term)

; </end encoding let returnM>


; <Skipped let as_requires/>


; <Skipped let as_ensures/>


; <Start encoding val Prims._assume>

(declare-fun Prims._assume (Term) Term)
(declare-fun Non_total_Tm_arrow_724d0dab46b8b51a1bb19d329f7fc4b2 () Term)
(declare-fun Prims._assume@tok () Term)

; </end encoding val Prims._assume>


; <Start encoding val Prims.admit>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Prims.admit (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Prims.admit@tok () Term)

; </end encoding val Prims.admit>


; <Start encoding val Prims.magic>

(declare-fun Prims.magic (Term Term) Term)
(declare-fun Tm_arrow_f5df98ce82fbcebbbdb844c958bee4fb () Term)
(declare-fun Prims.magic@tok () Term)

; </end encoding val Prims.magic>


; <Start encoding let unsafe_coerce>

(declare-fun Prims.unsafe_coerce (Term Term Term) Term)
(declare-fun Tm_arrow_443ab41008720460b7a09e280558a60f () Term)
(declare-fun Prims.unsafe_coerce@tok () Term)

; </end encoding let unsafe_coerce>


; <Start encoding val Prims.admitP>

(declare-fun Prims.admitP (Term) Term)

(declare-fun Prims.admitP@tok () Term)

; </end encoding val Prims.admitP>


; <Skipped val Prims._assert/>


; <Start encoding let _assert>

(declare-fun Prims._assert (Term) Term)
(declare-fun Non_total_Tm_arrow_bb2d1b4bdb07c87bf5990ad3e5fd8642 () Term)
(declare-fun Prims._assert@tok () Term)

; </end encoding let _assert>


; <Skipped val Prims.cut/>


; <Start encoding let cut>

(declare-fun Prims.cut (Term) Term)

(declare-fun Prims.cut@tok () Term)

; </end encoding let cut>


; <Start encoding let nat>

(declare-fun Prims.nat () Term)
(declare-fun Tm_refine_542f9d4f129664613f2483a6c88bc7c2 () Term)

; </end encoding let nat>


; <Start encoding let pos>

(declare-fun Prims.pos () Term)
(declare-fun Tm_refine_774ba3f728d91ead8ef40be66c9802e5 () Term)

; </end encoding let pos>


; <Start encoding let nonzero>

(declare-fun Prims.nonzero () Term)
(declare-fun Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f () Term)

; </end encoding let nonzero>


; <Start encoding val Prims.op_Modulus>

(declare-fun Prims.op_Modulus (Term Term) Term)
(declare-fun Prims.op_Modulus@tok () Term)

; </end encoding val Prims.op_Modulus>


; <Start encoding val Prims.op_Division>

(declare-fun Prims.op_Division (Term Term) Term)
(declare-fun Prims.op_Division@tok () Term)

; </end encoding val Prims.op_Division>


; <Start encoding let rec pow2>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Prims.pow2.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Prims.pow2.fuel_instrumented_token () Term)
(declare-fun Prims.pow2 (Term) Term)
(declare-fun Prims.pow2@tok () Term)
(declare-fun Tm_arrow_c331a0e032e021e1eaa359b3983de4f2 () Term)

; </end encoding let rec pow2>


; <Start encoding let min>

(declare-fun Prims.min (Term Term) Term)
(declare-fun Tm_arrow_47fc285d7b44e13bcb7e420cbfc55623 () Term)
(declare-fun Prims.min@tok () Term)

; </end encoding let min>


; <Start encoding let abs>

(declare-fun Prims.abs (Term) Term)
(declare-fun Tm_arrow_35447810753695c4fe25c93af1251992 () Term)
(declare-fun Prims.abs@tok () Term)

; </end encoding let abs>


; <Start encoding val Prims.string_of_bool>

(declare-fun Prims.string_of_bool (Term) Term)
(declare-fun Tm_arrow_e86b54405c2a58719f5e8112efd48c09 () Term)
(declare-fun Prims.string_of_bool@tok () Term)

; </end encoding val Prims.string_of_bool>


; <Start encoding val Prims.string_of_int>

(declare-fun Prims.string_of_int (Term) Term)
(declare-fun Tm_arrow_2bc066ec63734c94a3c008e1e72cae2b () Term)
(declare-fun Prims.string_of_int@tok () Term)

; </end encoding val Prims.string_of_int>


; <Start encoding let __cache_version_number__>

(declare-fun Prims.__cache_version_number__ () Term)

; </end encoding let __cache_version_number__>


; End Externals for module Prims


; Externals for module FStar.Pervasives.Native


; <Start encoding type FStar.Pervasives.Native.option>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.option (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.option@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.None (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.None_a (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.None
(declare-fun FStar.Pervasives.Native.None@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Some (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Some_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Some_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Some
(declare-fun FStar.Pervasives.Native.Some@tok () Term)
(declare-fun Tm_arrow_48b914114ec9f2f1caadf0f6848a9741 () Term)
(declare-fun Tm_arrow_b93a364b5144c2a5f3e9d1ea7b881752 () Term)

; <start constructor FStar.Pervasives.Native.option>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.option ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Pervasives.Native.option @x0))
 
;;no pats
:qid is-FStar.Pervasives.Native.option))))

; </end constructor FStar.Pervasives.Native.option>


; <start constructor FStar.Pervasives.Native.None>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.None ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
108)
(= __@x0
(FStar.Pervasives.Native.None (FStar.Pervasives.Native.None_a __@x0)))))

; </end constructor FStar.Pervasives.Native.None>


; <start constructor FStar.Pervasives.Native.Some>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Some ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
113)
(= __@x0
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.Some_a __@x0)
(FStar.Pervasives.Native.Some_v __@x0)))))

; </end constructor FStar.Pervasives.Native.Some>


; </end encoding type FStar.Pervasives.Native.option>


; <Start encoding assume FStar.Pervasives.Native.option__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.option__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_None>

(declare-fun FStar.Pervasives.Native.uu___is_None (Term Term) Term)
(declare-fun Tm_arrow_f1a97bcd6ba9b40d22609b756f183afa () Term)
(declare-fun FStar.Pervasives.Native.uu___is_None@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_None>


; <Skipped let uu___is_None/>


; <Start encoding val FStar.Pervasives.Native.uu___is_Some>

(declare-fun FStar.Pervasives.Native.uu___is_Some (Term Term) Term)

(declare-fun FStar.Pervasives.Native.uu___is_Some@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Some>


; <Skipped let uu___is_Some/>


; <Start encoding val FStar.Pervasives.Native.__proj__Some__item__v>

(declare-fun Tm_refine_4d5241eb6fe198666a8101195bbd4a2a (Term) Term)
(declare-fun FStar.Pervasives.Native.__proj__Some__item__v (Term Term) Term)

(declare-fun Tm_arrow_1b1398c011ff53e4194fc2ec00c7b411 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Some__item__v@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Some__item__v>


; <Skipped let __proj__Some__item__v/>


; <Start encoding type FStar.Pervasives.Native.tuple2>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple2 (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple2@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple2
(declare-fun FStar.Pervasives.Native.Mktuple2@tok () Term)
(declare-fun Tm_arrow_4054cc0a51327db54c2ed9ba3376a093 () Term)

; <start constructor FStar.Pervasives.Native.tuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
125)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple2 @x0
@x1))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple2))))

; </end constructor FStar.Pervasives.Native.tuple2>


; <start constructor FStar.Pervasives.Native.Mktuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
132)
(= __@x0
(FStar.Pervasives.Native.Mktuple2 (FStar.Pervasives.Native.Mktuple2__a __@x0)
(FStar.Pervasives.Native.Mktuple2__b __@x0)
(FStar.Pervasives.Native.Mktuple2__1 __@x0)
(FStar.Pervasives.Native.Mktuple2__2 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple2>


; </end encoding type FStar.Pervasives.Native.tuple2>


; <Start encoding assume FStar.Pervasives.Native.tuple2__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple2__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple2>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple2 (Term Term Term) Term)
(declare-fun Tm_arrow_eff71eeee4474e017e02350f86f54756 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple2@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple2>


; <Skipped let uu___is_Mktuple2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___1 (Term Term Term) Term)
(declare-fun Tm_arrow_b8cce376a4a678a51298a0f3945f25ce () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___1>


; <Skipped let __proj__Mktuple2__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___2 (Term Term Term) Term)
(declare-fun Tm_arrow_d952d001575ecb20c572af535c88dd2d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___2>


; <Skipped let __proj__Mktuple2__item___2/>


; <Start encoding let fst>

(declare-fun FStar.Pervasives.Native.fst (Term Term Term) Term)

(declare-fun FStar.Pervasives.Native.fst@tok () Term)

; </end encoding let fst>


; <Start encoding let snd>

(declare-fun FStar.Pervasives.Native.snd (Term Term Term) Term)

(declare-fun FStar.Pervasives.Native.snd@tok () Term)

; </end encoding let snd>


; <Start encoding type FStar.Pervasives.Native.tuple3>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple3@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple3 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__3 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple3
(declare-fun FStar.Pervasives.Native.Mktuple3@tok () Term)
(declare-fun Tm_arrow_1bedda193f13e939931cf5d46ad84216 () Term)

; <start constructor FStar.Pervasives.Native.tuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
146)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple3))))

; </end constructor FStar.Pervasives.Native.tuple3>


; <start constructor FStar.Pervasives.Native.Mktuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
153)
(= __@x0
(FStar.Pervasives.Native.Mktuple3 (FStar.Pervasives.Native.Mktuple3__a __@x0)
(FStar.Pervasives.Native.Mktuple3__b __@x0)
(FStar.Pervasives.Native.Mktuple3__c __@x0)
(FStar.Pervasives.Native.Mktuple3__1 __@x0)
(FStar.Pervasives.Native.Mktuple3__2 __@x0)
(FStar.Pervasives.Native.Mktuple3__3 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple3>


; </end encoding type FStar.Pervasives.Native.tuple3>


; <Start encoding assume FStar.Pervasives.Native.tuple3__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple3__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple3>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple3 (Term Term Term Term) Term)
(declare-fun Tm_arrow_f03c6dc5b30146aaca49ed4bf6f332a7 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple3@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple3>


; <Skipped let uu___is_Mktuple3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Term Term Term Term) Term)
(declare-fun Tm_arrow_592c45439d32a71e1933eacb9776c9ed () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___1>


; <Skipped let __proj__Mktuple3__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Term Term Term Term) Term)
(declare-fun Tm_arrow_9c9b0c5ac9b0fbfc367f406af296ecab () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___2>


; <Skipped let __proj__Mktuple3__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___3 (Term Term Term Term) Term)
(declare-fun Tm_arrow_08246a62c9aeca08c44c602ad80e95a4 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___3>


; <Skipped let __proj__Mktuple3__item___3/>


; <Start encoding type FStar.Pervasives.Native.tuple4>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple4 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple4@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple4 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__4 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple4
(declare-fun FStar.Pervasives.Native.Mktuple4@tok () Term)
(declare-fun Tm_arrow_cbe72a10167439fe1ecfaf4fec8fd23f () Term)

; <start constructor FStar.Pervasives.Native.tuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
165)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple4 @x0
@x1
@x2
@x3))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple4))))

; </end constructor FStar.Pervasives.Native.tuple4>


; <start constructor FStar.Pervasives.Native.Mktuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
172)
(= __@x0
(FStar.Pervasives.Native.Mktuple4 (FStar.Pervasives.Native.Mktuple4__a __@x0)
(FStar.Pervasives.Native.Mktuple4__b __@x0)
(FStar.Pervasives.Native.Mktuple4__c __@x0)
(FStar.Pervasives.Native.Mktuple4__d __@x0)
(FStar.Pervasives.Native.Mktuple4__1 __@x0)
(FStar.Pervasives.Native.Mktuple4__2 __@x0)
(FStar.Pervasives.Native.Mktuple4__3 __@x0)
(FStar.Pervasives.Native.Mktuple4__4 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple4>


; </end encoding type FStar.Pervasives.Native.tuple4>


; <Start encoding assume FStar.Pervasives.Native.tuple4__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple4__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple4>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple4 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_4319694c225efa92ce9fad6e9d81f761 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple4@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple4>


; <Skipped let uu___is_Mktuple4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___1 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_382d1e9129053162252ec57e86d46f82 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___1>


; <Skipped let __proj__Mktuple4__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___2 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_fffd25e5325d259efa0675ef649c6864 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___2>


; <Skipped let __proj__Mktuple4__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___3 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_57b4005e0833f7b396e349ed7cdd1bb2 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___3>


; <Skipped let __proj__Mktuple4__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___4 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9e6c1a63d63f8735645b9898955a2dca () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___4>


; <Skipped let __proj__Mktuple4__item___4/>


; <Start encoding type FStar.Pervasives.Native.tuple5>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple5 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple5@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple5 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__5 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple5
(declare-fun FStar.Pervasives.Native.Mktuple5@tok () Term)
(declare-fun Tm_arrow_dd8a078a1b97a81b5089dc3637cc2887 () Term)

; <start constructor FStar.Pervasives.Native.tuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
186)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple5 @x0
@x1
@x2
@x3
@x4))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple5))))

; </end constructor FStar.Pervasives.Native.tuple5>


; <start constructor FStar.Pervasives.Native.Mktuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
193)
(= __@x0
(FStar.Pervasives.Native.Mktuple5 (FStar.Pervasives.Native.Mktuple5__a __@x0)
(FStar.Pervasives.Native.Mktuple5__b __@x0)
(FStar.Pervasives.Native.Mktuple5__c __@x0)
(FStar.Pervasives.Native.Mktuple5__d __@x0)
(FStar.Pervasives.Native.Mktuple5__e __@x0)
(FStar.Pervasives.Native.Mktuple5__1 __@x0)
(FStar.Pervasives.Native.Mktuple5__2 __@x0)
(FStar.Pervasives.Native.Mktuple5__3 __@x0)
(FStar.Pervasives.Native.Mktuple5__4 __@x0)
(FStar.Pervasives.Native.Mktuple5__5 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple5>


; </end encoding type FStar.Pervasives.Native.tuple5>


; <Start encoding assume FStar.Pervasives.Native.tuple5__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple5__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple5>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple5 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_cfa2e2c8b8b41312889ff659c4faa5f9 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple5@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple5>


; <Skipped let uu___is_Mktuple5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___1 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7519f72fe101267af170e00c6ce694af () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___1>


; <Skipped let __proj__Mktuple5__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___2 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3e46329f224aa70981a337f98afbaa87 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___2>


; <Skipped let __proj__Mktuple5__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___3 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_55e6dc1b736536de45fedf844003f847 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___3>


; <Skipped let __proj__Mktuple5__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___4 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3a4e86c6aee1a39b4811bdbc12405398 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___4>


; <Skipped let __proj__Mktuple5__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___5 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1a78355922fdaba3f3848932dfc0a089 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___5>


; <Skipped let __proj__Mktuple5__item___5/>


; <Start encoding type FStar.Pervasives.Native.tuple6>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple6 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple6@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple6 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__6 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple6
(declare-fun FStar.Pervasives.Native.Mktuple6@tok () Term)
(declare-fun Tm_arrow_f277ffaa7e891207f9c6bff5b88ffd67 () Term)

; <start constructor FStar.Pervasives.Native.tuple6>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple6 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
209)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple6 @x0
@x1
@x2
@x3
@x4
@x5))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple6))))

; </end constructor FStar.Pervasives.Native.tuple6>


; <start constructor FStar.Pervasives.Native.Mktuple6>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple6 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
216)
(= __@x0
(FStar.Pervasives.Native.Mktuple6 (FStar.Pervasives.Native.Mktuple6__a __@x0)
(FStar.Pervasives.Native.Mktuple6__b __@x0)
(FStar.Pervasives.Native.Mktuple6__c __@x0)
(FStar.Pervasives.Native.Mktuple6__d __@x0)
(FStar.Pervasives.Native.Mktuple6__e __@x0)
(FStar.Pervasives.Native.Mktuple6__f __@x0)
(FStar.Pervasives.Native.Mktuple6__1 __@x0)
(FStar.Pervasives.Native.Mktuple6__2 __@x0)
(FStar.Pervasives.Native.Mktuple6__3 __@x0)
(FStar.Pervasives.Native.Mktuple6__4 __@x0)
(FStar.Pervasives.Native.Mktuple6__5 __@x0)
(FStar.Pervasives.Native.Mktuple6__6 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple6>


; </end encoding type FStar.Pervasives.Native.tuple6>


; <Start encoding assume FStar.Pervasives.Native.tuple6__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple6__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple6>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple6 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_286587a1b9d299ba75a076f54a6dad5f () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple6@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple6>


; <Skipped let uu___is_Mktuple6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___1 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5b1e145eeceab869b8e427e6927dbd63 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___1>


; <Skipped let __proj__Mktuple6__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___2 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3207475e225d584881d3e0a297482887 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___2>


; <Skipped let __proj__Mktuple6__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___3 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_43e491b3b537a523a4f10de18b1915f5 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___3>


; <Skipped let __proj__Mktuple6__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___4 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f5747d5b721642d7ecb757b043f20880 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___4>


; <Skipped let __proj__Mktuple6__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___5 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_d6501381a0206e157ecc43950bb31fea () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___5>


; <Skipped let __proj__Mktuple6__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___6 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9c342f41120d0c7aea115b09b58cefb2 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___6>


; <Skipped let __proj__Mktuple6__item___6/>


; <Start encoding type FStar.Pervasives.Native.tuple7>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple7 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple7@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__7 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple7
(declare-fun FStar.Pervasives.Native.Mktuple7@tok () Term)
(declare-fun Tm_arrow_37ee9ec407a0f7bb69bf1b308f74a230 () Term)

; <start constructor FStar.Pervasives.Native.tuple7>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple7 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
234)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple7))))

; </end constructor FStar.Pervasives.Native.tuple7>


; <start constructor FStar.Pervasives.Native.Mktuple7>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple7 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
241)
(= __@x0
(FStar.Pervasives.Native.Mktuple7 (FStar.Pervasives.Native.Mktuple7__a __@x0)
(FStar.Pervasives.Native.Mktuple7__b __@x0)
(FStar.Pervasives.Native.Mktuple7__c __@x0)
(FStar.Pervasives.Native.Mktuple7__d __@x0)
(FStar.Pervasives.Native.Mktuple7__e __@x0)
(FStar.Pervasives.Native.Mktuple7__f __@x0)
(FStar.Pervasives.Native.Mktuple7__g __@x0)
(FStar.Pervasives.Native.Mktuple7__1 __@x0)
(FStar.Pervasives.Native.Mktuple7__2 __@x0)
(FStar.Pervasives.Native.Mktuple7__3 __@x0)
(FStar.Pervasives.Native.Mktuple7__4 __@x0)
(FStar.Pervasives.Native.Mktuple7__5 __@x0)
(FStar.Pervasives.Native.Mktuple7__6 __@x0)
(FStar.Pervasives.Native.Mktuple7__7 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple7>


; </end encoding type FStar.Pervasives.Native.tuple7>


; <Start encoding assume FStar.Pervasives.Native.tuple7__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple7__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple7>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple7 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_612dde2fedb1440c5d790ba7f5015319 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple7@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple7>


; <Skipped let uu___is_Mktuple7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___1 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_01c4488a68699f466c59799f5c1173ff () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___1>


; <Skipped let __proj__Mktuple7__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___2 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f317591858699585c67fe4ba8664e34c () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___2>


; <Skipped let __proj__Mktuple7__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___3 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_44afce9d86f095aacc82b3ea2e0e223c () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___3>


; <Skipped let __proj__Mktuple7__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___4 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e857539d4cc5be0510cbcfb97cb64b35 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___4>


; <Skipped let __proj__Mktuple7__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___5 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a249d3d5ba06026b12d41e289bb88061 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___5>


; <Skipped let __proj__Mktuple7__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___6 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_bf614c740d11cac9b5f8eb20b24c7d00 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___6>


; <Skipped let __proj__Mktuple7__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___7 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e775fbf03b08091e48143165286522f7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___7>


; <Skipped let __proj__Mktuple7__item___7/>


; <Start encoding type FStar.Pervasives.Native.tuple8>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple8 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple8@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__8 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple8
(declare-fun FStar.Pervasives.Native.Mktuple8@tok () Term)
(declare-fun Tm_arrow_e922a339a0aa0f375ed7113049811583 () Term)

; <start constructor FStar.Pervasives.Native.tuple8>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple8 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
261)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple8))))

; </end constructor FStar.Pervasives.Native.tuple8>


; <start constructor FStar.Pervasives.Native.Mktuple8>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple8 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
268)
(= __@x0
(FStar.Pervasives.Native.Mktuple8 (FStar.Pervasives.Native.Mktuple8__a __@x0)
(FStar.Pervasives.Native.Mktuple8__b __@x0)
(FStar.Pervasives.Native.Mktuple8__c __@x0)
(FStar.Pervasives.Native.Mktuple8__d __@x0)
(FStar.Pervasives.Native.Mktuple8__e __@x0)
(FStar.Pervasives.Native.Mktuple8__f __@x0)
(FStar.Pervasives.Native.Mktuple8__g __@x0)
(FStar.Pervasives.Native.Mktuple8__h __@x0)
(FStar.Pervasives.Native.Mktuple8__1 __@x0)
(FStar.Pervasives.Native.Mktuple8__2 __@x0)
(FStar.Pervasives.Native.Mktuple8__3 __@x0)
(FStar.Pervasives.Native.Mktuple8__4 __@x0)
(FStar.Pervasives.Native.Mktuple8__5 __@x0)
(FStar.Pervasives.Native.Mktuple8__6 __@x0)
(FStar.Pervasives.Native.Mktuple8__7 __@x0)
(FStar.Pervasives.Native.Mktuple8__8 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple8>


; </end encoding type FStar.Pervasives.Native.tuple8>


; <Start encoding assume FStar.Pervasives.Native.tuple8__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple8__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple8>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple8 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ee31533e24c78558f4566668a6ec027c () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple8@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple8>


; <Skipped let uu___is_Mktuple8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___1 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c971649e117e4941e7317eff508d5ea7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___1>


; <Skipped let __proj__Mktuple8__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___2 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_97dd51e3888c1c543d8f6c73d1808548 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___2>


; <Skipped let __proj__Mktuple8__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___3 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3931d1873633dc65fed4e022ee3df3ca () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___3>


; <Skipped let __proj__Mktuple8__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___4 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5c791e62f9472e4c351c2befb2b7a3d8 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___4>


; <Skipped let __proj__Mktuple8__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___5 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7ef7cac898ca0ef25893959e91d8c6ce () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___5>


; <Skipped let __proj__Mktuple8__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___6 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_b0ae5f58a7fa002e0313b58bf5fc74cb () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___6>


; <Skipped let __proj__Mktuple8__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___7 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7fcd94f7549ca8acfadc26bc5b82f590 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___7>


; <Skipped let __proj__Mktuple8__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___8 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_feaaf61fa62fef18c5ee7c39e9f86573 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___8>


; <Skipped let __proj__Mktuple8__item___8/>


; <Start encoding type FStar.Pervasives.Native.tuple9>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple9 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple9@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__9 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple9
(declare-fun FStar.Pervasives.Native.Mktuple9@tok () Term)
(declare-fun Tm_arrow_0c6bc368a301d7de6e1939ebea91ee60 () Term)

; <start constructor FStar.Pervasives.Native.tuple9>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple9 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
290)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple9 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple9))))

; </end constructor FStar.Pervasives.Native.tuple9>


; <start constructor FStar.Pervasives.Native.Mktuple9>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple9 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
297)
(= __@x0
(FStar.Pervasives.Native.Mktuple9 (FStar.Pervasives.Native.Mktuple9__a __@x0)
(FStar.Pervasives.Native.Mktuple9__b __@x0)
(FStar.Pervasives.Native.Mktuple9__c __@x0)
(FStar.Pervasives.Native.Mktuple9__d __@x0)
(FStar.Pervasives.Native.Mktuple9__e __@x0)
(FStar.Pervasives.Native.Mktuple9__f __@x0)
(FStar.Pervasives.Native.Mktuple9__g __@x0)
(FStar.Pervasives.Native.Mktuple9__h __@x0)
(FStar.Pervasives.Native.Mktuple9__i __@x0)
(FStar.Pervasives.Native.Mktuple9__1 __@x0)
(FStar.Pervasives.Native.Mktuple9__2 __@x0)
(FStar.Pervasives.Native.Mktuple9__3 __@x0)
(FStar.Pervasives.Native.Mktuple9__4 __@x0)
(FStar.Pervasives.Native.Mktuple9__5 __@x0)
(FStar.Pervasives.Native.Mktuple9__6 __@x0)
(FStar.Pervasives.Native.Mktuple9__7 __@x0)
(FStar.Pervasives.Native.Mktuple9__8 __@x0)
(FStar.Pervasives.Native.Mktuple9__9 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple9>


; </end encoding type FStar.Pervasives.Native.tuple9>


; <Start encoding assume FStar.Pervasives.Native.tuple9__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple9__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple9>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple9 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9ac8f39c7b1df1e87db7c9bf5bc37a38 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple9@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple9>


; <Skipped let uu___is_Mktuple9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___1 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_270119cc1f13c9afeb25322d78efc328 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___1>


; <Skipped let __proj__Mktuple9__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___2 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3c368dee2c86a1af7bd7ea91baab7613 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___2>


; <Skipped let __proj__Mktuple9__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___3 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e9c745e2da3dec50930b0a7e01a11cc3 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___3>


; <Skipped let __proj__Mktuple9__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___4 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a82ff41c5c66cd37481c83584c94a54d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___4>


; <Skipped let __proj__Mktuple9__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___5 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1b3b4c5e68fdf7277f64bde93e6534de () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___5>


; <Skipped let __proj__Mktuple9__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___6 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_837f1324f6fa51bb8a0e45ee48e4e058 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___6>


; <Skipped let __proj__Mktuple9__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___7 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a7562220963e3431d35de76c3c9c87b9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___7>


; <Skipped let __proj__Mktuple9__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___8 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_861b810bc1c20bbd221cecbce824b695 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___8>


; <Skipped let __proj__Mktuple9__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___9 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9a54b18d8e08fdf0e20244b3f960c9dc () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___9>


; <Skipped let __proj__Mktuple9__item___9/>


; <Start encoding type FStar.Pervasives.Native.tuple10>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple10 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple10@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__10 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple10
(declare-fun FStar.Pervasives.Native.Mktuple10@tok () Term)
(declare-fun Tm_arrow_61d31241317018093b2245d256adbcb5 () Term)

; <start constructor FStar.Pervasives.Native.tuple10>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple10 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
321)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple10 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple10))))

; </end constructor FStar.Pervasives.Native.tuple10>


; <start constructor FStar.Pervasives.Native.Mktuple10>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple10 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
328)
(= __@x0
(FStar.Pervasives.Native.Mktuple10 (FStar.Pervasives.Native.Mktuple10__a __@x0)
(FStar.Pervasives.Native.Mktuple10__b __@x0)
(FStar.Pervasives.Native.Mktuple10__c __@x0)
(FStar.Pervasives.Native.Mktuple10__d __@x0)
(FStar.Pervasives.Native.Mktuple10__e __@x0)
(FStar.Pervasives.Native.Mktuple10__f __@x0)
(FStar.Pervasives.Native.Mktuple10__g __@x0)
(FStar.Pervasives.Native.Mktuple10__h __@x0)
(FStar.Pervasives.Native.Mktuple10__i __@x0)
(FStar.Pervasives.Native.Mktuple10__j __@x0)
(FStar.Pervasives.Native.Mktuple10__1 __@x0)
(FStar.Pervasives.Native.Mktuple10__2 __@x0)
(FStar.Pervasives.Native.Mktuple10__3 __@x0)
(FStar.Pervasives.Native.Mktuple10__4 __@x0)
(FStar.Pervasives.Native.Mktuple10__5 __@x0)
(FStar.Pervasives.Native.Mktuple10__6 __@x0)
(FStar.Pervasives.Native.Mktuple10__7 __@x0)
(FStar.Pervasives.Native.Mktuple10__8 __@x0)
(FStar.Pervasives.Native.Mktuple10__9 __@x0)
(FStar.Pervasives.Native.Mktuple10__10 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple10>


; </end encoding type FStar.Pervasives.Native.tuple10>


; <Start encoding assume FStar.Pervasives.Native.tuple10__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple10__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple10>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple10 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f27282a056f525d8710bf32204d252ec () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple10@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple10>


; <Skipped let uu___is_Mktuple10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___1 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c581e9177cd071a1b6e057fca49ea75b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___1>


; <Skipped let __proj__Mktuple10__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___2 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ae4b2db87d7c69a8380f4d5ae20f2149 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___2>


; <Skipped let __proj__Mktuple10__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___3 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a21274cb112dc6619b2bde244e6a0f9a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___3>


; <Skipped let __proj__Mktuple10__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___4 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9a051d5cacf4367d170d590ba8bb720d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___4>


; <Skipped let __proj__Mktuple10__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___5 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_bbd73769b626202d4de52d4d60cd3b75 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___5>


; <Skipped let __proj__Mktuple10__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___6 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7ceeded5a3852448c1a5406becbd990e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___6>


; <Skipped let __proj__Mktuple10__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___7 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c68947c71d484ad43cd50646c4e1daf4 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___7>


; <Skipped let __proj__Mktuple10__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___8 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e7b9ff90289491020fe84c6ab3bc60c6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___8>


; <Skipped let __proj__Mktuple10__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___9 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_6dbb3170f112f78092d1caee0b341678 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___9>


; <Skipped let __proj__Mktuple10__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___10 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_45598a99c0a7fcc1bf2258b9ad4256cf () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___10>


; <Skipped let __proj__Mktuple10__item___10/>


; <Start encoding type FStar.Pervasives.Native.tuple11>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple11 (Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple11@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__11 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple11
(declare-fun FStar.Pervasives.Native.Mktuple11@tok () Term)
(declare-fun Tm_arrow_bf9783a1a3bf19ab918f42acff1daa32 () Term)

; <start constructor FStar.Pervasives.Native.tuple11>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple11 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
354)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple11 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple11))))

; </end constructor FStar.Pervasives.Native.tuple11>


; <start constructor FStar.Pervasives.Native.Mktuple11>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple11 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
361)
(= __@x0
(FStar.Pervasives.Native.Mktuple11 (FStar.Pervasives.Native.Mktuple11__a __@x0)
(FStar.Pervasives.Native.Mktuple11__b __@x0)
(FStar.Pervasives.Native.Mktuple11__c __@x0)
(FStar.Pervasives.Native.Mktuple11__d __@x0)
(FStar.Pervasives.Native.Mktuple11__e __@x0)
(FStar.Pervasives.Native.Mktuple11__f __@x0)
(FStar.Pervasives.Native.Mktuple11__g __@x0)
(FStar.Pervasives.Native.Mktuple11__h __@x0)
(FStar.Pervasives.Native.Mktuple11__i __@x0)
(FStar.Pervasives.Native.Mktuple11__j __@x0)
(FStar.Pervasives.Native.Mktuple11__k __@x0)
(FStar.Pervasives.Native.Mktuple11__1 __@x0)
(FStar.Pervasives.Native.Mktuple11__2 __@x0)
(FStar.Pervasives.Native.Mktuple11__3 __@x0)
(FStar.Pervasives.Native.Mktuple11__4 __@x0)
(FStar.Pervasives.Native.Mktuple11__5 __@x0)
(FStar.Pervasives.Native.Mktuple11__6 __@x0)
(FStar.Pervasives.Native.Mktuple11__7 __@x0)
(FStar.Pervasives.Native.Mktuple11__8 __@x0)
(FStar.Pervasives.Native.Mktuple11__9 __@x0)
(FStar.Pervasives.Native.Mktuple11__10 __@x0)
(FStar.Pervasives.Native.Mktuple11__11 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple11>


; </end encoding type FStar.Pervasives.Native.tuple11>


; <Start encoding assume FStar.Pervasives.Native.tuple11__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple11__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple11>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple11 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_005819ee7a23a5c47189bae72b85d85c () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple11@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple11>


; <Skipped let uu___is_Mktuple11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_31968e334e9582d95281307f534992a9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___1>


; <Skipped let __proj__Mktuple11__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_6252dd9f4473dc54a3482810e8556404 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___2>


; <Skipped let __proj__Mktuple11__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ec3ce6b7406c091cd7d0961922bb5a02 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___3>


; <Skipped let __proj__Mktuple11__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_be7571e73b0e7fc24d03efe0e003c054 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___4>


; <Skipped let __proj__Mktuple11__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_97ae7d913e508c46c48c3b51553d4459 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___5>


; <Skipped let __proj__Mktuple11__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1dca311798936510e0ead61e14cf32a6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___6>


; <Skipped let __proj__Mktuple11__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_eec431ea31093a646681ef2ceb2e2986 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___7>


; <Skipped let __proj__Mktuple11__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_689b2f06e9fd83f7a84ce80a13d338c6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___8>


; <Skipped let __proj__Mktuple11__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_20210a3d9498f929cb7aa68d9e8b5ebf () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___9>


; <Skipped let __proj__Mktuple11__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_96812f2124d88760b2002bbe1502c3c9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___10>


; <Skipped let __proj__Mktuple11__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_abcfa2582f68905d460c5ef4a7642f2d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___11>


; <Skipped let __proj__Mktuple11__item___11/>


; <Start encoding type FStar.Pervasives.Native.tuple12>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple12 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple12@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__12 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple12
(declare-fun FStar.Pervasives.Native.Mktuple12@tok () Term)
(declare-fun Tm_arrow_4d5cd995d6f44a2ec39d0f193be0be65 () Term)

; <start constructor FStar.Pervasives.Native.tuple12>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple12 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
389)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple12 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple12))))

; </end constructor FStar.Pervasives.Native.tuple12>


; <start constructor FStar.Pervasives.Native.Mktuple12>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple12 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
396)
(= __@x0
(FStar.Pervasives.Native.Mktuple12 (FStar.Pervasives.Native.Mktuple12__a __@x0)
(FStar.Pervasives.Native.Mktuple12__b __@x0)
(FStar.Pervasives.Native.Mktuple12__c __@x0)
(FStar.Pervasives.Native.Mktuple12__d __@x0)
(FStar.Pervasives.Native.Mktuple12__e __@x0)
(FStar.Pervasives.Native.Mktuple12__f __@x0)
(FStar.Pervasives.Native.Mktuple12__g __@x0)
(FStar.Pervasives.Native.Mktuple12__h __@x0)
(FStar.Pervasives.Native.Mktuple12__i __@x0)
(FStar.Pervasives.Native.Mktuple12__j __@x0)
(FStar.Pervasives.Native.Mktuple12__k __@x0)
(FStar.Pervasives.Native.Mktuple12__l __@x0)
(FStar.Pervasives.Native.Mktuple12__1 __@x0)
(FStar.Pervasives.Native.Mktuple12__2 __@x0)
(FStar.Pervasives.Native.Mktuple12__3 __@x0)
(FStar.Pervasives.Native.Mktuple12__4 __@x0)
(FStar.Pervasives.Native.Mktuple12__5 __@x0)
(FStar.Pervasives.Native.Mktuple12__6 __@x0)
(FStar.Pervasives.Native.Mktuple12__7 __@x0)
(FStar.Pervasives.Native.Mktuple12__8 __@x0)
(FStar.Pervasives.Native.Mktuple12__9 __@x0)
(FStar.Pervasives.Native.Mktuple12__10 __@x0)
(FStar.Pervasives.Native.Mktuple12__11 __@x0)
(FStar.Pervasives.Native.Mktuple12__12 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple12>


; </end encoding type FStar.Pervasives.Native.tuple12>


; <Start encoding assume FStar.Pervasives.Native.tuple12__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple12__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple12>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple12 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5c9f47d9090f554c9826d2f65e388f20 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple12@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple12>


; <Skipped let uu___is_Mktuple12/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_618941d7cf5ddbaabe15df8579b4a387 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___1>


; <Skipped let __proj__Mktuple12__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_84e9e2280e9bcb3233e4f33f86d66ea6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___2>


; <Skipped let __proj__Mktuple12__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1fa79c5abf9f18607bd2e46a1a6967fa () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___3>


; <Skipped let __proj__Mktuple12__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_0f49c582489d782b08195e81221181dc () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___4>


; <Skipped let __proj__Mktuple12__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_29b7181ebb44f9e4a45f95c4f8478c6a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___5>


; <Skipped let __proj__Mktuple12__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3cc2863a7d7f23e3916fa1e43483cb90 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___6>


; <Skipped let __proj__Mktuple12__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c7deea49701ab64a73985bf522e46359 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___7>


; <Skipped let __proj__Mktuple12__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_380615e7761919086537a14273a02d22 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___8>


; <Skipped let __proj__Mktuple12__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_245250918a4432b31aea8152d056489a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___9>


; <Skipped let __proj__Mktuple12__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2a967c8402c441e6d8a9336a7568e4de () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___10>


; <Skipped let __proj__Mktuple12__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_543c3feac0cd9e04ecb6cfd74ced8964 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___11>


; <Skipped let __proj__Mktuple12__item___11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e91029e2320896c60e94f554727a0c41 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___12@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___12>


; <Skipped let __proj__Mktuple12__item___12/>


; <Start encoding type FStar.Pervasives.Native.tuple13>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple13@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__m (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__12 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__13 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple13
(declare-fun FStar.Pervasives.Native.Mktuple13@tok () Term)
(declare-fun Tm_arrow_6462785e86ca440ee74ed32e1053eae3 () Term)

; <start constructor FStar.Pervasives.Native.tuple13>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple13 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
426)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple13 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple13))))

; </end constructor FStar.Pervasives.Native.tuple13>


; <start constructor FStar.Pervasives.Native.Mktuple13>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple13 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
433)
(= __@x0
(FStar.Pervasives.Native.Mktuple13 (FStar.Pervasives.Native.Mktuple13__a __@x0)
(FStar.Pervasives.Native.Mktuple13__b __@x0)
(FStar.Pervasives.Native.Mktuple13__c __@x0)
(FStar.Pervasives.Native.Mktuple13__d __@x0)
(FStar.Pervasives.Native.Mktuple13__e __@x0)
(FStar.Pervasives.Native.Mktuple13__f __@x0)
(FStar.Pervasives.Native.Mktuple13__g __@x0)
(FStar.Pervasives.Native.Mktuple13__h __@x0)
(FStar.Pervasives.Native.Mktuple13__i __@x0)
(FStar.Pervasives.Native.Mktuple13__j __@x0)
(FStar.Pervasives.Native.Mktuple13__k __@x0)
(FStar.Pervasives.Native.Mktuple13__l __@x0)
(FStar.Pervasives.Native.Mktuple13__m __@x0)
(FStar.Pervasives.Native.Mktuple13__1 __@x0)
(FStar.Pervasives.Native.Mktuple13__2 __@x0)
(FStar.Pervasives.Native.Mktuple13__3 __@x0)
(FStar.Pervasives.Native.Mktuple13__4 __@x0)
(FStar.Pervasives.Native.Mktuple13__5 __@x0)
(FStar.Pervasives.Native.Mktuple13__6 __@x0)
(FStar.Pervasives.Native.Mktuple13__7 __@x0)
(FStar.Pervasives.Native.Mktuple13__8 __@x0)
(FStar.Pervasives.Native.Mktuple13__9 __@x0)
(FStar.Pervasives.Native.Mktuple13__10 __@x0)
(FStar.Pervasives.Native.Mktuple13__11 __@x0)
(FStar.Pervasives.Native.Mktuple13__12 __@x0)
(FStar.Pervasives.Native.Mktuple13__13 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple13>


; </end encoding type FStar.Pervasives.Native.tuple13>


; <Start encoding assume FStar.Pervasives.Native.tuple13__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple13__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple13>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_68c092e8b387730b412c4dcf592b12d3 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple13@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple13>


; <Skipped let uu___is_Mktuple13/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_82a3dc3a5dbad615d8d4a31db238e43f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___1>


; <Skipped let __proj__Mktuple13__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1da976aaa65f1c6b8b256dfc45c41306 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___2>


; <Skipped let __proj__Mktuple13__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ca5cf529c415deee29e0a34c0c5d1c9f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___3>


; <Skipped let __proj__Mktuple13__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_94f6c578541b6cb528ca9e7dd1dacc3b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___4>


; <Skipped let __proj__Mktuple13__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_211e172b7220adc186d8a02ff17e8780 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___5>


; <Skipped let __proj__Mktuple13__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9276a4f669d8497205e8d59f12da53ba () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___6>


; <Skipped let __proj__Mktuple13__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_8aa8f381a5ed57cbbae9dcd2405ce80f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___7>


; <Skipped let __proj__Mktuple13__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_51814106613688cf259d7cdba9c24d93 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___8>


; <Skipped let __proj__Mktuple13__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_05fec25e6f03f974bb2933a910642d7e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___9>


; <Skipped let __proj__Mktuple13__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3280ee04611a7985c9d107bb1a8a330a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___10>


; <Skipped let __proj__Mktuple13__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_86c868d5d5058e8e5ec1f4d0285c7e90 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___11>


; <Skipped let __proj__Mktuple13__item___11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7263c1a3c4475bb4e4b41a1be4bf22da () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___12@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___12>


; <Skipped let __proj__Mktuple13__item___12/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___13>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_338c65ae58844787891c6f47cf01c068 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___13@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___13>


; <Skipped let __proj__Mktuple13__item___13/>


; <Start encoding type FStar.Pervasives.Native.tuple14>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple14@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__m (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__n (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__12 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__13 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__14 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple14
(declare-fun FStar.Pervasives.Native.Mktuple14@tok () Term)
(declare-fun Tm_arrow_484e3bf88a886900f7e695d7333615e9 () Term)

; <start constructor FStar.Pervasives.Native.tuple14>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple14 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
465)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple14 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple14))))

; </end constructor FStar.Pervasives.Native.tuple14>


; <start constructor FStar.Pervasives.Native.Mktuple14>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple14 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
472)
(= __@x0
(FStar.Pervasives.Native.Mktuple14 (FStar.Pervasives.Native.Mktuple14__a __@x0)
(FStar.Pervasives.Native.Mktuple14__b __@x0)
(FStar.Pervasives.Native.Mktuple14__c __@x0)
(FStar.Pervasives.Native.Mktuple14__d __@x0)
(FStar.Pervasives.Native.Mktuple14__e __@x0)
(FStar.Pervasives.Native.Mktuple14__f __@x0)
(FStar.Pervasives.Native.Mktuple14__g __@x0)
(FStar.Pervasives.Native.Mktuple14__h __@x0)
(FStar.Pervasives.Native.Mktuple14__i __@x0)
(FStar.Pervasives.Native.Mktuple14__j __@x0)
(FStar.Pervasives.Native.Mktuple14__k __@x0)
(FStar.Pervasives.Native.Mktuple14__l __@x0)
(FStar.Pervasives.Native.Mktuple14__m __@x0)
(FStar.Pervasives.Native.Mktuple14__n __@x0)
(FStar.Pervasives.Native.Mktuple14__1 __@x0)
(FStar.Pervasives.Native.Mktuple14__2 __@x0)
(FStar.Pervasives.Native.Mktuple14__3 __@x0)
(FStar.Pervasives.Native.Mktuple14__4 __@x0)
(FStar.Pervasives.Native.Mktuple14__5 __@x0)
(FStar.Pervasives.Native.Mktuple14__6 __@x0)
(FStar.Pervasives.Native.Mktuple14__7 __@x0)
(FStar.Pervasives.Native.Mktuple14__8 __@x0)
(FStar.Pervasives.Native.Mktuple14__9 __@x0)
(FStar.Pervasives.Native.Mktuple14__10 __@x0)
(FStar.Pervasives.Native.Mktuple14__11 __@x0)
(FStar.Pervasives.Native.Mktuple14__12 __@x0)
(FStar.Pervasives.Native.Mktuple14__13 __@x0)
(FStar.Pervasives.Native.Mktuple14__14 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple14>


; </end encoding type FStar.Pervasives.Native.tuple14>


; <Start encoding assume FStar.Pervasives.Native.tuple14__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple14__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple14>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2de133cfaca100fc23d8bf4b3421db9a () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple14@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple14>


; <Skipped let uu___is_Mktuple14/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2e3216cab266e138debd68d0a503c177 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___1>


; <Skipped let __proj__Mktuple14__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_958b0270e487d0bf5fe9191b9efaa127 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___2>


; <Skipped let __proj__Mktuple14__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_08349f596f8c0acf60d1587bebe8c91b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___3>


; <Skipped let __proj__Mktuple14__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2b069168147ba0f67f117ad5b0ac078b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___4>


; <Skipped let __proj__Mktuple14__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1e38bb16245a24a197c44a262fee7bf1 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___5>


; <Skipped let __proj__Mktuple14__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7a148953a3884454d8a1dffddce086bb () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___6>


; <Skipped let __proj__Mktuple14__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_812eeb3fdab56dfea8e419236740acb0 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___7>


; <Skipped let __proj__Mktuple14__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9dc932ce7cdfd6fa57f6536787fcb65b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___8>


; <Skipped let __proj__Mktuple14__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2600722933f06bc55e28bb3fc2ce4a6a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___9>


; <Skipped let __proj__Mktuple14__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f51203e57fd66f9e9293b8962c57edfe () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___10>


; <Skipped let __proj__Mktuple14__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7c34e0c28edc5fc4ad24d0b749c0adb7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___11>


; <Skipped let __proj__Mktuple14__item___11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_8772cc50ea320af17b3f2371c273679a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___12@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___12>


; <Skipped let __proj__Mktuple14__item___12/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___13>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_039da0b9a8da1a651a1c570e55456614 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___13@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___13>


; <Skipped let __proj__Mktuple14__item___13/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___14>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_579ada2eb036c15c7306dac5b648153e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___14@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___14>


; <Skipped let __proj__Mktuple14__item___14/>


; End Externals for module FStar.Pervasives.Native


; Externals for interface FStar.Pervasives


; <Start encoding val FStar.Pervasives.remove_unused_type_parameters>

(declare-fun FStar.Pervasives.remove_unused_type_parameters (Term) Term)
(declare-fun Tm_arrow_555d62757eeaf90340982fcdf25f6704 () Term)
(declare-fun FStar.Pervasives.remove_unused_type_parameters@tok () Term)

; </end encoding val FStar.Pervasives.remove_unused_type_parameters>


; <Start encoding let pattern>

(declare-fun FStar.Pervasives.pattern () Term)

; </end encoding let pattern>


; <Start encoding val FStar.Pervasives.smt_pat>

(declare-fun FStar.Pervasives.smt_pat (Term Term) Term)
(declare-fun Tm_arrow_ce7b692455ad1649f97902066cf7c9aa () Term)
(declare-fun FStar.Pervasives.smt_pat@tok () Term)

; </end encoding val FStar.Pervasives.smt_pat>


; <Start encoding val FStar.Pervasives.smt_pat_or>

(declare-fun FStar.Pervasives.smt_pat_or (Term) Term)
(declare-fun Tm_arrow_cbfaca2770c8ef7d6393b664b7ea1a41 () Term)
(declare-fun FStar.Pervasives.smt_pat_or@tok () Term)

; </end encoding val FStar.Pervasives.smt_pat_or>


; <Start encoding let eqtype_u>

(declare-fun FStar.Pervasives.eqtype_u () Term)


; </end encoding let eqtype_u>


; <Skipped effect Lemma a pre post pats = Prims.Pure a/>


; <Start encoding val FStar.Pervasives.spinoff>

(declare-fun FStar.Pervasives.spinoff (Term) Term)

(declare-fun FStar.Pervasives.spinoff@tok () Term)

; </end encoding val FStar.Pervasives.spinoff>


; <Start encoding val FStar.Pervasives.spinoff_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.spinoff_eq (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.spinoff_eq@tok () Term)

; </end encoding val FStar.Pervasives.spinoff_eq>


; <Start encoding val FStar.Pervasives.spinoff_equiv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.spinoff_equiv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.spinoff_equiv@tok () Term)

; </end encoding val FStar.Pervasives.spinoff_equiv>


; <Start encoding val FStar.Pervasives.assert_spinoff>

(declare-fun FStar.Pervasives.assert_spinoff (Term) Term)

(declare-fun Tm_arrow_071538fd1c72fb82c7bb7b280daddf84 () Term)
(declare-fun FStar.Pervasives.assert_spinoff@tok () Term)


; </end encoding val FStar.Pervasives.assert_spinoff>


; <Start encoding let id>

(declare-fun FStar.Pervasives.id (Term Term) Term)

(declare-fun FStar.Pervasives.id@tok () Term)

; </end encoding let id>


; <Start encoding let trivial_pure_post>

(declare-fun FStar.Pervasives.trivial_pure_post (Term) Term)
(declare-fun Tm_arrow_53823f439377767fbcd3e27ebcdb971b () Term)
(declare-fun FStar.Pervasives.trivial_pure_post@tok () Term)

(declare-fun Tm_abs_5e34897418ce4950a4effcc8c159cf53 (Term) Term)

; </end encoding let trivial_pure_post>


; <Start encoding val FStar.Pervasives.ambient>

(declare-fun FStar.Pervasives.ambient (Term Term) Term)
(declare-fun Tm_arrow_9e007179360e2932d75ab29019e3d7fa () Term)
(declare-fun FStar.Pervasives.ambient@tok () Term)

; </end encoding val FStar.Pervasives.ambient>


; <Start encoding val FStar.Pervasives.intro_ambient>

(declare-fun FStar.Pervasives.intro_ambient (Term Term) Term)
(declare-fun Tm_arrow_6fc6334d56387f3d408122a4bd045e7e () Term)
(declare-fun FStar.Pervasives.intro_ambient@tok () Term)

; </end encoding val FStar.Pervasives.intro_ambient>


; <Start encoding val FStar.Pervasives.normalize_term>

(declare-fun FStar.Pervasives.normalize_term (Term Term) Term)

(declare-fun FStar.Pervasives.normalize_term@tok () Term)

; </end encoding val FStar.Pervasives.normalize_term>


; <Start encoding val FStar.Pervasives.normalize>

(declare-fun FStar.Pervasives.normalize (Term) Term)

(declare-fun FStar.Pervasives.normalize@tok () Term)

; </end encoding val FStar.Pervasives.normalize>


; <Start encoding val FStar.Pervasives.norm_step>

(declare-fun FStar.Pervasives.norm_step () Term)

; </end encoding val FStar.Pervasives.norm_step>


; <Start encoding val FStar.Pervasives.simplify>

(declare-fun FStar.Pervasives.simplify (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.simplify>


; <Start encoding val FStar.Pervasives.weak>

(declare-fun FStar.Pervasives.weak (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.weak>


; <Start encoding val FStar.Pervasives.hnf>

(declare-fun FStar.Pervasives.hnf (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.hnf>


; <Start encoding val FStar.Pervasives.primops>

(declare-fun FStar.Pervasives.primops (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.primops>


; <Start encoding val FStar.Pervasives.delta>

(declare-fun FStar.Pervasives.delta (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.delta>


; <Start encoding val FStar.Pervasives.norm_debug>

(declare-fun FStar.Pervasives.norm_debug (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.norm_debug>


; <Start encoding val FStar.Pervasives.zeta>

(declare-fun FStar.Pervasives.zeta (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.zeta>


; <Start encoding val FStar.Pervasives.zeta_full>

(declare-fun FStar.Pervasives.zeta_full (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.zeta_full>


; <Start encoding val FStar.Pervasives.iota>

(declare-fun FStar.Pervasives.iota (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.iota>


; <Start encoding val FStar.Pervasives.nbe>

(declare-fun FStar.Pervasives.nbe (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.nbe>


; <Start encoding val FStar.Pervasives.reify_>

(declare-fun FStar.Pervasives.reify_ (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.reify_>


; <Start encoding val FStar.Pervasives.delta_only>

(declare-fun FStar.Pervasives.delta_only (Term) Term)
(declare-fun Tm_arrow_f14a20345cd55ddda96b6c4cc49e05f1 () Term)
(declare-fun FStar.Pervasives.delta_only@tok () Term)

; </end encoding val FStar.Pervasives.delta_only>


; <Start encoding val FStar.Pervasives.delta_fully>

(declare-fun FStar.Pervasives.delta_fully (Term) Term)

(declare-fun FStar.Pervasives.delta_fully@tok () Term)

; </end encoding val FStar.Pervasives.delta_fully>


; <Start encoding val FStar.Pervasives.delta_attr>

(declare-fun FStar.Pervasives.delta_attr (Term) Term)

(declare-fun FStar.Pervasives.delta_attr@tok () Term)

; </end encoding val FStar.Pervasives.delta_attr>


; <Start encoding val FStar.Pervasives.delta_qualifier>

(declare-fun FStar.Pervasives.delta_qualifier (Term) Term)

(declare-fun FStar.Pervasives.delta_qualifier@tok () Term)

; </end encoding val FStar.Pervasives.delta_qualifier>


; <Start encoding val FStar.Pervasives.delta_namespace>

(declare-fun FStar.Pervasives.delta_namespace (Term) Term)

(declare-fun FStar.Pervasives.delta_namespace@tok () Term)

; </end encoding val FStar.Pervasives.delta_namespace>


; <Start encoding val FStar.Pervasives.unmeta>

(declare-fun FStar.Pervasives.unmeta (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unmeta>


; <Start encoding val FStar.Pervasives.unascribe>

(declare-fun FStar.Pervasives.unascribe (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unascribe>


; <Start encoding val FStar.Pervasives.norm>

(declare-fun FStar.Pervasives.norm (Term Term Term) Term)
(declare-fun Tm_arrow_7d92e7a4aa7eee4098b10c5f1b3d77ea () Term)
(declare-fun FStar.Pervasives.norm@tok () Term)

; </end encoding val FStar.Pervasives.norm>


; <Start encoding val FStar.Pervasives.assert_norm>

(declare-fun FStar.Pervasives.assert_norm (Term) Term)

(declare-fun Tm_arrow_ee24fcf624d074d3c637ee61e4a867fb () Term)
(declare-fun FStar.Pervasives.assert_norm@tok () Term)


; </end encoding val FStar.Pervasives.assert_norm>


; <Start encoding val FStar.Pervasives.normalize_term_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.normalize_term_spec (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.normalize_term_spec@tok () Term)

; </end encoding val FStar.Pervasives.normalize_term_spec>


; <Start encoding val FStar.Pervasives.normalize_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.normalize_spec (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.normalize_spec@tok () Term)

; </end encoding val FStar.Pervasives.normalize_spec>


; <Start encoding val FStar.Pervasives.norm_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.norm_spec (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.norm_spec@tok () Term)

; </end encoding val FStar.Pervasives.norm_spec>


; <Start encoding let reveal_opaque>

(declare-fun FStar.Pervasives.reveal_opaque (Term Term) Term)
(declare-fun Tm_refine_2be30877b98f57c6ef5847ce3a81c23c (Term Term Term) Term)
(declare-fun Tm_arrow_ba8e05da7828191e456b9d6196e5c486 (Term Term) Term)
(declare-fun Tm_arrow_a3d09fecedc35d104f95c5fde10a81ff () Term)
(declare-fun FStar.Pervasives.reveal_opaque@tok () Term)



; </end encoding let reveal_opaque>


; <Start encoding let pure_return>

(declare-fun FStar.Pervasives.pure_return (Term Term) Term)
(declare-fun Tm_arrow_0dff8d294aeaf0b1d7e9cad664c9a15f () Term)
(declare-fun FStar.Pervasives.pure_return@tok () Term)

(declare-fun Tm_abs_bc5117f6a06a581c69e04141781c86d0 (Term Term Term) Term)
(declare-fun Tm_arrow_c88a29758356586fc450d481d4b685f3 (Term) Term)
(declare-fun Tm_abs_bdac9a3f32789788b83138a3a4262d0d (Term Term) Term)

; </end encoding let pure_return>


; <Start encoding let pure_bind_wp>

(declare-fun Tm_arrow_c05bc9331677cc1a187ad7677301a601 (Term Term) Term)
(declare-fun FStar.Pervasives.pure_bind_wp (Term Term Term Term) Term)

(declare-fun Tm_arrow_f8eba41a4bcb9aca0e3c11224f695d1e () Term)
(declare-fun FStar.Pervasives.pure_bind_wp@tok () Term)


(declare-fun Tm_abs_d0f415a5361a9d7988d8e425dc193472 (Term Term Term) Term)

(declare-fun Tm_abs_72b65b71b828688dbb0ba657715a194c (Term Term Term Term) Term)

; </end encoding let pure_bind_wp>


; <Start encoding let pure_if_then_else>

(declare-fun FStar.Pervasives.pure_if_then_else (Term Term Term Term) Term)
(declare-fun Tm_arrow_5911c11ab85061b4a8acf6a6ff43aaea () Term)
(declare-fun FStar.Pervasives.pure_if_then_else@tok () Term)

(declare-fun Tm_abs_614d7ab3976dfea6b6428085a93bafcc (Term Term Term Term) Term)

; </end encoding let pure_if_then_else>


; <Start encoding let pure_ite_wp>

(declare-fun FStar.Pervasives.pure_ite_wp (Term Term) Term)
(declare-fun Tm_arrow_983cc9c1e881fffd3b37c61b327d54c8 () Term)
(declare-fun FStar.Pervasives.pure_ite_wp@tok () Term)

(declare-fun Tm_abs_ea1703a99385b474600aa7a3bdb045c5 (Term Term Term) Term)
(declare-fun Tm_arrow_b275e247a67e3e77d7c5997d864d1247 (Term) Term)
(declare-fun Tm_abs_f9993abe3e10fc5902262cf22e5f5e1c (Term Term Term) Term)

(declare-fun Tm_abs_a4d8a67e708eb0f8e41d6eefd90d8b3d (Term Term) Term)

; </end encoding let pure_ite_wp>


; <Start encoding let pure_close_wp>


(declare-fun FStar.Pervasives.pure_close_wp (Term Term Term) Term)

(declare-fun Tm_arrow_6424f17922e38fc8eb3b7ad8d9107d78 () Term)
(declare-fun FStar.Pervasives.pure_close_wp@tok () Term)




(declare-fun Tm_abs_bef01cdc202d648a37f7725a1e8579fa (Term Term Term) Term)

; </end encoding let pure_close_wp>


; <Start encoding let pure_null_wp>

(declare-fun FStar.Pervasives.pure_null_wp (Term) Term)
(declare-fun Tm_arrow_e02f472dad10492b4fdaf21971ae643f () Term)
(declare-fun FStar.Pervasives.pure_null_wp@tok () Term)



(declare-fun Tm_abs_c7a599bd05f6d553477b7b3a5a51d357 (Term) Term)

; </end encoding let pure_null_wp>


; <Start encoding let pure_assert_wp>

(declare-fun FStar.Pervasives.pure_assert_wp (Term) Term)

(declare-fun FStar.Pervasives.pure_assert_wp@tok () Term)

; </end encoding let pure_assert_wp>


; <Start encoding let pure_assume_wp>

(declare-fun FStar.Pervasives.pure_assume_wp (Term) Term)

(declare-fun FStar.Pervasives.pure_assume_wp@tok () Term)

; </end encoding let pure_assume_wp>


; <Skipped new_effect { DIV ... }/>


; <Skipped sub_effect PURE ~> DIV/>


; <Start encoding let div_hoare_to_wp>

(declare-fun FStar.Pervasives.div_hoare_to_wp (Term Term Term) Term)
(declare-fun Tm_arrow_e81e37f60b892c60a4b806bfecd6c240 () Term)
(declare-fun FStar.Pervasives.div_hoare_to_wp@tok () Term)




(declare-fun Tm_abs_69982e78bbdc9cbdfcc98c8c3ec276f1 (Term Term Term Term) Term)


(declare-fun Tm_abs_95829b03554cf2093d2bc29e28500b94 (Term Term Term) Term)

; </end encoding let div_hoare_to_wp>


; <Skipped effect Div a pre post = FStar.Pervasives.DIV a/>


; <Skipped effect Dv a = FStar.Pervasives.DIV a/>


; <Skipped effect EXT a = FStar.Pervasives.Dv a/>


; <Start encoding let st_pre_h>

(declare-fun FStar.Pervasives.st_pre_h (Term) Term)

(declare-fun FStar.Pervasives.st_pre_h@tok () Term)


; </end encoding let st_pre_h>


; <Start encoding let st_post_h'>

(declare-fun FStar.Pervasives.st_post_h_ (Term Term Term) Term)
(declare-fun Tm_arrow_659175ed40df3b798f91ffaee9e689bd () Term)
(declare-fun FStar.Pervasives.st_post_h_@tok () Term)

(declare-fun Tm_arrow_14435f7112db17792f8cd33f8f7ea859 (Term Term Term) Term)

; </end encoding let st_post_h'>


; <Start encoding let st_post_h>

(declare-fun FStar.Pervasives.st_post_h (Term Term) Term)

(declare-fun FStar.Pervasives.st_post_h@tok () Term)

; </end encoding let st_post_h>


; <Start encoding let st_wp_h>

(declare-fun FStar.Pervasives.st_wp_h (Term Term) Term)

(declare-fun FStar.Pervasives.st_wp_h@tok () Term)
(declare-fun Tm_arrow_c80b139653078194d2de90941effdc68 (Term Term) Term)

; </end encoding let st_wp_h>


; <Start encoding let st_return>

(declare-fun FStar.Pervasives.st_return (Term Term Term Term) Term)

(declare-fun Tm_arrow_6bfe4bf6faf1fb53a521d575cefc35ef () Term)
(declare-fun FStar.Pervasives.st_return@tok () Term)


; </end encoding let st_return>


; <Start encoding let st_bind_wp>

(declare-fun Tm_arrow_c6e0af8c2ccbdda79db5c09d07e87e35 (Term Term Term) Term)
(declare-fun FStar.Pervasives.st_bind_wp (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_0eca50df2f29485bdbf578799f16b4a6 () Term)
(declare-fun FStar.Pervasives.st_bind_wp@tok () Term)

(declare-fun Tm_arrow_eb9b1a038524b37579c152a3f169145e (Term Term) Term)
(declare-fun Tm_abs_0f3b5ee9eaa8de8cacad7d3dcacb4558 (Term Term Term Term) Term)

; </end encoding let st_bind_wp>


; <Start encoding let st_if_then_else>

(declare-fun FStar.Pervasives.st_if_then_else (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_6e48361e1a1c92df6ec1ff87e622ddad () Term)
(declare-fun FStar.Pervasives.st_if_then_else@tok () Term)

; </end encoding let st_if_then_else>


; <Start encoding let st_ite_wp>

(declare-fun FStar.Pervasives.st_ite_wp (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_eaad896c6afdcb7ade2e80b5a6a930af () Term)
(declare-fun FStar.Pervasives.st_ite_wp@tok () Term)

; </end encoding let st_ite_wp>


; <Start encoding let st_stronger>

(declare-fun FStar.Pervasives.st_stronger (Term Term Term Term) Term)
(declare-fun Tm_arrow_ae4d7f489de84317e0022bf89d45dd95 () Term)
(declare-fun FStar.Pervasives.st_stronger@tok () Term)

; </end encoding let st_stronger>


; <Start encoding let st_close_wp>


(declare-fun FStar.Pervasives.st_close_wp (Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_de6d3045642382698e9e38d41acfd7cc () Term)
(declare-fun FStar.Pervasives.st_close_wp@tok () Term)


; </end encoding let st_close_wp>


; <Start encoding let st_trivial>

(declare-fun FStar.Pervasives.st_trivial (Term Term Term) Term)
(declare-fun Tm_arrow_f145e04ff3c7033bdfc718f7f5bb1df0 () Term)
(declare-fun FStar.Pervasives.st_trivial@tok () Term)

(declare-fun Tm_abs_89b21c42be5bc00d63e29f63ae20d4e2 (Term Term) Term)

; </end encoding let st_trivial>


; <Skipped new_effect { STATE_h ... }/>


; <Start encoding type FStar.Pervasives.result>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.result (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.result@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.V (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.V_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.V_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.V
(declare-fun FStar.Pervasives.V@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.E (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.E_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.E_e (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.E
(declare-fun FStar.Pervasives.E@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Err (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Err_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Err_msg (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Err
(declare-fun FStar.Pervasives.Err@tok () Term)
(declare-fun Tm_arrow_30908143640041985b9200e2fb38a259 () Term)
(declare-fun Tm_arrow_f8bb10130fea772e0f786d78a188c381 () Term)
(declare-fun Tm_arrow_93661c87034b0b64c4714dafbe2b02e6 () Term)

; <start constructor FStar.Pervasives.result>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.result ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
263)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Pervasives.result @x0))
 
;;no pats
:qid is-FStar.Pervasives.result))))

; </end constructor FStar.Pervasives.result>


; <start constructor FStar.Pervasives.V>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.V ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
270)
(= __@x0
(FStar.Pervasives.V (FStar.Pervasives.V_a __@x0)
(FStar.Pervasives.V_v __@x0)))))

; </end constructor FStar.Pervasives.V>


; <start constructor FStar.Pervasives.E>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.E ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
275)
(= __@x0
(FStar.Pervasives.E (FStar.Pervasives.E_a __@x0)
(FStar.Pervasives.E_e __@x0)))))

; </end constructor FStar.Pervasives.E>


; <start constructor FStar.Pervasives.Err>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Err ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
280)
(= __@x0
(FStar.Pervasives.Err (FStar.Pervasives.Err_a __@x0)
(FStar.Pervasives.Err_msg __@x0)))))

; </end constructor FStar.Pervasives.Err>


; </end encoding type FStar.Pervasives.result>


; <Start encoding val FStar.Pervasives.uu___is_V>

(declare-fun FStar.Pervasives.uu___is_V (Term Term) Term)
(declare-fun Tm_arrow_5cd1d0722a6a986faf6f8e557186fe24 () Term)
(declare-fun FStar.Pervasives.uu___is_V@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_V>


; <Skipped let uu___is_V/>


; <Start encoding val FStar.Pervasives.__proj__V__item__v>

(declare-fun Tm_refine_9db520b26a7f39c5a01493a3f375290d (Term) Term)
(declare-fun FStar.Pervasives.__proj__V__item__v (Term Term) Term)

(declare-fun Tm_arrow_1ea119bf213c016916a7095486e28467 () Term)
(declare-fun FStar.Pervasives.__proj__V__item__v@tok () Term)

; </end encoding val FStar.Pervasives.__proj__V__item__v>


; <Skipped let __proj__V__item__v/>


; <Start encoding val FStar.Pervasives.uu___is_E>

(declare-fun FStar.Pervasives.uu___is_E (Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_E@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_E>


; <Skipped let uu___is_E/>


; <Start encoding val FStar.Pervasives.__proj__E__item__e>

(declare-fun Tm_refine_95e1e2ee29104754cc3740f5575fc6e5 (Term) Term)
(declare-fun FStar.Pervasives.__proj__E__item__e (Term Term) Term)

(declare-fun Tm_arrow_19e73c373dbf3f9945c6fcfce8a07661 () Term)
(declare-fun FStar.Pervasives.__proj__E__item__e@tok () Term)

; </end encoding val FStar.Pervasives.__proj__E__item__e>


; <Skipped let __proj__E__item__e/>


; <Start encoding val FStar.Pervasives.uu___is_Err>

(declare-fun FStar.Pervasives.uu___is_Err (Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_Err@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Err>


; <Skipped let uu___is_Err/>


; <Start encoding val FStar.Pervasives.__proj__Err__item__msg>

(declare-fun Tm_refine_22fb403854eba07427f92e79848f9d9f (Term) Term)
(declare-fun FStar.Pervasives.__proj__Err__item__msg (Term Term) Term)

(declare-fun Tm_arrow_f7e3debb858e412c9497460c5187d5cd () Term)
(declare-fun FStar.Pervasives.__proj__Err__item__msg@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Err__item__msg>


; <Skipped let __proj__Err__item__msg/>


; <Start encoding let ex_pre>

(declare-fun FStar.Pervasives.ex_pre () Term)

; </end encoding let ex_pre>


; <Start encoding let ex_post'>

(declare-fun FStar.Pervasives.ex_post_ (Term Term) Term)

(declare-fun FStar.Pervasives.ex_post_@tok () Term)
(declare-fun Tm_refine_a4dcdeeacbcb04d05a6720f786918fd6 (Term Term) Term)
(declare-fun Tm_arrow_68b66d987e8a7bdf825af8b370553e65 (Term Term) Term)

; </end encoding let ex_post'>


; <Start encoding let ex_post>

(declare-fun FStar.Pervasives.ex_post (Term) Term)

(declare-fun FStar.Pervasives.ex_post@tok () Term)

; </end encoding let ex_post>


; <Start encoding let ex_wp>

(declare-fun FStar.Pervasives.ex_wp (Term) Term)

(declare-fun FStar.Pervasives.ex_wp@tok () Term)
(declare-fun Tm_arrow_58168e52ae0908fefec42cac825ecc69 (Term) Term)

; </end encoding let ex_wp>


; <Start encoding let ex_return>

(declare-fun FStar.Pervasives.ex_return (Term Term Term) Term)
(declare-fun Tm_arrow_375264f6f19b4e37d33ffba9f6b1c7d2 () Term)
(declare-fun FStar.Pervasives.ex_return@tok () Term)

; </end encoding let ex_return>


; <Start encoding let ex_bind_wp>

(declare-fun Tm_arrow_3eb2992a529511f5b0ff2fef4e4594ad (Term Term) Term)
(declare-fun FStar.Pervasives.ex_bind_wp (Term Term Term Term Term) Term)

(declare-fun Tm_arrow_1da2056f1a2fe3dc8db7decf5cbd5885 () Term)
(declare-fun FStar.Pervasives.ex_bind_wp@tok () Term)

(declare-fun Tm_arrow_ca5db633696caf7e0cd44c11654eed8b (Term) Term)
(declare-fun Tm_abs_c1d9037a5cc10cc07ba9b6a7a58728db (Term Term Term Term) Term)

; </end encoding let ex_bind_wp>


; <Start encoding let ex_if_then_else>

(declare-fun FStar.Pervasives.ex_if_then_else (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_08bd7ce530cc6e8b4a3f8dadbd0806b0 () Term)
(declare-fun FStar.Pervasives.ex_if_then_else@tok () Term)

; </end encoding let ex_if_then_else>


; <Start encoding let ex_ite_wp>

(declare-fun FStar.Pervasives.ex_ite_wp (Term Term Term) Term)
(declare-fun Tm_arrow_c2a8c761b16a75376b24262cd8c50369 () Term)
(declare-fun FStar.Pervasives.ex_ite_wp@tok () Term)

; </end encoding let ex_ite_wp>


; <Start encoding let ex_stronger>

(declare-fun FStar.Pervasives.ex_stronger (Term Term Term) Term)
(declare-fun Tm_arrow_1376d97b5d43e7d77d56729e2a3e04af () Term)
(declare-fun FStar.Pervasives.ex_stronger@tok () Term)

; </end encoding let ex_stronger>


; <Start encoding let ex_close_wp>


(declare-fun FStar.Pervasives.ex_close_wp (Term Term Term Term) Term)

(declare-fun Tm_arrow_814af0adff92aa08c5b8b0951bcb1959 () Term)
(declare-fun FStar.Pervasives.ex_close_wp@tok () Term)


; </end encoding let ex_close_wp>


; <Start encoding let ex_trivial>

(declare-fun FStar.Pervasives.ex_trivial (Term Term) Term)
(declare-fun Tm_arrow_ee4a787765920b0cb4357a47a0d3ac5c () Term)
(declare-fun FStar.Pervasives.ex_trivial@tok () Term)

(declare-fun Tm_abs_5cc223716d095f4545f0dcc745acad5d (Term) Term)

; </end encoding let ex_trivial>


; <Skipped new_effect { EXN ... }/>


; <Skipped effect Exn a pre post = FStar.Pervasives.EXN a/>


; <Start encoding let lift_div_exn>

(declare-fun FStar.Pervasives.lift_div_exn (Term Term Term) Term)
(declare-fun Tm_arrow_8196682216f286f6fe3a7dffb3de7d02 () Term)
(declare-fun FStar.Pervasives.lift_div_exn@tok () Term)

(declare-fun Tm_abs_c2b605ddd5d1991642baf5762d2b1dc5 (Term Term) Term)

; </end encoding let lift_div_exn>


; <Skipped sub_effect DIV ~> EXN/>


; <Skipped effect Ex a = FStar.Pervasives.Exn a/>


; <Start encoding let all_pre_h>

(declare-fun FStar.Pervasives.all_pre_h (Term) Term)

(declare-fun FStar.Pervasives.all_pre_h@tok () Term)


; </end encoding let all_pre_h>


; <Start encoding let all_post_h'>

(declare-fun FStar.Pervasives.all_post_h_ (Term Term Term) Term)

(declare-fun FStar.Pervasives.all_post_h_@tok () Term)

(declare-fun Tm_arrow_fc269489cb2e24a10c7710a1f7f9d269 (Term Term Term) Term)

; </end encoding let all_post_h'>


; <Start encoding let all_post_h>

(declare-fun FStar.Pervasives.all_post_h (Term Term) Term)

(declare-fun FStar.Pervasives.all_post_h@tok () Term)

; </end encoding let all_post_h>


; <Start encoding let all_wp_h>

(declare-fun FStar.Pervasives.all_wp_h (Term Term) Term)

(declare-fun FStar.Pervasives.all_wp_h@tok () Term)
(declare-fun Tm_arrow_1cd90c71d90a216d9fb0ba0321a1d3b5 (Term Term) Term)

; </end encoding let all_wp_h>


; <Start encoding let all_return>

(declare-fun FStar.Pervasives.all_return (Term Term Term Term) Term)

(declare-fun Tm_arrow_3f61557667800fb54cc62e48a5201f9d () Term)
(declare-fun FStar.Pervasives.all_return@tok () Term)


; </end encoding let all_return>


; <Start encoding let all_bind_wp>

(declare-fun Tm_arrow_b567b509414635f00096b9b1c3e30b57 (Term Term Term) Term)
(declare-fun FStar.Pervasives.all_bind_wp (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_6ac18e25eb49f55ae0ce9c14679ecc22 () Term)
(declare-fun FStar.Pervasives.all_bind_wp@tok () Term)

(declare-fun Tm_arrow_59cac8a9b1ae3aa9511b8a867f8e934e (Term Term) Term)
(declare-fun Tm_abs_35ddc99cefc0079215f6f6ab3c58856d (Term Term Term Term Term) Term)

; </end encoding let all_bind_wp>


; <Start encoding let all_if_then_else>

(declare-fun FStar.Pervasives.all_if_then_else (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_491eee2c8dc4eab4d420326a8285d2c4 () Term)
(declare-fun FStar.Pervasives.all_if_then_else@tok () Term)

; </end encoding let all_if_then_else>


; <Start encoding let all_ite_wp>

(declare-fun FStar.Pervasives.all_ite_wp (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_20fdb4e6d0c32f949f55e39a059913a7 () Term)
(declare-fun FStar.Pervasives.all_ite_wp@tok () Term)

; </end encoding let all_ite_wp>


; <Start encoding let all_stronger>

(declare-fun FStar.Pervasives.all_stronger (Term Term Term Term) Term)
(declare-fun Tm_arrow_073b21d0ec8edf2dda32907b45ec5f68 () Term)
(declare-fun FStar.Pervasives.all_stronger@tok () Term)

; </end encoding let all_stronger>


; <Start encoding let all_close_wp>


(declare-fun FStar.Pervasives.all_close_wp (Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_803d195802308e8beadf04438d3a6508 () Term)
(declare-fun FStar.Pervasives.all_close_wp@tok () Term)


; </end encoding let all_close_wp>


; <Start encoding let all_trivial>

(declare-fun FStar.Pervasives.all_trivial (Term Term Term) Term)
(declare-fun Tm_arrow_957927b0d25001784693eee8b2182308 () Term)
(declare-fun FStar.Pervasives.all_trivial@tok () Term)

(declare-fun Tm_abs_22e463dbd987016e31d6bc67025a7cd9 (Term Term) Term)

; </end encoding let all_trivial>


; <Skipped new_effect { ALL_h ... }/>


; <Start encoding val FStar.Pervasives.inversion>

(declare-fun FStar.Pervasives.inversion (Term) Term)

(declare-fun FStar.Pervasives.inversion@tok () Term)

; </end encoding val FStar.Pervasives.inversion>


; <Start encoding val FStar.Pervasives.allow_inversion>

(declare-fun FStar.Pervasives.allow_inversion (Term) Term)
(declare-fun Tm_refine_363615bee79fae5066b7c8bd06c286d0 (Term) Term)
(declare-fun Tm_arrow_bcab9cce464ec0f76562bc48c17ba410 () Term)
(declare-fun FStar.Pervasives.allow_inversion@tok () Term)


; </end encoding val FStar.Pervasives.allow_inversion>


; <Start encoding val FStar.Pervasives.invertOption>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.invertOption (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.invertOption@tok () Term)

; </end encoding val FStar.Pervasives.invertOption>


; <Start encoding type FStar.Pervasives.either>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.either (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.either@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Inl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Inl
(declare-fun FStar.Pervasives.Inl@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Inr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Inr
(declare-fun FStar.Pervasives.Inr@tok () Term)
(declare-fun Tm_arrow_065da0adeba0c4ae0da1476ececee84c () Term)
(declare-fun Tm_arrow_c883938642e6d97d79c975d8d94b4aac () Term)

; <start constructor FStar.Pervasives.either>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.either ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
402)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(FStar.Pervasives.either @x0
@x1))
 
;;no pats
:qid is-FStar.Pervasives.either))))

; </end constructor FStar.Pervasives.either>


; <start constructor FStar.Pervasives.Inl>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Inl ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
409)
(= __@x0
(FStar.Pervasives.Inl (FStar.Pervasives.Inl_a __@x0)
(FStar.Pervasives.Inl_b __@x0)
(FStar.Pervasives.Inl_v __@x0)))))

; </end constructor FStar.Pervasives.Inl>


; <start constructor FStar.Pervasives.Inr>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Inr ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
414)
(= __@x0
(FStar.Pervasives.Inr (FStar.Pervasives.Inr_a __@x0)
(FStar.Pervasives.Inr_b __@x0)
(FStar.Pervasives.Inr_v __@x0)))))

; </end constructor FStar.Pervasives.Inr>


; </end encoding type FStar.Pervasives.either>


; <Start encoding assume FStar.Pervasives.either__uu___haseq>


; </end encoding assume FStar.Pervasives.either__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Inl>

(declare-fun FStar.Pervasives.uu___is_Inl (Term Term Term) Term)
(declare-fun Tm_arrow_af0c68f1e39d4d6020c0873b16730c7d () Term)
(declare-fun FStar.Pervasives.uu___is_Inl@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Inl>


; <Skipped let uu___is_Inl/>


; <Start encoding val FStar.Pervasives.__proj__Inl__item__v>

(declare-fun Tm_refine_85e0cc884f8457202f90cd77f23733ba (Term Term) Term)
(declare-fun FStar.Pervasives.__proj__Inl__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_a80e0750277867ba1a434ad3bba8702d () Term)
(declare-fun FStar.Pervasives.__proj__Inl__item__v@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Inl__item__v>


; <Skipped let __proj__Inl__item__v/>


; <Start encoding val FStar.Pervasives.uu___is_Inr>

(declare-fun FStar.Pervasives.uu___is_Inr (Term Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_Inr@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Inr>


; <Skipped let uu___is_Inr/>


; <Start encoding val FStar.Pervasives.__proj__Inr__item__v>

(declare-fun Tm_refine_8f1f5f564dae90240db429de2eb41517 (Term Term) Term)
(declare-fun FStar.Pervasives.__proj__Inr__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_df618db6b42762940f198036c8a56200 () Term)
(declare-fun FStar.Pervasives.__proj__Inr__item__v@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Inr__item__v>


; <Skipped let __proj__Inr__item__v/>


; <Start encoding let dfst>


(declare-fun FStar.Pervasives.dfst (Term Term Term) Term)


(declare-fun FStar.Pervasives.dfst@tok () Term)


; </end encoding let dfst>


; <Start encoding let dsnd>


(declare-fun FStar.Pervasives.dsnd (Term Term Term) Term)


(declare-fun FStar.Pervasives.dsnd@tok () Term)


; </end encoding let dsnd>


; <Start encoding type FStar.Pervasives.dtuple3>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple3@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple3 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__3 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Mkdtuple3
(declare-fun FStar.Pervasives.Mkdtuple3@tok () Term)

(declare-fun Tm_arrow_0b6559e6ff3addf84b0c2880affbb335 (Term Term) Term)




(declare-fun Tm_arrow_8423f67df62f9e824c55756f9e26058d () Term)

; <start constructor FStar.Pervasives.dtuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
450)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple3 @x0
@x1
@x2))
 
;;no pats
:qid is-FStar.Pervasives.dtuple3))))

; </end constructor FStar.Pervasives.dtuple3>


; <start constructor FStar.Pervasives.Mkdtuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
461)
(= __@x0
(FStar.Pervasives.Mkdtuple3 (FStar.Pervasives.Mkdtuple3_a __@x0)
(FStar.Pervasives.Mkdtuple3_b __@x0)
(FStar.Pervasives.Mkdtuple3_c __@x0)
(FStar.Pervasives.Mkdtuple3__1 __@x0)
(FStar.Pervasives.Mkdtuple3__2 __@x0)
(FStar.Pervasives.Mkdtuple3__3 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple3>


; </end encoding type FStar.Pervasives.dtuple3>


; <Start encoding assume FStar.Pervasives.dtuple3__uu___haseq>




; </end encoding assume FStar.Pervasives.dtuple3__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Mkdtuple3>



(declare-fun FStar.Pervasives.uu___is_Mkdtuple3 (Term Term Term Term) Term)


(declare-fun Tm_arrow_70452cb82cd0a282ca9a2dbeb54c1b04 () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple3@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Mkdtuple3>


; <Skipped let uu___is_Mkdtuple3/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple3__item___1>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___1 (Term Term Term Term) Term)


(declare-fun Tm_arrow_255f0cfe499b1d2e9836e157bce1dba3 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___1@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple3__item___1>


; <Skipped let __proj__Mkdtuple3__item___1/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple3__item___2>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___2 (Term Term Term Term) Term)


(declare-fun Tm_arrow_ea1ded11f7d194a26e812f407333a011 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___2@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple3__item___2>


; <Skipped let __proj__Mkdtuple3__item___2/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple3__item___3>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___3 (Term Term Term Term) Term)


(declare-fun Tm_arrow_1d7ad5cfa0fff643640e3f74466d283e () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___3@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple3__item___3>


; <Skipped let __proj__Mkdtuple3__item___3/>


; <Start encoding type FStar.Pervasives.dtuple4>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple4 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple4@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple4 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__4 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Mkdtuple4
(declare-fun FStar.Pervasives.Mkdtuple4@tok () Term)


(declare-fun Tm_arrow_af8eda99ba3685403be22a88669dcb35 (Term Term Term) Term)






(declare-fun Tm_arrow_cef44a6056754f192c2446237c4c1408 () Term)

; <start constructor FStar.Pervasives.dtuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
519)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple4 @x0
@x1
@x2
@x3))
 
;;no pats
:qid is-FStar.Pervasives.dtuple4))))

; </end constructor FStar.Pervasives.dtuple4>


; <start constructor FStar.Pervasives.Mkdtuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
532)
(= __@x0
(FStar.Pervasives.Mkdtuple4 (FStar.Pervasives.Mkdtuple4_a __@x0)
(FStar.Pervasives.Mkdtuple4_b __@x0)
(FStar.Pervasives.Mkdtuple4_c __@x0)
(FStar.Pervasives.Mkdtuple4_d __@x0)
(FStar.Pervasives.Mkdtuple4__1 __@x0)
(FStar.Pervasives.Mkdtuple4__2 __@x0)
(FStar.Pervasives.Mkdtuple4__3 __@x0)
(FStar.Pervasives.Mkdtuple4__4 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple4>


; </end encoding type FStar.Pervasives.dtuple4>


; <Start encoding assume FStar.Pervasives.dtuple4__uu___haseq>





; </end encoding assume FStar.Pervasives.dtuple4__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Mkdtuple4>




(declare-fun FStar.Pervasives.uu___is_Mkdtuple4 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_76a226dc2cea2ddd4e4258637fc95e5b () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple4@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Mkdtuple4>


; <Skipped let uu___is_Mkdtuple4/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___1>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___1 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_1da4d60ab69f411b912e76cc25e77965 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___1@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___1>


; <Skipped let __proj__Mkdtuple4__item___1/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___2>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___2 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_a86867091548f3d7d3ca1cb8b0458b9f () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___2@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___2>


; <Skipped let __proj__Mkdtuple4__item___2/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___3>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___3 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_ee72552fcc293405aa0e854ba26f27ac () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___3@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___3>


; <Skipped let __proj__Mkdtuple4__item___3/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___4>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___4 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_6c79def96aa5d5d9eb9555c48dd9ebb6 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___4@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___4>


; <Skipped let __proj__Mkdtuple4__item___4/>


; <Start encoding type FStar.Pervasives.dtuple5>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple5 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple5@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple5 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__5 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Mkdtuple5
(declare-fun FStar.Pervasives.Mkdtuple5@tok () Term)



(declare-fun Tm_arrow_e2051b23ee191036cd2c8f08b57577cc (Term Term Term Term) Term)








(declare-fun Tm_arrow_7c47a0b67fa3d6e69e51a1ade2982e74 () Term)

; <start constructor FStar.Pervasives.dtuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
626)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple5 @x0
@x1
@x2
@x3
@x4))
 
;;no pats
:qid is-FStar.Pervasives.dtuple5))))

; </end constructor FStar.Pervasives.dtuple5>


; <start constructor FStar.Pervasives.Mkdtuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
641)
(= __@x0
(FStar.Pervasives.Mkdtuple5 (FStar.Pervasives.Mkdtuple5_a __@x0)
(FStar.Pervasives.Mkdtuple5_b __@x0)
(FStar.Pervasives.Mkdtuple5_c __@x0)
(FStar.Pervasives.Mkdtuple5_d __@x0)
(FStar.Pervasives.Mkdtuple5_e __@x0)
(FStar.Pervasives.Mkdtuple5__1 __@x0)
(FStar.Pervasives.Mkdtuple5__2 __@x0)
(FStar.Pervasives.Mkdtuple5__3 __@x0)
(FStar.Pervasives.Mkdtuple5__4 __@x0)
(FStar.Pervasives.Mkdtuple5__5 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple5>


; </end encoding type FStar.Pervasives.dtuple5>


; <Start encoding assume FStar.Pervasives.dtuple5__uu___haseq>






; </end encoding assume FStar.Pervasives.dtuple5__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Mkdtuple5>





(declare-fun FStar.Pervasives.uu___is_Mkdtuple5 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_790317d9d2afaf2417875fd8f65cee9f () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple5@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Mkdtuple5>


; <Skipped let uu___is_Mkdtuple5/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___1>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___1 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_855676d3a54fc2cdf0dfa3ac2f15fdad () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___1@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___1>


; <Skipped let __proj__Mkdtuple5__item___1/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___2>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___2 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_3c181aa1af161d84af20412908ff5981 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___2@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___2>


; <Skipped let __proj__Mkdtuple5__item___2/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___3>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___3 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_cc152ea4c314cfd6854de94e70041031 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___3@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___3>


; <Skipped let __proj__Mkdtuple5__item___3/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___4>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___4 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_6a05465acf4f8d1b8f43fd30077a772a () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___4@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___4>


; <Skipped let __proj__Mkdtuple5__item___4/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___5>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___5 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_d5d61b48d54646c5c411627b3a20c98f () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___5@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___5>


; <Skipped let __proj__Mkdtuple5__item___5/>


; <Start encoding let ignore>

(declare-fun FStar.Pervasives.ignore (Term Term) Term)
(declare-fun Tm_arrow_962476a7eea46a6ffc9b658c6d8fbc71 () Term)
(declare-fun FStar.Pervasives.ignore@tok () Term)

; </end encoding let ignore>


; <Start encoding val FStar.Pervasives.false_elim>

(declare-fun Tm_refine_f1ecc6ab6882a651504f328937700647 () Term)
(declare-fun FStar.Pervasives.false_elim (Term Term) Term)

(declare-fun Tm_arrow_7636fbfab5cd88ba06f60c10ea8caef2 () Term)
(declare-fun FStar.Pervasives.false_elim@tok () Term)

; </end encoding val FStar.Pervasives.false_elim>


; <Start encoding type FStar.Pervasives.__internal_ocaml_attributes>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.__internal_ocaml_attributes () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingShow () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.PpxDerivingShow
(declare-fun FStar.Pervasives.PpxDerivingShow@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingShowConstant (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.PpxDerivingShowConstant__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.PpxDerivingShowConstant
(declare-fun FStar.Pervasives.PpxDerivingShowConstant@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingYoJson () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.PpxDerivingYoJson
(declare-fun FStar.Pervasives.PpxDerivingYoJson@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CInline () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CInline
(declare-fun FStar.Pervasives.CInline@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Substitute () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Substitute
(declare-fun FStar.Pervasives.Substitute@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Gc () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Gc
(declare-fun FStar.Pervasives.Gc@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Comment (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Comment__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Comment
(declare-fun FStar.Pervasives.Comment@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CPrologue (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CPrologue__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CPrologue
(declare-fun FStar.Pervasives.CPrologue@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CEpilogue (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CEpilogue__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CEpilogue
(declare-fun FStar.Pervasives.CEpilogue@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CConst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CConst__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CConst
(declare-fun FStar.Pervasives.CConst@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CCConv (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CCConv__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CCConv
(declare-fun FStar.Pervasives.CCConv@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CAbstractStruct () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CAbstractStruct
(declare-fun FStar.Pervasives.CAbstractStruct@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CIfDef () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CIfDef
(declare-fun FStar.Pervasives.CIfDef@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CMacro () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CMacro
(declare-fun FStar.Pervasives.CMacro@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CNoInline () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CNoInline
(declare-fun FStar.Pervasives.CNoInline@tok () Term)
(declare-fun Tm_arrow_a25c6dbdd7c43412e925069991c0ef48 () Term)






; <start constructor FStar.Pervasives.__internal_ocaml_attributes>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.__internal_ocaml_attributes ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
775)
(= __@x0
FStar.Pervasives.__internal_ocaml_attributes)))

; </end constructor FStar.Pervasives.__internal_ocaml_attributes>


; <start constructor FStar.Pervasives.PpxDerivingShow>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingShow ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
781)
(= __@x0
FStar.Pervasives.PpxDerivingShow)))

; </end constructor FStar.Pervasives.PpxDerivingShow>


; <start constructor FStar.Pervasives.PpxDerivingShowConstant>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingShowConstant ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
783)
(= __@x0
(FStar.Pervasives.PpxDerivingShowConstant (FStar.Pervasives.PpxDerivingShowConstant__0 __@x0)))))

; </end constructor FStar.Pervasives.PpxDerivingShowConstant>


; <start constructor FStar.Pervasives.PpxDerivingYoJson>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingYoJson ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
788)
(= __@x0
FStar.Pervasives.PpxDerivingYoJson)))

; </end constructor FStar.Pervasives.PpxDerivingYoJson>


; <start constructor FStar.Pervasives.CInline>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CInline ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
790)
(= __@x0
FStar.Pervasives.CInline)))

; </end constructor FStar.Pervasives.CInline>


; <start constructor FStar.Pervasives.Substitute>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Substitute ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
792)
(= __@x0
FStar.Pervasives.Substitute)))

; </end constructor FStar.Pervasives.Substitute>


; <start constructor FStar.Pervasives.Gc>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Gc ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
794)
(= __@x0
FStar.Pervasives.Gc)))

; </end constructor FStar.Pervasives.Gc>


; <start constructor FStar.Pervasives.Comment>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Comment ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
796)
(= __@x0
(FStar.Pervasives.Comment (FStar.Pervasives.Comment__0 __@x0)))))

; </end constructor FStar.Pervasives.Comment>


; <start constructor FStar.Pervasives.CPrologue>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CPrologue ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
801)
(= __@x0
(FStar.Pervasives.CPrologue (FStar.Pervasives.CPrologue__0 __@x0)))))

; </end constructor FStar.Pervasives.CPrologue>


; <start constructor FStar.Pervasives.CEpilogue>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CEpilogue ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
806)
(= __@x0
(FStar.Pervasives.CEpilogue (FStar.Pervasives.CEpilogue__0 __@x0)))))

; </end constructor FStar.Pervasives.CEpilogue>


; <start constructor FStar.Pervasives.CConst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CConst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
811)
(= __@x0
(FStar.Pervasives.CConst (FStar.Pervasives.CConst__0 __@x0)))))

; </end constructor FStar.Pervasives.CConst>


; <start constructor FStar.Pervasives.CCConv>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CCConv ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
816)
(= __@x0
(FStar.Pervasives.CCConv (FStar.Pervasives.CCConv__0 __@x0)))))

; </end constructor FStar.Pervasives.CCConv>


; <start constructor FStar.Pervasives.CAbstractStruct>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CAbstractStruct ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
821)
(= __@x0
FStar.Pervasives.CAbstractStruct)))

; </end constructor FStar.Pervasives.CAbstractStruct>


; <start constructor FStar.Pervasives.CIfDef>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CIfDef ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
823)
(= __@x0
FStar.Pervasives.CIfDef)))

; </end constructor FStar.Pervasives.CIfDef>


; <start constructor FStar.Pervasives.CMacro>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CMacro ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
825)
(= __@x0
FStar.Pervasives.CMacro)))

; </end constructor FStar.Pervasives.CMacro>


; <start constructor FStar.Pervasives.CNoInline>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CNoInline ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
827)
(= __@x0
FStar.Pervasives.CNoInline)))

; </end constructor FStar.Pervasives.CNoInline>


; </end encoding type FStar.Pervasives.__internal_ocaml_attributes>


; <Start encoding assume FStar.Pervasives.__internal_ocaml_attributes__uu___haseq>


; </end encoding assume FStar.Pervasives.__internal_ocaml_attributes__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_PpxDerivingShow>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShow (Term) Term)
(declare-fun Tm_arrow_89dc0c243f5e74d4fefc48cfe123db41 () Term)
(declare-fun FStar.Pervasives.uu___is_PpxDerivingShow@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_PpxDerivingShow>


; <Skipped let uu___is_PpxDerivingShow/>


; <Start encoding val FStar.Pervasives.uu___is_PpxDerivingShowConstant>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShowConstant (Term) Term)

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShowConstant@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_PpxDerivingShowConstant>


; <Skipped let uu___is_PpxDerivingShowConstant/>


; <Start encoding val FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0>

(declare-fun Tm_refine_564db2f0aa0878b4d96c60508be3dd36 () Term)
(declare-fun FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0 (Term) Term)

(declare-fun Tm_arrow_dbb84ef8131159481071b6d6a41b7f31 () Term)
(declare-fun FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0>


; <Skipped let __proj__PpxDerivingShowConstant__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_PpxDerivingYoJson>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingYoJson (Term) Term)

(declare-fun FStar.Pervasives.uu___is_PpxDerivingYoJson@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_PpxDerivingYoJson>


; <Skipped let uu___is_PpxDerivingYoJson/>


; <Start encoding val FStar.Pervasives.uu___is_CInline>

(declare-fun FStar.Pervasives.uu___is_CInline (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CInline@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CInline>


; <Skipped let uu___is_CInline/>


; <Start encoding val FStar.Pervasives.uu___is_Substitute>

(declare-fun FStar.Pervasives.uu___is_Substitute (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Substitute@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Substitute>


; <Skipped let uu___is_Substitute/>


; <Start encoding val FStar.Pervasives.uu___is_Gc>

(declare-fun FStar.Pervasives.uu___is_Gc (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Gc@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Gc>


; <Skipped let uu___is_Gc/>


; <Start encoding val FStar.Pervasives.uu___is_Comment>

(declare-fun FStar.Pervasives.uu___is_Comment (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Comment@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Comment>


; <Skipped let uu___is_Comment/>


; <Start encoding val FStar.Pervasives.__proj__Comment__item___0>

(declare-fun Tm_refine_c53089e2d20d1b0f5a267296ac8e45f0 () Term)
(declare-fun FStar.Pervasives.__proj__Comment__item___0 (Term) Term)

(declare-fun Tm_arrow_d4c2bbf4fb852b3f4b9961c7cbc2f3a2 () Term)
(declare-fun FStar.Pervasives.__proj__Comment__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Comment__item___0>


; <Skipped let __proj__Comment__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CPrologue>

(declare-fun FStar.Pervasives.uu___is_CPrologue (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CPrologue@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CPrologue>


; <Skipped let uu___is_CPrologue/>


; <Start encoding val FStar.Pervasives.__proj__CPrologue__item___0>

(declare-fun Tm_refine_ac46c1a2a06ce46a180e0eda48004c47 () Term)
(declare-fun FStar.Pervasives.__proj__CPrologue__item___0 (Term) Term)

(declare-fun Tm_arrow_929b9daa0a2a2e99e3571b146c52feaf () Term)
(declare-fun FStar.Pervasives.__proj__CPrologue__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CPrologue__item___0>


; <Skipped let __proj__CPrologue__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CEpilogue>

(declare-fun FStar.Pervasives.uu___is_CEpilogue (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CEpilogue@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CEpilogue>


; <Skipped let uu___is_CEpilogue/>


; <Start encoding val FStar.Pervasives.__proj__CEpilogue__item___0>

(declare-fun Tm_refine_47384bef739d1f0729fd782d351dc9a5 () Term)
(declare-fun FStar.Pervasives.__proj__CEpilogue__item___0 (Term) Term)

(declare-fun Tm_arrow_e37361b66babb46a30183ad1ff072689 () Term)
(declare-fun FStar.Pervasives.__proj__CEpilogue__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CEpilogue__item___0>


; <Skipped let __proj__CEpilogue__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CConst>

(declare-fun FStar.Pervasives.uu___is_CConst (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CConst@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CConst>


; <Skipped let uu___is_CConst/>


; <Start encoding val FStar.Pervasives.__proj__CConst__item___0>

(declare-fun Tm_refine_5036c6b2983454bc3afeffcba3f00f50 () Term)
(declare-fun FStar.Pervasives.__proj__CConst__item___0 (Term) Term)

(declare-fun Tm_arrow_2d0b7639551b88b0df758d7b36c8f77a () Term)
(declare-fun FStar.Pervasives.__proj__CConst__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CConst__item___0>


; <Skipped let __proj__CConst__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CCConv>

(declare-fun FStar.Pervasives.uu___is_CCConv (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CCConv@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CCConv>


; <Skipped let uu___is_CCConv/>


; <Start encoding val FStar.Pervasives.__proj__CCConv__item___0>

(declare-fun Tm_refine_2c4510f48649a66c3dca1fc9e3a2d320 () Term)
(declare-fun FStar.Pervasives.__proj__CCConv__item___0 (Term) Term)

(declare-fun Tm_arrow_b7e884ec94708f2b05c42d4d8834eac6 () Term)
(declare-fun FStar.Pervasives.__proj__CCConv__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CCConv__item___0>


; <Skipped let __proj__CCConv__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CAbstractStruct>

(declare-fun FStar.Pervasives.uu___is_CAbstractStruct (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CAbstractStruct@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CAbstractStruct>


; <Skipped let uu___is_CAbstractStruct/>


; <Start encoding val FStar.Pervasives.uu___is_CIfDef>

(declare-fun FStar.Pervasives.uu___is_CIfDef (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CIfDef@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CIfDef>


; <Skipped let uu___is_CIfDef/>


; <Start encoding val FStar.Pervasives.uu___is_CMacro>

(declare-fun FStar.Pervasives.uu___is_CMacro (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CMacro@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CMacro>


; <Skipped let uu___is_CMacro/>


; <Start encoding val FStar.Pervasives.uu___is_CNoInline>

(declare-fun FStar.Pervasives.uu___is_CNoInline (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CNoInline@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CNoInline>


; <Skipped let uu___is_CNoInline/>


; <Start encoding val FStar.Pervasives.inline_let>

(declare-fun FStar.Pervasives.inline_let (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.inline_let>


; <Start encoding val FStar.Pervasives.rename_let>

(declare-fun FStar.Pervasives.rename_let (Term) Term)

(declare-fun FStar.Pervasives.rename_let@tok () Term)

; </end encoding val FStar.Pervasives.rename_let>


; <Start encoding val FStar.Pervasives.plugin>

(declare-fun FStar.Pervasives.plugin (Term) Term)
(declare-fun Tm_arrow_f12575a0ee171a8be16a63e3359708f8 () Term)
(declare-fun FStar.Pervasives.plugin@tok () Term)

; </end encoding val FStar.Pervasives.plugin>


; <Start encoding val FStar.Pervasives.tcnorm>

(declare-fun FStar.Pervasives.tcnorm (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.tcnorm>


; <Start encoding val FStar.Pervasives.must_erase_for_extraction>

(declare-fun FStar.Pervasives.must_erase_for_extraction (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.must_erase_for_extraction>


; <Start encoding val FStar.Pervasives.dm4f_bind_range>

(declare-fun FStar.Pervasives.dm4f_bind_range (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.dm4f_bind_range>


; <Start encoding val FStar.Pervasives.expect_failure>

(declare-fun FStar.Pervasives.expect_failure (Term) Term)

(declare-fun FStar.Pervasives.expect_failure@tok () Term)

; </end encoding val FStar.Pervasives.expect_failure>


; <Start encoding val FStar.Pervasives.expect_lax_failure>

(declare-fun FStar.Pervasives.expect_lax_failure (Term) Term)

(declare-fun FStar.Pervasives.expect_lax_failure@tok () Term)

; </end encoding val FStar.Pervasives.expect_lax_failure>


; <Start encoding val FStar.Pervasives.tcdecltime>

(declare-fun FStar.Pervasives.tcdecltime (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.tcdecltime>


; <Start encoding val FStar.Pervasives.unifier_hint_injective>

(declare-fun FStar.Pervasives.unifier_hint_injective (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unifier_hint_injective>


; <Start encoding val FStar.Pervasives.strict_on_arguments>

(declare-fun FStar.Pervasives.strict_on_arguments (Term) Term)

(declare-fun FStar.Pervasives.strict_on_arguments@tok () Term)

; </end encoding val FStar.Pervasives.strict_on_arguments>


; <Start encoding val FStar.Pervasives.resolve_implicits>

(declare-fun FStar.Pervasives.resolve_implicits (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.resolve_implicits>


; <Start encoding val FStar.Pervasives.override_resolve_implicits_handler>

(declare-fun FStar.Pervasives.override_resolve_implicits_handler (Term Term Term) Term)
(declare-fun Tm_arrow_93e6548cfc250f7cc25301579d62a018 () Term)
(declare-fun FStar.Pervasives.override_resolve_implicits_handler@tok () Term)

; </end encoding val FStar.Pervasives.override_resolve_implicits_handler>


; <Start encoding val FStar.Pervasives.handle_smt_goals>

(declare-fun FStar.Pervasives.handle_smt_goals (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.handle_smt_goals>


; <Start encoding val FStar.Pervasives.erasable>

(declare-fun FStar.Pervasives.erasable (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.erasable>


; <Start encoding val FStar.Pervasives.commute_nested_matches>

(declare-fun FStar.Pervasives.commute_nested_matches (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.commute_nested_matches>


; <Start encoding val FStar.Pervasives.noextract_to>

(declare-fun FStar.Pervasives.noextract_to (Term) Term)

(declare-fun FStar.Pervasives.noextract_to@tok () Term)

; </end encoding val FStar.Pervasives.noextract_to>


; <Start encoding val FStar.Pervasives.normalize_for_extraction>

(declare-fun FStar.Pervasives.normalize_for_extraction (Term) Term)
(declare-fun Tm_arrow_5a371649389ebd695db0478470787cef () Term)
(declare-fun FStar.Pervasives.normalize_for_extraction@tok () Term)

; </end encoding val FStar.Pervasives.normalize_for_extraction>


; <Start encoding val FStar.Pervasives.ite_soundness_by>

(declare-fun FStar.Pervasives.ite_soundness_by (Term) Term)
(declare-fun Tm_arrow_0c55530a575bf8e94add46ffb548393c () Term)
(declare-fun FStar.Pervasives.ite_soundness_by@tok () Term)

; </end encoding val FStar.Pervasives.ite_soundness_by>


; <Start encoding val FStar.Pervasives.default_effect>

(declare-fun FStar.Pervasives.default_effect (Term) Term)

(declare-fun FStar.Pervasives.default_effect@tok () Term)

; </end encoding val FStar.Pervasives.default_effect>


; <Start encoding val FStar.Pervasives.top_level_effect>

(declare-fun FStar.Pervasives.top_level_effect (Term) Term)

(declare-fun FStar.Pervasives.top_level_effect@tok () Term)

; </end encoding val FStar.Pervasives.top_level_effect>


; <Start encoding val FStar.Pervasives.effect_param>

(declare-fun FStar.Pervasives.effect_param (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.effect_param>


; <Start encoding val FStar.Pervasives.bind_has_range_args>

(declare-fun FStar.Pervasives.bind_has_range_args (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.bind_has_range_args>


; <Start encoding val FStar.Pervasives.primitive_extraction>

(declare-fun FStar.Pervasives.primitive_extraction (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.primitive_extraction>


; <Start encoding val FStar.Pervasives.extract_as_impure_effect>

(declare-fun FStar.Pervasives.extract_as_impure_effect (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.extract_as_impure_effect>


; <Start encoding val FStar.Pervasives.strictly_positive>

(declare-fun FStar.Pervasives.strictly_positive (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.strictly_positive>


; <Start encoding val FStar.Pervasives.unused>

(declare-fun FStar.Pervasives.unused (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unused>


; <Start encoding val FStar.Pervasives.no_auto_projectors>

(declare-fun FStar.Pervasives.no_auto_projectors (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.no_auto_projectors>


; <Start encoding val FStar.Pervasives.no_auto_projectors_decls>

(declare-fun FStar.Pervasives.no_auto_projectors_decls (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.no_auto_projectors_decls>


; <Start encoding val FStar.Pervasives.no_subtyping>

(declare-fun FStar.Pervasives.no_subtyping (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.no_subtyping>


; <Start encoding val FStar.Pervasives.admit_termination>

(declare-fun FStar.Pervasives.admit_termination (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.admit_termination>


; <Start encoding val FStar.Pervasives.singleton>

(declare-fun FStar.Pervasives.singleton (Term Term) Term)
(declare-fun Tm_refine_2fbd657fe85bcb2423f9c7e5f9b3bcb5 (Term Term) Term)
(declare-fun Tm_arrow_9cdb4ebd85da757e86217b6fb07ef9fc () Term)
(declare-fun FStar.Pervasives.singleton@tok () Term)


; </end encoding val FStar.Pervasives.singleton>


; <Start encoding let eqtype_as_type>

(declare-fun FStar.Pervasives.eqtype_as_type (Term) Term)
(declare-fun Tm_arrow_7e9afc6da5407011473323ad80ff51bf () Term)
(declare-fun FStar.Pervasives.eqtype_as_type@tok () Term)

; </end encoding let eqtype_as_type>


; <Start encoding let coerce_eq>

(declare-fun Tm_refine_0dee8cb03258a67c2f7ec66427696212 (Term Term) Term)
(declare-fun FStar.Pervasives.coerce_eq (Term Term Term Term) Term)

(declare-fun Tm_arrow_f44173fb14fa6046eedce5f32cb8aae8 () Term)
(declare-fun FStar.Pervasives.coerce_eq@tok () Term)


; </end encoding let coerce_eq>


; <Start encoding val FStar.Pervasives.coercion>

(declare-fun FStar.Pervasives.coercion (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.coercion>


; <Start encoding val FStar.Pervasives.desugar_of_variant_record>

(declare-fun FStar.Pervasives.desugar_of_variant_record (Term) Term)

(declare-fun FStar.Pervasives.desugar_of_variant_record@tok () Term)

; </end encoding val FStar.Pervasives.desugar_of_variant_record>


; <Start encoding val FStar.Pervasives.defer_to>

(declare-fun FStar.Pervasives.defer_to (Term Term) Term)

(declare-fun FStar.Pervasives.defer_to@tok () Term)

; </end encoding val FStar.Pervasives.defer_to>


; End Externals for interface FStar.Pervasives


; Externals for interface FStar.Classical


; <Start encoding val FStar.Classical.give_witness>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.give_witness (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.give_witness@tok () Term)

; </end encoding val FStar.Classical.give_witness>


; <Start encoding val FStar.Classical.give_witness_from_squash>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.give_witness_from_squash (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.give_witness_from_squash@tok () Term)

; </end encoding val FStar.Classical.give_witness_from_squash>


; <Start encoding val FStar.Classical.lemma_to_squash_gtot>


(declare-fun Tm_refine_839524df17f415c122f40f00685d3fe6 (Term Term) Term)
(declare-fun Tm_arrow_9a028cfcf6111a85dd3c28d61b4efdfd (Term Term) Term)
(declare-fun FStar.Classical.lemma_to_squash_gtot (Term Term Term Term) Term)



(declare-fun Tm_arrow_6f9100982820dfbce0fb9c6dae0cee11 () Term)
(declare-fun FStar.Classical.lemma_to_squash_gtot@tok () Term)

; </end encoding val FStar.Classical.lemma_to_squash_gtot>


; <Start encoding val FStar.Classical.get_equality>

(declare-fun FStar.Classical.get_equality (Term Term Term) Term)
(declare-fun Tm_refine_7c805cbd5439f1b21f6463c70e57d0f1 (Term Term Term) Term)
(declare-fun Tm_arrow_158af926c0cd4bc1ff513e80f99f4b49 () Term)
(declare-fun FStar.Classical.get_equality@tok () Term)


; </end encoding val FStar.Classical.get_equality>


; <Start encoding val FStar.Classical.impl_to_arrow>

(declare-fun FStar.Classical.impl_to_arrow (Term Term Term Term) Term)
(declare-fun Tm_arrow_156c500bdf0e99cc45ffd26a33a603a8 () Term)
(declare-fun FStar.Classical.impl_to_arrow@tok () Term)

; </end encoding val FStar.Classical.impl_to_arrow>


; <Start encoding val FStar.Classical.arrow_to_impl>

(declare-fun Tm_arrow_9d84457d1c8d2a3cb1cecf47a390b833 (Term Term) Term)
(declare-fun FStar.Classical.arrow_to_impl (Term Term Term) Term)

(declare-fun Tm_arrow_78d787b8a2633e2185ded4267a81cc32 () Term)
(declare-fun FStar.Classical.arrow_to_impl@tok () Term)

; </end encoding val FStar.Classical.arrow_to_impl>


; <Start encoding val FStar.Classical.impl_intro_gtot>


(declare-fun FStar.Classical.impl_intro_gtot (Term Term Term) Term)

(declare-fun Tm_arrow_d2cdd2f18b92810e3048c35d07f1c9ea () Term)
(declare-fun FStar.Classical.impl_intro_gtot@tok () Term)

; </end encoding val FStar.Classical.impl_intro_gtot>


; <Start encoding val FStar.Classical.impl_intro_tot>

(declare-fun Tm_arrow_6980332764c4493a7b0df5c02f7aefbe (Term Term) Term)
(declare-fun FStar.Classical.impl_intro_tot (Term Term Term) Term)

(declare-fun Tm_arrow_91aadb43edc4c2c0c091af8dbe745057 () Term)
(declare-fun FStar.Classical.impl_intro_tot@tok () Term)

; </end encoding val FStar.Classical.impl_intro_tot>


; <Start encoding val FStar.Classical.impl_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.impl_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.impl_intro@tok () Term)

; </end encoding val FStar.Classical.impl_intro>


; <Start encoding val FStar.Classical.move_requires>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.move_requires (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.move_requires@tok () Term)

; </end encoding val FStar.Classical.move_requires>


; <Start encoding val FStar.Classical.move_requires_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.move_requires_2 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.move_requires_2@tok () Term)

; </end encoding val FStar.Classical.move_requires_2>


; <Start encoding val FStar.Classical.move_requires_3>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.move_requires_3 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.move_requires_3@tok () Term)

; </end encoding val FStar.Classical.move_requires_3>


; <Start encoding val FStar.Classical.move_requires_4>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.move_requires_4 (Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.move_requires_4@tok () Term)

; </end encoding val FStar.Classical.move_requires_4>


; <Start encoding val FStar.Classical.impl_intro_gen>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.impl_intro_gen (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.impl_intro_gen@tok () Term)

; </end encoding val FStar.Classical.impl_intro_gen>


; <Start encoding val FStar.Classical.get_forall>


(declare-fun FStar.Classical.get_forall (Term Term) Term)




(declare-fun Tm_refine_7a68552470cd0b3e3b5038c890f62a82 (Term Term) Term)
(declare-fun Tm_arrow_44be7520ed79d38d96b60844cf5c3637 () Term)
(declare-fun FStar.Classical.get_forall@tok () Term)





; </end encoding val FStar.Classical.get_forall>


; <Start encoding val FStar.Classical.forall_intro_gtot>



(declare-fun FStar.Classical.forall_intro_gtot (Term Term Term) Term)


(declare-fun Tm_refine_eee646ed2c0261b2e37307734e5990b8 (Term Term) Term)
(declare-fun Tm_arrow_0d81b083331cc2ca8277c22c2c6ed09c () Term)
(declare-fun FStar.Classical.forall_intro_gtot@tok () Term)


; </end encoding val FStar.Classical.forall_intro_gtot>


; <Start encoding val FStar.Classical.lemma_forall_intro_gtot>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.lemma_forall_intro_gtot (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.lemma_forall_intro_gtot@tok () Term)

; </end encoding val FStar.Classical.lemma_forall_intro_gtot>


; <Start encoding val FStar.Classical.gtot_to_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.gtot_to_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.gtot_to_lemma@tok () Term)

; </end encoding val FStar.Classical.gtot_to_lemma>


; <Start encoding val FStar.Classical.forall_intro_squash_gtot>


(declare-fun Tm_arrow_e44b1a1960e76c65248b9976ee453bf1 (Term Term) Term)
(declare-fun FStar.Classical.forall_intro_squash_gtot (Term Term Term) Term)



(declare-fun Tm_arrow_810fc5a930eab84e2e1c9bc10e65f526 () Term)
(declare-fun FStar.Classical.forall_intro_squash_gtot@tok () Term)


; </end encoding val FStar.Classical.forall_intro_squash_gtot>


; <Start encoding val FStar.Classical.forall_intro_squash_gtot_join>



(declare-fun FStar.Classical.forall_intro_squash_gtot_join (Term Term Term) Term)





(declare-fun Tm_arrow_cd9381a0f782f3a2a2b6ba363e2e0508 () Term)
(declare-fun FStar.Classical.forall_intro_squash_gtot_join@tok () Term)




; </end encoding val FStar.Classical.forall_intro_squash_gtot_join>


; <Start encoding val FStar.Classical.forall_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro@tok () Term)

; </end encoding val FStar.Classical.forall_intro>


; <Start encoding val FStar.Classical.forall_intro_with_pat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_with_pat (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_with_pat@tok () Term)

; </end encoding val FStar.Classical.forall_intro_with_pat>


; <Start encoding val FStar.Classical.forall_intro_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_sub (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_sub@tok () Term)

; </end encoding val FStar.Classical.forall_intro_sub>


; <Start encoding val FStar.Classical.forall_intro_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_2@tok () Term)

; </end encoding val FStar.Classical.forall_intro_2>


; <Start encoding val FStar.Classical.forall_intro_2_with_pat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_2_with_pat (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_2_with_pat@tok () Term)

; </end encoding val FStar.Classical.forall_intro_2_with_pat>


; <Start encoding val FStar.Classical.forall_intro_3>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_3 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_3@tok () Term)

; </end encoding val FStar.Classical.forall_intro_3>


; <Start encoding val FStar.Classical.forall_intro_3_with_pat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_3_with_pat (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_3_with_pat@tok () Term)

; </end encoding val FStar.Classical.forall_intro_3_with_pat>


; <Start encoding val FStar.Classical.forall_intro_4>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_4 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_4@tok () Term)

; </end encoding val FStar.Classical.forall_intro_4>


; <Start encoding val FStar.Classical.forall_impl_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_impl_intro (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_impl_intro@tok () Term)

; </end encoding val FStar.Classical.forall_impl_intro>


; <Start encoding val FStar.Classical.ghost_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.ghost_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.ghost_lemma@tok () Term)

; </end encoding val FStar.Classical.ghost_lemma>


; <Start encoding val FStar.Classical.exists_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.exists_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.exists_intro@tok () Term)

; </end encoding val FStar.Classical.exists_intro>


; <Start encoding val FStar.Classical.exists_intro_not_all_not>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.exists_intro_not_all_not (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.exists_intro_not_all_not@tok () Term)

; </end encoding val FStar.Classical.exists_intro_not_all_not>


; <Start encoding val FStar.Classical.forall_to_exists>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_to_exists (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_to_exists@tok () Term)

; </end encoding val FStar.Classical.forall_to_exists>


; <Start encoding val FStar.Classical.forall_to_exists_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_to_exists_2 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_to_exists_2@tok () Term)

; </end encoding val FStar.Classical.forall_to_exists_2>


; <Start encoding val FStar.Classical.exists_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.exists_elim (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.exists_elim@tok () Term)

; </end encoding val FStar.Classical.exists_elim>


; <Start encoding val FStar.Classical.or_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.or_elim (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.or_elim@tok () Term)

; </end encoding val FStar.Classical.or_elim>


; <Start encoding val FStar.Classical.excluded_middle>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.excluded_middle (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.excluded_middle@tok () Term)

; </end encoding val FStar.Classical.excluded_middle>


; End Externals for interface FStar.Classical


; Externals for interface FStar.Ghost


; <Start encoding val FStar.Ghost.erased>

(declare-fun FStar.Ghost.erased (Term) Term)

(declare-fun FStar.Ghost.erased@tok () Term)

; </end encoding val FStar.Ghost.erased>


; <Start encoding val FStar.Ghost.reveal>

(declare-fun FStar.Ghost.reveal (Term Term) Term)
(declare-fun Tm_ghost_arrow_e2f4c1991753137c5a80c115428d0cef () Term)
(declare-fun FStar.Ghost.reveal@tok () Term)

; </end encoding val FStar.Ghost.reveal>


; <Start encoding val FStar.Ghost.hide>

(declare-fun FStar.Ghost.hide (Term Term) Term)
(declare-fun Tm_arrow_643f1030585ddc96db34fbedd5533726 () Term)
(declare-fun FStar.Ghost.hide@tok () Term)

; </end encoding val FStar.Ghost.hide>


; <Start encoding val FStar.Ghost.hide_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Ghost.hide_reveal (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Ghost.hide_reveal@tok () Term)

; </end encoding val FStar.Ghost.hide_reveal>


; <Start encoding val FStar.Ghost.reveal_hide>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Ghost.reveal_hide (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Ghost.reveal_hide@tok () Term)

; </end encoding val FStar.Ghost.reveal_hide>


; <Start encoding let tot_to_gtot>


(declare-fun FStar.Ghost.tot_to_gtot (Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_c9fd3b742fd348c1f0aa2b7131578f3e () Term)
(declare-fun FStar.Ghost.tot_to_gtot@tok () Term)


; </end encoding let tot_to_gtot>


; <Start encoding let return>

(declare-fun FStar.Ghost.return (Term Term) Term)

(declare-fun FStar.Ghost.return@tok () Term)

; </end encoding let return>


; <Start encoding let bind>

(declare-fun Tm_arrow_5716b68879f92aa07a25325dea2a598d (Term Term) Term)
(declare-fun FStar.Ghost.bind (Term Term Term Term) Term)

(declare-fun Tm_arrow_744e10832c82c923706888158b99b0fe () Term)
(declare-fun FStar.Ghost.bind@tok () Term)


; </end encoding let bind>


; <Start encoding let op_let_At>


(declare-fun FStar.Ghost.op_let_At (Term Term Term Term) Term)


(declare-fun FStar.Ghost.op_let_At@tok () Term)


; </end encoding let op_let_At>


; <Start encoding let elift1>


(declare-fun FStar.Ghost.elift1 (Term Term Term Term) Term)

(declare-fun Tm_refine_785b445c1ccb59eaa8c666ff5bddec28 (Term Term Term Term) Term)
(declare-fun Tm_arrow_da89250ece049a2244626f93975cd557 () Term)
(declare-fun FStar.Ghost.elift1@tok () Term)


; </end encoding let elift1>


; <Start encoding let elift2>

(declare-fun Tm_ghost_arrow_44164f5e759c8937bc211b53dca29861 (Term Term Term) Term)
(declare-fun FStar.Ghost.elift2 (Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_65079789b5ee069d4dcb71b5d5562419 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3bc5977a48f4c4aa4cd3ebcf331fe3f9 () Term)
(declare-fun FStar.Ghost.elift2@tok () Term)


; </end encoding let elift2>


; <Start encoding let elift3>

(declare-fun Tm_ghost_arrow_c3cf725ad58bf27e304b88d311d2ef4d (Term Term Term Term) Term)
(declare-fun FStar.Ghost.elift3 (Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_f701336f04214efabf1dc8fb653177ef (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_d597747eb30e55a029a57bb56ae3576b () Term)
(declare-fun FStar.Ghost.elift3@tok () Term)


; </end encoding let elift3>


; <Start encoding let push_refinement>


(declare-fun Tm_refine_4861ff30b18822886452f698558931e8 (Term Term) Term)
(declare-fun FStar.Ghost.push_refinement (Term Term Term) Term)


(declare-fun Tm_refine_36af295866c873249daf08f8d623a269 (Term Term Term) Term)
(declare-fun Tm_arrow_08d120582cc4dfdc7e90cb9038e8f6b8 () Term)
(declare-fun FStar.Ghost.push_refinement@tok () Term)





; </end encoding let push_refinement>


; <Start encoding let elift1_p>


(declare-fun Tm_refine_9f8cb5a84b67f50c9d5f87a914037545 (Term Term) Term)
(declare-fun Tm_ghost_arrow_8f538917cb02d75c44bfd86ed6834262 (Term Term Term) Term)

(declare-fun FStar.Ghost.elift1_p (Term Term Term Term Term) Term)





(declare-fun Tm_arrow_2f2f081c9c2a272e83f647cd86440766 () Term)
(declare-fun FStar.Ghost.elift1_p@tok () Term)


; </end encoding let elift1_p>


; <Start encoding let elift2_p>


(declare-fun Tm_refine_08698b4b6e166624b5bf789ac071b4cf (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_4f9eac2d0622ae1c34d05baa5f6854c6 (Term Term Term Term) Term)
(declare-fun Tm_refine_50e552dc638ed7dac9f2492d99576667 (Term Term Term Term) Term)
(declare-fun FStar.Ghost.elift2_p (Term Term Term Term Term Term Term) Term)





(declare-fun Tm_arrow_4243a3f87827ef2e8c38dd30c5e8518d () Term)
(declare-fun FStar.Ghost.elift2_p@tok () Term)


; </end encoding let elift2_p>


; <Start encoding let elift1_pq>



(declare-fun Tm_arrow_b9b0980b05721a41304c20e612f3108f (Term Term Term) Term)


(declare-fun Tm_ghost_arrow_3f0c334c27896d01c2e72f45e6fcb67c (Term Term Term Term) Term)

(declare-fun FStar.Ghost.elift1_pq (Term Term Term Term Term Term) Term)








(declare-fun Tm_arrow_b8eadba0211443ca5c59668f6aa4b6c9 () Term)
(declare-fun FStar.Ghost.elift1_pq@tok () Term)


; </end encoding let elift1_pq>


; <Start encoding let elift2_pq>



(declare-fun Tm_arrow_747965e95d1386c22f52f977256a903b (Term Term Term Term) Term)

(declare-fun Tm_refine_f9e3dab5c1ea39d2741639e0fe40e216 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_00838c3d276d7476d6679b97a2aa247c (Term Term Term Term Term) Term)

(declare-fun FStar.Ghost.elift2_pq (Term Term Term Term Term Term Term Term) Term)








(declare-fun Tm_arrow_b7e390954ec59dc663763c956d66957b () Term)
(declare-fun FStar.Ghost.elift2_pq@tok () Term)


; </end encoding let elift2_pq>


; End Externals for interface FStar.Ghost


; Externals for interface FStar.IndefiniteDescription


; <Start encoding val FStar.IndefiniteDescription.elim_squash>

(declare-fun FStar.IndefiniteDescription.elim_squash (Term Term) Term)
(declare-fun Tm_ghost_arrow_c6842219f247b61822e21d8f892190b3 () Term)
(declare-fun FStar.IndefiniteDescription.elim_squash@tok () Term)

; </end encoding val FStar.IndefiniteDescription.elim_squash>


; <Start encoding val FStar.IndefiniteDescription.indefinite_description_ghost>

(declare-fun Tm_arrow_81e65de2755319ee661cc1adc7d951e3 (Term) Term)
(declare-fun Tm_refine_4cc89ae73e7128e43010e5aba0ff060c (Term) Term)
(declare-fun FStar.IndefiniteDescription.indefinite_description_ghost (Term Term) Term)



(declare-fun Tm_ghost_arrow_feddccf07264e14202821ef1d50468a8 () Term)
(declare-fun FStar.IndefiniteDescription.indefinite_description_ghost@tok () Term)


; </end encoding val FStar.IndefiniteDescription.indefinite_description_ghost>


; <Start encoding val FStar.IndefiniteDescription.indefinite_description_tot>



(declare-fun FStar.IndefiniteDescription.indefinite_description_tot (Term Term) Term)



(declare-fun Tm_arrow_913328739865ec1d7344ba2324047e94 () Term)
(declare-fun FStar.IndefiniteDescription.indefinite_description_tot@tok () Term)


; </end encoding val FStar.IndefiniteDescription.indefinite_description_tot>


; <Start encoding val FStar.IndefiniteDescription.strong_excluded_middle>

(declare-fun FStar.IndefiniteDescription.strong_excluded_middle (Term) Term)
(declare-fun Tm_refine_2c7ecebd8a41d0890aab4251b61d6458 (Term) Term)
(declare-fun Tm_ghost_arrow_13b822d9f45311e725609e40f68f39a1 () Term)
(declare-fun FStar.IndefiniteDescription.strong_excluded_middle@tok () Term)


; </end encoding val FStar.IndefiniteDescription.strong_excluded_middle>


; <Start encoding val FStar.IndefiniteDescription.stronger_markovs_principle>

(declare-fun Tm_ghost_arrow_eaf0e881316979a10a835f9aef894ea3 () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle (Term) Term)

(declare-fun Tm_refine_ce62cc380d030e5cd8dfd1cf0ea19b01 (Term) Term)
(declare-fun Tm_ghost_arrow_0ecc4bb7783229ca7ca7edd38b0bab8d () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle@tok () Term)


; </end encoding val FStar.IndefiniteDescription.stronger_markovs_principle>


; <Start encoding val FStar.IndefiniteDescription.stronger_markovs_principle_prop>

(declare-fun Tm_arrow_1742ee5bbc9c9e74913cc041d85062b6 () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle_prop (Term) Term)

(declare-fun Tm_refine_e76bd1e3fcd1369d7232ec3854a8c984 (Term) Term)
(declare-fun Tm_ghost_arrow_c21c60a4b8d9409191eea9e22a1b37db () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle_prop@tok () Term)


; </end encoding val FStar.IndefiniteDescription.stronger_markovs_principle_prop>


; End Externals for interface FStar.IndefiniteDescription


; Externals for module FStar.StrongExcludedMiddle


; <Start encoding let strong_excluded_middle>

(declare-fun FStar.StrongExcludedMiddle.strong_excluded_middle (Term) Term)


(declare-fun FStar.StrongExcludedMiddle.strong_excluded_middle@tok () Term)


; </end encoding let strong_excluded_middle>


; End Externals for module FStar.StrongExcludedMiddle


; Externals for interface FStar.Classical.Sugar


; <Start encoding val FStar.Classical.Sugar.forall_elim>



(declare-fun FStar.Classical.Sugar.forall_elim (Term Term Term Term) Term)


(declare-fun Tm_arrow_6fad81cdc8376c5921e448133045a0b5 () Term)
(declare-fun FStar.Classical.Sugar.forall_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.forall_elim>


; <Start encoding val FStar.Classical.Sugar.exists_elim>


(declare-fun Tm_refine_df2d65c00128265e81a98d1694fa32db (Term Term) Term)
(declare-fun Tm_arrow_757abf2ff34845ceba7272f2bf4c779d (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.exists_elim (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_8a831fa0f832c0a8df6d5207189d1bd6 () Term)
(declare-fun FStar.Classical.Sugar.exists_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.exists_elim>


; <Start encoding let implies_elim>

(declare-fun Tm_refine_913239c2cf9dc8a14e1f047e0206138d (Term Term) Term)
(declare-fun Tm_arrow_e5bf96e6b202d44baf035cb07df2da84 (Term) Term)
(declare-fun FStar.Classical.Sugar.implies_elim (Term Term Term Term) Term)


(declare-fun Tm_arrow_08b9f1333754078ddc08d25d2c8efab0 () Term)
(declare-fun FStar.Classical.Sugar.implies_elim@tok () Term)



; </end encoding let implies_elim>


; <Start encoding val FStar.Classical.Sugar.or_elim>

(declare-fun Tm_refine_953a6e4e702e848a7213bd619baaa22d (Term) Term)
(declare-fun Tm_arrow_0e4b9f46020ce2f098f1971a515a22d9 (Term) Term)
(declare-fun Tm_refine_044452ce08fa2077b813992baef379a7 (Term Term) Term)


(declare-fun Tm_arrow_3cd50b91a1a8ff7ae2a33f725c49ca25 (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.or_elim (Term Term Term Term Term Term) Term)






(declare-fun Tm_arrow_cd3704184434b709df08ad54743b9ddc () Term)
(declare-fun FStar.Classical.Sugar.or_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.or_elim>


; <Start encoding val FStar.Classical.Sugar.and_elim>

(declare-fun Tm_arrow_e617226e5c485cfca90836a8d37dc422 (Term) Term)
(declare-fun Tm_refine_0e6764ea7cf9747bf338120e46774802 (Term Term) Term)
(declare-fun Tm_arrow_9cf3fa74bead5ce84576f320b610d107 (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.and_elim (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_46e93521f3e2b84feb3b4c45d4b82427 () Term)
(declare-fun FStar.Classical.Sugar.and_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.and_elim>


; <Start encoding val FStar.Classical.Sugar.forall_intro>



(declare-fun FStar.Classical.Sugar.forall_intro (Term Term Term) Term)




(declare-fun FStar.Classical.Sugar.forall_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.forall_intro>


; <Start encoding val FStar.Classical.Sugar.exists_intro>


(declare-fun Tm_arrow_1f559753133c819dcbab21eb87f04504 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.exists_intro (Term Term Term Term) Term)



(declare-fun Tm_arrow_98a6ce57193d862f12aa770d807de2d6 () Term)
(declare-fun FStar.Classical.Sugar.exists_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.exists_intro>


; <Start encoding val FStar.Classical.Sugar.implies_intro>


(declare-fun Tm_arrow_8cc28639983f141a2c2b513a3b9f2226 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.implies_intro (Term Term Term) Term)


(declare-fun Tm_refine_210741fcd012f6981d2132fb47059ae4 (Term Term) Term)
(declare-fun Tm_arrow_16ed35ee40b45e5834d942fa129fc7a5 () Term)
(declare-fun FStar.Classical.Sugar.implies_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.implies_intro>


; <Start encoding val FStar.Classical.Sugar.or_intro_left>




(declare-fun FStar.Classical.Sugar.or_intro_left (Term Term Term) Term)




(declare-fun Tm_arrow_ba201b0aaffa8c92349bb033309546c6 () Term)
(declare-fun FStar.Classical.Sugar.or_intro_left@tok () Term)


; </end encoding val FStar.Classical.Sugar.or_intro_left>


; <Start encoding val FStar.Classical.Sugar.or_intro_right>




(declare-fun Tm_arrow_c1f46761cba190a64ceda9e0b423d73a (Term Term) Term)
(declare-fun FStar.Classical.Sugar.or_intro_right (Term Term Term) Term)





(declare-fun Tm_arrow_820ce98d2bc904183444162411ef4873 () Term)
(declare-fun FStar.Classical.Sugar.or_intro_right@tok () Term)


; </end encoding val FStar.Classical.Sugar.or_intro_right>


; <Start encoding val FStar.Classical.Sugar.and_intro>




(declare-fun FStar.Classical.Sugar.and_intro (Term Term Term Term) Term)




(declare-fun Tm_arrow_74dd2a70fe5b8eefc42b899233f1e113 () Term)
(declare-fun FStar.Classical.Sugar.and_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.and_intro>


; End Externals for interface FStar.Classical.Sugar


; Externals for module FStar.List.Tot.Base


; <Skipped val FStar.List.Tot.Base.isEmpty/>


; <Start encoding let isEmpty>

(declare-fun FStar.List.Tot.Base.isEmpty (Term Term) Term)

(declare-fun FStar.List.Tot.Base.isEmpty@tok () Term)

; </end encoding let isEmpty>


; <Skipped val FStar.List.Tot.Base.hd/>


; <Start encoding let hd>


(declare-fun FStar.List.Tot.Base.hd (Term Term) Term)


(declare-fun FStar.List.Tot.Base.hd@tok () Term)


; </end encoding let hd>


; <Skipped val FStar.List.Tot.Base.tail/>


; <Start encoding let tail>


(declare-fun FStar.List.Tot.Base.tail (Term Term) Term)


(declare-fun FStar.List.Tot.Base.tail@tok () Term)


; </end encoding let tail>


; <Skipped val FStar.List.Tot.Base.tl/>


; <Start encoding let tl>


(declare-fun FStar.List.Tot.Base.tl (Term Term) Term)


(declare-fun FStar.List.Tot.Base.tl@tok () Term)


; </end encoding let tl>


; <Skipped val FStar.List.Tot.Base.last/>


; <Start encoding let rec last>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.last.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.last.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.last (Term Term) Term)
(declare-fun FStar.List.Tot.Base.last@tok () Term)





; </end encoding let rec last>


; <Skipped val FStar.List.Tot.Base.init/>


; <Start encoding let rec init>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.init.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.init.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.init (Term Term) Term)
(declare-fun FStar.List.Tot.Base.init@tok () Term)





; </end encoding let rec init>


; <Skipped val FStar.List.Tot.Base.length/>


; <Start encoding let rec length>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.length.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.length.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.length (Term Term) Term)
(declare-fun FStar.List.Tot.Base.length@tok () Term)
(declare-fun Tm_arrow_5adbd6bc13eabd8f92e79f380e1498f0 () Term)

; </end encoding let rec length>


; <Skipped val FStar.List.Tot.Base.nth/>


; <Start encoding let rec nth>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.nth.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.nth.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.nth (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.nth@tok () Term)
(declare-fun Tm_arrow_c96efec76dd44fb4c1c29ca8a004927d () Term)

; </end encoding let rec nth>


; <Skipped val FStar.List.Tot.Base.index/>


; <Start encoding let rec index>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.index.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.index.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.index (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.index@tok () Term)
(declare-fun Tm_refine_c86aba5c6243e6b7f9a4b0ad41b4e9a0 (Term Term) Term)


(declare-fun Tm_arrow_87330224a075c52374b0ca2b4b909772 () Term)

; </end encoding let rec index>


; <Skipped val FStar.List.Tot.Base.count/>


; <Start encoding let rec count>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.count.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.count.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.count (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.count@tok () Term)
(declare-fun Tm_arrow_d7494a533e0c3edea69ad484d93aa0e5 () Term)

; </end encoding let rec count>


; <Skipped val FStar.List.Tot.Base.rev_acc/>


; <Start encoding let rec rev_acc>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.rev_acc.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.rev_acc.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.rev_acc (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.rev_acc@tok () Term)
(declare-fun Tm_arrow_54e38bdd456bab4cdb32b5d540c2274c () Term)

; </end encoding let rec rev_acc>


; <Skipped val FStar.List.Tot.Base.rev/>


; <Start encoding let rev>

(declare-fun FStar.List.Tot.Base.rev (Term Term) Term)
(declare-fun Tm_arrow_f9ba16c6212a483d195bbb8ceec3eef1 () Term)
(declare-fun FStar.List.Tot.Base.rev@tok () Term)

; </end encoding let rev>


; <Skipped val FStar.List.Tot.Base.append/>


; <Start encoding let rec append>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.append.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.append.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.append (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.append@tok () Term)


; </end encoding let rec append>


; <Start encoding let op_At>

(declare-fun FStar.List.Tot.Base.op_At (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.op_At@tok () Term)

; </end encoding let op_At>


; <Skipped val FStar.List.Tot.Base.snoc/>


; <Start encoding let snoc>

(declare-fun FStar.List.Tot.Base.snoc (Term Term) Term)
(declare-fun Tm_arrow_07ff48a1c7b541b0963ce508064e29fb () Term)
(declare-fun FStar.List.Tot.Base.snoc@tok () Term)

; </end encoding let snoc>


; <Skipped val FStar.List.Tot.Base.flatten/>


; <Start encoding let rec flatten>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.flatten.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.flatten.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.flatten (Term Term) Term)
(declare-fun FStar.List.Tot.Base.flatten@tok () Term)
(declare-fun Tm_arrow_7e18fd6b36805c1f1c9a77e024fdec2e () Term)

; </end encoding let rec flatten>


; <Skipped val FStar.List.Tot.Base.map/>


; <Start encoding let rec map>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.map.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.map.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.map (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.map@tok () Term)



(declare-fun Tm_arrow_28431dcf5044bcdd56dbe625f9e3df4e () Term)

; </end encoding let rec map>


; <Skipped val FStar.List.Tot.Base.mapi_init/>


; <Start encoding let rec mapi_init>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.mapi_init.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.mapi_init.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.mapi_init (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.mapi_init@tok () Term)
(declare-fun Tm_arrow_010f318679809a99aeced42f5ba95505 (Term Term) Term)


(declare-fun Tm_arrow_9a89e146e4bb6b361bc4526b891ed1f1 () Term)

; </end encoding let rec mapi_init>


; <Skipped val FStar.List.Tot.Base.mapi/>


; <Start encoding let mapi>


(declare-fun FStar.List.Tot.Base.mapi (Term Term Term Term) Term)

(declare-fun Tm_arrow_b2a07f422fceebd0f3ee3abd5e4aeed2 () Term)
(declare-fun FStar.List.Tot.Base.mapi@tok () Term)


; </end encoding let mapi>


; <Skipped val FStar.List.Tot.Base.concatMap/>


; <Start encoding let rec concatMap>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.concatMap.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.concatMap.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.concatMap (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.concatMap@tok () Term)
(declare-fun Tm_arrow_121fa5bc200f7b3946a5e35040f266b9 (Term Term) Term)


(declare-fun Tm_arrow_c35dd4e5f8c08f94183bf93963fac92f () Term)

; </end encoding let rec concatMap>


; <Skipped val FStar.List.Tot.Base.fold_left/>


; <Start encoding let rec fold_left>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_left.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_left.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_left (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_left@tok () Term)
(declare-fun Tm_arrow_f0225aaf6b987d44876e7f498390aa39 (Term Term) Term)


(declare-fun Tm_arrow_230697841c1116c0d5f3958097856e6e () Term)

; </end encoding let rec fold_left>


; <Skipped val FStar.List.Tot.Base.fold_right/>


; <Start encoding let rec fold_right>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_right.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_right.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_right (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_right@tok () Term)
(declare-fun Tm_arrow_3c1d21b8f6dcc5e202b4ff1cafbaba81 (Term Term) Term)


(declare-fun Tm_arrow_105b39eeae3a464c82e64975ac399cdb () Term)

; </end encoding let rec fold_right>


; <Start encoding let rec fold_right_gtot>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_right_gtot (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_right_gtot@tok () Term)
(declare-fun Tm_ghost_arrow_d7e9834b8fd0407a723f5f3f4b012fdd (Term Term) Term)


(declare-fun Tm_ghost_arrow_fab043b8cdd2296e8d98a06066e4b2d2 () Term)

; </end encoding let rec fold_right_gtot>


; <Start encoding let map_gtot>


(declare-fun FStar.List.Tot.Base.map_gtot (Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_d0c7be07105bf8d5ad60b7f603c725f3 () Term)
(declare-fun FStar.List.Tot.Base.map_gtot@tok () Term)

(declare-fun Tm_ghost_arrow_21583233c98863da294c5e5d657cf78a (Term Term) Term)
(declare-fun Tm_abs_469cd3853c3ff3e8cd408b5521fdbd9d (Term Term Term) Term)

; </end encoding let map_gtot>


; <Skipped val FStar.List.Tot.Base.fold_left2/>


; <Start encoding let rec fold_left2>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_left2.fuel_instrumented (Fuel Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_left2.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_left2 (Term Term Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_left2@tok () Term)
(declare-fun Tm_arrow_40dd30796dd695d143ec6ed01d322177 (Term Term Term) Term)
(declare-fun Tm_refine_c16bc1b61f58b349bf6fc1c94dcaf83b (Term) Term)



(declare-fun Tm_arrow_3f28d1abbd43ddded682cbec516ea7bb () Term)


; </end encoding let rec fold_left2>


; <Start encoding let rec memP>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.memP.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.memP.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.memP (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.memP@tok () Term)
(declare-fun Tm_arrow_9a5de17321abf8ec257671c9a474c08a () Term)

; </end encoding let rec memP>


; <Skipped val FStar.List.Tot.Base.mem/>


; <Start encoding let rec mem>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.mem.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.mem.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.mem (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.mem@tok () Term)
(declare-fun Tm_arrow_8b16b79a9f8fab7cb6911016a8022992 () Term)

; </end encoding let rec mem>


; <Start encoding let contains>

(declare-fun FStar.List.Tot.Base.contains (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.contains@tok () Term)

; </end encoding let contains>


; <Skipped val FStar.List.Tot.Base.existsb/>


; <Start encoding let rec existsb>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.existsb.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.existsb.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.existsb (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.existsb@tok () Term)
(declare-fun Tm_arrow_84543425b818e2d10a976186b8e8c250 (Term) Term)


(declare-fun Tm_arrow_98dbecc64760e6a41f037a6881cd5df8 () Term)

; </end encoding let rec existsb>


; <Skipped val FStar.List.Tot.Base.find/>


; <Start encoding let rec find>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.find.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.find.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.find (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.find@tok () Term)

(declare-fun Tm_refine_3b1cb9ec3355fed185c658f53954b3fa (Term Term) Term)





(declare-fun Tm_arrow_286c509b12b9a2bb9bf1025c6fd97451 () Term)


; </end encoding let rec find>


; <Skipped val FStar.List.Tot.Base.filter/>


; <Start encoding let rec filter>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.filter.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.filter.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.filter (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.filter@tok () Term)



(declare-fun Tm_arrow_7c3df353a3c3ca9bc0a8454788aa9ad1 () Term)

; </end encoding let rec filter>


; <Start encoding let rec mem_filter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.mem_filter (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.mem_filter@tok () Term)

; </end encoding let rec mem_filter>


; <Start encoding let mem_filter_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.mem_filter_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.mem_filter_forall@tok () Term)


; </end encoding let mem_filter_forall>


; <Skipped val FStar.List.Tot.Base.for_all/>


; <Start encoding let rec for_all>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.for_all.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.for_all.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.for_all (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.for_all@tok () Term)





; </end encoding let rec for_all>


; <Start encoding let rec for_all_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.for_all_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.for_all_mem@tok () Term)

; </end encoding let rec for_all_mem>


; <Skipped val FStar.List.Tot.Base.collect/>


; <Start encoding let rec collect>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.collect.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.collect.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.collect (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.collect@tok () Term)





; </end encoding let rec collect>


; <Skipped val FStar.List.Tot.Base.tryFind/>


; <Start encoding let rec tryFind>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.tryFind.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.tryFind.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.tryFind (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.tryFind@tok () Term)



(declare-fun Tm_arrow_4ae6bca87a611585312b8b0d0d66fefe () Term)

; </end encoding let rec tryFind>


; <Skipped val FStar.List.Tot.Base.tryPick/>


; <Start encoding let rec tryPick>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.tryPick.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.tryPick.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.tryPick (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.tryPick@tok () Term)
(declare-fun Tm_arrow_4b0c7cc34485afa5854ebe5c95023d4c (Term Term) Term)


(declare-fun Tm_arrow_7fbbe8a710b97b9ed9c0d2dfb00b1641 () Term)

; </end encoding let rec tryPick>


; <Skipped val FStar.List.Tot.Base.choose/>


; <Start encoding let rec choose>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.choose.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.choose.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.choose (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.choose@tok () Term)



(declare-fun Tm_arrow_ee03a7411b6d8975b285ea6c772c4d89 () Term)

; </end encoding let rec choose>


; <Skipped val FStar.List.Tot.Base.partition/>


; <Start encoding let rec partition>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.partition.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.partition.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.partition (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.partition@tok () Term)



(declare-fun Tm_arrow_706f575815ce8a3bbd962da035d8aa14 () Term)

; </end encoding let rec partition>


; <Skipped val FStar.List.Tot.Base.subset/>


; <Start encoding let rec subset>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.subset.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.subset.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.subset (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.subset@tok () Term)
(declare-fun Tm_arrow_8d819a995fc33b4cb6aa699af88e8d32 () Term)

; </end encoding let rec subset>


; <Skipped val FStar.List.Tot.Base.noRepeats/>


; <Start encoding let rec noRepeats>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.noRepeats.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.noRepeats.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.noRepeats (Term Term) Term)
(declare-fun FStar.List.Tot.Base.noRepeats@tok () Term)
(declare-fun Tm_arrow_0dd285b24907a2f8b15dedffef61afa6 () Term)

; </end encoding let rec noRepeats>


; <Skipped val FStar.List.Tot.Base.no_repeats_p/>


; <Start encoding let rec no_repeats_p>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.no_repeats_p.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.no_repeats_p.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.no_repeats_p (Term Term) Term)
(declare-fun FStar.List.Tot.Base.no_repeats_p@tok () Term)
(declare-fun Tm_arrow_79c2442eab9e49d1108d2b7a240dc76e () Term)

; </end encoding let rec no_repeats_p>


; <Skipped val FStar.List.Tot.Base.assoc/>


; <Start encoding let rec assoc>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.assoc.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.assoc.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.assoc (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.assoc@tok () Term)
(declare-fun Tm_arrow_d77cf796c5b72d2c2316c0fcdad1dd79 () Term)

; </end encoding let rec assoc>


; <Skipped val FStar.List.Tot.Base.split/>


; <Start encoding let rec split>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.split.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.split.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.split (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.split@tok () Term)
(declare-fun Tm_arrow_1c3cb31b4ffa47bc6454f5b8a25e2407 () Term)

; </end encoding let rec split>


; <Start encoding let unzip>

(declare-fun FStar.List.Tot.Base.unzip (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.unzip@tok () Term)

; </end encoding let unzip>


; <Skipped val FStar.List.Tot.Base.unzip3/>


; <Start encoding let rec unzip3>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.unzip3.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.unzip3.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.unzip3 (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.unzip3@tok () Term)
(declare-fun Tm_arrow_d40be6b496fedb6f7a46205c5824b732 () Term)

; </end encoding let rec unzip3>


; <Start encoding let rec splitAt>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.splitAt.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.splitAt.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.splitAt (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.splitAt@tok () Term)
(declare-fun Tm_arrow_e36bd078e08c2ac2f1324fef6e0a4a22 () Term)

; </end encoding let rec splitAt>


; <Start encoding let rec lemma_splitAt_snd_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.lemma_splitAt_snd_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.lemma_splitAt_snd_length@tok () Term)

; </end encoding let rec lemma_splitAt_snd_length>


; <Skipped val FStar.List.Tot.Base.unsnoc/>


; <Start encoding let unsnoc>

(declare-fun Tm_refine_3f6b38b2852708f36615f9b4db0f9ff1 (Term) Term)
(declare-fun FStar.List.Tot.Base.unsnoc (Term Term) Term)

(declare-fun Tm_arrow_f4bc61622db0c39a751170734a140783 () Term)
(declare-fun FStar.List.Tot.Base.unsnoc@tok () Term)


; </end encoding let unsnoc>


; <Skipped val FStar.List.Tot.Base.split3/>


; <Start encoding let split3>


(declare-fun FStar.List.Tot.Base.split3 (Term Term Term) Term)

(declare-fun Tm_arrow_07dcb44faa0fb6172673970868e7ecff () Term)
(declare-fun FStar.List.Tot.Base.split3@tok () Term)


; </end encoding let split3>


; <Skipped val FStar.List.Tot.Base.partition_length/>


; <Start encoding let rec partition_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.partition_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.partition_length@tok () Term)

; </end encoding let rec partition_length>


; <Skipped val FStar.List.Tot.Base.bool_of_compare/>


; <Start encoding let bool_of_compare>

(declare-fun Tm_arrow_9877f854fbaabbcfda94f6c19b32ae3f (Term) Term)
(declare-fun FStar.List.Tot.Base.bool_of_compare (Term Term Term Term) Term)

(declare-fun Tm_arrow_a2f219461d35e20b7bc771538ca96429 () Term)
(declare-fun FStar.List.Tot.Base.bool_of_compare@tok () Term)


; </end encoding let bool_of_compare>


; <Skipped val FStar.List.Tot.Base.compare_of_bool/>


; <Start encoding let compare_of_bool>

(declare-fun Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e (Term) Term)
(declare-fun FStar.List.Tot.Base.compare_of_bool (Term Term Term Term) Term)

(declare-fun Tm_arrow_8b54d4820d055c327440d0d4811d3a33 () Term)
(declare-fun FStar.List.Tot.Base.compare_of_bool@tok () Term)


; </end encoding let compare_of_bool>


; <Start encoding let compare_of_bool_of_compare>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.compare_of_bool_of_compare (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.compare_of_bool_of_compare@tok () Term)

; </end encoding let compare_of_bool_of_compare>


; <Skipped val FStar.List.Tot.Base.sortWith/>


; <Start encoding let rec sortWith>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.sortWith.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.sortWith.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.sortWith (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.sortWith@tok () Term)



(declare-fun Tm_arrow_d29fb5884447b657cb725f9be68c5ba6 () Term)

; </end encoding let rec sortWith>


; <Start encoding let rec strict_suffix_of>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.strict_suffix_of (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.strict_suffix_of@tok () Term)
(declare-fun Tm_refine_da3062322c9bea8d5b2058386775b91a () Term)

(declare-fun Tm_arrow_1d91178a138c1826d6a199b1613394f1 () Term)


; </end encoding let rec strict_suffix_of>


; <Start encoding let strict_prefix_of>

(declare-fun FStar.List.Tot.Base.strict_prefix_of (Term) Term)

(declare-fun Tm_arrow_0dd65914dd84642f7849df5d67086aa0 (Term) Term)
(declare-fun Tm_arrow_25d975ae357f14f725a8d52a81f8be72 () Term)
(declare-fun FStar.List.Tot.Base.strict_prefix_of@tok () Term)



; </end encoding let strict_prefix_of>


; <Skipped val FStar.List.Tot.Base.list_unref/>


; <Start encoding let rec list_unref>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_unref.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_unref.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_unref (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_unref@tok () Term)






(declare-fun Tm_arrow_6b3a7706fc085133138f00ee506ef176 () Term)

; </end encoding let rec list_unref>


; <Skipped val FStar.List.Tot.Base.list_refb/>


; <Start encoding let rec list_refb>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_refb.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_refb.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_refb (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_refb@tok () Term)

(declare-fun Tm_refine_3dfaece5a1f8e27ecb1367ff50145048 (Term Term) Term)





(declare-fun Tm_refine_b3daba88e15ae8a9be9dd341522270b2 (Term Term Term Term) Term)

(declare-fun Tm_refine_1d1ddbacd892e41ad4ba585e87296d2e (Term Term Term) Term)










(declare-fun Tm_arrow_73c684a5823f2875fcceead4ce671ea8 () Term)







; </end encoding let rec list_refb>


; <Skipped val FStar.List.Tot.Base.list_ref/>


; <Start encoding let rec list_ref>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_ref.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_ref.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_ref (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_ref@tok () Term)

(declare-fun Tm_refine_751cc4d3e845537c495f9d7e1deb8aa9 (Term Term) Term)





(declare-fun Tm_refine_f61b92c00df29b87346e52dcf7670926 (Term Term Term Term) Term)

(declare-fun Tm_refine_16f0c42812e28aba7e30bc8c275306fb (Term Term Term) Term)










(declare-fun Tm_arrow_73f29356f974e35d230fb85375ad3965 () Term)







; </end encoding let rec list_ref>


; End Externals for module FStar.List.Tot.Base


; Externals for interface FStar.List.Tot.Properties


; <Start encoding let llist>

(declare-fun FStar.List.Tot.Properties.llist (Term Term) Term)
(declare-fun Tm_arrow_67c7b2626869cb316f118144000415b9 () Term)
(declare-fun FStar.List.Tot.Properties.llist@tok () Term)
(declare-fun Tm_refine_fbb3412f12fd58a91571022d7c9fa36d (Term Term) Term)

; </end encoding let llist>


; <Start encoding val FStar.List.Tot.Properties.mem_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_memP>


; <Start encoding val FStar.List.Tot.Properties.lemma_index_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_index_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_index_memP@tok () Term)
(declare-fun Tm_refine_bf2fa1226f2c9a0f6671df3e80ddcb8e (Term Term) Term)

; </end encoding val FStar.List.Tot.Properties.lemma_index_memP>


; <Start encoding val FStar.List.Tot.Properties.memP_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_empty@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_empty>


; <Start encoding val FStar.List.Tot.Properties.memP_existsb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_existsb (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_existsb@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_existsb>


; <Start encoding val FStar.List.Tot.Properties.memP_map_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_intro (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_map_intro>


; <Start encoding val FStar.List.Tot.Properties.memP_map_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_elim (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_elim@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_map_elim>


; <Start encoding val FStar.List.Tot.Properties.mem_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_empty@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_empty>


; <Start encoding val FStar.List.Tot.Properties.mem_existsb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_existsb (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_existsb@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_existsb>


; <Start encoding val FStar.List.Tot.Properties.mem_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_count (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_count@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_count>


; <Start encoding val FStar.List.Tot.Properties.rev_acc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_acc_length>


; <Start encoding val FStar.List.Tot.Properties.rev_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_length>


; <Start encoding val FStar.List.Tot.Properties.rev_acc_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_memP (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_acc_memP>


; <Start encoding val FStar.List.Tot.Properties.rev_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_memP>


; <Start encoding val FStar.List.Tot.Properties.rev_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_mem>


; <Start encoding val FStar.List.Tot.Properties.append_nil_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_nil_l (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_nil_l@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_nil_l>


; <Start encoding val FStar.List.Tot.Properties.append_l_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_l_nil (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_l_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_l_nil>


; <Start encoding val FStar.List.Tot.Properties.append_cons_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_cons_l (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_cons_l@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_cons_l>


; <Start encoding val FStar.List.Tot.Properties.append_l_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_l_cons (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_l_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_l_cons>


; <Start encoding val FStar.List.Tot.Properties.append_assoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_assoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_assoc@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_assoc>


; <Start encoding val FStar.List.Tot.Properties.append_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_length>


; <Start encoding val FStar.List.Tot.Properties.append_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_mem>


; <Start encoding val FStar.List.Tot.Properties.append_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_memP (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_memP>


; <Start encoding val FStar.List.Tot.Properties.append_mem_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_mem_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_mem_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_mem_forall>


; <Start encoding val FStar.List.Tot.Properties.append_memP_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_memP_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_memP_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_memP_forall>


; <Start encoding val FStar.List.Tot.Properties.append_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_count (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_count@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_count>


; <Start encoding val FStar.List.Tot.Properties.append_count_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_count_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_count_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_count_forall>


; <Start encoding val FStar.List.Tot.Properties.append_eq_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_eq_nil>


; <Start encoding val FStar.List.Tot.Properties.append_eq_singl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_singl (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_singl@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_eq_singl>


; <Start encoding val FStar.List.Tot.Properties.append_inv_head>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_head (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_head@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_inv_head>


; <Start encoding val FStar.List.Tot.Properties.append_inv_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_tail (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_tail@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_inv_tail>


; <Start encoding val FStar.List.Tot.Properties.append_length_inv_head>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_head (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_head@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_length_inv_head>


; <Start encoding val FStar.List.Tot.Properties.append_length_inv_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_tail (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_tail@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_length_inv_tail>


; <Start encoding val FStar.List.Tot.Properties.append_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_injective (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_injective@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_injective>


; <Start encoding val FStar.List.Tot.Properties.lemma_append_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_append_last (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_append_last@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_append_last>


; <Start encoding let rec rev'>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.rev_.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.rev_.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.rev_ (Term Term) Term)
(declare-fun FStar.List.Tot.Properties.rev_@tok () Term)


; </end encoding let rec rev'>


; <Start encoding let rev'T>

(declare-fun FStar.List.Tot.Properties.rev_T (Term) Term)
(declare-fun Tm_arrow_f34ce2ad5441b4bd300fa100b397737d (Term) Term)
(declare-fun Tm_arrow_42c6b27a859866d5307ff94c9f459cb1 () Term)
(declare-fun FStar.List.Tot.Properties.rev_T@tok () Term)


; </end encoding let rev'T>


; <Start encoding val FStar.List.Tot.Properties.rev_acc_rev'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_rev_ (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_rev_@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_acc_rev'>


; <Start encoding val FStar.List.Tot.Properties.rev_rev'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_rev_ (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_rev_@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_rev'>


; <Start encoding val FStar.List.Tot.Properties.rev'_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev'_append>


; <Start encoding val FStar.List.Tot.Properties.rev_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_append>


; <Start encoding val FStar.List.Tot.Properties.rev'_involutive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__involutive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__involutive@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev'_involutive>


; <Start encoding val FStar.List.Tot.Properties.rev_involutive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_involutive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_involutive@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_involutive>


; <Start encoding val FStar.List.Tot.Properties.lemma_snoc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_snoc_length>


; <Start encoding val FStar.List.Tot.Properties.rev'_list_ind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__list_ind (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__list_ind@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev'_list_ind>


; <Start encoding val FStar.List.Tot.Properties.rev_ind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_ind (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_ind@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_ind>


; <Start encoding val FStar.List.Tot.Properties.map_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_lemma@tok () Term)


; </end encoding val FStar.List.Tot.Properties.map_lemma>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_snoc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_snoc@tok () Term)
(declare-fun Tm_refine_e88aba6d4c79a5625ab4330932edf7ed (Term) Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_snoc>


; <Start encoding val FStar.List.Tot.Properties.lemma_snoc_unsnoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_unsnoc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_unsnoc@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_snoc_unsnoc>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_length>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_append>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_is_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_is_last (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_is_last@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_is_last>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_index@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_index>


; <Start encoding let rec split_using>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.split_using.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.split_using.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.split_using (Term Term Term) Term)
(declare-fun FStar.List.Tot.Properties.split_using@tok () Term)
(declare-fun Tm_refine_ca5b6dc4e0a851997703798a1ffc5f70 (Term Term) Term)


(declare-fun Tm_ghost_arrow_583c096a402961cd40d8b718fb07bacc () Term)

; </end encoding let rec split_using>


; <Start encoding val FStar.List.Tot.Properties.lemma_split_using>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_split_using (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_split_using@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_split_using>


; <Start encoding let rec index_of>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.index_of.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.index_of.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.index_of (Term Term Term) Term)
(declare-fun FStar.List.Tot.Properties.index_of@tok () Term)

(declare-fun Tm_refine_cd45ecc9daf74409c394004efbaa3338 (Term Term Term) Term)



(declare-fun Tm_ghost_arrow_d9cd5e48f458f8c211c59f9048af3929 () Term)


; </end encoding let rec index_of>


; <Start encoding val FStar.List.Tot.Properties.partition_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_mem>


; <Start encoding val FStar.List.Tot.Properties.partition_mem_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_mem_forall>


; <Start encoding val FStar.List.Tot.Properties.partition_mem_p_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_p_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_p_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_mem_p_forall>


; <Start encoding val FStar.List.Tot.Properties.partition_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_count (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_count@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_count>


; <Start encoding val FStar.List.Tot.Properties.partition_count_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_count_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_count_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_count_forall>


; <Start encoding val FStar.List.Tot.Properties.mem_subset>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_subset (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_subset@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_subset>


; <Start encoding val FStar.List.Tot.Properties.subset_reflexive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.subset_reflexive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.subset_reflexive@tok () Term)

; </end encoding val FStar.List.Tot.Properties.subset_reflexive>


; <Start encoding val FStar.List.Tot.Properties.sortWith_permutation>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_permutation (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_permutation@tok () Term)

; </end encoding val FStar.List.Tot.Properties.sortWith_permutation>


; <Start encoding let rec sorted>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.sorted.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.sorted.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.sorted (Term Term) Term)
(declare-fun FStar.List.Tot.Properties.sorted@tok () Term)

(declare-fun Tm_arrow_9cabe840930f95fd18f81c0a913ddb25 (Term) Term)
(declare-fun Tm_abs_4bfb53c1305d6fe7222f07cf49f467b6 (Term Term Fuel Term) Term)




(declare-fun Tm_arrow_af42ab660b7a2cfc6caea649532e5867 () Term)


; </end encoding let rec sorted>


; <Start encoding let total_order>


(declare-fun FStar.List.Tot.Properties.total_order (Term Term) Term)

(declare-fun Tm_arrow_92649d42e4d7df07b51f92b06355903e () Term)
(declare-fun FStar.List.Tot.Properties.total_order@tok () Term)


; </end encoding let total_order>


; <Start encoding val FStar.List.Tot.Properties.append_sorted>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_sorted (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_sorted@tok () Term)

(declare-fun Tm_refine_a928c26e721d07631e5f0d63f521a37e (Term Term) Term)


; </end encoding val FStar.List.Tot.Properties.append_sorted>


; <Start encoding val FStar.List.Tot.Properties.sortWith_sorted>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_sorted (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_sorted@tok () Term)

; </end encoding val FStar.List.Tot.Properties.sortWith_sorted>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_nil (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_nil>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_cons>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_append_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_elim@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_append_elim>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_append_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_append_intro>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_nil (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_nil>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_cons>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_elim@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_elim>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_intro>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_swap>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_swap (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_swap@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_swap>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_permut>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_permut (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_permut@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_permut>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_false_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_false_intro (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_false_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_false_intro>


; <Start encoding val FStar.List.Tot.Properties.assoc_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_nil>


; <Start encoding val FStar.List.Tot.Properties.assoc_cons_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_eq (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_eq@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_cons_eq>


; <Start encoding val FStar.List.Tot.Properties.assoc_cons_not_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_not_eq (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_not_eq@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_cons_not_eq>


; <Start encoding val FStar.List.Tot.Properties.assoc_append_elim_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_r (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_r@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_append_elim_r>


; <Start encoding val FStar.List.Tot.Properties.assoc_append_elim_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_l (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_l@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_append_elim_l>


; <Start encoding val FStar.List.Tot.Properties.assoc_memP_some>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_some (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_some@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_memP_some>


; <Start encoding val FStar.List.Tot.Properties.assoc_memP_none>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_none (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_none@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_memP_none>


; <Start encoding val FStar.List.Tot.Properties.assoc_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_mem>


; <Start encoding val FStar.List.Tot.Properties.fold_left_invar>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_invar (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_invar@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_invar>


; <Start encoding val FStar.List.Tot.Properties.fold_left_map>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_map (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_map@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_map>


; <Start encoding val FStar.List.Tot.Properties.map_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_append (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.map_append>


; <Start encoding val FStar.List.Tot.Properties.fold_left_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_append>


; <Start encoding val FStar.List.Tot.Properties.fold_left_monoid>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_monoid (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_monoid@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_monoid>


; <Start encoding val FStar.List.Tot.Properties.fold_left_append_monoid>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append_monoid (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append_monoid@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_append_monoid>


; <Start encoding val FStar.List.Tot.Properties.index_extensionality>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.index_extensionality (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.index_extensionality@tok () Term)

; </end encoding val FStar.List.Tot.Properties.index_extensionality>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_nil>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_cons>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_trans>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_trans (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_trans@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_trans>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_correct>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_correct (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_correct@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_correct>


; <Start encoding val FStar.List.Tot.Properties.map_strict_suffix_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_strict_suffix_of (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_strict_suffix_of@tok () Term)

; </end encoding val FStar.List.Tot.Properties.map_strict_suffix_of>


; <Start encoding val FStar.List.Tot.Properties.mem_strict_suffix_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_strict_suffix_of (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_strict_suffix_of@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_strict_suffix_of>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_exists_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_exists_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_exists_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_exists_append>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append>


; <Start encoding val FStar.List.Tot.Properties.precedes_tl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_tl (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_tl@tok () Term)

; </end encoding val FStar.List.Tot.Properties.precedes_tl>


; <Start encoding val FStar.List.Tot.Properties.precedes_append_cons_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_r (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_r@tok () Term)

; </end encoding val FStar.List.Tot.Properties.precedes_append_cons_r>


; <Start encoding val FStar.List.Tot.Properties.precedes_append_cons_prod_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_prod_r (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_prod_r@tok () Term)

; </end encoding val FStar.List.Tot.Properties.precedes_append_cons_prod_r>


; <Start encoding val FStar.List.Tot.Properties.memP_precedes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_precedes (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_precedes@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_precedes>


; <Start encoding val FStar.List.Tot.Properties.assoc_precedes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_precedes (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_precedes@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_precedes>


; <Start encoding val FStar.List.Tot.Properties.find_none>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.find_none (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.find_none@tok () Term)

; </end encoding val FStar.List.Tot.Properties.find_none>


; <Start encoding val FStar.List.Tot.Properties.append_init_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_init_last (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_init_last@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_init_last>


; <Start encoding val FStar.List.Tot.Properties.init_last_def>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.init_last_def (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.init_last_def@tok () Term)

; </end encoding val FStar.List.Tot.Properties.init_last_def>


; <Start encoding val FStar.List.Tot.Properties.init_last_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.init_last_inj (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.init_last_inj@tok () Term)

; </end encoding val FStar.List.Tot.Properties.init_last_inj>


; <Start encoding val FStar.List.Tot.Properties.for_all_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.for_all_append (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.for_all_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.for_all_append>


; End Externals for interface FStar.List.Tot.Properties


; Externals for module FStar.List.Tot


; End Externals for module FStar.List.Tot


; Externals for interface FStar.Sealed


; <Start encoding val FStar.Sealed.sealed>

(declare-fun FStar.Sealed.sealed (Term) Term)

(declare-fun FStar.Sealed.sealed@tok () Term)

; </end encoding val FStar.Sealed.sealed>


; <Start encoding val FStar.Sealed.sealed_singl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Sealed.sealed_singl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Sealed.sealed_singl@tok () Term)

; </end encoding val FStar.Sealed.sealed_singl>


; <Start encoding val FStar.Sealed.seal>

(declare-fun FStar.Sealed.seal (Term Term) Term)
(declare-fun Tm_arrow_202c0385508095b22536f7b176783182 () Term)
(declare-fun FStar.Sealed.seal@tok () Term)

; </end encoding val FStar.Sealed.seal>


; <Start encoding val FStar.Sealed.map_seal>


(declare-fun FStar.Sealed.map_seal (Term Term Term Term) Term)

(declare-fun Tm_arrow_8ae919a1b422d31df5f3a30011fa6e98 () Term)
(declare-fun FStar.Sealed.map_seal@tok () Term)

; </end encoding val FStar.Sealed.map_seal>


; <Start encoding val FStar.Sealed.bind_seal>

(declare-fun Tm_arrow_5dc851dfbcbc38067d4415ede8f88e9f (Term Term) Term)
(declare-fun FStar.Sealed.bind_seal (Term Term Term Term) Term)

(declare-fun Tm_arrow_4d90a5e6583ddd9ddbd451cbed0e9d01 () Term)
(declare-fun FStar.Sealed.bind_seal@tok () Term)

; </end encoding val FStar.Sealed.bind_seal>


; End Externals for interface FStar.Sealed


; Externals for module FStar.Mul


; <Start encoding let op_Star>

(declare-fun FStar.Mul.op_Star (Term Term) Term)

(declare-fun FStar.Mul.op_Star@tok () Term)

; </end encoding let op_Star>


; End Externals for module FStar.Mul


; Externals for interface FStar.Seq.Base


; <Start encoding val FStar.Seq.Base.seq>

(declare-fun FStar.Seq.Base.seq (Term) Term)

(declare-fun FStar.Seq.Base.seq@tok () Term)

; </end encoding val FStar.Seq.Base.seq>


; <Start encoding val FStar.Seq.Base.length>

(declare-fun FStar.Seq.Base.length (Term Term) Term)
(declare-fun Tm_arrow_d2c01593e1ccf972aadc4bced72f8166 () Term)
(declare-fun FStar.Seq.Base.length@tok () Term)

; </end encoding val FStar.Seq.Base.length>


; <Start encoding val FStar.Seq.Base.seq_to_list>

(declare-fun FStar.Seq.Base.seq_to_list (Term Term) Term)
(declare-fun Tm_refine_c4e3a92f9bd1d01a07e4fb66c5de2e7e (Term Term) Term)
(declare-fun Tm_arrow_7d1aeb9cf9244f8c50e0ad901486a03b () Term)
(declare-fun FStar.Seq.Base.seq_to_list@tok () Term)


; </end encoding val FStar.Seq.Base.seq_to_list>


; <Start encoding val FStar.Seq.Base.seq_of_list>

(declare-fun FStar.Seq.Base.seq_of_list (Term Term) Term)
(declare-fun Tm_refine_d2d1ea66f2b3a92c2deb42edcbb784ce (Term Term) Term)
(declare-fun Tm_arrow_4966fa2986a35d9c0803c863a2768cbd () Term)
(declare-fun FStar.Seq.Base.seq_of_list@tok () Term)


; </end encoding val FStar.Seq.Base.seq_of_list>


; <Start encoding val FStar.Seq.Base.index>

(declare-fun Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 (Term Term) Term)
(declare-fun FStar.Seq.Base.index (Term Term Term) Term)

(declare-fun Tm_arrow_1910ef5262f2ee8e712b6609a232b1ea () Term)
(declare-fun FStar.Seq.Base.index@tok () Term)

; </end encoding val FStar.Seq.Base.index>


; <Start encoding val FStar.Seq.Base.create>

(declare-fun FStar.Seq.Base.create (Term Term Term) Term)
(declare-fun Tm_arrow_b5b3d4fcc48eb666a8878550e50df9fb () Term)
(declare-fun FStar.Seq.Base.create@tok () Term)

; </end encoding val FStar.Seq.Base.create>


; <Start encoding val FStar.Seq.Base.init_aux>

(declare-fun Tm_refine_c1424615841f28cac7fc34e92b7ff33c (Term) Term)

(declare-fun Tm_arrow_44bb45ed5c2534b346e0f58ea5033251 (Term Term) Term)
(declare-fun FStar.Seq.Base.init_aux (Term Term Term Term) Term)



(declare-fun Tm_arrow_da6bbab10714c064205223f9990745bd () Term)
(declare-fun FStar.Seq.Base.init_aux@tok () Term)

; </end encoding val FStar.Seq.Base.init_aux>


; <Start encoding val FStar.Seq.Base.init>



(declare-fun FStar.Seq.Base.init (Term Term Term) Term)


(declare-fun Tm_arrow_d638d84259a58eff38c91944355ac313 () Term)
(declare-fun FStar.Seq.Base.init@tok () Term)

; </end encoding val FStar.Seq.Base.init>


; <Start encoding val FStar.Seq.Base.init_aux_ghost>



(declare-fun Tm_ghost_arrow_b7c239afcc620812134a759b53cafcc7 (Term Term) Term)
(declare-fun FStar.Seq.Base.init_aux_ghost (Term Term Term Term) Term)



(declare-fun Tm_ghost_arrow_90c084cce85ad5fa9b6789a83ba7b9d5 () Term)
(declare-fun FStar.Seq.Base.init_aux_ghost@tok () Term)

; </end encoding val FStar.Seq.Base.init_aux_ghost>


; <Start encoding val FStar.Seq.Base.init_ghost>



(declare-fun FStar.Seq.Base.init_ghost (Term Term Term) Term)


(declare-fun Tm_ghost_arrow_dc3e2497ae3914facc1bb3cecddbafe4 () Term)
(declare-fun FStar.Seq.Base.init_ghost@tok () Term)

; </end encoding val FStar.Seq.Base.init_ghost>


; <Start encoding val FStar.Seq.Base.empty>

(declare-fun FStar.Seq.Base.empty (Term) Term)
(declare-fun Tm_refine_b913a3f691ca99086652e0a655e72f17 (Term) Term)
(declare-fun Tm_arrow_c39fb4e3e203a822394c714f70ec2d2c () Term)
(declare-fun FStar.Seq.Base.empty@tok () Term)


; </end encoding val FStar.Seq.Base.empty>


; <Start encoding let createEmpty>

(declare-fun FStar.Seq.Base.createEmpty (Term) Term)


(declare-fun FStar.Seq.Base.createEmpty@tok () Term)


; </end encoding let createEmpty>


; <Start encoding val FStar.Seq.Base.lemma_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_empty@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_empty>


; <Start encoding val FStar.Seq.Base.upd>


(declare-fun FStar.Seq.Base.upd (Term Term Term Term) Term)

(declare-fun Tm_arrow_12766e98f50c8b91e296bbc369061265 () Term)
(declare-fun FStar.Seq.Base.upd@tok () Term)

; </end encoding val FStar.Seq.Base.upd>


; <Start encoding val FStar.Seq.Base.append>

(declare-fun FStar.Seq.Base.append (Term Term Term) Term)
(declare-fun Tm_arrow_22c1b165cc91e8aafbceb8b36244be8e () Term)
(declare-fun FStar.Seq.Base.append@tok () Term)

; </end encoding val FStar.Seq.Base.append>


; <Start encoding let cons>

(declare-fun FStar.Seq.Base.cons (Term Term Term) Term)
(declare-fun Tm_arrow_62ad6018b578ef7ed3c0e74bdebff729 () Term)
(declare-fun FStar.Seq.Base.cons@tok () Term)

; </end encoding let cons>


; <Start encoding let op_At_Bar>

(declare-fun FStar.Seq.Base.op_At_Bar (Term Term Term) Term)

(declare-fun FStar.Seq.Base.op_At_Bar@tok () Term)

; </end encoding let op_At_Bar>


; <Start encoding val FStar.Seq.Base.slice>

(declare-fun Tm_refine_81407705a0828c2c1b1976675443f647 (Term Term Term) Term)
(declare-fun FStar.Seq.Base.slice (Term Term Term Term) Term)

(declare-fun Tm_arrow_f59809c98fadf275c00ce819f5868628 () Term)
(declare-fun FStar.Seq.Base.slice@tok () Term)

; </end encoding val FStar.Seq.Base.slice>


; <Start encoding val FStar.Seq.Base.lemma_seq_of_seq_to_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_seq_of_seq_to_list (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_seq_of_seq_to_list@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_seq_of_seq_to_list>


; <Start encoding val FStar.Seq.Base.lemma_seq_to_seq_of_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_seq_to_seq_of_list (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_seq_to_seq_of_list@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_seq_to_seq_of_list>


; <Start encoding val FStar.Seq.Base.lemma_seq_of_list_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_seq_of_list_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_seq_of_list_cons@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_seq_of_list_cons>


; <Start encoding val FStar.Seq.Base.lemma_seq_to_list_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_seq_to_list_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_seq_to_list_cons@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_seq_to_list_cons>


; <Start encoding val FStar.Seq.Base.lemma_create_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_create_len (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_create_len@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_create_len>


; <Start encoding val FStar.Seq.Base.lemma_init_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_len (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_len@tok () Term)



; </end encoding val FStar.Seq.Base.lemma_init_len>


; <Start encoding val FStar.Seq.Base.lemma_init_aux_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_aux_len (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_aux_len@tok () Term)




; </end encoding val FStar.Seq.Base.lemma_init_aux_len>


; <Start encoding val FStar.Seq.Base.lemma_init_ghost_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_len (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_len@tok () Term)



; </end encoding val FStar.Seq.Base.lemma_init_ghost_len>


; <Start encoding val FStar.Seq.Base.lemma_init_ghost_aux_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_aux_len (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_aux_len@tok () Term)




; </end encoding val FStar.Seq.Base.lemma_init_ghost_aux_len>


; <Start encoding val FStar.Seq.Base.lemma_len_upd>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_len_upd (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_len_upd@tok () Term)
(declare-fun Tm_refine_2ca062977a42c36634b89c1c4f193f79 (Term Term) Term)

; </end encoding val FStar.Seq.Base.lemma_len_upd>


; <Start encoding val FStar.Seq.Base.lemma_len_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_len_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_len_append@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_len_append>


; <Start encoding val FStar.Seq.Base.lemma_len_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_len_slice (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_len_slice@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_len_slice>


; <Start encoding val FStar.Seq.Base.lemma_index_create>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_create (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_create@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_index_create>


; <Start encoding val FStar.Seq.Base.lemma_index_upd1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd1@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_index_upd1>


; <Start encoding val FStar.Seq.Base.lemma_index_upd2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd2 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd2@tok () Term)

(declare-fun Tm_refine_df81b3f17797c6f405c1dbb191651292 (Term Term Term) Term)

; </end encoding val FStar.Seq.Base.lemma_index_upd2>


; <Start encoding val FStar.Seq.Base.lemma_index_app1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_app1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_app1@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_index_app1>


; <Start encoding val FStar.Seq.Base.lemma_index_app2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_app2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_app2@tok () Term)
(declare-fun Tm_refine_ac201cf927190d39c033967b63cb957b (Term Term Term) Term)

; </end encoding val FStar.Seq.Base.lemma_index_app2>


; <Start encoding val FStar.Seq.Base.lemma_index_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_slice (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_slice@tok () Term)
(declare-fun Tm_refine_d3d07693cd71377864ef84dc97d10ec1 (Term Term Term) Term)
(declare-fun Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8 (Term Term) Term)

; </end encoding val FStar.Seq.Base.lemma_index_slice>


; <Start encoding val FStar.Seq.Base.hasEq_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.hasEq_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.hasEq_lemma@tok () Term)

; </end encoding val FStar.Seq.Base.hasEq_lemma>


; <Start encoding val FStar.Seq.Base.equal>

(declare-fun FStar.Seq.Base.equal (Term Term Term) Term)
(declare-fun Tm_arrow_c2c0a5f39eee7a5a92db8bac6fe4fb3b () Term)
(declare-fun FStar.Seq.Base.equal@tok () Term)

; </end encoding val FStar.Seq.Base.equal>


; <Start encoding val FStar.Seq.Base.eq_i>

(declare-fun Tm_refine_4639d389381bee5cf8cf77b7a6585074 (Term Term) Term)
(declare-fun Tm_refine_b361ba8089a6e963921008d537e799a1 (Term Term) Term)
(declare-fun FStar.Seq.Base.eq_i (Term Term Term Term) Term)


(declare-fun Tm_refine_331c14d442c5ee89a4fce6ea305c920f (Term Term Term) Term)
(declare-fun Tm_refine_51f956555266662f5f0ed4aac81d10bc (Term Term Term Term) Term)
(declare-fun Tm_arrow_e5286e13b5c071949ebc5146fbef7d7f () Term)
(declare-fun FStar.Seq.Base.eq_i@tok () Term)



; </end encoding val FStar.Seq.Base.eq_i>


; <Start encoding val FStar.Seq.Base.eq>

(declare-fun FStar.Seq.Base.eq (Term Term Term) Term)
(declare-fun Tm_refine_1c0effbdef48f9b00a1efb7b571fbb69 (Term Term Term) Term)
(declare-fun Tm_arrow_70ef1e4b9388d8aa6e0d17c5aeed02a7 () Term)
(declare-fun FStar.Seq.Base.eq@tok () Term)


; </end encoding val FStar.Seq.Base.eq>


; <Start encoding val FStar.Seq.Base.lemma_eq_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_eq_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_eq_intro@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_eq_intro>


; <Start encoding val FStar.Seq.Base.lemma_eq_refl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_eq_refl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_eq_refl@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_eq_refl>


; <Start encoding val FStar.Seq.Base.lemma_eq_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_eq_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_eq_elim@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_eq_elim>


; <Start encoding val FStar.Seq.Base.append_assoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.append_assoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.append_assoc@tok () Term)

; </end encoding val FStar.Seq.Base.append_assoc>


; <Start encoding val FStar.Seq.Base.append_empty_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.append_empty_l (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.append_empty_l@tok () Term)

; </end encoding val FStar.Seq.Base.append_empty_l>


; <Start encoding val FStar.Seq.Base.append_empty_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.append_empty_r (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.append_empty_r@tok () Term)

; </end encoding val FStar.Seq.Base.append_empty_r>


; <Start encoding val FStar.Seq.Base.init_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_index@tok () Term)

; </end encoding val FStar.Seq.Base.init_index>


; <Start encoding val FStar.Seq.Base.init_index_>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_index_ (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_index_@tok () Term)



; </end encoding val FStar.Seq.Base.init_index_>


; <Start encoding val FStar.Seq.Base.init_ghost_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_ghost_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_ghost_index@tok () Term)

; </end encoding val FStar.Seq.Base.init_ghost_index>


; <Start encoding val FStar.Seq.Base.init_ghost_index_>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_ghost_index_ (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_ghost_index_@tok () Term)



; </end encoding val FStar.Seq.Base.init_ghost_index_>


; <Start encoding val FStar.Seq.Base.lemma_equal_instances_implies_equal_types>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_equal_instances_implies_equal_types (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_equal_instances_implies_equal_types@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_equal_instances_implies_equal_types>


; End Externals for interface FStar.Seq.Base


; Externals for interface FStar.Math.Lemmas


; <Start encoding val FStar.Math.Lemmas.euclidean_div_axiom>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.euclidean_div_axiom (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.euclidean_div_axiom@tok () Term)

; </end encoding val FStar.Math.Lemmas.euclidean_div_axiom>


; <Start encoding val FStar.Math.Lemmas.lemma_eucl_div_bound>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_eucl_div_bound (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_eucl_div_bound@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_eucl_div_bound>


; <Start encoding val FStar.Math.Lemmas.lemma_mult_le_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_le_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_le_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mult_le_left>


; <Start encoding val FStar.Math.Lemmas.lemma_mult_le_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_le_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_le_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mult_le_right>


; <Start encoding val FStar.Math.Lemmas.lemma_mult_lt_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mult_lt_left>


; <Start encoding val FStar.Math.Lemmas.lemma_mult_lt_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mult_lt_right>


; <Start encoding val FStar.Math.Lemmas.lemma_mult_lt_sqr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_sqr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_sqr@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mult_lt_sqr>


; <Start encoding val FStar.Math.Lemmas.swap_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.swap_mul (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.swap_mul@tok () Term)

; </end encoding val FStar.Math.Lemmas.swap_mul>


; <Start encoding val FStar.Math.Lemmas.lemma_cancel_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_cancel_mul (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_cancel_mul@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_cancel_mul>


; <Start encoding val FStar.Math.Lemmas.distributivity_add_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.distributivity_add_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.distributivity_add_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.distributivity_add_left>


; <Start encoding val FStar.Math.Lemmas.distributivity_add_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.distributivity_add_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.distributivity_add_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.distributivity_add_right>


; <Start encoding val FStar.Math.Lemmas.paren_mul_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.paren_mul_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.paren_mul_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.paren_mul_left>


; <Start encoding val FStar.Math.Lemmas.paren_mul_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.paren_mul_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.paren_mul_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.paren_mul_right>


; <Start encoding val FStar.Math.Lemmas.paren_add_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.paren_add_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.paren_add_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.paren_add_left>


; <Start encoding val FStar.Math.Lemmas.paren_add_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.paren_add_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.paren_add_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.paren_add_right>


; <Start encoding val FStar.Math.Lemmas.addition_is_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.addition_is_associative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.addition_is_associative@tok () Term)

; </end encoding val FStar.Math.Lemmas.addition_is_associative>


; <Start encoding val FStar.Math.Lemmas.subtraction_is_distributive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.subtraction_is_distributive (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.subtraction_is_distributive@tok () Term)

; </end encoding val FStar.Math.Lemmas.subtraction_is_distributive>


; <Start encoding val FStar.Math.Lemmas.swap_add_plus_minus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.swap_add_plus_minus (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.swap_add_plus_minus@tok () Term)

; </end encoding val FStar.Math.Lemmas.swap_add_plus_minus>


; <Start encoding val FStar.Math.Lemmas.neg_mul_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.neg_mul_left (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.neg_mul_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.neg_mul_left>


; <Start encoding val FStar.Math.Lemmas.neg_mul_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.neg_mul_right (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.neg_mul_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.neg_mul_right>


; <Start encoding val FStar.Math.Lemmas.swap_neg_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.swap_neg_mul (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.swap_neg_mul@tok () Term)

; </end encoding val FStar.Math.Lemmas.swap_neg_mul>


; <Start encoding val FStar.Math.Lemmas.distributivity_sub_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.distributivity_sub_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.distributivity_sub_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.distributivity_sub_left>


; <Start encoding val FStar.Math.Lemmas.distributivity_sub_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.distributivity_sub_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.distributivity_sub_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.distributivity_sub_right>


; <Start encoding val FStar.Math.Lemmas.mul_binds_tighter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_binds_tighter (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_binds_tighter@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_binds_tighter>


; <Start encoding val FStar.Math.Lemmas.lemma_abs_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_abs_mul (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_abs_mul@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_abs_mul>


; <Start encoding val FStar.Math.Lemmas.lemma_abs_bound>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_abs_bound (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_abs_bound@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_abs_bound>


; <Start encoding val FStar.Math.Lemmas.mul_ineq1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_ineq1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_ineq1@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_ineq1>


; <Start encoding val FStar.Math.Lemmas.add_zero_left_is_same>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.add_zero_left_is_same (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.add_zero_left_is_same@tok () Term)

; </end encoding val FStar.Math.Lemmas.add_zero_left_is_same>


; <Start encoding val FStar.Math.Lemmas.add_zero_right_is_same>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.add_zero_right_is_same (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.add_zero_right_is_same@tok () Term)

; </end encoding val FStar.Math.Lemmas.add_zero_right_is_same>


; <Start encoding val FStar.Math.Lemmas.mul_one_left_is_same>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_one_left_is_same (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_one_left_is_same@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_one_left_is_same>


; <Start encoding val FStar.Math.Lemmas.mul_one_right_is_same>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_one_right_is_same (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_one_right_is_same@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_one_right_is_same>


; <Start encoding val FStar.Math.Lemmas.mul_zero_left_is_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_zero_left_is_zero (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_zero_left_is_zero@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_zero_left_is_zero>


; <Start encoding val FStar.Math.Lemmas.mul_zero_right_is_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_zero_right_is_zero (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_zero_right_is_zero@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_zero_right_is_zero>


; <Start encoding val FStar.Math.Lemmas.nat_times_nat_is_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.nat_times_nat_is_nat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.nat_times_nat_is_nat@tok () Term)

; </end encoding val FStar.Math.Lemmas.nat_times_nat_is_nat>


; <Start encoding val FStar.Math.Lemmas.pos_times_pos_is_pos>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pos_times_pos_is_pos (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pos_times_pos_is_pos@tok () Term)

; </end encoding val FStar.Math.Lemmas.pos_times_pos_is_pos>


; <Start encoding val FStar.Math.Lemmas.nat_over_pos_is_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.nat_over_pos_is_nat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.nat_over_pos_is_nat@tok () Term)

; </end encoding val FStar.Math.Lemmas.nat_over_pos_is_nat>


; <Start encoding val FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma>


; <Start encoding val FStar.Math.Lemmas.int_times_int_equal_zero_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.int_times_int_equal_zero_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.int_times_int_equal_zero_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.int_times_int_equal_zero_lemma>


; <Start encoding val FStar.Math.Lemmas.pow2_double_sum>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_double_sum (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_double_sum@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_double_sum>


; <Start encoding val FStar.Math.Lemmas.pow2_double_mult>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_double_mult (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_double_mult@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_double_mult>


; <Start encoding val FStar.Math.Lemmas.pow2_lt_compat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_lt_compat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_lt_compat@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_lt_compat>


; <Start encoding val FStar.Math.Lemmas.pow2_le_compat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_le_compat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_le_compat@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_le_compat>


; <Start encoding val FStar.Math.Lemmas.pow2_plus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_plus (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_plus@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_plus>


; <Start encoding val FStar.Math.Lemmas.pow2_minus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_minus (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_minus@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_minus>


; <Start encoding val FStar.Math.Lemmas.multiply_fractions>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.multiply_fractions (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.multiply_fractions@tok () Term)

; </end encoding val FStar.Math.Lemmas.multiply_fractions>


; <Start encoding val FStar.Math.Lemmas.modulo_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_lemma>


; <Start encoding val FStar.Math.Lemmas.lemma_div_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_mod@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_mod>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_lt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_lt (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_lt@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_lt>


; <Start encoding val FStar.Math.Lemmas.lemma_div_lt_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt_nat (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt_nat@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_lt_nat>


; <Start encoding val FStar.Math.Lemmas.lemma_div_lt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_lt>


; <Start encoding val FStar.Math.Lemmas.bounded_multiple_is_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.bounded_multiple_is_zero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.bounded_multiple_is_zero@tok () Term)

; </end encoding val FStar.Math.Lemmas.bounded_multiple_is_zero>


; <Start encoding val FStar.Math.Lemmas.small_div>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_div (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_div@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_div>


; <Start encoding val FStar.Math.Lemmas.small_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_mod@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_mod>


; <Start encoding val FStar.Math.Lemmas.lt_multiple_is_equal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lt_multiple_is_equal (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lt_multiple_is_equal@tok () Term)

; </end encoding val FStar.Math.Lemmas.lt_multiple_is_equal>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_plus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_plus>


; <Start encoding val FStar.Math.Lemmas.lemma_div_plus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_plus (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_plus@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_plus>


; <Start encoding val FStar.Math.Lemmas.lemma_div_mod_plus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_mod_plus (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_mod_plus@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_mod_plus>


; <Start encoding val FStar.Math.Lemmas.add_div_mod_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.add_div_mod_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.add_div_mod_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.add_div_mod_1>


; <Start encoding val FStar.Math.Lemmas.sub_div_mod_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.sub_div_mod_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.sub_div_mod_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.sub_div_mod_1>


; <Start encoding val FStar.Math.Lemmas.cancel_mul_div>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.cancel_mul_div (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.cancel_mul_div@tok () Term)

; </end encoding val FStar.Math.Lemmas.cancel_mul_div>


; <Start encoding val FStar.Math.Lemmas.cancel_mul_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.cancel_mul_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.cancel_mul_mod@tok () Term)

; </end encoding val FStar.Math.Lemmas.cancel_mul_mod>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_add_distr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_add_distr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_add_distr@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_add_distr>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_sub_distr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_distr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_distr@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_sub_distr>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_sub_0>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_0 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_0@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_sub_0>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_sub_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_sub_1>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_mul_distr_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mul_distr_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mul_distr_l@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_mul_distr_l>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_mul_distr_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mul_distr_r (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mul_distr_r@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_mul_distr_r>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_injective (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_injective@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_injective>


; <Start encoding val FStar.Math.Lemmas.lemma_mul_sub_distr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_sub_distr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_sub_distr@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mul_sub_distr>


; <Start encoding val FStar.Math.Lemmas.lemma_div_exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_exact (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_exact@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_exact>


; <Start encoding val FStar.Math.Lemmas.div_exact_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.div_exact_r (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.div_exact_r@tok () Term)

; </end encoding val FStar.Math.Lemmas.div_exact_r>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_spec (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_spec@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_spec>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_spec2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_spec2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_spec2@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_spec2>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_plus_distr_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_distr_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_distr_l@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_plus_distr_l>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_plus_distr_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_distr_r (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_distr_r@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_plus_distr_r>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mod (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mod@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_mod>


; <Start encoding val FStar.Math.Lemmas.euclidean_division_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.euclidean_division_definition (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.euclidean_division_definition@tok () Term)

; </end encoding val FStar.Math.Lemmas.euclidean_division_definition>


; <Start encoding val FStar.Math.Lemmas.modulo_range_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_range_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_range_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_range_lemma>


; <Start encoding val FStar.Math.Lemmas.small_modulo_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_modulo_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_modulo_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_modulo_lemma_1>


; <Start encoding val FStar.Math.Lemmas.small_modulo_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_modulo_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_modulo_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_modulo_lemma_2>


; <Start encoding val FStar.Math.Lemmas.small_division_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_division_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_division_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_division_lemma_1>


; <Start encoding val FStar.Math.Lemmas.small_division_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_division_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_division_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_division_lemma_2>


; <Start encoding val FStar.Math.Lemmas.multiplication_order_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.multiplication_order_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.multiplication_order_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.multiplication_order_lemma>


; <Start encoding val FStar.Math.Lemmas.division_propriety>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_propriety (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_propriety@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_propriety>


; <Start encoding val FStar.Math.Lemmas.division_definition_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_definition_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_definition_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_definition_lemma_1>


; <Start encoding val FStar.Math.Lemmas.division_definition_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_definition_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_definition_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_definition_lemma_2>


; <Start encoding val FStar.Math.Lemmas.division_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_definition (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_definition@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_definition>


; <Start encoding val FStar.Math.Lemmas.multiple_division_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.multiple_division_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.multiple_division_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.multiple_division_lemma>


; <Start encoding val FStar.Math.Lemmas.multiple_modulo_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.multiple_modulo_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.multiple_modulo_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.multiple_modulo_lemma>


; <Start encoding val FStar.Math.Lemmas.division_addition_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_addition_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_addition_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_addition_lemma>


; <Start encoding val FStar.Math.Lemmas.modulo_distributivity>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_distributivity (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_distributivity@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_distributivity>


; <Start encoding val FStar.Math.Lemmas.lemma_div_le>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_le (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_le@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_le>


; <Start encoding val FStar.Math.Lemmas.division_sub_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_sub_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_sub_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_sub_lemma>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_plus_mul_distr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_mul_distr (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_mul_distr@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_plus_mul_distr>


; <Start encoding val FStar.Math.Lemmas.modulo_addition_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_addition_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_addition_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_addition_lemma>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_sub>


; <Start encoding val FStar.Math.Lemmas.mod_mult_exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mod_mult_exact (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mod_mult_exact@tok () Term)

; </end encoding val FStar.Math.Lemmas.mod_mult_exact>


; <Start encoding val FStar.Math.Lemmas.mod_mul_div_exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mod_mul_div_exact (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mod_mul_div_exact@tok () Term)

; </end encoding val FStar.Math.Lemmas.mod_mul_div_exact>


; <Start encoding val FStar.Math.Lemmas.mod_pow2_div2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mod_pow2_div2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mod_pow2_div2@tok () Term)

; </end encoding val FStar.Math.Lemmas.mod_pow2_div2>


; <Start encoding val FStar.Math.Lemmas.division_multiplication_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_multiplication_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_multiplication_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_multiplication_lemma>


; <Start encoding val FStar.Math.Lemmas.modulo_scale_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_scale_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_scale_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_scale_lemma>


; <Start encoding val FStar.Math.Lemmas.lemma_mul_pos_pos_is_pos>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_pos_pos_is_pos (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_pos_pos_is_pos@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mul_pos_pos_is_pos>


; <Start encoding val FStar.Math.Lemmas.lemma_mul_nat_pos_is_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_nat_pos_is_nat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_nat_pos_is_nat@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mul_nat_pos_is_nat>


; <Start encoding val FStar.Math.Lemmas.modulo_division_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_division_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_division_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_division_lemma>


; <Start encoding val FStar.Math.Lemmas.modulo_modulo_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_modulo_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_modulo_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_modulo_lemma>


; <Start encoding val FStar.Math.Lemmas.pow2_multiplication_division_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_division_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_division_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_multiplication_division_lemma_1>


; <Start encoding val FStar.Math.Lemmas.pow2_multiplication_division_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_division_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_division_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_multiplication_division_lemma_2>


; <Start encoding val FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1>


; <Start encoding val FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2>


; <Start encoding val FStar.Math.Lemmas.pow2_modulo_division_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_division_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_division_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_modulo_division_lemma_1>


; <Start encoding val FStar.Math.Lemmas.pow2_modulo_division_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_division_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_division_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_modulo_division_lemma_2>


; <Start encoding val FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1>


; <Start encoding val FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2>


; <Start encoding val FStar.Math.Lemmas.modulo_add>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_add (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_add@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_add>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_twice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_twice (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_twice@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_twice>


; <Start encoding val FStar.Math.Lemmas.modulo_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_sub (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_sub@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_sub>


; <Start encoding val FStar.Math.Lemmas.mod_add_both>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mod_add_both (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mod_add_both@tok () Term)

; </end encoding val FStar.Math.Lemmas.mod_add_both>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_plus_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_injective (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_injective@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_plus_injective>


; <Start encoding val FStar.Math.Lemmas.modulo_sub_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_sub_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_sub_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_sub_lemma>


; End Externals for interface FStar.Math.Lemmas


; Externals for interface FStar.BitVector


; <Start encoding let bv_t>

(declare-fun FStar.BitVector.bv_t (Term) Term)
(declare-fun Tm_arrow_9974df5c311cfcfa7100bc7bef095e1e () Term)
(declare-fun FStar.BitVector.bv_t@tok () Term)
(declare-fun Tm_refine_e2d5d62a90ceed8a6faf9d20615f4e1e (Term) Term)

; </end encoding let bv_t>


; <Start encoding let zero_vec>

(declare-fun FStar.BitVector.zero_vec (Term) Term)
(declare-fun Tm_arrow_b6d52a9c4babaef5c45b062eb8723782 () Term)
(declare-fun FStar.BitVector.zero_vec@tok () Term)

; </end encoding let zero_vec>


; <Start encoding let elem_vec>


(declare-fun FStar.BitVector.elem_vec (Term Term) Term)

(declare-fun Tm_arrow_6880b3a4da9e8c38f1dbaa400eb50d7d () Term)
(declare-fun FStar.BitVector.elem_vec@tok () Term)


; </end encoding let elem_vec>


; <Start encoding let ones_vec>

(declare-fun FStar.BitVector.ones_vec (Term) Term)

(declare-fun FStar.BitVector.ones_vec@tok () Term)

; </end encoding let ones_vec>


; <Start encoding let rec logand_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BitVector.logand_vec.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BitVector.logand_vec.fuel_instrumented_token () Term)
(declare-fun FStar.BitVector.logand_vec (Term Term Term) Term)
(declare-fun FStar.BitVector.logand_vec@tok () Term)
(declare-fun Tm_arrow_d5001f682a0789c7aa8e67d06058b034 () Term)

; </end encoding let rec logand_vec>


; <Start encoding val FStar.BitVector.logand_vec_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.logand_vec_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.logand_vec_definition@tok () Term)


; </end encoding val FStar.BitVector.logand_vec_definition>


; <Start encoding let rec logxor_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BitVector.logxor_vec.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BitVector.logxor_vec.fuel_instrumented_token () Term)
(declare-fun FStar.BitVector.logxor_vec (Term Term Term) Term)
(declare-fun FStar.BitVector.logxor_vec@tok () Term)


; </end encoding let rec logxor_vec>


; <Start encoding val FStar.BitVector.logxor_vec_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.logxor_vec_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.logxor_vec_definition@tok () Term)


; </end encoding val FStar.BitVector.logxor_vec_definition>


; <Start encoding let rec logor_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BitVector.logor_vec.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BitVector.logor_vec.fuel_instrumented_token () Term)
(declare-fun FStar.BitVector.logor_vec (Term Term Term) Term)
(declare-fun FStar.BitVector.logor_vec@tok () Term)


; </end encoding let rec logor_vec>


; <Start encoding val FStar.BitVector.logor_vec_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.logor_vec_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.logor_vec_definition@tok () Term)


; </end encoding val FStar.BitVector.logor_vec_definition>


; <Start encoding let rec lognot_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BitVector.lognot_vec.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BitVector.lognot_vec.fuel_instrumented_token () Term)
(declare-fun FStar.BitVector.lognot_vec (Term Term) Term)
(declare-fun FStar.BitVector.lognot_vec@tok () Term)
(declare-fun Tm_arrow_190e27813ba14c0d36577dc3d47778da () Term)

; </end encoding let rec lognot_vec>


; <Start encoding val FStar.BitVector.lognot_vec_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.lognot_vec_definition (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.lognot_vec_definition@tok () Term)


; </end encoding val FStar.BitVector.lognot_vec_definition>


; <Start encoding val FStar.BitVector.lemma_xor_bounded>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.lemma_xor_bounded (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.lemma_xor_bounded@tok () Term)

; </end encoding val FStar.BitVector.lemma_xor_bounded>


; <Start encoding let is_subset_vec>

(declare-fun FStar.BitVector.is_subset_vec (Term Term Term) Term)
(declare-fun Tm_arrow_b51a0c80adeae3f31b1215853bb34fe1 () Term)
(declare-fun FStar.BitVector.is_subset_vec@tok () Term)

; </end encoding let is_subset_vec>


; <Start encoding let is_superset_vec>

(declare-fun FStar.BitVector.is_superset_vec (Term Term Term) Term)

(declare-fun FStar.BitVector.is_superset_vec@tok () Term)

; </end encoding let is_superset_vec>


; <Start encoding val FStar.BitVector.lemma_slice_subset_vec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.lemma_slice_subset_vec (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.lemma_slice_subset_vec@tok () Term)

; </end encoding val FStar.BitVector.lemma_slice_subset_vec>


; <Start encoding val FStar.BitVector.lemma_slice_superset_vec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.lemma_slice_superset_vec (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.lemma_slice_superset_vec@tok () Term)

; </end encoding val FStar.BitVector.lemma_slice_superset_vec>


; <Start encoding let shift_left_vec>

(declare-fun FStar.BitVector.shift_left_vec (Term Term Term) Term)
(declare-fun Tm_arrow_ccbebd343bd3a7caba5f263c2ba5f3be () Term)
(declare-fun FStar.BitVector.shift_left_vec@tok () Term)

; </end encoding let shift_left_vec>


; <Start encoding val FStar.BitVector.shift_left_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_left_vec_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_left_vec_lemma_1@tok () Term)
(declare-fun Tm_refine_6ccf0869e6825997ab860bb25791c11f (Term Term) Term)

; </end encoding val FStar.BitVector.shift_left_vec_lemma_1>


; <Start encoding val FStar.BitVector.shift_left_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_left_vec_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_left_vec_lemma_2@tok () Term)
(declare-fun Tm_refine_e8e1ad4b2203cd724d5b8b2dba0a5826 (Term Term) Term)

; </end encoding val FStar.BitVector.shift_left_vec_lemma_2>


; <Start encoding let shift_right_vec>

(declare-fun FStar.BitVector.shift_right_vec (Term Term Term) Term)

(declare-fun FStar.BitVector.shift_right_vec@tok () Term)

; </end encoding let shift_right_vec>


; <Start encoding val FStar.BitVector.shift_right_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_right_vec_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_right_vec_lemma_1@tok () Term)
(declare-fun Tm_refine_34425c23b534b8a294f8f063dd9faa4b (Term Term) Term)

; </end encoding val FStar.BitVector.shift_right_vec_lemma_1>


; <Start encoding val FStar.BitVector.shift_right_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_right_vec_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_right_vec_lemma_2@tok () Term)
(declare-fun Tm_refine_c0ec47abc53a2509e744dad22ccf8191 (Term Term) Term)

; </end encoding val FStar.BitVector.shift_right_vec_lemma_2>


; <Start encoding let shift_arithmetic_right_vec>

(declare-fun FStar.BitVector.shift_arithmetic_right_vec (Term Term Term) Term)

(declare-fun FStar.BitVector.shift_arithmetic_right_vec@tok () Term)

; </end encoding let shift_arithmetic_right_vec>


; <Start encoding val FStar.BitVector.shift_arithmetic_right_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_arithmetic_right_vec_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_arithmetic_right_vec_lemma_1@tok () Term)


; </end encoding val FStar.BitVector.shift_arithmetic_right_vec_lemma_1>


; <Start encoding val FStar.BitVector.shift_arithmetic_right_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_arithmetic_right_vec_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_arithmetic_right_vec_lemma_2@tok () Term)


; </end encoding val FStar.BitVector.shift_arithmetic_right_vec_lemma_2>


; End Externals for interface FStar.BitVector


; Externals for interface FStar.UInt


; <Start encoding val FStar.UInt.pow2_values>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.pow2_values (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.pow2_values@tok () Term)

; </end encoding val FStar.UInt.pow2_values>


; <Start encoding let max_int>

(declare-fun FStar.UInt.max_int (Term) Term)
(declare-fun Tm_arrow_fc34ca66de2f262c06145b17fb7ed6cb () Term)
(declare-fun FStar.UInt.max_int@tok () Term)

; </end encoding let max_int>


; <Start encoding let min_int>

(declare-fun FStar.UInt.min_int (Term) Term)

(declare-fun FStar.UInt.min_int@tok () Term)

; </end encoding let min_int>


; <Start encoding let fits>

(declare-fun FStar.UInt.fits (Term Term) Term)
(declare-fun Tm_arrow_dea48782e508c14fa98dcf9716548804 () Term)
(declare-fun FStar.UInt.fits@tok () Term)

; </end encoding let fits>


; <Start encoding let size>

(declare-fun FStar.UInt.size (Term Term) Term)
(declare-fun Tm_arrow_f4ec8f8bfe492e31741a15356024bbaa () Term)
(declare-fun FStar.UInt.size@tok () Term)

; </end encoding let size>


; <Start encoding let uint_t>

(declare-fun FStar.UInt.uint_t (Term) Term)

(declare-fun FStar.UInt.uint_t@tok () Term)
(declare-fun Tm_refine_f13070840248fced9d9d60d77bdae3ec (Term) Term)

; </end encoding let uint_t>


; <Start encoding let zero>

(declare-fun FStar.UInt.zero (Term) Term)
(declare-fun Tm_arrow_f1dd811328ea3b27fc410fa0f52880f7 () Term)
(declare-fun FStar.UInt.zero@tok () Term)

; </end encoding let zero>


; <Start encoding let pow2_n>


(declare-fun FStar.UInt.pow2_n (Term Term) Term)

(declare-fun Tm_arrow_8d41edd1e7b665db26512e6c6d9ece64 () Term)
(declare-fun FStar.UInt.pow2_n@tok () Term)


; </end encoding let pow2_n>


; <Start encoding let one>

(declare-fun FStar.UInt.one (Term) Term)
(declare-fun Tm_arrow_89d370fa478cfd1f85a8759662ce0390 () Term)
(declare-fun FStar.UInt.one@tok () Term)

; </end encoding let one>


; <Start encoding let ones>

(declare-fun FStar.UInt.ones (Term) Term)

(declare-fun FStar.UInt.ones@tok () Term)

; </end encoding let ones>


; <Start encoding let incr>

(declare-fun FStar.UInt.incr (Term Term) Term)
(declare-fun Tm_refine_22e8629663f0cb1c9de86e57e73778e3 (Term) Term)
(declare-fun Tm_arrow_e8e04e4a1022a7343e76760b76915c9e () Term)
(declare-fun FStar.UInt.incr@tok () Term)


; </end encoding let incr>


; <Start encoding let decr>

(declare-fun FStar.UInt.decr (Term Term) Term)

(declare-fun Tm_arrow_2a167fb2d2f3f00bff7b73f048db0e83 () Term)
(declare-fun FStar.UInt.decr@tok () Term)


; </end encoding let decr>


; <Start encoding val FStar.UInt.incr_underspec>

(declare-fun FStar.UInt.incr_underspec (Term Term) Term)
(declare-fun Tm_refine_6a367e92d5b1ca10009a43bd430dd796 (Term Term) Term)
(declare-fun Tm_arrow_fb114bd2e9239af1296268eb30490ff7 () Term)
(declare-fun FStar.UInt.incr_underspec@tok () Term)


; </end encoding val FStar.UInt.incr_underspec>


; <Start encoding val FStar.UInt.decr_underspec>

(declare-fun FStar.UInt.decr_underspec (Term Term) Term)
(declare-fun Tm_refine_fa3c796c533e86dc9f3e3ffc647718f6 (Term Term) Term)
(declare-fun Tm_arrow_f1853f30408c6d0beb7795897a3ab5bc () Term)
(declare-fun FStar.UInt.decr_underspec@tok () Term)


; </end encoding val FStar.UInt.decr_underspec>


; <Start encoding let incr_mod>

(declare-fun FStar.UInt.incr_mod (Term Term) Term)
(declare-fun Tm_arrow_a565732dbe0b43ae2274b1f24341f11b () Term)
(declare-fun FStar.UInt.incr_mod@tok () Term)

; </end encoding let incr_mod>


; <Start encoding let decr_mod>

(declare-fun FStar.UInt.decr_mod (Term Term) Term)

(declare-fun FStar.UInt.decr_mod@tok () Term)

; </end encoding let decr_mod>


; <Start encoding let add>

(declare-fun FStar.UInt.add (Term Term Term) Term)

(declare-fun Tm_arrow_ea9f73d61c207ec4508af75e87c5ca13 () Term)
(declare-fun FStar.UInt.add@tok () Term)


; </end encoding let add>


; <Start encoding val FStar.UInt.add_underspec>

(declare-fun FStar.UInt.add_underspec (Term Term Term) Term)
(declare-fun Tm_refine_c7a9b50c1b5983f8171c03368a208e31 (Term Term Term) Term)
(declare-fun Tm_arrow_880847ba34dd402fb6567384684864a6 () Term)
(declare-fun FStar.UInt.add_underspec@tok () Term)


; </end encoding val FStar.UInt.add_underspec>


; <Start encoding let add_mod>

(declare-fun FStar.UInt.add_mod (Term Term Term) Term)
(declare-fun Tm_arrow_2f3c6a962eb1cbbfd959311c0f20b277 () Term)
(declare-fun FStar.UInt.add_mod@tok () Term)

; </end encoding let add_mod>


; <Start encoding let sub>

(declare-fun FStar.UInt.sub (Term Term Term) Term)

(declare-fun Tm_arrow_974b47e4388c1a4055fe210bb6a11687 () Term)
(declare-fun FStar.UInt.sub@tok () Term)


; </end encoding let sub>


; <Start encoding val FStar.UInt.sub_underspec>

(declare-fun FStar.UInt.sub_underspec (Term Term Term) Term)
(declare-fun Tm_refine_109ae46bb20ad559af297346ec64ae4e (Term Term Term) Term)
(declare-fun Tm_arrow_1479a03f646b965be1bfedb2ee360f95 () Term)
(declare-fun FStar.UInt.sub_underspec@tok () Term)


; </end encoding val FStar.UInt.sub_underspec>


; <Start encoding let sub_mod>

(declare-fun FStar.UInt.sub_mod (Term Term Term) Term)

(declare-fun FStar.UInt.sub_mod@tok () Term)

; </end encoding let sub_mod>


; <Start encoding let mul>

(declare-fun FStar.UInt.mul (Term Term Term) Term)

(declare-fun Tm_arrow_45e02637bbbba15e6760300e4a62b58d () Term)
(declare-fun FStar.UInt.mul@tok () Term)


; </end encoding let mul>


; <Start encoding val FStar.UInt.mul_underspec>

(declare-fun FStar.UInt.mul_underspec (Term Term Term) Term)
(declare-fun Tm_refine_ea207e5cce50229e615af011837e59a5 (Term Term Term) Term)
(declare-fun Tm_arrow_1f5fca1fff06689d84a49261819dc580 () Term)
(declare-fun FStar.UInt.mul_underspec@tok () Term)


; </end encoding val FStar.UInt.mul_underspec>


; <Start encoding let mul_mod>

(declare-fun FStar.UInt.mul_mod (Term Term Term) Term)

(declare-fun FStar.UInt.mul_mod@tok () Term)

; </end encoding let mul_mod>


; <Start encoding val FStar.UInt.lt_square_div_lt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lt_square_div_lt (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lt_square_div_lt@tok () Term)

; </end encoding val FStar.UInt.lt_square_div_lt>


; <Skipped #push-options "--fuel 0 --ifuel 0"/>


; <Start encoding let mul_div>

(declare-fun FStar.UInt.mul_div (Term Term Term) Term)

(declare-fun FStar.UInt.mul_div@tok () Term)

; </end encoding let mul_div>


; <Skipped #pop-options/>


; <Start encoding let div>

(declare-fun Tm_refine_0722e9115d2a1be8d90527397d01011c (Term) Term)
(declare-fun FStar.UInt.div (Term Term Term) Term)

(declare-fun Tm_refine_e49d79feeb1e96b29b0f01b06f8dac23 (Term Term Term) Term)
(declare-fun Tm_arrow_6ebc7a9e6ff34015952a4168421980bf () Term)
(declare-fun FStar.UInt.div@tok () Term)



; </end encoding let div>


; <Start encoding val FStar.UInt.div_underspec>


(declare-fun FStar.UInt.div_underspec (Term Term Term) Term)

(declare-fun Tm_refine_fafbb762e9b0100ba27aa174122ddaa3 (Term Term Term) Term)
(declare-fun Tm_arrow_ed1485a952a27dc4770fb0182ab26e79 () Term)
(declare-fun FStar.UInt.div_underspec@tok () Term)


; </end encoding val FStar.UInt.div_underspec>


; <Start encoding val FStar.UInt.div_size>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.div_size (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.div_size@tok () Term)

; </end encoding val FStar.UInt.div_size>


; <Start encoding let udiv>


(declare-fun FStar.UInt.udiv (Term Term Term) Term)


(declare-fun Tm_arrow_2b6a409bd2eeb88753b2b6fe89b0d0a9 () Term)
(declare-fun FStar.UInt.udiv@tok () Term)



; </end encoding let udiv>


; <Start encoding let mod>


(declare-fun FStar.UInt.mod (Term Term Term) Term)

(declare-fun Tm_arrow_6ae50616ce0b08fd950ce0be5e711193 () Term)
(declare-fun FStar.UInt.mod@tok () Term)


; </end encoding let mod>


; <Start encoding let eq>

(declare-fun FStar.UInt.eq (Term Term Term) Term)
(declare-fun Tm_arrow_ed25d9271888f66e143c5c59e11fb3a9 () Term)
(declare-fun FStar.UInt.eq@tok () Term)

; </end encoding let eq>


; <Start encoding let gt>

(declare-fun FStar.UInt.gt (Term Term Term) Term)

(declare-fun FStar.UInt.gt@tok () Term)

; </end encoding let gt>


; <Start encoding let gte>

(declare-fun FStar.UInt.gte (Term Term Term) Term)

(declare-fun FStar.UInt.gte@tok () Term)

; </end encoding let gte>


; <Start encoding let lt>

(declare-fun FStar.UInt.lt (Term Term Term) Term)

(declare-fun FStar.UInt.lt@tok () Term)

; </end encoding let lt>


; <Start encoding let lte>

(declare-fun FStar.UInt.lte (Term Term Term) Term)

(declare-fun FStar.UInt.lte@tok () Term)

; </end encoding let lte>


; <Start encoding let to_uint_t>

(declare-fun FStar.UInt.to_uint_t (Term Term) Term)
(declare-fun Tm_arrow_d5257ef463a03617bca88873b50f4e96 () Term)
(declare-fun FStar.UInt.to_uint_t@tok () Term)

; </end encoding let to_uint_t>


; <Start encoding let rec to_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.UInt.to_vec.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.UInt.to_vec.fuel_instrumented_token () Term)
(declare-fun FStar.UInt.to_vec (Term Term) Term)
(declare-fun FStar.UInt.to_vec@tok () Term)
(declare-fun Tm_arrow_50c9ac04c4da2f9a3a1512bf3cfd180e () Term)

; </end encoding let rec to_vec>


; <Start encoding let rec from_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.UInt.from_vec.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.UInt.from_vec.fuel_instrumented_token () Term)
(declare-fun FStar.UInt.from_vec (Term Term) Term)
(declare-fun FStar.UInt.from_vec@tok () Term)
(declare-fun Tm_arrow_3a21f80bb386ebae30b30ec5363d47ef () Term)

; </end encoding let rec from_vec>


; <Start encoding val FStar.UInt.to_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.to_vec_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.to_vec_lemma_1@tok () Term)

; </end encoding val FStar.UInt.to_vec_lemma_1>


; <Start encoding val FStar.UInt.to_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.to_vec_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.to_vec_lemma_2@tok () Term)

; </end encoding val FStar.UInt.to_vec_lemma_2>


; <Start encoding val FStar.UInt.inverse_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.inverse_aux (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.inverse_aux@tok () Term)


; </end encoding val FStar.UInt.inverse_aux>


; <Start encoding val FStar.UInt.inverse_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.inverse_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.inverse_vec_lemma@tok () Term)

; </end encoding val FStar.UInt.inverse_vec_lemma>


; <Start encoding val FStar.UInt.inverse_num_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.inverse_num_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.inverse_num_lemma@tok () Term)

; </end encoding val FStar.UInt.inverse_num_lemma>


; <Start encoding val FStar.UInt.from_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.from_vec_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.from_vec_lemma_1@tok () Term)

; </end encoding val FStar.UInt.from_vec_lemma_1>


; <Start encoding val FStar.UInt.from_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.from_vec_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.from_vec_lemma_2@tok () Term)

; </end encoding val FStar.UInt.from_vec_lemma_2>


; <Start encoding val FStar.UInt.from_vec_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.from_vec_aux (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.from_vec_aux@tok () Term)

; </end encoding val FStar.UInt.from_vec_aux>


; <Start encoding val FStar.UInt.seq_slice_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.seq_slice_lemma (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.seq_slice_lemma@tok () Term)

; </end encoding val FStar.UInt.seq_slice_lemma>


; <Start encoding val FStar.UInt.from_vec_propriety>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.from_vec_propriety (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.from_vec_propriety@tok () Term)

; </end encoding val FStar.UInt.from_vec_propriety>


; <Start encoding val FStar.UInt.append_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.append_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.append_lemma@tok () Term)

; </end encoding val FStar.UInt.append_lemma>


; <Start encoding val FStar.UInt.slice_left_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.slice_left_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.slice_left_lemma@tok () Term)

; </end encoding val FStar.UInt.slice_left_lemma>


; <Start encoding val FStar.UInt.slice_right_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.slice_right_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.slice_right_lemma@tok () Term)

; </end encoding val FStar.UInt.slice_right_lemma>


; <Start encoding val FStar.UInt.zero_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.zero_to_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.zero_to_vec_lemma@tok () Term)


; </end encoding val FStar.UInt.zero_to_vec_lemma>


; <Start encoding val FStar.UInt.zero_from_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.zero_from_vec_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.zero_from_vec_lemma@tok () Term)

; </end encoding val FStar.UInt.zero_from_vec_lemma>


; <Start encoding val FStar.UInt.one_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.one_to_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.one_to_vec_lemma@tok () Term)


; </end encoding val FStar.UInt.one_to_vec_lemma>


; <Start encoding val FStar.UInt.pow2_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.pow2_to_vec_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.pow2_to_vec_lemma@tok () Term)



; </end encoding val FStar.UInt.pow2_to_vec_lemma>


; <Start encoding val FStar.UInt.pow2_from_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.pow2_from_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.pow2_from_vec_lemma@tok () Term)


; </end encoding val FStar.UInt.pow2_from_vec_lemma>


; <Start encoding val FStar.UInt.ones_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.ones_to_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.ones_to_vec_lemma@tok () Term)


; </end encoding val FStar.UInt.ones_to_vec_lemma>


; <Start encoding val FStar.UInt.ones_from_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.ones_from_vec_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.ones_from_vec_lemma@tok () Term)

; </end encoding val FStar.UInt.ones_from_vec_lemma>


; <Start encoding let nth>


(declare-fun FStar.UInt.nth (Term Term Term) Term)

(declare-fun Tm_arrow_3fc70c4ae2acbd923fa94b8473fca72c () Term)
(declare-fun FStar.UInt.nth@tok () Term)


; </end encoding let nth>


; <Start encoding val FStar.UInt.nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.nth_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.nth_lemma@tok () Term)

; </end encoding val FStar.UInt.nth_lemma>


; <Start encoding val FStar.UInt.zero_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.zero_nth_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.zero_nth_lemma@tok () Term)


; </end encoding val FStar.UInt.zero_nth_lemma>


; <Start encoding val FStar.UInt.pow2_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.pow2_nth_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.pow2_nth_lemma@tok () Term)



; </end encoding val FStar.UInt.pow2_nth_lemma>


; <Start encoding val FStar.UInt.one_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.one_nth_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.one_nth_lemma@tok () Term)


; </end encoding val FStar.UInt.one_nth_lemma>


; <Start encoding val FStar.UInt.ones_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.ones_nth_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.ones_nth_lemma@tok () Term)


; </end encoding val FStar.UInt.ones_nth_lemma>


; <Start encoding let logand>

(declare-fun FStar.UInt.logand (Term Term Term) Term)
(declare-fun Tm_arrow_f4d897275479f32ec94ab14cea117895 () Term)
(declare-fun FStar.UInt.logand@tok () Term)

; </end encoding let logand>


; <Start encoding let logxor>

(declare-fun FStar.UInt.logxor (Term Term Term) Term)

(declare-fun FStar.UInt.logxor@tok () Term)

; </end encoding let logxor>


; <Start encoding let logor>

(declare-fun FStar.UInt.logor (Term Term Term) Term)

(declare-fun FStar.UInt.logor@tok () Term)

; </end encoding let logor>


; <Start encoding let lognot>

(declare-fun FStar.UInt.lognot (Term Term) Term)
(declare-fun Tm_arrow_7e93208f7d6c7796851172614443345f () Term)
(declare-fun FStar.UInt.lognot@tok () Term)

; </end encoding let lognot>


; <Start encoding val FStar.UInt.logand_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_definition@tok () Term)


; </end encoding val FStar.UInt.logand_definition>


; <Start encoding val FStar.UInt.logxor_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_definition@tok () Term)


; </end encoding val FStar.UInt.logxor_definition>


; <Start encoding val FStar.UInt.logor_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_definition@tok () Term)


; </end encoding val FStar.UInt.logor_definition>


; <Start encoding val FStar.UInt.lognot_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lognot_definition (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lognot_definition@tok () Term)


; </end encoding val FStar.UInt.lognot_definition>


; <Start encoding let minus>

(declare-fun FStar.UInt.minus (Term Term) Term)

(declare-fun FStar.UInt.minus@tok () Term)

; </end encoding let minus>


; <Start encoding val FStar.UInt.logand_commutative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_commutative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_commutative@tok () Term)

; </end encoding val FStar.UInt.logand_commutative>


; <Start encoding val FStar.UInt.logand_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_associative (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_associative@tok () Term)

; </end encoding val FStar.UInt.logand_associative>


; <Start encoding val FStar.UInt.logand_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_self@tok () Term)

; </end encoding val FStar.UInt.logand_self>


; <Start encoding val FStar.UInt.logand_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_lemma_1@tok () Term)

; </end encoding val FStar.UInt.logand_lemma_1>


; <Start encoding val FStar.UInt.logand_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_lemma_2@tok () Term)

; </end encoding val FStar.UInt.logand_lemma_2>


; <Start encoding val FStar.UInt.subset_vec_le_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.subset_vec_le_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.subset_vec_le_lemma@tok () Term)

; </end encoding val FStar.UInt.subset_vec_le_lemma>


; <Start encoding val FStar.UInt.logand_le>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_le (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_le@tok () Term)

; </end encoding val FStar.UInt.logand_le>


; <Start encoding val FStar.UInt.logxor_commutative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_commutative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_commutative@tok () Term)

; </end encoding val FStar.UInt.logxor_commutative>


; <Start encoding val FStar.UInt.logxor_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_associative (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_associative@tok () Term)

; </end encoding val FStar.UInt.logxor_associative>


; <Start encoding val FStar.UInt.logxor_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_self@tok () Term)

; </end encoding val FStar.UInt.logxor_self>


; <Start encoding val FStar.UInt.logxor_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_lemma_1@tok () Term)

; </end encoding val FStar.UInt.logxor_lemma_1>


; <Start encoding val FStar.UInt.logxor_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_lemma_2@tok () Term)

; </end encoding val FStar.UInt.logxor_lemma_2>


; <Start encoding let xor>

(declare-fun FStar.UInt.xor (Term Term) Term)
(declare-fun Tm_arrow_a41b9b98d4288401e09e5c3b51ccc4f5 () Term)
(declare-fun FStar.UInt.xor@tok () Term)

; </end encoding let xor>


; <Start encoding val FStar.UInt.xor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.xor_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.xor_lemma@tok () Term)

; </end encoding val FStar.UInt.xor_lemma>


; <Start encoding val FStar.UInt.logxor_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_inv (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_inv@tok () Term)

; </end encoding val FStar.UInt.logxor_inv>


; <Start encoding val FStar.UInt.logxor_neq_nonzero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_neq_nonzero (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_neq_nonzero@tok () Term)

; </end encoding val FStar.UInt.logxor_neq_nonzero>


; <Start encoding val FStar.UInt.logor_commutative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_commutative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_commutative@tok () Term)

; </end encoding val FStar.UInt.logor_commutative>


; <Start encoding val FStar.UInt.logor_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_associative (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_associative@tok () Term)

; </end encoding val FStar.UInt.logor_associative>


; <Start encoding val FStar.UInt.logor_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_self@tok () Term)

; </end encoding val FStar.UInt.logor_self>


; <Start encoding val FStar.UInt.logor_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_lemma_1@tok () Term)

; </end encoding val FStar.UInt.logor_lemma_1>


; <Start encoding val FStar.UInt.logor_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_lemma_2@tok () Term)

; </end encoding val FStar.UInt.logor_lemma_2>


; <Start encoding val FStar.UInt.superset_vec_ge_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.superset_vec_ge_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.superset_vec_ge_lemma@tok () Term)

; </end encoding val FStar.UInt.superset_vec_ge_lemma>


; <Start encoding val FStar.UInt.logor_ge>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_ge (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_ge@tok () Term)

; </end encoding val FStar.UInt.logor_ge>


; <Start encoding val FStar.UInt.lognot_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lognot_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lognot_self@tok () Term)

; </end encoding val FStar.UInt.lognot_self>


; <Start encoding val FStar.UInt.lognot_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lognot_lemma_1 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lognot_lemma_1@tok () Term)

; </end encoding val FStar.UInt.lognot_lemma_1>


; <Start encoding val FStar.UInt.index_to_vec_ones>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.index_to_vec_ones (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.index_to_vec_ones@tok () Term)
(declare-fun Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d (Term) Term)


; </end encoding val FStar.UInt.index_to_vec_ones>


; <Start encoding val FStar.UInt.logor_disjoint>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_disjoint (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_disjoint@tok () Term)

; </end encoding val FStar.UInt.logor_disjoint>


; <Start encoding val FStar.UInt.logand_mask>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_mask (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_mask@tok () Term)

; </end encoding val FStar.UInt.logand_mask>


; <Start encoding let shift_left>

(declare-fun FStar.UInt.shift_left (Term Term Term) Term)
(declare-fun Tm_arrow_88bed77db23726a0c4c74cf2019c096b () Term)
(declare-fun FStar.UInt.shift_left@tok () Term)

; </end encoding let shift_left>


; <Start encoding let shift_right>

(declare-fun FStar.UInt.shift_right (Term Term Term) Term)

(declare-fun FStar.UInt.shift_right@tok () Term)

; </end encoding let shift_right>


; <Start encoding val FStar.UInt.shift_left_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_lemma_1@tok () Term)


; </end encoding val FStar.UInt.shift_left_lemma_1>


; <Start encoding val FStar.UInt.shift_left_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_lemma_2@tok () Term)


; </end encoding val FStar.UInt.shift_left_lemma_2>


; <Start encoding val FStar.UInt.shift_right_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_lemma_1@tok () Term)


; </end encoding val FStar.UInt.shift_right_lemma_1>


; <Start encoding val FStar.UInt.shift_right_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_lemma_2@tok () Term)


; </end encoding val FStar.UInt.shift_right_lemma_2>


; <Start encoding val FStar.UInt.shift_left_logand_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_logand_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_logand_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_left_logand_lemma>


; <Start encoding val FStar.UInt.shift_right_logand_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_logand_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_logand_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_right_logand_lemma>


; <Start encoding val FStar.UInt.shift_left_logxor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_logxor_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_logxor_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_left_logxor_lemma>


; <Start encoding val FStar.UInt.shift_right_logxor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_logxor_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_logxor_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_right_logxor_lemma>


; <Start encoding val FStar.UInt.shift_left_logor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_logor_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_logor_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_left_logor_lemma>


; <Start encoding val FStar.UInt.shift_right_logor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_logor_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_logor_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_right_logor_lemma>


; <Start encoding val FStar.UInt.shift_left_value_aux_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_value_aux_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_value_aux_1@tok () Term)

; </end encoding val FStar.UInt.shift_left_value_aux_1>


; <Start encoding val FStar.UInt.shift_left_value_aux_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_value_aux_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_value_aux_2@tok () Term)

; </end encoding val FStar.UInt.shift_left_value_aux_2>


; <Start encoding val FStar.UInt.shift_left_value_aux_3>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_value_aux_3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_value_aux_3@tok () Term)

; </end encoding val FStar.UInt.shift_left_value_aux_3>


; <Start encoding val FStar.UInt.shift_left_value_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_value_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_value_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_left_value_lemma>


; <Start encoding val FStar.UInt.shift_right_value_aux_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_value_aux_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_value_aux_1@tok () Term)

; </end encoding val FStar.UInt.shift_right_value_aux_1>


; <Start encoding val FStar.UInt.shift_right_value_aux_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_value_aux_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_value_aux_2@tok () Term)

; </end encoding val FStar.UInt.shift_right_value_aux_2>


; <Start encoding val FStar.UInt.shift_right_value_aux_3>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_value_aux_3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_value_aux_3@tok () Term)

; </end encoding val FStar.UInt.shift_right_value_aux_3>


; <Start encoding val FStar.UInt.shift_right_value_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_value_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_value_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_right_value_lemma>


; <Start encoding let msb>

(declare-fun FStar.UInt.msb (Term Term) Term)
(declare-fun Tm_arrow_d4ac65fa6e48f26152e66f6f5f032db4 () Term)
(declare-fun FStar.UInt.msb@tok () Term)

; </end encoding let msb>


; <Start encoding val FStar.UInt.lemma_msb_pow2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_msb_pow2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_msb_pow2@tok () Term)

; </end encoding val FStar.UInt.lemma_msb_pow2>


; <Start encoding val FStar.UInt.lemma_minus_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_minus_zero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_minus_zero@tok () Term)

; </end encoding val FStar.UInt.lemma_minus_zero>


; <Start encoding val FStar.UInt.lemma_msb_gte>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_msb_gte (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_msb_gte@tok () Term)

; </end encoding val FStar.UInt.lemma_msb_gte>


; <Start encoding val FStar.UInt.lemma_uint_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_uint_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_uint_mod@tok () Term)

; </end encoding val FStar.UInt.lemma_uint_mod>


; <Start encoding val FStar.UInt.lemma_add_sub_cancel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_add_sub_cancel (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_add_sub_cancel@tok () Term)

; </end encoding val FStar.UInt.lemma_add_sub_cancel>


; <Start encoding val FStar.UInt.lemma_mod_sub_distr_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_mod_sub_distr_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_mod_sub_distr_l@tok () Term)

; </end encoding val FStar.UInt.lemma_mod_sub_distr_l>


; <Start encoding val FStar.UInt.lemma_sub_add_cancel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_sub_add_cancel (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_sub_add_cancel@tok () Term)

; </end encoding val FStar.UInt.lemma_sub_add_cancel>


; <Start encoding let zero_extend_vec>

(declare-fun FStar.UInt.zero_extend_vec (Term Term) Term)
(declare-fun Tm_arrow_dcb1e97275faab10b7eb1bdfcfbde371 () Term)
(declare-fun FStar.UInt.zero_extend_vec@tok () Term)

; </end encoding let zero_extend_vec>


; <Start encoding let one_extend_vec>

(declare-fun FStar.UInt.one_extend_vec (Term Term) Term)

(declare-fun FStar.UInt.one_extend_vec@tok () Term)

; </end encoding let one_extend_vec>


; <Start encoding let zero_extend>

(declare-fun FStar.UInt.zero_extend (Term Term) Term)
(declare-fun Tm_arrow_8a55f1e2e0fc60c6f44b88ae88621b5f () Term)
(declare-fun FStar.UInt.zero_extend@tok () Term)

; </end encoding let zero_extend>


; <Start encoding let one_extend>

(declare-fun FStar.UInt.one_extend (Term Term) Term)

(declare-fun FStar.UInt.one_extend@tok () Term)

; </end encoding let one_extend>


; <Start encoding val FStar.UInt.lemma_zero_extend>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_zero_extend (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_zero_extend@tok () Term)
(declare-fun Tm_refine_a2362280d81dbd526f1fa3f771e8faad (Term) Term)

; </end encoding val FStar.UInt.lemma_zero_extend>


; <Start encoding val FStar.UInt.lemma_one_extend>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_one_extend (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_one_extend@tok () Term)

; </end encoding val FStar.UInt.lemma_one_extend>


; <Start encoding val FStar.UInt.lemma_lognot_zero_ext>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_zero_ext (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_zero_ext@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_zero_ext>


; <Start encoding val FStar.UInt.lemma_lognot_one_ext>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_one_ext (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_one_ext@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_one_ext>


; <Start encoding val FStar.UInt.lemma_lognot_value_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_value_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_value_mod@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_value_mod>


; <Start encoding val FStar.UInt.lemma_lognot_value_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_value_zero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_value_zero@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_value_zero>


; <Start encoding val FStar.UInt.lemma_one_mod_pow2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_one_mod_pow2 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_one_mod_pow2@tok () Term)

; </end encoding val FStar.UInt.lemma_one_mod_pow2>


; <Start encoding val FStar.UInt.lemma_lognot_value_nonzero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_value_nonzero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_value_nonzero@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_value_nonzero>


; <Start encoding val FStar.UInt.lemma_lognot_value>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_value (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_value@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_value>


; <Start encoding val FStar.UInt.lemma_minus_eq_zero_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_minus_eq_zero_sub (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_minus_eq_zero_sub@tok () Term)

; </end encoding val FStar.UInt.lemma_minus_eq_zero_sub>


; End Externals for interface FStar.UInt


; Externals for interface FStar.UInt32


; <Start encoding let n>

(declare-fun FStar.UInt32.n (Dummy_sort) Term)

; </end encoding let n>


; <Skipped #set-options "--max_fuel 0 --max_ifuel 0"/>


; <Start encoding val FStar.UInt32.t>

(declare-fun FStar.UInt32.t (Dummy_sort) Term)

; </end encoding val FStar.UInt32.t>


; <Start encoding val FStar.UInt32.v>

(declare-fun FStar.UInt32.v (Term) Term)
(declare-fun Tm_arrow_33a06d9a3ec1c77524ab958d37ae1453 () Term)
(declare-fun FStar.UInt32.v@tok () Term)

; </end encoding val FStar.UInt32.v>


; <Start encoding val FStar.UInt32.uint_to_t>

(declare-fun FStar.UInt32.uint_to_t (Term) Term)
(declare-fun Tm_refine_0ea1fba779ad5718e28476faeef94d56 (Term) Term)
(declare-fun Tm_arrow_3d414099f2a2b7ef3e11b1fc75a28674 () Term)
(declare-fun FStar.UInt32.uint_to_t@tok () Term)


; </end encoding val FStar.UInt32.uint_to_t>


; <Start encoding val FStar.UInt32.uv_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt32.uv_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt32.uv_inv@tok () Term)

; </end encoding val FStar.UInt32.uv_inv>


; <Start encoding val FStar.UInt32.vu_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt32.vu_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt32.vu_inv@tok () Term)

; </end encoding val FStar.UInt32.vu_inv>


; <Start encoding val FStar.UInt32.v_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt32.v_inj (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt32.v_inj@tok () Term)

; </end encoding val FStar.UInt32.v_inj>


; <Start encoding val FStar.UInt32.zero>

(declare-fun FStar.UInt32.zero (Dummy_sort) Term)
(declare-fun Tm_refine_7cfa0141116db910fdee890408ebbaf1 () Term)


; </end encoding val FStar.UInt32.zero>


; <Start encoding val FStar.UInt32.one>

(declare-fun FStar.UInt32.one (Dummy_sort) Term)
(declare-fun Tm_refine_d94e5152d1c8429ac781cc5558c9a3e2 () Term)


; </end encoding val FStar.UInt32.one>


; <Start encoding val FStar.UInt32.add>

(declare-fun FStar.UInt32.add (Term Term) Term)
(declare-fun Tm_refine_709aff84c75b0fff77dcbf3b529649dd (Term Term) Term)
(declare-fun Tm_arrow_5558b72197031b1efc1a0f8298859a47 () Term)
(declare-fun FStar.UInt32.add@tok () Term)


; </end encoding val FStar.UInt32.add>


; <Start encoding val FStar.UInt32.add_underspec>

(declare-fun FStar.UInt32.add_underspec (Term Term) Term)
(declare-fun Tm_refine_57eacb083aaa8f3c6200eef2872d40a9 (Term Term) Term)
(declare-fun Tm_arrow_2aa4a786718187783c350fff98c0276d () Term)
(declare-fun FStar.UInt32.add_underspec@tok () Term)


; </end encoding val FStar.UInt32.add_underspec>


; <Start encoding val FStar.UInt32.add_mod>

(declare-fun FStar.UInt32.add_mod (Term Term) Term)
(declare-fun Tm_refine_edc8fb7e909853d860d4ab445ef31337 (Term Term) Term)
(declare-fun Tm_arrow_edbd649f4b12a343efa6ef46e7961890 () Term)
(declare-fun FStar.UInt32.add_mod@tok () Term)


; </end encoding val FStar.UInt32.add_mod>


; <Start encoding val FStar.UInt32.sub>

(declare-fun FStar.UInt32.sub (Term Term) Term)
(declare-fun Tm_refine_aa4b3d268075d84252df525db1f85524 (Term Term) Term)
(declare-fun Tm_arrow_ac932fe6124478fcfd5be99d334122e8 () Term)
(declare-fun FStar.UInt32.sub@tok () Term)


; </end encoding val FStar.UInt32.sub>


; <Start encoding val FStar.UInt32.sub_underspec>

(declare-fun FStar.UInt32.sub_underspec (Term Term) Term)
(declare-fun Tm_refine_01926286fa04b785df0ea0da544f2001 (Term Term) Term)
(declare-fun Tm_arrow_a0c271942b2fe7be43f6ae297698cd0b () Term)
(declare-fun FStar.UInt32.sub_underspec@tok () Term)


; </end encoding val FStar.UInt32.sub_underspec>


; <Start encoding val FStar.UInt32.sub_mod>

(declare-fun FStar.UInt32.sub_mod (Term Term) Term)
(declare-fun Tm_refine_ace23c600fbe87b65e5fc333816f74de (Term Term) Term)
(declare-fun Tm_arrow_4a8c4b67b5977a746f1eeda7c310346f () Term)
(declare-fun FStar.UInt32.sub_mod@tok () Term)


; </end encoding val FStar.UInt32.sub_mod>


; <Start encoding val FStar.UInt32.mul>

(declare-fun FStar.UInt32.mul (Term Term) Term)
(declare-fun Tm_refine_1ccfb21903aa30ace8832f7a4d067d9b (Term Term) Term)
(declare-fun Tm_arrow_f261941925861d12451675f7409141e5 () Term)
(declare-fun FStar.UInt32.mul@tok () Term)


; </end encoding val FStar.UInt32.mul>


; <Start encoding val FStar.UInt32.mul_underspec>

(declare-fun FStar.UInt32.mul_underspec (Term Term) Term)
(declare-fun Tm_refine_cb4ffd3222952e9ac95fc72e8f9913c6 (Term Term) Term)
(declare-fun Tm_arrow_54623a1c9ed03c94751f7d25d259da67 () Term)
(declare-fun FStar.UInt32.mul_underspec@tok () Term)


; </end encoding val FStar.UInt32.mul_underspec>


; <Start encoding val FStar.UInt32.mul_mod>

(declare-fun FStar.UInt32.mul_mod (Term Term) Term)
(declare-fun Tm_refine_8618df86656cf4c2bc98614452120307 (Term Term) Term)
(declare-fun Tm_arrow_b9ba4f3f3f0a1ea3202a99cc97238a0d () Term)
(declare-fun FStar.UInt32.mul_mod@tok () Term)


; </end encoding val FStar.UInt32.mul_mod>


; <Start encoding val FStar.UInt32.div>

(declare-fun Tm_refine_0941c9ff95557f2d53bc8f8179ab793e () Term)
(declare-fun FStar.UInt32.div (Term Term) Term)

(declare-fun Tm_refine_74d1ae07763cf2ce5f26906c9df0d2cc (Term Term) Term)
(declare-fun Tm_arrow_61dc5944349c0fd1e6ccd916a51fdfe8 () Term)
(declare-fun FStar.UInt32.div@tok () Term)


; </end encoding val FStar.UInt32.div>


; <Start encoding val FStar.UInt32.rem>


(declare-fun FStar.UInt32.rem (Term Term) Term)

(declare-fun Tm_refine_19ac6a052799e5086e9c3eb3a21d54a5 (Term Term) Term)
(declare-fun Tm_arrow_a00bbce6d7d4a1d495177d4f11116643 () Term)
(declare-fun FStar.UInt32.rem@tok () Term)


; </end encoding val FStar.UInt32.rem>


; <Start encoding val FStar.UInt32.logand>

(declare-fun FStar.UInt32.logand (Term Term) Term)
(declare-fun Tm_refine_7afd5b0ca8e77c7f6870883658e19d63 (Term Term) Term)
(declare-fun Tm_arrow_eff0426e7af51f8d330de4f569da9534 () Term)
(declare-fun FStar.UInt32.logand@tok () Term)


; </end encoding val FStar.UInt32.logand>


; <Start encoding val FStar.UInt32.logxor>

(declare-fun FStar.UInt32.logxor (Term Term) Term)
(declare-fun Tm_refine_2b25e5c3b25bc06167200cbfa5d36b3e (Term Term) Term)
(declare-fun Tm_arrow_07d2eb0ad8dc47fa48b862c24603f207 () Term)
(declare-fun FStar.UInt32.logxor@tok () Term)


; </end encoding val FStar.UInt32.logxor>


; <Start encoding val FStar.UInt32.logor>

(declare-fun FStar.UInt32.logor (Term Term) Term)
(declare-fun Tm_refine_39cb18a1d289e559096741772432b24f (Term Term) Term)
(declare-fun Tm_arrow_f4c0c09b0ba22212b54bc6a7fb947fac () Term)
(declare-fun FStar.UInt32.logor@tok () Term)


; </end encoding val FStar.UInt32.logor>


; <Start encoding val FStar.UInt32.lognot>

(declare-fun FStar.UInt32.lognot (Term) Term)
(declare-fun Tm_refine_d5743ca0a8d5f3ceec748bdcb132b14f (Term) Term)
(declare-fun Tm_arrow_b6548dae703a0f26a4185c51dee5464b () Term)
(declare-fun FStar.UInt32.lognot@tok () Term)


; </end encoding val FStar.UInt32.lognot>


; <Start encoding val FStar.UInt32.shift_right>

(declare-fun FStar.UInt32.shift_right (Term Term) Term)
(declare-fun Tm_refine_59202c8b625f4b04caf2081d6778d9e7 (Term Term) Term)
(declare-fun Tm_arrow_13c7acc70a3dd34a798f691f2cee4104 () Term)
(declare-fun FStar.UInt32.shift_right@tok () Term)


; </end encoding val FStar.UInt32.shift_right>


; <Start encoding val FStar.UInt32.shift_left>

(declare-fun FStar.UInt32.shift_left (Term Term) Term)
(declare-fun Tm_refine_c642c4de19ebed0b1a9b5f85d40989c0 (Term Term) Term)
(declare-fun Tm_arrow_0709d575329517627fac117b134f4462 () Term)
(declare-fun FStar.UInt32.shift_left@tok () Term)


; </end encoding val FStar.UInt32.shift_left>


; <Start encoding let eq>

(declare-fun FStar.UInt32.eq (Term Term) Term)
(declare-fun Tm_arrow_6de09abf9de7977da03ee416904d3039 () Term)
(declare-fun FStar.UInt32.eq@tok () Term)

; </end encoding let eq>


; <Start encoding let gt>

(declare-fun FStar.UInt32.gt (Term Term) Term)

(declare-fun FStar.UInt32.gt@tok () Term)

; </end encoding let gt>


; <Start encoding let gte>

(declare-fun FStar.UInt32.gte (Term Term) Term)

(declare-fun FStar.UInt32.gte@tok () Term)

; </end encoding let gte>


; <Start encoding let lt>

(declare-fun FStar.UInt32.lt (Term Term) Term)

(declare-fun FStar.UInt32.lt@tok () Term)

; </end encoding let lt>


; <Start encoding let lte>

(declare-fun FStar.UInt32.lte (Term Term) Term)

(declare-fun FStar.UInt32.lte@tok () Term)

; </end encoding let lte>


; <Start encoding let minus>

(declare-fun FStar.UInt32.minus (Term) Term)
(declare-fun Tm_arrow_c4b70260248a2080020c883b42aa875d () Term)
(declare-fun FStar.UInt32.minus@tok () Term)

; </end encoding let minus>


; <Start encoding let n_minus_one>

(declare-fun FStar.UInt32.n_minus_one (Dummy_sort) Term)

; </end encoding let n_minus_one>


; <Skipped #set-options "--z3rlimit 80 --initial_fuel 1 --max_fuel 1"/>


; <Start encoding let eq_mask>

(declare-fun FStar.UInt32.eq_mask (Term Term) Term)
(declare-fun Tm_refine_09d9a189c8c7a3bf3fc28db14e6689cd (Term Term) Term)
(declare-fun Tm_arrow_472ed8b8700983a2f5b417531368b430 () Term)
(declare-fun FStar.UInt32.eq_mask@tok () Term)


; </end encoding let eq_mask>


; <Start encoding val FStar.UInt32.lemma_sub_msbs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt32.lemma_sub_msbs (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt32.lemma_sub_msbs@tok () Term)

; </end encoding val FStar.UInt32.lemma_sub_msbs>


; <Start encoding let gte_mask>

(declare-fun FStar.UInt32.gte_mask (Term Term) Term)
(declare-fun Tm_refine_83df857506788e94d25c8be97271668a (Term Term) Term)
(declare-fun Tm_arrow_a9de8133430dc71a337d9373e485c8b4 () Term)
(declare-fun FStar.UInt32.gte_mask@tok () Term)


; </end encoding let gte_mask>


; <Skipped #reset-options/>


; <Start encoding let op_Plus_Hat>

(declare-fun FStar.UInt32.op_Plus_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Plus_Hat@tok () Term)


; </end encoding let op_Plus_Hat>


; <Start encoding let op_Plus_Question_Hat>

(declare-fun FStar.UInt32.op_Plus_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Plus_Question_Hat@tok () Term)


; </end encoding let op_Plus_Question_Hat>


; <Start encoding let op_Plus_Percent_Hat>

(declare-fun FStar.UInt32.op_Plus_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Plus_Percent_Hat@tok () Term)


; </end encoding let op_Plus_Percent_Hat>


; <Start encoding let op_Subtraction_Hat>

(declare-fun FStar.UInt32.op_Subtraction_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Subtraction_Hat@tok () Term)


; </end encoding let op_Subtraction_Hat>


; <Start encoding let op_Subtraction_Question_Hat>

(declare-fun FStar.UInt32.op_Subtraction_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Subtraction_Question_Hat@tok () Term)


; </end encoding let op_Subtraction_Question_Hat>


; <Start encoding let op_Subtraction_Percent_Hat>

(declare-fun FStar.UInt32.op_Subtraction_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Subtraction_Percent_Hat@tok () Term)


; </end encoding let op_Subtraction_Percent_Hat>


; <Start encoding let op_Star_Hat>

(declare-fun FStar.UInt32.op_Star_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Star_Hat@tok () Term)


; </end encoding let op_Star_Hat>


; <Start encoding let op_Star_Question_Hat>

(declare-fun FStar.UInt32.op_Star_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Star_Question_Hat@tok () Term)


; </end encoding let op_Star_Question_Hat>


; <Start encoding let op_Star_Percent_Hat>

(declare-fun FStar.UInt32.op_Star_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Star_Percent_Hat@tok () Term)


; </end encoding let op_Star_Percent_Hat>


; <Start encoding let op_Slash_Hat>


(declare-fun FStar.UInt32.op_Slash_Hat (Term Term) Term)



(declare-fun FStar.UInt32.op_Slash_Hat@tok () Term)



; </end encoding let op_Slash_Hat>


; <Start encoding let op_Percent_Hat>


(declare-fun FStar.UInt32.op_Percent_Hat (Term Term) Term)



(declare-fun FStar.UInt32.op_Percent_Hat@tok () Term)



; </end encoding let op_Percent_Hat>


; <Start encoding let op_Hat_Hat>

(declare-fun FStar.UInt32.op_Hat_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Hat_Hat@tok () Term)


; </end encoding let op_Hat_Hat>


; <Start encoding let op_Amp_Hat>

(declare-fun FStar.UInt32.op_Amp_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Amp_Hat@tok () Term)


; </end encoding let op_Amp_Hat>


; <Start encoding let op_Bar_Hat>

(declare-fun FStar.UInt32.op_Bar_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Bar_Hat@tok () Term)


; </end encoding let op_Bar_Hat>


; <Start encoding let op_Less_Less_Hat>

(declare-fun FStar.UInt32.op_Less_Less_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Less_Less_Hat@tok () Term)


; </end encoding let op_Less_Less_Hat>


; <Start encoding let op_Greater_Greater_Hat>

(declare-fun FStar.UInt32.op_Greater_Greater_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Greater_Greater_Hat@tok () Term)


; </end encoding let op_Greater_Greater_Hat>


; <Start encoding let op_Equals_Hat>

(declare-fun FStar.UInt32.op_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Equals_Hat@tok () Term)

; </end encoding let op_Equals_Hat>


; <Start encoding let op_Greater_Hat>

(declare-fun FStar.UInt32.op_Greater_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Greater_Hat@tok () Term)

; </end encoding let op_Greater_Hat>


; <Start encoding let op_Greater_Equals_Hat>

(declare-fun FStar.UInt32.op_Greater_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Greater_Equals_Hat@tok () Term)

; </end encoding let op_Greater_Equals_Hat>


; <Start encoding let op_Less_Hat>

(declare-fun FStar.UInt32.op_Less_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Less_Hat@tok () Term)

; </end encoding let op_Less_Hat>


; <Start encoding let op_Less_Equals_Hat>

(declare-fun FStar.UInt32.op_Less_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Less_Equals_Hat@tok () Term)

; </end encoding let op_Less_Equals_Hat>


; <Start encoding val FStar.UInt32.to_string>

(declare-fun FStar.UInt32.to_string (Term) Term)
(declare-fun Tm_arrow_bde0326394a5877aafa8a9dfb4adb318 () Term)
(declare-fun FStar.UInt32.to_string@tok () Term)

; </end encoding val FStar.UInt32.to_string>


; <Start encoding val FStar.UInt32.to_string_hex>

(declare-fun FStar.UInt32.to_string_hex (Term) Term)

(declare-fun FStar.UInt32.to_string_hex@tok () Term)

; </end encoding val FStar.UInt32.to_string_hex>


; <Start encoding val FStar.UInt32.to_string_hex_pad>

(declare-fun FStar.UInt32.to_string_hex_pad (Term) Term)

(declare-fun FStar.UInt32.to_string_hex_pad@tok () Term)

; </end encoding val FStar.UInt32.to_string_hex_pad>


; <Start encoding val FStar.UInt32.of_string>

(declare-fun FStar.UInt32.of_string (Term) Term)
(declare-fun Tm_arrow_564534749090ea8f842e229c3182e762 () Term)
(declare-fun FStar.UInt32.of_string@tok () Term)

; </end encoding val FStar.UInt32.of_string>


; <Skipped #set-options "--admit_smt_queries true"/>


; <Start encoding let __uint_to_t>

(declare-fun FStar.UInt32.__uint_to_t (Term) Term)
(declare-fun Tm_arrow_67ad727682511dd92ce30d8d55620a8e () Term)
(declare-fun FStar.UInt32.__uint_to_t@tok () Term)

; </end encoding let __uint_to_t>


; <Skipped #reset-options/>


; End Externals for interface FStar.UInt32


; Externals for interface FStar.UInt16


; <Start encoding let n>

(declare-fun FStar.UInt16.n (Dummy_sort) Term)

; </end encoding let n>


; <Skipped #set-options "--max_fuel 0 --max_ifuel 0"/>


; <Start encoding val FStar.UInt16.t>

(declare-fun FStar.UInt16.t (Dummy_sort) Term)

; </end encoding val FStar.UInt16.t>


; <Start encoding val FStar.UInt16.v>

(declare-fun FStar.UInt16.v (Term) Term)
(declare-fun Tm_arrow_831b8138993a407ded8960bcff127b07 () Term)
(declare-fun FStar.UInt16.v@tok () Term)

; </end encoding val FStar.UInt16.v>


; <Start encoding val FStar.UInt16.uint_to_t>

(declare-fun FStar.UInt16.uint_to_t (Term) Term)
(declare-fun Tm_refine_f2a41cd0b7a1b87e64e4bdabfc823091 (Term) Term)
(declare-fun Tm_arrow_f4c24117357cf86f1b23d9cc39310530 () Term)
(declare-fun FStar.UInt16.uint_to_t@tok () Term)


; </end encoding val FStar.UInt16.uint_to_t>


; <Start encoding val FStar.UInt16.uv_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt16.uv_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt16.uv_inv@tok () Term)

; </end encoding val FStar.UInt16.uv_inv>


; <Start encoding val FStar.UInt16.vu_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt16.vu_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt16.vu_inv@tok () Term)

; </end encoding val FStar.UInt16.vu_inv>


; <Start encoding val FStar.UInt16.v_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt16.v_inj (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt16.v_inj@tok () Term)

; </end encoding val FStar.UInt16.v_inj>


; <Start encoding val FStar.UInt16.zero>

(declare-fun FStar.UInt16.zero (Dummy_sort) Term)
(declare-fun Tm_refine_954f2f8414e85457d28fe853c92eda2f () Term)


; </end encoding val FStar.UInt16.zero>


; <Start encoding val FStar.UInt16.one>

(declare-fun FStar.UInt16.one (Dummy_sort) Term)
(declare-fun Tm_refine_2808678106914fa614675fc00e2d12d2 () Term)


; </end encoding val FStar.UInt16.one>


; <Start encoding val FStar.UInt16.add>

(declare-fun FStar.UInt16.add (Term Term) Term)
(declare-fun Tm_refine_6fc1cfeb1ee6b248d1fef572cc963c99 (Term Term) Term)
(declare-fun Tm_arrow_f5504d213bba7b5885cb0987c01f2153 () Term)
(declare-fun FStar.UInt16.add@tok () Term)


; </end encoding val FStar.UInt16.add>


; <Start encoding val FStar.UInt16.add_underspec>

(declare-fun FStar.UInt16.add_underspec (Term Term) Term)
(declare-fun Tm_refine_34c091163f56732e02aa4746939ed3b3 (Term Term) Term)
(declare-fun Tm_arrow_fca12874fe31591238919898de90521f () Term)
(declare-fun FStar.UInt16.add_underspec@tok () Term)


; </end encoding val FStar.UInt16.add_underspec>


; <Start encoding val FStar.UInt16.add_mod>

(declare-fun FStar.UInt16.add_mod (Term Term) Term)
(declare-fun Tm_refine_a528e7088dc7771b5f67a6b9c65b45af (Term Term) Term)
(declare-fun Tm_arrow_e98be28bf728160b6eb326bbf51fc61a () Term)
(declare-fun FStar.UInt16.add_mod@tok () Term)


; </end encoding val FStar.UInt16.add_mod>


; <Start encoding val FStar.UInt16.sub>

(declare-fun FStar.UInt16.sub (Term Term) Term)
(declare-fun Tm_refine_b859c3bfdcf246597841540fb1ed998d (Term Term) Term)
(declare-fun Tm_arrow_413f6d7ea0554099e9c499578964c6cd () Term)
(declare-fun FStar.UInt16.sub@tok () Term)


; </end encoding val FStar.UInt16.sub>


; <Start encoding val FStar.UInt16.sub_underspec>

(declare-fun FStar.UInt16.sub_underspec (Term Term) Term)
(declare-fun Tm_refine_8fdd03b83187f4fea291f025e835855f (Term Term) Term)
(declare-fun Tm_arrow_d2d64a11e05eca67e5ebd6fbca18667e () Term)
(declare-fun FStar.UInt16.sub_underspec@tok () Term)


; </end encoding val FStar.UInt16.sub_underspec>


; <Start encoding val FStar.UInt16.sub_mod>

(declare-fun FStar.UInt16.sub_mod (Term Term) Term)
(declare-fun Tm_refine_129b0169b4e8bab9a8dfb4cbd0d62214 (Term Term) Term)
(declare-fun Tm_arrow_0cfa58c6ce7e51c3d1880814626c261d () Term)
(declare-fun FStar.UInt16.sub_mod@tok () Term)


; </end encoding val FStar.UInt16.sub_mod>


; <Start encoding val FStar.UInt16.mul>

(declare-fun FStar.UInt16.mul (Term Term) Term)
(declare-fun Tm_refine_0c3c281ec070e108a64d9e6643fa12b8 (Term Term) Term)
(declare-fun Tm_arrow_818a65cd860d9d90b9ff51d2de174014 () Term)
(declare-fun FStar.UInt16.mul@tok () Term)


; </end encoding val FStar.UInt16.mul>


; <Start encoding val FStar.UInt16.mul_underspec>

(declare-fun FStar.UInt16.mul_underspec (Term Term) Term)
(declare-fun Tm_refine_cb1b76b3df6f40838b504137c35a6e17 (Term Term) Term)
(declare-fun Tm_arrow_dfe74ad18d22be11665be6a37fdb27f6 () Term)
(declare-fun FStar.UInt16.mul_underspec@tok () Term)


; </end encoding val FStar.UInt16.mul_underspec>


; <Start encoding val FStar.UInt16.mul_mod>

(declare-fun FStar.UInt16.mul_mod (Term Term) Term)
(declare-fun Tm_refine_e24ce146e70bc5c453cecdd42c419aa1 (Term Term) Term)
(declare-fun Tm_arrow_fa5800654240cb69e060f3600acc0ab9 () Term)
(declare-fun FStar.UInt16.mul_mod@tok () Term)


; </end encoding val FStar.UInt16.mul_mod>


; <Start encoding val FStar.UInt16.div>

(declare-fun Tm_refine_3e34e2c4f5ba554ca9d5a94a7452f876 () Term)
(declare-fun FStar.UInt16.div (Term Term) Term)

(declare-fun Tm_refine_a2680f37a85ca38ef32ad76329ca6655 (Term Term) Term)
(declare-fun Tm_arrow_1d3ed7d1a36eb1c15be9167cdd26d975 () Term)
(declare-fun FStar.UInt16.div@tok () Term)


; </end encoding val FStar.UInt16.div>


; <Start encoding val FStar.UInt16.rem>


(declare-fun FStar.UInt16.rem (Term Term) Term)

(declare-fun Tm_refine_8d1743b5c6d2f2c9050076549cfeb5f4 (Term Term) Term)
(declare-fun Tm_arrow_a9b2f8e628351ca8191e5a2d74e12318 () Term)
(declare-fun FStar.UInt16.rem@tok () Term)


; </end encoding val FStar.UInt16.rem>


; <Start encoding val FStar.UInt16.logand>

(declare-fun FStar.UInt16.logand (Term Term) Term)
(declare-fun Tm_refine_7cf5fd844874f3049d3067fe68a85256 (Term Term) Term)
(declare-fun Tm_arrow_7aa270d906bd8fb45c247b75568c48db () Term)
(declare-fun FStar.UInt16.logand@tok () Term)


; </end encoding val FStar.UInt16.logand>


; <Start encoding val FStar.UInt16.logxor>

(declare-fun FStar.UInt16.logxor (Term Term) Term)
(declare-fun Tm_refine_e55be37d77d9b240b683ff3354ca439c (Term Term) Term)
(declare-fun Tm_arrow_22be9a4de1ee3eadb350cd60783b66ae () Term)
(declare-fun FStar.UInt16.logxor@tok () Term)


; </end encoding val FStar.UInt16.logxor>


; <Start encoding val FStar.UInt16.logor>

(declare-fun FStar.UInt16.logor (Term Term) Term)
(declare-fun Tm_refine_3881ab512ff2d0d86d43bf57b0c61e75 (Term Term) Term)
(declare-fun Tm_arrow_fa4847a4c38079a6033cc53f6f8391a5 () Term)
(declare-fun FStar.UInt16.logor@tok () Term)


; </end encoding val FStar.UInt16.logor>


; <Start encoding val FStar.UInt16.lognot>

(declare-fun FStar.UInt16.lognot (Term) Term)
(declare-fun Tm_refine_dfa8480cc0780e895037e28b8472b8df (Term) Term)
(declare-fun Tm_arrow_893e33c74d084e533ade4a873a1f755c () Term)
(declare-fun FStar.UInt16.lognot@tok () Term)


; </end encoding val FStar.UInt16.lognot>


; <Start encoding val FStar.UInt16.shift_right>

(declare-fun FStar.UInt16.shift_right (Term Term) Term)
(declare-fun Tm_refine_4ef8dd68ca64f7c4c1a8bac302cb51a6 (Term Term) Term)
(declare-fun Tm_arrow_a7706d3849bacf3a6eca4b133d095a70 () Term)
(declare-fun FStar.UInt16.shift_right@tok () Term)


; </end encoding val FStar.UInt16.shift_right>


; <Start encoding val FStar.UInt16.shift_left>

(declare-fun FStar.UInt16.shift_left (Term Term) Term)
(declare-fun Tm_refine_bb6b262bbc4fcaf78b2af3148bb763c6 (Term Term) Term)
(declare-fun Tm_arrow_5b62fe9416ecdac1c662be0b77ffd710 () Term)
(declare-fun FStar.UInt16.shift_left@tok () Term)


; </end encoding val FStar.UInt16.shift_left>


; <Start encoding let eq>

(declare-fun FStar.UInt16.eq (Term Term) Term)
(declare-fun Tm_arrow_ec095ea6bafa5e9866a85b27cff308e0 () Term)
(declare-fun FStar.UInt16.eq@tok () Term)

; </end encoding let eq>


; <Start encoding let gt>

(declare-fun FStar.UInt16.gt (Term Term) Term)

(declare-fun FStar.UInt16.gt@tok () Term)

; </end encoding let gt>


; <Start encoding let gte>

(declare-fun FStar.UInt16.gte (Term Term) Term)

(declare-fun FStar.UInt16.gte@tok () Term)

; </end encoding let gte>


; <Start encoding let lt>

(declare-fun FStar.UInt16.lt (Term Term) Term)

(declare-fun FStar.UInt16.lt@tok () Term)

; </end encoding let lt>


; <Start encoding let lte>

(declare-fun FStar.UInt16.lte (Term Term) Term)

(declare-fun FStar.UInt16.lte@tok () Term)

; </end encoding let lte>


; <Start encoding let minus>

(declare-fun FStar.UInt16.minus (Term) Term)
(declare-fun Tm_arrow_3f395de82a49d1518ea23b50c5f2f44e () Term)
(declare-fun FStar.UInt16.minus@tok () Term)

; </end encoding let minus>


; <Start encoding let n_minus_one>

(declare-fun FStar.UInt16.n_minus_one (Dummy_sort) Term)

; </end encoding let n_minus_one>


; <Skipped #set-options "--z3rlimit 80 --initial_fuel 1 --max_fuel 1"/>


; <Start encoding let eq_mask>

(declare-fun FStar.UInt16.eq_mask (Term Term) Term)
(declare-fun Tm_refine_4337d527bd8e18a624079c37cd404c59 (Term Term) Term)
(declare-fun Tm_arrow_3b501882da55605a5a3d3f43f32c45b9 () Term)
(declare-fun FStar.UInt16.eq_mask@tok () Term)


; </end encoding let eq_mask>


; <Start encoding val FStar.UInt16.lemma_sub_msbs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt16.lemma_sub_msbs (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt16.lemma_sub_msbs@tok () Term)

; </end encoding val FStar.UInt16.lemma_sub_msbs>


; <Start encoding let gte_mask>

(declare-fun FStar.UInt16.gte_mask (Term Term) Term)
(declare-fun Tm_refine_d8e117de3278723cbc3559698b2db64e (Term Term) Term)
(declare-fun Tm_arrow_01b6b3276c1f9c1f15edd31113793e3b () Term)
(declare-fun FStar.UInt16.gte_mask@tok () Term)


; </end encoding let gte_mask>


; <Skipped #reset-options/>


; <Start encoding let op_Plus_Hat>

(declare-fun FStar.UInt16.op_Plus_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Plus_Hat@tok () Term)


; </end encoding let op_Plus_Hat>


; <Start encoding let op_Plus_Question_Hat>

(declare-fun FStar.UInt16.op_Plus_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Plus_Question_Hat@tok () Term)


; </end encoding let op_Plus_Question_Hat>


; <Start encoding let op_Plus_Percent_Hat>

(declare-fun FStar.UInt16.op_Plus_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Plus_Percent_Hat@tok () Term)


; </end encoding let op_Plus_Percent_Hat>


; <Start encoding let op_Subtraction_Hat>

(declare-fun FStar.UInt16.op_Subtraction_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Subtraction_Hat@tok () Term)


; </end encoding let op_Subtraction_Hat>


; <Start encoding let op_Subtraction_Question_Hat>

(declare-fun FStar.UInt16.op_Subtraction_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Subtraction_Question_Hat@tok () Term)


; </end encoding let op_Subtraction_Question_Hat>


; <Start encoding let op_Subtraction_Percent_Hat>

(declare-fun FStar.UInt16.op_Subtraction_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Subtraction_Percent_Hat@tok () Term)


; </end encoding let op_Subtraction_Percent_Hat>


; <Start encoding let op_Star_Hat>

(declare-fun FStar.UInt16.op_Star_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Star_Hat@tok () Term)


; </end encoding let op_Star_Hat>


; <Start encoding let op_Star_Question_Hat>

(declare-fun FStar.UInt16.op_Star_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Star_Question_Hat@tok () Term)


; </end encoding let op_Star_Question_Hat>


; <Start encoding let op_Star_Percent_Hat>

(declare-fun FStar.UInt16.op_Star_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Star_Percent_Hat@tok () Term)


; </end encoding let op_Star_Percent_Hat>


; <Start encoding let op_Slash_Hat>


(declare-fun FStar.UInt16.op_Slash_Hat (Term Term) Term)



(declare-fun FStar.UInt16.op_Slash_Hat@tok () Term)



; </end encoding let op_Slash_Hat>


; <Start encoding let op_Percent_Hat>


(declare-fun FStar.UInt16.op_Percent_Hat (Term Term) Term)



(declare-fun FStar.UInt16.op_Percent_Hat@tok () Term)



; </end encoding let op_Percent_Hat>


; <Start encoding let op_Hat_Hat>

(declare-fun FStar.UInt16.op_Hat_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Hat_Hat@tok () Term)


; </end encoding let op_Hat_Hat>


; <Start encoding let op_Amp_Hat>

(declare-fun FStar.UInt16.op_Amp_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Amp_Hat@tok () Term)


; </end encoding let op_Amp_Hat>


; <Start encoding let op_Bar_Hat>

(declare-fun FStar.UInt16.op_Bar_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Bar_Hat@tok () Term)


; </end encoding let op_Bar_Hat>


; <Start encoding let op_Less_Less_Hat>

(declare-fun FStar.UInt16.op_Less_Less_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Less_Less_Hat@tok () Term)


; </end encoding let op_Less_Less_Hat>


; <Start encoding let op_Greater_Greater_Hat>

(declare-fun FStar.UInt16.op_Greater_Greater_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Greater_Greater_Hat@tok () Term)


; </end encoding let op_Greater_Greater_Hat>


; <Start encoding let op_Equals_Hat>

(declare-fun FStar.UInt16.op_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt16.op_Equals_Hat@tok () Term)

; </end encoding let op_Equals_Hat>


; <Start encoding let op_Greater_Hat>

(declare-fun FStar.UInt16.op_Greater_Hat (Term Term) Term)

(declare-fun FStar.UInt16.op_Greater_Hat@tok () Term)

; </end encoding let op_Greater_Hat>


; <Start encoding let op_Greater_Equals_Hat>

(declare-fun FStar.UInt16.op_Greater_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt16.op_Greater_Equals_Hat@tok () Term)

; </end encoding let op_Greater_Equals_Hat>


; <Start encoding let op_Less_Hat>

(declare-fun FStar.UInt16.op_Less_Hat (Term Term) Term)

(declare-fun FStar.UInt16.op_Less_Hat@tok () Term)

; </end encoding let op_Less_Hat>


; <Start encoding let op_Less_Equals_Hat>

(declare-fun FStar.UInt16.op_Less_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt16.op_Less_Equals_Hat@tok () Term)

; </end encoding let op_Less_Equals_Hat>


; <Start encoding val FStar.UInt16.to_string>

(declare-fun FStar.UInt16.to_string (Term) Term)
(declare-fun Tm_arrow_1567a0c3fa9c6a7b76db1de05c62a83e () Term)
(declare-fun FStar.UInt16.to_string@tok () Term)

; </end encoding val FStar.UInt16.to_string>


; <Start encoding val FStar.UInt16.to_string_hex>

(declare-fun FStar.UInt16.to_string_hex (Term) Term)

(declare-fun FStar.UInt16.to_string_hex@tok () Term)

; </end encoding val FStar.UInt16.to_string_hex>


; <Start encoding val FStar.UInt16.to_string_hex_pad>

(declare-fun FStar.UInt16.to_string_hex_pad (Term) Term)

(declare-fun FStar.UInt16.to_string_hex_pad@tok () Term)

; </end encoding val FStar.UInt16.to_string_hex_pad>


; <Start encoding val FStar.UInt16.of_string>

(declare-fun FStar.UInt16.of_string (Term) Term)
(declare-fun Tm_arrow_68a59188b2c9544b263522e5c6da7655 () Term)
(declare-fun FStar.UInt16.of_string@tok () Term)

; </end encoding val FStar.UInt16.of_string>


; <Skipped #set-options "--admit_smt_queries true"/>


; <Start encoding let __uint_to_t>

(declare-fun FStar.UInt16.__uint_to_t (Term) Term)
(declare-fun Tm_arrow_08c7c5e1e582fde525f5d9f6401fce2b () Term)
(declare-fun FStar.UInt16.__uint_to_t@tok () Term)

; </end encoding let __uint_to_t>


; <Skipped #reset-options/>


; End Externals for interface FStar.UInt16


; Externals for interface FStar.Range


; <Start encoding val FStar.Range.__range>

(declare-fun FStar.Range.__range () Term)

; </end encoding val FStar.Range.__range>


; <Start encoding let range>

(declare-fun FStar.Range.range () Term)

; </end encoding let range>


; <Start encoding val FStar.Range.__range_0>

(declare-fun FStar.Range.__range_0 (Dummy_sort) Term)

; </end encoding val FStar.Range.__range_0>


; <Start encoding let range_0>

(declare-fun FStar.Range.range_0 (Dummy_sort) Term)

; </end encoding let range_0>


; <Start encoding val FStar.Range.__mk_range>

(declare-fun FStar.Range.__mk_range (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_692aa0ebe01353db00b5203de7da6785 () Term)
(declare-fun FStar.Range.__mk_range@tok () Term)

; </end encoding val FStar.Range.__mk_range>


; <Start encoding val FStar.Range.mk_range>

(declare-fun FStar.Range.mk_range (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2d3d853349c0a35c0e0c8d13086384ea () Term)
(declare-fun FStar.Range.mk_range@tok () Term)

; </end encoding val FStar.Range.mk_range>


; <Start encoding val FStar.Range.join_range>

(declare-fun FStar.Range.join_range (Term Term) Term)
(declare-fun Tm_arrow_6eaaa31f2d36a5c7cca7eb998962a7fa () Term)
(declare-fun FStar.Range.join_range@tok () Term)

; </end encoding val FStar.Range.join_range>


; <Start encoding let labeled>

(declare-fun FStar.Range.labeled (Term Term Term) Term)
(declare-fun Tm_arrow_ab5899212fc4c148181589be7fd78af1 () Term)
(declare-fun FStar.Range.labeled@tok () Term)

; </end encoding let labeled>


; <Start encoding val FStar.Range.explode>

(declare-fun FStar.Range.explode (Term) Term)
(declare-fun Tm_arrow_f9315f3207257087f0bf3975f13024e3 () Term)
(declare-fun FStar.Range.explode@tok () Term)

; </end encoding val FStar.Range.explode>


; End Externals for interface FStar.Range


; Externals for interface FStar.Stubs.Reflection.Types


; <Start encoding val FStar.Stubs.Reflection.Types.namedv>

(declare-fun FStar.Stubs.Reflection.Types.namedv () Term)

; </end encoding val FStar.Stubs.Reflection.Types.namedv>


; <Start encoding val FStar.Stubs.Reflection.Types.bv>

(declare-fun FStar.Stubs.Reflection.Types.bv () Term)

; </end encoding val FStar.Stubs.Reflection.Types.bv>


; <Start encoding val FStar.Stubs.Reflection.Types.binder>

(declare-fun FStar.Stubs.Reflection.Types.binder () Term)

; </end encoding val FStar.Stubs.Reflection.Types.binder>


; <Start encoding val FStar.Stubs.Reflection.Types.term>

(declare-fun FStar.Stubs.Reflection.Types.term () Term)

; </end encoding val FStar.Stubs.Reflection.Types.term>


; <Start encoding val FStar.Stubs.Reflection.Types.env>

(declare-fun FStar.Stubs.Reflection.Types.env () Term)

; </end encoding val FStar.Stubs.Reflection.Types.env>


; <Start encoding val FStar.Stubs.Reflection.Types.fv>

(declare-fun FStar.Stubs.Reflection.Types.fv () Term)

; </end encoding val FStar.Stubs.Reflection.Types.fv>


; <Start encoding val FStar.Stubs.Reflection.Types.comp>

(declare-fun FStar.Stubs.Reflection.Types.comp () Term)

; </end encoding val FStar.Stubs.Reflection.Types.comp>


; <Start encoding val FStar.Stubs.Reflection.Types.sigelt>

(declare-fun FStar.Stubs.Reflection.Types.sigelt () Term)

; </end encoding val FStar.Stubs.Reflection.Types.sigelt>


; <Start encoding val FStar.Stubs.Reflection.Types.ctx_uvar_and_subst>

(declare-fun FStar.Stubs.Reflection.Types.ctx_uvar_and_subst () Term)

; </end encoding val FStar.Stubs.Reflection.Types.ctx_uvar_and_subst>


; <Start encoding val FStar.Stubs.Reflection.Types.letbinding>

(declare-fun FStar.Stubs.Reflection.Types.letbinding () Term)

; </end encoding val FStar.Stubs.Reflection.Types.letbinding>


; <Start encoding val FStar.Stubs.Reflection.Types.ident>

(declare-fun FStar.Stubs.Reflection.Types.ident () Term)

; </end encoding val FStar.Stubs.Reflection.Types.ident>


; <Start encoding val FStar.Stubs.Reflection.Types.universe_uvar>

(declare-fun FStar.Stubs.Reflection.Types.universe_uvar () Term)

; </end encoding val FStar.Stubs.Reflection.Types.universe_uvar>


; <Start encoding val FStar.Stubs.Reflection.Types.universe>

(declare-fun FStar.Stubs.Reflection.Types.universe () Term)

; </end encoding val FStar.Stubs.Reflection.Types.universe>


; <Start encoding let name>

(declare-fun FStar.Stubs.Reflection.Types.name (Dummy_sort) Term)

; </end encoding let name>


; <Start encoding let univ_name>

(declare-fun FStar.Stubs.Reflection.Types.univ_name () Term)

; </end encoding let univ_name>


; <Start encoding let typ>

(declare-fun FStar.Stubs.Reflection.Types.typ () Term)

; </end encoding let typ>


; <Start encoding let binders>

(declare-fun FStar.Stubs.Reflection.Types.binders () Term)

; </end encoding let binders>


; <Start encoding let decls>

(declare-fun FStar.Stubs.Reflection.Types.decls () Term)

; </end encoding let decls>


; End Externals for interface FStar.Stubs.Reflection.Types


; Externals for interface FStar.Float


; <Start encoding val FStar.Float.float>

(declare-fun FStar.Float.float () Term)

; </end encoding val FStar.Float.float>


; <Start encoding let double>

(declare-fun FStar.Float.double () Term)

; </end encoding let double>


; End Externals for interface FStar.Float


; Externals for interface FStar.Char


; <Start encoding val FStar.Char.char>

(declare-fun FStar.Char.char (Dummy_sort) Term)

; </end encoding val FStar.Char.char>


; <Start encoding let char_code>

(declare-fun FStar.Char.char_code () Term)
(declare-fun Tm_refine_96af4a84eae6a9bae92bc908a1c3c24c () Term)

; </end encoding let char_code>


; <Start encoding val FStar.Char.u32_of_char>

(declare-fun FStar.Char.u32_of_char (Term) Term)
(declare-fun Tm_arrow_09ae08f23212b3776b47464ac075ff69 () Term)
(declare-fun FStar.Char.u32_of_char@tok () Term)

; </end encoding val FStar.Char.u32_of_char>


; <Start encoding val FStar.Char.char_of_u32>

(declare-fun FStar.Char.char_of_u32 (Term) Term)
(declare-fun Tm_arrow_6b2de8c9d183197e10fa8623c8ed0069 () Term)
(declare-fun FStar.Char.char_of_u32@tok () Term)

; </end encoding val FStar.Char.char_of_u32>


; <Start encoding val FStar.Char.char_of_u32_of_char>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Char.char_of_u32_of_char (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Char.char_of_u32_of_char@tok () Term)

; </end encoding val FStar.Char.char_of_u32_of_char>


; <Start encoding val FStar.Char.u32_of_char_of_u32>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Char.u32_of_char_of_u32 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Char.u32_of_char_of_u32@tok () Term)

; </end encoding val FStar.Char.u32_of_char_of_u32>


; <Start encoding let int_of_char>

(declare-fun FStar.Char.int_of_char (Term) Term)
(declare-fun Tm_arrow_edb4339633bae2b96af63b0dbac8e538 () Term)
(declare-fun FStar.Char.int_of_char@tok () Term)

; </end encoding let int_of_char>


; <Start encoding let char_of_int>

(declare-fun Tm_refine_41bb1fe33d2856748d537571528d32a1 () Term)
(declare-fun FStar.Char.char_of_int (Term) Term)

(declare-fun Tm_arrow_efb6c29a20da126570b0d74fa1074537 () Term)
(declare-fun FStar.Char.char_of_int@tok () Term)


; </end encoding let char_of_int>


; <Start encoding val FStar.Char.lowercase>

(declare-fun FStar.Char.lowercase (Term) Term)
(declare-fun Tm_arrow_410c308158a4312d1307cd758f94e691 () Term)
(declare-fun FStar.Char.lowercase@tok () Term)

; </end encoding val FStar.Char.lowercase>


; <Start encoding val FStar.Char.uppercase>

(declare-fun FStar.Char.uppercase (Term) Term)

(declare-fun FStar.Char.uppercase@tok () Term)

; </end encoding val FStar.Char.uppercase>


; <Skipped #set-options "--admit_smt_queries true"/>


; <Start encoding let __char_of_int>

(declare-fun FStar.Char.__char_of_int (Term) Term)
(declare-fun Tm_arrow_269aaec28d3e769b82922feb9fbb0224 () Term)
(declare-fun FStar.Char.__char_of_int@tok () Term)

; </end encoding let __char_of_int>


; <Skipped #reset-options/>


; End Externals for interface FStar.Char


; Externals for interface FStar.Pprint


; <Start encoding val FStar.Pprint.document>

(declare-fun FStar.Pprint.document () Term)

; </end encoding val FStar.Pprint.document>


; <Start encoding val FStar.Pprint.empty>

(declare-fun FStar.Pprint.empty (Dummy_sort) Term)

; </end encoding val FStar.Pprint.empty>


; <Start encoding val FStar.Pprint.doc_of_char>

(declare-fun FStar.Pprint.doc_of_char (Term) Term)
(declare-fun Tm_arrow_a4acb59fbf005290ad49955f91c28b03 () Term)
(declare-fun FStar.Pprint.doc_of_char@tok () Term)

; </end encoding val FStar.Pprint.doc_of_char>


; <Start encoding val FStar.Pprint.doc_of_string>

(declare-fun FStar.Pprint.doc_of_string (Term) Term)
(declare-fun Tm_arrow_997c5f5d4977b2f7fdf48b0cb622aac1 () Term)
(declare-fun FStar.Pprint.doc_of_string@tok () Term)

; </end encoding val FStar.Pprint.doc_of_string>


; <Start encoding val FStar.Pprint.doc_of_bool>

(declare-fun FStar.Pprint.doc_of_bool (Term) Term)
(declare-fun Tm_arrow_c297ae71bcb61f857565593f192b0ba9 () Term)
(declare-fun FStar.Pprint.doc_of_bool@tok () Term)

; </end encoding val FStar.Pprint.doc_of_bool>


; <Start encoding val FStar.Pprint.substring>

(declare-fun FStar.Pprint.substring (Term Term Term) Term)
(declare-fun Tm_arrow_57d4df6e3bb2ca47134bbb9d1fc71584 () Term)
(declare-fun FStar.Pprint.substring@tok () Term)

; </end encoding val FStar.Pprint.substring>


; <Start encoding val FStar.Pprint.fancystring>

(declare-fun FStar.Pprint.fancystring (Term Term) Term)
(declare-fun Tm_arrow_32174abe6c67513e28543abb3662b06a () Term)
(declare-fun FStar.Pprint.fancystring@tok () Term)

; </end encoding val FStar.Pprint.fancystring>


; <Start encoding val FStar.Pprint.fancysubstring>

(declare-fun FStar.Pprint.fancysubstring (Term Term Term Term) Term)
(declare-fun Tm_arrow_095d1e6b4118e7c85dbeb61c88636be5 () Term)
(declare-fun FStar.Pprint.fancysubstring@tok () Term)

; </end encoding val FStar.Pprint.fancysubstring>


; <Start encoding val FStar.Pprint.utf8string>

(declare-fun FStar.Pprint.utf8string (Term) Term)

(declare-fun FStar.Pprint.utf8string@tok () Term)

; </end encoding val FStar.Pprint.utf8string>


; <Start encoding val FStar.Pprint.hardline>

(declare-fun FStar.Pprint.hardline (Dummy_sort) Term)

; </end encoding val FStar.Pprint.hardline>


; <Start encoding val FStar.Pprint.blank>

(declare-fun FStar.Pprint.blank (Term) Term)
(declare-fun Tm_arrow_75ab32078fe02c79ad1d360245f44dfb () Term)
(declare-fun FStar.Pprint.blank@tok () Term)

; </end encoding val FStar.Pprint.blank>


; <Start encoding val FStar.Pprint.break_>

(declare-fun FStar.Pprint.break_ (Term) Term)

(declare-fun FStar.Pprint.break_@tok () Term)

; </end encoding val FStar.Pprint.break_>


; <Start encoding val FStar.Pprint.op_Hat_Hat>

(declare-fun FStar.Pprint.op_Hat_Hat (Term Term) Term)
(declare-fun Tm_arrow_19abf1e35346678de614defb45741110 () Term)
(declare-fun FStar.Pprint.op_Hat_Hat@tok () Term)

; </end encoding val FStar.Pprint.op_Hat_Hat>


; <Start encoding val FStar.Pprint.op_Hat_Slash_Hat>

(declare-fun FStar.Pprint.op_Hat_Slash_Hat (Term Term) Term)

(declare-fun FStar.Pprint.op_Hat_Slash_Hat@tok () Term)

; </end encoding val FStar.Pprint.op_Hat_Slash_Hat>


; <Start encoding val FStar.Pprint.nest>

(declare-fun FStar.Pprint.nest (Term Term) Term)
(declare-fun Tm_arrow_a087a683fcb5153393871c9b94d28ffc () Term)
(declare-fun FStar.Pprint.nest@tok () Term)

; </end encoding val FStar.Pprint.nest>


; <Start encoding val FStar.Pprint.group>

(declare-fun FStar.Pprint.group (Term) Term)
(declare-fun Tm_arrow_bbc0c5be3085d9d37fef1938353ffda9 () Term)
(declare-fun FStar.Pprint.group@tok () Term)

; </end encoding val FStar.Pprint.group>


; <Start encoding val FStar.Pprint.ifflat>

(declare-fun FStar.Pprint.ifflat (Term Term) Term)

(declare-fun FStar.Pprint.ifflat@tok () Term)

; </end encoding val FStar.Pprint.ifflat>


; <Start encoding val FStar.Pprint.lparen>

(declare-fun FStar.Pprint.lparen (Dummy_sort) Term)

; </end encoding val FStar.Pprint.lparen>


; <Start encoding val FStar.Pprint.rparen>

(declare-fun FStar.Pprint.rparen (Dummy_sort) Term)

; </end encoding val FStar.Pprint.rparen>


; <Start encoding val FStar.Pprint.langle>

(declare-fun FStar.Pprint.langle (Dummy_sort) Term)

; </end encoding val FStar.Pprint.langle>


; <Start encoding val FStar.Pprint.rangle>

(declare-fun FStar.Pprint.rangle (Dummy_sort) Term)

; </end encoding val FStar.Pprint.rangle>


; <Start encoding val FStar.Pprint.lbrace>

(declare-fun FStar.Pprint.lbrace (Dummy_sort) Term)

; </end encoding val FStar.Pprint.lbrace>


; <Start encoding val FStar.Pprint.rbrace>

(declare-fun FStar.Pprint.rbrace (Dummy_sort) Term)

; </end encoding val FStar.Pprint.rbrace>


; <Start encoding val FStar.Pprint.lbracket>

(declare-fun FStar.Pprint.lbracket (Dummy_sort) Term)

; </end encoding val FStar.Pprint.lbracket>


; <Start encoding val FStar.Pprint.rbracket>

(declare-fun FStar.Pprint.rbracket (Dummy_sort) Term)

; </end encoding val FStar.Pprint.rbracket>


; <Start encoding val FStar.Pprint.squote>

(declare-fun FStar.Pprint.squote (Dummy_sort) Term)

; </end encoding val FStar.Pprint.squote>


; <Start encoding val FStar.Pprint.dquote>

(declare-fun FStar.Pprint.dquote (Dummy_sort) Term)

; </end encoding val FStar.Pprint.dquote>


; <Start encoding val FStar.Pprint.bquote>

(declare-fun FStar.Pprint.bquote (Dummy_sort) Term)

; </end encoding val FStar.Pprint.bquote>


; <Start encoding val FStar.Pprint.semi>

(declare-fun FStar.Pprint.semi (Dummy_sort) Term)

; </end encoding val FStar.Pprint.semi>


; <Start encoding val FStar.Pprint.colon>

(declare-fun FStar.Pprint.colon (Dummy_sort) Term)

; </end encoding val FStar.Pprint.colon>


; <Start encoding val FStar.Pprint.comma>

(declare-fun FStar.Pprint.comma (Dummy_sort) Term)

; </end encoding val FStar.Pprint.comma>


; <Start encoding val FStar.Pprint.space>

(declare-fun FStar.Pprint.space (Dummy_sort) Term)

; </end encoding val FStar.Pprint.space>


; <Start encoding val FStar.Pprint.dot>

(declare-fun FStar.Pprint.dot (Dummy_sort) Term)

; </end encoding val FStar.Pprint.dot>


; <Start encoding val FStar.Pprint.sharp>

(declare-fun FStar.Pprint.sharp (Dummy_sort) Term)

; </end encoding val FStar.Pprint.sharp>


; <Start encoding val FStar.Pprint.slash>

(declare-fun FStar.Pprint.slash (Dummy_sort) Term)

; </end encoding val FStar.Pprint.slash>


; <Start encoding val FStar.Pprint.backslash>

(declare-fun FStar.Pprint.backslash (Dummy_sort) Term)

; </end encoding val FStar.Pprint.backslash>


; <Start encoding val FStar.Pprint.equals>

(declare-fun FStar.Pprint.equals (Dummy_sort) Term)

; </end encoding val FStar.Pprint.equals>


; <Start encoding val FStar.Pprint.qmark>

(declare-fun FStar.Pprint.qmark (Dummy_sort) Term)

; </end encoding val FStar.Pprint.qmark>


; <Start encoding val FStar.Pprint.tilde>

(declare-fun FStar.Pprint.tilde (Dummy_sort) Term)

; </end encoding val FStar.Pprint.tilde>


; <Start encoding val FStar.Pprint.at>

(declare-fun FStar.Pprint.at (Dummy_sort) Term)

; </end encoding val FStar.Pprint.at>


; <Start encoding val FStar.Pprint.percent>

(declare-fun FStar.Pprint.percent (Dummy_sort) Term)

; </end encoding val FStar.Pprint.percent>


; <Start encoding val FStar.Pprint.dollar>

(declare-fun FStar.Pprint.dollar (Dummy_sort) Term)

; </end encoding val FStar.Pprint.dollar>


; <Start encoding val FStar.Pprint.caret>

(declare-fun FStar.Pprint.caret (Dummy_sort) Term)

; </end encoding val FStar.Pprint.caret>


; <Start encoding val FStar.Pprint.ampersand>

(declare-fun FStar.Pprint.ampersand (Dummy_sort) Term)

; </end encoding val FStar.Pprint.ampersand>


; <Start encoding val FStar.Pprint.star>

(declare-fun FStar.Pprint.star (Dummy_sort) Term)

; </end encoding val FStar.Pprint.star>


; <Start encoding val FStar.Pprint.plus>

(declare-fun FStar.Pprint.plus (Dummy_sort) Term)

; </end encoding val FStar.Pprint.plus>


; <Start encoding val FStar.Pprint.minus>

(declare-fun FStar.Pprint.minus (Dummy_sort) Term)

; </end encoding val FStar.Pprint.minus>


; <Start encoding val FStar.Pprint.underscore>

(declare-fun FStar.Pprint.underscore (Dummy_sort) Term)

; </end encoding val FStar.Pprint.underscore>


; <Start encoding val FStar.Pprint.bang>

(declare-fun FStar.Pprint.bang (Dummy_sort) Term)

; </end encoding val FStar.Pprint.bang>


; <Start encoding val FStar.Pprint.bar>

(declare-fun FStar.Pprint.bar (Dummy_sort) Term)

; </end encoding val FStar.Pprint.bar>


; <Start encoding val FStar.Pprint.rarrow>

(declare-fun FStar.Pprint.rarrow (Dummy_sort) Term)

; </end encoding val FStar.Pprint.rarrow>


; <Start encoding val FStar.Pprint.long_left_arrow>

(declare-fun FStar.Pprint.long_left_arrow (Dummy_sort) Term)

; </end encoding val FStar.Pprint.long_left_arrow>


; <Start encoding val FStar.Pprint.larrow>

(declare-fun FStar.Pprint.larrow (Dummy_sort) Term)

; </end encoding val FStar.Pprint.larrow>


; <Start encoding val FStar.Pprint.precede>

(declare-fun FStar.Pprint.precede (Term Term) Term)

(declare-fun FStar.Pprint.precede@tok () Term)

; </end encoding val FStar.Pprint.precede>


; <Start encoding val FStar.Pprint.terminate>

(declare-fun FStar.Pprint.terminate (Term Term) Term)

(declare-fun FStar.Pprint.terminate@tok () Term)

; </end encoding val FStar.Pprint.terminate>


; <Start encoding val FStar.Pprint.enclose>

(declare-fun FStar.Pprint.enclose (Term Term Term) Term)
(declare-fun Tm_arrow_f04dd2286d7e3e9f9bc2795066272a5d () Term)
(declare-fun FStar.Pprint.enclose@tok () Term)

; </end encoding val FStar.Pprint.enclose>


; <Start encoding val FStar.Pprint.squotes>

(declare-fun FStar.Pprint.squotes (Term) Term)

(declare-fun FStar.Pprint.squotes@tok () Term)

; </end encoding val FStar.Pprint.squotes>


; <Start encoding val FStar.Pprint.dquotes>

(declare-fun FStar.Pprint.dquotes (Term) Term)

(declare-fun FStar.Pprint.dquotes@tok () Term)

; </end encoding val FStar.Pprint.dquotes>


; <Start encoding val FStar.Pprint.bquotes>

(declare-fun FStar.Pprint.bquotes (Term) Term)

(declare-fun FStar.Pprint.bquotes@tok () Term)

; </end encoding val FStar.Pprint.bquotes>


; <Start encoding val FStar.Pprint.braces>

(declare-fun FStar.Pprint.braces (Term) Term)

(declare-fun FStar.Pprint.braces@tok () Term)

; </end encoding val FStar.Pprint.braces>


; <Start encoding val FStar.Pprint.parens>

(declare-fun FStar.Pprint.parens (Term) Term)

(declare-fun FStar.Pprint.parens@tok () Term)

; </end encoding val FStar.Pprint.parens>


; <Start encoding val FStar.Pprint.angles>

(declare-fun FStar.Pprint.angles (Term) Term)

(declare-fun FStar.Pprint.angles@tok () Term)

; </end encoding val FStar.Pprint.angles>


; <Start encoding val FStar.Pprint.brackets>

(declare-fun FStar.Pprint.brackets (Term) Term)

(declare-fun FStar.Pprint.brackets@tok () Term)

; </end encoding val FStar.Pprint.brackets>


; <Start encoding val FStar.Pprint.twice>

(declare-fun FStar.Pprint.twice (Term) Term)

(declare-fun FStar.Pprint.twice@tok () Term)

; </end encoding val FStar.Pprint.twice>


; <Start encoding val FStar.Pprint.repeat>

(declare-fun FStar.Pprint.repeat (Term Term) Term)

(declare-fun FStar.Pprint.repeat@tok () Term)

; </end encoding val FStar.Pprint.repeat>


; <Start encoding val FStar.Pprint.concat>

(declare-fun FStar.Pprint.concat (Term) Term)
(declare-fun Tm_arrow_0cbe92f45919c1d7e0f9e026093c317f () Term)
(declare-fun FStar.Pprint.concat@tok () Term)

; </end encoding val FStar.Pprint.concat>


; <Start encoding val FStar.Pprint.separate>

(declare-fun FStar.Pprint.separate (Term Term) Term)
(declare-fun Tm_arrow_eb90f8920e90546abfd27f57e97c7422 () Term)
(declare-fun FStar.Pprint.separate@tok () Term)

; </end encoding val FStar.Pprint.separate>


; <Start encoding val FStar.Pprint.concat_map>

(declare-fun Tm_arrow_ba485b08fe7f6ea3427f366967eb61bb (Term) Term)
(declare-fun FStar.Pprint.concat_map (Term Term Term) Term)

(declare-fun Tm_arrow_9027965ae68389afcb8ffd313ed8431e () Term)
(declare-fun FStar.Pprint.concat_map@tok () Term)

; </end encoding val FStar.Pprint.concat_map>


; <Start encoding val FStar.Pprint.separate_map>


(declare-fun FStar.Pprint.separate_map (Term Term Term Term) Term)

(declare-fun Tm_arrow_afa71873ada30b88e86746ba0816c698 () Term)
(declare-fun FStar.Pprint.separate_map@tok () Term)

; </end encoding val FStar.Pprint.separate_map>


; <Start encoding val FStar.Pprint.separate2>

(declare-fun FStar.Pprint.separate2 (Term Term Term) Term)
(declare-fun Tm_arrow_8d6af16eebdcd806abb4f18d1fad7f62 () Term)
(declare-fun FStar.Pprint.separate2@tok () Term)

; </end encoding val FStar.Pprint.separate2>


; <Start encoding val FStar.Pprint.optional>


(declare-fun FStar.Pprint.optional (Term Term Term) Term)

(declare-fun Tm_arrow_f99776764fec33728f01eff9910545c0 () Term)
(declare-fun FStar.Pprint.optional@tok () Term)

; </end encoding val FStar.Pprint.optional>


; <Start encoding val FStar.Pprint.lines>

(declare-fun FStar.Pprint.lines (Term) Term)
(declare-fun Tm_arrow_800f7873155a13cf11bfde311d66b27a () Term)
(declare-fun FStar.Pprint.lines@tok () Term)

; </end encoding val FStar.Pprint.lines>


; <Start encoding val FStar.Pprint.arbitrary_string>

(declare-fun FStar.Pprint.arbitrary_string (Term) Term)

(declare-fun FStar.Pprint.arbitrary_string@tok () Term)

; </end encoding val FStar.Pprint.arbitrary_string>


; <Start encoding val FStar.Pprint.words>

(declare-fun FStar.Pprint.words (Term) Term)

(declare-fun FStar.Pprint.words@tok () Term)

; </end encoding val FStar.Pprint.words>


; <Start encoding val FStar.Pprint.split>

(declare-fun Tm_arrow_fc1554671c39653ed371206100dcafd3 () Term)
(declare-fun FStar.Pprint.split (Term Term) Term)

(declare-fun Tm_arrow_89c390c93eb8654101fd8617085f3c1d () Term)
(declare-fun FStar.Pprint.split@tok () Term)

; </end encoding val FStar.Pprint.split>


; <Start encoding val FStar.Pprint.flow>

(declare-fun FStar.Pprint.flow (Term Term) Term)

(declare-fun FStar.Pprint.flow@tok () Term)

; </end encoding val FStar.Pprint.flow>


; <Start encoding val FStar.Pprint.flow_map>


(declare-fun FStar.Pprint.flow_map (Term Term Term Term) Term)


(declare-fun FStar.Pprint.flow_map@tok () Term)

; </end encoding val FStar.Pprint.flow_map>


; <Start encoding val FStar.Pprint.url>

(declare-fun FStar.Pprint.url (Term) Term)

(declare-fun FStar.Pprint.url@tok () Term)

; </end encoding val FStar.Pprint.url>


; <Start encoding val FStar.Pprint.align>

(declare-fun FStar.Pprint.align (Term) Term)

(declare-fun FStar.Pprint.align@tok () Term)

; </end encoding val FStar.Pprint.align>


; <Start encoding val FStar.Pprint.hang>

(declare-fun FStar.Pprint.hang (Term Term) Term)

(declare-fun FStar.Pprint.hang@tok () Term)

; </end encoding val FStar.Pprint.hang>


; <Start encoding val FStar.Pprint.prefix>

(declare-fun FStar.Pprint.prefix (Term Term Term Term) Term)
(declare-fun Tm_arrow_8515fd4d138effa981387c8407102abb () Term)
(declare-fun FStar.Pprint.prefix@tok () Term)

; </end encoding val FStar.Pprint.prefix>


; <Start encoding val FStar.Pprint.jump>

(declare-fun FStar.Pprint.jump (Term Term Term) Term)
(declare-fun Tm_arrow_e0d9f0929460140427c016e9e80b19b9 () Term)
(declare-fun FStar.Pprint.jump@tok () Term)

; </end encoding val FStar.Pprint.jump>


; <Start encoding val FStar.Pprint.infix>

(declare-fun FStar.Pprint.infix (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_b075afedf9e7cab5a543fb6eb3bed20f () Term)
(declare-fun FStar.Pprint.infix@tok () Term)

; </end encoding val FStar.Pprint.infix>


; <Start encoding val FStar.Pprint.surround>

(declare-fun FStar.Pprint.surround (Term Term Term Term Term) Term)

(declare-fun FStar.Pprint.surround@tok () Term)

; </end encoding val FStar.Pprint.surround>


; <Start encoding val FStar.Pprint.soft_surround>

(declare-fun FStar.Pprint.soft_surround (Term Term Term Term Term) Term)

(declare-fun FStar.Pprint.soft_surround@tok () Term)

; </end encoding val FStar.Pprint.soft_surround>


; <Start encoding val FStar.Pprint.surround_separate>

(declare-fun FStar.Pprint.surround_separate (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5438415d36bec335d2df2e0f427a0374 () Term)
(declare-fun FStar.Pprint.surround_separate@tok () Term)

; </end encoding val FStar.Pprint.surround_separate>


; <Start encoding val FStar.Pprint.surround_separate_map>


(declare-fun FStar.Pprint.surround_separate_map (Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_424c593564ee6d82472d4c43a6d0feee () Term)
(declare-fun FStar.Pprint.surround_separate_map@tok () Term)

; </end encoding val FStar.Pprint.surround_separate_map>


; <Start encoding val FStar.Pprint.pretty_string>

(declare-fun FStar.Pprint.pretty_string (Term Term Term) Term)
(declare-fun Tm_arrow_eaf070b7b90e17b9d3a7caa0761705b8 () Term)
(declare-fun FStar.Pprint.pretty_string@tok () Term)

; </end encoding val FStar.Pprint.pretty_string>


; <Start encoding val FStar.Pprint.render>

(declare-fun FStar.Pprint.render (Term) Term)
(declare-fun Tm_arrow_672e94f64f75b66d98089d9b8a8bdd46 () Term)
(declare-fun FStar.Pprint.render@tok () Term)

; </end encoding val FStar.Pprint.render>


; End Externals for interface FStar.Pprint


; Externals for interface FStar.Issue


; <Start encoding val FStar.Issue.issue>

(declare-fun FStar.Issue.issue () Term)

; </end encoding val FStar.Issue.issue>


; <Start encoding let issue_level_string>

(declare-fun FStar.Issue.issue_level_string () Term)
(declare-fun Tm_refine_aa8eedc0ecb86da30f7a24511f57030f () Term)

; </end encoding let issue_level_string>


; <Start encoding val FStar.Issue.message_of_issue>

(declare-fun FStar.Issue.message_of_issue (Term) Term)
(declare-fun Tm_arrow_93ee704a450339197db22b6850c14119 () Term)
(declare-fun FStar.Issue.message_of_issue@tok () Term)

; </end encoding val FStar.Issue.message_of_issue>


; <Start encoding val FStar.Issue.level_of_issue>

(declare-fun FStar.Issue.level_of_issue (Term) Term)
(declare-fun Tm_arrow_baa5bfeaffb7436a922fcee810b3f6e5 () Term)
(declare-fun FStar.Issue.level_of_issue@tok () Term)

; </end encoding val FStar.Issue.level_of_issue>


; <Start encoding val FStar.Issue.number_of_issue>

(declare-fun FStar.Issue.number_of_issue (Term) Term)
(declare-fun Tm_arrow_78394d1c43ffc2ecdd350b139696c115 () Term)
(declare-fun FStar.Issue.number_of_issue@tok () Term)

; </end encoding val FStar.Issue.number_of_issue>


; <Start encoding val FStar.Issue.range_of_issue>

(declare-fun FStar.Issue.range_of_issue (Term) Term)
(declare-fun Tm_arrow_72e8882c08b4ea92dd32d41519ff957b () Term)
(declare-fun FStar.Issue.range_of_issue@tok () Term)

; </end encoding val FStar.Issue.range_of_issue>


; <Start encoding val FStar.Issue.context_of_issue>

(declare-fun FStar.Issue.context_of_issue (Term) Term)
(declare-fun Tm_arrow_546b620b9af82be043f5b40b81574a85 () Term)
(declare-fun FStar.Issue.context_of_issue@tok () Term)

; </end encoding val FStar.Issue.context_of_issue>


; <Start encoding val FStar.Issue.render_issue>

(declare-fun FStar.Issue.render_issue (Term) Term)
(declare-fun Tm_arrow_ac5151aeda0379e1d6b8d444cd3f0526 () Term)
(declare-fun FStar.Issue.render_issue@tok () Term)

; </end encoding val FStar.Issue.render_issue>


; <Start encoding val FStar.Issue.mk_issue_doc>

(declare-fun FStar.Issue.mk_issue_doc (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_4a4df377687a551395a6d537c2452cc1 () Term)
(declare-fun FStar.Issue.mk_issue_doc@tok () Term)

; </end encoding val FStar.Issue.mk_issue_doc>


; <Start encoding let mk_issue>

(declare-fun FStar.Issue.mk_issue (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a1628df8c9319e78aab0e01f400423ed () Term)
(declare-fun FStar.Issue.mk_issue@tok () Term)

; </end encoding let mk_issue>


; End Externals for interface FStar.Issue


; Externals for interface FStar.Stubs.TypeChecker.Core


; <Start encoding type FStar.Stubs.TypeChecker.Core.tot_or_ghost>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.TypeChecker.Core.tot_or_ghost () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.TypeChecker.Core.E_Total () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.TypeChecker.Core.E_Total
(declare-fun FStar.Stubs.TypeChecker.Core.E_Total@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.TypeChecker.Core.E_Ghost () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.TypeChecker.Core.E_Ghost
(declare-fun FStar.Stubs.TypeChecker.Core.E_Ghost@tok () Term)

; <start constructor FStar.Stubs.TypeChecker.Core.tot_or_ghost>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.TypeChecker.Core.tot_or_ghost ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(= __@x0
FStar.Stubs.TypeChecker.Core.tot_or_ghost)))

; </end constructor FStar.Stubs.TypeChecker.Core.tot_or_ghost>


; <start constructor FStar.Stubs.TypeChecker.Core.E_Total>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.TypeChecker.Core.E_Total ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
107)
(= __@x0
FStar.Stubs.TypeChecker.Core.E_Total)))

; </end constructor FStar.Stubs.TypeChecker.Core.E_Total>


; <start constructor FStar.Stubs.TypeChecker.Core.E_Ghost>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.TypeChecker.Core.E_Ghost ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
109)
(= __@x0
FStar.Stubs.TypeChecker.Core.E_Ghost)))

; </end constructor FStar.Stubs.TypeChecker.Core.E_Ghost>


; </end encoding type FStar.Stubs.TypeChecker.Core.tot_or_ghost>


; <Start encoding assume FStar.Stubs.TypeChecker.Core.tot_or_ghost__uu___haseq>


; </end encoding assume FStar.Stubs.TypeChecker.Core.tot_or_ghost__uu___haseq>


; <Start encoding val FStar.Stubs.TypeChecker.Core.uu___is_E_Total>

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_E_Total (Term) Term)
(declare-fun Tm_arrow_28feb685f85e27d6180cee53571913aa () Term)
(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_E_Total@tok () Term)

; </end encoding val FStar.Stubs.TypeChecker.Core.uu___is_E_Total>


; <Skipped let uu___is_E_Total/>


; <Start encoding val FStar.Stubs.TypeChecker.Core.uu___is_E_Ghost>

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_E_Ghost (Term) Term)

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_E_Ghost@tok () Term)

; </end encoding val FStar.Stubs.TypeChecker.Core.uu___is_E_Ghost>


; <Skipped let uu___is_E_Ghost/>


; <Start encoding type FStar.Stubs.TypeChecker.Core.unfold_side>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.TypeChecker.Core.unfold_side () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.TypeChecker.Core.Left () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.TypeChecker.Core.Left
(declare-fun FStar.Stubs.TypeChecker.Core.Left@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.TypeChecker.Core.Right () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.TypeChecker.Core.Right
(declare-fun FStar.Stubs.TypeChecker.Core.Right@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.TypeChecker.Core.Both () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.TypeChecker.Core.Both
(declare-fun FStar.Stubs.TypeChecker.Core.Both@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.TypeChecker.Core.Neither () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.TypeChecker.Core.Neither
(declare-fun FStar.Stubs.TypeChecker.Core.Neither@tok () Term)

; <start constructor FStar.Stubs.TypeChecker.Core.unfold_side>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.TypeChecker.Core.unfold_side ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
114)
(= __@x0
FStar.Stubs.TypeChecker.Core.unfold_side)))

; </end constructor FStar.Stubs.TypeChecker.Core.unfold_side>


; <start constructor FStar.Stubs.TypeChecker.Core.Left>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.TypeChecker.Core.Left ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
120)
(= __@x0
FStar.Stubs.TypeChecker.Core.Left)))

; </end constructor FStar.Stubs.TypeChecker.Core.Left>


; <start constructor FStar.Stubs.TypeChecker.Core.Right>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.TypeChecker.Core.Right ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
122)
(= __@x0
FStar.Stubs.TypeChecker.Core.Right)))

; </end constructor FStar.Stubs.TypeChecker.Core.Right>


; <start constructor FStar.Stubs.TypeChecker.Core.Both>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.TypeChecker.Core.Both ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
124)
(= __@x0
FStar.Stubs.TypeChecker.Core.Both)))

; </end constructor FStar.Stubs.TypeChecker.Core.Both>


; <start constructor FStar.Stubs.TypeChecker.Core.Neither>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.TypeChecker.Core.Neither ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
126)
(= __@x0
FStar.Stubs.TypeChecker.Core.Neither)))

; </end constructor FStar.Stubs.TypeChecker.Core.Neither>


; </end encoding type FStar.Stubs.TypeChecker.Core.unfold_side>


; <Start encoding assume FStar.Stubs.TypeChecker.Core.unfold_side__uu___haseq>


; </end encoding assume FStar.Stubs.TypeChecker.Core.unfold_side__uu___haseq>


; <Start encoding val FStar.Stubs.TypeChecker.Core.uu___is_Left>

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_Left (Term) Term)
(declare-fun Tm_arrow_8ad3479bac3300a48f898c294856a452 () Term)
(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_Left@tok () Term)

; </end encoding val FStar.Stubs.TypeChecker.Core.uu___is_Left>


; <Skipped let uu___is_Left/>


; <Start encoding val FStar.Stubs.TypeChecker.Core.uu___is_Right>

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_Right (Term) Term)

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_Right@tok () Term)

; </end encoding val FStar.Stubs.TypeChecker.Core.uu___is_Right>


; <Skipped let uu___is_Right/>


; <Start encoding val FStar.Stubs.TypeChecker.Core.uu___is_Both>

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_Both (Term) Term)

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_Both@tok () Term)

; </end encoding val FStar.Stubs.TypeChecker.Core.uu___is_Both>


; <Skipped let uu___is_Both/>


; <Start encoding val FStar.Stubs.TypeChecker.Core.uu___is_Neither>

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_Neither (Term) Term)

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_Neither@tok () Term)

; </end encoding val FStar.Stubs.TypeChecker.Core.uu___is_Neither>


; <Skipped let uu___is_Neither/>


; End Externals for interface FStar.Stubs.TypeChecker.Core


; Externals for interface FStar.Stubs.Errors.Msg


; <Start encoding let error_message>

(declare-fun FStar.Stubs.Errors.Msg.error_message () Term)

; </end encoding let error_message>


; <Start encoding val FStar.Stubs.Errors.Msg.text>

(declare-fun FStar.Stubs.Errors.Msg.text (Term) Term)

(declare-fun FStar.Stubs.Errors.Msg.text@tok () Term)

; </end encoding val FStar.Stubs.Errors.Msg.text>


; <Start encoding val FStar.Stubs.Errors.Msg.sublist>

(declare-fun FStar.Stubs.Errors.Msg.sublist (Term Term) Term)

(declare-fun FStar.Stubs.Errors.Msg.sublist@tok () Term)

; </end encoding val FStar.Stubs.Errors.Msg.sublist>


; <Start encoding val FStar.Stubs.Errors.Msg.bulleted>

(declare-fun FStar.Stubs.Errors.Msg.bulleted (Term) Term)

(declare-fun FStar.Stubs.Errors.Msg.bulleted@tok () Term)

; </end encoding val FStar.Stubs.Errors.Msg.bulleted>


; <Start encoding val FStar.Stubs.Errors.Msg.mkmsg>

(declare-fun FStar.Stubs.Errors.Msg.mkmsg (Term) Term)
(declare-fun Tm_arrow_742ceb0b6d43128379fa1800142a023c () Term)
(declare-fun FStar.Stubs.Errors.Msg.mkmsg@tok () Term)

; </end encoding val FStar.Stubs.Errors.Msg.mkmsg>


; <Start encoding val FStar.Stubs.Errors.Msg.subdoc>

(declare-fun FStar.Stubs.Errors.Msg.subdoc (Term) Term)

(declare-fun FStar.Stubs.Errors.Msg.subdoc@tok () Term)

; </end encoding val FStar.Stubs.Errors.Msg.subdoc>


; <Start encoding val FStar.Stubs.Errors.Msg.renderdoc>

(declare-fun FStar.Stubs.Errors.Msg.renderdoc (Term) Term)

(declare-fun FStar.Stubs.Errors.Msg.renderdoc@tok () Term)

; </end encoding val FStar.Stubs.Errors.Msg.renderdoc>


; <Start encoding val FStar.Stubs.Errors.Msg.backtrace_doc>

(declare-fun FStar.Stubs.Errors.Msg.backtrace_doc (Term) Term)
(declare-fun Tm_arrow_4b1e31e13fd2dbfa31c2cce1a0d2083d () Term)
(declare-fun FStar.Stubs.Errors.Msg.backtrace_doc@tok () Term)

; </end encoding val FStar.Stubs.Errors.Msg.backtrace_doc>


; <Start encoding val FStar.Stubs.Errors.Msg.rendermsg>

(declare-fun FStar.Stubs.Errors.Msg.rendermsg (Term) Term)
(declare-fun Tm_arrow_0f8aa7390110b002d33168ab1d29eb5e () Term)
(declare-fun FStar.Stubs.Errors.Msg.rendermsg@tok () Term)

; </end encoding val FStar.Stubs.Errors.Msg.rendermsg>


; End Externals for interface FStar.Stubs.Errors.Msg


; Externals for interface FStar.Stubs.Tactics.Common


; <Start encoding datacon FStar.Stubs.Tactics.Common.NotAListLiteral for type Prims.exn>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Common.NotAListLiteral () Term)
;;;;;;;;;;;;;;;;Constructor base
(declare-fun FStar.Stubs.Tactics.Common.NotAListLiteral@base () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Common.NotAListLiteral
(declare-fun FStar.Stubs.Tactics.Common.NotAListLiteral@tok () Term)

; <start constructor FStar.Stubs.Tactics.Common.NotAListLiteral>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Common.NotAListLiteral ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
102)
(= __@x0
FStar.Stubs.Tactics.Common.NotAListLiteral)))

; </end constructor FStar.Stubs.Tactics.Common.NotAListLiteral>


; </end encoding datacon FStar.Stubs.Tactics.Common.NotAListLiteral for type Prims.exn>


; <Start encoding val FStar.Stubs.Tactics.Common.uu___is_NotAListLiteral>

(declare-fun FStar.Stubs.Tactics.Common.uu___is_NotAListLiteral (Term) Term)
(declare-fun Tm_arrow_81ab3356926b82578fcb92e97b412345 () Term)
(declare-fun FStar.Stubs.Tactics.Common.uu___is_NotAListLiteral@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Common.uu___is_NotAListLiteral>


; <Skipped let uu___is_NotAListLiteral/>


; <Start encoding datacon FStar.Stubs.Tactics.Common.TacticFailure for type Prims.exn>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Common.TacticFailure (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Tactics.Common.TacticFailure_uu___ (Term) Term)
;;;;;;;;;;;;;;;;Constructor base
(declare-fun FStar.Stubs.Tactics.Common.TacticFailure@base (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Common.TacticFailure
(declare-fun FStar.Stubs.Tactics.Common.TacticFailure@tok () Term)
(declare-fun Tm_arrow_10aa3b654b3fa877084793298bd2c1fc () Term)

; <start constructor FStar.Stubs.Tactics.Common.TacticFailure>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Common.TacticFailure ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
106)
(= __@x0
(FStar.Stubs.Tactics.Common.TacticFailure (FStar.Stubs.Tactics.Common.TacticFailure_uu___ __@x0)))))

; </end constructor FStar.Stubs.Tactics.Common.TacticFailure>


; </end encoding datacon FStar.Stubs.Tactics.Common.TacticFailure for type Prims.exn>


; <Start encoding val FStar.Stubs.Tactics.Common.uu___is_TacticFailure>

(declare-fun FStar.Stubs.Tactics.Common.uu___is_TacticFailure (Term) Term)

(declare-fun FStar.Stubs.Tactics.Common.uu___is_TacticFailure@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Common.uu___is_TacticFailure>


; <Skipped let uu___is_TacticFailure/>


; <Start encoding val FStar.Stubs.Tactics.Common.__proj__TacticFailure__item__uu___>

(declare-fun Tm_refine_30f8904aa237d24acf9aace65cbaa40d () Term)
(declare-fun FStar.Stubs.Tactics.Common.__proj__TacticFailure__item__uu___ (Term) Term)

(declare-fun Tm_arrow_7eb6bd8f5fc49d52c2c9c8f2dd3c567a () Term)
(declare-fun FStar.Stubs.Tactics.Common.__proj__TacticFailure__item__uu___@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Common.__proj__TacticFailure__item__uu___>


; <Skipped let __proj__TacticFailure__item__uu___/>


; <Start encoding datacon FStar.Stubs.Tactics.Common.SKIP for type Prims.exn>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Common.SKIP () Term)
;;;;;;;;;;;;;;;;Constructor base
(declare-fun FStar.Stubs.Tactics.Common.SKIP@base () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Common.SKIP
(declare-fun FStar.Stubs.Tactics.Common.SKIP@tok () Term)

; <start constructor FStar.Stubs.Tactics.Common.SKIP>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Common.SKIP ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
117)
(= __@x0
FStar.Stubs.Tactics.Common.SKIP)))

; </end constructor FStar.Stubs.Tactics.Common.SKIP>


; </end encoding datacon FStar.Stubs.Tactics.Common.SKIP for type Prims.exn>


; <Start encoding val FStar.Stubs.Tactics.Common.uu___is_SKIP>

(declare-fun FStar.Stubs.Tactics.Common.uu___is_SKIP (Term) Term)

(declare-fun FStar.Stubs.Tactics.Common.uu___is_SKIP@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Common.uu___is_SKIP>


; <Skipped let uu___is_SKIP/>


; End Externals for interface FStar.Stubs.Tactics.Common


; Externals for interface FStar.Stubs.Tactics.Types


; <Start encoding val FStar.Stubs.Tactics.Types.goal>

(declare-fun FStar.Stubs.Tactics.Types.goal () Term)

; </end encoding val FStar.Stubs.Tactics.Types.goal>


; <Start encoding val FStar.Stubs.Tactics.Types.proofstate>

(declare-fun FStar.Stubs.Tactics.Types.proofstate () Term)

; </end encoding val FStar.Stubs.Tactics.Types.proofstate>


; <Start encoding val FStar.Stubs.Tactics.Types.goals_of>

(declare-fun FStar.Stubs.Tactics.Types.goals_of (Term) Term)
(declare-fun Tm_arrow_fdfe159a02c2f6afefc6bf5885e11604 () Term)
(declare-fun FStar.Stubs.Tactics.Types.goals_of@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.goals_of>


; <Start encoding val FStar.Stubs.Tactics.Types.smt_goals_of>

(declare-fun FStar.Stubs.Tactics.Types.smt_goals_of (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.smt_goals_of@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.smt_goals_of>


; <Start encoding val FStar.Stubs.Tactics.Types.goal_env>

(declare-fun FStar.Stubs.Tactics.Types.goal_env (Term) Term)
(declare-fun Tm_arrow_31141c9dd83193809f05a8c783c41d68 () Term)
(declare-fun FStar.Stubs.Tactics.Types.goal_env@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.goal_env>


; <Start encoding val FStar.Stubs.Tactics.Types.goal_type>

(declare-fun FStar.Stubs.Tactics.Types.goal_type (Term) Term)
(declare-fun Tm_arrow_09c0f5bd92f653a857ae8e8f78bcd3dc () Term)
(declare-fun FStar.Stubs.Tactics.Types.goal_type@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.goal_type>


; <Start encoding val FStar.Stubs.Tactics.Types.goal_witness>

(declare-fun FStar.Stubs.Tactics.Types.goal_witness (Term) Term)
(declare-fun Tm_arrow_6cd27210e27c05ff825968bc6bf2188a () Term)
(declare-fun FStar.Stubs.Tactics.Types.goal_witness@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.goal_witness>


; <Start encoding val FStar.Stubs.Tactics.Types.is_guard>

(declare-fun FStar.Stubs.Tactics.Types.is_guard (Term) Term)
(declare-fun Tm_arrow_b9f4ed4f47608d8a57b28b62e7620cd6 () Term)
(declare-fun FStar.Stubs.Tactics.Types.is_guard@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.is_guard>


; <Start encoding val FStar.Stubs.Tactics.Types.get_label>

(declare-fun FStar.Stubs.Tactics.Types.get_label (Term) Term)
(declare-fun Tm_arrow_6f90bcff42642c2f6126e1856dbbb24e () Term)
(declare-fun FStar.Stubs.Tactics.Types.get_label@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.get_label>


; <Start encoding val FStar.Stubs.Tactics.Types.set_label>

(declare-fun FStar.Stubs.Tactics.Types.set_label (Term Term) Term)
(declare-fun Tm_arrow_8bcd15f0cfa61565564f083268fce719 () Term)
(declare-fun FStar.Stubs.Tactics.Types.set_label@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.set_label>


; <Start encoding val FStar.Stubs.Tactics.Types.incr_depth>

(declare-fun FStar.Stubs.Tactics.Types.incr_depth (Term) Term)
(declare-fun Tm_arrow_4baa9e22a8426ddb7c829d77e2a29c7f () Term)
(declare-fun FStar.Stubs.Tactics.Types.incr_depth@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.incr_depth>


; <Start encoding val FStar.Stubs.Tactics.Types.decr_depth>

(declare-fun FStar.Stubs.Tactics.Types.decr_depth (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.decr_depth@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.decr_depth>


; <Start encoding val FStar.Stubs.Tactics.Types.tracepoint>

(declare-fun FStar.Stubs.Tactics.Types.tracepoint (Term) Term)
(declare-fun Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f () Term)
(declare-fun Tm_arrow_c0fb9ba582b3414d839b2e294db9292c () Term)
(declare-fun FStar.Stubs.Tactics.Types.tracepoint@tok () Term)


; </end encoding val FStar.Stubs.Tactics.Types.tracepoint>


; <Start encoding val FStar.Stubs.Tactics.Types.set_proofstate_range>

(declare-fun FStar.Stubs.Tactics.Types.set_proofstate_range (Term Term) Term)
(declare-fun Tm_arrow_37afb34f073ac2915b6c2d174d9265a7 () Term)
(declare-fun FStar.Stubs.Tactics.Types.set_proofstate_range@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.set_proofstate_range>


; <Start encoding type FStar.Stubs.Tactics.Types.direction>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.direction () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.TopDown () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.TopDown
(declare-fun FStar.Stubs.Tactics.Types.TopDown@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.BottomUp () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.BottomUp
(declare-fun FStar.Stubs.Tactics.Types.BottomUp@tok () Term)

; <start constructor FStar.Stubs.Tactics.Types.direction>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.direction ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
133)
(= __@x0
FStar.Stubs.Tactics.Types.direction)))

; </end constructor FStar.Stubs.Tactics.Types.direction>


; <start constructor FStar.Stubs.Tactics.Types.TopDown>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.TopDown ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
139)
(= __@x0
FStar.Stubs.Tactics.Types.TopDown)))

; </end constructor FStar.Stubs.Tactics.Types.TopDown>


; <start constructor FStar.Stubs.Tactics.Types.BottomUp>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.BottomUp ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
141)
(= __@x0
FStar.Stubs.Tactics.Types.BottomUp)))

; </end constructor FStar.Stubs.Tactics.Types.BottomUp>


; </end encoding type FStar.Stubs.Tactics.Types.direction>


; <Start encoding assume FStar.Stubs.Tactics.Types.direction__uu___haseq>


; </end encoding assume FStar.Stubs.Tactics.Types.direction__uu___haseq>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_TopDown>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_TopDown (Term) Term)
(declare-fun Tm_arrow_9035aafb0268cd6540e6eeb00e64f81e () Term)
(declare-fun FStar.Stubs.Tactics.Types.uu___is_TopDown@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_TopDown>


; <Skipped let uu___is_TopDown/>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_BottomUp>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_BottomUp (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.uu___is_BottomUp@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_BottomUp>


; <Skipped let uu___is_BottomUp/>


; <Start encoding type FStar.Stubs.Tactics.Types.ctrl_flag>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.ctrl_flag () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.Continue () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.Continue
(declare-fun FStar.Stubs.Tactics.Types.Continue@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.Skip () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.Skip
(declare-fun FStar.Stubs.Tactics.Types.Skip@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.Abort () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.Abort
(declare-fun FStar.Stubs.Tactics.Types.Abort@tok () Term)

; <start constructor FStar.Stubs.Tactics.Types.ctrl_flag>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.ctrl_flag ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
146)
(= __@x0
FStar.Stubs.Tactics.Types.ctrl_flag)))

; </end constructor FStar.Stubs.Tactics.Types.ctrl_flag>


; <start constructor FStar.Stubs.Tactics.Types.Continue>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.Continue ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
152)
(= __@x0
FStar.Stubs.Tactics.Types.Continue)))

; </end constructor FStar.Stubs.Tactics.Types.Continue>


; <start constructor FStar.Stubs.Tactics.Types.Skip>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.Skip ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
154)
(= __@x0
FStar.Stubs.Tactics.Types.Skip)))

; </end constructor FStar.Stubs.Tactics.Types.Skip>


; <start constructor FStar.Stubs.Tactics.Types.Abort>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.Abort ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
156)
(= __@x0
FStar.Stubs.Tactics.Types.Abort)))

; </end constructor FStar.Stubs.Tactics.Types.Abort>


; </end encoding type FStar.Stubs.Tactics.Types.ctrl_flag>


; <Start encoding assume FStar.Stubs.Tactics.Types.ctrl_flag__uu___haseq>


; </end encoding assume FStar.Stubs.Tactics.Types.ctrl_flag__uu___haseq>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_Continue>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Continue (Term) Term)
(declare-fun Tm_arrow_e3dfe006e0bb26f56aa3f73f9ed8eb62 () Term)
(declare-fun FStar.Stubs.Tactics.Types.uu___is_Continue@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_Continue>


; <Skipped let uu___is_Continue/>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_Skip>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Skip (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Skip@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_Skip>


; <Skipped let uu___is_Skip/>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_Abort>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Abort (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Abort@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_Abort>


; <Skipped let uu___is_Abort/>


; <Start encoding type FStar.Stubs.Tactics.Types.guard_policy>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.guard_policy () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.Goal () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.Goal
(declare-fun FStar.Stubs.Tactics.Types.Goal@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.SMT () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.SMT
(declare-fun FStar.Stubs.Tactics.Types.SMT@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.SMTSync () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.SMTSync
(declare-fun FStar.Stubs.Tactics.Types.SMTSync@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.Force () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.Force
(declare-fun FStar.Stubs.Tactics.Types.Force@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.ForceSMT () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.ForceSMT
(declare-fun FStar.Stubs.Tactics.Types.ForceSMT@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.Drop () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.Drop
(declare-fun FStar.Stubs.Tactics.Types.Drop@tok () Term)

; <start constructor FStar.Stubs.Tactics.Types.guard_policy>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.guard_policy ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
163)
(= __@x0
FStar.Stubs.Tactics.Types.guard_policy)))

; </end constructor FStar.Stubs.Tactics.Types.guard_policy>


; <start constructor FStar.Stubs.Tactics.Types.Goal>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.Goal ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
169)
(= __@x0
FStar.Stubs.Tactics.Types.Goal)))

; </end constructor FStar.Stubs.Tactics.Types.Goal>


; <start constructor FStar.Stubs.Tactics.Types.SMT>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.SMT ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
171)
(= __@x0
FStar.Stubs.Tactics.Types.SMT)))

; </end constructor FStar.Stubs.Tactics.Types.SMT>


; <start constructor FStar.Stubs.Tactics.Types.SMTSync>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.SMTSync ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
173)
(= __@x0
FStar.Stubs.Tactics.Types.SMTSync)))

; </end constructor FStar.Stubs.Tactics.Types.SMTSync>


; <start constructor FStar.Stubs.Tactics.Types.Force>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.Force ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
175)
(= __@x0
FStar.Stubs.Tactics.Types.Force)))

; </end constructor FStar.Stubs.Tactics.Types.Force>


; <start constructor FStar.Stubs.Tactics.Types.ForceSMT>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.ForceSMT ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
177)
(= __@x0
FStar.Stubs.Tactics.Types.ForceSMT)))

; </end constructor FStar.Stubs.Tactics.Types.ForceSMT>


; <start constructor FStar.Stubs.Tactics.Types.Drop>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.Drop ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
179)
(= __@x0
FStar.Stubs.Tactics.Types.Drop)))

; </end constructor FStar.Stubs.Tactics.Types.Drop>


; </end encoding type FStar.Stubs.Tactics.Types.guard_policy>


; <Start encoding assume FStar.Stubs.Tactics.Types.guard_policy__uu___haseq>


; </end encoding assume FStar.Stubs.Tactics.Types.guard_policy__uu___haseq>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_Goal>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Goal (Term) Term)
(declare-fun Tm_arrow_6ed889b98ff192e7f7ad79278b84f018 () Term)
(declare-fun FStar.Stubs.Tactics.Types.uu___is_Goal@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_Goal>


; <Skipped let uu___is_Goal/>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_SMT>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_SMT (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.uu___is_SMT@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_SMT>


; <Skipped let uu___is_SMT/>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_SMTSync>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_SMTSync (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.uu___is_SMTSync@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_SMTSync>


; <Skipped let uu___is_SMTSync/>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_Force>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Force (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Force@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_Force>


; <Skipped let uu___is_Force/>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_ForceSMT>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_ForceSMT (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.uu___is_ForceSMT@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_ForceSMT>


; <Skipped let uu___is_ForceSMT/>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_Drop>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Drop (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Drop@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_Drop>


; <Skipped let uu___is_Drop/>


; <Start encoding val FStar.Stubs.Tactics.Types.non_informative_token>

(declare-fun FStar.Stubs.Tactics.Types.non_informative_token (Term Term) Term)
(declare-fun Tm_arrow_db2142966eaa849f2844e5e64560e291 () Term)
(declare-fun FStar.Stubs.Tactics.Types.non_informative_token@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.non_informative_token>


; <Start encoding val FStar.Stubs.Tactics.Types.subtyping_token>

(declare-fun FStar.Stubs.Tactics.Types.subtyping_token (Term Term Term) Term)
(declare-fun Tm_arrow_39f91d5aec75d4006e489b79c2d6c16c () Term)
(declare-fun FStar.Stubs.Tactics.Types.subtyping_token@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.subtyping_token>


; <Start encoding val FStar.Stubs.Tactics.Types.equiv_token>

(declare-fun FStar.Stubs.Tactics.Types.equiv_token (Term Term Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.equiv_token@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.equiv_token>


; <Start encoding val FStar.Stubs.Tactics.Types.typing_token>

(declare-fun FStar.Stubs.Tactics.Types.typing_token (Term Term Term) Term)
(declare-fun Tm_arrow_b82abfd864fd916809031a4e19332165 () Term)
(declare-fun FStar.Stubs.Tactics.Types.typing_token@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.typing_token>


; <Start encoding let issues>

(declare-fun FStar.Stubs.Tactics.Types.issues () Term)

; </end encoding let issues>


; <Start encoding val FStar.Stubs.Tactics.Types.tref>

(declare-fun FStar.Stubs.Tactics.Types.tref (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.tref@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.tref>


; End Externals for interface FStar.Stubs.Tactics.Types


; Externals for interface FStar.Stubs.Tactics.Result


; <Start encoding type FStar.Stubs.Tactics.Result.__result>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Result.__result (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Stubs.Tactics.Result.__result@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Result.Success (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Tactics.Result.Success_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Tactics.Result.Success_v (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Tactics.Result.Success_ps (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Result.Success
(declare-fun FStar.Stubs.Tactics.Result.Success@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Result.Failed (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Tactics.Result.Failed_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Tactics.Result.Failed_exn (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Tactics.Result.Failed_ps (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Result.Failed
(declare-fun FStar.Stubs.Tactics.Result.Failed@tok () Term)
(declare-fun Tm_arrow_b4f72aad67a83b7651f6cbeabda293bd () Term)
(declare-fun Tm_arrow_ed23e62103a6322a76c850acc838838e () Term)

; <start constructor FStar.Stubs.Tactics.Result.__result>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Result.__result ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Stubs.Tactics.Result.__result @x0))
 
;;no pats
:qid is-FStar.Stubs.Tactics.Result.__result))))

; </end constructor FStar.Stubs.Tactics.Result.__result>


; <start constructor FStar.Stubs.Tactics.Result.Success>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Result.Success ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
108)
(= __@x0
(FStar.Stubs.Tactics.Result.Success (FStar.Stubs.Tactics.Result.Success_a __@x0)
(FStar.Stubs.Tactics.Result.Success_v __@x0)
(FStar.Stubs.Tactics.Result.Success_ps __@x0)))))

; </end constructor FStar.Stubs.Tactics.Result.Success>


; <start constructor FStar.Stubs.Tactics.Result.Failed>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Result.Failed ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
113)
(= __@x0
(FStar.Stubs.Tactics.Result.Failed (FStar.Stubs.Tactics.Result.Failed_a __@x0)
(FStar.Stubs.Tactics.Result.Failed_exn __@x0)
(FStar.Stubs.Tactics.Result.Failed_ps __@x0)))))

; </end constructor FStar.Stubs.Tactics.Result.Failed>


; </end encoding type FStar.Stubs.Tactics.Result.__result>


; <Start encoding val FStar.Stubs.Tactics.Result.uu___is_Success>

(declare-fun FStar.Stubs.Tactics.Result.uu___is_Success (Term Term) Term)
(declare-fun Tm_arrow_6645d4122074ac8044bb1b5f135eaee8 () Term)
(declare-fun FStar.Stubs.Tactics.Result.uu___is_Success@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Result.uu___is_Success>


; <Skipped let uu___is_Success/>


; <Start encoding val FStar.Stubs.Tactics.Result.__proj__Success__item__v>

(declare-fun Tm_refine_b4c1e6949a3a57698645ab5be039dc6f (Term) Term)
(declare-fun FStar.Stubs.Tactics.Result.__proj__Success__item__v (Term Term) Term)

(declare-fun Tm_arrow_a778adeae3b2f20803ce4aae6d3d3c6d () Term)
(declare-fun FStar.Stubs.Tactics.Result.__proj__Success__item__v@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Result.__proj__Success__item__v>


; <Skipped let __proj__Success__item__v/>


; <Start encoding val FStar.Stubs.Tactics.Result.__proj__Success__item__ps>


(declare-fun FStar.Stubs.Tactics.Result.__proj__Success__item__ps (Term Term) Term)

(declare-fun Tm_arrow_a7938cd808916b4560d42e6706c15631 () Term)
(declare-fun FStar.Stubs.Tactics.Result.__proj__Success__item__ps@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Result.__proj__Success__item__ps>


; <Skipped let __proj__Success__item__ps/>


; <Start encoding val FStar.Stubs.Tactics.Result.uu___is_Failed>

(declare-fun FStar.Stubs.Tactics.Result.uu___is_Failed (Term Term) Term)

(declare-fun FStar.Stubs.Tactics.Result.uu___is_Failed@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Result.uu___is_Failed>


; <Skipped let uu___is_Failed/>


; <Start encoding val FStar.Stubs.Tactics.Result.__proj__Failed__item__exn>

(declare-fun Tm_refine_3e8cae0c9d54f7b2657be55ddd0643d7 (Term) Term)
(declare-fun FStar.Stubs.Tactics.Result.__proj__Failed__item__exn (Term Term) Term)

(declare-fun Tm_arrow_343463ac2c43a023370797ff20c81cf5 () Term)
(declare-fun FStar.Stubs.Tactics.Result.__proj__Failed__item__exn@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Result.__proj__Failed__item__exn>


; <Skipped let __proj__Failed__item__exn/>


; <Start encoding val FStar.Stubs.Tactics.Result.__proj__Failed__item__ps>


(declare-fun FStar.Stubs.Tactics.Result.__proj__Failed__item__ps (Term Term) Term)

(declare-fun Tm_arrow_2747a76e1f36cdc1944263efc5937cdb () Term)
(declare-fun FStar.Stubs.Tactics.Result.__proj__Failed__item__ps@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Result.__proj__Failed__item__ps>


; <Skipped let __proj__Failed__item__ps/>


; End Externals for interface FStar.Stubs.Tactics.Result


; Externals for module FStar.Monotonic.Pure


; <Start encoding let is_monotonic>

(declare-fun FStar.Monotonic.Pure.is_monotonic (Term Term) Term)

(declare-fun FStar.Monotonic.Pure.is_monotonic@tok () Term)

; </end encoding let is_monotonic>


; <Start encoding let elim_pure_wp_monotonicity>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Pure.elim_pure_wp_monotonicity (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Pure.elim_pure_wp_monotonicity@tok () Term)

; </end encoding let elim_pure_wp_monotonicity>


; <Start encoding let elim_pure_wp_monotonicity_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Pure.elim_pure_wp_monotonicity_forall (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Pure.elim_pure_wp_monotonicity_forall@tok () Term)

; </end encoding let elim_pure_wp_monotonicity_forall>


; <Start encoding let intro_pure_wp_monotonicity>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Pure.intro_pure_wp_monotonicity (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Pure.intro_pure_wp_monotonicity@tok () Term)

; </end encoding let intro_pure_wp_monotonicity>


; <Start encoding let as_pure_wp>

(declare-fun FStar.Monotonic.Pure.as_pure_wp (Term Term) Term)
(declare-fun Tm_refine_5578b11cc349512589a3d2a8bfe37c29 (Term Term) Term)
(declare-fun Tm_arrow_169997680175178f95069b947929b45b () Term)
(declare-fun FStar.Monotonic.Pure.as_pure_wp@tok () Term)


; </end encoding let as_pure_wp>


; <Start encoding let elim_pure>



(declare-fun Tm_arrow_61bb9550f39772f18eaab129c43c3788 (Term) Term)
(declare-fun Tm_abs_6ffc06f5d789cf42c73d4f163a977cc0 (Term Term) Term)
(declare-fun Tm_refine_9d7e1da4c8ccc98f1562bffecfa030b6 (Term Term) Term)



(declare-fun Tm_abs_735bfa0400a12573ed48312f042e45e7 (Term) Term)
(declare-fun Tm_arrow_c4804ca26ade2f3859400eebcb37ddbd (Term Term) Term)
(declare-fun FStar.Monotonic.Pure.elim_pure (Term Term Term Term) Term)











(declare-fun Tm_arrow_08f6df717f4cfecbf9659e86cd16d49b () Term)
(declare-fun FStar.Monotonic.Pure.elim_pure@tok () Term)












; </end encoding let elim_pure>


; End Externals for module FStar.Monotonic.Pure


; Externals for interface FStar.Tactics.Effect


; <Start encoding let tac_wp_t0>

(declare-fun FStar.Tactics.Effect.tac_wp_t0 (Term) Term)

(declare-fun FStar.Tactics.Effect.tac_wp_t0@tok () Term)
(declare-fun Tm_arrow_79c32bf125dc2af78993da96357547a4 (Term) Term)
(declare-fun Tm_arrow_6b294f3db0bcad9bb190c1392ab01385 (Term) Term)

; </end encoding let tac_wp_t0>


; <Start encoding let tac_wp_monotonic>

(declare-fun FStar.Tactics.Effect.tac_wp_monotonic (Term Term) Term)
(declare-fun Tm_arrow_586e511512340cebc0763f51dd24e52e () Term)
(declare-fun FStar.Tactics.Effect.tac_wp_monotonic@tok () Term)



; </end encoding let tac_wp_monotonic>


; <Start encoding let tac_wp_t>

(declare-fun FStar.Tactics.Effect.tac_wp_t (Term) Term)

(declare-fun FStar.Tactics.Effect.tac_wp_t@tok () Term)


(declare-fun Tm_refine_afae78805025dbab8b8be62e7a11c687 (Term) Term)

; </end encoding let tac_wp_t>


; <Start encoding let tac_repr>

(declare-fun FStar.Tactics.Effect.tac_repr (Term Term) Term)
(declare-fun Tm_arrow_3f33249eca490ba8c990fff289934593 () Term)
(declare-fun FStar.Tactics.Effect.tac_repr@tok () Term)
(declare-fun Non_total_Tm_arrow_ef31cf121fb3836b1822f35578f3a2c7 (Term Term) Term)

; </end encoding let tac_repr>


; <Start encoding let tac_return_wp>

(declare-fun FStar.Tactics.Effect.tac_return_wp (Term Term) Term)
(declare-fun Tm_arrow_d45e4c1a61d444b0cb436be42fdd8fff () Term)
(declare-fun FStar.Tactics.Effect.tac_return_wp@tok () Term)



(declare-fun Tm_abs_62c5eb272101ce5d3f5f190695a8c978 (Term Term) Term)

; </end encoding let tac_return_wp>


; <Start encoding let tac_return>

(declare-fun FStar.Tactics.Effect.tac_return (Term Term) Term)




(declare-fun Tm_arrow_57311ad25591b2a0d4e7a881591571c4 () Term)
(declare-fun FStar.Tactics.Effect.tac_return@tok () Term)




;;;;;;;;;;;;;;;;Imprecise function encoding
(declare-fun Tm_abs_FStar.Tactics.Effect_144 (Term Term) Term)

; </end encoding let tac_return>


; <Start encoding let tac_bind_wp>

(declare-fun Tm_arrow_615c284bf702a1fbef85424e39380642 (Term Term) Term)
(declare-fun FStar.Tactics.Effect.tac_bind_wp (Term Term Term Term) Term)

(declare-fun Tm_arrow_8fd6de47bf2be2d2417a26df2df3e1fa () Term)
(declare-fun FStar.Tactics.Effect.tac_bind_wp@tok () Term)



(declare-fun Tm_abs_79f810e0804f4454fdd99bc6bd3319e9 (Term Term Term Term) Term)


(declare-fun Tm_abs_18350866457823edafacef426e439b94 (Term Term Term Term) Term)

; </end encoding let tac_bind_wp>


; <Start encoding let tac_wp_compact>

(declare-fun FStar.Tactics.Effect.tac_wp_compact (Term Term) Term)
(declare-fun Tm_arrow_d630ba03ac64e20998a0b33887db7f1d () Term)
(declare-fun FStar.Tactics.Effect.tac_wp_compact@tok () Term)
(declare-fun Tm_arrow_1a36c778c34fcf235893cf9fa8e22d86 (Term) Term)



(declare-fun Tm_abs_0ba06e1220483cb697e09fd9eb53fda1 (Term Term Term) Term)

(declare-fun Tm_arrow_03e2759b21e31a5318d40a743e5bbb54 (Term) Term)
(declare-fun Tm_abs_817a13da54c634f81e0b2bf0c6db2fd9 (Term Term Term Term) Term)


(declare-fun Tm_arrow_c4594856dbe7e5b386d54cadda720877 (Term) Term)
(declare-fun Tm_abs_bee6b44d62d7b15a7c1a999c08dbdaa1 (Term Term) Term)

; </end encoding let tac_wp_compact>


; <Start encoding val FStar.Tactics.Effect.tac_bind_interleave_begin>

(declare-fun FStar.Tactics.Effect.tac_bind_interleave_begin (Dummy_sort) Term)

; </end encoding val FStar.Tactics.Effect.tac_bind_interleave_begin>


; <Skipped #push-options "--admit_smt_queries true"/>


; <Start encoding let tac_bind>


(declare-fun Tm_arrow_73ffef9431728db285f9b23266829750 (Term Term Term) Term)
(declare-fun FStar.Tactics.Effect.tac_bind (Term Term Term Term Term Term Term Term) Term)












(declare-fun Tm_abs_38525ace133de22e8b3b3636397a13cd (Term Term Term Term Term Term) Term)





(declare-fun Tm_abs_afd910fd71261e3939048d0e1004fda1 (Term Term Term Term) Term)
(declare-fun Tm_arrow_cbc1739ca78054f7e441cea306012951 () Term)
(declare-fun FStar.Tactics.Effect.tac_bind@tok () Term)




















;;;;;;;;;;;;;;;;Imprecise function encoding
(declare-fun Tm_abs_FStar.Tactics.Effect_239 (Term Term Term Term Term Term) Term)

; </end encoding let tac_bind>


; <Skipped #pop-options/>


; <Start encoding val FStar.Tactics.Effect.tac_bind_interleave_end>

(declare-fun FStar.Tactics.Effect.tac_bind_interleave_end (Dummy_sort) Term)

; </end encoding val FStar.Tactics.Effect.tac_bind_interleave_end>


; <Start encoding let tac_if_then_else_wp>

(declare-fun FStar.Tactics.Effect.tac_if_then_else_wp (Term Term Term Term) Term)
(declare-fun Tm_arrow_0d888f0d0310e06a23a044b7487ca9a3 () Term)
(declare-fun FStar.Tactics.Effect.tac_if_then_else_wp@tok () Term)


(declare-fun Tm_arrow_2bfa429e0c444d45072542e413efc1c1 (Term) Term)
(declare-fun Tm_abs_86d5c2428199615bc3f8f5172ed82af4 (Term Term Term Term) Term)

; </end encoding let tac_if_then_else_wp>


; <Start encoding let tac_if_then_else>

(declare-fun FStar.Tactics.Effect.tac_if_then_else (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_36fb4b5a399369ef643849e96611ebec () Term)
(declare-fun FStar.Tactics.Effect.tac_if_then_else@tok () Term)








(declare-fun Tm_abs_2fda180fbbce3bc00549b67fc601e0be (Term Term Term Term Term Term) Term)



(declare-fun Tm_abs_6ed68232224ac13a4995196b297d1f2b (Term Term Term Term) Term)

; </end encoding let tac_if_then_else>


; <Start encoding let tac_subcomp>


(declare-fun FStar.Tactics.Effect.tac_subcomp (Term Term Term Term) Term)
(declare-fun Tm_refine_9688035851d5c5523a806a1df19cb706 (Term Term) Term)

(declare-fun Tm_arrow_dc8ee65b5b33b14f497b382af4ab7512 () Term)
(declare-fun FStar.Tactics.Effect.tac_subcomp@tok () Term)


; </end encoding let tac_subcomp>


; <Start encoding let tac_close>



(declare-fun FStar.Tactics.Effect.tac_close (Term Term Term Term) Term)


(declare-fun Tm_arrow_ddae682ca2e9bd4cfa6e582c3cbda6bf () Term)
(declare-fun FStar.Tactics.Effect.tac_close@tok () Term)




(declare-fun Tm_abs_bd152fc5c12cc6aa125ccf543aa53813 (Term Term Term Term) Term)


(declare-fun Tm_abs_4a490b6642ec805995acda79bfbd79eb (Term Term Term) Term)

; </end encoding let tac_close>


; <Skipped layered_effect { TAC ... }/>


; <Skipped effect TacH a pre post = FStar.Tactics.Effect.TAC a/>


; <Skipped effect Tac a = FStar.Tactics.Effect.TacH a/>


; <Skipped effect TacS a = FStar.Tactics.Effect.TacH a/>


; <Skipped effect TacF a = FStar.Tactics.Effect.TacH a/>


; <Start encoding let lift_div_tac_wp>

(declare-fun FStar.Tactics.Effect.lift_div_tac_wp (Term Term) Term)
(declare-fun Tm_arrow_756b2c443a872ea2d839224a3f915862 () Term)
(declare-fun FStar.Tactics.Effect.lift_div_tac_wp@tok () Term)


(declare-fun Tm_abs_d19ed2c1cbcc251803f55dea9449b934 (Term Term Term) Term)

(declare-fun Tm_arrow_298f7ec24f68dbe551035ce3db5b5bdd (Term) Term)
(declare-fun Tm_abs_9c642aa783aefa5494cf2caad21c4825 (Term Term) Term)

; </end encoding let lift_div_tac_wp>


; <Start encoding let lift_div_tac>

(declare-fun Non_total_Tm_arrow_da9712c41bd4800828fa87c1bc605521 (Term Term) Term)
(declare-fun FStar.Tactics.Effect.lift_div_tac (Term Term Term) Term)







(declare-fun Tm_arrow_69a366f788903d83a59a723310249405 () Term)
(declare-fun FStar.Tactics.Effect.lift_div_tac@tok () Term)







;;;;;;;;;;;;;;;;Imprecise function encoding
(declare-fun Tm_abs_FStar.Tactics.Effect_326 (Term Term) Term)

; </end encoding let lift_div_tac>


; <Skipped sub_effect DIV ~> TAC/>


; <Start encoding let get>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Effect.get (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Effect.get@tok () Term)

; </end encoding let get>


; <Start encoding let raise>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Effect.raise (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Effect.raise@tok () Term)

; </end encoding let raise>


; <Start encoding val FStar.Tactics.Effect.with_tactic>

(declare-fun Non_total_Tm_arrow_0df358455d9ffa69782d20c171a72c48 () Term)
(declare-fun FStar.Tactics.Effect.with_tactic (Term Term) Term)

(declare-fun Tm_arrow_0f1a7b132563c41331d8b63d877642f4 () Term)
(declare-fun FStar.Tactics.Effect.with_tactic@tok () Term)

; </end encoding val FStar.Tactics.Effect.with_tactic>


; <Start encoding val FStar.Tactics.Effect.rewrite_with_tactic>


(declare-fun FStar.Tactics.Effect.rewrite_with_tactic (Term Term Term) Term)

(declare-fun Tm_arrow_f63ee5eb2c336987d9ae8086208589c0 () Term)
(declare-fun FStar.Tactics.Effect.rewrite_with_tactic@tok () Term)

; </end encoding val FStar.Tactics.Effect.rewrite_with_tactic>


; <Start encoding val FStar.Tactics.Effect.synth_by_tactic>


(declare-fun FStar.Tactics.Effect.synth_by_tactic (Term Term) Term)

(declare-fun Tm_arrow_8f10558f8b36216eec81f2c618b5024b () Term)
(declare-fun FStar.Tactics.Effect.synth_by_tactic@tok () Term)

; </end encoding val FStar.Tactics.Effect.synth_by_tactic>


; <Start encoding val FStar.Tactics.Effect.assert_by_tactic>


(declare-fun FStar.Tactics.Effect.assert_by_tactic (Term Term) Term)


(declare-fun Tm_arrow_62294304586082aabc8d32a2cb34b258 () Term)
(declare-fun FStar.Tactics.Effect.assert_by_tactic@tok () Term)


; </end encoding val FStar.Tactics.Effect.assert_by_tactic>


; <Start encoding val FStar.Tactics.Effect.by_tactic_seman>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Effect.by_tactic_seman (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Effect.by_tactic_seman@tok () Term)

; </end encoding val FStar.Tactics.Effect.by_tactic_seman>


; <Start encoding let assume_safe>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Effect.assume_safe (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Effect.assume_safe@tok () Term)

; </end encoding let assume_safe>


; <Start encoding let tac>

(declare-fun FStar.Tactics.Effect.tac (Term Term) Term)

(declare-fun FStar.Tactics.Effect.tac@tok () Term)
(declare-fun Non_total_Tm_arrow_d7d295746bb03506a91beb076c0c54c2 (Term Term) Term)

; </end encoding let tac>


; <Start encoding let tactic>

(declare-fun FStar.Tactics.Effect.tactic (Term) Term)

(declare-fun FStar.Tactics.Effect.tactic@tok () Term)

; </end encoding let tactic>


; <Start encoding val FStar.Tactics.Effect.preprocess_with>

(declare-fun Non_total_Tm_arrow_489c5cd52ce0bd6c500497b6a9d25763 () Term)
(declare-fun FStar.Tactics.Effect.preprocess_with (Term) Term)

(declare-fun Tm_arrow_11f5dabe45aec598b26a74d4ae177cec () Term)
(declare-fun FStar.Tactics.Effect.preprocess_with@tok () Term)

; </end encoding val FStar.Tactics.Effect.preprocess_with>


; <Start encoding val FStar.Tactics.Effect.postprocess_with>


(declare-fun FStar.Tactics.Effect.postprocess_with (Term) Term)

(declare-fun Tm_arrow_71902d217cf156a1346c71f86a0ea184 () Term)
(declare-fun FStar.Tactics.Effect.postprocess_with@tok () Term)

; </end encoding val FStar.Tactics.Effect.postprocess_with>


; <Start encoding val FStar.Tactics.Effect.postprocess_for_extraction_with>


(declare-fun FStar.Tactics.Effect.postprocess_for_extraction_with (Term) Term)


(declare-fun FStar.Tactics.Effect.postprocess_for_extraction_with@tok () Term)

; </end encoding val FStar.Tactics.Effect.postprocess_for_extraction_with>


; <Skipped #set-options "--no_tactics"/>


; <Start encoding val FStar.Tactics.Effect.unfold_with_tactic>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Effect.unfold_with_tactic (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Effect.unfold_with_tactic@tok () Term)

; </end encoding val FStar.Tactics.Effect.unfold_with_tactic>


; <Start encoding val FStar.Tactics.Effect.unfold_rewrite_with_tactic>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Effect.unfold_rewrite_with_tactic (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Effect.unfold_rewrite_with_tactic@tok () Term)

; </end encoding val FStar.Tactics.Effect.unfold_rewrite_with_tactic>


; End Externals for interface FStar.Tactics.Effect


; Externals for interface FStar.Tactics.Typeclasses


; <Start encoding val FStar.Tactics.Typeclasses.tcclass>

(declare-fun FStar.Tactics.Typeclasses.tcclass (Dummy_sort) Term)

; </end encoding val FStar.Tactics.Typeclasses.tcclass>


; <Start encoding val FStar.Tactics.Typeclasses.tcinstance>

(declare-fun FStar.Tactics.Typeclasses.tcinstance (Dummy_sort) Term)

; </end encoding val FStar.Tactics.Typeclasses.tcinstance>


; <Start encoding val FStar.Tactics.Typeclasses.fundeps>

(declare-fun FStar.Tactics.Typeclasses.fundeps (Term) Term)

(declare-fun FStar.Tactics.Typeclasses.fundeps@tok () Term)

; </end encoding val FStar.Tactics.Typeclasses.fundeps>


; <Start encoding val FStar.Tactics.Typeclasses.no_method>

(declare-fun FStar.Tactics.Typeclasses.no_method (Dummy_sort) Term)

; </end encoding val FStar.Tactics.Typeclasses.no_method>


; <Start encoding val FStar.Tactics.Typeclasses.tcresolve>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Typeclasses.tcresolve (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Typeclasses.tcresolve@tok () Term)

; </end encoding val FStar.Tactics.Typeclasses.tcresolve>


; <Start encoding val FStar.Tactics.Typeclasses.mk_class>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Typeclasses.mk_class (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Typeclasses.mk_class@tok () Term)

; </end encoding val FStar.Tactics.Typeclasses.mk_class>


; <Start encoding let solve>

(declare-fun FStar.Tactics.Typeclasses.solve (Term Term) Term)

(declare-fun FStar.Tactics.Typeclasses.solve@tok () Term)

; </end encoding let solve>


; End Externals for interface FStar.Tactics.Typeclasses


; Externals for interface FStar.Tactics.MApply0


; <Start encoding val FStar.Tactics.MApply0.push1>


(declare-fun FStar.Tactics.MApply0.push1 (Term Term Term Term) Term)

(declare-fun Tm_arrow_72d7db1b0b470fb0bc85c2b74a2a0f95 () Term)
(declare-fun FStar.Tactics.MApply0.push1@tok () Term)

; </end encoding val FStar.Tactics.MApply0.push1>


; <Start encoding val FStar.Tactics.MApply0.push1'>

(declare-fun FStar.Tactics.MApply0.push1_ (Term Term Term Term) Term)

(declare-fun FStar.Tactics.MApply0.push1_@tok () Term)

; </end encoding val FStar.Tactics.MApply0.push1'>


; <Start encoding val FStar.Tactics.MApply0.mapply0>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.MApply0.mapply0 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.MApply0.mapply0@tok () Term)

; </end encoding val FStar.Tactics.MApply0.mapply0>


; End Externals for interface FStar.Tactics.MApply0


; Externals for module FStar.Sealed.Inhabited


; <Start encoding let sealed_>

(declare-fun FStar.Sealed.Inhabited.sealed_ (Term Term) Term)

(declare-fun FStar.Sealed.Inhabited.sealed_@tok () Term)

; </end encoding let sealed_>


; <Start encoding let is_sealed>

(declare-fun FStar.Sealed.Inhabited.is_sealed (Term Term Term) Term)
(declare-fun Tm_arrow_7b4cc4d4df9da58519ba6828186ddd69 () Term)
(declare-fun FStar.Sealed.Inhabited.is_sealed@tok () Term)

; </end encoding let is_sealed>


; <Start encoding let sealed>

(declare-fun FStar.Sealed.Inhabited.sealed (Term Term) Term)

(declare-fun FStar.Sealed.Inhabited.sealed@tok () Term)
(declare-fun Tm_refine_25fe9861b42cf97d961ff4c8f44eb399 (Term Term) Term)

; </end encoding let sealed>


; <Start encoding let seal>

(declare-fun FStar.Sealed.Inhabited.seal (Term Term Term) Term)
(declare-fun Tm_arrow_4cdc2d8c9a72a03857fe78dec70286c9 () Term)
(declare-fun FStar.Sealed.Inhabited.seal@tok () Term)

; </end encoding let seal>


; <Start encoding let sealed_singleton>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Sealed.Inhabited.sealed_singleton (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Sealed.Inhabited.sealed_singleton@tok () Term)

; </end encoding let sealed_singleton>


; End Externals for module FStar.Sealed.Inhabited


; Externals for interface FStar.Stubs.Syntax.Syntax


; <Start encoding type FStar.Stubs.Syntax.Syntax.subst_elt>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Syntax.Syntax.subst_elt () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Syntax.Syntax.DB (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Syntax.Syntax.DB__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Syntax.Syntax.DB__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Syntax.Syntax.DB
(declare-fun FStar.Stubs.Syntax.Syntax.DB@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Syntax.Syntax.DT (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Syntax.Syntax.DT__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Syntax.Syntax.DT__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Syntax.Syntax.DT
(declare-fun FStar.Stubs.Syntax.Syntax.DT@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Syntax.Syntax.NM (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Syntax.Syntax.NM__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Syntax.Syntax.NM__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Syntax.Syntax.NM
(declare-fun FStar.Stubs.Syntax.Syntax.NM@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Syntax.Syntax.NT (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Syntax.Syntax.NT__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Syntax.Syntax.NT__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Syntax.Syntax.NT
(declare-fun FStar.Stubs.Syntax.Syntax.NT@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Syntax.Syntax.UN (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Syntax.Syntax.UN__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Syntax.Syntax.UN__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Syntax.Syntax.UN
(declare-fun FStar.Stubs.Syntax.Syntax.UN@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Syntax.Syntax.UD (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Syntax.Syntax.UD__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Syntax.Syntax.UD__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Syntax.Syntax.UD
(declare-fun FStar.Stubs.Syntax.Syntax.UD@tok () Term)
(declare-fun Tm_arrow_59b160f9db6fa0b43efe141e1871d73d () Term)
(declare-fun Tm_arrow_246b825286743a478677ae7292aeffe2 () Term)
(declare-fun Tm_arrow_e8e4e72698c1da80b99f595602967f71 () Term)
(declare-fun Tm_arrow_46d3e542aa55b7cc03ac081a0f8a9530 () Term)
(declare-fun Tm_arrow_22c6c9dfa3dc835cbf92ac1f80a1d093 () Term)
(declare-fun Tm_arrow_9b76295b547a658a432d0fb98988023c () Term)

; <start constructor FStar.Stubs.Syntax.Syntax.subst_elt>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Syntax.Syntax.subst_elt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(= __@x0
FStar.Stubs.Syntax.Syntax.subst_elt)))

; </end constructor FStar.Stubs.Syntax.Syntax.subst_elt>


; <start constructor FStar.Stubs.Syntax.Syntax.DB>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Syntax.Syntax.DB ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
107)
(= __@x0
(FStar.Stubs.Syntax.Syntax.DB (FStar.Stubs.Syntax.Syntax.DB__0 __@x0)
(FStar.Stubs.Syntax.Syntax.DB__1 __@x0)))))

; </end constructor FStar.Stubs.Syntax.Syntax.DB>


; <start constructor FStar.Stubs.Syntax.Syntax.DT>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Syntax.Syntax.DT ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
112)
(= __@x0
(FStar.Stubs.Syntax.Syntax.DT (FStar.Stubs.Syntax.Syntax.DT__0 __@x0)
(FStar.Stubs.Syntax.Syntax.DT__1 __@x0)))))

; </end constructor FStar.Stubs.Syntax.Syntax.DT>


; <start constructor FStar.Stubs.Syntax.Syntax.NM>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Syntax.Syntax.NM ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
117)
(= __@x0
(FStar.Stubs.Syntax.Syntax.NM (FStar.Stubs.Syntax.Syntax.NM__0 __@x0)
(FStar.Stubs.Syntax.Syntax.NM__1 __@x0)))))

; </end constructor FStar.Stubs.Syntax.Syntax.NM>


; <start constructor FStar.Stubs.Syntax.Syntax.NT>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Syntax.Syntax.NT ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
122)
(= __@x0
(FStar.Stubs.Syntax.Syntax.NT (FStar.Stubs.Syntax.Syntax.NT__0 __@x0)
(FStar.Stubs.Syntax.Syntax.NT__1 __@x0)))))

; </end constructor FStar.Stubs.Syntax.Syntax.NT>


; <start constructor FStar.Stubs.Syntax.Syntax.UN>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Syntax.Syntax.UN ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
127)
(= __@x0
(FStar.Stubs.Syntax.Syntax.UN (FStar.Stubs.Syntax.Syntax.UN__0 __@x0)
(FStar.Stubs.Syntax.Syntax.UN__1 __@x0)))))

; </end constructor FStar.Stubs.Syntax.Syntax.UN>


; <start constructor FStar.Stubs.Syntax.Syntax.UD>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Syntax.Syntax.UD ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
132)
(= __@x0
(FStar.Stubs.Syntax.Syntax.UD (FStar.Stubs.Syntax.Syntax.UD__0 __@x0)
(FStar.Stubs.Syntax.Syntax.UD__1 __@x0)))))

; </end constructor FStar.Stubs.Syntax.Syntax.UD>


; </end encoding type FStar.Stubs.Syntax.Syntax.subst_elt>


; <Start encoding val FStar.Stubs.Syntax.Syntax.uu___is_DB>

(declare-fun FStar.Stubs.Syntax.Syntax.uu___is_DB (Term) Term)
(declare-fun Tm_arrow_ff864b6401b5fc78e14a15c40c1b4753 () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.uu___is_DB@tok () Term)

; </end encoding val FStar.Stubs.Syntax.Syntax.uu___is_DB>


; <Skipped let uu___is_DB/>


; <Start encoding val FStar.Stubs.Syntax.Syntax.__proj__DB__item___0>

(declare-fun Tm_refine_a60c1955d846f28c14f0dccba675d567 () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__DB__item___0 (Term) Term)

(declare-fun Tm_arrow_fbe5c1d2ec49b638fafab35efe4cb7fc () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__DB__item___0@tok () Term)

; </end encoding val FStar.Stubs.Syntax.Syntax.__proj__DB__item___0>


; <Skipped let __proj__DB__item___0/>


; <Start encoding val FStar.Stubs.Syntax.Syntax.__proj__DB__item___1>


(declare-fun FStar.Stubs.Syntax.Syntax.__proj__DB__item___1 (Term) Term)

(declare-fun Tm_arrow_521de771e6fe8c8bc30da9efbdc9462b () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__DB__item___1@tok () Term)

; </end encoding val FStar.Stubs.Syntax.Syntax.__proj__DB__item___1>


; <Skipped let __proj__DB__item___1/>


; <Start encoding val FStar.Stubs.Syntax.Syntax.uu___is_DT>

(declare-fun FStar.Stubs.Syntax.Syntax.uu___is_DT (Term) Term)

(declare-fun FStar.Stubs.Syntax.Syntax.uu___is_DT@tok () Term)

; </end encoding val FStar.Stubs.Syntax.Syntax.uu___is_DT>


; <Skipped let uu___is_DT/>


; <Start encoding val FStar.Stubs.Syntax.Syntax.__proj__DT__item___0>

(declare-fun Tm_refine_ae77d74f5b6921008dc31af9e75a50f5 () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__DT__item___0 (Term) Term)

(declare-fun Tm_arrow_ec80e358e0b6c3126a190adc2e7ed82f () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__DT__item___0@tok () Term)

; </end encoding val FStar.Stubs.Syntax.Syntax.__proj__DT__item___0>


; <Skipped let __proj__DT__item___0/>


; <Start encoding val FStar.Stubs.Syntax.Syntax.__proj__DT__item___1>


(declare-fun FStar.Stubs.Syntax.Syntax.__proj__DT__item___1 (Term) Term)

(declare-fun Tm_arrow_a475afa5fed9c441da094d38434953f3 () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__DT__item___1@tok () Term)

; </end encoding val FStar.Stubs.Syntax.Syntax.__proj__DT__item___1>


; <Skipped let __proj__DT__item___1/>


; <Start encoding val FStar.Stubs.Syntax.Syntax.uu___is_NM>

(declare-fun FStar.Stubs.Syntax.Syntax.uu___is_NM (Term) Term)

(declare-fun FStar.Stubs.Syntax.Syntax.uu___is_NM@tok () Term)

; </end encoding val FStar.Stubs.Syntax.Syntax.uu___is_NM>


; <Skipped let uu___is_NM/>


; <Start encoding val FStar.Stubs.Syntax.Syntax.__proj__NM__item___0>

(declare-fun Tm_refine_0267269f45d6fd12cdc74fb6d004d04b () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__NM__item___0 (Term) Term)

(declare-fun Tm_arrow_af330ae0a0f5e1ff37e5e1285845b0d0 () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__NM__item___0@tok () Term)

; </end encoding val FStar.Stubs.Syntax.Syntax.__proj__NM__item___0>


; <Skipped let __proj__NM__item___0/>


; <Start encoding val FStar.Stubs.Syntax.Syntax.__proj__NM__item___1>


(declare-fun FStar.Stubs.Syntax.Syntax.__proj__NM__item___1 (Term) Term)

(declare-fun Tm_arrow_e5d6161c1e6c19b7586b9d39cf764b0b () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__NM__item___1@tok () Term)

; </end encoding val FStar.Stubs.Syntax.Syntax.__proj__NM__item___1>


; <Skipped let __proj__NM__item___1/>


; <Start encoding val FStar.Stubs.Syntax.Syntax.uu___is_NT>

(declare-fun FStar.Stubs.Syntax.Syntax.uu___is_NT (Term) Term)

(declare-fun FStar.Stubs.Syntax.Syntax.uu___is_NT@tok () Term)

; </end encoding val FStar.Stubs.Syntax.Syntax.uu___is_NT>


; <Skipped let uu___is_NT/>


; <Start encoding val FStar.Stubs.Syntax.Syntax.__proj__NT__item___0>

(declare-fun Tm_refine_99c151968ce40534e3fb9a4c963b1a19 () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__NT__item___0 (Term) Term)

(declare-fun Tm_arrow_982642367e66b4fc9650795f441f7683 () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__NT__item___0@tok () Term)

; </end encoding val FStar.Stubs.Syntax.Syntax.__proj__NT__item___0>


; <Skipped let __proj__NT__item___0/>


; <Start encoding val FStar.Stubs.Syntax.Syntax.__proj__NT__item___1>


(declare-fun FStar.Stubs.Syntax.Syntax.__proj__NT__item___1 (Term) Term)

(declare-fun Tm_arrow_f91e316d0b616017bb48bb979a6cf38e () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__NT__item___1@tok () Term)

; </end encoding val FStar.Stubs.Syntax.Syntax.__proj__NT__item___1>


; <Skipped let __proj__NT__item___1/>


; <Start encoding val FStar.Stubs.Syntax.Syntax.uu___is_UN>

(declare-fun FStar.Stubs.Syntax.Syntax.uu___is_UN (Term) Term)

(declare-fun FStar.Stubs.Syntax.Syntax.uu___is_UN@tok () Term)

; </end encoding val FStar.Stubs.Syntax.Syntax.uu___is_UN>


; <Skipped let uu___is_UN/>


; <Start encoding val FStar.Stubs.Syntax.Syntax.__proj__UN__item___0>

(declare-fun Tm_refine_7f643c5eb6d5b9ca17fe4c5e0fdbe65e () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__UN__item___0 (Term) Term)

(declare-fun Tm_arrow_d5a928ef007e0924ae61bff0f755601a () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__UN__item___0@tok () Term)

; </end encoding val FStar.Stubs.Syntax.Syntax.__proj__UN__item___0>


; <Skipped let __proj__UN__item___0/>


; <Start encoding val FStar.Stubs.Syntax.Syntax.__proj__UN__item___1>


(declare-fun FStar.Stubs.Syntax.Syntax.__proj__UN__item___1 (Term) Term)

(declare-fun Tm_arrow_0affefa4e4e707cb5f8472e443aa50ab () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__UN__item___1@tok () Term)

; </end encoding val FStar.Stubs.Syntax.Syntax.__proj__UN__item___1>


; <Skipped let __proj__UN__item___1/>


; <Start encoding val FStar.Stubs.Syntax.Syntax.uu___is_UD>

(declare-fun FStar.Stubs.Syntax.Syntax.uu___is_UD (Term) Term)

(declare-fun FStar.Stubs.Syntax.Syntax.uu___is_UD@tok () Term)

; </end encoding val FStar.Stubs.Syntax.Syntax.uu___is_UD>


; <Skipped let uu___is_UD/>


; <Start encoding val FStar.Stubs.Syntax.Syntax.__proj__UD__item___0>

(declare-fun Tm_refine_c8eb10759a737b8258f5bbb6f7ed1381 () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__UD__item___0 (Term) Term)

(declare-fun Tm_arrow_d278c048d3a2513022fba9cbd2b84968 () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__UD__item___0@tok () Term)

; </end encoding val FStar.Stubs.Syntax.Syntax.__proj__UD__item___0>


; <Skipped let __proj__UD__item___0/>


; <Start encoding val FStar.Stubs.Syntax.Syntax.__proj__UD__item___1>


(declare-fun FStar.Stubs.Syntax.Syntax.__proj__UD__item___1 (Term) Term)

(declare-fun Tm_arrow_70d9cc9e254749c84727be5bbadd656e () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__UD__item___1@tok () Term)

; </end encoding val FStar.Stubs.Syntax.Syntax.__proj__UD__item___1>


; <Skipped let __proj__UD__item___1/>


; <Start encoding let subst_t>

(declare-fun FStar.Stubs.Syntax.Syntax.subst_t () Term)

; </end encoding let subst_t>


; <Start encoding let match_returns_ascription>

(declare-fun FStar.Stubs.Syntax.Syntax.match_returns_ascription () Term)

; </end encoding let match_returns_ascription>


; End Externals for interface FStar.Stubs.Syntax.Syntax


; Externals for interface FStar.Stubs.Reflection.V2.Data


; <Start encoding let ppname_t>

(declare-fun FStar.Stubs.Reflection.V2.Data.ppname_t () Term)

; </end encoding let ppname_t>


; <Start encoding let as_ppname>

(declare-fun FStar.Stubs.Reflection.V2.Data.as_ppname (Term) Term)
(declare-fun Tm_arrow_5b573696ae2f7ec9d51570a3337ac496 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.as_ppname@tok () Term)

; </end encoding let as_ppname>


; <Start encoding type FStar.Stubs.Reflection.V2.Data.vconst>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.vconst () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Unit () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.C_Unit
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Unit@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Int (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Int__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.C_Int
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Int@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.C_True () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.C_True
(declare-fun FStar.Stubs.Reflection.V2.Data.C_True@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.C_False () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.C_False
(declare-fun FStar.Stubs.Reflection.V2.Data.C_False@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.C_String (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.C_String__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.C_String
(declare-fun FStar.Stubs.Reflection.V2.Data.C_String@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Range (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Range__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.C_Range
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Range@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Reify () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.C_Reify
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Reify@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Reflect (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Reflect__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.C_Reflect
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Reflect@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Real (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Real__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.C_Real
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Real@tok () Term)
(declare-fun Tm_arrow_a7c0c38a63b643be84a50bf5e1998727 () Term)
(declare-fun Tm_arrow_96d1f949b8f9c876a6b2706ef00131dc () Term)
(declare-fun Tm_arrow_6b540068312468d09d41569e77933600 () Term)
(declare-fun Tm_arrow_7b5cc576f4e46af5d1e44c84309d6afe () Term)


; <start constructor FStar.Stubs.Reflection.V2.Data.vconst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.vconst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
103)
(= __@x0
FStar.Stubs.Reflection.V2.Data.vconst)))

; </end constructor FStar.Stubs.Reflection.V2.Data.vconst>


; <start constructor FStar.Stubs.Reflection.V2.Data.C_Unit>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.C_Unit ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
109)
(= __@x0
FStar.Stubs.Reflection.V2.Data.C_Unit)))

; </end constructor FStar.Stubs.Reflection.V2.Data.C_Unit>


; <start constructor FStar.Stubs.Reflection.V2.Data.C_Int>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.C_Int ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
111)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.C_Int (FStar.Stubs.Reflection.V2.Data.C_Int__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.C_Int>


; <start constructor FStar.Stubs.Reflection.V2.Data.C_True>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.C_True ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
116)
(= __@x0
FStar.Stubs.Reflection.V2.Data.C_True)))

; </end constructor FStar.Stubs.Reflection.V2.Data.C_True>


; <start constructor FStar.Stubs.Reflection.V2.Data.C_False>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.C_False ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
118)
(= __@x0
FStar.Stubs.Reflection.V2.Data.C_False)))

; </end constructor FStar.Stubs.Reflection.V2.Data.C_False>


; <start constructor FStar.Stubs.Reflection.V2.Data.C_String>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.C_String ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
120)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.C_String (FStar.Stubs.Reflection.V2.Data.C_String__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.C_String>


; <start constructor FStar.Stubs.Reflection.V2.Data.C_Range>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.C_Range ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
125)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.C_Range (FStar.Stubs.Reflection.V2.Data.C_Range__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.C_Range>


; <start constructor FStar.Stubs.Reflection.V2.Data.C_Reify>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.C_Reify ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
130)
(= __@x0
FStar.Stubs.Reflection.V2.Data.C_Reify)))

; </end constructor FStar.Stubs.Reflection.V2.Data.C_Reify>


; <start constructor FStar.Stubs.Reflection.V2.Data.C_Reflect>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.C_Reflect ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
132)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.C_Reflect (FStar.Stubs.Reflection.V2.Data.C_Reflect__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.C_Reflect>


; <start constructor FStar.Stubs.Reflection.V2.Data.C_Real>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.C_Real ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
137)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.C_Real (FStar.Stubs.Reflection.V2.Data.C_Real__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.C_Real>


; </end encoding type FStar.Stubs.Reflection.V2.Data.vconst>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_Unit>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_Unit (Term) Term)
(declare-fun Tm_arrow_d035a9e48bd049715b37c1633fcfbaef () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_Unit@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_Unit>


; <Skipped let uu___is_C_Unit/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_Int>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_Int (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_Int@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_Int>


; <Skipped let uu___is_C_Int/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Int__item___0>

(declare-fun Tm_refine_418dc7105fe93def0897ac9652872c5e () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Int__item___0 (Term) Term)

(declare-fun Tm_arrow_f8983dc900d20bc309323eff0264761a () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Int__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Int__item___0>


; <Skipped let __proj__C_Int__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_True>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_True (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_True@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_True>


; <Skipped let uu___is_C_True/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_False>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_False (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_False@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_False>


; <Skipped let uu___is_C_False/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_String>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_String (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_String@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_String>


; <Skipped let uu___is_C_String/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_String__item___0>

(declare-fun Tm_refine_7df21076da548fc4d6b8c52c485d3bab () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_String__item___0 (Term) Term)

(declare-fun Tm_arrow_bb851f46d45e0bca86fdc7181db1541f () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_String__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_String__item___0>


; <Skipped let __proj__C_String__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_Range>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_Range (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_Range@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_Range>


; <Skipped let uu___is_C_Range/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Range__item___0>

(declare-fun Tm_refine_77fa0f7914797f518561cfee6d1d9ee7 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Range__item___0 (Term) Term)

(declare-fun Tm_arrow_1115f0c366d06f9173da38fe7678ea14 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Range__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Range__item___0>


; <Skipped let __proj__C_Range__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_Reify>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_Reify (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_Reify@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_Reify>


; <Skipped let uu___is_C_Reify/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_Reflect>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_Reflect (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_Reflect@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_Reflect>


; <Skipped let uu___is_C_Reflect/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Reflect__item___0>

(declare-fun Tm_refine_9030914e45d85a046cc0a6fdb9222232 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Reflect__item___0 (Term) Term)

(declare-fun Tm_arrow_d623e14498d42a3988212430a0b0668f () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Reflect__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Reflect__item___0>


; <Skipped let __proj__C_Reflect__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_Real>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_Real (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_Real@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_Real>


; <Skipped let uu___is_C_Real/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Real__item___0>

(declare-fun Tm_refine_fe52390e6170c16c172c68852b19e4e7 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Real__item___0 (Term) Term)

(declare-fun Tm_arrow_f7d25fc5d8260511721e863e569251f0 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Real__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Real__item___0>


; <Skipped let __proj__C_Real__item___0/>


; <Start encoding let universes>

(declare-fun FStar.Stubs.Reflection.V2.Data.universes () Term)

; </end encoding let universes>


; <Start encoding let ident_view>

(declare-fun FStar.Stubs.Reflection.V2.Data.ident_view () Term)

; </end encoding let ident_view>


; <Start encoding type FStar.Stubs.Reflection.V2.Data.pattern>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.pattern () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Pat_Constant (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Pat_Constant_c (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Pat_Constant
(declare-fun FStar.Stubs.Reflection.V2.Data.Pat_Constant@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Pat_Cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Pat_Cons_head (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Pat_Cons_univs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Pat_Cons_subpats (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Pat_Cons
(declare-fun FStar.Stubs.Reflection.V2.Data.Pat_Cons@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Pat_Var (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Pat_Var_sort (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Pat_Var_ppname (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Pat_Var
(declare-fun FStar.Stubs.Reflection.V2.Data.Pat_Var@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term_t (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term
(declare-fun FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term@tok () Term)
(declare-fun Tm_arrow_194a8dcf131ebd656125115cba1ed14c () Term)
(declare-fun Tm_arrow_c954af47400566237a9044bd4f1ba38a () Term)
(declare-fun Tm_arrow_4a255af0ab9044dbd977f62836921da2 () Term)
(declare-fun Tm_arrow_67ec204b32be72aa2992751e1be276a2 () Term)

; <start constructor FStar.Stubs.Reflection.V2.Data.pattern>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.pattern ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
179)
(= __@x0
FStar.Stubs.Reflection.V2.Data.pattern)))

; </end constructor FStar.Stubs.Reflection.V2.Data.pattern>


; <start constructor FStar.Stubs.Reflection.V2.Data.Pat_Constant>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Pat_Constant ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
185)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Pat_Constant (FStar.Stubs.Reflection.V2.Data.Pat_Constant_c __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Pat_Constant>


; <start constructor FStar.Stubs.Reflection.V2.Data.Pat_Cons>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Pat_Cons ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
190)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Pat_Cons (FStar.Stubs.Reflection.V2.Data.Pat_Cons_head __@x0)
(FStar.Stubs.Reflection.V2.Data.Pat_Cons_univs __@x0)
(FStar.Stubs.Reflection.V2.Data.Pat_Cons_subpats __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Pat_Cons>


; <start constructor FStar.Stubs.Reflection.V2.Data.Pat_Var>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Pat_Var ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
195)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Pat_Var (FStar.Stubs.Reflection.V2.Data.Pat_Var_sort __@x0)
(FStar.Stubs.Reflection.V2.Data.Pat_Var_ppname __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Pat_Var>


; <start constructor FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
200)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term (FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term_t __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term>


; </end encoding type FStar.Stubs.Reflection.V2.Data.pattern>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Constant>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Constant (Term) Term)
(declare-fun Tm_arrow_7a96ae5ea44a813e54305a00e432f866 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Constant@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Constant>


; <Skipped let uu___is_Pat_Constant/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Pat_Constant__item__c>

(declare-fun Tm_refine_26a3ca3c291e017bd04ab88ab3f1bd16 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Pat_Constant__item__c (Term) Term)

(declare-fun Tm_arrow_83021c93c7fe4314ddc771e7b24329e0 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Pat_Constant__item__c@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Pat_Constant__item__c>


; <Skipped let __proj__Pat_Constant__item__c/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Cons>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Cons (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Cons@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Cons>


; <Skipped let uu___is_Pat_Cons/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Pat_Cons__item__head>

(declare-fun Tm_refine_919c45f7fade48bc58599772159ac06a () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Pat_Cons__item__head (Term) Term)

(declare-fun Tm_arrow_1cae2dce84c39a8b28219bc12946dcb7 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Pat_Cons__item__head@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Pat_Cons__item__head>


; <Skipped let __proj__Pat_Cons__item__head/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Pat_Cons__item__univs>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Pat_Cons__item__univs (Term) Term)

(declare-fun Tm_arrow_c37b10bcd5b64ae88085a2fa2566aa9d () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Pat_Cons__item__univs@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Pat_Cons__item__univs>


; <Skipped let __proj__Pat_Cons__item__univs/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Pat_Cons__item__subpats>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Pat_Cons__item__subpats (Term) Term)

(declare-fun Tm_arrow_83a841fba2052039ae86f1cd5e6a0aa6 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Pat_Cons__item__subpats@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Pat_Cons__item__subpats>


; <Skipped let __proj__Pat_Cons__item__subpats/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Var>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Var (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Var@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Var>


; <Skipped let uu___is_Pat_Var/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Pat_Var__item__sort>

(declare-fun Tm_refine_b904eb95f43a094a00ec5951681ff0d1 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Pat_Var__item__sort (Term) Term)

(declare-fun Tm_arrow_24834d49ce62574d2dad65f36ff53f84 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Pat_Var__item__sort@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Pat_Var__item__sort>


; <Skipped let __proj__Pat_Var__item__sort/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Pat_Var__item__ppname>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Pat_Var__item__ppname (Term) Term)

(declare-fun Tm_arrow_6aea8e53136fb1f0c8d35511959417f5 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Pat_Var__item__ppname@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Pat_Var__item__ppname>


; <Skipped let __proj__Pat_Var__item__ppname/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Dot_Term>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Dot_Term (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Dot_Term@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Dot_Term>


; <Skipped let uu___is_Pat_Dot_Term/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Pat_Dot_Term__item__t>

(declare-fun Tm_refine_7fcbc4d4271baad02416b0bc6d22bd6f () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Pat_Dot_Term__item__t (Term) Term)

(declare-fun Tm_arrow_735bad28f3a470dce3f9163b2d51c9e7 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Pat_Dot_Term__item__t@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Pat_Dot_Term__item__t>


; <Skipped let __proj__Pat_Dot_Term__item__t/>


; <Start encoding let branch>

(declare-fun FStar.Stubs.Reflection.V2.Data.branch () Term)

; </end encoding let branch>


; <Start encoding type FStar.Stubs.Reflection.V2.Data.aqualv>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.aqualv () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Q_Implicit () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Q_Implicit
(declare-fun FStar.Stubs.Reflection.V2.Data.Q_Implicit@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Q_Explicit () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Q_Explicit
(declare-fun FStar.Stubs.Reflection.V2.Data.Q_Explicit@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Q_Equality () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Q_Equality
(declare-fun FStar.Stubs.Reflection.V2.Data.Q_Equality@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Q_Meta (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Q_Meta__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Q_Meta
(declare-fun FStar.Stubs.Reflection.V2.Data.Q_Meta@tok () Term)
(declare-fun Tm_arrow_12115b7bb71fe9dad9a2406c8ec886ba () Term)

; <start constructor FStar.Stubs.Reflection.V2.Data.aqualv>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.aqualv ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
240)
(= __@x0
FStar.Stubs.Reflection.V2.Data.aqualv)))

; </end constructor FStar.Stubs.Reflection.V2.Data.aqualv>


; <start constructor FStar.Stubs.Reflection.V2.Data.Q_Implicit>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Q_Implicit ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
246)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Q_Implicit)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Q_Implicit>


; <start constructor FStar.Stubs.Reflection.V2.Data.Q_Explicit>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Q_Explicit ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
248)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Q_Explicit)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Q_Explicit>


; <start constructor FStar.Stubs.Reflection.V2.Data.Q_Equality>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Q_Equality ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
250)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Q_Equality)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Q_Equality>


; <start constructor FStar.Stubs.Reflection.V2.Data.Q_Meta>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Q_Meta ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
252)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Q_Meta (FStar.Stubs.Reflection.V2.Data.Q_Meta__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Q_Meta>


; </end encoding type FStar.Stubs.Reflection.V2.Data.aqualv>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Q_Implicit>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Q_Implicit (Term) Term)
(declare-fun Tm_arrow_68286458ba37f8d18f3b89110cd3dd99 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Q_Implicit@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Q_Implicit>


; <Skipped let uu___is_Q_Implicit/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Q_Explicit>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Q_Explicit (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Q_Explicit@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Q_Explicit>


; <Skipped let uu___is_Q_Explicit/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Q_Equality>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Q_Equality (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Q_Equality@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Q_Equality>


; <Skipped let uu___is_Q_Equality/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Q_Meta>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Q_Meta (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Q_Meta@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Q_Meta>


; <Skipped let uu___is_Q_Meta/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Q_Meta__item___0>

(declare-fun Tm_refine_fbfbe764a7047d11d6f7378b2ea1d9c3 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Q_Meta__item___0 (Term) Term)

(declare-fun Tm_arrow_17f054579d664da16efc4322e92d9bc0 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Q_Meta__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Q_Meta__item___0>


; <Skipped let __proj__Q_Meta__item___0/>


; <Start encoding let argv>

(declare-fun FStar.Stubs.Reflection.V2.Data.argv () Term)

; </end encoding let argv>


; <Start encoding type FStar.Stubs.Reflection.V2.Data.namedv_view>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.namedv_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Mknamedv_view (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Mknamedv_view_uniq (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Mknamedv_view_sort (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Mknamedv_view_ppname (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Mknamedv_view
(declare-fun FStar.Stubs.Reflection.V2.Data.Mknamedv_view@tok () Term)
(declare-fun Tm_arrow_165b7d8e6340220e2fb3f69025870b8a () Term)

; <start constructor FStar.Stubs.Reflection.V2.Data.namedv_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.namedv_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
268)
(= __@x0
FStar.Stubs.Reflection.V2.Data.namedv_view)))

; </end constructor FStar.Stubs.Reflection.V2.Data.namedv_view>


; <start constructor FStar.Stubs.Reflection.V2.Data.Mknamedv_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Mknamedv_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
274)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Mknamedv_view (FStar.Stubs.Reflection.V2.Data.Mknamedv_view_uniq __@x0)
(FStar.Stubs.Reflection.V2.Data.Mknamedv_view_sort __@x0)
(FStar.Stubs.Reflection.V2.Data.Mknamedv_view_ppname __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Mknamedv_view>


; </end encoding type FStar.Stubs.Reflection.V2.Data.namedv_view>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mknamedv_view__item__uniq>

(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mknamedv_view__item__uniq (Term) Term)
(declare-fun Tm_arrow_2341a6a7a4326fd6cbbf990ea2e388dc () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mknamedv_view__item__uniq@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mknamedv_view__item__uniq>


; <Skipped let __proj__Mknamedv_view__item__uniq/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mknamedv_view__item__sort>

(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mknamedv_view__item__sort (Term) Term)
(declare-fun Tm_arrow_68f170bf4d5af32cd9e422b1ddd8b44b () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mknamedv_view__item__sort@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mknamedv_view__item__sort>


; <Skipped let __proj__Mknamedv_view__item__sort/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mknamedv_view__item__ppname>

(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mknamedv_view__item__ppname (Term) Term)
(declare-fun Tm_arrow_40705fac288ec12c6904d1979851a927 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mknamedv_view__item__ppname@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mknamedv_view__item__ppname>


; <Skipped let __proj__Mknamedv_view__item__ppname/>


; <Start encoding type FStar.Stubs.Reflection.V2.Data.bv_view>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.bv_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Mkbv_view (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Mkbv_view_index (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Mkbv_view_sort (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Mkbv_view_ppname (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Mkbv_view
(declare-fun FStar.Stubs.Reflection.V2.Data.Mkbv_view@tok () Term)
(declare-fun Tm_arrow_f3849ea48051811068c4c1b7b341d6a3 () Term)

; <start constructor FStar.Stubs.Reflection.V2.Data.bv_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.bv_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
284)
(= __@x0
FStar.Stubs.Reflection.V2.Data.bv_view)))

; </end constructor FStar.Stubs.Reflection.V2.Data.bv_view>


; <start constructor FStar.Stubs.Reflection.V2.Data.Mkbv_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Mkbv_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
290)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Mkbv_view (FStar.Stubs.Reflection.V2.Data.Mkbv_view_index __@x0)
(FStar.Stubs.Reflection.V2.Data.Mkbv_view_sort __@x0)
(FStar.Stubs.Reflection.V2.Data.Mkbv_view_ppname __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Mkbv_view>


; </end encoding type FStar.Stubs.Reflection.V2.Data.bv_view>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbv_view__item__index>

(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbv_view__item__index (Term) Term)
(declare-fun Tm_arrow_d070463d7abd379e80ef34b3beebee94 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbv_view__item__index@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbv_view__item__index>


; <Skipped let __proj__Mkbv_view__item__index/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbv_view__item__sort>

(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbv_view__item__sort (Term) Term)
(declare-fun Tm_arrow_445f62ad9797a8e02a56d45722380327 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbv_view__item__sort@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbv_view__item__sort>


; <Skipped let __proj__Mkbv_view__item__sort/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbv_view__item__ppname>

(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbv_view__item__ppname (Term) Term)
(declare-fun Tm_arrow_bd1565e15035bd4217b8d4917daae897 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbv_view__item__ppname@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbv_view__item__ppname>


; <Skipped let __proj__Mkbv_view__item__ppname/>


; <Start encoding type FStar.Stubs.Reflection.V2.Data.binder_view>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.binder_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Mkbinder_view (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Mkbinder_view_sort (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Mkbinder_view_qual (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Mkbinder_view_attrs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Mkbinder_view_ppname (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Mkbinder_view
(declare-fun FStar.Stubs.Reflection.V2.Data.Mkbinder_view@tok () Term)
(declare-fun Tm_arrow_97241916599e22b3f721f0b56b2afba4 () Term)

; <start constructor FStar.Stubs.Reflection.V2.Data.binder_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.binder_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
300)
(= __@x0
FStar.Stubs.Reflection.V2.Data.binder_view)))

; </end constructor FStar.Stubs.Reflection.V2.Data.binder_view>


; <start constructor FStar.Stubs.Reflection.V2.Data.Mkbinder_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Mkbinder_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
306)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Mkbinder_view (FStar.Stubs.Reflection.V2.Data.Mkbinder_view_sort __@x0)
(FStar.Stubs.Reflection.V2.Data.Mkbinder_view_qual __@x0)
(FStar.Stubs.Reflection.V2.Data.Mkbinder_view_attrs __@x0)
(FStar.Stubs.Reflection.V2.Data.Mkbinder_view_ppname __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Mkbinder_view>


; </end encoding type FStar.Stubs.Reflection.V2.Data.binder_view>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__sort>

(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__sort (Term) Term)
(declare-fun Tm_arrow_f9d63c667cf6a253c7fb55fa1b5bb766 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__sort@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__sort>


; <Skipped let __proj__Mkbinder_view__item__sort/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__qual>

(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__qual (Term) Term)
(declare-fun Tm_arrow_3cf7f5dbf67c8477957dd7c3c8c7b88a () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__qual@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__qual>


; <Skipped let __proj__Mkbinder_view__item__qual/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__attrs>

(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__attrs (Term) Term)
(declare-fun Tm_arrow_37d3ca96044f87f5dc1078c4f388eba4 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__attrs@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__attrs>


; <Skipped let __proj__Mkbinder_view__item__attrs/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__ppname>

(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__ppname (Term) Term)
(declare-fun Tm_arrow_eb9dd443f78ea7123ee510ce8aa140f9 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__ppname@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__ppname>


; <Skipped let __proj__Mkbinder_view__item__ppname/>


; <Start encoding type FStar.Stubs.Reflection.V2.Data.binding>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.binding () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Mkbinding (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Mkbinding_uniq (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Mkbinding_sort (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Mkbinding_ppname (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Mkbinding
(declare-fun FStar.Stubs.Reflection.V2.Data.Mkbinding@tok () Term)
(declare-fun Tm_arrow_a41ec7f1cbb5bea02b7eefd476eecf34 () Term)

; <start constructor FStar.Stubs.Reflection.V2.Data.binding>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.binding ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
318)
(= __@x0
FStar.Stubs.Reflection.V2.Data.binding)))

; </end constructor FStar.Stubs.Reflection.V2.Data.binding>


; <start constructor FStar.Stubs.Reflection.V2.Data.Mkbinding>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Mkbinding ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
324)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Mkbinding (FStar.Stubs.Reflection.V2.Data.Mkbinding_uniq __@x0)
(FStar.Stubs.Reflection.V2.Data.Mkbinding_sort __@x0)
(FStar.Stubs.Reflection.V2.Data.Mkbinding_ppname __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Mkbinding>


; </end encoding type FStar.Stubs.Reflection.V2.Data.binding>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbinding__item__uniq>

(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbinding__item__uniq (Term) Term)
(declare-fun Tm_arrow_b4fa8882266aa3d734d4b247709a0521 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbinding__item__uniq@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbinding__item__uniq>


; <Skipped let __proj__Mkbinding__item__uniq/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbinding__item__sort>

(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbinding__item__sort (Term) Term)
(declare-fun Tm_arrow_aa7a906604441819519eef9a39bd8f2b () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbinding__item__sort@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbinding__item__sort>


; <Skipped let __proj__Mkbinding__item__sort/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbinding__item__ppname>

(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbinding__item__ppname (Term) Term)
(declare-fun Tm_arrow_075a9e1c5a2e099441a80cb79f06e34d () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbinding__item__ppname@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbinding__item__ppname>


; <Skipped let __proj__Mkbinding__item__ppname/>


; <Start encoding let bindings>

(declare-fun FStar.Stubs.Reflection.V2.Data.bindings () Term)

; </end encoding let bindings>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.binder_is_simple>

(declare-fun FStar.Stubs.Reflection.V2.Data.binder_is_simple (Term) Term)
(declare-fun Tm_arrow_b19550718a671b3c68df5ddade9a9a01 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.binder_is_simple@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.binder_is_simple>


; <Start encoding let simple_binder>

(declare-fun FStar.Stubs.Reflection.V2.Data.simple_binder () Term)
(declare-fun Tm_refine_a8284b5e442b1496d78105f043903ddc () Term)

; </end encoding let simple_binder>


; <Start encoding type FStar.Stubs.Reflection.V2.Data.universe_view>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.universe_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_Zero () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Uv_Zero
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_Zero@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_Succ (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_Succ__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Uv_Succ
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_Succ@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_Max (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_Max__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Uv_Max
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_Max@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_BVar (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_BVar__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Uv_BVar
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_BVar@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_Name (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_Name__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Uv_Name
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_Name@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_Unif (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_Unif__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Uv_Unif
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_Unif@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_Unk () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Uv_Unk
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_Unk@tok () Term)
(declare-fun Tm_arrow_c7d72970247c899e8a55e24fe4918644 () Term)
(declare-fun Tm_arrow_8d30c5dd788812fad6d30a33fbb5654e () Term)
(declare-fun Tm_arrow_341c3e5aa179480f337d49ea28992b1c () Term)
(declare-fun Tm_arrow_1009968111e25b328418eeb4d77633ec () Term)
(declare-fun Tm_arrow_846c798102671787b69029be0f19fa4d () Term)

; <start constructor FStar.Stubs.Reflection.V2.Data.universe_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.universe_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
337)
(= __@x0
FStar.Stubs.Reflection.V2.Data.universe_view)))

; </end constructor FStar.Stubs.Reflection.V2.Data.universe_view>


; <start constructor FStar.Stubs.Reflection.V2.Data.Uv_Zero>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Uv_Zero ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
343)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Uv_Zero)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Uv_Zero>


; <start constructor FStar.Stubs.Reflection.V2.Data.Uv_Succ>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Uv_Succ ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
345)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Uv_Succ (FStar.Stubs.Reflection.V2.Data.Uv_Succ__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Uv_Succ>


; <start constructor FStar.Stubs.Reflection.V2.Data.Uv_Max>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Uv_Max ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
350)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Uv_Max (FStar.Stubs.Reflection.V2.Data.Uv_Max__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Uv_Max>


; <start constructor FStar.Stubs.Reflection.V2.Data.Uv_BVar>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Uv_BVar ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
355)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Uv_BVar (FStar.Stubs.Reflection.V2.Data.Uv_BVar__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Uv_BVar>


; <start constructor FStar.Stubs.Reflection.V2.Data.Uv_Name>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Uv_Name ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
360)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Uv_Name (FStar.Stubs.Reflection.V2.Data.Uv_Name__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Uv_Name>


; <start constructor FStar.Stubs.Reflection.V2.Data.Uv_Unif>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Uv_Unif ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
365)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Uv_Unif (FStar.Stubs.Reflection.V2.Data.Uv_Unif__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Uv_Unif>


; <start constructor FStar.Stubs.Reflection.V2.Data.Uv_Unk>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Uv_Unk ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
370)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Uv_Unk)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Uv_Unk>


; </end encoding type FStar.Stubs.Reflection.V2.Data.universe_view>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Zero>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Zero (Term) Term)
(declare-fun Tm_arrow_5162cda8d1702e19cd453fe1b18d259a () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Zero@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Zero>


; <Skipped let uu___is_Uv_Zero/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Succ>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Succ (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Succ@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Succ>


; <Skipped let uu___is_Uv_Succ/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Uv_Succ__item___0>

(declare-fun Tm_refine_cb696a4d6494bfc767fa8ffd03153b72 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Uv_Succ__item___0 (Term) Term)

(declare-fun Tm_arrow_b26f9e2f151248cabfbc6503f314cef7 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Uv_Succ__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Uv_Succ__item___0>


; <Skipped let __proj__Uv_Succ__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Max>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Max (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Max@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Max>


; <Skipped let uu___is_Uv_Max/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Uv_Max__item___0>

(declare-fun Tm_refine_d8657da60176492ac3a92ebbd75a0986 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Uv_Max__item___0 (Term) Term)

(declare-fun Tm_arrow_f0c8849234f0e195786528f64de8b6dd () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Uv_Max__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Uv_Max__item___0>


; <Skipped let __proj__Uv_Max__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Uv_BVar>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Uv_BVar (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Uv_BVar@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Uv_BVar>


; <Skipped let uu___is_Uv_BVar/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Uv_BVar__item___0>

(declare-fun Tm_refine_8c4e0632856c87e06783b54b0bd598c2 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Uv_BVar__item___0 (Term) Term)

(declare-fun Tm_arrow_b69a5b05a0b20873b6e5a86cd735d1e9 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Uv_BVar__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Uv_BVar__item___0>


; <Skipped let __proj__Uv_BVar__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Name>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Name (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Name@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Name>


; <Skipped let uu___is_Uv_Name/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Uv_Name__item___0>

(declare-fun Tm_refine_fdd06885f1615f0a9286347a2dd4b4eb () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Uv_Name__item___0 (Term) Term)

(declare-fun Tm_arrow_5c801be7ae3db9a1d9bc5fd05af086f6 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Uv_Name__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Uv_Name__item___0>


; <Skipped let __proj__Uv_Name__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Unif>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Unif (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Unif@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Unif>


; <Skipped let uu___is_Uv_Unif/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Uv_Unif__item___0>

(declare-fun Tm_refine_710b550dc4f0f58410a48dd8c021aa70 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Uv_Unif__item___0 (Term) Term)

(declare-fun Tm_arrow_b3df19f1b7eed51542726cdfce113938 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Uv_Unif__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Uv_Unif__item___0>


; <Skipped let __proj__Uv_Unif__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Unk>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Unk (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Unk@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Unk>


; <Skipped let uu___is_Uv_Unk/>


; <Start encoding type FStar.Stubs.Reflection.V2.Data.term_view>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.term_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Var (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Var_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Tv_Var
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Var@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_BVar (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_BVar_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Tv_BVar
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_BVar@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_FVar (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_FVar_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Tv_FVar
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_FVar@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_UInst (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_UInst_v (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_UInst_us (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Tv_UInst
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_UInst@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_App (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_App_hd (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_App_a (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Tv_App
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_App@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Abs (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Abs_bv (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Abs_body (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Tv_Abs
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Abs@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Arrow (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Arrow_bv (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Arrow_c (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Tv_Arrow
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Arrow@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Type (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Type__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Tv_Type
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Type@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Refine (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Refine_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Refine_ref (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Tv_Refine
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Refine@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Const (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Const__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Tv_Const
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Const@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Uvar (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Uvar__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Uvar__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Tv_Uvar
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Uvar@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Let (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Let_recf (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Let_attrs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Let_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Let_def (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Let_body (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Tv_Let
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Let@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Match (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Match_scrutinee (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Match_ret (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Match_brs (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Tv_Match
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Match@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_AscribedT (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_AscribedT_e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_AscribedT_t (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_AscribedT_tac (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_AscribedT_use_eq (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Tv_AscribedT
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_AscribedT@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_AscribedC (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_AscribedC_e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_AscribedC_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_AscribedC_tac (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_AscribedC_use_eq (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Tv_AscribedC
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_AscribedC@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Unknown () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Tv_Unknown
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Unknown@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Unsupp () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Tv_Unsupp
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Unsupp@tok () Term)
(declare-fun Tm_arrow_752584adff6406ac9ea8ccc03a0f3fc4 () Term)
(declare-fun Tm_arrow_7aba76f7e7c0cd2d04d0ad01b75c0f3a () Term)
(declare-fun Tm_arrow_5d26b6dc5bd4ecfefa229a5a2feb5542 () Term)
(declare-fun Tm_arrow_db453bb2b094d83021ed25f2d19986c9 () Term)
(declare-fun Tm_arrow_ae43253092025124e5d41ea41ff792a5 () Term)
(declare-fun Tm_arrow_78a91cd3139c0acde68434041f32d223 () Term)
(declare-fun Tm_arrow_4fbb92ed8f6807836d65df7441bed485 () Term)
(declare-fun Tm_arrow_5014d41a773a407636142efad1f55638 () Term)
(declare-fun Tm_arrow_235701cd37e4cd42419d9bd39a6ea548 () Term)
(declare-fun Tm_arrow_d325bb4edbf91cf603a68faf2c534beb () Term)
(declare-fun Tm_arrow_52a3f687ff0901a6d5c1192c82acb17d () Term)
(declare-fun Tm_arrow_28ed6fd76e47abd5164c551831599ee2 () Term)
(declare-fun Tm_arrow_a021f97d3ff35d6d46a612afd8c9422f () Term)
(declare-fun Tm_arrow_2f6429e11f7a998a86518c3e8a06684d () Term)
(declare-fun Tm_arrow_e397736eb9117ce3dbdb6cbfbb8fb030 () Term)

; <start constructor FStar.Stubs.Reflection.V2.Data.term_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.term_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
405)
(= __@x0
FStar.Stubs.Reflection.V2.Data.term_view)))

; </end constructor FStar.Stubs.Reflection.V2.Data.term_view>


; <start constructor FStar.Stubs.Reflection.V2.Data.Tv_Var>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Tv_Var ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
411)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Tv_Var (FStar.Stubs.Reflection.V2.Data.Tv_Var_v __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Tv_Var>


; <start constructor FStar.Stubs.Reflection.V2.Data.Tv_BVar>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Tv_BVar ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
416)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Tv_BVar (FStar.Stubs.Reflection.V2.Data.Tv_BVar_v __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Tv_BVar>


; <start constructor FStar.Stubs.Reflection.V2.Data.Tv_FVar>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Tv_FVar ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
421)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Tv_FVar (FStar.Stubs.Reflection.V2.Data.Tv_FVar_v __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Tv_FVar>


; <start constructor FStar.Stubs.Reflection.V2.Data.Tv_UInst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Tv_UInst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
426)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Tv_UInst (FStar.Stubs.Reflection.V2.Data.Tv_UInst_v __@x0)
(FStar.Stubs.Reflection.V2.Data.Tv_UInst_us __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Tv_UInst>


; <start constructor FStar.Stubs.Reflection.V2.Data.Tv_App>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Tv_App ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
431)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Tv_App (FStar.Stubs.Reflection.V2.Data.Tv_App_hd __@x0)
(FStar.Stubs.Reflection.V2.Data.Tv_App_a __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Tv_App>


; <start constructor FStar.Stubs.Reflection.V2.Data.Tv_Abs>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Tv_Abs ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
436)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Tv_Abs (FStar.Stubs.Reflection.V2.Data.Tv_Abs_bv __@x0)
(FStar.Stubs.Reflection.V2.Data.Tv_Abs_body __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Tv_Abs>


; <start constructor FStar.Stubs.Reflection.V2.Data.Tv_Arrow>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Tv_Arrow ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
441)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Tv_Arrow (FStar.Stubs.Reflection.V2.Data.Tv_Arrow_bv __@x0)
(FStar.Stubs.Reflection.V2.Data.Tv_Arrow_c __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Tv_Arrow>


; <start constructor FStar.Stubs.Reflection.V2.Data.Tv_Type>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Tv_Type ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
446)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Tv_Type (FStar.Stubs.Reflection.V2.Data.Tv_Type__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Tv_Type>


; <start constructor FStar.Stubs.Reflection.V2.Data.Tv_Refine>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Tv_Refine ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
451)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Tv_Refine (FStar.Stubs.Reflection.V2.Data.Tv_Refine_b __@x0)
(FStar.Stubs.Reflection.V2.Data.Tv_Refine_ref __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Tv_Refine>


; <start constructor FStar.Stubs.Reflection.V2.Data.Tv_Const>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Tv_Const ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
456)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Tv_Const (FStar.Stubs.Reflection.V2.Data.Tv_Const__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Tv_Const>


; <start constructor FStar.Stubs.Reflection.V2.Data.Tv_Uvar>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Tv_Uvar ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
461)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Tv_Uvar (FStar.Stubs.Reflection.V2.Data.Tv_Uvar__0 __@x0)
(FStar.Stubs.Reflection.V2.Data.Tv_Uvar__1 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Tv_Uvar>


; <start constructor FStar.Stubs.Reflection.V2.Data.Tv_Let>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Tv_Let ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
466)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Tv_Let (FStar.Stubs.Reflection.V2.Data.Tv_Let_recf __@x0)
(FStar.Stubs.Reflection.V2.Data.Tv_Let_attrs __@x0)
(FStar.Stubs.Reflection.V2.Data.Tv_Let_b __@x0)
(FStar.Stubs.Reflection.V2.Data.Tv_Let_def __@x0)
(FStar.Stubs.Reflection.V2.Data.Tv_Let_body __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Tv_Let>


; <start constructor FStar.Stubs.Reflection.V2.Data.Tv_Match>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Tv_Match ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
471)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Tv_Match (FStar.Stubs.Reflection.V2.Data.Tv_Match_scrutinee __@x0)
(FStar.Stubs.Reflection.V2.Data.Tv_Match_ret __@x0)
(FStar.Stubs.Reflection.V2.Data.Tv_Match_brs __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Tv_Match>


; <start constructor FStar.Stubs.Reflection.V2.Data.Tv_AscribedT>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Tv_AscribedT ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
476)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Tv_AscribedT (FStar.Stubs.Reflection.V2.Data.Tv_AscribedT_e __@x0)
(FStar.Stubs.Reflection.V2.Data.Tv_AscribedT_t __@x0)
(FStar.Stubs.Reflection.V2.Data.Tv_AscribedT_tac __@x0)
(FStar.Stubs.Reflection.V2.Data.Tv_AscribedT_use_eq __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Tv_AscribedT>


; <start constructor FStar.Stubs.Reflection.V2.Data.Tv_AscribedC>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Tv_AscribedC ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
481)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Tv_AscribedC (FStar.Stubs.Reflection.V2.Data.Tv_AscribedC_e __@x0)
(FStar.Stubs.Reflection.V2.Data.Tv_AscribedC_c __@x0)
(FStar.Stubs.Reflection.V2.Data.Tv_AscribedC_tac __@x0)
(FStar.Stubs.Reflection.V2.Data.Tv_AscribedC_use_eq __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Tv_AscribedC>


; <start constructor FStar.Stubs.Reflection.V2.Data.Tv_Unknown>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Tv_Unknown ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
486)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Tv_Unknown)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Tv_Unknown>


; <start constructor FStar.Stubs.Reflection.V2.Data.Tv_Unsupp>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Tv_Unsupp ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
488)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Tv_Unsupp)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Tv_Unsupp>


; </end encoding type FStar.Stubs.Reflection.V2.Data.term_view>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Var>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Var (Term) Term)
(declare-fun Tm_arrow_586e50dde7953c1be706e9840496df0e () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Var@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Var>


; <Skipped let uu___is_Tv_Var/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Var__item__v>

(declare-fun Tm_refine_c4248e8eff973519c395e9ad8b18c7f9 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Var__item__v (Term) Term)

(declare-fun Tm_arrow_f91122af922128f8fea5d0a102532402 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Var__item__v@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Var__item__v>


; <Skipped let __proj__Tv_Var__item__v/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_BVar>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_BVar (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_BVar@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_BVar>


; <Skipped let uu___is_Tv_BVar/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_BVar__item__v>

(declare-fun Tm_refine_473c0367e281690ddeb7ba9d7d22f1f6 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_BVar__item__v (Term) Term)

(declare-fun Tm_arrow_e7b3f282f3ee98635cb57b8dc0b64246 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_BVar__item__v@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_BVar__item__v>


; <Skipped let __proj__Tv_BVar__item__v/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_FVar>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_FVar (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_FVar@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_FVar>


; <Skipped let uu___is_Tv_FVar/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_FVar__item__v>

(declare-fun Tm_refine_d2711b61c4b52079f3c5968c061f9fcf () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_FVar__item__v (Term) Term)

(declare-fun Tm_arrow_e4636fcbbca506a6cc0eb4cf3ffa39b9 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_FVar__item__v@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_FVar__item__v>


; <Skipped let __proj__Tv_FVar__item__v/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_UInst>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_UInst (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_UInst@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_UInst>


; <Skipped let uu___is_Tv_UInst/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_UInst__item__v>

(declare-fun Tm_refine_1a52b06ee8dfc536800a89f6ecee4ecd () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_UInst__item__v (Term) Term)

(declare-fun Tm_arrow_aa6c12b5b1739a2d437a568586bd8137 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_UInst__item__v@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_UInst__item__v>


; <Skipped let __proj__Tv_UInst__item__v/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_UInst__item__us>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_UInst__item__us (Term) Term)

(declare-fun Tm_arrow_6832dcae269a233bf516ce19db22453c () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_UInst__item__us@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_UInst__item__us>


; <Skipped let __proj__Tv_UInst__item__us/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_App>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_App (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_App@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_App>


; <Skipped let uu___is_Tv_App/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_App__item__hd>

(declare-fun Tm_refine_ce618e257bb72c7bc0890dfed3cccc9e () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_App__item__hd (Term) Term)

(declare-fun Tm_arrow_514d38114f2abdfb4818b53a1fe858c2 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_App__item__hd@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_App__item__hd>


; <Skipped let __proj__Tv_App__item__hd/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_App__item__a>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_App__item__a (Term) Term)

(declare-fun Tm_arrow_95229b5e470d791f8e6b2c0dcfd564ff () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_App__item__a@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_App__item__a>


; <Skipped let __proj__Tv_App__item__a/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Abs>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Abs (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Abs@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Abs>


; <Skipped let uu___is_Tv_Abs/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Abs__item__bv>

(declare-fun Tm_refine_37a793ba5704ebbf15042feb27137572 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Abs__item__bv (Term) Term)

(declare-fun Tm_arrow_3e1cb319a0949fb66b6c0ef4f9bb9e63 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Abs__item__bv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Abs__item__bv>


; <Skipped let __proj__Tv_Abs__item__bv/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Abs__item__body>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Abs__item__body (Term) Term)

(declare-fun Tm_arrow_efc9db44b85c7f63191cd9cc33164b8a () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Abs__item__body@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Abs__item__body>


; <Skipped let __proj__Tv_Abs__item__body/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Arrow>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Arrow (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Arrow@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Arrow>


; <Skipped let uu___is_Tv_Arrow/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Arrow__item__bv>

(declare-fun Tm_refine_8d01559daf290c998e8e5548df92339d () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Arrow__item__bv (Term) Term)

(declare-fun Tm_arrow_6dd57cc298d54241f4446218a6adfb28 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Arrow__item__bv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Arrow__item__bv>


; <Skipped let __proj__Tv_Arrow__item__bv/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Arrow__item__c>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Arrow__item__c (Term) Term)

(declare-fun Tm_arrow_c55711f43b48ee6bf71468617e2ee828 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Arrow__item__c@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Arrow__item__c>


; <Skipped let __proj__Tv_Arrow__item__c/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Type>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Type (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Type@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Type>


; <Skipped let uu___is_Tv_Type/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Type__item___0>

(declare-fun Tm_refine_d1b122fd2b90ff0b3deddd8582e5a32a () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Type__item___0 (Term) Term)

(declare-fun Tm_arrow_e779f5b4e3ee70314cfc29dc4c77379d () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Type__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Type__item___0>


; <Skipped let __proj__Tv_Type__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Refine>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Refine (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Refine@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Refine>


; <Skipped let uu___is_Tv_Refine/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Refine__item__b>

(declare-fun Tm_refine_c4075b916a3bb3afcd075e57f2a2a3f7 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Refine__item__b (Term) Term)

(declare-fun Tm_arrow_22e323ff87b433688435fdf5265102f3 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Refine__item__b@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Refine__item__b>


; <Skipped let __proj__Tv_Refine__item__b/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Refine__item__ref>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Refine__item__ref (Term) Term)

(declare-fun Tm_arrow_b640d62e69bec853ec3029e0a203bdc5 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Refine__item__ref@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Refine__item__ref>


; <Skipped let __proj__Tv_Refine__item__ref/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Const>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Const (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Const@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Const>


; <Skipped let uu___is_Tv_Const/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Const__item___0>

(declare-fun Tm_refine_33501ba90cf97ecf3695ea84cf87adca () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Const__item___0 (Term) Term)

(declare-fun Tm_arrow_ade43bfff800c0d08b2f4283ea5f94e9 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Const__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Const__item___0>


; <Skipped let __proj__Tv_Const__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Uvar>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Uvar (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Uvar@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Uvar>


; <Skipped let uu___is_Tv_Uvar/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Uvar__item___0>

(declare-fun Tm_refine_dd537019d2f0e727827f0138fef6addd () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Uvar__item___0 (Term) Term)

(declare-fun Tm_arrow_92c6d8845669b38b3ee89ae0697d9c3b () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Uvar__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Uvar__item___0>


; <Skipped let __proj__Tv_Uvar__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Uvar__item___1>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Uvar__item___1 (Term) Term)

(declare-fun Tm_arrow_cddbe66872e90d2e1d0fff5ac47d540d () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Uvar__item___1@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Uvar__item___1>


; <Skipped let __proj__Tv_Uvar__item___1/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Let>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Let (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Let@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Let>


; <Skipped let uu___is_Tv_Let/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__recf>

(declare-fun Tm_refine_43c986d2cf42f8731bfb915090e09a0b () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__recf (Term) Term)

(declare-fun Tm_arrow_1efe9f119169f82662464992672d7077 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__recf@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__recf>


; <Skipped let __proj__Tv_Let__item__recf/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__attrs>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__attrs (Term) Term)

(declare-fun Tm_arrow_1d0e3f411007788f6703c1dc4f71a32a () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__attrs@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__attrs>


; <Skipped let __proj__Tv_Let__item__attrs/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__b>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__b (Term) Term)

(declare-fun Tm_arrow_2cd9c6fcdf8342ced1c796029c45e866 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__b@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__b>


; <Skipped let __proj__Tv_Let__item__b/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__def>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__def (Term) Term)

(declare-fun Tm_arrow_f2a2b238f1218d5faabebadda141a801 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__def@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__def>


; <Skipped let __proj__Tv_Let__item__def/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__body>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__body (Term) Term)


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__body@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__body>


; <Skipped let __proj__Tv_Let__item__body/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Match>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Match (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Match@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Match>


; <Skipped let uu___is_Tv_Match/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Match__item__scrutinee>

(declare-fun Tm_refine_2565e86b1cc6542a4afc6f6409d3347b () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Match__item__scrutinee (Term) Term)

(declare-fun Tm_arrow_0851bb5074051aaa2e8ab5f23f9f5388 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Match__item__scrutinee@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Match__item__scrutinee>


; <Skipped let __proj__Tv_Match__item__scrutinee/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Match__item__ret>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Match__item__ret (Term) Term)

(declare-fun Tm_arrow_2103f2e612ee3299f7ee1bbb1e530e6d () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Match__item__ret@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Match__item__ret>


; <Skipped let __proj__Tv_Match__item__ret/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Match__item__brs>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Match__item__brs (Term) Term)

(declare-fun Tm_arrow_68cea64fd93f227efb82c93a99ff9230 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Match__item__brs@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Match__item__brs>


; <Skipped let __proj__Tv_Match__item__brs/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_AscribedT>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_AscribedT (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_AscribedT@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_AscribedT>


; <Skipped let uu___is_Tv_AscribedT/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedT__item__e>

(declare-fun Tm_refine_dc6354cd01f0cd4240123aff4b38cfaa () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedT__item__e (Term) Term)

(declare-fun Tm_arrow_598328b4c9ddbcd6164f989330ed0593 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedT__item__e@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedT__item__e>


; <Skipped let __proj__Tv_AscribedT__item__e/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedT__item__t>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedT__item__t (Term) Term)


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedT__item__t@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedT__item__t>


; <Skipped let __proj__Tv_AscribedT__item__t/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedT__item__tac>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedT__item__tac (Term) Term)

(declare-fun Tm_arrow_ca50fd2be53ab485613dcbe36c246c6b () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedT__item__tac@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedT__item__tac>


; <Skipped let __proj__Tv_AscribedT__item__tac/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedT__item__use_eq>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedT__item__use_eq (Term) Term)

(declare-fun Tm_arrow_4cd2ec6cb3f7c5a87b3f76c3726a13e2 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedT__item__use_eq@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedT__item__use_eq>


; <Skipped let __proj__Tv_AscribedT__item__use_eq/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_AscribedC>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_AscribedC (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_AscribedC@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_AscribedC>


; <Skipped let uu___is_Tv_AscribedC/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedC__item__e>

(declare-fun Tm_refine_1ef62970670d75775a601f0b31c2dc27 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedC__item__e (Term) Term)

(declare-fun Tm_arrow_30e384a6d915aa451bbc1515d167a8e8 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedC__item__e@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedC__item__e>


; <Skipped let __proj__Tv_AscribedC__item__e/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedC__item__c>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedC__item__c (Term) Term)

(declare-fun Tm_arrow_3270cecb58d69f8d02ea82c49a0bde67 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedC__item__c@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedC__item__c>


; <Skipped let __proj__Tv_AscribedC__item__c/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedC__item__tac>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedC__item__tac (Term) Term)

(declare-fun Tm_arrow_521e7be5a27c4f5e206cae967692af1d () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedC__item__tac@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedC__item__tac>


; <Skipped let __proj__Tv_AscribedC__item__tac/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedC__item__use_eq>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedC__item__use_eq (Term) Term)

(declare-fun Tm_arrow_bfafb32ffbd2fe486b4a1d3d969532b8 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedC__item__use_eq@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedC__item__use_eq>


; <Skipped let __proj__Tv_AscribedC__item__use_eq/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Unknown>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Unknown (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Unknown@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Unknown>


; <Skipped let uu___is_Tv_Unknown/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Unsupp>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Unsupp (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Unsupp@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Unsupp>


; <Skipped let uu___is_Tv_Unsupp/>


; <Start encoding let notAscription>

(declare-fun FStar.Stubs.Reflection.V2.Data.notAscription (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.notAscription@tok () Term)

; </end encoding let notAscription>


; <Start encoding type FStar.Stubs.Reflection.V2.Data.comp_view>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.comp_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Total (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Total_ret (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.C_Total
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Total@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.C_GTotal (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.C_GTotal_ret (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.C_GTotal
(declare-fun FStar.Stubs.Reflection.V2.Data.C_GTotal@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Lemma__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Lemma__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Lemma__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.C_Lemma
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Lemma@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Eff (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Eff_us (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Eff_eff_name (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Eff_result (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Eff_eff_args (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Eff_decrs (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.C_Eff
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Eff@tok () Term)
(declare-fun Tm_arrow_3baaad7ff6dbfca53693751a544f3045 () Term)

(declare-fun Tm_arrow_638ea771c3ef1936d33bd493c1b6c96a () Term)
(declare-fun Tm_arrow_3ae8c3d5df5ffffb108540a6b9073255 () Term)

; <start constructor FStar.Stubs.Reflection.V2.Data.comp_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.comp_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
657)
(= __@x0
FStar.Stubs.Reflection.V2.Data.comp_view)))

; </end constructor FStar.Stubs.Reflection.V2.Data.comp_view>


; <start constructor FStar.Stubs.Reflection.V2.Data.C_Total>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.C_Total ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
663)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.C_Total (FStar.Stubs.Reflection.V2.Data.C_Total_ret __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.C_Total>


; <start constructor FStar.Stubs.Reflection.V2.Data.C_GTotal>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.C_GTotal ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
668)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.C_GTotal (FStar.Stubs.Reflection.V2.Data.C_GTotal_ret __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.C_GTotal>


; <start constructor FStar.Stubs.Reflection.V2.Data.C_Lemma>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.C_Lemma ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
673)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.C_Lemma (FStar.Stubs.Reflection.V2.Data.C_Lemma__0 __@x0)
(FStar.Stubs.Reflection.V2.Data.C_Lemma__1 __@x0)
(FStar.Stubs.Reflection.V2.Data.C_Lemma__2 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.C_Lemma>


; <start constructor FStar.Stubs.Reflection.V2.Data.C_Eff>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.C_Eff ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
678)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.C_Eff (FStar.Stubs.Reflection.V2.Data.C_Eff_us __@x0)
(FStar.Stubs.Reflection.V2.Data.C_Eff_eff_name __@x0)
(FStar.Stubs.Reflection.V2.Data.C_Eff_result __@x0)
(FStar.Stubs.Reflection.V2.Data.C_Eff_eff_args __@x0)
(FStar.Stubs.Reflection.V2.Data.C_Eff_decrs __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.C_Eff>


; </end encoding type FStar.Stubs.Reflection.V2.Data.comp_view>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_Total>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_Total (Term) Term)
(declare-fun Tm_arrow_2a9415459fcb962ad895e70e3dd954b4 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_Total@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_Total>


; <Skipped let uu___is_C_Total/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Total__item__ret>

(declare-fun Tm_refine_74ef9f3102c78539bcc06df8913ee8b1 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Total__item__ret (Term) Term)

(declare-fun Tm_arrow_2d5d90f1e75989aa433b5d452bfc3464 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Total__item__ret@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Total__item__ret>


; <Skipped let __proj__C_Total__item__ret/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_GTotal>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_GTotal (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_GTotal@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_GTotal>


; <Skipped let uu___is_C_GTotal/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_GTotal__item__ret>

(declare-fun Tm_refine_f55a5511b0c7b341ac4e0a29f002e4aa () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_GTotal__item__ret (Term) Term)

(declare-fun Tm_arrow_a5d90481aa6a6e28c1bc26051c0efec7 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_GTotal__item__ret@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_GTotal__item__ret>


; <Skipped let __proj__C_GTotal__item__ret/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_Lemma>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_Lemma (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_Lemma@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_Lemma>


; <Skipped let uu___is_C_Lemma/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Lemma__item___0>

(declare-fun Tm_refine_1bc38916a900e5bdd4fb925f184ebe66 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Lemma__item___0 (Term) Term)

(declare-fun Tm_arrow_275cdfd15aa9ca9846844ea68ddac594 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Lemma__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Lemma__item___0>


; <Skipped let __proj__C_Lemma__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Lemma__item___1>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Lemma__item___1 (Term) Term)


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Lemma__item___1@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Lemma__item___1>


; <Skipped let __proj__C_Lemma__item___1/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Lemma__item___2>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Lemma__item___2 (Term) Term)


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Lemma__item___2@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Lemma__item___2>


; <Skipped let __proj__C_Lemma__item___2/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_Eff>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_Eff (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_Eff@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_Eff>


; <Skipped let uu___is_C_Eff/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__us>

(declare-fun Tm_refine_dd0fe4daa6c85dc6cf40f0518ba6e942 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__us (Term) Term)

(declare-fun Tm_arrow_19cf433396c9c00d0dd1528935f4c240 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__us@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__us>


; <Skipped let __proj__C_Eff__item__us/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__eff_name>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__eff_name (Term) Term)

(declare-fun Tm_arrow_08b5ca17136d7b60f70b513fac9ff590 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__eff_name@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__eff_name>


; <Skipped let __proj__C_Eff__item__eff_name/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__result>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__result (Term) Term)

(declare-fun Tm_arrow_6f04408325289c53b680d6386322c9e5 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__result@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__result>


; <Skipped let __proj__C_Eff__item__result/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__eff_args>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__eff_args (Term) Term)

(declare-fun Tm_arrow_6539c5f6748142dcd5cec41c432c8691 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__eff_args@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__eff_args>


; <Skipped let __proj__C_Eff__item__eff_args/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__decrs>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__decrs (Term) Term)

(declare-fun Tm_arrow_0b2d076acce9a3b38077b6212097a740 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__decrs@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__decrs>


; <Skipped let __proj__C_Eff__item__decrs/>


; <Start encoding let ctor>

(declare-fun FStar.Stubs.Reflection.V2.Data.ctor () Term)

; </end encoding let ctor>


; <Start encoding type FStar.Stubs.Reflection.V2.Data.lb_view>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.lb_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Mklb_view (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Mklb_view_lb_fv (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Mklb_view_lb_us (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Mklb_view_lb_typ (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Mklb_view_lb_def (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Mklb_view
(declare-fun FStar.Stubs.Reflection.V2.Data.Mklb_view@tok () Term)
(declare-fun Tm_arrow_c502351c60efd8719ca5b29fc51cfa35 () Term)

; <start constructor FStar.Stubs.Reflection.V2.Data.lb_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.lb_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
730)
(= __@x0
FStar.Stubs.Reflection.V2.Data.lb_view)))

; </end constructor FStar.Stubs.Reflection.V2.Data.lb_view>


; <start constructor FStar.Stubs.Reflection.V2.Data.Mklb_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Mklb_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
736)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Mklb_view (FStar.Stubs.Reflection.V2.Data.Mklb_view_lb_fv __@x0)
(FStar.Stubs.Reflection.V2.Data.Mklb_view_lb_us __@x0)
(FStar.Stubs.Reflection.V2.Data.Mklb_view_lb_typ __@x0)
(FStar.Stubs.Reflection.V2.Data.Mklb_view_lb_def __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Mklb_view>


; </end encoding type FStar.Stubs.Reflection.V2.Data.lb_view>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mklb_view__item__lb_fv>

(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mklb_view__item__lb_fv (Term) Term)
(declare-fun Tm_arrow_bc18ca13b9b77908c319213977256848 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mklb_view__item__lb_fv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mklb_view__item__lb_fv>


; <Skipped let __proj__Mklb_view__item__lb_fv/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mklb_view__item__lb_us>

(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mklb_view__item__lb_us (Term) Term)
(declare-fun Tm_arrow_46a0677a6bba0a0eac977dc0fd4c4fdf () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mklb_view__item__lb_us@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mklb_view__item__lb_us>


; <Skipped let __proj__Mklb_view__item__lb_us/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mklb_view__item__lb_typ>

(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mklb_view__item__lb_typ (Term) Term)
(declare-fun Tm_arrow_1115eb4d52f0dc1c925644add43b1f39 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mklb_view__item__lb_typ@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mklb_view__item__lb_typ>


; <Skipped let __proj__Mklb_view__item__lb_typ/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mklb_view__item__lb_def>

(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mklb_view__item__lb_def (Term) Term)
(declare-fun Tm_arrow_dbe17bfae175029f58ec29d5c55b0229 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mklb_view__item__lb_def@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mklb_view__item__lb_def>


; <Skipped let __proj__Mklb_view__item__lb_def/>


; <Start encoding type FStar.Stubs.Reflection.V2.Data.sigelt_view>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.sigelt_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Sg_Let (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Sg_Let_r (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Sg_Let_lbs (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Sg_Let
(declare-fun FStar.Stubs.Reflection.V2.Data.Sg_Let@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Sg_Inductive (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Sg_Inductive_nm (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Sg_Inductive_univs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Sg_Inductive_params (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Sg_Inductive_typ (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Sg_Inductive_cts (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Sg_Inductive
(declare-fun FStar.Stubs.Reflection.V2.Data.Sg_Inductive@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Sg_Val (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Sg_Val_nm (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Sg_Val_univs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Sg_Val_typ (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Sg_Val
(declare-fun FStar.Stubs.Reflection.V2.Data.Sg_Val@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Unk () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Unk
(declare-fun FStar.Stubs.Reflection.V2.Data.Unk@tok () Term)
(declare-fun Tm_arrow_4fe53c848b8381ebd79e492ddf765ff8 () Term)
(declare-fun Tm_arrow_dfc12479f5d8f8c60490136810ba7cdc () Term)
(declare-fun Tm_arrow_aeca26ffef4ab5dd9029d909c794c539 () Term)

; <start constructor FStar.Stubs.Reflection.V2.Data.sigelt_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.sigelt_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
748)
(= __@x0
FStar.Stubs.Reflection.V2.Data.sigelt_view)))

; </end constructor FStar.Stubs.Reflection.V2.Data.sigelt_view>


; <start constructor FStar.Stubs.Reflection.V2.Data.Sg_Let>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Sg_Let ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
754)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Sg_Let (FStar.Stubs.Reflection.V2.Data.Sg_Let_r __@x0)
(FStar.Stubs.Reflection.V2.Data.Sg_Let_lbs __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Sg_Let>


; <start constructor FStar.Stubs.Reflection.V2.Data.Sg_Inductive>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Sg_Inductive ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
759)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Sg_Inductive (FStar.Stubs.Reflection.V2.Data.Sg_Inductive_nm __@x0)
(FStar.Stubs.Reflection.V2.Data.Sg_Inductive_univs __@x0)
(FStar.Stubs.Reflection.V2.Data.Sg_Inductive_params __@x0)
(FStar.Stubs.Reflection.V2.Data.Sg_Inductive_typ __@x0)
(FStar.Stubs.Reflection.V2.Data.Sg_Inductive_cts __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Sg_Inductive>


; <start constructor FStar.Stubs.Reflection.V2.Data.Sg_Val>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Sg_Val ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
764)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Sg_Val (FStar.Stubs.Reflection.V2.Data.Sg_Val_nm __@x0)
(FStar.Stubs.Reflection.V2.Data.Sg_Val_univs __@x0)
(FStar.Stubs.Reflection.V2.Data.Sg_Val_typ __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Sg_Val>


; <start constructor FStar.Stubs.Reflection.V2.Data.Unk>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Unk ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
769)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Unk)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Unk>


; </end encoding type FStar.Stubs.Reflection.V2.Data.sigelt_view>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Sg_Let>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Sg_Let (Term) Term)
(declare-fun Tm_arrow_2b2202c9b63d769a3bd12e4192aca2f1 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Sg_Let@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Sg_Let>


; <Skipped let uu___is_Sg_Let/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Let__item__r>

(declare-fun Tm_refine_1b867ceb772281ec4266019ff8d6d9b1 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Let__item__r (Term) Term)

(declare-fun Tm_arrow_a930941effe801f71b519d3ee5bd478f () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Let__item__r@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Let__item__r>


; <Skipped let __proj__Sg_Let__item__r/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Let__item__lbs>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Let__item__lbs (Term) Term)

(declare-fun Tm_arrow_8132b1ca2ea76f3915ad2e6232303b3a () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Let__item__lbs@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Let__item__lbs>


; <Skipped let __proj__Sg_Let__item__lbs/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Sg_Inductive>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Sg_Inductive (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Sg_Inductive@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Sg_Inductive>


; <Skipped let uu___is_Sg_Inductive/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__nm>

(declare-fun Tm_refine_df3cc4fabb72f574f0a5381358497b2d () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__nm (Term) Term)

(declare-fun Tm_arrow_32cbbc47b662a17bf42ec409569930c9 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__nm@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__nm>


; <Skipped let __proj__Sg_Inductive__item__nm/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__univs>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__univs (Term) Term)

(declare-fun Tm_arrow_31f4f3a2f58b041a734831504dc9afe7 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__univs@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__univs>


; <Skipped let __proj__Sg_Inductive__item__univs/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__params>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__params (Term) Term)

(declare-fun Tm_arrow_2dd5b4ec86da71e9d40b7e0c96736b4e () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__params@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__params>


; <Skipped let __proj__Sg_Inductive__item__params/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__typ>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__typ (Term) Term)

(declare-fun Tm_arrow_ec424eee7e45c860894d502125b5655c () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__typ@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__typ>


; <Skipped let __proj__Sg_Inductive__item__typ/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__cts>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__cts (Term) Term)

(declare-fun Tm_arrow_9a56ff07ce45d447bc10ef813e2634ed () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__cts@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__cts>


; <Skipped let __proj__Sg_Inductive__item__cts/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Sg_Val>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Sg_Val (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Sg_Val@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Sg_Val>


; <Skipped let uu___is_Sg_Val/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Val__item__nm>

(declare-fun Tm_refine_91a9125ccb843bed6e9b9be7bc535b70 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Val__item__nm (Term) Term)

(declare-fun Tm_arrow_6af6b0a17cd4e21fc2f5c08ffdf5592d () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Val__item__nm@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Val__item__nm>


; <Skipped let __proj__Sg_Val__item__nm/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Val__item__univs>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Val__item__univs (Term) Term)

(declare-fun Tm_arrow_6b403f067c7f0b64f3019e843027465d () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Val__item__univs@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Val__item__univs>


; <Skipped let __proj__Sg_Val__item__univs/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Val__item__typ>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Val__item__typ (Term) Term)

(declare-fun Tm_arrow_7d4a13f55eb804a2db5aecaf09b0c3d7 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Val__item__typ@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Val__item__typ>


; <Skipped let __proj__Sg_Val__item__typ/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Unk>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Unk (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Unk@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Unk>


; <Skipped let uu___is_Unk/>


; <Start encoding type FStar.Stubs.Reflection.V2.Data.qualifier>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.qualifier () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Assumption () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Assumption
(declare-fun FStar.Stubs.Reflection.V2.Data.Assumption@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.InternalAssumption () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.InternalAssumption
(declare-fun FStar.Stubs.Reflection.V2.Data.InternalAssumption@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.New () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.New
(declare-fun FStar.Stubs.Reflection.V2.Data.New@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Private () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Private
(declare-fun FStar.Stubs.Reflection.V2.Data.Private@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Unfold_for_unification_and_vcgen () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Unfold_for_unification_and_vcgen
(declare-fun FStar.Stubs.Reflection.V2.Data.Unfold_for_unification_and_vcgen@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Visible_default () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Visible_default
(declare-fun FStar.Stubs.Reflection.V2.Data.Visible_default@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Irreducible () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Irreducible
(declare-fun FStar.Stubs.Reflection.V2.Data.Irreducible@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Inline_for_extraction () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Inline_for_extraction
(declare-fun FStar.Stubs.Reflection.V2.Data.Inline_for_extraction@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.NoExtract () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.NoExtract
(declare-fun FStar.Stubs.Reflection.V2.Data.NoExtract@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Noeq () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Noeq
(declare-fun FStar.Stubs.Reflection.V2.Data.Noeq@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Unopteq () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Unopteq
(declare-fun FStar.Stubs.Reflection.V2.Data.Unopteq@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.TotalEffect () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.TotalEffect
(declare-fun FStar.Stubs.Reflection.V2.Data.TotalEffect@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Logic () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Logic
(declare-fun FStar.Stubs.Reflection.V2.Data.Logic@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Reifiable () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Reifiable
(declare-fun FStar.Stubs.Reflection.V2.Data.Reifiable@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Reflectable (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Reflectable__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Reflectable
(declare-fun FStar.Stubs.Reflection.V2.Data.Reflectable@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Discriminator (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Discriminator__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Discriminator
(declare-fun FStar.Stubs.Reflection.V2.Data.Discriminator@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Projector (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Projector__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Projector@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.RecordType (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.RecordType__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.RecordType
(declare-fun FStar.Stubs.Reflection.V2.Data.RecordType@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.RecordConstructor (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.RecordConstructor__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.RecordConstructor
(declare-fun FStar.Stubs.Reflection.V2.Data.RecordConstructor@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Action (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Action__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Action
(declare-fun FStar.Stubs.Reflection.V2.Data.Action@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.ExceptionConstructor () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.ExceptionConstructor
(declare-fun FStar.Stubs.Reflection.V2.Data.ExceptionConstructor@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.HasMaskedEffect () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.HasMaskedEffect
(declare-fun FStar.Stubs.Reflection.V2.Data.HasMaskedEffect@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Effect () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Effect
(declare-fun FStar.Stubs.Reflection.V2.Data.Effect@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.OnlyName () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.OnlyName
(declare-fun FStar.Stubs.Reflection.V2.Data.OnlyName@tok () Term)
(declare-fun Tm_arrow_1082414ab0946354a051120dec66bd44 () Term)

(declare-fun Tm_arrow_d6a5423973f8251c2d38857b68c51c07 () Term)
(declare-fun Tm_arrow_74443d1ee8810189dfae88379494bc4b () Term)



; <start constructor FStar.Stubs.Reflection.V2.Data.qualifier>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.qualifier ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
818)
(= __@x0
FStar.Stubs.Reflection.V2.Data.qualifier)))

; </end constructor FStar.Stubs.Reflection.V2.Data.qualifier>


; <start constructor FStar.Stubs.Reflection.V2.Data.Assumption>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Assumption ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
824)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Assumption)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Assumption>


; <start constructor FStar.Stubs.Reflection.V2.Data.InternalAssumption>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.InternalAssumption ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
826)
(= __@x0
FStar.Stubs.Reflection.V2.Data.InternalAssumption)))

; </end constructor FStar.Stubs.Reflection.V2.Data.InternalAssumption>


; <start constructor FStar.Stubs.Reflection.V2.Data.New>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.New ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
828)
(= __@x0
FStar.Stubs.Reflection.V2.Data.New)))

; </end constructor FStar.Stubs.Reflection.V2.Data.New>


; <start constructor FStar.Stubs.Reflection.V2.Data.Private>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Private ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
830)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Private)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Private>


; <start constructor FStar.Stubs.Reflection.V2.Data.Unfold_for_unification_and_vcgen>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Unfold_for_unification_and_vcgen ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
832)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Unfold_for_unification_and_vcgen)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Unfold_for_unification_and_vcgen>


; <start constructor FStar.Stubs.Reflection.V2.Data.Visible_default>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Visible_default ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
834)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Visible_default)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Visible_default>


; <start constructor FStar.Stubs.Reflection.V2.Data.Irreducible>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Irreducible ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
836)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Irreducible)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Irreducible>


; <start constructor FStar.Stubs.Reflection.V2.Data.Inline_for_extraction>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Inline_for_extraction ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
838)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Inline_for_extraction)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Inline_for_extraction>


; <start constructor FStar.Stubs.Reflection.V2.Data.NoExtract>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.NoExtract ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
840)
(= __@x0
FStar.Stubs.Reflection.V2.Data.NoExtract)))

; </end constructor FStar.Stubs.Reflection.V2.Data.NoExtract>


; <start constructor FStar.Stubs.Reflection.V2.Data.Noeq>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Noeq ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
842)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Noeq)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Noeq>


; <start constructor FStar.Stubs.Reflection.V2.Data.Unopteq>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Unopteq ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
844)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Unopteq)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Unopteq>


; <start constructor FStar.Stubs.Reflection.V2.Data.TotalEffect>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.TotalEffect ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
846)
(= __@x0
FStar.Stubs.Reflection.V2.Data.TotalEffect)))

; </end constructor FStar.Stubs.Reflection.V2.Data.TotalEffect>


; <start constructor FStar.Stubs.Reflection.V2.Data.Logic>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Logic ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
848)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Logic)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Logic>


; <start constructor FStar.Stubs.Reflection.V2.Data.Reifiable>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Reifiable ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
850)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Reifiable)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Reifiable>


; <start constructor FStar.Stubs.Reflection.V2.Data.Reflectable>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Reflectable ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
852)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Reflectable (FStar.Stubs.Reflection.V2.Data.Reflectable__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Reflectable>


; <start constructor FStar.Stubs.Reflection.V2.Data.Discriminator>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Discriminator ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
857)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Discriminator (FStar.Stubs.Reflection.V2.Data.Discriminator__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Discriminator>


; <start constructor FStar.Stubs.Reflection.V2.Data.Projector>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Projector ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
862)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Projector (FStar.Stubs.Reflection.V2.Data.Projector__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Projector>


; <start constructor FStar.Stubs.Reflection.V2.Data.RecordType>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.RecordType ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
867)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.RecordType (FStar.Stubs.Reflection.V2.Data.RecordType__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.RecordType>


; <start constructor FStar.Stubs.Reflection.V2.Data.RecordConstructor>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.RecordConstructor ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
872)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.RecordConstructor (FStar.Stubs.Reflection.V2.Data.RecordConstructor__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.RecordConstructor>


; <start constructor FStar.Stubs.Reflection.V2.Data.Action>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Action ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
877)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Action (FStar.Stubs.Reflection.V2.Data.Action__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Action>


; <start constructor FStar.Stubs.Reflection.V2.Data.ExceptionConstructor>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.ExceptionConstructor ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
882)
(= __@x0
FStar.Stubs.Reflection.V2.Data.ExceptionConstructor)))

; </end constructor FStar.Stubs.Reflection.V2.Data.ExceptionConstructor>


; <start constructor FStar.Stubs.Reflection.V2.Data.HasMaskedEffect>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.HasMaskedEffect ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
884)
(= __@x0
FStar.Stubs.Reflection.V2.Data.HasMaskedEffect)))

; </end constructor FStar.Stubs.Reflection.V2.Data.HasMaskedEffect>


; <start constructor FStar.Stubs.Reflection.V2.Data.Effect>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Effect ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
886)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Effect)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Effect>


; <start constructor FStar.Stubs.Reflection.V2.Data.OnlyName>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.OnlyName ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
888)
(= __@x0
FStar.Stubs.Reflection.V2.Data.OnlyName)))

; </end constructor FStar.Stubs.Reflection.V2.Data.OnlyName>


; </end encoding type FStar.Stubs.Reflection.V2.Data.qualifier>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Assumption>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Assumption (Term) Term)
(declare-fun Tm_arrow_38e97f6f9c4ed28e9e7b2f44588fcc35 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Assumption@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Assumption>


; <Skipped let uu___is_Assumption/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_InternalAssumption>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_InternalAssumption (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_InternalAssumption@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_InternalAssumption>


; <Skipped let uu___is_InternalAssumption/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_New>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_New (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_New@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_New>


; <Skipped let uu___is_New/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Private>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Private (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Private@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Private>


; <Skipped let uu___is_Private/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Unfold_for_unification_and_vcgen>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Unfold_for_unification_and_vcgen (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Unfold_for_unification_and_vcgen@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Unfold_for_unification_and_vcgen>


; <Skipped let uu___is_Unfold_for_unification_and_vcgen/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Visible_default>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Visible_default (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Visible_default@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Visible_default>


; <Skipped let uu___is_Visible_default/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Irreducible>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Irreducible (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Irreducible@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Irreducible>


; <Skipped let uu___is_Irreducible/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Inline_for_extraction>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Inline_for_extraction (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Inline_for_extraction@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Inline_for_extraction>


; <Skipped let uu___is_Inline_for_extraction/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_NoExtract>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_NoExtract (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_NoExtract@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_NoExtract>


; <Skipped let uu___is_NoExtract/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Noeq>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Noeq (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Noeq@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Noeq>


; <Skipped let uu___is_Noeq/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Unopteq>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Unopteq (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Unopteq@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Unopteq>


; <Skipped let uu___is_Unopteq/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_TotalEffect>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_TotalEffect (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_TotalEffect@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_TotalEffect>


; <Skipped let uu___is_TotalEffect/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Logic>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Logic (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Logic@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Logic>


; <Skipped let uu___is_Logic/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Reifiable>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Reifiable (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Reifiable@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Reifiable>


; <Skipped let uu___is_Reifiable/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Reflectable>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Reflectable (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Reflectable@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Reflectable>


; <Skipped let uu___is_Reflectable/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Reflectable__item___0>

(declare-fun Tm_refine_075243a51708ebd772d3d2e2eaf14013 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Reflectable__item___0 (Term) Term)

(declare-fun Tm_arrow_62c5175067d1159e9bb02ec8cdf74b0d () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Reflectable__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Reflectable__item___0>


; <Skipped let __proj__Reflectable__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Discriminator>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Discriminator (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Discriminator@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Discriminator>


; <Skipped let uu___is_Discriminator/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Discriminator__item___0>

(declare-fun Tm_refine_5ef75a4bf40ee1588677374b3b60e2f4 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Discriminator__item___0 (Term) Term)

(declare-fun Tm_arrow_95504ddb98329051558efcc26a3fc289 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Discriminator__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Discriminator__item___0>


; <Skipped let __proj__Discriminator__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Projector>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Projector (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Projector@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Projector>


; <Skipped let uu___is_Projector/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Projector__item___0>

(declare-fun Tm_refine_9a97090f045049b2e1368b937b56bb62 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Projector__item___0 (Term) Term)

(declare-fun Tm_arrow_16712d8a16e94c0d97d3d4b76ad1b84a () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Projector__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Projector__item___0>


; <Skipped let __proj__Projector__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_RecordType>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_RecordType (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_RecordType@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_RecordType>


; <Skipped let uu___is_RecordType/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__RecordType__item___0>

(declare-fun Tm_refine_d124b17fb34b3abd56d52517393b5448 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__RecordType__item___0 (Term) Term)

(declare-fun Tm_arrow_6322f3ba3fb547a521c07a45ca7d9c5e () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__RecordType__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__RecordType__item___0>


; <Skipped let __proj__RecordType__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_RecordConstructor>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_RecordConstructor (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_RecordConstructor@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_RecordConstructor>


; <Skipped let uu___is_RecordConstructor/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__RecordConstructor__item___0>

(declare-fun Tm_refine_1c0bafc599d6f39cd41d308647aaa42c () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__RecordConstructor__item___0 (Term) Term)

(declare-fun Tm_arrow_76756032df1de3823233aa70194e369d () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__RecordConstructor__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__RecordConstructor__item___0>


; <Skipped let __proj__RecordConstructor__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Action>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Action (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Action@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Action>


; <Skipped let uu___is_Action/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Action__item___0>

(declare-fun Tm_refine_cc2340ef5eb651c7528c5134e77b39ce () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Action__item___0 (Term) Term)

(declare-fun Tm_arrow_6da41690eff8dfcf04167992b03a8cca () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Action__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Action__item___0>


; <Skipped let __proj__Action__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_ExceptionConstructor>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_ExceptionConstructor (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_ExceptionConstructor@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_ExceptionConstructor>


; <Skipped let uu___is_ExceptionConstructor/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_HasMaskedEffect>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_HasMaskedEffect (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_HasMaskedEffect@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_HasMaskedEffect>


; <Skipped let uu___is_HasMaskedEffect/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Effect>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Effect (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Effect@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Effect>


; <Skipped let uu___is_Effect/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_OnlyName>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_OnlyName (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_OnlyName@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_OnlyName>


; <Skipped let uu___is_OnlyName/>


; <Start encoding let var>

(declare-fun FStar.Stubs.Reflection.V2.Data.var (Dummy_sort) Term)

; </end encoding let var>


; End Externals for interface FStar.Stubs.Reflection.V2.Data


; Externals for interface FStar.Stubs.VConfig


; <Start encoding type FStar.Stubs.VConfig.vconfig>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.VConfig.vconfig () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.VConfig.Mkvconfig (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_initial_fuel (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_max_fuel (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_initial_ifuel (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_max_ifuel (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_detail_errors (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_detail_hint_replay (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_no_smt (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_quake_lo (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_quake_hi (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_quake_keep (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_retry (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_smtencoding_elim_box (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_smtencoding_nl_arith_repr (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_smtencoding_l_arith_repr (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_smtencoding_valid_intro (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_smtencoding_valid_elim (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_tcnorm (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_no_plugins (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_no_tactics (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_z3cliopt (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_z3smtopt (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_z3refresh (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_z3rlimit (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_z3rlimit_factor (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_z3seed (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_z3version (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_trivial_pre_for_unannotated_effectful_fns (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_reuse_hint_for (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.VConfig.Mkvconfig
(declare-fun FStar.Stubs.VConfig.Mkvconfig@tok () Term)
(declare-fun Tm_arrow_6fee5c5ce2c60e9977ea829efd6b53dd () Term)

; <start constructor FStar.Stubs.VConfig.vconfig>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.VConfig.vconfig ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(= __@x0
FStar.Stubs.VConfig.vconfig)))

; </end constructor FStar.Stubs.VConfig.vconfig>


; <start constructor FStar.Stubs.VConfig.Mkvconfig>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.VConfig.Mkvconfig ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
107)
(= __@x0
(FStar.Stubs.VConfig.Mkvconfig (FStar.Stubs.VConfig.Mkvconfig_initial_fuel __@x0)
(FStar.Stubs.VConfig.Mkvconfig_max_fuel __@x0)
(FStar.Stubs.VConfig.Mkvconfig_initial_ifuel __@x0)
(FStar.Stubs.VConfig.Mkvconfig_max_ifuel __@x0)
(FStar.Stubs.VConfig.Mkvconfig_detail_errors __@x0)
(FStar.Stubs.VConfig.Mkvconfig_detail_hint_replay __@x0)
(FStar.Stubs.VConfig.Mkvconfig_no_smt __@x0)
(FStar.Stubs.VConfig.Mkvconfig_quake_lo __@x0)
(FStar.Stubs.VConfig.Mkvconfig_quake_hi __@x0)
(FStar.Stubs.VConfig.Mkvconfig_quake_keep __@x0)
(FStar.Stubs.VConfig.Mkvconfig_retry __@x0)
(FStar.Stubs.VConfig.Mkvconfig_smtencoding_elim_box __@x0)
(FStar.Stubs.VConfig.Mkvconfig_smtencoding_nl_arith_repr __@x0)
(FStar.Stubs.VConfig.Mkvconfig_smtencoding_l_arith_repr __@x0)
(FStar.Stubs.VConfig.Mkvconfig_smtencoding_valid_intro __@x0)
(FStar.Stubs.VConfig.Mkvconfig_smtencoding_valid_elim __@x0)
(FStar.Stubs.VConfig.Mkvconfig_tcnorm __@x0)
(FStar.Stubs.VConfig.Mkvconfig_no_plugins __@x0)
(FStar.Stubs.VConfig.Mkvconfig_no_tactics __@x0)
(FStar.Stubs.VConfig.Mkvconfig_z3cliopt __@x0)
(FStar.Stubs.VConfig.Mkvconfig_z3smtopt __@x0)
(FStar.Stubs.VConfig.Mkvconfig_z3refresh __@x0)
(FStar.Stubs.VConfig.Mkvconfig_z3rlimit __@x0)
(FStar.Stubs.VConfig.Mkvconfig_z3rlimit_factor __@x0)
(FStar.Stubs.VConfig.Mkvconfig_z3seed __@x0)
(FStar.Stubs.VConfig.Mkvconfig_z3version __@x0)
(FStar.Stubs.VConfig.Mkvconfig_trivial_pre_for_unannotated_effectful_fns __@x0)
(FStar.Stubs.VConfig.Mkvconfig_reuse_hint_for __@x0)))))

; </end constructor FStar.Stubs.VConfig.Mkvconfig>


; </end encoding type FStar.Stubs.VConfig.vconfig>


; <Start encoding assume FStar.Stubs.VConfig.vconfig__uu___haseq>


; </end encoding assume FStar.Stubs.VConfig.vconfig__uu___haseq>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__initial_fuel>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__initial_fuel (Term) Term)
(declare-fun Tm_arrow_84d0fca63763979babc70a9f05255e1b () Term)
(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__initial_fuel@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__initial_fuel>


; <Skipped let __proj__Mkvconfig__item__initial_fuel/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__max_fuel>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__max_fuel (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__max_fuel@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__max_fuel>


; <Skipped let __proj__Mkvconfig__item__max_fuel/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__initial_ifuel>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__initial_ifuel (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__initial_ifuel@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__initial_ifuel>


; <Skipped let __proj__Mkvconfig__item__initial_ifuel/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__max_ifuel>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__max_ifuel (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__max_ifuel@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__max_ifuel>


; <Skipped let __proj__Mkvconfig__item__max_ifuel/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__detail_errors>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__detail_errors (Term) Term)
(declare-fun Tm_arrow_b74e2fe0711e5bbcb71c4148e67c98b8 () Term)
(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__detail_errors@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__detail_errors>


; <Skipped let __proj__Mkvconfig__item__detail_errors/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__detail_hint_replay>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__detail_hint_replay (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__detail_hint_replay@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__detail_hint_replay>


; <Skipped let __proj__Mkvconfig__item__detail_hint_replay/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__no_smt>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__no_smt (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__no_smt@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__no_smt>


; <Skipped let __proj__Mkvconfig__item__no_smt/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__quake_lo>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__quake_lo (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__quake_lo@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__quake_lo>


; <Skipped let __proj__Mkvconfig__item__quake_lo/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__quake_hi>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__quake_hi (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__quake_hi@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__quake_hi>


; <Skipped let __proj__Mkvconfig__item__quake_hi/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__quake_keep>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__quake_keep (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__quake_keep@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__quake_keep>


; <Skipped let __proj__Mkvconfig__item__quake_keep/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__retry>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__retry (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__retry@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__retry>


; <Skipped let __proj__Mkvconfig__item__retry/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_elim_box>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_elim_box (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_elim_box@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_elim_box>


; <Skipped let __proj__Mkvconfig__item__smtencoding_elim_box/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_nl_arith_repr>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_nl_arith_repr (Term) Term)
(declare-fun Tm_arrow_e57b2f0d8b3b188a2dbb1683213804ea () Term)
(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_nl_arith_repr@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_nl_arith_repr>


; <Skipped let __proj__Mkvconfig__item__smtencoding_nl_arith_repr/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_l_arith_repr>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_l_arith_repr (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_l_arith_repr@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_l_arith_repr>


; <Skipped let __proj__Mkvconfig__item__smtencoding_l_arith_repr/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_valid_intro>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_valid_intro (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_valid_intro@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_valid_intro>


; <Skipped let __proj__Mkvconfig__item__smtencoding_valid_intro/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_valid_elim>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_valid_elim (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_valid_elim@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_valid_elim>


; <Skipped let __proj__Mkvconfig__item__smtencoding_valid_elim/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__tcnorm>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__tcnorm (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__tcnorm@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__tcnorm>


; <Skipped let __proj__Mkvconfig__item__tcnorm/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__no_plugins>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__no_plugins (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__no_plugins@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__no_plugins>


; <Skipped let __proj__Mkvconfig__item__no_plugins/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__no_tactics>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__no_tactics (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__no_tactics@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__no_tactics>


; <Skipped let __proj__Mkvconfig__item__no_tactics/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3cliopt>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3cliopt (Term) Term)
(declare-fun Tm_arrow_d840302211225e3d977749e995873bb0 () Term)
(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3cliopt@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3cliopt>


; <Skipped let __proj__Mkvconfig__item__z3cliopt/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3smtopt>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3smtopt (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3smtopt@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3smtopt>


; <Skipped let __proj__Mkvconfig__item__z3smtopt/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3refresh>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3refresh (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3refresh@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3refresh>


; <Skipped let __proj__Mkvconfig__item__z3refresh/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3rlimit>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3rlimit (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3rlimit@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3rlimit>


; <Skipped let __proj__Mkvconfig__item__z3rlimit/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3rlimit_factor>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3rlimit_factor (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3rlimit_factor@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3rlimit_factor>


; <Skipped let __proj__Mkvconfig__item__z3rlimit_factor/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3seed>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3seed (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3seed@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3seed>


; <Skipped let __proj__Mkvconfig__item__z3seed/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3version>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3version (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3version@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3version>


; <Skipped let __proj__Mkvconfig__item__z3version/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__trivial_pre_for_unannotated_effectful_fns>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__trivial_pre_for_unannotated_effectful_fns (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__trivial_pre_for_unannotated_effectful_fns@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__trivial_pre_for_unannotated_effectful_fns>


; <Skipped let __proj__Mkvconfig__item__trivial_pre_for_unannotated_effectful_fns/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__reuse_hint_for>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__reuse_hint_for (Term) Term)
(declare-fun Tm_arrow_2615d58522b2f0895725cb6e1c0af365 () Term)
(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__reuse_hint_for@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__reuse_hint_for>


; <Skipped let __proj__Mkvconfig__item__reuse_hint_for/>


; <Start encoding let check_with>

(declare-fun FStar.Stubs.VConfig.check_with (Term) Term)
(declare-fun Tm_arrow_2552937f3bf7bd107159201b26fc8d51 () Term)
(declare-fun FStar.Stubs.VConfig.check_with@tok () Term)

; </end encoding let check_with>


; End Externals for interface FStar.Stubs.VConfig


; Externals for module FStar.Order


; <Start encoding type FStar.Order.order>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Order.order () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Order.Lt () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Order.Lt
(declare-fun FStar.Order.Lt@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Order.Eq () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Order.Eq
(declare-fun FStar.Order.Eq@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Order.Gt () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Order.Gt
(declare-fun FStar.Order.Gt@tok () Term)

; <start constructor FStar.Order.order>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Order.order ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(= __@x0
FStar.Order.order)))

; </end constructor FStar.Order.order>


; <start constructor FStar.Order.Lt>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Order.Lt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
107)
(= __@x0
FStar.Order.Lt)))

; </end constructor FStar.Order.Lt>


; <start constructor FStar.Order.Eq>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Order.Eq ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
109)
(= __@x0
FStar.Order.Eq)))

; </end constructor FStar.Order.Eq>


; <start constructor FStar.Order.Gt>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Order.Gt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
111)
(= __@x0
FStar.Order.Gt)))

; </end constructor FStar.Order.Gt>


; </end encoding type FStar.Order.order>


; <Start encoding assume FStar.Order.order__uu___haseq>


; </end encoding assume FStar.Order.order__uu___haseq>


; <Start encoding val FStar.Order.uu___is_Lt>

(declare-fun FStar.Order.uu___is_Lt (Term) Term)
(declare-fun Tm_arrow_f4733f9ca94c256fc110aab69c684315 () Term)
(declare-fun FStar.Order.uu___is_Lt@tok () Term)

; </end encoding val FStar.Order.uu___is_Lt>


; <Skipped let uu___is_Lt/>


; <Start encoding val FStar.Order.uu___is_Eq>

(declare-fun FStar.Order.uu___is_Eq (Term) Term)

(declare-fun FStar.Order.uu___is_Eq@tok () Term)

; </end encoding val FStar.Order.uu___is_Eq>


; <Skipped let uu___is_Eq/>


; <Start encoding val FStar.Order.uu___is_Gt>

(declare-fun FStar.Order.uu___is_Gt (Term) Term)

(declare-fun FStar.Order.uu___is_Gt@tok () Term)

; </end encoding val FStar.Order.uu___is_Gt>


; <Skipped let uu___is_Gt/>


; <Skipped val FStar.Order.ge/>


; <Start encoding let ge>

(declare-fun FStar.Order.ge (Term) Term)

(declare-fun FStar.Order.ge@tok () Term)

; </end encoding let ge>


; <Skipped val FStar.Order.le/>


; <Start encoding let le>

(declare-fun FStar.Order.le (Term) Term)

(declare-fun FStar.Order.le@tok () Term)

; </end encoding let le>


; <Skipped val FStar.Order.ne/>


; <Start encoding let ne>

(declare-fun FStar.Order.ne (Term) Term)

(declare-fun FStar.Order.ne@tok () Term)

; </end encoding let ne>


; <Skipped val FStar.Order.gt/>


; <Start encoding let gt>

(declare-fun FStar.Order.gt (Term) Term)

(declare-fun FStar.Order.gt@tok () Term)

; </end encoding let gt>


; <Skipped val FStar.Order.lt/>


; <Start encoding let lt>

(declare-fun FStar.Order.lt (Term) Term)

(declare-fun FStar.Order.lt@tok () Term)

; </end encoding let lt>


; <Skipped val FStar.Order.eq/>


; <Start encoding let eq>

(declare-fun FStar.Order.eq (Term) Term)

(declare-fun FStar.Order.eq@tok () Term)

; </end encoding let eq>


; <Skipped val FStar.Order.lex/>


; <Start encoding let lex>

(declare-fun Tm_arrow_d033f7df6f155778bf181d0a4bdfb5f0 () Term)
(declare-fun FStar.Order.lex (Term Term) Term)

(declare-fun Tm_arrow_231731d350f71bf65fc5e4ecede26541 () Term)
(declare-fun FStar.Order.lex@tok () Term)


; </end encoding let lex>


; <Skipped val FStar.Order.order_from_int/>


; <Start encoding let order_from_int>

(declare-fun FStar.Order.order_from_int (Term) Term)
(declare-fun Tm_arrow_31eae5dcff218f899aa0b20c8d50d0f2 () Term)
(declare-fun FStar.Order.order_from_int@tok () Term)

; </end encoding let order_from_int>


; <Skipped val FStar.Order.int_of_order/>


; <Start encoding let int_of_order>

(declare-fun FStar.Order.int_of_order (Term) Term)
(declare-fun Tm_arrow_10db853014bf42255ab4fb43c484cc2f () Term)
(declare-fun FStar.Order.int_of_order@tok () Term)

; </end encoding let int_of_order>


; <Skipped val FStar.Order.compare_int/>


; <Start encoding let compare_int>

(declare-fun FStar.Order.compare_int (Term Term) Term)
(declare-fun Tm_arrow_6dc5617877ea21824a3786c54945e754 () Term)
(declare-fun FStar.Order.compare_int@tok () Term)

; </end encoding let compare_int>


; <Start encoding let rec compare_list>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Order.compare_list.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Order.compare_list.fuel_instrumented_token () Term)
(declare-fun FStar.Order.compare_list (Term Term Term Term) Term)
(declare-fun FStar.Order.compare_list@tok () Term)
(declare-fun Tm_refine_c4ca0045c23e9d6917d9058bb1a95736 (Term Term) Term)

(declare-fun Tm_arrow_e58951d4c03bef7faba3cf2bbc2bc6c9 (Term Term Term) Term)

(declare-fun Tm_abs_119e643a5c05187801d1e234c8b74e97 (Fuel Term Term Term) Term)






(declare-fun Tm_arrow_0cf8a3f58c3073b99b5547c8ff90ce24 () Term)

; </end encoding let rec compare_list>


; <Skipped val FStar.Order.compare_option/>


; <Start encoding let compare_option>

(declare-fun Tm_arrow_ccb3ed22b175455b00531b67b5c7d856 (Term) Term)
(declare-fun FStar.Order.compare_option (Term Term Term Term) Term)

(declare-fun Tm_arrow_c05924edaff2b70dddf604252cd68f59 () Term)
(declare-fun FStar.Order.compare_option@tok () Term)


; </end encoding let compare_option>


; End Externals for module FStar.Order


; Externals for interface FStar.Stubs.Reflection.V2.Builtins


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_ln>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_ln (Term) Term)
(declare-fun Tm_refine_81af2efa33d38022d26acf32f3bb78ef (Term) Term)
(declare-fun Tm_arrow_edfacdf1a39dd2bb9437936ae5571e1b () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_ln@tok () Term)


; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_ln>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_ln>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_ln (Term) Term)
(declare-fun Tm_arrow_ae5f5761de5ce126089c4c93d95fa5bd () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_ln@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_ln>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_comp>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_comp (Term) Term)
(declare-fun Tm_refine_f67fae703d4f124e9a89639bf06f15ff (Term) Term)
(declare-fun Tm_arrow_59d52264f8e0bdae6ad9158480fc7234 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_comp@tok () Term)


; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_comp>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_comp>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_comp (Term) Term)
(declare-fun Tm_arrow_26586180912b44730b889e0cbf4271c1 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_comp@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_comp>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_sigelt>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_sigelt (Term) Term)
(declare-fun Tm_arrow_5bc6df70bb02a49a9ea07032df544143 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_sigelt@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_sigelt>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_sigelt>

(declare-fun Tm_refine_37ba4960bf77692fc961c5076a4920fa () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_sigelt (Term) Term)

(declare-fun Tm_arrow_8ff288cac539d53e1e15e8e3a979c18b () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_sigelt@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_sigelt>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_fv>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_fv (Term) Term)
(declare-fun Tm_arrow_c3fb0161a14a082f4e4bc26b0dad1ae0 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_fv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_fv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_fv>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_fv (Term) Term)
(declare-fun Tm_arrow_3af61dda61d95d3a25d93edc5a57f9ba () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_fv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_fv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_namedv>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_namedv (Term) Term)
(declare-fun Tm_refine_d1c8bd5e9a4b36d0899d93d5312043d1 (Term) Term)
(declare-fun Tm_arrow_8bddebce94c93966988a8df0e95b036a () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_namedv@tok () Term)


; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_namedv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_namedv>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_namedv (Term) Term)
(declare-fun Tm_arrow_644d67eafe3559eadbcf793facc818e8 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_namedv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_namedv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_bv>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_bv (Term) Term)
(declare-fun Tm_refine_0b5d5a86e4795efe0cd6940af52c795e (Term) Term)
(declare-fun Tm_arrow_879fa031e673369671f5d9acd186404c () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_bv@tok () Term)


; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_bv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_bv>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_bv (Term) Term)
(declare-fun Tm_arrow_21f173ac5ea1bee3e534c9f064ee4f25 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_bv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_bv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_lb>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_lb (Term) Term)
(declare-fun Tm_refine_1dc3901317b190f7af2237f7a5ab40b4 (Term) Term)
(declare-fun Tm_arrow_ee866fe6a195cc24a17ffdb3a5943427 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_lb@tok () Term)


; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_lb>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_lb>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_lb (Term) Term)
(declare-fun Tm_arrow_3e1e980bf2c53283791672391ed384e5 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_lb@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_lb>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_binder>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_binder (Term) Term)
(declare-fun Tm_refine_336c863ebf681869395d10a4c152247a (Term) Term)
(declare-fun Tm_arrow_a919d3d09beb4a869fe0a490fb954a7d () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_binder@tok () Term)


; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_binder>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_binder>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_binder (Term) Term)
(declare-fun Tm_arrow_4b504dddb7d5a7abc8f962e3c58e43a5 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_binder@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_binder>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_universe>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_universe (Term) Term)
(declare-fun Tm_refine_4e84f047f00aa775b5130eee4ebea2da (Term) Term)
(declare-fun Tm_arrow_f8f73b0ba426978ac0ad97536de85b87 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_universe@tok () Term)


; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_universe>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_universe>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_universe (Term) Term)
(declare-fun Tm_arrow_1bfd553009ba1a7032bc8aa415f062f3 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_universe@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_universe>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_ident>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_ident (Term) Term)
(declare-fun Tm_refine_e268d523208e6c87431062a12db95340 (Term) Term)
(declare-fun Tm_arrow_ced4f6fd43565ab1573a3a0f4e66c296 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_ident@tok () Term)


; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_ident>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_ident>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_ident (Term) Term)
(declare-fun Tm_arrow_cfe243bd7060e3ef35b1236489cbd097 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_ident@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_ident>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_inv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_inv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_inv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_inv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_comp_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_comp_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_comp_inv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_comp_inv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_comp_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_comp_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_comp_inv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_comp_inv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_namedv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_namedv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_namedv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_namedv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_namedv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_namedv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_namedv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_namedv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_bv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_bv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_bv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_bv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_bv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_bv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_bv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_bv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_binder>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_binder (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_binder@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_binder>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_binder>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_binder (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_binder@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_binder>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_fv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_fv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_fv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_fv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_fv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_fv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_fv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_fv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_universe>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_universe (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_universe@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_universe>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_universe>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_universe (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_universe@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_universe>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_ident>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_ident (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_ident@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_ident>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_ident>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_ident (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_ident@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_ident>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_lb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_lb (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_lb@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_lb>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_lb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_lb (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_lb@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_lb>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_sigelt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_sigelt (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_sigelt@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_sigelt>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_sigelt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_sigelt (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_sigelt@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_sigelt>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.simple_binder_defn>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.simple_binder_defn (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.simple_binder_defn@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.simple_binder_defn>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.implode_qn>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.implode_qn (Term) Term)
(declare-fun Tm_arrow_340d345a08463dfae3b944609ae2f0c0 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.implode_qn@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.implode_qn>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.explode_qn>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.explode_qn (Term) Term)
(declare-fun Tm_arrow_26e764d0304e639834937407731051a4 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.explode_qn@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.explode_qn>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.compare_string>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.compare_string (Term Term) Term)
(declare-fun Tm_refine_e49224ef1fa94f244a92062dcdd52678 (Term Term) Term)
(declare-fun Tm_arrow_01ac862b139f8e45b0b814099dfdc270 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.compare_string@tok () Term)


; </end encoding val FStar.Stubs.Reflection.V2.Builtins.compare_string>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.lookup_typ>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.lookup_typ (Term Term) Term)
(declare-fun Tm_arrow_d0e04f111efd1f4790dfc68d3a7eea4e () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.lookup_typ@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.lookup_typ>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.compare_bv>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.compare_bv (Term Term) Term)
(declare-fun Tm_arrow_4c639e20026df9563b4be03d734bf1ce () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.compare_bv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.compare_bv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.compare_namedv>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.compare_namedv (Term Term) Term)
(declare-fun Tm_arrow_2859e91bfaf13e984be4bc96390bb75f () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.compare_namedv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.compare_namedv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.vars_of_env>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.vars_of_env (Term) Term)
(declare-fun Tm_arrow_e7db219d8ddeee1fd444e9cbf2117e02 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.vars_of_env@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.vars_of_env>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.moduleof>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.moduleof (Term) Term)
(declare-fun Tm_arrow_0817d2ce14540cc304dfd8c0c3d5edf9 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.moduleof@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.moduleof>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.lookup_attr_ses>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.lookup_attr_ses (Term Term) Term)
(declare-fun Tm_arrow_d42a17f234d24258f0fcad2a11f8cbfa () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.lookup_attr_ses@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.lookup_attr_ses>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.lookup_attr>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.lookup_attr (Term Term) Term)
(declare-fun Tm_arrow_f9b407dad273c97294b0201ec5c7f169 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.lookup_attr@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.lookup_attr>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.all_defs_in_env>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.all_defs_in_env (Term) Term)
(declare-fun Tm_arrow_d5df6bde986f6d815516bf8521bad601 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.all_defs_in_env@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.all_defs_in_env>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.defs_in_module>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.defs_in_module (Term Term) Term)
(declare-fun Tm_arrow_972a661ed66aa37b93ba51fc466e9964 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.defs_in_module@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.defs_in_module>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.term_eq>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.term_eq (Term Term) Term)
(declare-fun Tm_arrow_f31d1dc818d16b90cce97ac3bcaf5be1 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.term_eq@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.term_eq>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.env_open_modules>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.env_open_modules (Term) Term)
(declare-fun Tm_arrow_0c574e91f37d18d9b86a0281a674d93c () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.env_open_modules@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.env_open_modules>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.push_namedv>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.push_namedv (Term Term) Term)
(declare-fun Tm_arrow_51798ef8aa0ed9fc500e52a3c5e2ec4a () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.push_namedv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.push_namedv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.sigelt_attrs>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.sigelt_attrs (Term) Term)
(declare-fun Tm_arrow_1973aa5d78ccd271e8ebc4584584081a () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.sigelt_attrs@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.sigelt_attrs>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.set_sigelt_attrs>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.set_sigelt_attrs (Term Term) Term)
(declare-fun Tm_arrow_3c2c8e2b5bbb2c931985ec3aa4236070 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.set_sigelt_attrs@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.set_sigelt_attrs>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.sigelt_quals>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.sigelt_quals (Term) Term)
(declare-fun Tm_arrow_cfefb4fb12b4d5486e8880f13f735dc1 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.sigelt_quals@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.sigelt_quals>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.set_sigelt_quals>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.set_sigelt_quals (Term Term) Term)
(declare-fun Tm_arrow_ca3d81522decd6d31479318529924ab8 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.set_sigelt_quals@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.set_sigelt_quals>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.sigelt_opts>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.sigelt_opts (Term) Term)
(declare-fun Tm_arrow_8bb33d5239675d00a520a835bfbe4b76 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.sigelt_opts@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.sigelt_opts>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.embed_vconfig>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.embed_vconfig (Term) Term)
(declare-fun Tm_arrow_591882dfd0f9893d2e36fb92646bd925 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.embed_vconfig@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.embed_vconfig>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.subst_term>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.subst_term (Term Term) Term)
(declare-fun Tm_arrow_0f83a9a3eddc19bd0421427bfc4e58af () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.subst_term@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.subst_term>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.subst_comp>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.subst_comp (Term Term) Term)
(declare-fun Tm_arrow_90ba22378b295e56a45b27d1c88afd16 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.subst_comp@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.subst_comp>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.range_of_term>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.range_of_term (Term) Term)
(declare-fun Tm_arrow_1a5b26aa2b42dd31b00f3233999aad64 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.range_of_term@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.range_of_term>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.range_of_sigelt>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.range_of_sigelt (Term) Term)
(declare-fun Tm_arrow_5060e1bd607b83e02fa1f7d8d02e68df () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.range_of_sigelt@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.range_of_sigelt>


; End Externals for interface FStar.Stubs.Reflection.V2.Builtins


; Externals for module FStar.Reflection.V2.Collect


; <Start encoding let rec inspect_ln_unascribe>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Collect.inspect_ln_unascribe.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Collect.inspect_ln_unascribe.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Collect.inspect_ln_unascribe (Term) Term)
(declare-fun FStar.Reflection.V2.Collect.inspect_ln_unascribe@tok () Term)
(declare-fun Tm_refine_5bdd45d3da8bcffc0601859dc0f3192e (Term) Term)

(declare-fun Tm_arrow_a9d45b01dbc65a554cf520b785b211d9 () Term)


; </end encoding let rec inspect_ln_unascribe>


; <Start encoding let rec collect_app_ln'>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Collect.collect_app_ln_.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Collect.collect_app_ln_.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Collect.collect_app_ln_ (Term Term) Term)
(declare-fun FStar.Reflection.V2.Collect.collect_app_ln_@tok () Term)
(declare-fun Tm_arrow_86eff4a7d32619810ca356fb69ec9763 () Term)

; </end encoding let rec collect_app_ln'>


; <Skipped val FStar.Reflection.V2.Collect.collect_app_ln/>


; <Start encoding let collect_app_ln>

(declare-fun FStar.Reflection.V2.Collect.collect_app_ln (Term) Term)
(declare-fun Tm_arrow_5e962b7b23a7afb310a50c2f4fd11f50 () Term)
(declare-fun FStar.Reflection.V2.Collect.collect_app_ln@tok () Term)

; </end encoding let collect_app_ln>


; <Start encoding let rec collect_arr'>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Collect.collect_arr_.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Collect.collect_arr_.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Collect.collect_arr_ (Term Term) Term)
(declare-fun FStar.Reflection.V2.Collect.collect_arr_@tok () Term)
(declare-fun Tm_arrow_853614ae77f18710867dc728d88202da () Term)

; </end encoding let rec collect_arr'>


; <Skipped val FStar.Reflection.V2.Collect.collect_arr_ln_bs/>


; <Start encoding let collect_arr_ln_bs>

(declare-fun FStar.Reflection.V2.Collect.collect_arr_ln_bs (Term) Term)
(declare-fun Tm_arrow_a37005fa794e5394fd022e9ebf5e1146 () Term)
(declare-fun FStar.Reflection.V2.Collect.collect_arr_ln_bs@tok () Term)

; </end encoding let collect_arr_ln_bs>


; <Skipped val FStar.Reflection.V2.Collect.collect_arr_ln/>


; <Start encoding let collect_arr_ln>

(declare-fun FStar.Reflection.V2.Collect.collect_arr_ln (Term) Term)
(declare-fun Tm_arrow_3d1476e2ef7b80808b562b8619c09d4c () Term)
(declare-fun FStar.Reflection.V2.Collect.collect_arr_ln@tok () Term)
(declare-fun Tm_arrow_5325703aa6a68cd14b66139aac61ff6d () Term)
(declare-fun Tm_abs_2c761dce2543edfee3b14fa85e56cc61 () Term)

; </end encoding let collect_arr_ln>


; <Start encoding let rec collect_abs'>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Collect.collect_abs_.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Collect.collect_abs_.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Collect.collect_abs_ (Term Term) Term)
(declare-fun FStar.Reflection.V2.Collect.collect_abs_@tok () Term)
(declare-fun Tm_arrow_9ddb50f462b9f5b43e2226ed632c40d9 () Term)

; </end encoding let rec collect_abs'>


; <Skipped val FStar.Reflection.V2.Collect.collect_abs_ln/>


; <Start encoding let collect_abs_ln>

(declare-fun FStar.Reflection.V2.Collect.collect_abs_ln (Term) Term)
(declare-fun Tm_arrow_3f931ca965f09574196e106f5d187232 () Term)
(declare-fun FStar.Reflection.V2.Collect.collect_abs_ln@tok () Term)

; </end encoding let collect_abs_ln>


; End Externals for module FStar.Reflection.V2.Collect


; Externals for interface FStar.Reflection.V2.Compare


; <Start encoding val FStar.Reflection.V2.Compare.compare_name>

(declare-fun FStar.Reflection.V2.Compare.compare_name (Term Term) Term)
(declare-fun Tm_arrow_096b7be52bf8c66314a1a53e32582c9a () Term)
(declare-fun FStar.Reflection.V2.Compare.compare_name@tok () Term)

; </end encoding val FStar.Reflection.V2.Compare.compare_name>


; <Start encoding val FStar.Reflection.V2.Compare.compare_fv>

(declare-fun FStar.Reflection.V2.Compare.compare_fv (Term Term) Term)
(declare-fun Tm_arrow_2e95bd55b20109093ea5761ba2e93a30 () Term)
(declare-fun FStar.Reflection.V2.Compare.compare_fv@tok () Term)

; </end encoding val FStar.Reflection.V2.Compare.compare_fv>


; <Start encoding val FStar.Reflection.V2.Compare.compare_const>

(declare-fun FStar.Reflection.V2.Compare.compare_const (Term Term) Term)
(declare-fun Tm_arrow_e7d38e14bc8e9c10135c877f65d3699c () Term)
(declare-fun FStar.Reflection.V2.Compare.compare_const@tok () Term)

; </end encoding val FStar.Reflection.V2.Compare.compare_const>


; <Start encoding val FStar.Reflection.V2.Compare.compare_ident>

(declare-fun FStar.Reflection.V2.Compare.compare_ident (Term Term) Term)
(declare-fun Tm_arrow_5b3239343926f930ce54f71585477ab4 () Term)
(declare-fun FStar.Reflection.V2.Compare.compare_ident@tok () Term)

; </end encoding val FStar.Reflection.V2.Compare.compare_ident>


; <Start encoding val FStar.Reflection.V2.Compare.compare_universe>

(declare-fun FStar.Reflection.V2.Compare.compare_universe (Term Term) Term)
(declare-fun Tm_arrow_347fc221ef1b275489ed71dfe80522fa () Term)
(declare-fun FStar.Reflection.V2.Compare.compare_universe@tok () Term)

; </end encoding val FStar.Reflection.V2.Compare.compare_universe>


; <Start encoding val FStar.Reflection.V2.Compare.compare_universes>

(declare-fun FStar.Reflection.V2.Compare.compare_universes (Term Term) Term)
(declare-fun Tm_arrow_63056931cd34c2fbe82b304911116428 () Term)
(declare-fun FStar.Reflection.V2.Compare.compare_universes@tok () Term)

; </end encoding val FStar.Reflection.V2.Compare.compare_universes>


; <Start encoding val FStar.Reflection.V2.Compare.compare_term>

(declare-fun FStar.Reflection.V2.Compare.compare_term (Term Term) Term)
(declare-fun Tm_arrow_fade001406f0e61dc0d41c41d5bd1c97 () Term)
(declare-fun FStar.Reflection.V2.Compare.compare_term@tok () Term)

; </end encoding val FStar.Reflection.V2.Compare.compare_term>


; <Start encoding val FStar.Reflection.V2.Compare.compare_comp>

(declare-fun FStar.Reflection.V2.Compare.compare_comp (Term Term) Term)
(declare-fun Tm_arrow_82708541e878a218dba3ae8dd7ac38ef () Term)
(declare-fun FStar.Reflection.V2.Compare.compare_comp@tok () Term)

; </end encoding val FStar.Reflection.V2.Compare.compare_comp>


; <Start encoding val FStar.Reflection.V2.Compare.compare_binder>

(declare-fun FStar.Reflection.V2.Compare.compare_binder (Term Term) Term)
(declare-fun Tm_arrow_fccdc6c265998031f72d6f107676d7b9 () Term)
(declare-fun FStar.Reflection.V2.Compare.compare_binder@tok () Term)

; </end encoding val FStar.Reflection.V2.Compare.compare_binder>


; End Externals for interface FStar.Reflection.V2.Compare


; Externals for module FStar.Reflection.Const


; <Start encoding let imp_qn>

(declare-fun FStar.Reflection.Const.imp_qn (Dummy_sort) Term)

; </end encoding let imp_qn>


; <Start encoding let and_qn>

(declare-fun FStar.Reflection.Const.and_qn (Dummy_sort) Term)

; </end encoding let and_qn>


; <Start encoding let or_qn>

(declare-fun FStar.Reflection.Const.or_qn (Dummy_sort) Term)

; </end encoding let or_qn>


; <Start encoding let not_qn>

(declare-fun FStar.Reflection.Const.not_qn (Dummy_sort) Term)

; </end encoding let not_qn>


; <Start encoding let iff_qn>

(declare-fun FStar.Reflection.Const.iff_qn (Dummy_sort) Term)

; </end encoding let iff_qn>


; <Start encoding let eq2_qn>

(declare-fun FStar.Reflection.Const.eq2_qn (Dummy_sort) Term)

; </end encoding let eq2_qn>


; <Start encoding let eq1_qn>

(declare-fun FStar.Reflection.Const.eq1_qn (Dummy_sort) Term)

; </end encoding let eq1_qn>


; <Start encoding let true_qn>

(declare-fun FStar.Reflection.Const.true_qn (Dummy_sort) Term)

; </end encoding let true_qn>


; <Start encoding let false_qn>

(declare-fun FStar.Reflection.Const.false_qn (Dummy_sort) Term)

; </end encoding let false_qn>


; <Start encoding let b2t_qn>

(declare-fun FStar.Reflection.Const.b2t_qn (Dummy_sort) Term)

; </end encoding let b2t_qn>


; <Start encoding let forall_qn>

(declare-fun FStar.Reflection.Const.forall_qn (Dummy_sort) Term)

; </end encoding let forall_qn>


; <Start encoding let exists_qn>

(declare-fun FStar.Reflection.Const.exists_qn (Dummy_sort) Term)

; </end encoding let exists_qn>


; <Start encoding let squash_qn>

(declare-fun FStar.Reflection.Const.squash_qn (Dummy_sort) Term)

; </end encoding let squash_qn>


; <Start encoding let prop_qn>

(declare-fun FStar.Reflection.Const.prop_qn (Dummy_sort) Term)

; </end encoding let prop_qn>


; <Start encoding let bool_true_qn>

(declare-fun FStar.Reflection.Const.bool_true_qn (Dummy_sort) Term)

; </end encoding let bool_true_qn>


; <Start encoding let bool_false_qn>

(declare-fun FStar.Reflection.Const.bool_false_qn (Dummy_sort) Term)

; </end encoding let bool_false_qn>


; <Start encoding let int_lid>

(declare-fun FStar.Reflection.Const.int_lid (Dummy_sort) Term)

; </end encoding let int_lid>


; <Start encoding let bool_lid>

(declare-fun FStar.Reflection.Const.bool_lid (Dummy_sort) Term)

; </end encoding let bool_lid>


; <Start encoding let unit_lid>

(declare-fun FStar.Reflection.Const.unit_lid (Dummy_sort) Term)

; </end encoding let unit_lid>


; <Start encoding let string_lid>

(declare-fun FStar.Reflection.Const.string_lid (Dummy_sort) Term)

; </end encoding let string_lid>


; <Start encoding let add_qn>

(declare-fun FStar.Reflection.Const.add_qn (Dummy_sort) Term)

; </end encoding let add_qn>


; <Start encoding let neg_qn>

(declare-fun FStar.Reflection.Const.neg_qn (Dummy_sort) Term)

; </end encoding let neg_qn>


; <Start encoding let minus_qn>

(declare-fun FStar.Reflection.Const.minus_qn (Dummy_sort) Term)

; </end encoding let minus_qn>


; <Start encoding let mult_qn>

(declare-fun FStar.Reflection.Const.mult_qn (Dummy_sort) Term)

; </end encoding let mult_qn>


; <Start encoding let mult'_qn>

(declare-fun FStar.Reflection.Const.mult__qn (Dummy_sort) Term)

; </end encoding let mult'_qn>


; <Start encoding let div_qn>

(declare-fun FStar.Reflection.Const.div_qn (Dummy_sort) Term)

; </end encoding let div_qn>


; <Start encoding let lt_qn>

(declare-fun FStar.Reflection.Const.lt_qn (Dummy_sort) Term)

; </end encoding let lt_qn>


; <Start encoding let lte_qn>

(declare-fun FStar.Reflection.Const.lte_qn (Dummy_sort) Term)

; </end encoding let lte_qn>


; <Start encoding let gt_qn>

(declare-fun FStar.Reflection.Const.gt_qn (Dummy_sort) Term)

; </end encoding let gt_qn>


; <Start encoding let gte_qn>

(declare-fun FStar.Reflection.Const.gte_qn (Dummy_sort) Term)

; </end encoding let gte_qn>


; <Start encoding let mod_qn>

(declare-fun FStar.Reflection.Const.mod_qn (Dummy_sort) Term)

; </end encoding let mod_qn>


; <Start encoding let nil_qn>

(declare-fun FStar.Reflection.Const.nil_qn (Dummy_sort) Term)

; </end encoding let nil_qn>


; <Start encoding let cons_qn>

(declare-fun FStar.Reflection.Const.cons_qn (Dummy_sort) Term)

; </end encoding let cons_qn>


; <Start encoding let mktuple2_qn>

(declare-fun FStar.Reflection.Const.mktuple2_qn (Dummy_sort) Term)

; </end encoding let mktuple2_qn>


; <Start encoding let mktuple3_qn>

(declare-fun FStar.Reflection.Const.mktuple3_qn (Dummy_sort) Term)

; </end encoding let mktuple3_qn>


; <Start encoding let mktuple4_qn>

(declare-fun FStar.Reflection.Const.mktuple4_qn (Dummy_sort) Term)

; </end encoding let mktuple4_qn>


; <Start encoding let mktuple5_qn>

(declare-fun FStar.Reflection.Const.mktuple5_qn (Dummy_sort) Term)

; </end encoding let mktuple5_qn>


; <Start encoding let mktuple6_qn>

(declare-fun FStar.Reflection.Const.mktuple6_qn (Dummy_sort) Term)

; </end encoding let mktuple6_qn>


; <Start encoding let mktuple7_qn>

(declare-fun FStar.Reflection.Const.mktuple7_qn (Dummy_sort) Term)

; </end encoding let mktuple7_qn>


; <Start encoding let mktuple8_qn>

(declare-fun FStar.Reflection.Const.mktuple8_qn (Dummy_sort) Term)

; </end encoding let mktuple8_qn>


; <Start encoding let land_qn>

(declare-fun FStar.Reflection.Const.land_qn (Dummy_sort) Term)

; </end encoding let land_qn>


; <Start encoding let lxor_qn>

(declare-fun FStar.Reflection.Const.lxor_qn (Dummy_sort) Term)

; </end encoding let lxor_qn>


; <Start encoding let lor_qn>

(declare-fun FStar.Reflection.Const.lor_qn (Dummy_sort) Term)

; </end encoding let lor_qn>


; <Start encoding let ladd_qn>

(declare-fun FStar.Reflection.Const.ladd_qn (Dummy_sort) Term)

; </end encoding let ladd_qn>


; <Start encoding let lsub_qn>

(declare-fun FStar.Reflection.Const.lsub_qn (Dummy_sort) Term)

; </end encoding let lsub_qn>


; <Start encoding let shiftl_qn>

(declare-fun FStar.Reflection.Const.shiftl_qn (Dummy_sort) Term)

; </end encoding let shiftl_qn>


; <Start encoding let shiftr_qn>

(declare-fun FStar.Reflection.Const.shiftr_qn (Dummy_sort) Term)

; </end encoding let shiftr_qn>


; <Start encoding let udiv_qn>

(declare-fun FStar.Reflection.Const.udiv_qn (Dummy_sort) Term)

; </end encoding let udiv_qn>


; <Start encoding let umod_qn>

(declare-fun FStar.Reflection.Const.umod_qn (Dummy_sort) Term)

; </end encoding let umod_qn>


; <Start encoding let mul_mod_qn>

(declare-fun FStar.Reflection.Const.mul_mod_qn (Dummy_sort) Term)

; </end encoding let mul_mod_qn>


; <Start encoding let nat_bv_qn>

(declare-fun FStar.Reflection.Const.nat_bv_qn (Dummy_sort) Term)

; </end encoding let nat_bv_qn>


; End Externals for module FStar.Reflection.Const


; Externals for module FStar.Reflection.V2.Derived.Lemmas


; <Start encoding let rec forall_list>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Derived.Lemmas.forall_list.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Derived.Lemmas.forall_list.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Derived.Lemmas.forall_list (Term Term Term) Term)
(declare-fun FStar.Reflection.V2.Derived.Lemmas.forall_list@tok () Term)



(declare-fun Tm_arrow_e873d8ceceaa83cda2609338157fecb6 () Term)

; </end encoding let rec forall_list>


; <Start encoding let forallP>


(declare-fun FStar.Reflection.V2.Derived.Lemmas.forallP (Term Term Term) Term)


(declare-fun FStar.Reflection.V2.Derived.Lemmas.forallP@tok () Term)


; </end encoding let forallP>


; <Start encoding let op_Less_Less_Colon>

(declare-fun FStar.Reflection.V2.Derived.Lemmas.op_Less_Less_Colon (Term Term Term Term) Term)
(declare-fun Tm_arrow_eb48ab9869915f554b37a1284d8d27df () Term)
(declare-fun FStar.Reflection.V2.Derived.Lemmas.op_Less_Less_Colon@tok () Term)

(declare-fun Tm_abs_9f6092a14a151272f288f334302ef9b0 (Term Term Term) Term)

; </end encoding let op_Less_Less_Colon>


; <Skipped val FStar.Reflection.V2.Derived.Lemmas.list_ref/>


; <Start encoding let rec list_ref>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Derived.Lemmas.list_ref.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Derived.Lemmas.list_ref.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Derived.Lemmas.list_ref (Term Term Term) Term)
(declare-fun FStar.Reflection.V2.Derived.Lemmas.list_ref@tok () Term)




(declare-fun Tm_refine_136684b854bab8ef1ab7df664a942cb7 (Term Term) Term)




(declare-fun Tm_arrow_824002ecc09891a10902cdd4b737c346 () Term)



; </end encoding let rec list_ref>


; <Skipped val FStar.Reflection.V2.Derived.Lemmas.collect_app_order'/>


; <Start encoding let rec collect_app_order'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_app_order_ (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_app_order_@tok () Term)

; </end encoding let rec collect_app_order'>


; <Skipped val FStar.Reflection.V2.Derived.Lemmas.collect_app_order/>


; <Start encoding let collect_app_order>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_app_order (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_app_order@tok () Term)

; </end encoding let collect_app_order>


; <Skipped val FStar.Reflection.V2.Derived.Lemmas.collect_app_ref/>


; <Start encoding let collect_app_ref>

(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_app_ref (Term) Term)
(declare-fun Tm_refine_3196c4c70d54258177b468a0dcc9d1f5 (Term) Term)
(declare-fun Tm_refine_89ecbd89f2c58f00dfd6c4969b372418 (Term) Term)
(declare-fun Tm_arrow_22b21af71ff05532899781ca8b83ad2f () Term)
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_app_ref@tok () Term)




(declare-fun Tm_arrow_589555320ddfd8830ceb8e71c2c57cf9 () Term)
(declare-fun Tm_abs_1e4258eb7a9dbfd194bc3c3007ba13df (Term) Term)

; </end encoding let collect_app_ref>


; <Start encoding let rec collect_abs_order'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_abs_order_ (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_abs_order_@tok () Term)

; </end encoding let rec collect_abs_order'>


; <Skipped val FStar.Reflection.V2.Derived.Lemmas.collect_abs_ln_order/>


; <Start encoding let collect_abs_ln_order>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_abs_ln_order (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_abs_ln_order@tok () Term)

; </end encoding let collect_abs_ln_order>


; <Skipped val FStar.Reflection.V2.Derived.Lemmas.collect_abs_ln_ref/>


; <Start encoding let collect_abs_ln_ref>

(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_abs_ln_ref (Term) Term)
(declare-fun Tm_refine_9ba9bcdc78f82b83442a3130ef004f3c (Term) Term)

(declare-fun Tm_arrow_f2f406cc47d95b264d9f9f48073254a0 () Term)
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_abs_ln_ref@tok () Term)




(declare-fun Tm_arrow_537d49eb81f2d527a1221c6796af1848 () Term)
(declare-fun Tm_abs_612e3ade225ec84e54fb206ec60ebb94 (Term) Term)

; </end encoding let collect_abs_ln_ref>


; <Start encoding let rec collect_arr_order'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_arr_order_ (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_arr_order_@tok () Term)

; </end encoding let rec collect_arr_order'>


; <Skipped val FStar.Reflection.V2.Derived.Lemmas.collect_arr_ln_bs_order/>


; <Start encoding let collect_arr_ln_bs_order>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_arr_ln_bs_order (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_arr_ln_bs_order@tok () Term)

; </end encoding let collect_arr_ln_bs_order>


; <Skipped val FStar.Reflection.V2.Derived.Lemmas.collect_arr_ln_bs_ref/>


; <Start encoding let collect_arr_ln_bs_ref>

(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_arr_ln_bs_ref (Term) Term)

(declare-fun Tm_refine_87825054fc4249e41f06b772a68b51bf (Term) Term)
(declare-fun Tm_arrow_6fb382b27e5bf3c6a47caf8d34802e56 () Term)
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_arr_ln_bs_ref@tok () Term)







; </end encoding let collect_arr_ln_bs_ref>


; End Externals for module FStar.Reflection.V2.Derived.Lemmas


; Externals for module FStar.Reflection.V2.Derived


; <Start encoding let type_of_binder>

(declare-fun FStar.Reflection.V2.Derived.type_of_binder (Term) Term)

(declare-fun FStar.Reflection.V2.Derived.type_of_binder@tok () Term)

; </end encoding let type_of_binder>


; <Start encoding let rec inspect_ln_unascribe>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Derived.inspect_ln_unascribe.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Derived.inspect_ln_unascribe.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Derived.inspect_ln_unascribe (Term) Term)
(declare-fun FStar.Reflection.V2.Derived.inspect_ln_unascribe@tok () Term)





; </end encoding let rec inspect_ln_unascribe>


; <Start encoding let compare_bv>

(declare-fun FStar.Reflection.V2.Derived.compare_bv (Term Term) Term)

(declare-fun FStar.Reflection.V2.Derived.compare_bv@tok () Term)

; </end encoding let compare_bv>


; <Start encoding let compare_namedv>

(declare-fun FStar.Reflection.V2.Derived.compare_namedv (Term Term) Term)

(declare-fun FStar.Reflection.V2.Derived.compare_namedv@tok () Term)

; </end encoding let compare_namedv>


; <Start encoding let shift>

(declare-fun FStar.Reflection.V2.Derived.shift (Term Term) Term)
(declare-fun Tm_arrow_585e2901c9c8656a4d7198125fd6631a () Term)
(declare-fun FStar.Reflection.V2.Derived.shift@tok () Term)

; </end encoding let shift>


; <Start encoding let shift_subst>

(declare-fun FStar.Reflection.V2.Derived.shift_subst (Term Term) Term)
(declare-fun Tm_arrow_2f00219871d1cccc694fd8620951814a () Term)
(declare-fun FStar.Reflection.V2.Derived.shift_subst@tok () Term)

; </end encoding let shift_subst>


; <Start encoding let subst1>

(declare-fun FStar.Reflection.V2.Derived.subst1 (Term Term Term) Term)
(declare-fun Tm_arrow_256c5dbc2171c29387f80598787e786e () Term)
(declare-fun FStar.Reflection.V2.Derived.subst1@tok () Term)

; </end encoding let subst1>


; <Start encoding let mk_binder>

(declare-fun FStar.Reflection.V2.Derived.mk_binder (Term Term) Term)
(declare-fun Tm_arrow_2849191c089b9ba3e99f972f5fb1cca0 () Term)
(declare-fun FStar.Reflection.V2.Derived.mk_binder@tok () Term)

; </end encoding let mk_binder>


; <Start encoding let mk_implicit_binder>

(declare-fun FStar.Reflection.V2.Derived.mk_implicit_binder (Term Term) Term)
(declare-fun Tm_arrow_b492845346adc1e2aa61d484b415f66c () Term)
(declare-fun FStar.Reflection.V2.Derived.mk_implicit_binder@tok () Term)

; </end encoding let mk_implicit_binder>


; <Start encoding let push_binding>

(declare-fun FStar.Reflection.V2.Derived.push_binding (Term Term) Term)
(declare-fun Tm_arrow_5a64cec35ee3232a40fe7b007ec1c0f6 () Term)
(declare-fun FStar.Reflection.V2.Derived.push_binding@tok () Term)

; </end encoding let push_binding>


; <Skipped val FStar.Reflection.V2.Derived.flatten_name/>


; <Start encoding let rec flatten_name>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Derived.flatten_name.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Derived.flatten_name.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Derived.flatten_name (Term) Term)
(declare-fun FStar.Reflection.V2.Derived.flatten_name@tok () Term)
(declare-fun Tm_arrow_478c34962c98f82e9634c49621190059 () Term)

; </end encoding let rec flatten_name>


; <Start encoding let rec mk_app>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Derived.mk_app.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Derived.mk_app.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Derived.mk_app (Term Term) Term)
(declare-fun FStar.Reflection.V2.Derived.mk_app@tok () Term)
(declare-fun Tm_arrow_209d4a99c36bc09d1b5cd7112ded1887 () Term)

; </end encoding let rec mk_app>


; <Start encoding let mk_e_app>

(declare-fun FStar.Reflection.V2.Derived.mk_e_app (Term Term) Term)
(declare-fun Tm_arrow_ffa29a8727246c9a797593e419fa52ce () Term)
(declare-fun FStar.Reflection.V2.Derived.mk_e_app@tok () Term)
(declare-fun Tm_arrow_9ac62ec1d3e00e589803df6c7c8441cb () Term)
(declare-fun Tm_abs_026613339c4e76b4f27268e9988229e6 () Term)

; </end encoding let mk_e_app>


; <Start encoding let u_unk>

(declare-fun FStar.Reflection.V2.Derived.u_unk (Dummy_sort) Term)

; </end encoding let u_unk>


; <Start encoding let rec mk_tot_arr_ln>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Derived.mk_tot_arr_ln.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Derived.mk_tot_arr_ln.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Derived.mk_tot_arr_ln (Term Term) Term)
(declare-fun FStar.Reflection.V2.Derived.mk_tot_arr_ln@tok () Term)
(declare-fun Tm_arrow_816eb87884ffecb930774702d7f43238 () Term)

; </end encoding let rec mk_tot_arr_ln>


; <Start encoding let rec mk_arr_ln>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Derived.mk_arr_ln.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Derived.mk_arr_ln.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Derived.mk_arr_ln (Term Term) Term)
(declare-fun FStar.Reflection.V2.Derived.mk_arr_ln@tok () Term)
(declare-fun Tm_refine_14ce58fa655d913556bc0a15f9deed4c () Term)


(declare-fun Tm_arrow_9e683d0a5b453dd7437bce6376793236 () Term)

; </end encoding let rec mk_arr_ln>


; <Start encoding let fv_to_string>

(declare-fun FStar.Reflection.V2.Derived.fv_to_string (Term) Term)
(declare-fun Tm_arrow_df586ffd61f59c41e5acab94e49d5325 () Term)
(declare-fun FStar.Reflection.V2.Derived.fv_to_string@tok () Term)

; </end encoding let fv_to_string>


; <Start encoding let mk_stringlit>

(declare-fun FStar.Reflection.V2.Derived.mk_stringlit (Term) Term)
(declare-fun Tm_arrow_692ace01164967dd54e02e7fc5697bcc () Term)
(declare-fun FStar.Reflection.V2.Derived.mk_stringlit@tok () Term)

; </end encoding let mk_stringlit>


; <Start encoding let mk_strcat>

(declare-fun FStar.Reflection.V2.Derived.mk_strcat (Term Term) Term)
(declare-fun Tm_arrow_b2587842156653080c5dbd03b51c4882 () Term)
(declare-fun FStar.Reflection.V2.Derived.mk_strcat@tok () Term)

; </end encoding let mk_strcat>


; <Start encoding let mk_cons>

(declare-fun FStar.Reflection.V2.Derived.mk_cons (Term Term) Term)

(declare-fun FStar.Reflection.V2.Derived.mk_cons@tok () Term)

; </end encoding let mk_cons>


; <Start encoding let mk_cons_t>

(declare-fun FStar.Reflection.V2.Derived.mk_cons_t (Term Term Term) Term)
(declare-fun Tm_arrow_ce5395f21a999f76ea42e02cdb59164a () Term)
(declare-fun FStar.Reflection.V2.Derived.mk_cons_t@tok () Term)

; </end encoding let mk_cons_t>


; <Start encoding let rec mk_list>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Derived.mk_list.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Derived.mk_list.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Derived.mk_list (Term) Term)
(declare-fun FStar.Reflection.V2.Derived.mk_list@tok () Term)
(declare-fun Tm_arrow_5349bea1eb667e8805d1196b72ff2374 () Term)

; </end encoding let rec mk_list>


; <Start encoding let mktuple_n>

(declare-fun Tm_refine_f977a384b76798b53763842ecb73fa85 () Term)
(declare-fun FStar.Reflection.V2.Derived.mktuple_n (Term) Term)

(declare-fun Tm_arrow_c817c21c6da10061fc6359efcea02f3a () Term)
(declare-fun FStar.Reflection.V2.Derived.mktuple_n@tok () Term)


; </end encoding let mktuple_n>


; <Start encoding let destruct_tuple>

(declare-fun FStar.Reflection.V2.Derived.destruct_tuple (Term) Term)
(declare-fun Tm_arrow_5e2cff57cc11309a413cb5aec5418400 () Term)
(declare-fun FStar.Reflection.V2.Derived.destruct_tuple@tok () Term)
(declare-fun Tm_arrow_b5c589b2b1b61fb92f3ad4647f69bd27 () Term)
(declare-fun Tm_abs_ea26625b4612514882a35bc7ad85407a () Term)

; </end encoding let destruct_tuple>


; <Start encoding let mkpair>

(declare-fun FStar.Reflection.V2.Derived.mkpair (Term Term) Term)

(declare-fun FStar.Reflection.V2.Derived.mkpair@tok () Term)

; </end encoding let mkpair>


; <Start encoding let rec head>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Derived.head.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Derived.head.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Derived.head (Term) Term)
(declare-fun FStar.Reflection.V2.Derived.head@tok () Term)
(declare-fun Tm_arrow_c0cb8e83f4c7bb7edb622e3dd6e3eccd () Term)

; </end encoding let rec head>


; <Start encoding let is_fvar>

(declare-fun FStar.Reflection.V2.Derived.is_fvar (Term Term) Term)
(declare-fun Tm_arrow_8f97b8b6c43ae886d3fc9d4b4b422f6c () Term)
(declare-fun FStar.Reflection.V2.Derived.is_fvar@tok () Term)

; </end encoding let is_fvar>


; <Start encoding let rec is_any_fvar>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Derived.is_any_fvar.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Derived.is_any_fvar.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Derived.is_any_fvar (Term Term) Term)
(declare-fun FStar.Reflection.V2.Derived.is_any_fvar@tok () Term)
(declare-fun Tm_arrow_e49e81597570fb040c46860bec711e8f () Term)

; </end encoding let rec is_any_fvar>


; <Start encoding let is_uvar>

(declare-fun FStar.Reflection.V2.Derived.is_uvar (Term) Term)
(declare-fun Tm_arrow_e47f3fab6e1fda4847465de0e3bf735d () Term)
(declare-fun FStar.Reflection.V2.Derived.is_uvar@tok () Term)

; </end encoding let is_uvar>


; <Start encoding let binder_set_qual>

(declare-fun FStar.Reflection.V2.Derived.binder_set_qual (Term Term) Term)
(declare-fun Tm_arrow_91a6da84be5393e784b24621bd2e0967 () Term)
(declare-fun FStar.Reflection.V2.Derived.binder_set_qual@tok () Term)

; </end encoding let binder_set_qual>


; <Skipped val FStar.Reflection.V2.Derived.add_check_with/>


; <Start encoding let add_check_with>

(declare-fun FStar.Reflection.V2.Derived.add_check_with (Term Term) Term)
(declare-fun Tm_arrow_9b411f2cd504a7392711c3065e96cf2b () Term)
(declare-fun FStar.Reflection.V2.Derived.add_check_with@tok () Term)

; </end encoding let add_check_with>


; <Start encoding let un_uinst>

(declare-fun FStar.Reflection.V2.Derived.un_uinst (Term) Term)

(declare-fun FStar.Reflection.V2.Derived.un_uinst@tok () Term)

; </end encoding let un_uinst>


; <Start encoding let rec is_name_imp>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Derived.is_name_imp.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Derived.is_name_imp.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Derived.is_name_imp (Term Term) Term)
(declare-fun FStar.Reflection.V2.Derived.is_name_imp@tok () Term)
(declare-fun Tm_arrow_189ba37107393f6299e258e8211f3003 () Term)

; </end encoding let rec is_name_imp>


; <Start encoding let unsquash_term>

(declare-fun FStar.Reflection.V2.Derived.unsquash_term (Term) Term)
(declare-fun Tm_arrow_c9ae6e5861f8718c96a5dfe8800daaa6 () Term)
(declare-fun FStar.Reflection.V2.Derived.unsquash_term@tok () Term)

; </end encoding let unsquash_term>


; <Start encoding let maybe_unsquash_term>

(declare-fun FStar.Reflection.V2.Derived.maybe_unsquash_term (Term) Term)

(declare-fun FStar.Reflection.V2.Derived.maybe_unsquash_term@tok () Term)

; </end encoding let maybe_unsquash_term>


; End Externals for module FStar.Reflection.V2.Derived


; Externals for module FStar.Reflection.V2


; End Externals for module FStar.Reflection.V2


; Externals for interface FStar.Tactics.NamedView


; <Start encoding let namedv>

(declare-fun FStar.Tactics.NamedView.namedv () Term)

; </end encoding let namedv>


; <Start encoding let bv>

(declare-fun FStar.Tactics.NamedView.bv () Term)

; </end encoding let bv>


; <Start encoding let comp>

(declare-fun FStar.Tactics.NamedView.comp () Term)

; </end encoding let comp>


; <Start encoding let binding>

(declare-fun FStar.Tactics.NamedView.binding () Term)

; </end encoding let binding>


; <Start encoding let term>

(declare-fun FStar.Tactics.NamedView.term () Term)

; </end encoding let term>


; <Start encoding let universe>

(declare-fun FStar.Tactics.NamedView.universe () Term)

; </end encoding let universe>


; <Start encoding type FStar.Tactics.NamedView.binder>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.binder () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Mkbinder (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkbinder_uniq (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkbinder_ppname (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkbinder_sort (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkbinder_qual (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkbinder_attrs (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Mkbinder
(declare-fun FStar.Tactics.NamedView.Mkbinder@tok () Term)
(declare-fun Tm_arrow_c84020ddec6b5ac398401248f7883d1e () Term)

; <start constructor FStar.Tactics.NamedView.binder>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.binder ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(= __@x0
FStar.Tactics.NamedView.binder)))

; </end constructor FStar.Tactics.NamedView.binder>


; <start constructor FStar.Tactics.NamedView.Mkbinder>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Mkbinder ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
107)
(= __@x0
(FStar.Tactics.NamedView.Mkbinder (FStar.Tactics.NamedView.Mkbinder_uniq __@x0)
(FStar.Tactics.NamedView.Mkbinder_ppname __@x0)
(FStar.Tactics.NamedView.Mkbinder_sort __@x0)
(FStar.Tactics.NamedView.Mkbinder_qual __@x0)
(FStar.Tactics.NamedView.Mkbinder_attrs __@x0)))))

; </end constructor FStar.Tactics.NamedView.Mkbinder>


; </end encoding type FStar.Tactics.NamedView.binder>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mkbinder__item__uniq>

(declare-fun FStar.Tactics.NamedView.__proj__Mkbinder__item__uniq (Term) Term)
(declare-fun Tm_arrow_08a39d13d139efc327cbda171f647074 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkbinder__item__uniq@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mkbinder__item__uniq>


; <Skipped let __proj__Mkbinder__item__uniq/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mkbinder__item__ppname>

(declare-fun FStar.Tactics.NamedView.__proj__Mkbinder__item__ppname (Term) Term)
(declare-fun Tm_arrow_ef4e3a71e387a327f3cf2b29104d014d () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkbinder__item__ppname@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mkbinder__item__ppname>


; <Skipped let __proj__Mkbinder__item__ppname/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mkbinder__item__sort>

(declare-fun FStar.Tactics.NamedView.__proj__Mkbinder__item__sort (Term) Term)
(declare-fun Tm_arrow_70feaab7fe7549f942345d8bd5639b29 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkbinder__item__sort@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mkbinder__item__sort>


; <Skipped let __proj__Mkbinder__item__sort/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mkbinder__item__qual>

(declare-fun FStar.Tactics.NamedView.__proj__Mkbinder__item__qual (Term) Term)
(declare-fun Tm_arrow_722adbf5481f025715a2acc924c07eb1 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkbinder__item__qual@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mkbinder__item__qual>


; <Skipped let __proj__Mkbinder__item__qual/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mkbinder__item__attrs>

(declare-fun FStar.Tactics.NamedView.__proj__Mkbinder__item__attrs (Term) Term)
(declare-fun Tm_arrow_aa263730cc5f78ee1837f0ce69b57ecf () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkbinder__item__attrs@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mkbinder__item__attrs>


; <Skipped let __proj__Mkbinder__item__attrs/>


; <Start encoding let binders>

(declare-fun FStar.Tactics.NamedView.binders () Term)

; </end encoding let binders>


; <Start encoding let is_simple_binder>

(declare-fun FStar.Tactics.NamedView.is_simple_binder (Term) Term)
(declare-fun Tm_arrow_0ac347260142cc85ff8e54f143e64273 () Term)
(declare-fun FStar.Tactics.NamedView.is_simple_binder@tok () Term)

; </end encoding let is_simple_binder>


; <Start encoding let simple_binder>

(declare-fun FStar.Tactics.NamedView.simple_binder () Term)
(declare-fun Tm_refine_b26ca2aff6a22929fb21b63f378a437f () Term)

; </end encoding let simple_binder>


; <Start encoding let univ_name>

(declare-fun FStar.Tactics.NamedView.univ_name () Term)

; </end encoding let univ_name>


; <Start encoding type FStar.Tactics.NamedView.named_universe_view>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.named_universe_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Uv_Zero () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Uv_Zero
(declare-fun FStar.Tactics.NamedView.Uv_Zero@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Uv_Succ (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Uv_Succ__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Uv_Succ
(declare-fun FStar.Tactics.NamedView.Uv_Succ@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Uv_Max (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Uv_Max__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Uv_Max
(declare-fun FStar.Tactics.NamedView.Uv_Max@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Uv_BVar (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Uv_BVar__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Uv_BVar
(declare-fun FStar.Tactics.NamedView.Uv_BVar@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Uv_Name (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Uv_Name__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Uv_Name
(declare-fun FStar.Tactics.NamedView.Uv_Name@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Uv_Unif (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Uv_Unif__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Uv_Unif
(declare-fun FStar.Tactics.NamedView.Uv_Unif@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Uv_Unk () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Uv_Unk
(declare-fun FStar.Tactics.NamedView.Uv_Unk@tok () Term)
(declare-fun Tm_arrow_a5dc599a61c297d256a91a62224cf872 () Term)
(declare-fun Tm_arrow_acc6e65062cd2ac4430e98229f449445 () Term)
(declare-fun Tm_arrow_83b5bd77f42ddf88e128a037a91a1caa () Term)
(declare-fun Tm_arrow_f691cf6e2583caa2c655a3fd34affe28 () Term)
(declare-fun Tm_arrow_6138e0120fe1d049793ce29e1088066d () Term)

; <start constructor FStar.Tactics.NamedView.named_universe_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.named_universe_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
124)
(= __@x0
FStar.Tactics.NamedView.named_universe_view)))

; </end constructor FStar.Tactics.NamedView.named_universe_view>


; <start constructor FStar.Tactics.NamedView.Uv_Zero>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Uv_Zero ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
130)
(= __@x0
FStar.Tactics.NamedView.Uv_Zero)))

; </end constructor FStar.Tactics.NamedView.Uv_Zero>


; <start constructor FStar.Tactics.NamedView.Uv_Succ>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Uv_Succ ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
132)
(= __@x0
(FStar.Tactics.NamedView.Uv_Succ (FStar.Tactics.NamedView.Uv_Succ__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Uv_Succ>


; <start constructor FStar.Tactics.NamedView.Uv_Max>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Uv_Max ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
137)
(= __@x0
(FStar.Tactics.NamedView.Uv_Max (FStar.Tactics.NamedView.Uv_Max__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Uv_Max>


; <start constructor FStar.Tactics.NamedView.Uv_BVar>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Uv_BVar ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
142)
(= __@x0
(FStar.Tactics.NamedView.Uv_BVar (FStar.Tactics.NamedView.Uv_BVar__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Uv_BVar>


; <start constructor FStar.Tactics.NamedView.Uv_Name>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Uv_Name ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
147)
(= __@x0
(FStar.Tactics.NamedView.Uv_Name (FStar.Tactics.NamedView.Uv_Name__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Uv_Name>


; <start constructor FStar.Tactics.NamedView.Uv_Unif>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Uv_Unif ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
152)
(= __@x0
(FStar.Tactics.NamedView.Uv_Unif (FStar.Tactics.NamedView.Uv_Unif__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Uv_Unif>


; <start constructor FStar.Tactics.NamedView.Uv_Unk>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Uv_Unk ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
157)
(= __@x0
FStar.Tactics.NamedView.Uv_Unk)))

; </end constructor FStar.Tactics.NamedView.Uv_Unk>


; </end encoding type FStar.Tactics.NamedView.named_universe_view>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Uv_Zero>

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_Zero (Term) Term)
(declare-fun Tm_arrow_e916a0b037b2828ef3deb9a1be26cf82 () Term)
(declare-fun FStar.Tactics.NamedView.uu___is_Uv_Zero@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Uv_Zero>


; <Skipped let uu___is_Uv_Zero/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Uv_Succ>

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_Succ (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_Succ@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Uv_Succ>


; <Skipped let uu___is_Uv_Succ/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Uv_Succ__item___0>

(declare-fun Tm_refine_82914602a13807f685e45dd78cc5636a () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Uv_Succ__item___0 (Term) Term)

(declare-fun Tm_arrow_86b6b5510e034ff9066d55ffd4a31409 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Uv_Succ__item___0@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Uv_Succ__item___0>


; <Skipped let __proj__Uv_Succ__item___0/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Uv_Max>

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_Max (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_Max@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Uv_Max>


; <Skipped let uu___is_Uv_Max/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Uv_Max__item___0>

(declare-fun Tm_refine_6078923c349de6ec41dd797ce0f793ee () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Uv_Max__item___0 (Term) Term)

(declare-fun Tm_arrow_3ad365b0d4c48b2ce6cc186b5f7e3915 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Uv_Max__item___0@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Uv_Max__item___0>


; <Skipped let __proj__Uv_Max__item___0/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Uv_BVar>

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_BVar (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_BVar@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Uv_BVar>


; <Skipped let uu___is_Uv_BVar/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Uv_BVar__item___0>

(declare-fun Tm_refine_47d91bede15db6781395bb141c3d640d () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Uv_BVar__item___0 (Term) Term)

(declare-fun Tm_arrow_8f977daeff3acc578f224eb1f9725ad5 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Uv_BVar__item___0@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Uv_BVar__item___0>


; <Skipped let __proj__Uv_BVar__item___0/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Uv_Name>

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_Name (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_Name@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Uv_Name>


; <Skipped let uu___is_Uv_Name/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Uv_Name__item___0>

(declare-fun Tm_refine_69980a892705a9a64d8e676222efcd27 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Uv_Name__item___0 (Term) Term)

(declare-fun Tm_arrow_a7c4abfc1b3c544a740643b441a3f5ac () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Uv_Name__item___0@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Uv_Name__item___0>


; <Skipped let __proj__Uv_Name__item___0/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Uv_Unif>

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_Unif (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_Unif@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Uv_Unif>


; <Skipped let uu___is_Uv_Unif/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Uv_Unif__item___0>

(declare-fun Tm_refine_46ecd4555b9cddd750f1c172ed151b64 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Uv_Unif__item___0 (Term) Term)

(declare-fun Tm_arrow_fe78fda40aefa646a8abd98652e04aa7 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Uv_Unif__item___0@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Uv_Unif__item___0>


; <Skipped let __proj__Uv_Unif__item___0/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Uv_Unk>

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_Unk (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_Unk@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Uv_Unk>


; <Skipped let uu___is_Uv_Unk/>


; <Start encoding type FStar.Tactics.NamedView.pattern__Pat_Constant__payload>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.pattern__Pat_Constant__payload () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.pattern__Pat_Cons__payload () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.pattern__Pat_Var__payload () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.pattern () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload_c (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload_head (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload_univs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload_subpats (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload_v (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload_sort (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload_t (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Pat_Constant (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Pat_Constant__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Pat_Constant
(declare-fun FStar.Tactics.NamedView.Pat_Constant@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Pat_Cons (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Pat_Cons__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Pat_Cons
(declare-fun FStar.Tactics.NamedView.Pat_Cons@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Pat_Var (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Pat_Var__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Pat_Var
(declare-fun FStar.Tactics.NamedView.Pat_Var@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Pat_Dot_Term (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Pat_Dot_Term__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Pat_Dot_Term
(declare-fun FStar.Tactics.NamedView.Pat_Dot_Term@tok () Term)
(declare-fun Tm_arrow_17b9d33df279f268d37848fbc7d30fa0 () Term)
(declare-fun Tm_arrow_8d0e99d3c62e0fc7a13b674cfdb206d0 () Term)
(declare-fun Tm_arrow_992f7dd404a352d26701596c50d97877 () Term)
(declare-fun Tm_arrow_e03f0a0f7e86d52a5702fc8aa7dae3ff () Term)
(declare-fun Tm_arrow_8cd97a05fb7067b5274a12cabe306fe9 () Term)
(declare-fun Tm_arrow_9fe372b4479ab15c100f1aa878d3645a () Term)
(declare-fun Tm_arrow_d631b9acc0e9c6e10dc5f3509d41050f () Term)
(declare-fun Tm_arrow_bb4c95c6d1ac5e3bc200c6b070f18283 () Term)

; <start constructor FStar.Tactics.NamedView.pattern__Pat_Constant__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.pattern__Pat_Constant__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
192)
(= __@x0
FStar.Tactics.NamedView.pattern__Pat_Constant__payload)))

; </end constructor FStar.Tactics.NamedView.pattern__Pat_Constant__payload>


; <start constructor FStar.Tactics.NamedView.pattern__Pat_Cons__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.pattern__Pat_Cons__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
197)
(= __@x0
FStar.Tactics.NamedView.pattern__Pat_Cons__payload)))

; </end constructor FStar.Tactics.NamedView.pattern__Pat_Cons__payload>


; <start constructor FStar.Tactics.NamedView.pattern__Pat_Var__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.pattern__Pat_Var__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
202)
(= __@x0
FStar.Tactics.NamedView.pattern__Pat_Var__payload)))

; </end constructor FStar.Tactics.NamedView.pattern__Pat_Var__payload>


; <start constructor FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
207)
(= __@x0
FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload)))

; </end constructor FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload>


; <start constructor FStar.Tactics.NamedView.pattern>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.pattern ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
212)
(= __@x0
FStar.Tactics.NamedView.pattern)))

; </end constructor FStar.Tactics.NamedView.pattern>


; <start constructor FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
218)
(= __@x0
(FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload (FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload_c __@x0)))))

; </end constructor FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload>


; <start constructor FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
223)
(= __@x0
(FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload (FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload_head __@x0)
(FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload_univs __@x0)
(FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload_subpats __@x0)))))

; </end constructor FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload>


; <start constructor FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
228)
(= __@x0
(FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload (FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload_v __@x0)
(FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload_sort __@x0)))))

; </end constructor FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload>


; <start constructor FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
233)
(= __@x0
(FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload (FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload_t __@x0)))))

; </end constructor FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload>


; <start constructor FStar.Tactics.NamedView.Pat_Constant>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Pat_Constant ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
238)
(= __@x0
(FStar.Tactics.NamedView.Pat_Constant (FStar.Tactics.NamedView.Pat_Constant__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Pat_Constant>


; <start constructor FStar.Tactics.NamedView.Pat_Cons>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Pat_Cons ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
243)
(= __@x0
(FStar.Tactics.NamedView.Pat_Cons (FStar.Tactics.NamedView.Pat_Cons__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Pat_Cons>


; <start constructor FStar.Tactics.NamedView.Pat_Var>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Pat_Var ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
248)
(= __@x0
(FStar.Tactics.NamedView.Pat_Var (FStar.Tactics.NamedView.Pat_Var__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Pat_Var>


; <start constructor FStar.Tactics.NamedView.Pat_Dot_Term>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Pat_Dot_Term ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
253)
(= __@x0
(FStar.Tactics.NamedView.Pat_Dot_Term (FStar.Tactics.NamedView.Pat_Dot_Term__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Pat_Dot_Term>


; </end encoding type FStar.Tactics.NamedView.pattern__Pat_Constant__payload>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Constant__payload__item__c>

(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Constant__payload__item__c (Term) Term)
(declare-fun Tm_arrow_22923e70f0a5a9ed90bda9068057e193 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Constant__payload__item__c@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Constant__payload__item__c>


; <Skipped let __proj__Mkpattern__Pat_Constant__payload__item__c/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__head>

(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__head (Term) Term)
(declare-fun Tm_arrow_34cdc22ac0e27a1068072e34d6026f62 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__head@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__head>


; <Skipped let __proj__Mkpattern__Pat_Cons__payload__item__head/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__univs>

(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__univs (Term) Term)
(declare-fun Tm_arrow_1593598375eef9f68f56e6a4f741531d () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__univs@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__univs>


; <Skipped let __proj__Mkpattern__Pat_Cons__payload__item__univs/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__subpats>

(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__subpats (Term) Term)
(declare-fun Tm_arrow_013b012219d5f86b87e86a52228f37ee () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__subpats@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__subpats>


; <Skipped let __proj__Mkpattern__Pat_Cons__payload__item__subpats/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Var__payload__item__v>

(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Var__payload__item__v (Term) Term)
(declare-fun Tm_arrow_c5eb61aa8c75c93c411e2118222711bd () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Var__payload__item__v@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Var__payload__item__v>


; <Skipped let __proj__Mkpattern__Pat_Var__payload__item__v/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Var__payload__item__sort>

(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Var__payload__item__sort (Term) Term)
(declare-fun Tm_arrow_c0cf06658291c5365f31989995083375 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Var__payload__item__sort@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Var__payload__item__sort>


; <Skipped let __proj__Mkpattern__Pat_Var__payload__item__sort/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Dot_Term__payload__item__t>

(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Dot_Term__payload__item__t (Term) Term)
(declare-fun Tm_arrow_3bff8a953256246b4ca1722521469ae9 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Dot_Term__payload__item__t@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Dot_Term__payload__item__t>


; <Skipped let __proj__Mkpattern__Pat_Dot_Term__payload__item__t/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Pat_Constant>

(declare-fun FStar.Tactics.NamedView.uu___is_Pat_Constant (Term) Term)
(declare-fun Tm_arrow_7a91e5e1f35c852edab70b3e95b8d139 () Term)
(declare-fun FStar.Tactics.NamedView.uu___is_Pat_Constant@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Pat_Constant>


; <Skipped let uu___is_Pat_Constant/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Pat_Constant__item___0>

(declare-fun Tm_refine_760215d17bae6326cab536ca4b3b4619 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Pat_Constant__item___0 (Term) Term)

(declare-fun Tm_arrow_422d85aa4e646a0fef8a09c3cca4294c () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Pat_Constant__item___0@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Pat_Constant__item___0>


; <Skipped let __proj__Pat_Constant__item___0/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Pat_Cons>

(declare-fun FStar.Tactics.NamedView.uu___is_Pat_Cons (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Pat_Cons@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Pat_Cons>


; <Skipped let uu___is_Pat_Cons/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Pat_Cons__item___0>

(declare-fun Tm_refine_1568b2d9001092df78423ad5031cadd0 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Pat_Cons__item___0 (Term) Term)

(declare-fun Tm_arrow_df0caa47c66afdf8e0bd69017a9e531f () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Pat_Cons__item___0@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Pat_Cons__item___0>


; <Skipped let __proj__Pat_Cons__item___0/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Pat_Var>

(declare-fun FStar.Tactics.NamedView.uu___is_Pat_Var (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Pat_Var@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Pat_Var>


; <Skipped let uu___is_Pat_Var/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Pat_Var__item___0>

(declare-fun Tm_refine_5915aca42c70b204fb8abd23a0546bb3 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Pat_Var__item___0 (Term) Term)

(declare-fun Tm_arrow_18c14393d644dada37b2233d850662eb () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Pat_Var__item___0@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Pat_Var__item___0>


; <Skipped let __proj__Pat_Var__item___0/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Pat_Dot_Term>

(declare-fun FStar.Tactics.NamedView.uu___is_Pat_Dot_Term (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Pat_Dot_Term@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Pat_Dot_Term>


; <Skipped let uu___is_Pat_Dot_Term/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Pat_Dot_Term__item___0>

(declare-fun Tm_refine_fd8d0efc3ead3b7a2f2a11433fff8eaa () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Pat_Dot_Term__item___0 (Term) Term)

(declare-fun Tm_arrow_d908c4f3d32357c93a0576fc78c7bca2 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Pat_Dot_Term__item___0@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Pat_Dot_Term__item___0>


; <Skipped let __proj__Pat_Dot_Term__item___0/>


; <Start encoding let branch>

(declare-fun FStar.Tactics.NamedView.branch () Term)

; </end encoding let branch>


; <Start encoding let match_returns_ascription>

(declare-fun FStar.Tactics.NamedView.match_returns_ascription () Term)

; </end encoding let match_returns_ascription>


; <Start encoding type FStar.Tactics.NamedView.named_term_view>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.named_term_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_Var (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Var_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Tv_Var
(declare-fun FStar.Tactics.NamedView.Tv_Var@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_BVar (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_BVar_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Tv_BVar
(declare-fun FStar.Tactics.NamedView.Tv_BVar@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_FVar (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_FVar_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Tv_FVar
(declare-fun FStar.Tactics.NamedView.Tv_FVar@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_UInst (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_UInst_v (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_UInst_us (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Tv_UInst
(declare-fun FStar.Tactics.NamedView.Tv_UInst@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_App (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_App_hd (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_App_a (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Tv_App
(declare-fun FStar.Tactics.NamedView.Tv_App@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_Abs (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Abs_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Abs_body (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Tv_Abs
(declare-fun FStar.Tactics.NamedView.Tv_Abs@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_Arrow (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Arrow_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Arrow_c (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Tv_Arrow
(declare-fun FStar.Tactics.NamedView.Tv_Arrow@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_Type (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Type__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Tv_Type
(declare-fun FStar.Tactics.NamedView.Tv_Type@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_Refine (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Refine_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Refine_ref (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Tv_Refine
(declare-fun FStar.Tactics.NamedView.Tv_Refine@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_Const (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Const__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Tv_Const
(declare-fun FStar.Tactics.NamedView.Tv_Const@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_Uvar (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Uvar__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Uvar__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Tv_Uvar
(declare-fun FStar.Tactics.NamedView.Tv_Uvar@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_Let (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Let_recf (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Let_attrs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Let_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Let_def (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Let_body (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Tv_Let
(declare-fun FStar.Tactics.NamedView.Tv_Let@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_Match (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Match_scrutinee (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Match_ret (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Match_brs (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Tv_Match
(declare-fun FStar.Tactics.NamedView.Tv_Match@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_AscribedT (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_AscribedT_e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_AscribedT_t (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_AscribedT_tac (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_AscribedT_use_eq (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Tv_AscribedT
(declare-fun FStar.Tactics.NamedView.Tv_AscribedT@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_AscribedC (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_AscribedC_e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_AscribedC_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_AscribedC_tac (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_AscribedC_use_eq (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Tv_AscribedC
(declare-fun FStar.Tactics.NamedView.Tv_AscribedC@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_Unknown () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Tv_Unknown
(declare-fun FStar.Tactics.NamedView.Tv_Unknown@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_Unsupp () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Tv_Unsupp
(declare-fun FStar.Tactics.NamedView.Tv_Unsupp@tok () Term)
(declare-fun Tm_arrow_5c1f070e2c3f6aea1615ac72ff92f134 () Term)
(declare-fun Tm_arrow_aaa10438e13420dda77aa3ed15727e4f () Term)
(declare-fun Tm_arrow_e107b194c88d1202423eb9ac23dac0af () Term)
(declare-fun Tm_arrow_6a5c7eba81bbbea89549c5a73eba6930 () Term)
(declare-fun Tm_arrow_1909d6b2f543242d55c9b8e08141e0f1 () Term)
(declare-fun Tm_arrow_c466bfd390c5c2953a0b9c01aa2c0322 () Term)
(declare-fun Tm_arrow_583298f1189de1bc298fabe31fbced3a () Term)
(declare-fun Tm_arrow_3e6a09cde00868268e5919de8a6657aa () Term)
(declare-fun Tm_arrow_6e92ffeaaa5d327976e53a059cd42f75 () Term)
(declare-fun Tm_arrow_ba8d0d0b6e512d1bae2e554eadbce6a9 () Term)
(declare-fun Tm_arrow_96470e8b8b602d2238f3b130218bd83f () Term)
(declare-fun Tm_arrow_08012edb60a091ece3537a1d8f61a364 () Term)
(declare-fun Tm_arrow_439cc7b7d6fca19547b77142f4ef5258 () Term)
(declare-fun Tm_arrow_7308c93679c51dd735c2021e0a08790a () Term)
(declare-fun Tm_arrow_8e79e8a538e31266017e62070623d864 () Term)

; <start constructor FStar.Tactics.NamedView.named_term_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.named_term_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
295)
(= __@x0
FStar.Tactics.NamedView.named_term_view)))

; </end constructor FStar.Tactics.NamedView.named_term_view>


; <start constructor FStar.Tactics.NamedView.Tv_Var>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_Var ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
301)
(= __@x0
(FStar.Tactics.NamedView.Tv_Var (FStar.Tactics.NamedView.Tv_Var_v __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_Var>


; <start constructor FStar.Tactics.NamedView.Tv_BVar>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_BVar ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
306)
(= __@x0
(FStar.Tactics.NamedView.Tv_BVar (FStar.Tactics.NamedView.Tv_BVar_v __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_BVar>


; <start constructor FStar.Tactics.NamedView.Tv_FVar>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_FVar ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
311)
(= __@x0
(FStar.Tactics.NamedView.Tv_FVar (FStar.Tactics.NamedView.Tv_FVar_v __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_FVar>


; <start constructor FStar.Tactics.NamedView.Tv_UInst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_UInst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
316)
(= __@x0
(FStar.Tactics.NamedView.Tv_UInst (FStar.Tactics.NamedView.Tv_UInst_v __@x0)
(FStar.Tactics.NamedView.Tv_UInst_us __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_UInst>


; <start constructor FStar.Tactics.NamedView.Tv_App>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_App ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
321)
(= __@x0
(FStar.Tactics.NamedView.Tv_App (FStar.Tactics.NamedView.Tv_App_hd __@x0)
(FStar.Tactics.NamedView.Tv_App_a __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_App>


; <start constructor FStar.Tactics.NamedView.Tv_Abs>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_Abs ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
326)
(= __@x0
(FStar.Tactics.NamedView.Tv_Abs (FStar.Tactics.NamedView.Tv_Abs_b __@x0)
(FStar.Tactics.NamedView.Tv_Abs_body __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_Abs>


; <start constructor FStar.Tactics.NamedView.Tv_Arrow>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_Arrow ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
331)
(= __@x0
(FStar.Tactics.NamedView.Tv_Arrow (FStar.Tactics.NamedView.Tv_Arrow_b __@x0)
(FStar.Tactics.NamedView.Tv_Arrow_c __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_Arrow>


; <start constructor FStar.Tactics.NamedView.Tv_Type>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_Type ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
336)
(= __@x0
(FStar.Tactics.NamedView.Tv_Type (FStar.Tactics.NamedView.Tv_Type__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_Type>


; <start constructor FStar.Tactics.NamedView.Tv_Refine>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_Refine ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
341)
(= __@x0
(FStar.Tactics.NamedView.Tv_Refine (FStar.Tactics.NamedView.Tv_Refine_b __@x0)
(FStar.Tactics.NamedView.Tv_Refine_ref __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_Refine>


; <start constructor FStar.Tactics.NamedView.Tv_Const>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_Const ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
346)
(= __@x0
(FStar.Tactics.NamedView.Tv_Const (FStar.Tactics.NamedView.Tv_Const__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_Const>


; <start constructor FStar.Tactics.NamedView.Tv_Uvar>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_Uvar ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
351)
(= __@x0
(FStar.Tactics.NamedView.Tv_Uvar (FStar.Tactics.NamedView.Tv_Uvar__0 __@x0)
(FStar.Tactics.NamedView.Tv_Uvar__1 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_Uvar>


; <start constructor FStar.Tactics.NamedView.Tv_Let>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_Let ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
356)
(= __@x0
(FStar.Tactics.NamedView.Tv_Let (FStar.Tactics.NamedView.Tv_Let_recf __@x0)
(FStar.Tactics.NamedView.Tv_Let_attrs __@x0)
(FStar.Tactics.NamedView.Tv_Let_b __@x0)
(FStar.Tactics.NamedView.Tv_Let_def __@x0)
(FStar.Tactics.NamedView.Tv_Let_body __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_Let>


; <start constructor FStar.Tactics.NamedView.Tv_Match>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_Match ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
361)
(= __@x0
(FStar.Tactics.NamedView.Tv_Match (FStar.Tactics.NamedView.Tv_Match_scrutinee __@x0)
(FStar.Tactics.NamedView.Tv_Match_ret __@x0)
(FStar.Tactics.NamedView.Tv_Match_brs __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_Match>


; <start constructor FStar.Tactics.NamedView.Tv_AscribedT>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_AscribedT ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
366)
(= __@x0
(FStar.Tactics.NamedView.Tv_AscribedT (FStar.Tactics.NamedView.Tv_AscribedT_e __@x0)
(FStar.Tactics.NamedView.Tv_AscribedT_t __@x0)
(FStar.Tactics.NamedView.Tv_AscribedT_tac __@x0)
(FStar.Tactics.NamedView.Tv_AscribedT_use_eq __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_AscribedT>


; <start constructor FStar.Tactics.NamedView.Tv_AscribedC>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_AscribedC ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
371)
(= __@x0
(FStar.Tactics.NamedView.Tv_AscribedC (FStar.Tactics.NamedView.Tv_AscribedC_e __@x0)
(FStar.Tactics.NamedView.Tv_AscribedC_c __@x0)
(FStar.Tactics.NamedView.Tv_AscribedC_tac __@x0)
(FStar.Tactics.NamedView.Tv_AscribedC_use_eq __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_AscribedC>


; <start constructor FStar.Tactics.NamedView.Tv_Unknown>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_Unknown ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
376)
(= __@x0
FStar.Tactics.NamedView.Tv_Unknown)))

; </end constructor FStar.Tactics.NamedView.Tv_Unknown>


; <start constructor FStar.Tactics.NamedView.Tv_Unsupp>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_Unsupp ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
378)
(= __@x0
FStar.Tactics.NamedView.Tv_Unsupp)))

; </end constructor FStar.Tactics.NamedView.Tv_Unsupp>


; </end encoding type FStar.Tactics.NamedView.named_term_view>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Tv_Var>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Var (Term) Term)
(declare-fun Tm_arrow_b0134b51f4be4e72310d2f9fb37ce6ad () Term)
(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Var@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Tv_Var>


; <Skipped let uu___is_Tv_Var/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Var__item__v>

(declare-fun Tm_refine_87a3dba5453ef74fda9f0336086dad8a () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Var__item__v (Term) Term)

(declare-fun Tm_arrow_c9328b6bd1807daa66bd2926d95e76f5 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Var__item__v@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Var__item__v>


; <Skipped let __proj__Tv_Var__item__v/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Tv_BVar>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_BVar (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_BVar@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Tv_BVar>


; <Skipped let uu___is_Tv_BVar/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_BVar__item__v>

(declare-fun Tm_refine_2041770b714b0ea10869e92b575e16fd () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_BVar__item__v (Term) Term)

(declare-fun Tm_arrow_c49fc6ef2dccc52996b9034f265f34b8 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_BVar__item__v@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_BVar__item__v>


; <Skipped let __proj__Tv_BVar__item__v/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Tv_FVar>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_FVar (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_FVar@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Tv_FVar>


; <Skipped let uu___is_Tv_FVar/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_FVar__item__v>

(declare-fun Tm_refine_7aae385a6086c7833dd8519240cd12b3 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_FVar__item__v (Term) Term)

(declare-fun Tm_arrow_3b035adde69083f038e18658ffe5cf95 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_FVar__item__v@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_FVar__item__v>


; <Skipped let __proj__Tv_FVar__item__v/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Tv_UInst>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_UInst (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_UInst@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Tv_UInst>


; <Skipped let uu___is_Tv_UInst/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_UInst__item__v>

(declare-fun Tm_refine_655439b8882f5161418b9e9a204ac9a0 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_UInst__item__v (Term) Term)

(declare-fun Tm_arrow_c2b162197c1542fb5d84d2b59db05d0e () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_UInst__item__v@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_UInst__item__v>


; <Skipped let __proj__Tv_UInst__item__v/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_UInst__item__us>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_UInst__item__us (Term) Term)

(declare-fun Tm_arrow_e352544daf155d6e18b76457dd205930 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_UInst__item__us@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_UInst__item__us>


; <Skipped let __proj__Tv_UInst__item__us/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Tv_App>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_App (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_App@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Tv_App>


; <Skipped let uu___is_Tv_App/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_App__item__hd>

(declare-fun Tm_refine_cffc8fe5fb5b8b45155c826839a0836a () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_App__item__hd (Term) Term)

(declare-fun Tm_arrow_8846e221b3719edc894c953a1ba8378a () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_App__item__hd@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_App__item__hd>


; <Skipped let __proj__Tv_App__item__hd/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_App__item__a>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_App__item__a (Term) Term)

(declare-fun Tm_arrow_2aab43ea5f22689a8a6d079612e39488 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_App__item__a@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_App__item__a>


; <Skipped let __proj__Tv_App__item__a/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Tv_Abs>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Abs (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Abs@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Tv_Abs>


; <Skipped let uu___is_Tv_Abs/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Abs__item__b>

(declare-fun Tm_refine_5d3cef9f2193748f571d405779044e57 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Abs__item__b (Term) Term)

(declare-fun Tm_arrow_533a28ddfb46ecc82a01bbe48c31bd95 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Abs__item__b@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Abs__item__b>


; <Skipped let __proj__Tv_Abs__item__b/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Abs__item__body>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_Abs__item__body (Term) Term)

(declare-fun Tm_arrow_8ac939080effe0b960302d7d1c702fad () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Abs__item__body@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Abs__item__body>


; <Skipped let __proj__Tv_Abs__item__body/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Tv_Arrow>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Arrow (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Arrow@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Tv_Arrow>


; <Skipped let uu___is_Tv_Arrow/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Arrow__item__b>

(declare-fun Tm_refine_f2276b7d8e23c26ee3ba9a535c3c060a () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Arrow__item__b (Term) Term)

(declare-fun Tm_arrow_84eeab64ef961ed4b09155732e1a0f44 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Arrow__item__b@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Arrow__item__b>


; <Skipped let __proj__Tv_Arrow__item__b/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Arrow__item__c>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_Arrow__item__c (Term) Term)

(declare-fun Tm_arrow_eda0809078946fc4fc204af5aa4c5b64 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Arrow__item__c@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Arrow__item__c>


; <Skipped let __proj__Tv_Arrow__item__c/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Tv_Type>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Type (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Type@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Tv_Type>


; <Skipped let uu___is_Tv_Type/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Type__item___0>

(declare-fun Tm_refine_b305bae344c1a3fca91e8645cdcd9dd7 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Type__item___0 (Term) Term)

(declare-fun Tm_arrow_583e9c9e3efeee738c16adf7ba043152 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Type__item___0@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Type__item___0>


; <Skipped let __proj__Tv_Type__item___0/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Tv_Refine>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Refine (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Refine@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Tv_Refine>


; <Skipped let uu___is_Tv_Refine/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Refine__item__b>

(declare-fun Tm_refine_1c7ad8d12925c022661dbfe6bb0e51a3 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Refine__item__b (Term) Term)

(declare-fun Tm_arrow_659b4038825ae53b9e315e2e0a5a9de5 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Refine__item__b@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Refine__item__b>


; <Skipped let __proj__Tv_Refine__item__b/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Refine__item__ref>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_Refine__item__ref (Term) Term)

(declare-fun Tm_arrow_0816d3b11d85c3f2303944343eb3e1fe () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Refine__item__ref@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Refine__item__ref>


; <Skipped let __proj__Tv_Refine__item__ref/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Tv_Const>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Const (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Const@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Tv_Const>


; <Skipped let uu___is_Tv_Const/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Const__item___0>

(declare-fun Tm_refine_e43528237c88eee4c4a7209fbfece30a () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Const__item___0 (Term) Term)

(declare-fun Tm_arrow_f6aaceef6b80757c3a7eec8e1ffeb50d () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Const__item___0@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Const__item___0>


; <Skipped let __proj__Tv_Const__item___0/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Tv_Uvar>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Uvar (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Uvar@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Tv_Uvar>


; <Skipped let uu___is_Tv_Uvar/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Uvar__item___0>

(declare-fun Tm_refine_2dfafc08974a66f04ebf362802f0a508 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Uvar__item___0 (Term) Term)

(declare-fun Tm_arrow_ec7bb113cc94ec4876ca7ad0476bef43 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Uvar__item___0@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Uvar__item___0>


; <Skipped let __proj__Tv_Uvar__item___0/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Uvar__item___1>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_Uvar__item___1 (Term) Term)

(declare-fun Tm_arrow_cefaf448023d2e24eeeea03152c7031a () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Uvar__item___1@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Uvar__item___1>


; <Skipped let __proj__Tv_Uvar__item___1/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Tv_Let>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Let (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Let@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Tv_Let>


; <Skipped let uu___is_Tv_Let/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Let__item__recf>

(declare-fun Tm_refine_580a83cfd5a14ce77506ef9a20b92d03 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Let__item__recf (Term) Term)

(declare-fun Tm_arrow_a2937e85ca73965969d4411bca79b361 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Let__item__recf@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Let__item__recf>


; <Skipped let __proj__Tv_Let__item__recf/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Let__item__attrs>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_Let__item__attrs (Term) Term)

(declare-fun Tm_arrow_d2c895353b6d5a4384a49402bb656311 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Let__item__attrs@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Let__item__attrs>


; <Skipped let __proj__Tv_Let__item__attrs/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Let__item__b>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_Let__item__b (Term) Term)

(declare-fun Tm_arrow_7afa8f78666d0cdafdd5b868cc36fff9 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Let__item__b@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Let__item__b>


; <Skipped let __proj__Tv_Let__item__b/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Let__item__def>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_Let__item__def (Term) Term)

(declare-fun Tm_arrow_27b154f2dcda99708e6d9e52ad3a1e5d () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Let__item__def@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Let__item__def>


; <Skipped let __proj__Tv_Let__item__def/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Let__item__body>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_Let__item__body (Term) Term)


(declare-fun FStar.Tactics.NamedView.__proj__Tv_Let__item__body@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Let__item__body>


; <Skipped let __proj__Tv_Let__item__body/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Tv_Match>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Match (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Match@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Tv_Match>


; <Skipped let uu___is_Tv_Match/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Match__item__scrutinee>

(declare-fun Tm_refine_0c31d3f32afa528dfef0b4e53409fe9f () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Match__item__scrutinee (Term) Term)

(declare-fun Tm_arrow_eff0944c33909c5240469d840f765450 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Match__item__scrutinee@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Match__item__scrutinee>


; <Skipped let __proj__Tv_Match__item__scrutinee/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Match__item__ret>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_Match__item__ret (Term) Term)

(declare-fun Tm_arrow_a38a29fac0905320916f043dc1e2e402 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Match__item__ret@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Match__item__ret>


; <Skipped let __proj__Tv_Match__item__ret/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Match__item__brs>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_Match__item__brs (Term) Term)

(declare-fun Tm_arrow_9753b34ee743aec7dee6ff8aad4e29c8 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Match__item__brs@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Match__item__brs>


; <Skipped let __proj__Tv_Match__item__brs/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Tv_AscribedT>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_AscribedT (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_AscribedT@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Tv_AscribedT>


; <Skipped let uu___is_Tv_AscribedT/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__e>

(declare-fun Tm_refine_4fe825d3c6fe2aa01d40d69b72618cd9 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__e (Term) Term)

(declare-fun Tm_arrow_3a2e0dc20e001c8cef41ab602e078f6e () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__e@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__e>


; <Skipped let __proj__Tv_AscribedT__item__e/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__t>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__t (Term) Term)


(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__t@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__t>


; <Skipped let __proj__Tv_AscribedT__item__t/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__tac>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__tac (Term) Term)

(declare-fun Tm_arrow_64636f29beeaef053738d09e320bbe94 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__tac@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__tac>


; <Skipped let __proj__Tv_AscribedT__item__tac/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__use_eq>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__use_eq (Term) Term)

(declare-fun Tm_arrow_eb184a2f728421d0662c81a49d628354 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__use_eq@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__use_eq>


; <Skipped let __proj__Tv_AscribedT__item__use_eq/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Tv_AscribedC>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_AscribedC (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_AscribedC@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Tv_AscribedC>


; <Skipped let uu___is_Tv_AscribedC/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__e>

(declare-fun Tm_refine_188807386559837eacdc72e583387de0 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__e (Term) Term)

(declare-fun Tm_arrow_b08d9f9ed5fc9183d44b539596c21c5c () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__e@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__e>


; <Skipped let __proj__Tv_AscribedC__item__e/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__c>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__c (Term) Term)

(declare-fun Tm_arrow_61b8c61abe9f4144303ab93b91d20fbc () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__c@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__c>


; <Skipped let __proj__Tv_AscribedC__item__c/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__tac>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__tac (Term) Term)

(declare-fun Tm_arrow_b8c3ff01cef6a61dc79dd2ae7a29d01e () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__tac@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__tac>


; <Skipped let __proj__Tv_AscribedC__item__tac/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__use_eq>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__use_eq (Term) Term)

(declare-fun Tm_arrow_f90859595913cf4f3de92a943740cd55 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__use_eq@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__use_eq>


; <Skipped let __proj__Tv_AscribedC__item__use_eq/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Tv_Unknown>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Unknown (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Unknown@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Tv_Unknown>


; <Skipped let uu___is_Tv_Unknown/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Tv_Unsupp>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Unsupp (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Unsupp@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Tv_Unsupp>


; <Skipped let uu___is_Tv_Unsupp/>


; <Start encoding let notAscription>

(declare-fun FStar.Tactics.NamedView.notAscription (Term) Term)

(declare-fun FStar.Tactics.NamedView.notAscription@tok () Term)

; </end encoding let notAscription>


; <Start encoding type FStar.Tactics.NamedView.letbinding>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.letbinding () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Mkletbinding (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkletbinding_lb_fv (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkletbinding_lb_us (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkletbinding_lb_typ (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkletbinding_lb_def (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Mkletbinding
(declare-fun FStar.Tactics.NamedView.Mkletbinding@tok () Term)
(declare-fun Tm_arrow_b0b9fc2d17e477ab0db727ac25ca4f92 () Term)

; <start constructor FStar.Tactics.NamedView.letbinding>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.letbinding ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
547)
(= __@x0
FStar.Tactics.NamedView.letbinding)))

; </end constructor FStar.Tactics.NamedView.letbinding>


; <start constructor FStar.Tactics.NamedView.Mkletbinding>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Mkletbinding ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
553)
(= __@x0
(FStar.Tactics.NamedView.Mkletbinding (FStar.Tactics.NamedView.Mkletbinding_lb_fv __@x0)
(FStar.Tactics.NamedView.Mkletbinding_lb_us __@x0)
(FStar.Tactics.NamedView.Mkletbinding_lb_typ __@x0)
(FStar.Tactics.NamedView.Mkletbinding_lb_def __@x0)))))

; </end constructor FStar.Tactics.NamedView.Mkletbinding>


; </end encoding type FStar.Tactics.NamedView.letbinding>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_fv>

(declare-fun FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_fv (Term) Term)
(declare-fun Tm_arrow_965f82522ab41af607f92b7910914ec6 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_fv@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_fv>


; <Skipped let __proj__Mkletbinding__item__lb_fv/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_us>

(declare-fun FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_us (Term) Term)
(declare-fun Tm_arrow_e979dfb8134fb1ac00f85ff4b40e99a6 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_us@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_us>


; <Skipped let __proj__Mkletbinding__item__lb_us/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_typ>

(declare-fun FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_typ (Term) Term)
(declare-fun Tm_arrow_65622ab9799f3f673cc650b19fb2f7cb () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_typ@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_typ>


; <Skipped let __proj__Mkletbinding__item__lb_typ/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_def>

(declare-fun FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_def (Term) Term)
(declare-fun Tm_arrow_2cbd0d813eb17cbf0b91057a32b49d89 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_def@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_def>


; <Skipped let __proj__Mkletbinding__item__lb_def/>


; <Start encoding type FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.named_sigelt_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload_isrec (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload_lbs (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_nm (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_univs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_params (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_typ (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_ctors (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload_nm (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload_univs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload_typ (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Sg_Let (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Sg_Let__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Sg_Let
(declare-fun FStar.Tactics.NamedView.Sg_Let@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Sg_Inductive (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Sg_Inductive__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Sg_Inductive
(declare-fun FStar.Tactics.NamedView.Sg_Inductive@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Sg_Val (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Sg_Val__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Sg_Val
(declare-fun FStar.Tactics.NamedView.Sg_Val@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Unk () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Unk
(declare-fun FStar.Tactics.NamedView.Unk@tok () Term)
(declare-fun Tm_arrow_392585e47d2e2fac4c96513a951b1fc4 () Term)
(declare-fun Tm_arrow_be1ebdad114f46009c70dc5a3532ae93 () Term)
(declare-fun Tm_arrow_6569b6a4b9afe863b55b0cf42391907c () Term)
(declare-fun Tm_arrow_536bc480bd335431d8cc6beac43db86f () Term)
(declare-fun Tm_arrow_9b69c65ad3324d98a697d3b15b2aa92a () Term)
(declare-fun Tm_arrow_2be07bfe3cf492d548ee516e9402e789 () Term)

; <start constructor FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
565)
(= __@x0
FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload)))

; </end constructor FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload>


; <start constructor FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
570)
(= __@x0
FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload)))

; </end constructor FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload>


; <start constructor FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
575)
(= __@x0
FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload)))

; </end constructor FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload>


; <start constructor FStar.Tactics.NamedView.named_sigelt_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.named_sigelt_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
580)
(= __@x0
FStar.Tactics.NamedView.named_sigelt_view)))

; </end constructor FStar.Tactics.NamedView.named_sigelt_view>


; <start constructor FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
586)
(= __@x0
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload (FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload_isrec __@x0)
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload_lbs __@x0)))))

; </end constructor FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload>


; <start constructor FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
591)
(= __@x0
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload (FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_nm __@x0)
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_univs __@x0)
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_params __@x0)
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_typ __@x0)
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_ctors __@x0)))))

; </end constructor FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload>


; <start constructor FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
596)
(= __@x0
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload (FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload_nm __@x0)
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload_univs __@x0)
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload_typ __@x0)))))

; </end constructor FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload>


; <start constructor FStar.Tactics.NamedView.Sg_Let>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Sg_Let ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
601)
(= __@x0
(FStar.Tactics.NamedView.Sg_Let (FStar.Tactics.NamedView.Sg_Let__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Sg_Let>


; <start constructor FStar.Tactics.NamedView.Sg_Inductive>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Sg_Inductive ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
606)
(= __@x0
(FStar.Tactics.NamedView.Sg_Inductive (FStar.Tactics.NamedView.Sg_Inductive__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Sg_Inductive>


; <start constructor FStar.Tactics.NamedView.Sg_Val>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Sg_Val ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
611)
(= __@x0
(FStar.Tactics.NamedView.Sg_Val (FStar.Tactics.NamedView.Sg_Val__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Sg_Val>


; <start constructor FStar.Tactics.NamedView.Unk>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Unk ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
616)
(= __@x0
FStar.Tactics.NamedView.Unk)))

; </end constructor FStar.Tactics.NamedView.Unk>


; </end encoding type FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Let__payload__item__isrec>

(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Let__payload__item__isrec (Term) Term)
(declare-fun Tm_arrow_aaff68d57b0875330c75bc953f316682 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Let__payload__item__isrec@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Let__payload__item__isrec>


; <Skipped let __proj__Mknamed_sigelt_view__Sg_Let__payload__item__isrec/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Let__payload__item__lbs>

(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Let__payload__item__lbs (Term) Term)
(declare-fun Tm_arrow_53770d7a51f86c13cc17bc98fce36699 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Let__payload__item__lbs@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Let__payload__item__lbs>


; <Skipped let __proj__Mknamed_sigelt_view__Sg_Let__payload__item__lbs/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__nm>

(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__nm (Term) Term)
(declare-fun Tm_arrow_29037ae3125c6481ce57ad717c78697d () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__nm@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__nm>


; <Skipped let __proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__nm/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__univs>

(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__univs (Term) Term)
(declare-fun Tm_arrow_cfd13254a7ba2e69c5914b2284de05ab () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__univs@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__univs>


; <Skipped let __proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__univs/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__params>

(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__params (Term) Term)
(declare-fun Tm_arrow_4503754e3330e24cfe44afc98a619ca0 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__params@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__params>


; <Skipped let __proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__params/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__typ>

(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__typ (Term) Term)
(declare-fun Tm_arrow_df95ebc34631f8a69ba5048f2f183acc () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__typ@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__typ>


; <Skipped let __proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__typ/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__ctors>

(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__ctors (Term) Term)
(declare-fun Tm_arrow_6d7b221c53ca2f6f4f58688c832cc1ce () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__ctors@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__ctors>


; <Skipped let __proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__ctors/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__nm>

(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__nm (Term) Term)
(declare-fun Tm_arrow_6fd2fde9a1b673fcdc5db54818bc8db8 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__nm@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__nm>


; <Skipped let __proj__Mknamed_sigelt_view__Sg_Val__payload__item__nm/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__univs>

(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__univs (Term) Term)
(declare-fun Tm_arrow_a1246963bd81037b71d15767330931e8 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__univs@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__univs>


; <Skipped let __proj__Mknamed_sigelt_view__Sg_Val__payload__item__univs/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__typ>

(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__typ (Term) Term)
(declare-fun Tm_arrow_0de852e6fb5eb26dbd0c7bb76f69d068 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__typ@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__typ>


; <Skipped let __proj__Mknamed_sigelt_view__Sg_Val__payload__item__typ/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Sg_Let>

(declare-fun FStar.Tactics.NamedView.uu___is_Sg_Let (Term) Term)
(declare-fun Tm_arrow_2c9ec09a25324d0dfcb868a9cadd041c () Term)
(declare-fun FStar.Tactics.NamedView.uu___is_Sg_Let@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Sg_Let>


; <Skipped let uu___is_Sg_Let/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Sg_Let__item___0>

(declare-fun Tm_refine_0c417824af864c5dfeb7045b84af008c () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Sg_Let__item___0 (Term) Term)

(declare-fun Tm_arrow_626926c71a57535b0a54f997204b535a () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Sg_Let__item___0@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Sg_Let__item___0>


; <Skipped let __proj__Sg_Let__item___0/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Sg_Inductive>

(declare-fun FStar.Tactics.NamedView.uu___is_Sg_Inductive (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Sg_Inductive@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Sg_Inductive>


; <Skipped let uu___is_Sg_Inductive/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Sg_Inductive__item___0>

(declare-fun Tm_refine_452c9c8e2825a8035099cf4978a670c1 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Sg_Inductive__item___0 (Term) Term)

(declare-fun Tm_arrow_2ba29f7110aa05972617995199b050f8 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Sg_Inductive__item___0@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Sg_Inductive__item___0>


; <Skipped let __proj__Sg_Inductive__item___0/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Sg_Val>

(declare-fun FStar.Tactics.NamedView.uu___is_Sg_Val (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Sg_Val@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Sg_Val>


; <Skipped let uu___is_Sg_Val/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Sg_Val__item___0>

(declare-fun Tm_refine_ca9b00c9dce34c559545c63ba449a355 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Sg_Val__item___0 (Term) Term)

(declare-fun Tm_arrow_815a38312c4a45af3e2d72ab74e7bc06 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Sg_Val__item___0@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Sg_Val__item___0>


; <Skipped let __proj__Sg_Val__item___0/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Unk>

(declare-fun FStar.Tactics.NamedView.uu___is_Unk (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Unk@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Unk>


; <Skipped let uu___is_Unk/>


; <Start encoding let binder_to_binding>

(declare-fun FStar.Tactics.NamedView.binder_to_binding (Term) Term)
(declare-fun Tm_arrow_5774b4e874c675b6315c84fcfcbdc28d () Term)
(declare-fun FStar.Tactics.NamedView.binder_to_binding@tok () Term)

; </end encoding let binder_to_binding>


; <Start encoding let binding_to_binder>

(declare-fun FStar.Tactics.NamedView.binding_to_binder (Term) Term)
(declare-fun Tm_arrow_2aae07af48e630a36a74010e928b207c () Term)
(declare-fun FStar.Tactics.NamedView.binding_to_binder@tok () Term)

; </end encoding let binding_to_binder>


; <Start encoding let namedv_to_binder>

(declare-fun FStar.Tactics.NamedView.namedv_to_binder (Term Term) Term)
(declare-fun Tm_arrow_81c2241d339a64fbc6ee0b791881f7cf () Term)
(declare-fun FStar.Tactics.NamedView.namedv_to_binder@tok () Term)

; </end encoding let namedv_to_binder>


; <Start encoding val FStar.Tactics.NamedView.inspect_universe>

(declare-fun FStar.Tactics.NamedView.inspect_universe (Term) Term)

(declare-fun FStar.Tactics.NamedView.inspect_universe@tok () Term)

; </end encoding val FStar.Tactics.NamedView.inspect_universe>


; <Start encoding val FStar.Tactics.NamedView.pack_universe>

(declare-fun FStar.Tactics.NamedView.pack_universe (Term) Term)
(declare-fun Tm_arrow_236bceac04b4b849e9b798ec7570352f () Term)
(declare-fun FStar.Tactics.NamedView.pack_universe@tok () Term)

; </end encoding val FStar.Tactics.NamedView.pack_universe>


; <Start encoding val FStar.Tactics.NamedView.close_term>

(declare-fun FStar.Tactics.NamedView.close_term (Term Term) Term)
(declare-fun Tm_arrow_2835abdc068cc15811221f0baf29dc6a () Term)
(declare-fun FStar.Tactics.NamedView.close_term@tok () Term)

; </end encoding val FStar.Tactics.NamedView.close_term>


; <Start encoding val FStar.Tactics.NamedView.inspect>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.NamedView.inspect (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.NamedView.inspect@tok () Term)

; </end encoding val FStar.Tactics.NamedView.inspect>


; <Start encoding val FStar.Tactics.NamedView.pack>

(declare-fun FStar.Tactics.NamedView.pack (Term) Term)
(declare-fun Tm_arrow_0d64c4333643212c8dd1cdd74a87ec36 () Term)
(declare-fun FStar.Tactics.NamedView.pack@tok () Term)

; </end encoding val FStar.Tactics.NamedView.pack>


; <Start encoding val FStar.Tactics.NamedView.inspect_sigelt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.NamedView.inspect_sigelt (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.NamedView.inspect_sigelt@tok () Term)

; </end encoding val FStar.Tactics.NamedView.inspect_sigelt>


; <Start encoding val FStar.Tactics.NamedView.pack_sigelt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.NamedView.pack_sigelt (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.NamedView.pack_sigelt@tok () Term)

; </end encoding val FStar.Tactics.NamedView.pack_sigelt>


; <Start encoding val FStar.Tactics.NamedView.tcc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.NamedView.tcc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.NamedView.tcc@tok () Term)

; </end encoding val FStar.Tactics.NamedView.tcc>


; <Start encoding val FStar.Tactics.NamedView.comp_to_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.NamedView.comp_to_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.NamedView.comp_to_string@tok () Term)

; </end encoding val FStar.Tactics.NamedView.comp_to_string>


; <Start encoding let universe_view>

(declare-fun FStar.Tactics.NamedView.universe_view () Term)

; </end encoding let universe_view>


; <Start encoding let term_view>

(declare-fun FStar.Tactics.NamedView.term_view () Term)

; </end encoding let term_view>


; <Start encoding let sigelt_view>

(declare-fun FStar.Tactics.NamedView.sigelt_view () Term)

; </end encoding let sigelt_view>


; <Start encoding let inspect_namedv>

(declare-fun FStar.Tactics.NamedView.inspect_namedv (Term) Term)
(declare-fun Tm_arrow_2705aa32fdc5cf41c1ff313d9469a249 () Term)
(declare-fun FStar.Tactics.NamedView.inspect_namedv@tok () Term)

; </end encoding let inspect_namedv>


; <Start encoding let pack_namedv>

(declare-fun FStar.Tactics.NamedView.pack_namedv (Term) Term)

(declare-fun FStar.Tactics.NamedView.pack_namedv@tok () Term)

; </end encoding let pack_namedv>


; <Start encoding let inspect_bv>

(declare-fun FStar.Tactics.NamedView.inspect_bv (Term) Term)
(declare-fun Tm_arrow_b7765516170041d06fd16f4e95d2a2e6 () Term)
(declare-fun FStar.Tactics.NamedView.inspect_bv@tok () Term)

; </end encoding let inspect_bv>


; <Start encoding let pack_bv>

(declare-fun FStar.Tactics.NamedView.pack_bv (Term) Term)

(declare-fun FStar.Tactics.NamedView.pack_bv@tok () Term)

; </end encoding let pack_bv>


; <Start encoding let inspect_comp>

(declare-fun FStar.Tactics.NamedView.inspect_comp (Term) Term)
(declare-fun Tm_arrow_f9487c8dc952463a973caec1d5c506eb () Term)
(declare-fun FStar.Tactics.NamedView.inspect_comp@tok () Term)

; </end encoding let inspect_comp>


; <Start encoding let pack_comp>

(declare-fun FStar.Tactics.NamedView.pack_comp (Term) Term)

(declare-fun FStar.Tactics.NamedView.pack_comp@tok () Term)

; </end encoding let pack_comp>


; <Start encoding let tag_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.NamedView.tag_of (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.NamedView.tag_of@tok () Term)

; </end encoding let tag_of>


; End Externals for interface FStar.Tactics.NamedView


; Externals for interface FStar.Stubs.Tactics.Unseal


; <Start encoding val FStar.Stubs.Tactics.Unseal.unseal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.Unseal.unseal (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.Unseal.unseal@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Unseal.unseal>


; End Externals for interface FStar.Stubs.Tactics.Unseal


; Externals for interface FStar.Stubs.Tactics.V2.Builtins


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.compress>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.compress (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.compress@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.compress>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.top_env>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.top_env (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.top_env@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.top_env>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.fresh>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.fresh (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.fresh@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.fresh>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.refine_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.refine_intro (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.refine_intro@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.refine_intro>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.tc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.tc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.tc@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.tc>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.tcc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.tcc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.tcc@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.tcc>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.unshelve>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.unshelve (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.unshelve@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.unshelve>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.unquote>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.unquote (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.unquote@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.unquote>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.catch>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.catch (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.catch@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.catch>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.recover>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.recover (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.recover@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.recover>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.norm>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.norm (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.norm@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.norm>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.norm_term_env>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.norm_term_env (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.norm_term_env@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.norm_term_env>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.norm_binding_type>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.norm_binding_type (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.norm_binding_type@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.norm_binding_type>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.intro (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.intro@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.intro>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.intros>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.intros (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.intros@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.intros>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.intro_rec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.intro_rec (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.intro_rec@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.intro_rec>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.rename_to>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.rename_to (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.rename_to@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.rename_to>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.revert>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.revert (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.revert@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.revert>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.var_retype>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.var_retype (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.var_retype@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.var_retype>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.clear_top>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.clear_top (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.clear_top@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.clear_top>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.clear>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.clear (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.clear@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.clear>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.rewrite>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.rewrite (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.rewrite@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.rewrite>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.grewrite>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.grewrite (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.grewrite@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.grewrite>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.t_exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.t_exact (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.t_exact@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.t_exact>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.t_apply>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.t_apply (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.t_apply@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.t_apply>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.t_apply_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.t_apply_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.t_apply_lemma@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.t_apply_lemma>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.print>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.print (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.print@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.print>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.debugging>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.debugging (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.debugging@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.debugging>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.ide>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.ide (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.ide@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.ide>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.dump>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.dump (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.dump@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.dump>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.dump_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.dump_all (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.dump_all@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.dump_all>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.dump_uvars_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.dump_uvars_of (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.dump_uvars_of@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.dump_uvars_of>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.t_trefl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.t_trefl (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.t_trefl@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.t_trefl>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.t_commute_applied_match>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.t_commute_applied_match (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.t_commute_applied_match@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.t_commute_applied_match>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.gather_or_solve_explicit_guards_for_resolved_goals>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.gather_or_solve_explicit_guards_for_resolved_goals (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.gather_or_solve_explicit_guards_for_resolved_goals@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.gather_or_solve_explicit_guards_for_resolved_goals>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.ctrl_rewrite>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.ctrl_rewrite (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.ctrl_rewrite@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.ctrl_rewrite>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.dup>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.dup (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.dup@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.dup>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.prune>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.prune (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.prune@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.prune>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.addns>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.addns (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.addns@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.addns>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.t_destruct>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.t_destruct (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.t_destruct@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.t_destruct>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.set_options>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.set_options (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.set_options@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.set_options>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.uvar_env>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.uvar_env (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.uvar_env@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.uvar_env>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.ghost_uvar_env>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.ghost_uvar_env (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.ghost_uvar_env@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.ghost_uvar_env>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.fresh_universe_uvar>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.fresh_universe_uvar (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.fresh_universe_uvar@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.fresh_universe_uvar>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.unify_env>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.unify_env (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.unify_env@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.unify_env>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.unify_guard_env>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.unify_guard_env (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.unify_guard_env@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.unify_guard_env>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.match_env>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.match_env (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.match_env@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.match_env>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.launch_process>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.launch_process (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.launch_process@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.launch_process>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.change>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.change (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.change@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.change>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.get_guard_policy>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.get_guard_policy (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.get_guard_policy@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.get_guard_policy>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.set_guard_policy>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.set_guard_policy (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.set_guard_policy@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.set_guard_policy>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.lax_on>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.lax_on (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.lax_on@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.lax_on>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.tadmit_t>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.tadmit_t (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.tadmit_t@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.tadmit_t>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.join>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.join (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.join@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.join>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.lget>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.lget (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.lget@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.lget>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.lset>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.lset (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.lset@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.lset>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.set_goals>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.set_goals (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.set_goals@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.set_goals>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.set_smt_goals>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.set_smt_goals (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.set_smt_goals@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.set_smt_goals>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.curms>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.curms (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.curms@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.curms>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.set_urgency>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.set_urgency (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.set_urgency@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.set_urgency>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.set_dump_on_failure>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.set_dump_on_failure (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.set_dump_on_failure@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.set_dump_on_failure>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.string_to_term>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.string_to_term (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.string_to_term@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.string_to_term>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.push_bv_dsenv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.push_bv_dsenv (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.push_bv_dsenv@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.push_bv_dsenv>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.term_to_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.term_to_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.term_to_string@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.term_to_string>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.comp_to_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.comp_to_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.comp_to_string@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.comp_to_string>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.term_to_doc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.term_to_doc (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.term_to_doc@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.term_to_doc>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.comp_to_doc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.comp_to_doc (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.comp_to_doc@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.comp_to_doc>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.range_to_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.range_to_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.range_to_string@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.range_to_string>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.term_eq_old>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.term_eq_old (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.term_eq_old@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.term_eq_old>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.with_compat_pre_core>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.with_compat_pre_core (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.with_compat_pre_core@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.with_compat_pre_core>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.get_vconfig>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.get_vconfig (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.get_vconfig@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.get_vconfig>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.set_vconfig>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.set_vconfig (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.set_vconfig@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.set_vconfig>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.t_smt_sync>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.t_smt_sync (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.t_smt_sync@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.t_smt_sync>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.free_uvars>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.free_uvars (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.free_uvars@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.free_uvars>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.all_ext_options>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.all_ext_options (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.all_ext_options@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.all_ext_options>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.ext_getv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.ext_getv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.ext_getv@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.ext_getv>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.ext_getns>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.ext_getns (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.ext_getns@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.ext_getns>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.alloc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.alloc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.alloc@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.alloc>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.read>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.read (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.read@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.read>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.write>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.write (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.write@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.write>


; <Start encoding let ret_t>

(declare-fun FStar.Stubs.Tactics.V2.Builtins.ret_t (Term) Term)

(declare-fun FStar.Stubs.Tactics.V2.Builtins.ret_t@tok () Term)

; </end encoding let ret_t>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.is_non_informative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.is_non_informative (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.is_non_informative@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.is_non_informative>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.check_subtyping>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.check_subtyping (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.check_subtyping@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.check_subtyping>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.t_check_equiv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.t_check_equiv (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.t_check_equiv@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.t_check_equiv>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.core_compute_term_type>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.core_compute_term_type (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.core_compute_term_type@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.core_compute_term_type>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.core_check_term>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.core_check_term (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.core_check_term@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.core_check_term>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.core_check_term_at_type>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.core_check_term_at_type (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.core_check_term_at_type@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.core_check_term_at_type>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.tc_term>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.tc_term (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.tc_term@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.tc_term>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.universe_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.universe_of (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.universe_of@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.universe_of>


; <Start encoding let prop_validity_token>

(declare-fun FStar.Stubs.Tactics.V2.Builtins.prop_validity_token (Term Term) Term)
(declare-fun Tm_arrow_452d5517157e102536bdbbed759b7cb7 () Term)
(declare-fun FStar.Stubs.Tactics.V2.Builtins.prop_validity_token@tok () Term)
(declare-fun Tm_refine_96e3d4ddbb6584115ed4c174cb241a52 (Term Term) Term)

; </end encoding let prop_validity_token>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.check_prop_validity>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.check_prop_validity (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.check_prop_validity@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.check_prop_validity>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.match_complete_token>

(declare-fun FStar.Stubs.Tactics.V2.Builtins.match_complete_token (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_91d3043b9be2e5652dcb908724cf5015 () Term)
(declare-fun FStar.Stubs.Tactics.V2.Builtins.match_complete_token@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.match_complete_token>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.check_match_complete>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.check_match_complete (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.check_match_complete@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.check_match_complete>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.instantiate_implicits>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.instantiate_implicits (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.instantiate_implicits@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.instantiate_implicits>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.try_unify>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.try_unify (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.try_unify@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.try_unify>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.maybe_relate_after_unfolding>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.maybe_relate_after_unfolding (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.maybe_relate_after_unfolding@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.maybe_relate_after_unfolding>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.maybe_unfold_head>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.maybe_unfold_head (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.maybe_unfold_head@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.maybe_unfold_head>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.norm_well_typed_term>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.norm_well_typed_term (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.norm_well_typed_term@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.norm_well_typed_term>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.push_open_namespace>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.push_open_namespace (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.push_open_namespace@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.push_open_namespace>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.push_module_abbrev>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.push_module_abbrev (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.push_module_abbrev@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.push_module_abbrev>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.resolve_name>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.resolve_name (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.resolve_name@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.resolve_name>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.log_issues>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.log_issues (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.log_issues@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.log_issues>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.call_subtac>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.call_subtac (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.call_subtac@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.call_subtac>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.call_subtac_tm>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.call_subtac_tm (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.call_subtac_tm@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.call_subtac_tm>


; End Externals for interface FStar.Stubs.Tactics.V2.Builtins


; Externals for module FStar.Tactics.V2.SyntaxCoercions


; <Start encoding let namedv_to_term>

(declare-fun FStar.Tactics.V2.SyntaxCoercions.namedv_to_term (Term) Term)
(declare-fun Tm_arrow_08e5b3efa377f9732a56703deb311ecc () Term)
(declare-fun FStar.Tactics.V2.SyntaxCoercions.namedv_to_term@tok () Term)

; </end encoding let namedv_to_term>


; <Start encoding let binder_to_namedv>

(declare-fun FStar.Tactics.V2.SyntaxCoercions.binder_to_namedv (Term) Term)
(declare-fun Tm_arrow_a5d157a793a17515ce6d41a52eb1ac4d () Term)
(declare-fun FStar.Tactics.V2.SyntaxCoercions.binder_to_namedv@tok () Term)

; </end encoding let binder_to_namedv>


; <Start encoding let binder_to_term>

(declare-fun FStar.Tactics.V2.SyntaxCoercions.binder_to_term (Term) Term)
(declare-fun Tm_arrow_a985a5770f38d592f5996181c60af242 () Term)
(declare-fun FStar.Tactics.V2.SyntaxCoercions.binder_to_term@tok () Term)

; </end encoding let binder_to_term>


; <Start encoding let binding_to_namedv>

(declare-fun FStar.Tactics.V2.SyntaxCoercions.binding_to_namedv (Term) Term)
(declare-fun Tm_arrow_fad6a08ad4032ba95ef8a5ae22a77af5 () Term)
(declare-fun FStar.Tactics.V2.SyntaxCoercions.binding_to_namedv@tok () Term)

; </end encoding let binding_to_namedv>


; <Start encoding let binding_to_term>

(declare-fun FStar.Tactics.V2.SyntaxCoercions.binding_to_term (Term) Term)
(declare-fun Tm_arrow_547e6136aed9db5fe30ffb4b48d0b3d3 () Term)
(declare-fun FStar.Tactics.V2.SyntaxCoercions.binding_to_term@tok () Term)

; </end encoding let binding_to_term>


; End Externals for module FStar.Tactics.V2.SyntaxCoercions


; Externals for interface FStar.Tactics.MApply


; <Start encoding type FStar.Tactics.MApply.termable>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.MApply.termable (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Tactics.MApply.termable@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.MApply.Mktermable (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.MApply.Mktermable_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.MApply.Mktermable_to_term (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.MApply.Mktermable
(declare-fun FStar.Tactics.MApply.Mktermable@tok () Term)
(declare-fun Non_total_Tm_arrow_1a12f39da57593aa6422a221836a1c1b (Term) Term)

(declare-fun Tm_arrow_236c4090664b8abb45a4aab0c68b0536 () Term)

; <start constructor FStar.Tactics.MApply.termable>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.MApply.termable ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Tactics.MApply.termable @x0))
 
;;no pats
:qid is-FStar.Tactics.MApply.termable))))

; </end constructor FStar.Tactics.MApply.termable>


; <start constructor FStar.Tactics.MApply.Mktermable>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.MApply.Mktermable ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
116)
(= __@x0
(FStar.Tactics.MApply.Mktermable (FStar.Tactics.MApply.Mktermable_a __@x0)
(FStar.Tactics.MApply.Mktermable_to_term __@x0)))))

; </end constructor FStar.Tactics.MApply.Mktermable>


; </end encoding type FStar.Tactics.MApply.termable>


; <Start encoding val FStar.Tactics.MApply.__proj__Mktermable__item__to_term>

(declare-fun FStar.Tactics.MApply.__proj__Mktermable__item__to_term (Term Term) Term)

(declare-fun Tm_arrow_a6d4e3c45b3f500462f56c6b6a61d809 () Term)
(declare-fun FStar.Tactics.MApply.__proj__Mktermable__item__to_term@tok () Term)


; </end encoding val FStar.Tactics.MApply.__proj__Mktermable__item__to_term>


; <Skipped let __proj__Mktermable__item__to_term/>


; <Start encoding let to_term>

(declare-fun FStar.Tactics.MApply.to_term (Term) Term)

(declare-fun Tm_arrow_bfec1deb7b6cdd7b7f1f4d17d0b59a06 (Term) Term)
(declare-fun Tm_arrow_6df6a378d7243cdf9aa43127f5de044e () Term)
(declare-fun FStar.Tactics.MApply.to_term@tok () Term)




(declare-fun Tm_abs_c3aba2955ffe177c5c7b672651896c85 (Term) Term)

; </end encoding let to_term>


; <Start encoding let termable_term>

(declare-fun FStar.Tactics.MApply.termable_term (Dummy_sort) Term)
;;;;;;;;;;;;;;;;Imprecise function encoding
(declare-fun Tm_abs_FStar.Tactics.MApply_178 () Term)

; </end encoding let termable_term>


; <Start encoding let termable_binding>

(declare-fun FStar.Tactics.MApply.termable_binding (Dummy_sort) Term)
;;;;;;;;;;;;;;;;Imprecise function encoding
(declare-fun Tm_abs_FStar.Tactics.MApply_179 () Term)

; </end encoding let termable_binding>


; <Start encoding let mapply>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.MApply.mapply (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.MApply.mapply@tok () Term)

; </end encoding let mapply>


; End Externals for interface FStar.Tactics.MApply


; Externals for interface FStar.Reflection.TermEq.Simple


; <Start encoding val FStar.Reflection.TermEq.Simple.term_eq>

(declare-fun FStar.Reflection.TermEq.Simple.term_eq (Term Term) Term)

(declare-fun FStar.Reflection.TermEq.Simple.term_eq@tok () Term)

; </end encoding val FStar.Reflection.TermEq.Simple.term_eq>


; <Start encoding val FStar.Reflection.TermEq.Simple.term_eq_ok>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.TermEq.Simple.term_eq_ok (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.TermEq.Simple.term_eq_ok@tok () Term)

; </end encoding val FStar.Reflection.TermEq.Simple.term_eq_ok>


; <Start encoding val FStar.Reflection.TermEq.Simple.univ_eq>

(declare-fun FStar.Reflection.TermEq.Simple.univ_eq (Term Term) Term)
(declare-fun Tm_arrow_fb7067c5b264c5507cb8d87f68707512 () Term)
(declare-fun FStar.Reflection.TermEq.Simple.univ_eq@tok () Term)

; </end encoding val FStar.Reflection.TermEq.Simple.univ_eq>


; <Start encoding val FStar.Reflection.TermEq.Simple.univ_eq_ok>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.TermEq.Simple.univ_eq_ok (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.TermEq.Simple.univ_eq_ok@tok () Term)

; </end encoding val FStar.Reflection.TermEq.Simple.univ_eq_ok>


; End Externals for interface FStar.Reflection.TermEq.Simple


; Externals for interface FStar.Tactics.SMT


; <Start encoding val FStar.Tactics.SMT.smt_sync>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.SMT.smt_sync (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.SMT.smt_sync@tok () Term)

; </end encoding val FStar.Tactics.SMT.smt_sync>


; <Start encoding val FStar.Tactics.SMT.smt_sync'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.SMT.smt_sync_ (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.SMT.smt_sync_@tok () Term)

; </end encoding val FStar.Tactics.SMT.smt_sync'>


; <Start encoding val FStar.Tactics.SMT.get_rlimit>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.SMT.get_rlimit (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.SMT.get_rlimit@tok () Term)

; </end encoding val FStar.Tactics.SMT.get_rlimit>


; <Start encoding val FStar.Tactics.SMT.set_rlimit>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.SMT.set_rlimit (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.SMT.set_rlimit@tok () Term)

; </end encoding val FStar.Tactics.SMT.set_rlimit>


; <Start encoding val FStar.Tactics.SMT.get_initial_fuel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.SMT.get_initial_fuel (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.SMT.get_initial_fuel@tok () Term)

; </end encoding val FStar.Tactics.SMT.get_initial_fuel>


; <Start encoding val FStar.Tactics.SMT.get_initial_ifuel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.SMT.get_initial_ifuel (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.SMT.get_initial_ifuel@tok () Term)

; </end encoding val FStar.Tactics.SMT.get_initial_ifuel>


; <Start encoding val FStar.Tactics.SMT.get_max_fuel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.SMT.get_max_fuel (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.SMT.get_max_fuel@tok () Term)

; </end encoding val FStar.Tactics.SMT.get_max_fuel>


; <Start encoding val FStar.Tactics.SMT.get_max_ifuel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.SMT.get_max_ifuel (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.SMT.get_max_ifuel@tok () Term)

; </end encoding val FStar.Tactics.SMT.get_max_ifuel>


; <Start encoding val FStar.Tactics.SMT.set_initial_fuel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.SMT.set_initial_fuel (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.SMT.set_initial_fuel@tok () Term)

; </end encoding val FStar.Tactics.SMT.set_initial_fuel>


; <Start encoding val FStar.Tactics.SMT.set_initial_ifuel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.SMT.set_initial_ifuel (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.SMT.set_initial_ifuel@tok () Term)

; </end encoding val FStar.Tactics.SMT.set_initial_ifuel>


; <Start encoding val FStar.Tactics.SMT.set_max_fuel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.SMT.set_max_fuel (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.SMT.set_max_fuel@tok () Term)

; </end encoding val FStar.Tactics.SMT.set_max_fuel>


; <Start encoding val FStar.Tactics.SMT.set_max_ifuel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.SMT.set_max_ifuel (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.SMT.set_max_ifuel@tok () Term)

; </end encoding val FStar.Tactics.SMT.set_max_ifuel>


; <Start encoding val FStar.Tactics.SMT.set_fuel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.SMT.set_fuel (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.SMT.set_fuel@tok () Term)

; </end encoding val FStar.Tactics.SMT.set_fuel>


; <Start encoding val FStar.Tactics.SMT.set_ifuel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.SMT.set_ifuel (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.SMT.set_ifuel@tok () Term)

; </end encoding val FStar.Tactics.SMT.set_ifuel>


; End Externals for interface FStar.Tactics.SMT


; Externals for module FStar.Tactics.Util


; <Skipped val FStar.Tactics.Util.map/>


; <Start encoding let rec map>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.map (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.map@tok () Term)

; </end encoding let rec map>


; <Start encoding let rec concatMap>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.concatMap (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.concatMap@tok () Term)

; </end encoding let rec concatMap>


; <Skipped val FStar.Tactics.Util.__mapi/>


; <Start encoding let rec __mapi>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.__mapi (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.__mapi@tok () Term)

; </end encoding let rec __mapi>


; <Skipped val FStar.Tactics.Util.mapi/>


; <Start encoding let mapi>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.mapi (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.mapi@tok () Term)

; </end encoding let mapi>


; <Skipped val FStar.Tactics.Util.iter/>


; <Start encoding let rec iter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.iter (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.iter@tok () Term)

; </end encoding let rec iter>


; <Skipped val FStar.Tactics.Util.iteri_aux/>


; <Start encoding let rec iteri_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.iteri_aux (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.iteri_aux@tok () Term)

; </end encoding let rec iteri_aux>


; <Skipped val FStar.Tactics.Util.iteri/>


; <Start encoding let iteri>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.iteri (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.iteri@tok () Term)

; </end encoding let iteri>


; <Skipped val FStar.Tactics.Util.fold_left/>


; <Start encoding let rec fold_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.fold_left (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.fold_left@tok () Term)

; </end encoding let rec fold_left>


; <Skipped val FStar.Tactics.Util.fold_right/>


; <Start encoding let rec fold_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.fold_right (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.fold_right@tok () Term)

; </end encoding let rec fold_right>


; <Skipped val FStar.Tactics.Util.zip/>


; <Start encoding let rec zip>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.zip (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.zip@tok () Term)

; </end encoding let rec zip>


; <Skipped val FStar.Tactics.Util.filter/>


; <Start encoding let rec filter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.filter (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.filter@tok () Term)

; </end encoding let rec filter>


; <Start encoding let rec filter_map_acc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.filter_map_acc (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.filter_map_acc@tok () Term)

; </end encoding let rec filter_map_acc>


; <Start encoding let filter_map>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.filter_map (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.filter_map@tok () Term)

; </end encoding let filter_map>


; <Skipped val FStar.Tactics.Util.tryPick/>


; <Start encoding let rec tryPick>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.tryPick (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.tryPick@tok () Term)

; </end encoding let rec tryPick>


; <Start encoding let map_opt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.map_opt (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.map_opt@tok () Term)

; </end encoding let map_opt>


; <Start encoding let rec repeatn>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.repeatn (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.repeatn@tok () Term)

; </end encoding let rec repeatn>


; <Start encoding let rec tryFind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.tryFind (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.tryFind@tok () Term)

; </end encoding let rec tryFind>


; <Start encoding let rec fold_left2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.fold_left2 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.fold_left2@tok () Term)

; </end encoding let rec fold_left2>


; <Start encoding let rec string_of_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.string_of_list (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.string_of_list@tok () Term)

; </end encoding let rec string_of_list>


; <Start encoding let string_of_option>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.string_of_option (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.string_of_option@tok () Term)

; </end encoding let string_of_option>


; End Externals for module FStar.Tactics.Util


; Externals for module FStar.Tactics.Visit


; <Start encoding let on_sort_binder>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Visit.on_sort_binder (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Visit.on_sort_binder@tok () Term)

; </end encoding let on_sort_binder>


; <Start encoding let on_sort_simple_binder>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Visit.on_sort_simple_binder (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Visit.on_sort_simple_binder@tok () Term)

; </end encoding let on_sort_simple_binder>


; <Start encoding let rec visit_tm and visit_br and visit_pat and visit_comp>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Visit.visit_tm (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Visit.visit_tm@tok () Term)
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Visit.visit_br (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Visit.visit_br@tok () Term)
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Visit.visit_pat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Visit.visit_pat@tok () Term)
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Visit.visit_comp (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Visit.visit_comp@tok () Term)

; </end encoding let rec visit_tm and visit_br and visit_pat and visit_comp>


; End Externals for module FStar.Tactics.Visit


; Externals for interface FStar.Tactics.Print


; <Start encoding val FStar.Tactics.Print.namedv_to_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Print.namedv_to_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Print.namedv_to_string@tok () Term)

; </end encoding val FStar.Tactics.Print.namedv_to_string>


; <Start encoding val FStar.Tactics.Print.universe_to_ast_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Print.universe_to_ast_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Print.universe_to_ast_string@tok () Term)

; </end encoding val FStar.Tactics.Print.universe_to_ast_string>


; <Start encoding val FStar.Tactics.Print.universes_to_ast_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Print.universes_to_ast_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Print.universes_to_ast_string@tok () Term)

; </end encoding val FStar.Tactics.Print.universes_to_ast_string>


; <Start encoding val FStar.Tactics.Print.term_to_ast_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Print.term_to_ast_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Print.term_to_ast_string@tok () Term)

; </end encoding val FStar.Tactics.Print.term_to_ast_string>


; <Start encoding val FStar.Tactics.Print.match_returns_to_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Print.match_returns_to_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Print.match_returns_to_string@tok () Term)

; </end encoding val FStar.Tactics.Print.match_returns_to_string>


; <Start encoding val FStar.Tactics.Print.branches_to_ast_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Print.branches_to_ast_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Print.branches_to_ast_string@tok () Term)

; </end encoding val FStar.Tactics.Print.branches_to_ast_string>


; <Start encoding val FStar.Tactics.Print.branch_to_ast_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Print.branch_to_ast_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Print.branch_to_ast_string@tok () Term)

; </end encoding val FStar.Tactics.Print.branch_to_ast_string>


; <Start encoding val FStar.Tactics.Print.comp_to_ast_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Print.comp_to_ast_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Print.comp_to_ast_string@tok () Term)

; </end encoding val FStar.Tactics.Print.comp_to_ast_string>


; <Start encoding val FStar.Tactics.Print.const_to_ast_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Print.const_to_ast_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Print.const_to_ast_string@tok () Term)

; </end encoding val FStar.Tactics.Print.const_to_ast_string>


; End Externals for interface FStar.Tactics.Print


; Externals for interface FStar.Tactics.V1.Logic.Lemmas


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.fa_intro_lem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.fa_intro_lem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.fa_intro_lem@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.fa_intro_lem>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.split_lem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.split_lem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.split_lem@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.split_lem>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.imp_intro_lem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.imp_intro_lem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.imp_intro_lem@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.imp_intro_lem>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.__lemma_to_squash>

(declare-fun Tm_refine_39824678e6bd7420a9de93968d793b3b (Term Term) Term)
(declare-fun Tm_arrow_a733618074c9a8728deadbd23cb7b8bb (Term Term) Term)
(declare-fun FStar.Tactics.V1.Logic.Lemmas.__lemma_to_squash (Term Term Term Term) Term)


(declare-fun Tm_arrow_2842505fa53b6950ff9b6934826116cd () Term)
(declare-fun FStar.Tactics.V1.Logic.Lemmas.__lemma_to_squash@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.__lemma_to_squash>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.vbind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.vbind (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.vbind@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.vbind>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.or_ind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.or_ind (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.or_ind@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.or_ind>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.bool_ind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.bool_ind (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.bool_ind@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.bool_ind>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.or_intro_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.or_intro_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.or_intro_1@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.or_intro_1>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.or_intro_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.or_intro_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.or_intro_2@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.or_intro_2>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.__and_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.__and_elim (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.__and_elim@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.__and_elim>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.__and_elim'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.__and_elim_ (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.__and_elim_@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.__and_elim'>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.__witness>


(declare-fun FStar.Tactics.V1.Logic.Lemmas.__witness (Term Term Term Term) Term)


(declare-fun Tm_arrow_19ebf610eb1ca325c17d78c293beec24 () Term)
(declare-fun FStar.Tactics.V1.Logic.Lemmas.__witness@tok () Term)


; </end encoding val FStar.Tactics.V1.Logic.Lemmas.__witness>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.__elim_exists'>




(declare-fun Tm_arrow_816a1dfc85b9389c1bde09e03020da38 (Term Term Term) Term)
(declare-fun FStar.Tactics.V1.Logic.Lemmas.__elim_exists_ (Term Term Term Term Term) Term)





(declare-fun Tm_arrow_e5c776ee134348753a32740358385fdf () Term)
(declare-fun FStar.Tactics.V1.Logic.Lemmas.__elim_exists_@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.__elim_exists'>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.__forall_inst>





(declare-fun FStar.Tactics.V1.Logic.Lemmas.__forall_inst (Term Term Term Term) Term)




(declare-fun Tm_arrow_0a928b10ed6d297594d70cecd0d0525f () Term)
(declare-fun FStar.Tactics.V1.Logic.Lemmas.__forall_inst@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.__forall_inst>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.__forall_inst_sq>



(declare-fun FStar.Tactics.V1.Logic.Lemmas.__forall_inst_sq (Term Term Term Term) Term)


(declare-fun Tm_arrow_7810b8ed28b7c312b6c1292aeea99051 () Term)
(declare-fun FStar.Tactics.V1.Logic.Lemmas.__forall_inst_sq@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.__forall_inst_sq>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.sklem0>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.sklem0 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.sklem0@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.sklem0>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.lemma_from_squash>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.lemma_from_squash (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.lemma_from_squash@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.lemma_from_squash>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.lem1_fa>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.lem1_fa (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.lem1_fa@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.lem1_fa>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.lem2_fa>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.lem2_fa (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.lem2_fa@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.lem2_fa>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.lem3_fa>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.lem3_fa (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.lem3_fa@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.lem3_fa>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.revert_squash>



(declare-fun FStar.Tactics.V1.Logic.Lemmas.revert_squash (Term Term Term Term) Term)



(declare-fun FStar.Tactics.V1.Logic.Lemmas.revert_squash@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.revert_squash>


; End Externals for interface FStar.Tactics.V1.Logic.Lemmas


; Externals for module FStar.Reflection.V2.Formula


; <Start encoding let term_eq>

(declare-fun FStar.Reflection.V2.Formula.term_eq (Term Term) Term)

(declare-fun FStar.Reflection.V2.Formula.term_eq@tok () Term)

; </end encoding let term_eq>


; <Start encoding let rec inspect_unascribe>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Formula.inspect_unascribe (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Formula.inspect_unascribe@tok () Term)

; </end encoding let rec inspect_unascribe>


; <Start encoding let rec collect_app'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Formula.collect_app_ (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Formula.collect_app_@tok () Term)

; </end encoding let rec collect_app'>


; <Start encoding let collect_app>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Formula.collect_app (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Formula.collect_app@tok () Term)

; </end encoding let collect_app>


; <Start encoding type FStar.Reflection.V2.Formula.comparison>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.comparison () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Eq (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Eq__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.Eq
(declare-fun FStar.Reflection.V2.Formula.Eq@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.BoolEq (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.BoolEq__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.BoolEq
(declare-fun FStar.Reflection.V2.Formula.BoolEq@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Lt () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.Lt
(declare-fun FStar.Reflection.V2.Formula.Lt@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Le () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.Le
(declare-fun FStar.Reflection.V2.Formula.Le@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Gt () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.Gt
(declare-fun FStar.Reflection.V2.Formula.Gt@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Ge () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.Ge
(declare-fun FStar.Reflection.V2.Formula.Ge@tok () Term)
(declare-fun Tm_arrow_93d4e1cf7163163fc0f44eab56192fbd () Term)


; <start constructor FStar.Reflection.V2.Formula.comparison>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.comparison ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
103)
(= __@x0
FStar.Reflection.V2.Formula.comparison)))

; </end constructor FStar.Reflection.V2.Formula.comparison>


; <start constructor FStar.Reflection.V2.Formula.Eq>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Eq ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
109)
(= __@x0
(FStar.Reflection.V2.Formula.Eq (FStar.Reflection.V2.Formula.Eq__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.Eq>


; <start constructor FStar.Reflection.V2.Formula.BoolEq>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.BoolEq ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
114)
(= __@x0
(FStar.Reflection.V2.Formula.BoolEq (FStar.Reflection.V2.Formula.BoolEq__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.BoolEq>


; <start constructor FStar.Reflection.V2.Formula.Lt>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Lt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
119)
(= __@x0
FStar.Reflection.V2.Formula.Lt)))

; </end constructor FStar.Reflection.V2.Formula.Lt>


; <start constructor FStar.Reflection.V2.Formula.Le>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Le ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
121)
(= __@x0
FStar.Reflection.V2.Formula.Le)))

; </end constructor FStar.Reflection.V2.Formula.Le>


; <start constructor FStar.Reflection.V2.Formula.Gt>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Gt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
123)
(= __@x0
FStar.Reflection.V2.Formula.Gt)))

; </end constructor FStar.Reflection.V2.Formula.Gt>


; <start constructor FStar.Reflection.V2.Formula.Ge>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Ge ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
125)
(= __@x0
FStar.Reflection.V2.Formula.Ge)))

; </end constructor FStar.Reflection.V2.Formula.Ge>


; </end encoding type FStar.Reflection.V2.Formula.comparison>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_Eq>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Eq (Term) Term)
(declare-fun Tm_arrow_d65e342f5ea88b2144db8bf57e23b1b7 () Term)
(declare-fun FStar.Reflection.V2.Formula.uu___is_Eq@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_Eq>


; <Skipped let uu___is_Eq/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__Eq__item___0>

(declare-fun Tm_refine_e43d6364938e1d5176082471d2d04fb9 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Eq__item___0 (Term) Term)

(declare-fun Tm_arrow_62c9555b07b062c3ab6c097dd72a2218 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Eq__item___0@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__Eq__item___0>


; <Skipped let __proj__Eq__item___0/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_BoolEq>

(declare-fun FStar.Reflection.V2.Formula.uu___is_BoolEq (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_BoolEq@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_BoolEq>


; <Skipped let uu___is_BoolEq/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__BoolEq__item___0>

(declare-fun Tm_refine_7130ac7f7031ee2405d67ce0fb773016 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__BoolEq__item___0 (Term) Term)

(declare-fun Tm_arrow_c31b6eba7c4df2564cb079d0dfe2a18e () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__BoolEq__item___0@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__BoolEq__item___0>


; <Skipped let __proj__BoolEq__item___0/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_Lt>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Lt (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_Lt@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_Lt>


; <Skipped let uu___is_Lt/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_Le>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Le (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_Le@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_Le>


; <Skipped let uu___is_Le/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_Gt>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Gt (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_Gt@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_Gt>


; <Skipped let uu___is_Gt/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_Ge>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Ge (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_Ge@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_Ge>


; <Skipped let uu___is_Ge/>


; <Start encoding type FStar.Reflection.V2.Formula.formula>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.formula () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.True_ () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.True_
(declare-fun FStar.Reflection.V2.Formula.True_@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.False_ () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.False_
(declare-fun FStar.Reflection.V2.Formula.False_@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Comp (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Comp__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Comp__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Comp__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.Comp
(declare-fun FStar.Reflection.V2.Formula.Comp@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.And (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.And__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.And__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.And
(declare-fun FStar.Reflection.V2.Formula.And@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Or (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Or__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Or__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.Or
(declare-fun FStar.Reflection.V2.Formula.Or@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Not (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Not__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.Not
(declare-fun FStar.Reflection.V2.Formula.Not@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Implies (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Implies__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Implies__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.Implies
(declare-fun FStar.Reflection.V2.Formula.Implies@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Iff (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Iff__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Iff__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.Iff
(declare-fun FStar.Reflection.V2.Formula.Iff@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Forall__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Forall__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Forall__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.Forall
(declare-fun FStar.Reflection.V2.Formula.Forall@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Exists (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Exists__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Exists__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Exists__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.Exists
(declare-fun FStar.Reflection.V2.Formula.Exists@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.App (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.App__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.App__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.App
(declare-fun FStar.Reflection.V2.Formula.App@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Name (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Name__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.Name
(declare-fun FStar.Reflection.V2.Formula.Name@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.FV (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.FV__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.FV
(declare-fun FStar.Reflection.V2.Formula.FV@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.IntLit (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.IntLit__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.IntLit
(declare-fun FStar.Reflection.V2.Formula.IntLit@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.F_Unknown () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.F_Unknown
(declare-fun FStar.Reflection.V2.Formula.F_Unknown@tok () Term)
(declare-fun Tm_arrow_8857c1ddf1bdd92f1a816a62ccd412bc () Term)
(declare-fun Tm_arrow_88078cb15b188241a92307bcca04be9c () Term)

(declare-fun Tm_arrow_f4196504b00b92bf890ee998fd322403 () Term)


(declare-fun Tm_arrow_7930e1d937287e267cc52bc21ae18e34 () Term)


(declare-fun Tm_arrow_af9fbaeb5a474c90d87c635da4058c8f () Term)
(declare-fun Tm_arrow_0cfcc47d303667e6d344f972afd06a63 () Term)
(declare-fun Tm_arrow_db96b7d39b6d2478843b5883bc7b002a () Term)

; <start constructor FStar.Reflection.V2.Formula.formula>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.formula ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
146)
(= __@x0
FStar.Reflection.V2.Formula.formula)))

; </end constructor FStar.Reflection.V2.Formula.formula>


; <start constructor FStar.Reflection.V2.Formula.True_>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.True_ ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
152)
(= __@x0
FStar.Reflection.V2.Formula.True_)))

; </end constructor FStar.Reflection.V2.Formula.True_>


; <start constructor FStar.Reflection.V2.Formula.False_>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.False_ ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
154)
(= __@x0
FStar.Reflection.V2.Formula.False_)))

; </end constructor FStar.Reflection.V2.Formula.False_>


; <start constructor FStar.Reflection.V2.Formula.Comp>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Comp ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
156)
(= __@x0
(FStar.Reflection.V2.Formula.Comp (FStar.Reflection.V2.Formula.Comp__0 __@x0)
(FStar.Reflection.V2.Formula.Comp__1 __@x0)
(FStar.Reflection.V2.Formula.Comp__2 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.Comp>


; <start constructor FStar.Reflection.V2.Formula.And>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.And ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
161)
(= __@x0
(FStar.Reflection.V2.Formula.And (FStar.Reflection.V2.Formula.And__0 __@x0)
(FStar.Reflection.V2.Formula.And__1 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.And>


; <start constructor FStar.Reflection.V2.Formula.Or>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Or ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
166)
(= __@x0
(FStar.Reflection.V2.Formula.Or (FStar.Reflection.V2.Formula.Or__0 __@x0)
(FStar.Reflection.V2.Formula.Or__1 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.Or>


; <start constructor FStar.Reflection.V2.Formula.Not>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Not ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
171)
(= __@x0
(FStar.Reflection.V2.Formula.Not (FStar.Reflection.V2.Formula.Not__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.Not>


; <start constructor FStar.Reflection.V2.Formula.Implies>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Implies ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
176)
(= __@x0
(FStar.Reflection.V2.Formula.Implies (FStar.Reflection.V2.Formula.Implies__0 __@x0)
(FStar.Reflection.V2.Formula.Implies__1 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.Implies>


; <start constructor FStar.Reflection.V2.Formula.Iff>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Iff ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
181)
(= __@x0
(FStar.Reflection.V2.Formula.Iff (FStar.Reflection.V2.Formula.Iff__0 __@x0)
(FStar.Reflection.V2.Formula.Iff__1 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.Iff>


; <start constructor FStar.Reflection.V2.Formula.Forall>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Forall ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
186)
(= __@x0
(FStar.Reflection.V2.Formula.Forall (FStar.Reflection.V2.Formula.Forall__0 __@x0)
(FStar.Reflection.V2.Formula.Forall__1 __@x0)
(FStar.Reflection.V2.Formula.Forall__2 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.Forall>


; <start constructor FStar.Reflection.V2.Formula.Exists>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Exists ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
191)
(= __@x0
(FStar.Reflection.V2.Formula.Exists (FStar.Reflection.V2.Formula.Exists__0 __@x0)
(FStar.Reflection.V2.Formula.Exists__1 __@x0)
(FStar.Reflection.V2.Formula.Exists__2 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.Exists>


; <start constructor FStar.Reflection.V2.Formula.App>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.App ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
196)
(= __@x0
(FStar.Reflection.V2.Formula.App (FStar.Reflection.V2.Formula.App__0 __@x0)
(FStar.Reflection.V2.Formula.App__1 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.App>


; <start constructor FStar.Reflection.V2.Formula.Name>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Name ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
201)
(= __@x0
(FStar.Reflection.V2.Formula.Name (FStar.Reflection.V2.Formula.Name__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.Name>


; <start constructor FStar.Reflection.V2.Formula.FV>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.FV ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
206)
(= __@x0
(FStar.Reflection.V2.Formula.FV (FStar.Reflection.V2.Formula.FV__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.FV>


; <start constructor FStar.Reflection.V2.Formula.IntLit>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.IntLit ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
211)
(= __@x0
(FStar.Reflection.V2.Formula.IntLit (FStar.Reflection.V2.Formula.IntLit__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.IntLit>


; <start constructor FStar.Reflection.V2.Formula.F_Unknown>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.F_Unknown ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
216)
(= __@x0
FStar.Reflection.V2.Formula.F_Unknown)))

; </end constructor FStar.Reflection.V2.Formula.F_Unknown>


; </end encoding type FStar.Reflection.V2.Formula.formula>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_True_>

(declare-fun FStar.Reflection.V2.Formula.uu___is_True_ (Term) Term)
(declare-fun Tm_arrow_f29e4998b5e1dcdeff1cc7473b63c87e () Term)
(declare-fun FStar.Reflection.V2.Formula.uu___is_True_@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_True_>


; <Skipped let uu___is_True_/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_False_>

(declare-fun FStar.Reflection.V2.Formula.uu___is_False_ (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_False_@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_False_>


; <Skipped let uu___is_False_/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_Comp>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Comp (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_Comp@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_Comp>


; <Skipped let uu___is_Comp/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__Comp__item___0>

(declare-fun Tm_refine_bb431a0b8a7caa6cf69b36c2e697f27d () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Comp__item___0 (Term) Term)

(declare-fun Tm_arrow_0281fb6450f815bfde3aaa7a5dd5f38e () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Comp__item___0@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__Comp__item___0>


; <Skipped let __proj__Comp__item___0/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__Comp__item___1>


(declare-fun FStar.Reflection.V2.Formula.__proj__Comp__item___1 (Term) Term)

(declare-fun Tm_arrow_93cb6419f6d34f9365398cc45eb342c5 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Comp__item___1@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__Comp__item___1>


; <Skipped let __proj__Comp__item___1/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__Comp__item___2>


(declare-fun FStar.Reflection.V2.Formula.__proj__Comp__item___2 (Term) Term)


(declare-fun FStar.Reflection.V2.Formula.__proj__Comp__item___2@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__Comp__item___2>


; <Skipped let __proj__Comp__item___2/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_And>

(declare-fun FStar.Reflection.V2.Formula.uu___is_And (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_And@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_And>


; <Skipped let uu___is_And/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__And__item___0>

(declare-fun Tm_refine_afefff96e762436e9e286938ae5bd296 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__And__item___0 (Term) Term)

(declare-fun Tm_arrow_d42e81f90786e04850501320428bc595 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__And__item___0@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__And__item___0>


; <Skipped let __proj__And__item___0/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__And__item___1>


(declare-fun FStar.Reflection.V2.Formula.__proj__And__item___1 (Term) Term)


(declare-fun FStar.Reflection.V2.Formula.__proj__And__item___1@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__And__item___1>


; <Skipped let __proj__And__item___1/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_Or>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Or (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_Or@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_Or>


; <Skipped let uu___is_Or/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__Or__item___0>

(declare-fun Tm_refine_dd2b94a226dfb474d444b84bd0e18f4e () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Or__item___0 (Term) Term)

(declare-fun Tm_arrow_626af93c44c18e2e129d55895de78797 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Or__item___0@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__Or__item___0>


; <Skipped let __proj__Or__item___0/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__Or__item___1>


(declare-fun FStar.Reflection.V2.Formula.__proj__Or__item___1 (Term) Term)


(declare-fun FStar.Reflection.V2.Formula.__proj__Or__item___1@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__Or__item___1>


; <Skipped let __proj__Or__item___1/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_Not>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Not (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_Not@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_Not>


; <Skipped let uu___is_Not/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__Not__item___0>

(declare-fun Tm_refine_79b780262c6ff8bbc9d19dd6e7a82617 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Not__item___0 (Term) Term)

(declare-fun Tm_arrow_aa548919989dc6c3c1cf8d3b1df2ae53 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Not__item___0@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__Not__item___0>


; <Skipped let __proj__Not__item___0/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_Implies>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Implies (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_Implies@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_Implies>


; <Skipped let uu___is_Implies/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__Implies__item___0>

(declare-fun Tm_refine_71dd7a300c6cd81b43443cc6bd08c820 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Implies__item___0 (Term) Term)

(declare-fun Tm_arrow_22afc90fc3e98ee4089f81c76344e63b () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Implies__item___0@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__Implies__item___0>


; <Skipped let __proj__Implies__item___0/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__Implies__item___1>


(declare-fun FStar.Reflection.V2.Formula.__proj__Implies__item___1 (Term) Term)


(declare-fun FStar.Reflection.V2.Formula.__proj__Implies__item___1@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__Implies__item___1>


; <Skipped let __proj__Implies__item___1/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_Iff>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Iff (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_Iff@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_Iff>


; <Skipped let uu___is_Iff/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__Iff__item___0>

(declare-fun Tm_refine_37b1001aa245e774d71c7996f8aa4c41 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Iff__item___0 (Term) Term)

(declare-fun Tm_arrow_924741dbf7eb62d47137fa738e36c206 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Iff__item___0@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__Iff__item___0>


; <Skipped let __proj__Iff__item___0/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__Iff__item___1>


(declare-fun FStar.Reflection.V2.Formula.__proj__Iff__item___1 (Term) Term)


(declare-fun FStar.Reflection.V2.Formula.__proj__Iff__item___1@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__Iff__item___1>


; <Skipped let __proj__Iff__item___1/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_Forall>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Forall (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_Forall@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_Forall>


; <Skipped let uu___is_Forall/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__Forall__item___0>

(declare-fun Tm_refine_9f58524dfd8b26c53a6b4ca6308ce978 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Forall__item___0 (Term) Term)

(declare-fun Tm_arrow_91d6ff096438b12e861c91c64e93dadf () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Forall__item___0@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__Forall__item___0>


; <Skipped let __proj__Forall__item___0/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__Forall__item___1>


(declare-fun FStar.Reflection.V2.Formula.__proj__Forall__item___1 (Term) Term)

(declare-fun Tm_arrow_b32b9f9a03e96a6552882ef6a0a9d086 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Forall__item___1@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__Forall__item___1>


; <Skipped let __proj__Forall__item___1/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__Forall__item___2>


(declare-fun FStar.Reflection.V2.Formula.__proj__Forall__item___2 (Term) Term)

(declare-fun Tm_arrow_64c7c697a5f72461abadccba8acf8576 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Forall__item___2@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__Forall__item___2>


; <Skipped let __proj__Forall__item___2/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_Exists>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Exists (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_Exists@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_Exists>


; <Skipped let uu___is_Exists/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__Exists__item___0>

(declare-fun Tm_refine_47c227a0e1bad766e65a971f1b662250 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Exists__item___0 (Term) Term)

(declare-fun Tm_arrow_a68f10e819029d6cab49480a608d325a () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Exists__item___0@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__Exists__item___0>


; <Skipped let __proj__Exists__item___0/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__Exists__item___1>


(declare-fun FStar.Reflection.V2.Formula.__proj__Exists__item___1 (Term) Term)

(declare-fun Tm_arrow_4d7c75ef166295c33af444b9128d036a () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Exists__item___1@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__Exists__item___1>


; <Skipped let __proj__Exists__item___1/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__Exists__item___2>


(declare-fun FStar.Reflection.V2.Formula.__proj__Exists__item___2 (Term) Term)

(declare-fun Tm_arrow_5cbf98f1a2423b5b386d9170a466b9f3 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Exists__item___2@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__Exists__item___2>


; <Skipped let __proj__Exists__item___2/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_App>

(declare-fun FStar.Reflection.V2.Formula.uu___is_App (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_App@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_App>


; <Skipped let uu___is_App/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__App__item___0>

(declare-fun Tm_refine_91b08d9cf73feb528f4d6485b5371070 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__App__item___0 (Term) Term)

(declare-fun Tm_arrow_4a32e9c40b64531bc4984e65fe296c0e () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__App__item___0@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__App__item___0>


; <Skipped let __proj__App__item___0/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__App__item___1>


(declare-fun FStar.Reflection.V2.Formula.__proj__App__item___1 (Term) Term)


(declare-fun FStar.Reflection.V2.Formula.__proj__App__item___1@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__App__item___1>


; <Skipped let __proj__App__item___1/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_Name>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Name (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_Name@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_Name>


; <Skipped let uu___is_Name/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__Name__item___0>

(declare-fun Tm_refine_1eda1af3652c0f59491de3194febae5c () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Name__item___0 (Term) Term)

(declare-fun Tm_arrow_522997a403a53d78b54e9566f3be2999 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Name__item___0@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__Name__item___0>


; <Skipped let __proj__Name__item___0/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_FV>

(declare-fun FStar.Reflection.V2.Formula.uu___is_FV (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_FV@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_FV>


; <Skipped let uu___is_FV/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__FV__item___0>

(declare-fun Tm_refine_142a36e9daea7bdef8c1fb9f74b3186b () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__FV__item___0 (Term) Term)

(declare-fun Tm_arrow_054fda3a0260fca222e57c007cf7620c () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__FV__item___0@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__FV__item___0>


; <Skipped let __proj__FV__item___0/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_IntLit>

(declare-fun FStar.Reflection.V2.Formula.uu___is_IntLit (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_IntLit@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_IntLit>


; <Skipped let uu___is_IntLit/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__IntLit__item___0>

(declare-fun Tm_refine_9463acd36e12c69b5607f29f47216780 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__IntLit__item___0 (Term) Term)

(declare-fun Tm_arrow_76dd712ce23e1157b2b380e0ec67ab55 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__IntLit__item___0@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__IntLit__item___0>


; <Skipped let __proj__IntLit__item___0/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_F_Unknown>

(declare-fun FStar.Reflection.V2.Formula.uu___is_F_Unknown (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_F_Unknown@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_F_Unknown>


; <Skipped let uu___is_F_Unknown/>


; <Start encoding let mk_Forall>

(declare-fun FStar.Reflection.V2.Formula.mk_Forall (Term Term) Term)

(declare-fun FStar.Reflection.V2.Formula.mk_Forall@tok () Term)

; </end encoding let mk_Forall>


; <Start encoding let mk_Exists>

(declare-fun FStar.Reflection.V2.Formula.mk_Exists (Term Term) Term)

(declare-fun FStar.Reflection.V2.Formula.mk_Exists@tok () Term)

; </end encoding let mk_Exists>


; <Start encoding let term_as_formula'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Formula.term_as_formula_ (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Formula.term_as_formula_@tok () Term)

; </end encoding let term_as_formula'>


; <Start encoding let term_as_formula>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Formula.term_as_formula (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Formula.term_as_formula@tok () Term)

; </end encoding let term_as_formula>


; <Start encoding let term_as_formula_total>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Formula.term_as_formula_total (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Formula.term_as_formula_total@tok () Term)

; </end encoding let term_as_formula_total>


; <Start encoding let formula_as_term_view>

(declare-fun FStar.Reflection.V2.Formula.formula_as_term_view (Term) Term)
(declare-fun Tm_arrow_267dc9dde16c6ea1a3acc86750e7b7de () Term)
(declare-fun FStar.Reflection.V2.Formula.formula_as_term_view@tok () Term)
(declare-fun Tm_arrow_299731651893d764ca025adc1c713374 () Term)
(declare-fun Tm_abs_c63eccb79643fed421b47ce4604a7747 () Term)

























; </end encoding let formula_as_term_view>


; <Start encoding let formula_as_term>

(declare-fun FStar.Reflection.V2.Formula.formula_as_term (Term) Term)
(declare-fun Tm_arrow_7bc5d4fb2b3adffee834b8cb4e624e1d () Term)
(declare-fun FStar.Reflection.V2.Formula.formula_as_term@tok () Term)

; </end encoding let formula_as_term>


; <Start encoding let namedv_to_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Formula.namedv_to_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Formula.namedv_to_string@tok () Term)

; </end encoding let namedv_to_string>


; <Start encoding let formula_to_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Formula.formula_to_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Formula.formula_to_string@tok () Term)

; </end encoding let formula_to_string>


; End Externals for module FStar.Reflection.V2.Formula


; Externals for interface FStar.Tactics.V2.Logic


; <Start encoding let cur_goal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.cur_goal (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.cur_goal@tok () Term)

; </end encoding let cur_goal>


; <Start encoding let cur_formula>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.cur_formula (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.cur_formula@tok () Term)

; </end encoding let cur_formula>


; <Start encoding val FStar.Tactics.V2.Logic.l_revert>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.l_revert (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.l_revert@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.l_revert>


; <Start encoding val FStar.Tactics.V2.Logic.l_revert_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.l_revert_all (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.l_revert_all@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.l_revert_all>


; <Start encoding val FStar.Tactics.V2.Logic.forall_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.forall_intro (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.forall_intro@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.forall_intro>


; <Start encoding val FStar.Tactics.V2.Logic.forall_intro_as>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.forall_intro_as (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.forall_intro_as@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.forall_intro_as>


; <Start encoding val FStar.Tactics.V2.Logic.forall_intros>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.forall_intros (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.forall_intros@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.forall_intros>


; <Start encoding val FStar.Tactics.V2.Logic.split>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.split (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.split@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.split>


; <Start encoding val FStar.Tactics.V2.Logic.implies_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.implies_intro (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.implies_intro@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.implies_intro>


; <Start encoding val FStar.Tactics.V2.Logic.implies_intro_as>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.implies_intro_as (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.implies_intro_as@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.implies_intro_as>


; <Start encoding val FStar.Tactics.V2.Logic.implies_intros>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.implies_intros (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.implies_intros@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.implies_intros>


; <Start encoding val FStar.Tactics.V2.Logic.l_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.l_intro (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.l_intro@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.l_intro>


; <Start encoding val FStar.Tactics.V2.Logic.l_intros>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.l_intros (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.l_intros@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.l_intros>


; <Start encoding val FStar.Tactics.V2.Logic.squash_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.squash_intro (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.squash_intro@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.squash_intro>


; <Start encoding val FStar.Tactics.V2.Logic.l_exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.l_exact (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.l_exact@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.l_exact>


; <Start encoding val FStar.Tactics.V2.Logic.hyp>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.hyp (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.hyp@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.hyp>


; <Start encoding val FStar.Tactics.V2.Logic.pose_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.pose_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.pose_lemma@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.pose_lemma>


; <Start encoding val FStar.Tactics.V2.Logic.explode>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.explode (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.explode@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.explode>


; <Start encoding val FStar.Tactics.V2.Logic.simplify_eq_implication>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.simplify_eq_implication (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.simplify_eq_implication@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.simplify_eq_implication>


; <Start encoding val FStar.Tactics.V2.Logic.rewrite_all_equalities>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.rewrite_all_equalities (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.rewrite_all_equalities@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.rewrite_all_equalities>


; <Start encoding val FStar.Tactics.V2.Logic.unfold_definition_and_simplify_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.unfold_definition_and_simplify_eq (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.unfold_definition_and_simplify_eq@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.unfold_definition_and_simplify_eq>


; <Start encoding val FStar.Tactics.V2.Logic.unsquash>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.unsquash (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.unsquash@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.unsquash>


; <Start encoding val FStar.Tactics.V2.Logic.cases_or>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.cases_or (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.cases_or@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.cases_or>


; <Start encoding val FStar.Tactics.V2.Logic.cases_bool>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.cases_bool (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.cases_bool@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.cases_bool>


; <Start encoding val FStar.Tactics.V2.Logic.left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.left (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.left@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.left>


; <Start encoding val FStar.Tactics.V2.Logic.right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.right (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.right@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.right>


; <Start encoding val FStar.Tactics.V2.Logic.and_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.and_elim (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.and_elim@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.and_elim>


; <Start encoding val FStar.Tactics.V2.Logic.destruct_and>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.destruct_and (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.destruct_and@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.destruct_and>


; <Start encoding val FStar.Tactics.V2.Logic.witness>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.witness (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.witness@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.witness>


; <Start encoding val FStar.Tactics.V2.Logic.elim_exists>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.elim_exists (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.elim_exists@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.elim_exists>


; <Start encoding val FStar.Tactics.V2.Logic.instantiate>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.instantiate (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.instantiate@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.instantiate>


; <Start encoding val FStar.Tactics.V2.Logic.instantiate_as>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.instantiate_as (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.instantiate_as@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.instantiate_as>


; <Start encoding val FStar.Tactics.V2.Logic.skolem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.skolem (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.skolem@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.skolem>


; <Start encoding val FStar.Tactics.V2.Logic.easy_fill>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.easy_fill (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.easy_fill@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.easy_fill>


; <Start encoding val FStar.Tactics.V2.Logic.easy>

(declare-fun FStar.Tactics.V2.Logic.easy (Term Term) Term)

(declare-fun FStar.Tactics.V2.Logic.easy@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.easy>


; <Start encoding val FStar.Tactics.V2.Logic.using_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.using_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.using_lemma@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.using_lemma>


; End Externals for interface FStar.Tactics.V2.Logic


; Externals for interface FStar.Tactics.V2.SyntaxHelpers


; <Start encoding val FStar.Tactics.V2.SyntaxHelpers.collect_arr_bs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.collect_arr_bs (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.collect_arr_bs@tok () Term)

; </end encoding val FStar.Tactics.V2.SyntaxHelpers.collect_arr_bs>


; <Start encoding val FStar.Tactics.V2.SyntaxHelpers.collect_arr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.collect_arr (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.collect_arr@tok () Term)

; </end encoding val FStar.Tactics.V2.SyntaxHelpers.collect_arr>


; <Start encoding val FStar.Tactics.V2.SyntaxHelpers.collect_abs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.collect_abs (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.collect_abs@tok () Term)

; </end encoding val FStar.Tactics.V2.SyntaxHelpers.collect_abs>


; <Start encoding val FStar.Tactics.V2.SyntaxHelpers.mk_arr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.mk_arr (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.mk_arr@tok () Term)

; </end encoding val FStar.Tactics.V2.SyntaxHelpers.mk_arr>


; <Start encoding val FStar.Tactics.V2.SyntaxHelpers.mk_tot_arr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.mk_tot_arr (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.mk_tot_arr@tok () Term)

; </end encoding val FStar.Tactics.V2.SyntaxHelpers.mk_tot_arr>


; <Start encoding val FStar.Tactics.V2.SyntaxHelpers.lookup_lb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.lookup_lb (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.lookup_lb@tok () Term)

; </end encoding val FStar.Tactics.V2.SyntaxHelpers.lookup_lb>


; <Start encoding val FStar.Tactics.V2.SyntaxHelpers.inspect_unascribe>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.inspect_unascribe (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.inspect_unascribe@tok () Term)

; </end encoding val FStar.Tactics.V2.SyntaxHelpers.inspect_unascribe>


; <Start encoding val FStar.Tactics.V2.SyntaxHelpers.collect_app>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.collect_app (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.collect_app@tok () Term)

; </end encoding val FStar.Tactics.V2.SyntaxHelpers.collect_app>


; <Start encoding val FStar.Tactics.V2.SyntaxHelpers.hua>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.hua (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.hua@tok () Term)

; </end encoding val FStar.Tactics.V2.SyntaxHelpers.hua>


; End Externals for interface FStar.Tactics.V2.SyntaxHelpers


; Externals for module FStar.PropositionalExtensionality


; <Start encoding val FStar.PropositionalExtensionality.axiom>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.PropositionalExtensionality.axiom (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.PropositionalExtensionality.axiom@tok () Term)

; </end encoding val FStar.PropositionalExtensionality.axiom>


; <Start encoding let apply>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.PropositionalExtensionality.apply (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.PropositionalExtensionality.apply@tok () Term)

; </end encoding let apply>


; End Externals for module FStar.PropositionalExtensionality


; Externals for interface FStar.Squash


; <Start encoding val FStar.Squash.return_squash>

(declare-fun FStar.Squash.return_squash (Term Term) Term)
(declare-fun Tm_arrow_66188dd3b00b7ac9b3910d6e97360d1e () Term)
(declare-fun FStar.Squash.return_squash@tok () Term)

; </end encoding val FStar.Squash.return_squash>


; <Start encoding val FStar.Squash.bind_squash>

(declare-fun Tm_arrow_50bc60bebdf75c69c78dc800e0364d6b (Term Term) Term)
(declare-fun FStar.Squash.bind_squash (Term Term Term Term) Term)

(declare-fun Tm_arrow_dd301c13dceb52611925e3e0985c3aa8 () Term)
(declare-fun FStar.Squash.bind_squash@tok () Term)

; </end encoding val FStar.Squash.bind_squash>


; <Start encoding val FStar.Squash.push_squash>



(declare-fun FStar.Squash.push_squash (Term Term Term) Term)



(declare-fun Tm_arrow_897bf5c14b806d39ad41e0bfef45d28a () Term)
(declare-fun FStar.Squash.push_squash@tok () Term)


; </end encoding val FStar.Squash.push_squash>


; <Start encoding val FStar.Squash.get_proof>

(declare-fun FStar.Squash.get_proof (Term) Term)
(declare-fun Tm_refine_7fdd091adbcfc3810a61ff266cf2272b (Term) Term)
(declare-fun Tm_arrow_92023635b661ef4cb5183e1ccd313c6b () Term)
(declare-fun FStar.Squash.get_proof@tok () Term)


; </end encoding val FStar.Squash.get_proof>


; <Start encoding val FStar.Squash.give_proof>

(declare-fun FStar.Squash.give_proof (Term Term) Term)

(declare-fun Tm_arrow_d002f3b74726aef4cc35f50b77083fcc () Term)
(declare-fun FStar.Squash.give_proof@tok () Term)


; </end encoding val FStar.Squash.give_proof>


; <Start encoding val FStar.Squash.proof_irrelevance>

(declare-fun FStar.Squash.proof_irrelevance (Term Term Term) Term)

(declare-fun Tm_arrow_78ff335c3696d8f05c99466a60d0bf7d () Term)
(declare-fun FStar.Squash.proof_irrelevance@tok () Term)


; </end encoding val FStar.Squash.proof_irrelevance>


; <Start encoding val FStar.Squash.squash_double_arrow>



(declare-fun FStar.Squash.squash_double_arrow (Term Term Term) Term)



(declare-fun Tm_arrow_4135086bd057eee0b1997d9de0b75d33 () Term)
(declare-fun FStar.Squash.squash_double_arrow@tok () Term)


; </end encoding val FStar.Squash.squash_double_arrow>


; <Start encoding val FStar.Squash.push_sum>



(declare-fun Tm_abs_ecb85cab59105fe548fc5ca9d671c8f9 (Term Term) Term)
(declare-fun FStar.Squash.push_sum (Term Term Term) Term)



(declare-fun Tm_arrow_c6e83d6817933b3336a5e86b07e67062 () Term)
(declare-fun FStar.Squash.push_sum@tok () Term)

; </end encoding val FStar.Squash.push_sum>


; <Start encoding val FStar.Squash.squash_double_sum>




(declare-fun FStar.Squash.squash_double_sum (Term Term Term) Term)



(declare-fun Tm_arrow_a0b7ea9677fa75d0acf0c901c148bbdc () Term)
(declare-fun FStar.Squash.squash_double_sum@tok () Term)

; </end encoding val FStar.Squash.squash_double_sum>


; <Start encoding val FStar.Squash.map_squash>


(declare-fun FStar.Squash.map_squash (Term Term Term Term) Term)

(declare-fun Tm_arrow_f71a078a3b73bb8e8cddd83bc4ca236a () Term)
(declare-fun FStar.Squash.map_squash@tok () Term)

; </end encoding val FStar.Squash.map_squash>


; <Start encoding val FStar.Squash.join_squash>

(declare-fun FStar.Squash.join_squash (Term Term) Term)
(declare-fun Tm_arrow_b9fdb1273189be7b55b74e1c4ecfb366 () Term)
(declare-fun FStar.Squash.join_squash@tok () Term)

; </end encoding val FStar.Squash.join_squash>


; End Externals for interface FStar.Squash


; Externals for interface FStar.Tactics.Names


; <Start encoding val FStar.Tactics.Names.name_appears_in>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Names.name_appears_in (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Names.name_appears_in@tok () Term)

; </end encoding val FStar.Tactics.Names.name_appears_in>


; End Externals for interface FStar.Tactics.Names


; Externals for module FStar.Tactics.V2.Derived


; <Start encoding let op_At>

(declare-fun FStar.Tactics.V2.Derived.op_At (Term) Term)
(declare-fun Tm_arrow_13365c547ebacced8e5c321e9ac37c13 (Term) Term)
(declare-fun Tm_arrow_27f58803f2afd0299b7d65785588b6d2 () Term)
(declare-fun FStar.Tactics.V2.Derived.op_At@tok () Term)


; </end encoding let op_At>


; <Start encoding let term_eq>

(declare-fun FStar.Tactics.V2.Derived.term_eq (Term Term) Term)

(declare-fun FStar.Tactics.V2.Derived.term_eq@tok () Term)

; </end encoding let term_eq>


; <Start encoding let name_of_bv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.name_of_bv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.name_of_bv@tok () Term)

; </end encoding let name_of_bv>


; <Start encoding let bv_to_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.bv_to_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.bv_to_string@tok () Term)

; </end encoding let bv_to_string>


; <Start encoding let name_of_binder>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.name_of_binder (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.name_of_binder@tok () Term)

; </end encoding let name_of_binder>


; <Start encoding let binder_to_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.binder_to_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.binder_to_string@tok () Term)

; </end encoding let binder_to_string>


; <Start encoding let binding_to_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.binding_to_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.binding_to_string@tok () Term)

; </end encoding let binding_to_string>


; <Start encoding let type_of_var>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.type_of_var (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.type_of_var@tok () Term)

; </end encoding let type_of_var>


; <Start encoding let type_of_binding>

(declare-fun FStar.Tactics.V2.Derived.type_of_binding (Term) Term)
(declare-fun Tm_arrow_c73fb18c2ffc2a3f457ada8b14246edf () Term)
(declare-fun FStar.Tactics.V2.Derived.type_of_binding@tok () Term)

; </end encoding let type_of_binding>


; <Start encoding datacon FStar.Tactics.V2.Derived.Goal_not_trivial for type Prims.exn>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.V2.Derived.Goal_not_trivial () Term)
;;;;;;;;;;;;;;;;Constructor base
(declare-fun FStar.Tactics.V2.Derived.Goal_not_trivial@base () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.V2.Derived.Goal_not_trivial
(declare-fun FStar.Tactics.V2.Derived.Goal_not_trivial@tok () Term)

; <start constructor FStar.Tactics.V2.Derived.Goal_not_trivial>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.V2.Derived.Goal_not_trivial ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
112)
(= __@x0
FStar.Tactics.V2.Derived.Goal_not_trivial)))

; </end constructor FStar.Tactics.V2.Derived.Goal_not_trivial>


; </end encoding datacon FStar.Tactics.V2.Derived.Goal_not_trivial for type Prims.exn>


; <Start encoding val FStar.Tactics.V2.Derived.uu___is_Goal_not_trivial>

(declare-fun FStar.Tactics.V2.Derived.uu___is_Goal_not_trivial (Term) Term)

(declare-fun FStar.Tactics.V2.Derived.uu___is_Goal_not_trivial@tok () Term)

; </end encoding val FStar.Tactics.V2.Derived.uu___is_Goal_not_trivial>


; <Skipped let uu___is_Goal_not_trivial/>


; <Start encoding let goals>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.goals (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.goals@tok () Term)

; </end encoding let goals>


; <Start encoding let smt_goals>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.smt_goals (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.smt_goals@tok () Term)

; </end encoding let smt_goals>


; <Start encoding let fail_doc_at>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.fail_doc_at (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.fail_doc_at@tok () Term)

; </end encoding let fail_doc_at>


; <Start encoding let fail_doc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.fail_doc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.fail_doc@tok () Term)

; </end encoding let fail_doc>


; <Start encoding let fail_at>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.fail_at (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.fail_at@tok () Term)

; </end encoding let fail_at>


; <Start encoding let fail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.fail (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.fail@tok () Term)

; </end encoding let fail>


; <Start encoding let fail_silently_doc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.fail_silently_doc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.fail_silently_doc@tok () Term)

; </end encoding let fail_silently_doc>


; <Start encoding let fail_silently>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.fail_silently (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.fail_silently@tok () Term)

; </end encoding let fail_silently>


; <Start encoding let _cur_goal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived._cur_goal (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived._cur_goal@tok () Term)

; </end encoding let _cur_goal>


; <Start encoding let cur_env>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.cur_env (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.cur_env@tok () Term)

; </end encoding let cur_env>


; <Start encoding let cur_goal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.cur_goal (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.cur_goal@tok () Term)

; </end encoding let cur_goal>


; <Start encoding let cur_witness>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.cur_witness (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.cur_witness@tok () Term)

; </end encoding let cur_witness>


; <Start encoding let cur_goal_safe>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.cur_goal_safe (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.cur_goal_safe@tok () Term)

; </end encoding let cur_goal_safe>


; <Start encoding let cur_vars>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.cur_vars (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.cur_vars@tok () Term)

; </end encoding let cur_vars>


; <Start encoding let with_policy>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.with_policy (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.with_policy@tok () Term)

; </end encoding let with_policy>


; <Start encoding let exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.exact (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.exact@tok () Term)

; </end encoding let exact>


; <Start encoding let exact_with_ref>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.exact_with_ref (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.exact_with_ref@tok () Term)

; </end encoding let exact_with_ref>


; <Start encoding let trivial>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.trivial (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.trivial@tok () Term)

; </end encoding let trivial>


; <Start encoding let run_tactic>


(declare-fun FStar.Tactics.V2.Derived.run_tactic (Term) Term)

(declare-fun Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9 () Term)
(declare-fun Tm_arrow_93b1b66d7ba75682eb1b8b3b9b03c99e () Term)
(declare-fun FStar.Tactics.V2.Derived.run_tactic@tok () Term)



; </end encoding let run_tactic>


; <Start encoding let dismiss>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.dismiss (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.dismiss@tok () Term)

; </end encoding let dismiss>


; <Start encoding let flip>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.flip (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.flip@tok () Term)

; </end encoding let flip>


; <Start encoding let qed>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.qed (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.qed@tok () Term)

; </end encoding let qed>


; <Start encoding let debug>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.debug (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.debug@tok () Term)

; </end encoding let debug>


; <Start encoding let smt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.smt (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.smt@tok () Term)

; </end encoding let smt>


; <Start encoding let idtac>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.idtac (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.idtac@tok () Term)

; </end encoding let idtac>


; <Start encoding let later>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.later (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.later@tok () Term)

; </end encoding let later>


; <Start encoding let apply>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.apply (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.apply@tok () Term)

; </end encoding let apply>


; <Start encoding let apply_noinst>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.apply_noinst (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.apply_noinst@tok () Term)

; </end encoding let apply_noinst>


; <Start encoding let apply_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.apply_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.apply_lemma@tok () Term)

; </end encoding let apply_lemma>


; <Start encoding let trefl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.trefl (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.trefl@tok () Term)

; </end encoding let trefl>


; <Start encoding let trefl_guard>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.trefl_guard (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.trefl_guard@tok () Term)

; </end encoding let trefl_guard>


; <Start encoding let commute_applied_match>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.commute_applied_match (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.commute_applied_match@tok () Term)

; </end encoding let commute_applied_match>


; <Start encoding let apply_lemma_noinst>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.apply_lemma_noinst (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.apply_lemma_noinst@tok () Term)

; </end encoding let apply_lemma_noinst>


; <Start encoding let apply_lemma_rw>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.apply_lemma_rw (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.apply_lemma_rw@tok () Term)

; </end encoding let apply_lemma_rw>


; <Start encoding let apply_raw>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.apply_raw (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.apply_raw@tok () Term)

; </end encoding let apply_raw>


; <Start encoding let exact_guard>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.exact_guard (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.exact_guard@tok () Term)

; </end encoding let exact_guard>


; <Start encoding let t_pointwise>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.t_pointwise (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.t_pointwise@tok () Term)

; </end encoding let t_pointwise>


; <Start encoding let topdown_rewrite>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.topdown_rewrite (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.topdown_rewrite@tok () Term)

; </end encoding let topdown_rewrite>


; <Start encoding let pointwise>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.pointwise (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.pointwise@tok () Term)

; </end encoding let pointwise>


; <Start encoding let pointwise'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.pointwise_ (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.pointwise_@tok () Term)

; </end encoding let pointwise'>


; <Start encoding let cur_module>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.cur_module (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.cur_module@tok () Term)

; </end encoding let cur_module>


; <Start encoding let open_modules>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.open_modules (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.open_modules@tok () Term)

; </end encoding let open_modules>


; <Start encoding let fresh_uvar>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.fresh_uvar (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.fresh_uvar@tok () Term)

; </end encoding let fresh_uvar>


; <Start encoding let unify>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.unify (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.unify@tok () Term)

; </end encoding let unify>


; <Start encoding let unify_guard>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.unify_guard (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.unify_guard@tok () Term)

; </end encoding let unify_guard>


; <Start encoding let tmatch>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.tmatch (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.tmatch@tok () Term)

; </end encoding let tmatch>


; <Start encoding let divide>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.divide (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.divide@tok () Term)

; </end encoding let divide>


; <Start encoding let rec iseq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.iseq (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.iseq@tok () Term)

; </end encoding let rec iseq>


; <Start encoding let focus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.focus (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.focus@tok () Term)

; </end encoding let focus>


; <Start encoding let dump1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.dump1 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.dump1@tok () Term)

; </end encoding let dump1>


; <Start encoding let rec mapAll>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.mapAll (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.mapAll@tok () Term)

; </end encoding let rec mapAll>


; <Start encoding let rec iterAll>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.iterAll (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.iterAll@tok () Term)

; </end encoding let rec iterAll>


; <Start encoding let iterAllSMT>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.iterAllSMT (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.iterAllSMT@tok () Term)

; </end encoding let iterAllSMT>


; <Start encoding let seq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.seq (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.seq@tok () Term)

; </end encoding let seq>


; <Start encoding let exact_args>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.exact_args (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.exact_args@tok () Term)

; </end encoding let exact_args>


; <Start encoding let exact_n>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.exact_n (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.exact_n@tok () Term)

; </end encoding let exact_n>


; <Start encoding let ngoals>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.ngoals (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.ngoals@tok () Term)

; </end encoding let ngoals>


; <Start encoding let ngoals_smt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.ngoals_smt (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.ngoals_smt@tok () Term)

; </end encoding let ngoals_smt>


; <Start encoding let fresh_namedv_named>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.fresh_namedv_named (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.fresh_namedv_named@tok () Term)

; </end encoding let fresh_namedv_named>


; <Start encoding let fresh_namedv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.fresh_namedv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.fresh_namedv@tok () Term)

; </end encoding let fresh_namedv>


; <Start encoding let fresh_binder_named>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.fresh_binder_named (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.fresh_binder_named@tok () Term)

; </end encoding let fresh_binder_named>


; <Start encoding let fresh_binder>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.fresh_binder (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.fresh_binder@tok () Term)

; </end encoding let fresh_binder>


; <Start encoding let fresh_implicit_binder>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.fresh_implicit_binder (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.fresh_implicit_binder@tok () Term)

; </end encoding let fresh_implicit_binder>


; <Start encoding let guard>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.guard (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.guard@tok () Term)

; </end encoding let guard>


; <Start encoding let try_with>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.try_with (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.try_with@tok () Term)

; </end encoding let try_with>


; <Start encoding let trytac>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.trytac (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.trytac@tok () Term)

; </end encoding let trytac>


; <Start encoding let or_else>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.or_else (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.or_else@tok () Term)

; </end encoding let or_else>


; <Skipped val FStar.Tactics.V2.Derived.op_Less_Bar_Greater/>


; <Start encoding let op_Less_Bar_Greater>

(declare-fun Non_total_Tm_arrow_240d309665d6c9d3cdfd650d488ccf5a (Term) Term)

(declare-fun FStar.Tactics.V2.Derived.op_Less_Bar_Greater (Term Term Term) Term)



(declare-fun Tm_arrow_4812a79af3306481527e9fb20aa1a8f2 () Term)
(declare-fun FStar.Tactics.V2.Derived.op_Less_Bar_Greater@tok () Term)



;;;;;;;;;;;;;;;;Imprecise function encoding
(declare-fun Tm_abs_FStar.Tactics.V2.Derived_209 (Term Term Term) Term)

; </end encoding let op_Less_Bar_Greater>


; <Start encoding let first>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.first (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.first@tok () Term)

; </end encoding let first>


; <Start encoding let rec repeat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.repeat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.repeat@tok () Term)

; </end encoding let rec repeat>


; <Start encoding let repeat1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.repeat1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.repeat1@tok () Term)

; </end encoding let repeat1>


; <Start encoding let repeat'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.repeat_ (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.repeat_@tok () Term)

; </end encoding let repeat'>


; <Start encoding let norm_term>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.norm_term (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.norm_term@tok () Term)

; </end encoding let norm_term>


; <Start encoding let join_all_smt_goals>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.join_all_smt_goals (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.join_all_smt_goals@tok () Term)

; </end encoding let join_all_smt_goals>


; <Start encoding let discard>


(declare-fun FStar.Tactics.V2.Derived.discard (Term Term) Term)


(declare-fun Tm_arrow_ac813df66493e8083fb537450af0aa2d () Term)
(declare-fun FStar.Tactics.V2.Derived.discard@tok () Term)


;;;;;;;;;;;;;;;;Imprecise function encoding
(declare-fun Tm_abs_FStar.Tactics.V2.Derived_252 (Term Term) Term)

; </end encoding let discard>


; <Start encoding let rec repeatseq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.repeatseq (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.repeatseq@tok () Term)

; </end encoding let rec repeatseq>


; <Start encoding let tadmit>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.tadmit (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.tadmit@tok () Term)

; </end encoding let tadmit>


; <Start encoding let admit1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.admit1 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.admit1@tok () Term)

; </end encoding let admit1>


; <Start encoding let admit_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.admit_all (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.admit_all@tok () Term)

; </end encoding let admit_all>


; <Start encoding let is_guard>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.is_guard (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.is_guard@tok () Term)

; </end encoding let is_guard>


; <Start encoding let skip_guard>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.skip_guard (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.skip_guard@tok () Term)

; </end encoding let skip_guard>


; <Start encoding let guards_to_smt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.guards_to_smt (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.guards_to_smt@tok () Term)

; </end encoding let guards_to_smt>


; <Start encoding let simpl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.simpl (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.simpl@tok () Term)

; </end encoding let simpl>


; <Start encoding let whnf>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.whnf (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.whnf@tok () Term)

; </end encoding let whnf>


; <Start encoding let compute>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.compute (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.compute@tok () Term)

; </end encoding let compute>


; <Start encoding let intros>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.intros (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.intros@tok () Term)

; </end encoding let intros>


; <Start encoding let intros'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.intros_ (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.intros_@tok () Term)

; </end encoding let intros'>


; <Start encoding let destruct>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.destruct (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.destruct@tok () Term)

; </end encoding let destruct>


; <Start encoding let destruct_intros>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.destruct_intros (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.destruct_intros@tok () Term)

; </end encoding let destruct_intros>


; <Skipped val FStar.Tactics.V2.Derived.__cut/>


; <Start encoding let __cut>


(declare-fun FStar.Tactics.V2.Derived.__cut (Term Term Term Term) Term)

(declare-fun Tm_arrow_4d14630bf8cde080839dc2f618ad299b () Term)
(declare-fun FStar.Tactics.V2.Derived.__cut@tok () Term)


; </end encoding let __cut>


; <Start encoding let tcut>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.tcut (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.tcut@tok () Term)

; </end encoding let tcut>


; <Start encoding let pose>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.pose (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.pose@tok () Term)

; </end encoding let pose>


; <Start encoding let intro_as>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.intro_as (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.intro_as@tok () Term)

; </end encoding let intro_as>


; <Start encoding let pose_as>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.pose_as (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.pose_as@tok () Term)

; </end encoding let pose_as>


; <Start encoding let for_each_binding>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.for_each_binding (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.for_each_binding@tok () Term)

; </end encoding let for_each_binding>


; <Start encoding let rec revert_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.revert_all (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.revert_all@tok () Term)

; </end encoding let rec revert_all>


; <Start encoding let binder_sort>

(declare-fun FStar.Tactics.V2.Derived.binder_sort (Term) Term)

(declare-fun FStar.Tactics.V2.Derived.binder_sort@tok () Term)

; </end encoding let binder_sort>


; <Start encoding let rec __assumption_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.__assumption_aux (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.__assumption_aux@tok () Term)

; </end encoding let rec __assumption_aux>


; <Start encoding let assumption>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.assumption (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.assumption@tok () Term)

; </end encoding let assumption>


; <Start encoding let destruct_equality_implication>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.destruct_equality_implication (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.destruct_equality_implication@tok () Term)

; </end encoding let destruct_equality_implication>


; <Start encoding let __eq_sym>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.__eq_sym (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.__eq_sym@tok () Term)

; </end encoding let __eq_sym>


; <Start encoding let rewrite'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.rewrite_ (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.rewrite_@tok () Term)

; </end encoding let rewrite'>


; <Start encoding let rec try_rewrite_equality>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.try_rewrite_equality (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.try_rewrite_equality@tok () Term)

; </end encoding let rec try_rewrite_equality>


; <Start encoding let rec rewrite_all_context_equalities>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.rewrite_all_context_equalities (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.rewrite_all_context_equalities@tok () Term)

; </end encoding let rec rewrite_all_context_equalities>


; <Start encoding let rewrite_eqs_from_context>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.rewrite_eqs_from_context (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.rewrite_eqs_from_context@tok () Term)

; </end encoding let rewrite_eqs_from_context>


; <Start encoding let rewrite_equality>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.rewrite_equality (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.rewrite_equality@tok () Term)

; </end encoding let rewrite_equality>


; <Start encoding let unfold_def>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.unfold_def (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.unfold_def@tok () Term)

; </end encoding let unfold_def>


; <Start encoding let l_to_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.l_to_r (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.l_to_r@tok () Term)

; </end encoding let l_to_r>


; <Start encoding let mk_squash>

(declare-fun FStar.Tactics.V2.Derived.mk_squash (Term) Term)
(declare-fun Tm_arrow_c511ca6db8fb863aef3e38e31ce359ed () Term)
(declare-fun FStar.Tactics.V2.Derived.mk_squash@tok () Term)

; </end encoding let mk_squash>


; <Start encoding let mk_sq_eq>

(declare-fun FStar.Tactics.V2.Derived.mk_sq_eq (Term Term) Term)
(declare-fun Tm_arrow_b2c1efe88e906b8a848fce7122837b71 () Term)
(declare-fun FStar.Tactics.V2.Derived.mk_sq_eq@tok () Term)

; </end encoding let mk_sq_eq>


; <Start encoding let __grewrite_derived>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.__grewrite_derived (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.__grewrite_derived@tok () Term)

; </end encoding let __grewrite_derived>


; <Start encoding let __un_sq_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.__un_sq_eq (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.__un_sq_eq@tok () Term)

; </end encoding let __un_sq_eq>


; <Start encoding let grewrite_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.grewrite_eq (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.grewrite_eq@tok () Term)

; </end encoding let grewrite_eq>


; <Start encoding let admit_dump_t>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.admit_dump_t (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.admit_dump_t@tok () Term)

; </end encoding let admit_dump_t>


; <Skipped val FStar.Tactics.V2.Derived.admit_dump/>


; <Start encoding let admit_dump>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.admit_dump (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.admit_dump@tok () Term)

; </end encoding let admit_dump>


; <Start encoding let magic_dump_t>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.magic_dump_t (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.magic_dump_t@tok () Term)

; </end encoding let magic_dump_t>


; <Skipped val FStar.Tactics.V2.Derived.magic_dump/>


; <Start encoding let magic_dump>

(declare-fun FStar.Tactics.V2.Derived.magic_dump (Term Term Term) Term)
(declare-fun Tm_arrow_f31127736e0cabafd323e1d4a75abe30 () Term)
(declare-fun FStar.Tactics.V2.Derived.magic_dump@tok () Term)

; </end encoding let magic_dump>


; <Start encoding let change_with>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.change_with (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.change_with@tok () Term)

; </end encoding let change_with>


; <Start encoding let change_sq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.change_sq (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.change_sq@tok () Term)

; </end encoding let change_sq>


; <Start encoding let finish_by>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.finish_by (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.finish_by@tok () Term)

; </end encoding let finish_by>


; <Start encoding let solve_then>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.solve_then (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.solve_then@tok () Term)

; </end encoding let solve_then>


; <Start encoding let add_elem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.add_elem (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.add_elem@tok () Term)

; </end encoding let add_elem>


; <Start encoding let specialize>

(declare-fun FStar.Tactics.V2.Derived.specialize (Term Term Term) Term)

(declare-fun Tm_arrow_d136b0a37e05dd767471f5aeaf653187 () Term)
(declare-fun FStar.Tactics.V2.Derived.specialize@tok () Term)

;;;;;;;;;;;;;;;;Imprecise function encoding
(declare-fun Tm_abs_FStar.Tactics.V2.Derived_287 (Term Term) Term)

; </end encoding let specialize>


; <Start encoding let tlabel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.tlabel (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.tlabel@tok () Term)

; </end encoding let tlabel>


; <Start encoding let tlabel'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.tlabel_ (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.tlabel_@tok () Term)

; </end encoding let tlabel'>


; <Start encoding let focus_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.focus_all (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.focus_all@tok () Term)

; </end encoding let focus_all>


; <Start encoding let rec extract_nth>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Tactics.V2.Derived.extract_nth.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Tactics.V2.Derived.extract_nth.fuel_instrumented_token () Term)
(declare-fun FStar.Tactics.V2.Derived.extract_nth (Term Term Term) Term)
(declare-fun FStar.Tactics.V2.Derived.extract_nth@tok () Term)
(declare-fun Tm_arrow_2690a7e0ca66f539bbdae5e05b22faf0 () Term)

; </end encoding let rec extract_nth>


; <Start encoding let bump_nth>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.bump_nth (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.bump_nth@tok () Term)

; </end encoding let bump_nth>


; <Start encoding let rec destruct_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.destruct_list (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.destruct_list@tok () Term)

; </end encoding let rec destruct_list>


; <Start encoding let get_match_body>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.get_match_body (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.get_match_body@tok () Term)

; </end encoding let get_match_body>


; <Start encoding let rec last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.last (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.last@tok () Term)

; </end encoding let rec last>


; <Start encoding let branch_on_match>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.branch_on_match (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.branch_on_match@tok () Term)

; </end encoding let branch_on_match>


; <Start encoding let nth_var>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.nth_var (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.nth_var@tok () Term)

; </end encoding let nth_var>


; <Start encoding let rec mk_abs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.mk_abs (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.mk_abs@tok () Term)

; </end encoding let rec mk_abs>


; <Start encoding let namedv_to_simple_binder>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.namedv_to_simple_binder (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.namedv_to_simple_binder@tok () Term)

; </end encoding let namedv_to_simple_binder>


; <Start encoding let binding_to_simple_binder>

(declare-fun FStar.Tactics.V2.Derived.binding_to_simple_binder (Term) Term)
(declare-fun Tm_arrow_dc75b10104c25ad359edacf654eb7137 () Term)
(declare-fun FStar.Tactics.V2.Derived.binding_to_simple_binder@tok () Term)

; </end encoding let binding_to_simple_binder>


; <Start encoding let string_to_term_with_lb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.string_to_term_with_lb (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.string_to_term_with_lb@tok () Term)

; </end encoding let string_to_term_with_lb>


; <Skipped val FStar.Tactics.V2.Derived.lem_trans/>


; <Start encoding let lem_trans>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.lem_trans (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.lem_trans@tok () Term)

; </end encoding let lem_trans>


; <Start encoding let trans>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.trans (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.trans@tok () Term)

; </end encoding let trans>


; <Start encoding let smt_sync>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.smt_sync (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.smt_sync@tok () Term)

; </end encoding let smt_sync>


; <Start encoding let smt_sync'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.smt_sync_ (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.smt_sync_@tok () Term)

; </end encoding let smt_sync'>


; <Start encoding let check_equiv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.check_equiv (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.check_equiv@tok () Term)

; </end encoding let check_equiv>


; <Start encoding let check_equiv_nosmt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.check_equiv_nosmt (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.check_equiv_nosmt@tok () Term)

; </end encoding let check_equiv_nosmt>


; End Externals for module FStar.Tactics.V2.Derived


; Externals for interface FStar.Tactics.V2.Bare


; End Externals for interface FStar.Tactics.V2.Bare


; Externals for interface FStar.Tactics.V2


; End Externals for interface FStar.Tactics.V2


; Externals for interface FStar.Seq.Properties


; <Start encoding let lseq>

(declare-fun FStar.Seq.Properties.lseq (Term Term) Term)

(declare-fun FStar.Seq.Properties.lseq@tok () Term)
(declare-fun Tm_refine_a0cd7d06c5da6444b6b51b319febde8e (Term Term) Term)

; </end encoding let lseq>


; <Start encoding let indexable>

(declare-fun FStar.Seq.Properties.indexable (Term Term Term) Term)
(declare-fun Tm_arrow_2c0367dd991d12c77178c7fe63f076c5 () Term)
(declare-fun FStar.Seq.Properties.indexable@tok () Term)

; </end encoding let indexable>


; <Start encoding val FStar.Seq.Properties.lemma_append_inj_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_append_inj_l (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_append_inj_l@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_append_inj_l>


; <Start encoding val FStar.Seq.Properties.lemma_append_inj_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_append_inj_r (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_append_inj_r@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_append_inj_r>


; <Start encoding val FStar.Seq.Properties.lemma_append_len_disj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_append_len_disj (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_append_len_disj@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_append_len_disj>


; <Start encoding val FStar.Seq.Properties.lemma_append_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_append_inj (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_append_inj@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_append_inj>


; <Start encoding let head>

(declare-fun Tm_refine_167ef714932ec832fb671890fc3eee6c (Term) Term)
(declare-fun FStar.Seq.Properties.head (Term Term) Term)

(declare-fun Tm_arrow_fde6b9111cb8aaf87a1b6689af62ed69 () Term)
(declare-fun FStar.Seq.Properties.head@tok () Term)


; </end encoding let head>


; <Start encoding let tail>


(declare-fun FStar.Seq.Properties.tail (Term Term) Term)

(declare-fun Tm_arrow_3db93b3d63ab329f9ab58ee76fda4c87 () Term)
(declare-fun FStar.Seq.Properties.tail@tok () Term)


; </end encoding let tail>


; <Start encoding val FStar.Seq.Properties.lemma_head_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_head_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_head_append@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_head_append>


; <Start encoding val FStar.Seq.Properties.lemma_tail_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_tail_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_tail_append@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_tail_append>


; <Start encoding let last>


(declare-fun FStar.Seq.Properties.last (Term Term) Term)


(declare-fun FStar.Seq.Properties.last@tok () Term)


; </end encoding let last>


; <Start encoding val FStar.Seq.Properties.lemma_cons_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_cons_inj (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_cons_inj@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_cons_inj>


; <Start encoding let split>

(declare-fun Tm_refine_17631fa6304dcc08d028bd475a6dd078 (Term Term) Term)
(declare-fun FStar.Seq.Properties.split (Term Term Term) Term)

(declare-fun Tm_arrow_e8094a245058e1a3364fcb54e52c4b61 () Term)
(declare-fun FStar.Seq.Properties.split@tok () Term)


; </end encoding let split>


; <Start encoding val FStar.Seq.Properties.lemma_split>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_split (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_split@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_split>


; <Start encoding let split_eq>


(declare-fun FStar.Seq.Properties.split_eq (Term Term Term) Term)

(declare-fun Tm_refine_78d42c5dbba01ee594272daa6bb0579c (Term Term) Term)
(declare-fun Tm_arrow_b88932abf1506cfe956c7a113bc65f4b () Term)
(declare-fun FStar.Seq.Properties.split_eq@tok () Term)



; </end encoding let split_eq>


; <Start encoding let rec count>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.count.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.count.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.count (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.count@tok () Term)
(declare-fun Tm_arrow_b68daf91c98458f9ea85290d85674a2e () Term)

; </end encoding let rec count>


; <Start encoding let mem>

(declare-fun FStar.Seq.Properties.mem (Term Term Term) Term)
(declare-fun Tm_arrow_8b9021eb78c56c0f1820182c3a3e44b5 () Term)
(declare-fun FStar.Seq.Properties.mem@tok () Term)

; </end encoding let mem>


; <Start encoding val FStar.Seq.Properties.mem_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.mem_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.mem_index@tok () Term)

; </end encoding val FStar.Seq.Properties.mem_index>


; <Start encoding let rec index_mem>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.index_mem.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.index_mem.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.index_mem (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.index_mem@tok () Term)
(declare-fun Tm_refine_7c92df3cf71635bc41483532e738d828 (Term Term Term) Term)

(declare-fun Tm_arrow_12def5646e9a05cc547dd67c2eeaec45 () Term)


; </end encoding let rec index_mem>


; <Start encoding let swap>



(declare-fun FStar.Seq.Properties.swap (Term Term Term Term) Term)


(declare-fun Tm_arrow_ed5530d89236443143d2d084ddc97069 () Term)
(declare-fun FStar.Seq.Properties.swap@tok () Term)



; </end encoding let swap>


; <Start encoding val FStar.Seq.Properties.lemma_slice_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_append@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_slice_append>


; <Start encoding val FStar.Seq.Properties.lemma_slice_first_in_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_first_in_append (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_first_in_append@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_slice_first_in_append>


; <Start encoding val FStar.Seq.Properties.slice_upd>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.slice_upd (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.slice_upd@tok () Term)



; </end encoding val FStar.Seq.Properties.slice_upd>


; <Start encoding val FStar.Seq.Properties.upd_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.upd_slice (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.upd_slice@tok () Term)



; </end encoding val FStar.Seq.Properties.upd_slice>


; <Start encoding val FStar.Seq.Properties.lemma_append_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_append_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_append_cons@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_append_cons>


; <Start encoding val FStar.Seq.Properties.lemma_tl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_tl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_tl@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_tl>


; <Start encoding let rec sorted>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.sorted.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.sorted.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.sorted (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.sorted@tok () Term)



(declare-fun Tm_arrow_28685b742721099a6ab3847e4434a96d () Term)

; </end encoding let rec sorted>


; <Start encoding val FStar.Seq.Properties.sorted_feq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.sorted_feq (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.sorted_feq@tok () Term)

; </end encoding val FStar.Seq.Properties.sorted_feq>


; <Start encoding val FStar.Seq.Properties.lemma_append_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_append_count (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_append_count@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_append_count>


; <Start encoding val FStar.Seq.Properties.lemma_append_count_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_append_count_aux (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_append_count_aux@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_append_count_aux>


; <Start encoding val FStar.Seq.Properties.lemma_mem_inversion>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_inversion (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_inversion@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_mem_inversion>


; <Start encoding val FStar.Seq.Properties.lemma_mem_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_count (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_count@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_mem_count>


; <Start encoding val FStar.Seq.Properties.lemma_count_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_count_slice (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_count_slice@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_count_slice>


; <Start encoding let total_order>


(declare-fun FStar.Seq.Properties.total_order (Term Term) Term)

(declare-fun Tm_arrow_1118b25cace7451b1e5dfdfe482dbb64 () Term)
(declare-fun FStar.Seq.Properties.total_order@tok () Term)


; </end encoding let total_order>


; <Start encoding let tot_ord>

(declare-fun FStar.Seq.Properties.tot_ord (Term) Term)

(declare-fun FStar.Seq.Properties.tot_ord@tok () Term)

(declare-fun Tm_refine_a01e88865b4bbd2f0a4bcb261b6760a8 (Term) Term)

; </end encoding let tot_ord>


; <Start encoding val FStar.Seq.Properties.sorted_concat_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.sorted_concat_lemma (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.sorted_concat_lemma@tok () Term)

; </end encoding val FStar.Seq.Properties.sorted_concat_lemma>


; <Start encoding val FStar.Seq.Properties.split_5>

(declare-fun Tm_refine_55108d29d63192475ca95f591039cc18 (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.split_5 (Term Term Term Term) Term)

(declare-fun Tm_refine_03fdfb031367b218884098aa9d386676 (Term Term Term Term) Term)
(declare-fun Tm_arrow_1ab34f107de5525c681399e3c671c330 () Term)
(declare-fun FStar.Seq.Properties.split_5@tok () Term)


; </end encoding val FStar.Seq.Properties.split_5>


; <Start encoding val FStar.Seq.Properties.lemma_swap_permutes_aux_frag_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes_aux_frag_eq (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes_aux_frag_eq@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_swap_permutes_aux_frag_eq>


; <Start encoding val FStar.Seq.Properties.lemma_swap_permutes_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes_aux (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes_aux@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_swap_permutes_aux>


; <Start encoding let permutation>

(declare-fun FStar.Seq.Properties.permutation (Term Term Term) Term)
(declare-fun Tm_arrow_05517904f5779069bb79d90a352f1386 () Term)
(declare-fun FStar.Seq.Properties.permutation@tok () Term)

; </end encoding let permutation>


; <Start encoding val FStar.Seq.Properties.append_permutations>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.append_permutations (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.append_permutations@tok () Term)

; </end encoding val FStar.Seq.Properties.append_permutations>


; <Start encoding val FStar.Seq.Properties.lemma_swap_permutes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_swap_permutes>


; <Start encoding val FStar.Seq.Properties.perm_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.perm_len (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.perm_len@tok () Term)

; </end encoding val FStar.Seq.Properties.perm_len>


; <Start encoding val FStar.Seq.Properties.cons_perm>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.cons_perm (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.cons_perm@tok () Term)

; </end encoding val FStar.Seq.Properties.cons_perm>


; <Start encoding val FStar.Seq.Properties.lemma_mem_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_append@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_mem_append>


; <Start encoding val FStar.Seq.Properties.lemma_slice_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_cons (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_cons@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_slice_cons>


; <Start encoding val FStar.Seq.Properties.lemma_slice_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_snoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_snoc@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_slice_snoc>


; <Start encoding val FStar.Seq.Properties.lemma_ordering_lo_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_ordering_lo_snoc (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_ordering_lo_snoc@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_ordering_lo_snoc>


; <Start encoding val FStar.Seq.Properties.lemma_ordering_hi_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_ordering_hi_cons (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_ordering_hi_cons@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_ordering_hi_cons>


; <Start encoding val FStar.Seq.Properties.swap_frame_lo>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.swap_frame_lo (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.swap_frame_lo@tok () Term)

; </end encoding val FStar.Seq.Properties.swap_frame_lo>


; <Start encoding val FStar.Seq.Properties.swap_frame_lo'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.swap_frame_lo_ (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.swap_frame_lo_@tok () Term)

; </end encoding val FStar.Seq.Properties.swap_frame_lo'>


; <Start encoding val FStar.Seq.Properties.swap_frame_hi>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.swap_frame_hi (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.swap_frame_hi@tok () Term)

; </end encoding val FStar.Seq.Properties.swap_frame_hi>


; <Start encoding val FStar.Seq.Properties.lemma_swap_slice_commute>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_slice_commute (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_slice_commute@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_swap_slice_commute>


; <Start encoding val FStar.Seq.Properties.lemma_swap_permutes_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes_slice (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes_slice@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_swap_permutes_slice>


; <Start encoding let splice>



(declare-fun FStar.Seq.Properties.splice (Term Term Term Term Term) Term)


(declare-fun Tm_arrow_c43a25ef505b9db21532cdb95f3c9f68 () Term)
(declare-fun FStar.Seq.Properties.splice@tok () Term)



; </end encoding let splice>


; <Start encoding let replace_subseq>


(declare-fun Tm_refine_5542011d20872a6178aad9a072f1b686 (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.replace_subseq (Term Term Term Term Term) Term)


(declare-fun Tm_arrow_9fa775abc8f8f9c4e6df626212cddc6a () Term)
(declare-fun FStar.Seq.Properties.replace_subseq@tok () Term)



; </end encoding let replace_subseq>


; <Start encoding val FStar.Seq.Properties.splice_refl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.splice_refl (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.splice_refl@tok () Term)

; </end encoding val FStar.Seq.Properties.splice_refl>


; <Start encoding val FStar.Seq.Properties.lemma_swap_splice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_splice (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_splice@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_swap_splice>


; <Start encoding val FStar.Seq.Properties.lemma_seq_frame_hi>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_frame_hi (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_frame_hi@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_seq_frame_hi>


; <Start encoding val FStar.Seq.Properties.lemma_seq_frame_lo>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_frame_lo (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_frame_lo@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_seq_frame_lo>


; <Start encoding val FStar.Seq.Properties.lemma_tail_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_tail_slice (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_tail_slice@tok () Term)
(declare-fun Tm_refine_b138bd5848d4184f7632587e6e4bcf9f (Term Term Term) Term)

; </end encoding val FStar.Seq.Properties.lemma_tail_slice>


; <Start encoding val FStar.Seq.Properties.lemma_weaken_frame_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_frame_right (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_frame_right@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_weaken_frame_right>


; <Start encoding val FStar.Seq.Properties.lemma_weaken_frame_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_frame_left (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_frame_left@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_weaken_frame_left>


; <Start encoding val FStar.Seq.Properties.lemma_trans_frame>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_trans_frame (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_trans_frame@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_trans_frame>


; <Start encoding val FStar.Seq.Properties.lemma_weaken_perm_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_perm_left (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_perm_left@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_weaken_perm_left>


; <Start encoding val FStar.Seq.Properties.lemma_weaken_perm_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_perm_right (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_perm_right@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_weaken_perm_right>


; <Start encoding val FStar.Seq.Properties.lemma_trans_perm>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_trans_perm (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_trans_perm@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_trans_perm>


; <Start encoding let snoc>

(declare-fun FStar.Seq.Properties.snoc (Term Term Term) Term)
(declare-fun Tm_arrow_f9b27de7c4505538c6110afe14403cc8 () Term)
(declare-fun FStar.Seq.Properties.snoc@tok () Term)

; </end encoding let snoc>


; <Start encoding val FStar.Seq.Properties.lemma_cons_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_cons_snoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_cons_snoc@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_cons_snoc>


; <Start encoding val FStar.Seq.Properties.lemma_tail_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_tail_snoc (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_tail_snoc@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_tail_snoc>


; <Start encoding val FStar.Seq.Properties.lemma_snoc_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_snoc_inj (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_snoc_inj@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_snoc_inj>


; <Start encoding val FStar.Seq.Properties.lemma_mem_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_snoc (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_snoc@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_mem_snoc>


; <Start encoding let rec find_l>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.find_l.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.find_l.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.find_l (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.find_l@tok () Term)

(declare-fun Tm_refine_aba7638072c8f1ba6a01b95ec6f9a485 (Term Term) Term)



(declare-fun Tm_arrow_fd183dc9552028fd54abfbe4a84f515a () Term)


; </end encoding let rec find_l>


; <Start encoding let rec ghost_find_l>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.ghost_find_l.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.ghost_find_l.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.ghost_find_l (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.ghost_find_l@tok () Term)
(declare-fun Tm_ghost_arrow_9a34a9deaac3ca72ad48c3ec79b6656c (Term) Term)




(declare-fun Tm_ghost_arrow_3f8a537d0d54200d690f80a370cf9031 () Term)


; </end encoding let rec ghost_find_l>


; <Start encoding val FStar.Seq.Properties.find_append_some>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.find_append_some (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.find_append_some@tok () Term)

; </end encoding val FStar.Seq.Properties.find_append_some>


; <Start encoding val FStar.Seq.Properties.find_append_none>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.find_append_none (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.find_append_none@tok () Term)

; </end encoding val FStar.Seq.Properties.find_append_none>


; <Start encoding val FStar.Seq.Properties.find_append_none_s2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.find_append_none_s2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.find_append_none_s2@tok () Term)

; </end encoding val FStar.Seq.Properties.find_append_none_s2>


; <Start encoding val FStar.Seq.Properties.find_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.find_snoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.find_snoc@tok () Term)

; </end encoding val FStar.Seq.Properties.find_snoc>


; <Start encoding let un_snoc>

(declare-fun Tm_refine_5739deb21d8cba89243fec27b35b7ef0 (Term) Term)
(declare-fun FStar.Seq.Properties.un_snoc (Term Term) Term)

(declare-fun Tm_refine_16326afaeb5f4d93ab294cc4a965de3e (Term Term) Term)
(declare-fun Tm_arrow_30c2910b2510bbce2598a79ba00a0209 () Term)
(declare-fun FStar.Seq.Properties.un_snoc@tok () Term)



; </end encoding let un_snoc>


; <Start encoding val FStar.Seq.Properties.un_snoc_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.un_snoc_snoc (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.un_snoc_snoc@tok () Term)

; </end encoding val FStar.Seq.Properties.un_snoc_snoc>


; <Start encoding let rec find_r>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.find_r.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.find_r.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.find_r (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.find_r@tok () Term)








; </end encoding let rec find_r>


; <Start encoding let found>

(declare-fun FStar.Seq.Properties.found (Term) Term)
(declare-fun Tm_arrow_591bcdc53dc583ecc77b1bc5436f9a59 () Term)
(declare-fun FStar.Seq.Properties.found@tok () Term)

; </end encoding let found>


; <Start encoding let rec seq_find_aux>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.seq_find_aux.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.seq_find_aux.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.seq_find_aux (Term Term Term Term) Term)
(declare-fun FStar.Seq.Properties.seq_find_aux@tok () Term)


(declare-fun Tm_refine_564e05c43cb7c1f4e1de1a4fb2fd28c8 (Term Term Term) Term)


(declare-fun Tm_refine_5e8ab89510578a938a38bd5dfb813b93 (Term Term Term) Term)









(declare-fun Tm_arrow_c2dc7826f3281f473541797eb2d714b7 () Term)




; </end encoding let rec seq_find_aux>


; <Start encoding let seq_find>


(declare-fun FStar.Seq.Properties.seq_find (Term Term Term) Term)




(declare-fun Tm_arrow_fa1508f34cdf614c6772d290f5ddf827 () Term)
(declare-fun FStar.Seq.Properties.seq_find@tok () Term)





; </end encoding let seq_find>


; <Start encoding val FStar.Seq.Properties.find_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.find_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.find_mem@tok () Term)

; </end encoding val FStar.Seq.Properties.find_mem>


; <Start encoding let for_all>


(declare-fun FStar.Seq.Properties.for_all (Term Term Term) Term)


(declare-fun Tm_refine_307fd373d8b3749096cf164b41cf1984 (Term Term Term) Term)
(declare-fun Tm_arrow_098d0ddce18f722cb743337c9d7dd0b9 () Term)
(declare-fun FStar.Seq.Properties.for_all@tok () Term)




(declare-fun Tm_abs_e818836335067047224d0c19c4cabb2d (Term Term) Term)

; </end encoding let for_all>


; <Start encoding val FStar.Seq.Properties.seq_mem_k>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.seq_mem_k (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.seq_mem_k@tok () Term)


; </end encoding val FStar.Seq.Properties.seq_mem_k>


; <Start encoding val FStar.Seq.Properties.lemma_seq_of_list_induction>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_induction (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_induction@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_seq_of_list_induction>


; <Start encoding val FStar.Seq.Properties.lemma_seq_list_bij>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_list_bij (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_list_bij@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_seq_list_bij>


; <Start encoding val FStar.Seq.Properties.lemma_list_seq_bij>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_list_seq_bij (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_list_seq_bij@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_list_seq_bij>


; <Start encoding let createL_post>

(declare-fun FStar.Seq.Properties.createL_post (Term Term Term) Term)
(declare-fun Tm_arrow_befeea9093c61a572da65bfe7ce35cff () Term)
(declare-fun FStar.Seq.Properties.createL_post@tok () Term)
(declare-fun Tm_refine_1780a0fddfda88c43d203b562c6d3f5b () Term)

; </end encoding let createL_post>


; <Start encoding let createL>

(declare-fun FStar.Seq.Properties.createL (Term Term) Term)

(declare-fun Tm_refine_21ffdca6c0b13e0caadadae84ae105ad (Term Term) Term)
(declare-fun Tm_arrow_fe4a88707901fac19b8a27ed4097cad8 () Term)
(declare-fun FStar.Seq.Properties.createL@tok () Term)



; </end encoding let createL>


; <Start encoding val FStar.Seq.Properties.lemma_index_is_nth>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_index_is_nth (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_index_is_nth@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_index_is_nth>


; <Start encoding val FStar.Seq.Properties.contains>

(declare-fun FStar.Seq.Properties.contains (Term Term Term) Term)
(declare-fun Tm_arrow_65d0102b1211a5d233193433129106a1 () Term)
(declare-fun FStar.Seq.Properties.contains@tok () Term)

; </end encoding val FStar.Seq.Properties.contains>


; <Start encoding val FStar.Seq.Properties.contains_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.contains_intro (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.contains_intro@tok () Term)

; </end encoding val FStar.Seq.Properties.contains_intro>


; <Start encoding val FStar.Seq.Properties.contains_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.contains_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.contains_elim@tok () Term)

; </end encoding val FStar.Seq.Properties.contains_elim>


; <Start encoding val FStar.Seq.Properties.lemma_contains_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_contains_empty (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_contains_empty@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_contains_empty>


; <Start encoding val FStar.Seq.Properties.lemma_contains_singleton>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_contains_singleton (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_contains_singleton@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_contains_singleton>


; <Start encoding val FStar.Seq.Properties.append_contains_equiv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.append_contains_equiv (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.append_contains_equiv@tok () Term)

; </end encoding val FStar.Seq.Properties.append_contains_equiv>


; <Start encoding val FStar.Seq.Properties.contains_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.contains_snoc (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.contains_snoc@tok () Term)

; </end encoding val FStar.Seq.Properties.contains_snoc>


; <Start encoding val FStar.Seq.Properties.lemma_find_l_contains>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_find_l_contains (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_find_l_contains@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_find_l_contains>


; <Start encoding val FStar.Seq.Properties.contains_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.contains_cons (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.contains_cons@tok () Term)

; </end encoding val FStar.Seq.Properties.contains_cons>


; <Start encoding val FStar.Seq.Properties.append_cons_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.append_cons_snoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.append_cons_snoc@tok () Term)

; </end encoding val FStar.Seq.Properties.append_cons_snoc>


; <Start encoding val FStar.Seq.Properties.append_slices>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.append_slices (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.append_slices@tok () Term)

; </end encoding val FStar.Seq.Properties.append_slices>


; <Start encoding val FStar.Seq.Properties.find_l_none_no_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.find_l_none_no_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.find_l_none_no_index@tok () Term)

; </end encoding val FStar.Seq.Properties.find_l_none_no_index>


; <Start encoding let suffix_of>

(declare-fun FStar.Seq.Properties.suffix_of (Term Term Term) Term)
(declare-fun Tm_arrow_2ed6082b86d605508c94c4b8a46966f5 () Term)
(declare-fun FStar.Seq.Properties.suffix_of@tok () Term)

; </end encoding let suffix_of>


; <Start encoding val FStar.Seq.Properties.cons_head_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.cons_head_tail (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.cons_head_tail@tok () Term)


; </end encoding val FStar.Seq.Properties.cons_head_tail>


; <Start encoding val FStar.Seq.Properties.head_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.head_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.head_cons@tok () Term)

; </end encoding val FStar.Seq.Properties.head_cons>


; <Start encoding val FStar.Seq.Properties.suffix_of_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.suffix_of_tail (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.suffix_of_tail@tok () Term)


; </end encoding val FStar.Seq.Properties.suffix_of_tail>


; <Start encoding val FStar.Seq.Properties.index_cons_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.index_cons_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.index_cons_l@tok () Term)

; </end encoding val FStar.Seq.Properties.index_cons_l>


; <Start encoding val FStar.Seq.Properties.index_cons_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.index_cons_r (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.index_cons_r@tok () Term)

; </end encoding val FStar.Seq.Properties.index_cons_r>


; <Start encoding val FStar.Seq.Properties.append_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.append_cons (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.append_cons@tok () Term)

; </end encoding val FStar.Seq.Properties.append_cons>


; <Start encoding val FStar.Seq.Properties.index_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.index_tail (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.index_tail@tok () Term)

; </end encoding val FStar.Seq.Properties.index_tail>


; <Start encoding val FStar.Seq.Properties.mem_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.mem_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.mem_cons@tok () Term)

; </end encoding val FStar.Seq.Properties.mem_cons>


; <Start encoding val FStar.Seq.Properties.snoc_slice_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.snoc_slice_index (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.snoc_slice_index@tok () Term)
(declare-fun Tm_refine_095c5722edf0f79bcd7dce7bd084c7b5 (Term Term Term) Term)

; </end encoding val FStar.Seq.Properties.snoc_slice_index>


; <Start encoding val FStar.Seq.Properties.cons_index_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.cons_index_slice (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.cons_index_slice@tok () Term)
(declare-fun Tm_refine_09d2e9ab3b9c121b24316d151747e281 (Term Term Term) Term)
(declare-fun Tm_refine_ddd44b85040d1947cca83550b7e21966 (Term) Term)

; </end encoding val FStar.Seq.Properties.cons_index_slice>


; <Start encoding val FStar.Seq.Properties.slice_is_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.slice_is_empty (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.slice_is_empty@tok () Term)


; </end encoding val FStar.Seq.Properties.slice_is_empty>


; <Start encoding val FStar.Seq.Properties.slice_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.slice_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.slice_length@tok () Term)

; </end encoding val FStar.Seq.Properties.slice_length>


; <Start encoding val FStar.Seq.Properties.slice_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.slice_slice (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.slice_slice@tok () Term)

(declare-fun Tm_refine_1ba8fd8bb363097813064c67740b2de5 (Term Term Term) Term)

; </end encoding val FStar.Seq.Properties.slice_slice>


; <Start encoding val FStar.Seq.Properties.lemma_seq_of_list_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_index@tok () Term)


; </end encoding val FStar.Seq.Properties.lemma_seq_of_list_index>


; <Start encoding let of_list>

(declare-fun FStar.Seq.Properties.of_list (Term Term) Term)
(declare-fun Tm_arrow_474463878fff5c7c9c02e4f0b8b84aa8 () Term)
(declare-fun FStar.Seq.Properties.of_list@tok () Term)

; </end encoding let of_list>


; <Start encoding val FStar.Seq.Properties.seq_of_list_tl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.seq_of_list_tl (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.seq_of_list_tl@tok () Term)

; </end encoding val FStar.Seq.Properties.seq_of_list_tl>


; <Start encoding val FStar.Seq.Properties.mem_seq_of_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.mem_seq_of_list (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.mem_seq_of_list@tok () Term)

; </end encoding val FStar.Seq.Properties.mem_seq_of_list>


; <Start encoding let rec explode_and>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.explode_and.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.explode_and.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.explode_and (Term Term Term Term) Term)
(declare-fun FStar.Seq.Properties.explode_and@tok () Term)
(declare-fun Tm_refine_5885c715bf599d471c43c6b7dcb2413b (Term Term) Term)
(declare-fun Tm_refine_c731267dd71b747abfd9fc75f6f2da81 (Term Term Term) Term)




(declare-fun Tm_arrow_62bce6f622c5bc90fd46048dee6dae55 () Term)

; </end encoding let rec explode_and>


; <Start encoding let pointwise_and>

(declare-fun Tm_refine_9f068c7f6ce275579028a195ac18485b (Term) Term)
(declare-fun Tm_refine_1ad818e6438a897337e89a3053cb2002 (Term Term) Term)
(declare-fun FStar.Seq.Properties.pointwise_and (Term Term Term) Term)


(declare-fun Tm_arrow_1d69c34f503e87805d9fa1b40bc9b696 () Term)
(declare-fun FStar.Seq.Properties.pointwise_and@tok () Term)



; </end encoding let pointwise_and>


; <Start encoding val FStar.Seq.Properties.intro_of_list'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.intro_of_list_ (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.intro_of_list_@tok () Term)

; </end encoding val FStar.Seq.Properties.intro_of_list'>


; <Start encoding val FStar.Seq.Properties.intro_of_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.intro_of_list (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.intro_of_list@tok () Term)

; </end encoding val FStar.Seq.Properties.intro_of_list>


; <Start encoding val FStar.Seq.Properties.elim_of_list'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.elim_of_list_ (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.elim_of_list_@tok () Term)

; </end encoding val FStar.Seq.Properties.elim_of_list'>


; <Start encoding val FStar.Seq.Properties.elim_of_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.elim_of_list (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.elim_of_list@tok () Term)

; </end encoding val FStar.Seq.Properties.elim_of_list>


; <Start encoding let sortWith>


(declare-fun FStar.Seq.Properties.sortWith (Term Term Term) Term)

(declare-fun Tm_arrow_783d577ed6adadfd234f2ce68178463f () Term)
(declare-fun FStar.Seq.Properties.sortWith@tok () Term)


; </end encoding let sortWith>


; <Start encoding val FStar.Seq.Properties.lemma_seq_to_list_permutation>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_to_list_permutation (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_to_list_permutation@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_seq_to_list_permutation>


; <Start encoding val FStar.Seq.Properties.lemma_seq_of_list_permutation>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_permutation (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_permutation@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_seq_of_list_permutation>


; <Start encoding val FStar.Seq.Properties.lemma_seq_of_list_sorted>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_sorted (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_sorted@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_seq_of_list_sorted>


; <Start encoding val FStar.Seq.Properties.lemma_seq_sortwith_correctness>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_sortwith_correctness (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_sortwith_correctness@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_seq_sortwith_correctness>


; <Start encoding let sort_lseq>

(declare-fun FStar.Seq.Properties.sort_lseq (Term Term Term Term) Term)
(declare-fun Tm_refine_896d0573468d5c87de125067e75d7d47 (Term Term Term Term) Term)
(declare-fun Tm_arrow_3fb7de3746e0ee65d4a1a51ab385c639 () Term)
(declare-fun FStar.Seq.Properties.sort_lseq@tok () Term)


; </end encoding let sort_lseq>


; <Start encoding let rec foldr>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.foldr.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.foldr.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.foldr (Term Term Term Term Term) Term)
(declare-fun FStar.Seq.Properties.foldr@tok () Term)



(declare-fun Tm_arrow_d44e7807ff692a4b5f624a4c31f6a34b () Term)

; </end encoding let rec foldr>


; <Start encoding let rec foldr_snoc>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.foldr_snoc.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.foldr_snoc.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.foldr_snoc (Term Term Term Term Term) Term)
(declare-fun FStar.Seq.Properties.foldr_snoc@tok () Term)





; </end encoding let rec foldr_snoc>


; <Start encoding val FStar.Seq.Properties.map_seq>


(declare-fun FStar.Seq.Properties.map_seq (Term Term Term Term) Term)

(declare-fun Tm_arrow_5f9288474a8f301ac883b79bab9ed39c () Term)
(declare-fun FStar.Seq.Properties.map_seq@tok () Term)

; </end encoding val FStar.Seq.Properties.map_seq>


; <Start encoding val FStar.Seq.Properties.map_seq_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.map_seq_len (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.map_seq_len@tok () Term)

; </end encoding val FStar.Seq.Properties.map_seq_len>


; <Start encoding val FStar.Seq.Properties.map_seq_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.map_seq_index (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.map_seq_index@tok () Term)

; </end encoding val FStar.Seq.Properties.map_seq_index>


; <Start encoding val FStar.Seq.Properties.map_seq_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.map_seq_append (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.map_seq_append@tok () Term)

; </end encoding val FStar.Seq.Properties.map_seq_append>


; End Externals for interface FStar.Seq.Properties


; Externals for module FStar.Seq


; End Externals for module FStar.Seq


; Externals for interface FStar.Int


; <Start encoding val FStar.Int.pow2_values>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.pow2_values (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.pow2_values@tok () Term)

; </end encoding val FStar.Int.pow2_values>


; <Start encoding let max_int>

(declare-fun FStar.Int.max_int (Term) Term)
(declare-fun Tm_arrow_08643d78e274903c12e67630bc27e2ff () Term)
(declare-fun FStar.Int.max_int@tok () Term)

; </end encoding let max_int>


; <Start encoding let min_int>

(declare-fun FStar.Int.min_int (Term) Term)

(declare-fun FStar.Int.min_int@tok () Term)

; </end encoding let min_int>


; <Start encoding let fits>

(declare-fun FStar.Int.fits (Term Term) Term)
(declare-fun Tm_arrow_0cc3774076f9b140636f49c6b11206ea () Term)
(declare-fun FStar.Int.fits@tok () Term)

; </end encoding let fits>


; <Start encoding let size>

(declare-fun FStar.Int.size (Term Term) Term)
(declare-fun Tm_arrow_7146999d8e685cab1fa5e885783d4ad4 () Term)
(declare-fun FStar.Int.size@tok () Term)

; </end encoding let size>


; <Start encoding let int_t>

(declare-fun FStar.Int.int_t (Term) Term)
(declare-fun Tm_arrow_e214da407f361f6aa0144228799685d1 () Term)
(declare-fun FStar.Int.int_t@tok () Term)
(declare-fun Tm_refine_c156ecc6eab05d1687a383ef171435eb (Term) Term)

; </end encoding let int_t>


; <Start encoding let op_Slash>


(declare-fun FStar.Int.op_Slash (Term Term) Term)

(declare-fun Tm_arrow_2c2bb042329e2e757b97305bbc29732f () Term)
(declare-fun FStar.Int.op_Slash@tok () Term)


; </end encoding let op_Slash>


; <Start encoding let op_At_Percent>

(declare-fun Tm_refine_6f861454c283cab7fef581bd2f2d57c5 () Term)
(declare-fun FStar.Int.op_At_Percent (Term Term) Term)

(declare-fun Tm_arrow_3896a5194433b12d044f39d7e0b679dc () Term)
(declare-fun FStar.Int.op_At_Percent@tok () Term)


; </end encoding let op_At_Percent>


; <Start encoding let zero>

(declare-fun FStar.Int.zero (Term) Term)
(declare-fun Tm_arrow_cb14a53d8f51c2a1b5f2e44ec1c55960 () Term)
(declare-fun FStar.Int.zero@tok () Term)

; </end encoding let zero>


; <Skipped #push-options "--initial_fuel 1 --max_fuel 1"/>


; <Start encoding let pow2_n>

(declare-fun Tm_refine_cf74cf5c1e7834b84db9cc7ebce886a3 (Term) Term)
(declare-fun FStar.Int.pow2_n (Term Term) Term)

(declare-fun Tm_arrow_42409e57c55f2a2d0836412885dba252 () Term)
(declare-fun FStar.Int.pow2_n@tok () Term)


; </end encoding let pow2_n>


; <Start encoding let pow2_minus_one>

(declare-fun Tm_refine_4fe9a5df27ca5859eef8add9fc6819fb () Term)

(declare-fun FStar.Int.pow2_minus_one (Term Term) Term)


(declare-fun Tm_arrow_81be2ee4e7a1e46c9526aae5e34753cd () Term)
(declare-fun FStar.Int.pow2_minus_one@tok () Term)



; </end encoding let pow2_minus_one>


; <Start encoding let one>


(declare-fun FStar.Int.one (Term) Term)

(declare-fun Tm_arrow_e2450f3af7bd5b3af47241cdfb1c2db6 () Term)
(declare-fun FStar.Int.one@tok () Term)


; </end encoding let one>


; <Skipped #pop-options/>


; <Start encoding let ones>

(declare-fun FStar.Int.ones (Term) Term)

(declare-fun FStar.Int.ones@tok () Term)

; </end encoding let ones>


; <Start encoding let incr>

(declare-fun FStar.Int.incr (Term Term) Term)
(declare-fun Tm_refine_dcbbaccec0a9dbd3681a14f97d5258f4 (Term) Term)
(declare-fun Tm_arrow_6a595e67db857b4e04ea431fd250db84 () Term)
(declare-fun FStar.Int.incr@tok () Term)


; </end encoding let incr>


; <Start encoding let decr>

(declare-fun FStar.Int.decr (Term Term) Term)

(declare-fun Tm_arrow_9932ad821a47221f73f30476224722b3 () Term)
(declare-fun FStar.Int.decr@tok () Term)


; </end encoding let decr>


; <Start encoding val FStar.Int.incr_underspec>

(declare-fun FStar.Int.incr_underspec (Term Term) Term)
(declare-fun Tm_refine_d4a5cafc6f5a0f55c9100191cf1c919d (Term Term) Term)
(declare-fun Tm_arrow_7da78e36e44c2863a3eea73f058069f8 () Term)
(declare-fun FStar.Int.incr_underspec@tok () Term)


; </end encoding val FStar.Int.incr_underspec>


; <Start encoding val FStar.Int.decr_underspec>

(declare-fun FStar.Int.decr_underspec (Term Term) Term)
(declare-fun Tm_refine_fe0f51cc65c8d431b43406ae8d7f7c7c (Term Term) Term)
(declare-fun Tm_arrow_f8ffe0a78d6e5b3dac71656ff7d0fc5a () Term)
(declare-fun FStar.Int.decr_underspec@tok () Term)


; </end encoding val FStar.Int.decr_underspec>


; <Start encoding let incr_mod>

(declare-fun FStar.Int.incr_mod (Term Term) Term)
(declare-fun Tm_arrow_d4f13608b577247ae2db20b2380b2245 () Term)
(declare-fun FStar.Int.incr_mod@tok () Term)

; </end encoding let incr_mod>


; <Start encoding let decr_mod>

(declare-fun FStar.Int.decr_mod (Term Term) Term)

(declare-fun FStar.Int.decr_mod@tok () Term)

; </end encoding let decr_mod>


; <Start encoding let add>

(declare-fun FStar.Int.add (Term Term Term) Term)

(declare-fun Tm_arrow_cbeba074d8c79f94519373cfde34463f () Term)
(declare-fun FStar.Int.add@tok () Term)


; </end encoding let add>


; <Start encoding val FStar.Int.add_underspec>

(declare-fun FStar.Int.add_underspec (Term Term Term) Term)
(declare-fun Tm_refine_7bd0fa444597c4ebd4664ae6a997600a (Term Term Term) Term)
(declare-fun Tm_arrow_5c387c335d6e6391b1c81e806fbecc03 () Term)
(declare-fun FStar.Int.add_underspec@tok () Term)


; </end encoding val FStar.Int.add_underspec>


; <Skipped #push-options "--initial_fuel 1 --max_fuel 1"/>


; <Start encoding let add_mod>

(declare-fun FStar.Int.add_mod (Term Term Term) Term)
(declare-fun Tm_arrow_18a34a79f38620fd3e207686d0d0d13e () Term)
(declare-fun FStar.Int.add_mod@tok () Term)

; </end encoding let add_mod>


; <Start encoding let sub>

(declare-fun FStar.Int.sub (Term Term Term) Term)

(declare-fun Tm_arrow_d5e0171e91c640344190e488b3c3a2c8 () Term)
(declare-fun FStar.Int.sub@tok () Term)


; </end encoding let sub>


; <Start encoding val FStar.Int.sub_underspec>

(declare-fun FStar.Int.sub_underspec (Term Term Term) Term)
(declare-fun Tm_refine_b4c298e8d79868eb1409c37bf0adba2a (Term Term Term) Term)
(declare-fun Tm_arrow_f42d521160539850f1993d34e8fc87c9 () Term)
(declare-fun FStar.Int.sub_underspec@tok () Term)


; </end encoding val FStar.Int.sub_underspec>


; <Start encoding let sub_mod>

(declare-fun FStar.Int.sub_mod (Term Term Term) Term)

(declare-fun FStar.Int.sub_mod@tok () Term)

; </end encoding let sub_mod>


; <Start encoding let mul>

(declare-fun FStar.Int.mul (Term Term Term) Term)

(declare-fun Tm_arrow_59f7075a28af88a37cc8d77ed622794d () Term)
(declare-fun FStar.Int.mul@tok () Term)


; </end encoding let mul>


; <Start encoding val FStar.Int.mul_underspec>

(declare-fun FStar.Int.mul_underspec (Term Term Term) Term)
(declare-fun Tm_refine_e0808d72dd3bcd98cbd025f677f0b52b (Term Term Term) Term)
(declare-fun Tm_arrow_c3825549d78bf3b47b1fc19cca6efb0a () Term)
(declare-fun FStar.Int.mul_underspec@tok () Term)


; </end encoding val FStar.Int.mul_underspec>


; <Start encoding let mul_mod>

(declare-fun FStar.Int.mul_mod (Term Term Term) Term)

(declare-fun FStar.Int.mul_mod@tok () Term)

; </end encoding let mul_mod>


; <Skipped #pop-options/>


; <Start encoding let div>

(declare-fun Tm_refine_83ac8ca0eae25a164d9f9c0d728fbff9 (Term) Term)
(declare-fun FStar.Int.div (Term Term Term) Term)

(declare-fun Tm_refine_70714641831ff35b8943074d85fc7551 (Term Term Term) Term)
(declare-fun Tm_arrow_59a1c11be2fac6a30b2acdbfbf1eda90 () Term)
(declare-fun FStar.Int.div@tok () Term)



; </end encoding let div>


; <Start encoding val FStar.Int.div_underspec>


(declare-fun FStar.Int.div_underspec (Term Term Term) Term)

(declare-fun Tm_refine_af4cbfe65dbbaeb55593b4625c2c5048 (Term Term Term) Term)
(declare-fun Tm_arrow_0f80d94a97a6b0663b1915a2060513cc () Term)
(declare-fun FStar.Int.div_underspec@tok () Term)


; </end encoding val FStar.Int.div_underspec>


; <Start encoding val FStar.Int.div_size>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.div_size (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.div_size@tok () Term)

; </end encoding val FStar.Int.div_size>


; <Start encoding let udiv>

(declare-fun Tm_refine_8506aeb4dd19f2072121aa1df21f1bb2 (Term) Term)

(declare-fun FStar.Int.udiv (Term Term Term) Term)



(declare-fun Tm_arrow_82b3f90612854f7c40f1bdc10bed000c () Term)
(declare-fun FStar.Int.udiv@tok () Term)




; </end encoding let udiv>


; <Start encoding let mod>


(declare-fun FStar.Int.mod (Term Term Term) Term)

(declare-fun Tm_arrow_d683be1bb1ee9de66cbbf189f68ec0e5 () Term)
(declare-fun FStar.Int.mod@tok () Term)


; </end encoding let mod>


; <Start encoding let eq>

(declare-fun FStar.Int.eq (Term Term Term) Term)
(declare-fun Tm_arrow_8a34ac1c572f737da4642094a6f8e213 () Term)
(declare-fun FStar.Int.eq@tok () Term)

; </end encoding let eq>


; <Start encoding let gt>

(declare-fun FStar.Int.gt (Term Term Term) Term)

(declare-fun FStar.Int.gt@tok () Term)

; </end encoding let gt>


; <Start encoding let gte>

(declare-fun FStar.Int.gte (Term Term Term) Term)

(declare-fun FStar.Int.gte@tok () Term)

; </end encoding let gte>


; <Start encoding let lt>

(declare-fun FStar.Int.lt (Term Term Term) Term)

(declare-fun FStar.Int.lt@tok () Term)

; </end encoding let lt>


; <Start encoding let lte>

(declare-fun FStar.Int.lte (Term Term Term) Term)

(declare-fun FStar.Int.lte@tok () Term)

; </end encoding let lte>


; <Start encoding let to_uint>

(declare-fun FStar.Int.to_uint (Term Term) Term)
(declare-fun Tm_arrow_3e678eb9a841c4f9b41c85aeb802f0f1 () Term)
(declare-fun FStar.Int.to_uint@tok () Term)

; </end encoding let to_uint>


; <Start encoding let from_uint>

(declare-fun FStar.Int.from_uint (Term Term) Term)
(declare-fun Tm_arrow_c31ea52198bde53869920a7d3bc4602c () Term)
(declare-fun FStar.Int.from_uint@tok () Term)

; </end encoding let from_uint>


; <Start encoding val FStar.Int.to_uint_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.to_uint_injective (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.to_uint_injective@tok () Term)

; </end encoding val FStar.Int.to_uint_injective>


; <Start encoding let to_int_t>

(declare-fun FStar.Int.to_int_t (Term Term) Term)
(declare-fun Tm_arrow_4814b4e3e94f328f65fd76f9d65943d4 () Term)
(declare-fun FStar.Int.to_int_t@tok () Term)

; </end encoding let to_int_t>


; <Start encoding let to_vec>

(declare-fun FStar.Int.to_vec (Term Term) Term)
(declare-fun Tm_arrow_45e09970c9488f8db22355eb21b4b697 () Term)
(declare-fun FStar.Int.to_vec@tok () Term)

; </end encoding let to_vec>


; <Start encoding let from_vec>

(declare-fun FStar.Int.from_vec (Term Term) Term)
(declare-fun Tm_arrow_82852c1e83761b67bc6fcca3c7b80d79 () Term)
(declare-fun FStar.Int.from_vec@tok () Term)

; </end encoding let from_vec>


; <Start encoding val FStar.Int.to_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.to_vec_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.to_vec_lemma_1@tok () Term)

; </end encoding val FStar.Int.to_vec_lemma_1>


; <Start encoding val FStar.Int.to_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.to_vec_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.to_vec_lemma_2@tok () Term)

; </end encoding val FStar.Int.to_vec_lemma_2>


; <Start encoding val FStar.Int.inverse_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.inverse_aux (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.inverse_aux@tok () Term)


; </end encoding val FStar.Int.inverse_aux>


; <Start encoding val FStar.Int.inverse_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.inverse_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.inverse_vec_lemma@tok () Term)

; </end encoding val FStar.Int.inverse_vec_lemma>


; <Start encoding val FStar.Int.inverse_num_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.inverse_num_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.inverse_num_lemma@tok () Term)

; </end encoding val FStar.Int.inverse_num_lemma>


; <Start encoding val FStar.Int.from_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.from_vec_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.from_vec_lemma_1@tok () Term)

; </end encoding val FStar.Int.from_vec_lemma_1>


; <Start encoding val FStar.Int.from_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.from_vec_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.from_vec_lemma_2@tok () Term)

; </end encoding val FStar.Int.from_vec_lemma_2>


; <Start encoding val FStar.Int.zero_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.zero_to_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.zero_to_vec_lemma@tok () Term)


; </end encoding val FStar.Int.zero_to_vec_lemma>


; <Start encoding val FStar.Int.zero_from_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.zero_from_vec_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.zero_from_vec_lemma@tok () Term)

; </end encoding val FStar.Int.zero_from_vec_lemma>


; <Start encoding val FStar.Int.one_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.one_to_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.one_to_vec_lemma@tok () Term)



; </end encoding val FStar.Int.one_to_vec_lemma>


; <Start encoding val FStar.Int.pow2_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.pow2_to_vec_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.pow2_to_vec_lemma@tok () Term)



; </end encoding val FStar.Int.pow2_to_vec_lemma>


; <Start encoding val FStar.Int.pow2_from_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.pow2_from_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.pow2_from_vec_lemma@tok () Term)
(declare-fun Tm_refine_b555e04c50662c1d4e406318a3bd8d8d (Term) Term)

; </end encoding val FStar.Int.pow2_from_vec_lemma>


; <Start encoding val FStar.Int.ones_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.ones_to_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.ones_to_vec_lemma@tok () Term)


; </end encoding val FStar.Int.ones_to_vec_lemma>


; <Start encoding val FStar.Int.ones_from_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.ones_from_vec_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.ones_from_vec_lemma@tok () Term)

; </end encoding val FStar.Int.ones_from_vec_lemma>


; <Start encoding let nth>


(declare-fun FStar.Int.nth (Term Term Term) Term)

(declare-fun Tm_arrow_4019956ce842311d665dc67ac9fd8b34 () Term)
(declare-fun FStar.Int.nth@tok () Term)


; </end encoding let nth>


; <Start encoding val FStar.Int.nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.nth_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.nth_lemma@tok () Term)

; </end encoding val FStar.Int.nth_lemma>


; <Start encoding val FStar.Int.zero_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.zero_nth_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.zero_nth_lemma@tok () Term)


; </end encoding val FStar.Int.zero_nth_lemma>


; <Start encoding val FStar.Int.one_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.one_nth_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.one_nth_lemma@tok () Term)



; </end encoding val FStar.Int.one_nth_lemma>


; <Start encoding val FStar.Int.ones_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.ones_nth_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.ones_nth_lemma@tok () Term)


; </end encoding val FStar.Int.ones_nth_lemma>


; <Start encoding let logand>

(declare-fun FStar.Int.logand (Term Term Term) Term)

(declare-fun FStar.Int.logand@tok () Term)

; </end encoding let logand>


; <Start encoding let logxor>

(declare-fun FStar.Int.logxor (Term Term Term) Term)

(declare-fun FStar.Int.logxor@tok () Term)

; </end encoding let logxor>


; <Start encoding let logor>

(declare-fun FStar.Int.logor (Term Term Term) Term)

(declare-fun FStar.Int.logor@tok () Term)

; </end encoding let logor>


; <Start encoding let lognot>

(declare-fun FStar.Int.lognot (Term Term) Term)

(declare-fun FStar.Int.lognot@tok () Term)

; </end encoding let lognot>


; <Start encoding val FStar.Int.logand_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.logand_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.logand_definition@tok () Term)


; </end encoding val FStar.Int.logand_definition>


; <Start encoding val FStar.Int.logxor_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.logxor_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.logxor_definition@tok () Term)


; </end encoding val FStar.Int.logxor_definition>


; <Start encoding val FStar.Int.logor_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.logor_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.logor_definition@tok () Term)


; </end encoding val FStar.Int.logor_definition>


; <Start encoding val FStar.Int.lognot_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.lognot_definition (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.lognot_definition@tok () Term)


; </end encoding val FStar.Int.lognot_definition>


; <Start encoding let minus>


(declare-fun FStar.Int.minus (Term Term) Term)

(declare-fun Tm_arrow_04cc0f7bdc56c0cf812e46ad027a361f () Term)
(declare-fun FStar.Int.minus@tok () Term)


; </end encoding let minus>


; <Start encoding val FStar.Int.logand_commutative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.logand_commutative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.logand_commutative@tok () Term)

; </end encoding val FStar.Int.logand_commutative>


; <Start encoding val FStar.Int.logand_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.logand_associative (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.logand_associative@tok () Term)

; </end encoding val FStar.Int.logand_associative>


; <Start encoding val FStar.Int.logand_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.logand_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.logand_self@tok () Term)

; </end encoding val FStar.Int.logand_self>


; <Start encoding val FStar.Int.logand_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.logand_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.logand_lemma_1@tok () Term)

; </end encoding val FStar.Int.logand_lemma_1>


; <Start encoding val FStar.Int.logand_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.logand_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.logand_lemma_2@tok () Term)

; </end encoding val FStar.Int.logand_lemma_2>


; <Start encoding val FStar.Int.sign_bit_negative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.sign_bit_negative (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.sign_bit_negative@tok () Term)

; </end encoding val FStar.Int.sign_bit_negative>


; <Start encoding val FStar.Int.sign_bit_positive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.sign_bit_positive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.sign_bit_positive@tok () Term)

; </end encoding val FStar.Int.sign_bit_positive>


; <Start encoding val FStar.Int.logand_pos_le>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.logand_pos_le (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.logand_pos_le@tok () Term)

; </end encoding val FStar.Int.logand_pos_le>


; <Start encoding val FStar.Int.logand_pow2_minus_one>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.logand_pow2_minus_one (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.logand_pow2_minus_one@tok () Term)

; </end encoding val FStar.Int.logand_pow2_minus_one>


; <Start encoding val FStar.Int.logand_max>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.logand_max (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.logand_max@tok () Term)

; </end encoding val FStar.Int.logand_max>


; <Start encoding val FStar.Int.logxor_commutative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.logxor_commutative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.logxor_commutative@tok () Term)

; </end encoding val FStar.Int.logxor_commutative>


; <Start encoding val FStar.Int.logxor_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.logxor_associative (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.logxor_associative@tok () Term)

; </end encoding val FStar.Int.logxor_associative>


; <Start encoding val FStar.Int.logxor_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.logxor_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.logxor_self@tok () Term)

; </end encoding val FStar.Int.logxor_self>


; <Start encoding val FStar.Int.logxor_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.logxor_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.logxor_lemma_1@tok () Term)

; </end encoding val FStar.Int.logxor_lemma_1>


; <Start encoding val FStar.Int.logxor_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.logxor_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.logxor_lemma_2@tok () Term)

; </end encoding val FStar.Int.logxor_lemma_2>


; <Start encoding val FStar.Int.logxor_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.logxor_inv (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.logxor_inv@tok () Term)

; </end encoding val FStar.Int.logxor_inv>


; <Start encoding val FStar.Int.logxor_neq_nonzero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.logxor_neq_nonzero (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.logxor_neq_nonzero@tok () Term)

; </end encoding val FStar.Int.logxor_neq_nonzero>


; <Start encoding val FStar.Int.lognot_negative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.lognot_negative (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.lognot_negative@tok () Term)

; </end encoding val FStar.Int.lognot_negative>


; <Start encoding let shift_left>

(declare-fun Tm_refine_f9945c9851ba67924155357268d171eb (Term) Term)
(declare-fun FStar.Int.shift_left (Term Term Term) Term)

(declare-fun Tm_arrow_855fa52a66bb6d9af33de248be8e1a9a () Term)
(declare-fun FStar.Int.shift_left@tok () Term)


; </end encoding let shift_left>


; <Start encoding let shift_right>


(declare-fun FStar.Int.shift_right (Term Term Term) Term)


(declare-fun FStar.Int.shift_right@tok () Term)


; </end encoding let shift_right>


; <Start encoding let shift_arithmetic_right>

(declare-fun FStar.Int.shift_arithmetic_right (Term Term Term) Term)
(declare-fun Tm_arrow_f565aa7121c91c2f8ce9f41727c7b7ca () Term)
(declare-fun FStar.Int.shift_arithmetic_right@tok () Term)

; </end encoding let shift_arithmetic_right>


; <Start encoding val FStar.Int.shift_left_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.shift_left_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.shift_left_lemma_1@tok () Term)



; </end encoding val FStar.Int.shift_left_lemma_1>


; <Start encoding val FStar.Int.shift_left_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.shift_left_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.shift_left_lemma_2@tok () Term)



; </end encoding val FStar.Int.shift_left_lemma_2>


; <Start encoding val FStar.Int.shift_left_value_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.shift_left_value_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.shift_left_value_lemma@tok () Term)


; </end encoding val FStar.Int.shift_left_value_lemma>


; <Start encoding val FStar.Int.shift_right_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.shift_right_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.shift_right_lemma_1@tok () Term)



; </end encoding val FStar.Int.shift_right_lemma_1>


; <Start encoding val FStar.Int.shift_right_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.shift_right_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.shift_right_lemma_2@tok () Term)



; </end encoding val FStar.Int.shift_right_lemma_2>


; <Start encoding val FStar.Int.shift_arithmetic_right_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.shift_arithmetic_right_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.shift_arithmetic_right_lemma_1@tok () Term)


; </end encoding val FStar.Int.shift_arithmetic_right_lemma_1>


; <Start encoding val FStar.Int.shift_arithmetic_right_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.shift_arithmetic_right_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.shift_arithmetic_right_lemma_2@tok () Term)


; </end encoding val FStar.Int.shift_arithmetic_right_lemma_2>


; End Externals for interface FStar.Int


; Externals for interface FStar.Int64


; <Start encoding let n>

(declare-fun FStar.Int64.n (Dummy_sort) Term)

; </end encoding let n>


; <Skipped #set-options "--max_fuel 0 --max_ifuel 0"/>


; <Start encoding val FStar.Int64.t>

(declare-fun FStar.Int64.t (Dummy_sort) Term)

; </end encoding val FStar.Int64.t>


; <Start encoding val FStar.Int64.v>

(declare-fun FStar.Int64.v (Term) Term)
(declare-fun Tm_arrow_50f88cfd3e9adc79ecaea80d24eaf881 () Term)
(declare-fun FStar.Int64.v@tok () Term)

; </end encoding val FStar.Int64.v>


; <Start encoding val FStar.Int64.int_to_t>

(declare-fun FStar.Int64.int_to_t (Term) Term)
(declare-fun Tm_refine_20b9727bfb368ca1ad6e64242df43812 (Term) Term)
(declare-fun Tm_arrow_9aacd4c51d388dea7f57e52893b15954 () Term)
(declare-fun FStar.Int64.int_to_t@tok () Term)


; </end encoding val FStar.Int64.int_to_t>


; <Start encoding val FStar.Int64.uv_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int64.uv_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int64.uv_inv@tok () Term)

; </end encoding val FStar.Int64.uv_inv>


; <Start encoding val FStar.Int64.vu_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int64.vu_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int64.vu_inv@tok () Term)

; </end encoding val FStar.Int64.vu_inv>


; <Start encoding val FStar.Int64.v_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int64.v_inj (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int64.v_inj@tok () Term)

; </end encoding val FStar.Int64.v_inj>


; <Start encoding val FStar.Int64.zero>

(declare-fun FStar.Int64.zero (Dummy_sort) Term)
(declare-fun Tm_refine_f34cee8327c62fd7612c44061ac10fdb () Term)


; </end encoding val FStar.Int64.zero>


; <Start encoding val FStar.Int64.one>

(declare-fun FStar.Int64.one (Dummy_sort) Term)
(declare-fun Tm_refine_203e9273a4f8fdae13114373d4d62bbf () Term)


; </end encoding val FStar.Int64.one>


; <Start encoding val FStar.Int64.add>

(declare-fun FStar.Int64.add (Term Term) Term)
(declare-fun Tm_refine_cff33b8d55d1ab8b8408d67ea53401d3 (Term Term) Term)
(declare-fun Tm_arrow_ed83283a33f866113fbd25895b9b8d2d () Term)
(declare-fun FStar.Int64.add@tok () Term)


; </end encoding val FStar.Int64.add>


; <Start encoding val FStar.Int64.sub>

(declare-fun FStar.Int64.sub (Term Term) Term)
(declare-fun Tm_refine_1fc9ac3a217b8d21cc2c0d75816a6c74 (Term Term) Term)
(declare-fun Tm_arrow_4542deddf7766ec0693cc853fcf4efcd () Term)
(declare-fun FStar.Int64.sub@tok () Term)


; </end encoding val FStar.Int64.sub>


; <Start encoding val FStar.Int64.mul>

(declare-fun FStar.Int64.mul (Term Term) Term)
(declare-fun Tm_refine_37c0725a54ced297933377446e859b55 (Term Term) Term)
(declare-fun Tm_arrow_42cc16185f0281f66fd3c38cb2ce966d () Term)
(declare-fun FStar.Int64.mul@tok () Term)


; </end encoding val FStar.Int64.mul>


; <Start encoding val FStar.Int64.div>

(declare-fun Tm_refine_628f456abb4ff7ec3d24a18ea94ac133 () Term)
(declare-fun FStar.Int64.div (Term Term) Term)

(declare-fun Tm_refine_a5642a7a89d263d94fde9c889b795c19 (Term Term) Term)
(declare-fun Tm_arrow_c45424883a6239e4d5ed622479d0e2c2 () Term)
(declare-fun FStar.Int64.div@tok () Term)


; </end encoding val FStar.Int64.div>


; <Start encoding val FStar.Int64.rem>


(declare-fun FStar.Int64.rem (Term Term) Term)

(declare-fun Tm_refine_1d7b4ef1b74a345016b65edcb3a0b11c (Term Term) Term)
(declare-fun Tm_arrow_b094b2204766bbf210faf3515dac5edb () Term)
(declare-fun FStar.Int64.rem@tok () Term)


; </end encoding val FStar.Int64.rem>


; <Start encoding val FStar.Int64.logand>

(declare-fun FStar.Int64.logand (Term Term) Term)
(declare-fun Tm_refine_0fe072140b6cab185956764b6b2b5100 (Term Term) Term)
(declare-fun Tm_arrow_0f24127e58cdc78e646ac8e9ce1e220b () Term)
(declare-fun FStar.Int64.logand@tok () Term)


; </end encoding val FStar.Int64.logand>


; <Start encoding val FStar.Int64.logxor>

(declare-fun FStar.Int64.logxor (Term Term) Term)
(declare-fun Tm_refine_e2357e15859202c1b74739b99f268c77 (Term Term) Term)
(declare-fun Tm_arrow_2b608ce5a03451a1a703bfa96c9de841 () Term)
(declare-fun FStar.Int64.logxor@tok () Term)


; </end encoding val FStar.Int64.logxor>


; <Start encoding val FStar.Int64.logor>

(declare-fun FStar.Int64.logor (Term Term) Term)
(declare-fun Tm_refine_0d502fb451739d594ffb2dde19acb8c7 (Term Term) Term)
(declare-fun Tm_arrow_f2d6223e577fd2c0dc4882b4e94da2d1 () Term)
(declare-fun FStar.Int64.logor@tok () Term)


; </end encoding val FStar.Int64.logor>


; <Start encoding val FStar.Int64.lognot>

(declare-fun FStar.Int64.lognot (Term) Term)
(declare-fun Tm_refine_09cdf91263ea29addfb21cf90d99d38a (Term) Term)
(declare-fun Tm_arrow_d446e9a4954555b21a6b121387f388f7 () Term)
(declare-fun FStar.Int64.lognot@tok () Term)


; </end encoding val FStar.Int64.lognot>


; <Start encoding val FStar.Int64.shift_right>

(declare-fun FStar.Int64.shift_right (Term Term) Term)
(declare-fun Tm_refine_8a1048adcc7173ce6ba343120c56fc30 (Term Term) Term)
(declare-fun Tm_arrow_460456e909b6fc3f1db6426fd53c8cb8 () Term)
(declare-fun FStar.Int64.shift_right@tok () Term)


; </end encoding val FStar.Int64.shift_right>


; <Start encoding val FStar.Int64.shift_left>

(declare-fun FStar.Int64.shift_left (Term Term) Term)
(declare-fun Tm_refine_36ce14007f3fdeef8a04301aa925b2cd (Term Term) Term)
(declare-fun Tm_arrow_af31e9f4e4b00e004d480198352f97f7 () Term)
(declare-fun FStar.Int64.shift_left@tok () Term)


; </end encoding val FStar.Int64.shift_left>


; <Start encoding val FStar.Int64.shift_arithmetic_right>

(declare-fun FStar.Int64.shift_arithmetic_right (Term Term) Term)
(declare-fun Tm_refine_0edc24855031dc65d4a9dbb9e8e84d13 (Term Term) Term)
(declare-fun Tm_arrow_b8898305f4bc94ede71031fc934596bd () Term)
(declare-fun FStar.Int64.shift_arithmetic_right@tok () Term)


; </end encoding val FStar.Int64.shift_arithmetic_right>


; <Start encoding let eq>

(declare-fun FStar.Int64.eq (Term Term) Term)
(declare-fun Tm_arrow_da34eb90e0110da92e0998be30c252a6 () Term)
(declare-fun FStar.Int64.eq@tok () Term)

; </end encoding let eq>


; <Start encoding let gt>

(declare-fun FStar.Int64.gt (Term Term) Term)

(declare-fun FStar.Int64.gt@tok () Term)

; </end encoding let gt>


; <Start encoding let gte>

(declare-fun FStar.Int64.gte (Term Term) Term)

(declare-fun FStar.Int64.gte@tok () Term)

; </end encoding let gte>


; <Start encoding let lt>

(declare-fun FStar.Int64.lt (Term Term) Term)

(declare-fun FStar.Int64.lt@tok () Term)

; </end encoding let lt>


; <Start encoding let lte>

(declare-fun FStar.Int64.lte (Term Term) Term)

(declare-fun FStar.Int64.lte@tok () Term)

; </end encoding let lte>


; <Start encoding let op_Plus_Hat>

(declare-fun FStar.Int64.op_Plus_Hat (Term Term) Term)


(declare-fun FStar.Int64.op_Plus_Hat@tok () Term)


; </end encoding let op_Plus_Hat>


; <Start encoding let op_Subtraction_Hat>

(declare-fun FStar.Int64.op_Subtraction_Hat (Term Term) Term)


(declare-fun FStar.Int64.op_Subtraction_Hat@tok () Term)


; </end encoding let op_Subtraction_Hat>


; <Start encoding let op_Star_Hat>

(declare-fun FStar.Int64.op_Star_Hat (Term Term) Term)


(declare-fun FStar.Int64.op_Star_Hat@tok () Term)


; </end encoding let op_Star_Hat>


; <Start encoding let op_Slash_Hat>


(declare-fun FStar.Int64.op_Slash_Hat (Term Term) Term)



(declare-fun FStar.Int64.op_Slash_Hat@tok () Term)



; </end encoding let op_Slash_Hat>


; <Start encoding let op_Percent_Hat>


(declare-fun FStar.Int64.op_Percent_Hat (Term Term) Term)



(declare-fun FStar.Int64.op_Percent_Hat@tok () Term)



; </end encoding let op_Percent_Hat>


; <Start encoding let op_Hat_Hat>

(declare-fun FStar.Int64.op_Hat_Hat (Term Term) Term)


(declare-fun FStar.Int64.op_Hat_Hat@tok () Term)


; </end encoding let op_Hat_Hat>


; <Start encoding let op_Amp_Hat>

(declare-fun FStar.Int64.op_Amp_Hat (Term Term) Term)


(declare-fun FStar.Int64.op_Amp_Hat@tok () Term)


; </end encoding let op_Amp_Hat>


; <Start encoding let op_Bar_Hat>

(declare-fun FStar.Int64.op_Bar_Hat (Term Term) Term)


(declare-fun FStar.Int64.op_Bar_Hat@tok () Term)


; </end encoding let op_Bar_Hat>


; <Start encoding let op_Less_Less_Hat>

(declare-fun FStar.Int64.op_Less_Less_Hat (Term Term) Term)


(declare-fun FStar.Int64.op_Less_Less_Hat@tok () Term)


; </end encoding let op_Less_Less_Hat>


; <Start encoding let op_Greater_Greater_Hat>

(declare-fun FStar.Int64.op_Greater_Greater_Hat (Term Term) Term)


(declare-fun FStar.Int64.op_Greater_Greater_Hat@tok () Term)


; </end encoding let op_Greater_Greater_Hat>


; <Start encoding let op_Greater_Greater_Greater_Hat>

(declare-fun FStar.Int64.op_Greater_Greater_Greater_Hat (Term Term) Term)


(declare-fun FStar.Int64.op_Greater_Greater_Greater_Hat@tok () Term)


; </end encoding let op_Greater_Greater_Greater_Hat>


; <Start encoding let op_Equals_Hat>

(declare-fun FStar.Int64.op_Equals_Hat (Term Term) Term)

(declare-fun FStar.Int64.op_Equals_Hat@tok () Term)

; </end encoding let op_Equals_Hat>


; <Start encoding let op_Greater_Hat>

(declare-fun FStar.Int64.op_Greater_Hat (Term Term) Term)

(declare-fun FStar.Int64.op_Greater_Hat@tok () Term)

; </end encoding let op_Greater_Hat>


; <Start encoding let op_Greater_Equals_Hat>

(declare-fun FStar.Int64.op_Greater_Equals_Hat (Term Term) Term)

(declare-fun FStar.Int64.op_Greater_Equals_Hat@tok () Term)

; </end encoding let op_Greater_Equals_Hat>


; <Start encoding let op_Less_Hat>

(declare-fun FStar.Int64.op_Less_Hat (Term Term) Term)

(declare-fun FStar.Int64.op_Less_Hat@tok () Term)

; </end encoding let op_Less_Hat>


; <Start encoding let op_Less_Equals_Hat>

(declare-fun FStar.Int64.op_Less_Equals_Hat (Term Term) Term)

(declare-fun FStar.Int64.op_Less_Equals_Hat@tok () Term)

; </end encoding let op_Less_Equals_Hat>


; <Start encoding let ct_abs>

(declare-fun Tm_refine_09e0d51b082ead211eb10bd8852b815a () Term)
(declare-fun FStar.Int64.ct_abs (Term) Term)

(declare-fun Tm_refine_7fa122cebddb86b486e24aaafbe2ddf4 (Term) Term)
(declare-fun Tm_arrow_160d8d6d739ab631daa29edaa7550b74 () Term)
(declare-fun FStar.Int64.ct_abs@tok () Term)



; </end encoding let ct_abs>


; <Start encoding val FStar.Int64.to_string>

(declare-fun FStar.Int64.to_string (Term) Term)
(declare-fun Tm_arrow_30afe33eb03c92a72e5102bbb0499845 () Term)
(declare-fun FStar.Int64.to_string@tok () Term)

; </end encoding val FStar.Int64.to_string>


; <Start encoding val FStar.Int64.of_string>

(declare-fun FStar.Int64.of_string (Term) Term)
(declare-fun Tm_arrow_03a93f86f13501f75297c43a6aba4fd8 () Term)
(declare-fun FStar.Int64.of_string@tok () Term)

; </end encoding val FStar.Int64.of_string>


; <Skipped #set-options "--admit_smt_queries true"/>


; <Start encoding let __int_to_t>

(declare-fun FStar.Int64.__int_to_t (Term) Term)
(declare-fun Tm_arrow_737f306dc84ebb26e78501a84ed111e0 () Term)
(declare-fun FStar.Int64.__int_to_t@tok () Term)

; </end encoding let __int_to_t>


; <Skipped #reset-options/>


; End Externals for interface FStar.Int64


; Externals for interface FStar.Int32


; <Start encoding let n>

(declare-fun FStar.Int32.n (Dummy_sort) Term)

; </end encoding let n>


; <Skipped #set-options "--max_fuel 0 --max_ifuel 0"/>


; <Start encoding val FStar.Int32.t>

(declare-fun FStar.Int32.t (Dummy_sort) Term)

; </end encoding val FStar.Int32.t>


; <Start encoding val FStar.Int32.v>

(declare-fun FStar.Int32.v (Term) Term)
(declare-fun Tm_arrow_f4bf94df4bd6f39905f23de9668012e4 () Term)
(declare-fun FStar.Int32.v@tok () Term)

; </end encoding val FStar.Int32.v>


; <Start encoding val FStar.Int32.int_to_t>

(declare-fun FStar.Int32.int_to_t (Term) Term)
(declare-fun Tm_refine_627e9f1cc724efa294bbc10092665eb4 (Term) Term)
(declare-fun Tm_arrow_fe360e36795474927c4df051072b7c84 () Term)
(declare-fun FStar.Int32.int_to_t@tok () Term)


; </end encoding val FStar.Int32.int_to_t>


; <Start encoding val FStar.Int32.uv_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int32.uv_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int32.uv_inv@tok () Term)

; </end encoding val FStar.Int32.uv_inv>


; <Start encoding val FStar.Int32.vu_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int32.vu_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int32.vu_inv@tok () Term)

; </end encoding val FStar.Int32.vu_inv>


; <Start encoding val FStar.Int32.v_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int32.v_inj (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int32.v_inj@tok () Term)

; </end encoding val FStar.Int32.v_inj>


; <Start encoding val FStar.Int32.zero>

(declare-fun FStar.Int32.zero (Dummy_sort) Term)
(declare-fun Tm_refine_4b27ad679322c7269e5669f5b7ea65d7 () Term)


; </end encoding val FStar.Int32.zero>


; <Start encoding val FStar.Int32.one>

(declare-fun FStar.Int32.one (Dummy_sort) Term)
(declare-fun Tm_refine_16861580effb696f35863717c1a89e86 () Term)


; </end encoding val FStar.Int32.one>


; <Start encoding val FStar.Int32.add>

(declare-fun FStar.Int32.add (Term Term) Term)
(declare-fun Tm_refine_5aa5ab11c31de0febf935305a5c980c9 (Term Term) Term)
(declare-fun Tm_arrow_1ae2a1cb7e3b9275ba73e0391a268c58 () Term)
(declare-fun FStar.Int32.add@tok () Term)


; </end encoding val FStar.Int32.add>


; <Start encoding val FStar.Int32.sub>

(declare-fun FStar.Int32.sub (Term Term) Term)
(declare-fun Tm_refine_2370a76276b3eaf034dd2a6c193ec479 (Term Term) Term)
(declare-fun Tm_arrow_3f0cd0a55749dce187a8b0625a84b969 () Term)
(declare-fun FStar.Int32.sub@tok () Term)


; </end encoding val FStar.Int32.sub>


; <Start encoding val FStar.Int32.mul>

(declare-fun FStar.Int32.mul (Term Term) Term)
(declare-fun Tm_refine_b2da501eb6d7b3b17717277c72cd3d33 (Term Term) Term)
(declare-fun Tm_arrow_a8520b13e74a8db37464ccab702fc4d8 () Term)
(declare-fun FStar.Int32.mul@tok () Term)


; </end encoding val FStar.Int32.mul>


; <Start encoding val FStar.Int32.div>

(declare-fun Tm_refine_9961d54ea871d3cceb9a869af9f4caf7 () Term)
(declare-fun FStar.Int32.div (Term Term) Term)

(declare-fun Tm_refine_10c5468be26c345f983216e2f4a2830e (Term Term) Term)
(declare-fun Tm_arrow_e4982050523b30538ddc26f6d929adaa () Term)
(declare-fun FStar.Int32.div@tok () Term)


; </end encoding val FStar.Int32.div>


; <Start encoding val FStar.Int32.rem>


(declare-fun FStar.Int32.rem (Term Term) Term)

(declare-fun Tm_refine_923e81a1f108f9949dc0543f2627072f (Term Term) Term)
(declare-fun Tm_arrow_b3f1d49408f6546fc11f91d422dabe23 () Term)
(declare-fun FStar.Int32.rem@tok () Term)


; </end encoding val FStar.Int32.rem>


; <Start encoding val FStar.Int32.logand>

(declare-fun FStar.Int32.logand (Term Term) Term)
(declare-fun Tm_refine_6866b028a4b89e77530792ce38231111 (Term Term) Term)
(declare-fun Tm_arrow_a653d9f76ea6ba694062a5cbf0e017cf () Term)
(declare-fun FStar.Int32.logand@tok () Term)


; </end encoding val FStar.Int32.logand>


; <Start encoding val FStar.Int32.logxor>

(declare-fun FStar.Int32.logxor (Term Term) Term)
(declare-fun Tm_refine_becfe5da95f1aa4ee2ce8bcb219c8d8b (Term Term) Term)
(declare-fun Tm_arrow_4e701446c0289f2c818a71c60cde3590 () Term)
(declare-fun FStar.Int32.logxor@tok () Term)


; </end encoding val FStar.Int32.logxor>


; <Start encoding val FStar.Int32.logor>

(declare-fun FStar.Int32.logor (Term Term) Term)
(declare-fun Tm_refine_0353e025954e9364168f29e3769e4cb4 (Term Term) Term)
(declare-fun Tm_arrow_01dedda34d05d39141cd218b604eb3c0 () Term)
(declare-fun FStar.Int32.logor@tok () Term)


; </end encoding val FStar.Int32.logor>


; <Start encoding val FStar.Int32.lognot>

(declare-fun FStar.Int32.lognot (Term) Term)
(declare-fun Tm_refine_353248002d2ca4cf50785f111f47157a (Term) Term)
(declare-fun Tm_arrow_f1b1fe05c7d8b62f9fe5e829c0ada0fd () Term)
(declare-fun FStar.Int32.lognot@tok () Term)


; </end encoding val FStar.Int32.lognot>


; <Start encoding val FStar.Int32.shift_right>

(declare-fun FStar.Int32.shift_right (Term Term) Term)
(declare-fun Tm_refine_a5bfe2c071f769c34fb186b3c6f025bc (Term Term) Term)
(declare-fun Tm_arrow_b3ba4dcd7dc367eb89868fa161b4e04d () Term)
(declare-fun FStar.Int32.shift_right@tok () Term)


; </end encoding val FStar.Int32.shift_right>


; <Start encoding val FStar.Int32.shift_left>

(declare-fun FStar.Int32.shift_left (Term Term) Term)
(declare-fun Tm_refine_f042c9816d442898756db486f43c46c5 (Term Term) Term)
(declare-fun Tm_arrow_ac724b30d6ffb2633cc66987d5660504 () Term)
(declare-fun FStar.Int32.shift_left@tok () Term)


; </end encoding val FStar.Int32.shift_left>


; <Start encoding val FStar.Int32.shift_arithmetic_right>

(declare-fun FStar.Int32.shift_arithmetic_right (Term Term) Term)
(declare-fun Tm_refine_3465cdfd5e573e06047a897b8d2ec713 (Term Term) Term)
(declare-fun Tm_arrow_56e16e1b27df5db49461580069a4b2e8 () Term)
(declare-fun FStar.Int32.shift_arithmetic_right@tok () Term)


; </end encoding val FStar.Int32.shift_arithmetic_right>


; <Start encoding let eq>

(declare-fun FStar.Int32.eq (Term Term) Term)
(declare-fun Tm_arrow_4229113e57d40c359ccaebc3146f28d8 () Term)
(declare-fun FStar.Int32.eq@tok () Term)

; </end encoding let eq>


; <Start encoding let gt>

(declare-fun FStar.Int32.gt (Term Term) Term)

(declare-fun FStar.Int32.gt@tok () Term)

; </end encoding let gt>


; <Start encoding let gte>

(declare-fun FStar.Int32.gte (Term Term) Term)

(declare-fun FStar.Int32.gte@tok () Term)

; </end encoding let gte>


; <Start encoding let lt>

(declare-fun FStar.Int32.lt (Term Term) Term)

(declare-fun FStar.Int32.lt@tok () Term)

; </end encoding let lt>


; <Start encoding let lte>

(declare-fun FStar.Int32.lte (Term Term) Term)

(declare-fun FStar.Int32.lte@tok () Term)

; </end encoding let lte>


; <Start encoding let op_Plus_Hat>

(declare-fun FStar.Int32.op_Plus_Hat (Term Term) Term)


(declare-fun FStar.Int32.op_Plus_Hat@tok () Term)


; </end encoding let op_Plus_Hat>


; <Start encoding let op_Subtraction_Hat>

(declare-fun FStar.Int32.op_Subtraction_Hat (Term Term) Term)


(declare-fun FStar.Int32.op_Subtraction_Hat@tok () Term)


; </end encoding let op_Subtraction_Hat>


; <Start encoding let op_Star_Hat>

(declare-fun FStar.Int32.op_Star_Hat (Term Term) Term)


(declare-fun FStar.Int32.op_Star_Hat@tok () Term)


; </end encoding let op_Star_Hat>


; <Start encoding let op_Slash_Hat>


(declare-fun FStar.Int32.op_Slash_Hat (Term Term) Term)



(declare-fun FStar.Int32.op_Slash_Hat@tok () Term)



; </end encoding let op_Slash_Hat>


; <Start encoding let op_Percent_Hat>


(declare-fun FStar.Int32.op_Percent_Hat (Term Term) Term)



(declare-fun FStar.Int32.op_Percent_Hat@tok () Term)



; </end encoding let op_Percent_Hat>


; <Start encoding let op_Hat_Hat>

(declare-fun FStar.Int32.op_Hat_Hat (Term Term) Term)


(declare-fun FStar.Int32.op_Hat_Hat@tok () Term)


; </end encoding let op_Hat_Hat>


; <Start encoding let op_Amp_Hat>

(declare-fun FStar.Int32.op_Amp_Hat (Term Term) Term)


(declare-fun FStar.Int32.op_Amp_Hat@tok () Term)


; </end encoding let op_Amp_Hat>


; <Start encoding let op_Bar_Hat>

(declare-fun FStar.Int32.op_Bar_Hat (Term Term) Term)


(declare-fun FStar.Int32.op_Bar_Hat@tok () Term)


; </end encoding let op_Bar_Hat>


; <Start encoding let op_Less_Less_Hat>

(declare-fun FStar.Int32.op_Less_Less_Hat (Term Term) Term)


(declare-fun FStar.Int32.op_Less_Less_Hat@tok () Term)


; </end encoding let op_Less_Less_Hat>


; <Start encoding let op_Greater_Greater_Hat>

(declare-fun FStar.Int32.op_Greater_Greater_Hat (Term Term) Term)


(declare-fun FStar.Int32.op_Greater_Greater_Hat@tok () Term)


; </end encoding let op_Greater_Greater_Hat>


; <Start encoding let op_Greater_Greater_Greater_Hat>

(declare-fun FStar.Int32.op_Greater_Greater_Greater_Hat (Term Term) Term)


(declare-fun FStar.Int32.op_Greater_Greater_Greater_Hat@tok () Term)


; </end encoding let op_Greater_Greater_Greater_Hat>


; <Start encoding let op_Equals_Hat>

(declare-fun FStar.Int32.op_Equals_Hat (Term Term) Term)

(declare-fun FStar.Int32.op_Equals_Hat@tok () Term)

; </end encoding let op_Equals_Hat>


; <Start encoding let op_Greater_Hat>

(declare-fun FStar.Int32.op_Greater_Hat (Term Term) Term)

(declare-fun FStar.Int32.op_Greater_Hat@tok () Term)

; </end encoding let op_Greater_Hat>


; <Start encoding let op_Greater_Equals_Hat>

(declare-fun FStar.Int32.op_Greater_Equals_Hat (Term Term) Term)

(declare-fun FStar.Int32.op_Greater_Equals_Hat@tok () Term)

; </end encoding let op_Greater_Equals_Hat>


; <Start encoding let op_Less_Hat>

(declare-fun FStar.Int32.op_Less_Hat (Term Term) Term)

(declare-fun FStar.Int32.op_Less_Hat@tok () Term)

; </end encoding let op_Less_Hat>


; <Start encoding let op_Less_Equals_Hat>

(declare-fun FStar.Int32.op_Less_Equals_Hat (Term Term) Term)

(declare-fun FStar.Int32.op_Less_Equals_Hat@tok () Term)

; </end encoding let op_Less_Equals_Hat>


; <Start encoding let ct_abs>

(declare-fun Tm_refine_853c92b1b57deba9861afab3b88011fd () Term)
(declare-fun FStar.Int32.ct_abs (Term) Term)

(declare-fun Tm_refine_4832a4dd6f6c8b4bcd43cf5fa229de92 (Term) Term)
(declare-fun Tm_arrow_da79825446e7a53ed4e2199d118751df () Term)
(declare-fun FStar.Int32.ct_abs@tok () Term)



; </end encoding let ct_abs>


; <Start encoding val FStar.Int32.to_string>

(declare-fun FStar.Int32.to_string (Term) Term)
(declare-fun Tm_arrow_29acd599eab236ba0b201e41bc06d1d3 () Term)
(declare-fun FStar.Int32.to_string@tok () Term)

; </end encoding val FStar.Int32.to_string>


; <Start encoding val FStar.Int32.of_string>

(declare-fun FStar.Int32.of_string (Term) Term)
(declare-fun Tm_arrow_faca34681b3b6bb74518267d4cc90946 () Term)
(declare-fun FStar.Int32.of_string@tok () Term)

; </end encoding val FStar.Int32.of_string>


; <Skipped #set-options "--admit_smt_queries true"/>


; <Start encoding let __int_to_t>

(declare-fun FStar.Int32.__int_to_t (Term) Term)
(declare-fun Tm_arrow_3b2fe9363a51dee88398c671861cfa75 () Term)
(declare-fun FStar.Int32.__int_to_t@tok () Term)

; </end encoding let __int_to_t>


; <Skipped #reset-options/>


; End Externals for interface FStar.Int32


; Externals for interface FStar.Int16


; <Start encoding let n>

(declare-fun FStar.Int16.n (Dummy_sort) Term)

; </end encoding let n>


; <Skipped #set-options "--max_fuel 0 --max_ifuel 0"/>


; <Start encoding val FStar.Int16.t>

(declare-fun FStar.Int16.t (Dummy_sort) Term)

; </end encoding val FStar.Int16.t>


; <Start encoding val FStar.Int16.v>

(declare-fun FStar.Int16.v (Term) Term)
(declare-fun Tm_arrow_c11f275a21790bc90c0c80fe543f51f5 () Term)
(declare-fun FStar.Int16.v@tok () Term)

; </end encoding val FStar.Int16.v>


; <Start encoding val FStar.Int16.int_to_t>

(declare-fun FStar.Int16.int_to_t (Term) Term)
(declare-fun Tm_refine_3d5525dd50da96925771e0566aa2cb99 (Term) Term)
(declare-fun Tm_arrow_e7cfb34c4da3848085c133e643ce26ee () Term)
(declare-fun FStar.Int16.int_to_t@tok () Term)


; </end encoding val FStar.Int16.int_to_t>


; <Start encoding val FStar.Int16.uv_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int16.uv_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int16.uv_inv@tok () Term)

; </end encoding val FStar.Int16.uv_inv>


; <Start encoding val FStar.Int16.vu_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int16.vu_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int16.vu_inv@tok () Term)

; </end encoding val FStar.Int16.vu_inv>


; <Start encoding val FStar.Int16.v_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int16.v_inj (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int16.v_inj@tok () Term)

; </end encoding val FStar.Int16.v_inj>


; <Start encoding val FStar.Int16.zero>

(declare-fun FStar.Int16.zero (Dummy_sort) Term)
(declare-fun Tm_refine_68725ebeac1c9fba142682d5289ce1f5 () Term)


; </end encoding val FStar.Int16.zero>


; <Start encoding val FStar.Int16.one>

(declare-fun FStar.Int16.one (Dummy_sort) Term)
(declare-fun Tm_refine_4e12eab648b1a756fd9089734630525b () Term)


; </end encoding val FStar.Int16.one>


; <Start encoding val FStar.Int16.add>

(declare-fun FStar.Int16.add (Term Term) Term)
(declare-fun Tm_refine_a28a6b882d97a365aa7f25893bfb4f13 (Term Term) Term)
(declare-fun Tm_arrow_617f701e90143802bc629772224fa59c () Term)
(declare-fun FStar.Int16.add@tok () Term)


; </end encoding val FStar.Int16.add>


; <Start encoding val FStar.Int16.sub>

(declare-fun FStar.Int16.sub (Term Term) Term)
(declare-fun Tm_refine_0ca1c0e820d26ec0eb6b4b532958a40e (Term Term) Term)
(declare-fun Tm_arrow_dc7a1b3aed7a4af5df308b5809dd21ab () Term)
(declare-fun FStar.Int16.sub@tok () Term)


; </end encoding val FStar.Int16.sub>


; <Start encoding val FStar.Int16.mul>

(declare-fun FStar.Int16.mul (Term Term) Term)
(declare-fun Tm_refine_da821069bb94a6e40bac6de95fba260c (Term Term) Term)
(declare-fun Tm_arrow_cde342f114b4028f0c8154d50b71f9db () Term)
(declare-fun FStar.Int16.mul@tok () Term)


; </end encoding val FStar.Int16.mul>


; <Start encoding val FStar.Int16.div>

(declare-fun Tm_refine_887fd71edd23a071fb178a8dad28f43b () Term)
(declare-fun FStar.Int16.div (Term Term) Term)

(declare-fun Tm_refine_8b2f6ae4d061c21b9e81df7d528abfa6 (Term Term) Term)
(declare-fun Tm_arrow_c2e599efefc289f480d8872a2bf2a093 () Term)
(declare-fun FStar.Int16.div@tok () Term)


; </end encoding val FStar.Int16.div>


; <Start encoding val FStar.Int16.rem>


(declare-fun FStar.Int16.rem (Term Term) Term)

(declare-fun Tm_refine_1123c989dcd1a37aebe940c5097d8257 (Term Term) Term)
(declare-fun Tm_arrow_4283ce0b2c89cca7bf2313cc51baf51f () Term)
(declare-fun FStar.Int16.rem@tok () Term)


; </end encoding val FStar.Int16.rem>


; <Start encoding val FStar.Int16.logand>

(declare-fun FStar.Int16.logand (Term Term) Term)
(declare-fun Tm_refine_154c9dbe9b07c1a6797cc48b0acc7b8a (Term Term) Term)
(declare-fun Tm_arrow_fa4fd7e045b6f05bb194e120433f4ded () Term)
(declare-fun FStar.Int16.logand@tok () Term)


; </end encoding val FStar.Int16.logand>


; <Start encoding val FStar.Int16.logxor>

(declare-fun FStar.Int16.logxor (Term Term) Term)
(declare-fun Tm_refine_2dce52c5ba067470a613d0bb4c355670 (Term Term) Term)
(declare-fun Tm_arrow_87ea2fac1a3f566f97668cd6cf0ac586 () Term)
(declare-fun FStar.Int16.logxor@tok () Term)


; </end encoding val FStar.Int16.logxor>


; <Start encoding val FStar.Int16.logor>

(declare-fun FStar.Int16.logor (Term Term) Term)
(declare-fun Tm_refine_58c5e00b8ff380c721d5c7a2f467aaab (Term Term) Term)
(declare-fun Tm_arrow_4be57f04067d389af61590436dcf2138 () Term)
(declare-fun FStar.Int16.logor@tok () Term)


; </end encoding val FStar.Int16.logor>


; <Start encoding val FStar.Int16.lognot>

(declare-fun FStar.Int16.lognot (Term) Term)
(declare-fun Tm_refine_819846e9a5b5d83efd11d9ce0a6f92be (Term) Term)
(declare-fun Tm_arrow_40c1e288f41a711afe2479696def09cf () Term)
(declare-fun FStar.Int16.lognot@tok () Term)


; </end encoding val FStar.Int16.lognot>


; <Start encoding val FStar.Int16.shift_right>

(declare-fun FStar.Int16.shift_right (Term Term) Term)
(declare-fun Tm_refine_3255609608361bdf7f6bae26334f531c (Term Term) Term)
(declare-fun Tm_arrow_114385a9b92284041feb5bcdfe56beb4 () Term)
(declare-fun FStar.Int16.shift_right@tok () Term)


; </end encoding val FStar.Int16.shift_right>


; <Start encoding val FStar.Int16.shift_left>

(declare-fun FStar.Int16.shift_left (Term Term) Term)
(declare-fun Tm_refine_c23a7f0c470fb6f47f9fee0e209af523 (Term Term) Term)
(declare-fun Tm_arrow_9ff317553631dfe954c44fa30cb7dcdd () Term)
(declare-fun FStar.Int16.shift_left@tok () Term)


; </end encoding val FStar.Int16.shift_left>


; <Start encoding val FStar.Int16.shift_arithmetic_right>

(declare-fun FStar.Int16.shift_arithmetic_right (Term Term) Term)
(declare-fun Tm_refine_472f35e4060ffd705fbcca55e6d74d51 (Term Term) Term)
(declare-fun Tm_arrow_c0817355be754abe4dde689277ddba42 () Term)
(declare-fun FStar.Int16.shift_arithmetic_right@tok () Term)


; </end encoding val FStar.Int16.shift_arithmetic_right>


; <Start encoding let eq>

(declare-fun FStar.Int16.eq (Term Term) Term)
(declare-fun Tm_arrow_9d624118066eaec6c9711c4caceb3489 () Term)
(declare-fun FStar.Int16.eq@tok () Term)

; </end encoding let eq>


; <Start encoding let gt>

(declare-fun FStar.Int16.gt (Term Term) Term)

(declare-fun FStar.Int16.gt@tok () Term)

; </end encoding let gt>


; <Start encoding let gte>

(declare-fun FStar.Int16.gte (Term Term) Term)

(declare-fun FStar.Int16.gte@tok () Term)

; </end encoding let gte>


; <Start encoding let lt>

(declare-fun FStar.Int16.lt (Term Term) Term)

(declare-fun FStar.Int16.lt@tok () Term)

; </end encoding let lt>


; <Start encoding let lte>

(declare-fun FStar.Int16.lte (Term Term) Term)

(declare-fun FStar.Int16.lte@tok () Term)

; </end encoding let lte>


; <Start encoding let op_Plus_Hat>

(declare-fun FStar.Int16.op_Plus_Hat (Term Term) Term)


(declare-fun FStar.Int16.op_Plus_Hat@tok () Term)


; </end encoding let op_Plus_Hat>


; <Start encoding let op_Subtraction_Hat>

(declare-fun FStar.Int16.op_Subtraction_Hat (Term Term) Term)


(declare-fun FStar.Int16.op_Subtraction_Hat@tok () Term)


; </end encoding let op_Subtraction_Hat>


; <Start encoding let op_Star_Hat>

(declare-fun FStar.Int16.op_Star_Hat (Term Term) Term)


(declare-fun FStar.Int16.op_Star_Hat@tok () Term)


; </end encoding let op_Star_Hat>


; <Start encoding let op_Slash_Hat>


(declare-fun FStar.Int16.op_Slash_Hat (Term Term) Term)



(declare-fun FStar.Int16.op_Slash_Hat@tok () Term)



; </end encoding let op_Slash_Hat>


; <Start encoding let op_Percent_Hat>


(declare-fun FStar.Int16.op_Percent_Hat (Term Term) Term)



(declare-fun FStar.Int16.op_Percent_Hat@tok () Term)



; </end encoding let op_Percent_Hat>


; <Start encoding let op_Hat_Hat>

(declare-fun FStar.Int16.op_Hat_Hat (Term Term) Term)


(declare-fun FStar.Int16.op_Hat_Hat@tok () Term)


; </end encoding let op_Hat_Hat>


; <Start encoding let op_Amp_Hat>

(declare-fun FStar.Int16.op_Amp_Hat (Term Term) Term)


(declare-fun FStar.Int16.op_Amp_Hat@tok () Term)


; </end encoding let op_Amp_Hat>


; <Start encoding let op_Bar_Hat>

(declare-fun FStar.Int16.op_Bar_Hat (Term Term) Term)


(declare-fun FStar.Int16.op_Bar_Hat@tok () Term)


; </end encoding let op_Bar_Hat>


; <Start encoding let op_Less_Less_Hat>

(declare-fun FStar.Int16.op_Less_Less_Hat (Term Term) Term)


(declare-fun FStar.Int16.op_Less_Less_Hat@tok () Term)


; </end encoding let op_Less_Less_Hat>


; <Start encoding let op_Greater_Greater_Hat>

(declare-fun FStar.Int16.op_Greater_Greater_Hat (Term Term) Term)


(declare-fun FStar.Int16.op_Greater_Greater_Hat@tok () Term)


; </end encoding let op_Greater_Greater_Hat>


; <Start encoding let op_Greater_Greater_Greater_Hat>

(declare-fun FStar.Int16.op_Greater_Greater_Greater_Hat (Term Term) Term)


(declare-fun FStar.Int16.op_Greater_Greater_Greater_Hat@tok () Term)


; </end encoding let op_Greater_Greater_Greater_Hat>


; <Start encoding let op_Equals_Hat>

(declare-fun FStar.Int16.op_Equals_Hat (Term Term) Term)

(declare-fun FStar.Int16.op_Equals_Hat@tok () Term)

; </end encoding let op_Equals_Hat>


; <Start encoding let op_Greater_Hat>

(declare-fun FStar.Int16.op_Greater_Hat (Term Term) Term)

(declare-fun FStar.Int16.op_Greater_Hat@tok () Term)

; </end encoding let op_Greater_Hat>


; <Start encoding let op_Greater_Equals_Hat>

(declare-fun FStar.Int16.op_Greater_Equals_Hat (Term Term) Term)

(declare-fun FStar.Int16.op_Greater_Equals_Hat@tok () Term)

; </end encoding let op_Greater_Equals_Hat>


; <Start encoding let op_Less_Hat>

(declare-fun FStar.Int16.op_Less_Hat (Term Term) Term)

(declare-fun FStar.Int16.op_Less_Hat@tok () Term)

; </end encoding let op_Less_Hat>


; <Start encoding let op_Less_Equals_Hat>

(declare-fun FStar.Int16.op_Less_Equals_Hat (Term Term) Term)

(declare-fun FStar.Int16.op_Less_Equals_Hat@tok () Term)

; </end encoding let op_Less_Equals_Hat>


; <Start encoding let ct_abs>

(declare-fun Tm_refine_905eb75d304d39a1c292f6e9a7923059 () Term)
(declare-fun FStar.Int16.ct_abs (Term) Term)

(declare-fun Tm_refine_ec190995fc7a4dee283b722741e05c17 (Term) Term)
(declare-fun Tm_arrow_ad4d51909612685b37c10d434009e218 () Term)
(declare-fun FStar.Int16.ct_abs@tok () Term)



; </end encoding let ct_abs>


; <Start encoding val FStar.Int16.to_string>

(declare-fun FStar.Int16.to_string (Term) Term)
(declare-fun Tm_arrow_6dd91255da0d0c601bee14042bacaa10 () Term)
(declare-fun FStar.Int16.to_string@tok () Term)

; </end encoding val FStar.Int16.to_string>


; <Start encoding val FStar.Int16.of_string>

(declare-fun FStar.Int16.of_string (Term) Term)
(declare-fun Tm_arrow_a2f8b8320fd3a7b21bf5a0abc0489d33 () Term)
(declare-fun FStar.Int16.of_string@tok () Term)

; </end encoding val FStar.Int16.of_string>


; <Skipped #set-options "--admit_smt_queries true"/>


; <Start encoding let __int_to_t>

(declare-fun FStar.Int16.__int_to_t (Term) Term)
(declare-fun Tm_arrow_8ca2ae7f208808624432206fa1fd42e7 () Term)
(declare-fun FStar.Int16.__int_to_t@tok () Term)

; </end encoding let __int_to_t>


; <Skipped #reset-options/>


; End Externals for interface FStar.Int16


; Externals for interface FStar.Int8


; <Start encoding let n>

(declare-fun FStar.Int8.n (Dummy_sort) Term)

; </end encoding let n>


; <Skipped #set-options "--max_fuel 0 --max_ifuel 0"/>


; <Start encoding val FStar.Int8.t>

(declare-fun FStar.Int8.t (Dummy_sort) Term)

; </end encoding val FStar.Int8.t>


; <Start encoding val FStar.Int8.v>

(declare-fun FStar.Int8.v (Term) Term)
(declare-fun Tm_arrow_3ed82c48966c43aae55215d1735fa2bd () Term)
(declare-fun FStar.Int8.v@tok () Term)

; </end encoding val FStar.Int8.v>


; <Start encoding val FStar.Int8.int_to_t>

(declare-fun FStar.Int8.int_to_t (Term) Term)
(declare-fun Tm_refine_627483b23b11d5a071fe1ff3a43454b1 (Term) Term)
(declare-fun Tm_arrow_9d833fce331eb42c35cff5f448fe6f61 () Term)
(declare-fun FStar.Int8.int_to_t@tok () Term)


; </end encoding val FStar.Int8.int_to_t>


; <Start encoding val FStar.Int8.uv_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int8.uv_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int8.uv_inv@tok () Term)

; </end encoding val FStar.Int8.uv_inv>


; <Start encoding val FStar.Int8.vu_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int8.vu_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int8.vu_inv@tok () Term)

; </end encoding val FStar.Int8.vu_inv>


; <Start encoding val FStar.Int8.v_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int8.v_inj (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int8.v_inj@tok () Term)

; </end encoding val FStar.Int8.v_inj>


; <Start encoding val FStar.Int8.zero>

(declare-fun FStar.Int8.zero (Dummy_sort) Term)
(declare-fun Tm_refine_f53cd8ad3c1e3115abeb0027455dc224 () Term)


; </end encoding val FStar.Int8.zero>


; <Start encoding val FStar.Int8.one>

(declare-fun FStar.Int8.one (Dummy_sort) Term)
(declare-fun Tm_refine_dbb1396644bacb35a126b1403611f82d () Term)


; </end encoding val FStar.Int8.one>


; <Start encoding val FStar.Int8.add>

(declare-fun FStar.Int8.add (Term Term) Term)
(declare-fun Tm_refine_03c914b28d964e6bced1ef7a9aa09acc (Term Term) Term)
(declare-fun Tm_arrow_fa2e2b38cdb0ba0ad61f9cbd9272d2c0 () Term)
(declare-fun FStar.Int8.add@tok () Term)


; </end encoding val FStar.Int8.add>


; <Start encoding val FStar.Int8.sub>

(declare-fun FStar.Int8.sub (Term Term) Term)
(declare-fun Tm_refine_9dbaf07bcfba2d4a4aa7ed5bbcb9e54f (Term Term) Term)
(declare-fun Tm_arrow_e4d8293c31163f9e8cddf99a6e7bb734 () Term)
(declare-fun FStar.Int8.sub@tok () Term)


; </end encoding val FStar.Int8.sub>


; <Start encoding val FStar.Int8.mul>

(declare-fun FStar.Int8.mul (Term Term) Term)
(declare-fun Tm_refine_7eff5dc2928cafba516308733e6d93bb (Term Term) Term)
(declare-fun Tm_arrow_6a8a4d136c14c183c4875972e027401b () Term)
(declare-fun FStar.Int8.mul@tok () Term)


; </end encoding val FStar.Int8.mul>


; <Start encoding val FStar.Int8.div>

(declare-fun Tm_refine_1bed937cce8cdf75e4ca2026e8263a1e () Term)
(declare-fun FStar.Int8.div (Term Term) Term)

(declare-fun Tm_refine_4b9e14abe7b7eb92c750515973de23f8 (Term Term) Term)
(declare-fun Tm_arrow_64a697cb19e2e787c537831ae65b4de7 () Term)
(declare-fun FStar.Int8.div@tok () Term)


; </end encoding val FStar.Int8.div>


; <Start encoding val FStar.Int8.rem>


(declare-fun FStar.Int8.rem (Term Term) Term)

(declare-fun Tm_refine_d63e04a4667963c91b06d847b1f2c63c (Term Term) Term)
(declare-fun Tm_arrow_aad3c358498ee023378414314b54643f () Term)
(declare-fun FStar.Int8.rem@tok () Term)


; </end encoding val FStar.Int8.rem>


; <Start encoding val FStar.Int8.logand>

(declare-fun FStar.Int8.logand (Term Term) Term)
(declare-fun Tm_refine_f43344a0fe1d05ddf2dbabae51fd4e35 (Term Term) Term)
(declare-fun Tm_arrow_bfd6aed26870cf6fae28146354bf94df () Term)
(declare-fun FStar.Int8.logand@tok () Term)


; </end encoding val FStar.Int8.logand>


; <Start encoding val FStar.Int8.logxor>

(declare-fun FStar.Int8.logxor (Term Term) Term)
(declare-fun Tm_refine_b280b4d6e3fecdef10318a432bfa2a4d (Term Term) Term)
(declare-fun Tm_arrow_2611949a3399b5125e2f6da01a4ed021 () Term)
(declare-fun FStar.Int8.logxor@tok () Term)


; </end encoding val FStar.Int8.logxor>


; <Start encoding val FStar.Int8.logor>

(declare-fun FStar.Int8.logor (Term Term) Term)
(declare-fun Tm_refine_595251d4c835fba77afbd2cef647300a (Term Term) Term)
(declare-fun Tm_arrow_f3a6ebeacd4f2b5123ac737df0c0ace0 () Term)
(declare-fun FStar.Int8.logor@tok () Term)


; </end encoding val FStar.Int8.logor>


; <Start encoding val FStar.Int8.lognot>

(declare-fun FStar.Int8.lognot (Term) Term)
(declare-fun Tm_refine_2bd33a5e181ec8236ba7097dc5719ec4 (Term) Term)
(declare-fun Tm_arrow_08ddfb7af34f815aa77a94d02491a0ed () Term)
(declare-fun FStar.Int8.lognot@tok () Term)


; </end encoding val FStar.Int8.lognot>


; <Start encoding val FStar.Int8.shift_right>

(declare-fun FStar.Int8.shift_right (Term Term) Term)
(declare-fun Tm_refine_9f3d5280a6f37e4281bd94831a9f162c (Term Term) Term)
(declare-fun Tm_arrow_34f5ccffce2f6510814b98c0716933dd () Term)
(declare-fun FStar.Int8.shift_right@tok () Term)


; </end encoding val FStar.Int8.shift_right>


; <Start encoding val FStar.Int8.shift_left>

(declare-fun FStar.Int8.shift_left (Term Term) Term)
(declare-fun Tm_refine_df06688bcdee8215e3a3c64bc81f68e1 (Term Term) Term)
(declare-fun Tm_arrow_80cd4951455b79877e1ff451adb1a016 () Term)
(declare-fun FStar.Int8.shift_left@tok () Term)


; </end encoding val FStar.Int8.shift_left>


; <Start encoding val FStar.Int8.shift_arithmetic_right>

(declare-fun FStar.Int8.shift_arithmetic_right (Term Term) Term)
(declare-fun Tm_refine_dc4579ed284bfac9f5f8e3ad9e366470 (Term Term) Term)
(declare-fun Tm_arrow_2b36269433ce79bddfaec91105165c82 () Term)
(declare-fun FStar.Int8.shift_arithmetic_right@tok () Term)


; </end encoding val FStar.Int8.shift_arithmetic_right>


; <Start encoding let eq>

(declare-fun FStar.Int8.eq (Term Term) Term)
(declare-fun Tm_arrow_d4e8934c44aa0cbf0c20e016141bb2ce () Term)
(declare-fun FStar.Int8.eq@tok () Term)

; </end encoding let eq>


; <Start encoding let gt>

(declare-fun FStar.Int8.gt (Term Term) Term)

(declare-fun FStar.Int8.gt@tok () Term)

; </end encoding let gt>


; <Start encoding let gte>

(declare-fun FStar.Int8.gte (Term Term) Term)

(declare-fun FStar.Int8.gte@tok () Term)

; </end encoding let gte>


; <Start encoding let lt>

(declare-fun FStar.Int8.lt (Term Term) Term)

(declare-fun FStar.Int8.lt@tok () Term)

; </end encoding let lt>


; <Start encoding let lte>

(declare-fun FStar.Int8.lte (Term Term) Term)

(declare-fun FStar.Int8.lte@tok () Term)

; </end encoding let lte>


; <Start encoding let op_Plus_Hat>

(declare-fun FStar.Int8.op_Plus_Hat (Term Term) Term)


(declare-fun FStar.Int8.op_Plus_Hat@tok () Term)


; </end encoding let op_Plus_Hat>


; <Start encoding let op_Subtraction_Hat>

(declare-fun FStar.Int8.op_Subtraction_Hat (Term Term) Term)


(declare-fun FStar.Int8.op_Subtraction_Hat@tok () Term)


; </end encoding let op_Subtraction_Hat>


; <Start encoding let op_Star_Hat>

(declare-fun FStar.Int8.op_Star_Hat (Term Term) Term)


(declare-fun FStar.Int8.op_Star_Hat@tok () Term)


; </end encoding let op_Star_Hat>


; <Start encoding let op_Slash_Hat>


(declare-fun FStar.Int8.op_Slash_Hat (Term Term) Term)



(declare-fun FStar.Int8.op_Slash_Hat@tok () Term)



; </end encoding let op_Slash_Hat>


; <Start encoding let op_Percent_Hat>


(declare-fun FStar.Int8.op_Percent_Hat (Term Term) Term)



(declare-fun FStar.Int8.op_Percent_Hat@tok () Term)



; </end encoding let op_Percent_Hat>


; <Start encoding let op_Hat_Hat>

(declare-fun FStar.Int8.op_Hat_Hat (Term Term) Term)


(declare-fun FStar.Int8.op_Hat_Hat@tok () Term)


; </end encoding let op_Hat_Hat>


; <Start encoding let op_Amp_Hat>

(declare-fun FStar.Int8.op_Amp_Hat (Term Term) Term)


(declare-fun FStar.Int8.op_Amp_Hat@tok () Term)


; </end encoding let op_Amp_Hat>


; <Start encoding let op_Bar_Hat>

(declare-fun FStar.Int8.op_Bar_Hat (Term Term) Term)


(declare-fun FStar.Int8.op_Bar_Hat@tok () Term)


; </end encoding let op_Bar_Hat>


; <Start encoding let op_Less_Less_Hat>

(declare-fun FStar.Int8.op_Less_Less_Hat (Term Term) Term)


(declare-fun FStar.Int8.op_Less_Less_Hat@tok () Term)


; </end encoding let op_Less_Less_Hat>


; <Start encoding let op_Greater_Greater_Hat>

(declare-fun FStar.Int8.op_Greater_Greater_Hat (Term Term) Term)


(declare-fun FStar.Int8.op_Greater_Greater_Hat@tok () Term)


; </end encoding let op_Greater_Greater_Hat>


; <Start encoding let op_Greater_Greater_Greater_Hat>

(declare-fun FStar.Int8.op_Greater_Greater_Greater_Hat (Term Term) Term)


(declare-fun FStar.Int8.op_Greater_Greater_Greater_Hat@tok () Term)


; </end encoding let op_Greater_Greater_Greater_Hat>


; <Start encoding let op_Equals_Hat>

(declare-fun FStar.Int8.op_Equals_Hat (Term Term) Term)

(declare-fun FStar.Int8.op_Equals_Hat@tok () Term)

; </end encoding let op_Equals_Hat>


; <Start encoding let op_Greater_Hat>

(declare-fun FStar.Int8.op_Greater_Hat (Term Term) Term)

(declare-fun FStar.Int8.op_Greater_Hat@tok () Term)

; </end encoding let op_Greater_Hat>


; <Start encoding let op_Greater_Equals_Hat>

(declare-fun FStar.Int8.op_Greater_Equals_Hat (Term Term) Term)

(declare-fun FStar.Int8.op_Greater_Equals_Hat@tok () Term)

; </end encoding let op_Greater_Equals_Hat>


; <Start encoding let op_Less_Hat>

(declare-fun FStar.Int8.op_Less_Hat (Term Term) Term)

(declare-fun FStar.Int8.op_Less_Hat@tok () Term)

; </end encoding let op_Less_Hat>


; <Start encoding let op_Less_Equals_Hat>

(declare-fun FStar.Int8.op_Less_Equals_Hat (Term Term) Term)

(declare-fun FStar.Int8.op_Less_Equals_Hat@tok () Term)

; </end encoding let op_Less_Equals_Hat>


; <Start encoding let ct_abs>

(declare-fun Tm_refine_edde6135cd8c48071c1d975316b81b83 () Term)
(declare-fun FStar.Int8.ct_abs (Term) Term)

(declare-fun Tm_refine_2733cf7f3e8b5a35bb8ad950fb38f85f (Term) Term)
(declare-fun Tm_arrow_4cabbb86c1d7e25395530e2b0ae71e53 () Term)
(declare-fun FStar.Int8.ct_abs@tok () Term)



; </end encoding let ct_abs>


; <Start encoding val FStar.Int8.to_string>

(declare-fun FStar.Int8.to_string (Term) Term)
(declare-fun Tm_arrow_ed16a302d40f77572b6ea634826e997e () Term)
(declare-fun FStar.Int8.to_string@tok () Term)

; </end encoding val FStar.Int8.to_string>


; <Start encoding val FStar.Int8.of_string>

(declare-fun FStar.Int8.of_string (Term) Term)
(declare-fun Tm_arrow_6c64329622905793cf9762c06e1b912d () Term)
(declare-fun FStar.Int8.of_string@tok () Term)

; </end encoding val FStar.Int8.of_string>


; <Skipped #set-options "--admit_smt_queries true"/>


; <Start encoding let __int_to_t>

(declare-fun FStar.Int8.__int_to_t (Term) Term)
(declare-fun Tm_arrow_3d31dd23e32abdda6c1f97b10136598a () Term)
(declare-fun FStar.Int8.__int_to_t@tok () Term)

; </end encoding let __int_to_t>


; <Skipped #reset-options/>


; End Externals for interface FStar.Int8


; Externals for interface FStar.UInt64


; <Start encoding let n>

(declare-fun FStar.UInt64.n (Dummy_sort) Term)

; </end encoding let n>


; <Skipped #set-options "--max_fuel 0 --max_ifuel 0"/>


; <Start encoding val FStar.UInt64.t>

(declare-fun FStar.UInt64.t (Dummy_sort) Term)

; </end encoding val FStar.UInt64.t>


; <Start encoding val FStar.UInt64.v>

(declare-fun FStar.UInt64.v (Term) Term)
(declare-fun Tm_arrow_b1dc77edd47f50a79ef19c45877be87f () Term)
(declare-fun FStar.UInt64.v@tok () Term)

; </end encoding val FStar.UInt64.v>


; <Start encoding val FStar.UInt64.uint_to_t>

(declare-fun FStar.UInt64.uint_to_t (Term) Term)
(declare-fun Tm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4 (Term) Term)
(declare-fun Tm_arrow_0a7b550d26d1f7783c7c5e1990842388 () Term)
(declare-fun FStar.UInt64.uint_to_t@tok () Term)


; </end encoding val FStar.UInt64.uint_to_t>


; <Start encoding val FStar.UInt64.uv_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt64.uv_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt64.uv_inv@tok () Term)

; </end encoding val FStar.UInt64.uv_inv>


; <Start encoding val FStar.UInt64.vu_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt64.vu_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt64.vu_inv@tok () Term)

; </end encoding val FStar.UInt64.vu_inv>


; <Start encoding val FStar.UInt64.v_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt64.v_inj (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt64.v_inj@tok () Term)

; </end encoding val FStar.UInt64.v_inj>


; <Start encoding val FStar.UInt64.zero>

(declare-fun FStar.UInt64.zero (Dummy_sort) Term)
(declare-fun Tm_refine_89584a9c9cf094f470969adafcc43f12 () Term)


; </end encoding val FStar.UInt64.zero>


; <Start encoding val FStar.UInt64.one>

(declare-fun FStar.UInt64.one (Dummy_sort) Term)
(declare-fun Tm_refine_248426d47c73436882d5ff4a2d4f3cf0 () Term)


; </end encoding val FStar.UInt64.one>


; <Start encoding val FStar.UInt64.add>

(declare-fun FStar.UInt64.add (Term Term) Term)
(declare-fun Tm_refine_bc552b2c624e2add758b3ac761c0c563 (Term Term) Term)
(declare-fun Tm_arrow_be2b56e86970b1435b564896876df5af () Term)
(declare-fun FStar.UInt64.add@tok () Term)


; </end encoding val FStar.UInt64.add>


; <Start encoding val FStar.UInt64.add_underspec>

(declare-fun FStar.UInt64.add_underspec (Term Term) Term)
(declare-fun Tm_refine_453fa410c3a31a8a972a89b516aee90f (Term Term) Term)
(declare-fun Tm_arrow_7f1e1876505bc4561e28a0354c79be94 () Term)
(declare-fun FStar.UInt64.add_underspec@tok () Term)


; </end encoding val FStar.UInt64.add_underspec>


; <Start encoding val FStar.UInt64.add_mod>

(declare-fun FStar.UInt64.add_mod (Term Term) Term)
(declare-fun Tm_refine_2d98f2f5de361516da3dbd9f556509e2 (Term Term) Term)
(declare-fun Tm_arrow_05395bb977e74723e0c89b35f3db81b1 () Term)
(declare-fun FStar.UInt64.add_mod@tok () Term)


; </end encoding val FStar.UInt64.add_mod>


; <Start encoding val FStar.UInt64.sub>

(declare-fun FStar.UInt64.sub (Term Term) Term)
(declare-fun Tm_refine_4db8ba22c4504a66577a2159dcc603cd (Term Term) Term)
(declare-fun Tm_arrow_a3c2957810330952c9cd0dc2ef7e5dc1 () Term)
(declare-fun FStar.UInt64.sub@tok () Term)


; </end encoding val FStar.UInt64.sub>


; <Start encoding val FStar.UInt64.sub_underspec>

(declare-fun FStar.UInt64.sub_underspec (Term Term) Term)
(declare-fun Tm_refine_dd3e2dd01aa446ac6616a71fc757406a (Term Term) Term)
(declare-fun Tm_arrow_87b0e65776a09c1fe9734c4195b4bf84 () Term)
(declare-fun FStar.UInt64.sub_underspec@tok () Term)


; </end encoding val FStar.UInt64.sub_underspec>


; <Start encoding val FStar.UInt64.sub_mod>

(declare-fun FStar.UInt64.sub_mod (Term Term) Term)
(declare-fun Tm_refine_cb95789552ffa46c14f21af13ceaad6b (Term Term) Term)
(declare-fun Tm_arrow_7f617113bda01094490f58e39564f398 () Term)
(declare-fun FStar.UInt64.sub_mod@tok () Term)


; </end encoding val FStar.UInt64.sub_mod>


; <Start encoding val FStar.UInt64.mul>

(declare-fun FStar.UInt64.mul (Term Term) Term)
(declare-fun Tm_refine_2ac8bed7a6398f84bccb91bd4fed7136 (Term Term) Term)
(declare-fun Tm_arrow_ea17845c6f4791bda61fffc74c40da51 () Term)
(declare-fun FStar.UInt64.mul@tok () Term)


; </end encoding val FStar.UInt64.mul>


; <Start encoding val FStar.UInt64.mul_underspec>

(declare-fun FStar.UInt64.mul_underspec (Term Term) Term)
(declare-fun Tm_refine_b936d941ba7bf51db4d781f9af09acd3 (Term Term) Term)
(declare-fun Tm_arrow_596709ad66a9eee3dc6ef040a813e08e () Term)
(declare-fun FStar.UInt64.mul_underspec@tok () Term)


; </end encoding val FStar.UInt64.mul_underspec>


; <Start encoding val FStar.UInt64.mul_mod>

(declare-fun FStar.UInt64.mul_mod (Term Term) Term)
(declare-fun Tm_refine_fce3a2e2e29645212301d89fcebc4e29 (Term Term) Term)
(declare-fun Tm_arrow_a58b92e22a54f064a91938f5890f3d26 () Term)
(declare-fun FStar.UInt64.mul_mod@tok () Term)


; </end encoding val FStar.UInt64.mul_mod>


; <Start encoding val FStar.UInt64.div>

(declare-fun Tm_refine_94d25b6e0041d543efd58300424ecc37 () Term)
(declare-fun FStar.UInt64.div (Term Term) Term)

(declare-fun Tm_refine_2905e4cd1a81244ae97dc5c62563e060 (Term Term) Term)
(declare-fun Tm_arrow_362fd430a2a36692a10db610ce347491 () Term)
(declare-fun FStar.UInt64.div@tok () Term)


; </end encoding val FStar.UInt64.div>


; <Start encoding val FStar.UInt64.rem>


(declare-fun FStar.UInt64.rem (Term Term) Term)

(declare-fun Tm_refine_06f2bf4950bb76094f7b7f43daea2409 (Term Term) Term)
(declare-fun Tm_arrow_53bf9c10f719f234f584267623ec2e33 () Term)
(declare-fun FStar.UInt64.rem@tok () Term)


; </end encoding val FStar.UInt64.rem>


; <Start encoding val FStar.UInt64.logand>

(declare-fun FStar.UInt64.logand (Term Term) Term)
(declare-fun Tm_refine_4a73301fbc41c8e432f23b6aef69a5eb (Term Term) Term)
(declare-fun Tm_arrow_cbca1d1a87f201e6ff2f61643983b2f3 () Term)
(declare-fun FStar.UInt64.logand@tok () Term)


; </end encoding val FStar.UInt64.logand>


; <Start encoding val FStar.UInt64.logxor>

(declare-fun FStar.UInt64.logxor (Term Term) Term)
(declare-fun Tm_refine_b87f471e80e3c2bc077d38b7026cfcf6 (Term Term) Term)
(declare-fun Tm_arrow_7a0892a26110d0c3bb8d5540c3f9134f () Term)
(declare-fun FStar.UInt64.logxor@tok () Term)


; </end encoding val FStar.UInt64.logxor>


; <Start encoding val FStar.UInt64.logor>

(declare-fun FStar.UInt64.logor (Term Term) Term)
(declare-fun Tm_refine_6913af387cf2f30da0961ac60666f00f (Term Term) Term)
(declare-fun Tm_arrow_88959be20cb195d8ed8c043810621aa5 () Term)
(declare-fun FStar.UInt64.logor@tok () Term)


; </end encoding val FStar.UInt64.logor>


; <Start encoding val FStar.UInt64.lognot>

(declare-fun FStar.UInt64.lognot (Term) Term)
(declare-fun Tm_refine_d294ad5c8783c9adf54e87f8b3d910d1 (Term) Term)
(declare-fun Tm_arrow_5830582bc087a4c4cac6e2d02503540d () Term)
(declare-fun FStar.UInt64.lognot@tok () Term)


; </end encoding val FStar.UInt64.lognot>


; <Start encoding val FStar.UInt64.shift_right>

(declare-fun FStar.UInt64.shift_right (Term Term) Term)
(declare-fun Tm_refine_0556f625b89f1ac99fd21e82e26fe9e0 (Term Term) Term)
(declare-fun Tm_arrow_54172cd4c03b90333401dcf08f131f18 () Term)
(declare-fun FStar.UInt64.shift_right@tok () Term)


; </end encoding val FStar.UInt64.shift_right>


; <Start encoding val FStar.UInt64.shift_left>

(declare-fun FStar.UInt64.shift_left (Term Term) Term)
(declare-fun Tm_refine_ebf0af240d826e12ec6c1570ad81631c (Term Term) Term)
(declare-fun Tm_arrow_f0e726dc2efef2bba1cad7b7437673ab () Term)
(declare-fun FStar.UInt64.shift_left@tok () Term)


; </end encoding val FStar.UInt64.shift_left>


; <Start encoding let eq>

(declare-fun FStar.UInt64.eq (Term Term) Term)
(declare-fun Tm_arrow_598288f3403164a95ff09472c7ec0bb4 () Term)
(declare-fun FStar.UInt64.eq@tok () Term)

; </end encoding let eq>


; <Start encoding let gt>

(declare-fun FStar.UInt64.gt (Term Term) Term)

(declare-fun FStar.UInt64.gt@tok () Term)

; </end encoding let gt>


; <Start encoding let gte>

(declare-fun FStar.UInt64.gte (Term Term) Term)

(declare-fun FStar.UInt64.gte@tok () Term)

; </end encoding let gte>


; <Start encoding let lt>

(declare-fun FStar.UInt64.lt (Term Term) Term)

(declare-fun FStar.UInt64.lt@tok () Term)

; </end encoding let lt>


; <Start encoding let lte>

(declare-fun FStar.UInt64.lte (Term Term) Term)

(declare-fun FStar.UInt64.lte@tok () Term)

; </end encoding let lte>


; <Start encoding let minus>

(declare-fun FStar.UInt64.minus (Term) Term)
(declare-fun Tm_arrow_1b7783661e16e9c2a9894c974bc97032 () Term)
(declare-fun FStar.UInt64.minus@tok () Term)

; </end encoding let minus>


; <Start encoding let n_minus_one>

(declare-fun FStar.UInt64.n_minus_one (Dummy_sort) Term)

; </end encoding let n_minus_one>


; <Skipped #set-options "--z3rlimit 80 --initial_fuel 1 --max_fuel 1"/>


; <Start encoding let eq_mask>

(declare-fun FStar.UInt64.eq_mask (Term Term) Term)
(declare-fun Tm_refine_30c561286d2c8600e271922aaab003cf (Term Term) Term)
(declare-fun Tm_arrow_dc89781bb433a3a499ce3ed25df276ee () Term)
(declare-fun FStar.UInt64.eq_mask@tok () Term)


; </end encoding let eq_mask>


; <Start encoding val FStar.UInt64.lemma_sub_msbs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt64.lemma_sub_msbs (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt64.lemma_sub_msbs@tok () Term)

; </end encoding val FStar.UInt64.lemma_sub_msbs>


; <Start encoding let gte_mask>

(declare-fun FStar.UInt64.gte_mask (Term Term) Term)
(declare-fun Tm_refine_1b1f0e3b5d9ef76ddc765c8d9e623234 (Term Term) Term)
(declare-fun Tm_arrow_7b13171caed18c0d7cf0b1d9315655c1 () Term)
(declare-fun FStar.UInt64.gte_mask@tok () Term)


; </end encoding let gte_mask>


; <Skipped #reset-options/>


; <Start encoding let op_Plus_Hat>

(declare-fun FStar.UInt64.op_Plus_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Plus_Hat@tok () Term)


; </end encoding let op_Plus_Hat>


; <Start encoding let op_Plus_Question_Hat>

(declare-fun FStar.UInt64.op_Plus_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Plus_Question_Hat@tok () Term)


; </end encoding let op_Plus_Question_Hat>


; <Start encoding let op_Plus_Percent_Hat>

(declare-fun FStar.UInt64.op_Plus_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Plus_Percent_Hat@tok () Term)


; </end encoding let op_Plus_Percent_Hat>


; <Start encoding let op_Subtraction_Hat>

(declare-fun FStar.UInt64.op_Subtraction_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Subtraction_Hat@tok () Term)


; </end encoding let op_Subtraction_Hat>


; <Start encoding let op_Subtraction_Question_Hat>

(declare-fun FStar.UInt64.op_Subtraction_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Subtraction_Question_Hat@tok () Term)


; </end encoding let op_Subtraction_Question_Hat>


; <Start encoding let op_Subtraction_Percent_Hat>

(declare-fun FStar.UInt64.op_Subtraction_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Subtraction_Percent_Hat@tok () Term)


; </end encoding let op_Subtraction_Percent_Hat>


; <Start encoding let op_Star_Hat>

(declare-fun FStar.UInt64.op_Star_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Star_Hat@tok () Term)


; </end encoding let op_Star_Hat>


; <Start encoding let op_Star_Question_Hat>

(declare-fun FStar.UInt64.op_Star_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Star_Question_Hat@tok () Term)


; </end encoding let op_Star_Question_Hat>


; <Start encoding let op_Star_Percent_Hat>

(declare-fun FStar.UInt64.op_Star_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Star_Percent_Hat@tok () Term)


; </end encoding let op_Star_Percent_Hat>


; <Start encoding let op_Slash_Hat>


(declare-fun FStar.UInt64.op_Slash_Hat (Term Term) Term)



(declare-fun FStar.UInt64.op_Slash_Hat@tok () Term)



; </end encoding let op_Slash_Hat>


; <Start encoding let op_Percent_Hat>


(declare-fun FStar.UInt64.op_Percent_Hat (Term Term) Term)



(declare-fun FStar.UInt64.op_Percent_Hat@tok () Term)



; </end encoding let op_Percent_Hat>


; <Start encoding let op_Hat_Hat>

(declare-fun FStar.UInt64.op_Hat_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Hat_Hat@tok () Term)


; </end encoding let op_Hat_Hat>


; <Start encoding let op_Amp_Hat>

(declare-fun FStar.UInt64.op_Amp_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Amp_Hat@tok () Term)


; </end encoding let op_Amp_Hat>


; <Start encoding let op_Bar_Hat>

(declare-fun FStar.UInt64.op_Bar_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Bar_Hat@tok () Term)


; </end encoding let op_Bar_Hat>


; <Start encoding let op_Less_Less_Hat>

(declare-fun FStar.UInt64.op_Less_Less_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Less_Less_Hat@tok () Term)


; </end encoding let op_Less_Less_Hat>


; <Start encoding let op_Greater_Greater_Hat>

(declare-fun FStar.UInt64.op_Greater_Greater_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Greater_Greater_Hat@tok () Term)


; </end encoding let op_Greater_Greater_Hat>


; <Start encoding let op_Equals_Hat>

(declare-fun FStar.UInt64.op_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt64.op_Equals_Hat@tok () Term)

; </end encoding let op_Equals_Hat>


; <Start encoding let op_Greater_Hat>

(declare-fun FStar.UInt64.op_Greater_Hat (Term Term) Term)

(declare-fun FStar.UInt64.op_Greater_Hat@tok () Term)

; </end encoding let op_Greater_Hat>


; <Start encoding let op_Greater_Equals_Hat>

(declare-fun FStar.UInt64.op_Greater_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt64.op_Greater_Equals_Hat@tok () Term)

; </end encoding let op_Greater_Equals_Hat>


; <Start encoding let op_Less_Hat>

(declare-fun FStar.UInt64.op_Less_Hat (Term Term) Term)

(declare-fun FStar.UInt64.op_Less_Hat@tok () Term)

; </end encoding let op_Less_Hat>


; <Start encoding let op_Less_Equals_Hat>

(declare-fun FStar.UInt64.op_Less_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt64.op_Less_Equals_Hat@tok () Term)

; </end encoding let op_Less_Equals_Hat>


; <Start encoding val FStar.UInt64.to_string>

(declare-fun FStar.UInt64.to_string (Term) Term)
(declare-fun Tm_arrow_9181e066d5f5e8abb661df26378ed002 () Term)
(declare-fun FStar.UInt64.to_string@tok () Term)

; </end encoding val FStar.UInt64.to_string>


; <Start encoding val FStar.UInt64.to_string_hex>

(declare-fun FStar.UInt64.to_string_hex (Term) Term)

(declare-fun FStar.UInt64.to_string_hex@tok () Term)

; </end encoding val FStar.UInt64.to_string_hex>


; <Start encoding val FStar.UInt64.to_string_hex_pad>

(declare-fun FStar.UInt64.to_string_hex_pad (Term) Term)

(declare-fun FStar.UInt64.to_string_hex_pad@tok () Term)

; </end encoding val FStar.UInt64.to_string_hex_pad>


; <Start encoding val FStar.UInt64.of_string>

(declare-fun FStar.UInt64.of_string (Term) Term)
(declare-fun Tm_arrow_d8ed8461d1bddbfa79f5d5b77e608759 () Term)
(declare-fun FStar.UInt64.of_string@tok () Term)

; </end encoding val FStar.UInt64.of_string>


; <Skipped #set-options "--admit_smt_queries true"/>


; <Start encoding let __uint_to_t>

(declare-fun FStar.UInt64.__uint_to_t (Term) Term)
(declare-fun Tm_arrow_583103ad9bf405c63f576183363ae2d9 () Term)
(declare-fun FStar.UInt64.__uint_to_t@tok () Term)

; </end encoding let __uint_to_t>


; <Skipped #reset-options/>


; End Externals for interface FStar.UInt64


; Externals for interface FStar.UInt8


; <Start encoding let n>

(declare-fun FStar.UInt8.n (Dummy_sort) Term)

; </end encoding let n>


; <Skipped #set-options "--max_fuel 0 --max_ifuel 0"/>


; <Start encoding val FStar.UInt8.t>

(declare-fun FStar.UInt8.t (Dummy_sort) Term)

; </end encoding val FStar.UInt8.t>


; <Start encoding val FStar.UInt8.v>

(declare-fun FStar.UInt8.v (Term) Term)
(declare-fun Tm_arrow_3777b5a630a36e62279f05e8abae7a72 () Term)
(declare-fun FStar.UInt8.v@tok () Term)

; </end encoding val FStar.UInt8.v>


; <Start encoding val FStar.UInt8.uint_to_t>

(declare-fun FStar.UInt8.uint_to_t (Term) Term)
(declare-fun Tm_refine_25c72d704900d626b30894312c325451 (Term) Term)
(declare-fun Tm_arrow_99681d89836a4c650badaf3b898e0fd2 () Term)
(declare-fun FStar.UInt8.uint_to_t@tok () Term)


; </end encoding val FStar.UInt8.uint_to_t>


; <Start encoding val FStar.UInt8.uv_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt8.uv_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt8.uv_inv@tok () Term)

; </end encoding val FStar.UInt8.uv_inv>


; <Start encoding val FStar.UInt8.vu_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt8.vu_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt8.vu_inv@tok () Term)

; </end encoding val FStar.UInt8.vu_inv>


; <Start encoding val FStar.UInt8.v_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt8.v_inj (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt8.v_inj@tok () Term)

; </end encoding val FStar.UInt8.v_inj>


; <Start encoding val FStar.UInt8.zero>

(declare-fun FStar.UInt8.zero (Dummy_sort) Term)
(declare-fun Tm_refine_70356e30ad97b892992d5e77127e234b () Term)


; </end encoding val FStar.UInt8.zero>


; <Start encoding val FStar.UInt8.one>

(declare-fun FStar.UInt8.one (Dummy_sort) Term)
(declare-fun Tm_refine_9a778967dadeb1d9cdc158a156c04472 () Term)


; </end encoding val FStar.UInt8.one>


; <Start encoding val FStar.UInt8.add>

(declare-fun FStar.UInt8.add (Term Term) Term)
(declare-fun Tm_refine_e7a8c22ddf5fa06051ce01d4308e93c9 (Term Term) Term)
(declare-fun Tm_arrow_93f019685d372e95eac5ee2026269943 () Term)
(declare-fun FStar.UInt8.add@tok () Term)


; </end encoding val FStar.UInt8.add>


; <Start encoding val FStar.UInt8.add_underspec>

(declare-fun FStar.UInt8.add_underspec (Term Term) Term)
(declare-fun Tm_refine_e2fc73b749d5084f2161a1b2256e684a (Term Term) Term)
(declare-fun Tm_arrow_c4436082bc35b52549c292a4092c74f2 () Term)
(declare-fun FStar.UInt8.add_underspec@tok () Term)


; </end encoding val FStar.UInt8.add_underspec>


; <Start encoding val FStar.UInt8.add_mod>

(declare-fun FStar.UInt8.add_mod (Term Term) Term)
(declare-fun Tm_refine_c5c06f774ce917320ace84c78a678f3a (Term Term) Term)
(declare-fun Tm_arrow_52ecb5e08ede937a376b797f76452f11 () Term)
(declare-fun FStar.UInt8.add_mod@tok () Term)


; </end encoding val FStar.UInt8.add_mod>


; <Start encoding val FStar.UInt8.sub>

(declare-fun FStar.UInt8.sub (Term Term) Term)
(declare-fun Tm_refine_b9fa04b492b01fd435452ff429d13919 (Term Term) Term)
(declare-fun Tm_arrow_ec1e3750fe88626fd39551f91ea86fc8 () Term)
(declare-fun FStar.UInt8.sub@tok () Term)


; </end encoding val FStar.UInt8.sub>


; <Start encoding val FStar.UInt8.sub_underspec>

(declare-fun FStar.UInt8.sub_underspec (Term Term) Term)
(declare-fun Tm_refine_2f0c7364767f32abaf6bd4293573996b (Term Term) Term)
(declare-fun Tm_arrow_9b74ded99c9ac1ce430c56353e375533 () Term)
(declare-fun FStar.UInt8.sub_underspec@tok () Term)


; </end encoding val FStar.UInt8.sub_underspec>


; <Start encoding val FStar.UInt8.sub_mod>

(declare-fun FStar.UInt8.sub_mod (Term Term) Term)
(declare-fun Tm_refine_31110a8e88288515f5ff8c631a6fc5fd (Term Term) Term)
(declare-fun Tm_arrow_f944420b8232be8a08ac1eac1a8cfc60 () Term)
(declare-fun FStar.UInt8.sub_mod@tok () Term)


; </end encoding val FStar.UInt8.sub_mod>


; <Start encoding val FStar.UInt8.mul>

(declare-fun FStar.UInt8.mul (Term Term) Term)
(declare-fun Tm_refine_d72a979d91a11894cbd64b344a4b0237 (Term Term) Term)
(declare-fun Tm_arrow_f916cf085880111e18cd4d6a364c6342 () Term)
(declare-fun FStar.UInt8.mul@tok () Term)


; </end encoding val FStar.UInt8.mul>


; <Start encoding val FStar.UInt8.mul_underspec>

(declare-fun FStar.UInt8.mul_underspec (Term Term) Term)
(declare-fun Tm_refine_12692332647397b458ce816ee08aa096 (Term Term) Term)
(declare-fun Tm_arrow_44a424ccb654a64902b3f4c4584dfee1 () Term)
(declare-fun FStar.UInt8.mul_underspec@tok () Term)


; </end encoding val FStar.UInt8.mul_underspec>


; <Start encoding val FStar.UInt8.mul_mod>

(declare-fun FStar.UInt8.mul_mod (Term Term) Term)
(declare-fun Tm_refine_4ce5cfa0cf1c69159e9310e6885c3e22 (Term Term) Term)
(declare-fun Tm_arrow_082e5a7318c49f7336161f30b53f326f () Term)
(declare-fun FStar.UInt8.mul_mod@tok () Term)


; </end encoding val FStar.UInt8.mul_mod>


; <Start encoding val FStar.UInt8.div>

(declare-fun Tm_refine_a8cb57fcf32c2764d2e39fc97ecb3aa0 () Term)
(declare-fun FStar.UInt8.div (Term Term) Term)

(declare-fun Tm_refine_488bac52b9d15f98f9de642f30db345a (Term Term) Term)
(declare-fun Tm_arrow_032d4f95524b20f7a0ffe6be0a29e0dd () Term)
(declare-fun FStar.UInt8.div@tok () Term)


; </end encoding val FStar.UInt8.div>


; <Start encoding val FStar.UInt8.rem>


(declare-fun FStar.UInt8.rem (Term Term) Term)

(declare-fun Tm_refine_41d38db91700fb5bf8d345e71a7ea813 (Term Term) Term)
(declare-fun Tm_arrow_cce9ccb13b0c72c92896f9584ae44f9a () Term)
(declare-fun FStar.UInt8.rem@tok () Term)


; </end encoding val FStar.UInt8.rem>


; <Start encoding val FStar.UInt8.logand>

(declare-fun FStar.UInt8.logand (Term Term) Term)
(declare-fun Tm_refine_71d1a346f76194fb038bba96302ce90d (Term Term) Term)
(declare-fun Tm_arrow_606a7fadbc7c16f0b0151a905dbf43f5 () Term)
(declare-fun FStar.UInt8.logand@tok () Term)


; </end encoding val FStar.UInt8.logand>


; <Start encoding val FStar.UInt8.logxor>

(declare-fun FStar.UInt8.logxor (Term Term) Term)
(declare-fun Tm_refine_97e4a63388ae45ee4261a689ecdcc635 (Term Term) Term)
(declare-fun Tm_arrow_64e5ecb00734a6581a045079ffb5fe59 () Term)
(declare-fun FStar.UInt8.logxor@tok () Term)


; </end encoding val FStar.UInt8.logxor>


; <Start encoding val FStar.UInt8.logor>

(declare-fun FStar.UInt8.logor (Term Term) Term)
(declare-fun Tm_refine_a7fcc8489f92354d1f8a101b7f900b3b (Term Term) Term)
(declare-fun Tm_arrow_32400c8ec986ceb55a1554f2089e0efa () Term)
(declare-fun FStar.UInt8.logor@tok () Term)


; </end encoding val FStar.UInt8.logor>


; <Start encoding val FStar.UInt8.lognot>

(declare-fun FStar.UInt8.lognot (Term) Term)
(declare-fun Tm_refine_455031e9fe191e56270c683d0e98b61b (Term) Term)
(declare-fun Tm_arrow_1a84223456a82ceb3bff40c0b2935125 () Term)
(declare-fun FStar.UInt8.lognot@tok () Term)


; </end encoding val FStar.UInt8.lognot>


; <Start encoding val FStar.UInt8.shift_right>

(declare-fun FStar.UInt8.shift_right (Term Term) Term)
(declare-fun Tm_refine_098e5306776c74ab1df7fd9dd6d3b590 (Term Term) Term)
(declare-fun Tm_arrow_b066c40415d68ecc38942bb71d3e3f6f () Term)
(declare-fun FStar.UInt8.shift_right@tok () Term)


; </end encoding val FStar.UInt8.shift_right>


; <Start encoding val FStar.UInt8.shift_left>

(declare-fun FStar.UInt8.shift_left (Term Term) Term)
(declare-fun Tm_refine_a97317ecf8cf07e3c11fb9b0d3ed777c (Term Term) Term)
(declare-fun Tm_arrow_07d4bb9ab4248e20b62c52c13b75d97e () Term)
(declare-fun FStar.UInt8.shift_left@tok () Term)


; </end encoding val FStar.UInt8.shift_left>


; <Start encoding let eq>

(declare-fun FStar.UInt8.eq (Term Term) Term)
(declare-fun Tm_arrow_044ce6ce0f384eef0fc1f6f3f8f2f074 () Term)
(declare-fun FStar.UInt8.eq@tok () Term)

; </end encoding let eq>


; <Start encoding let gt>

(declare-fun FStar.UInt8.gt (Term Term) Term)

(declare-fun FStar.UInt8.gt@tok () Term)

; </end encoding let gt>


; <Start encoding let gte>

(declare-fun FStar.UInt8.gte (Term Term) Term)

(declare-fun FStar.UInt8.gte@tok () Term)

; </end encoding let gte>


; <Start encoding let lt>

(declare-fun FStar.UInt8.lt (Term Term) Term)

(declare-fun FStar.UInt8.lt@tok () Term)

; </end encoding let lt>


; <Start encoding let lte>

(declare-fun FStar.UInt8.lte (Term Term) Term)

(declare-fun FStar.UInt8.lte@tok () Term)

; </end encoding let lte>


; <Start encoding let minus>

(declare-fun FStar.UInt8.minus (Term) Term)
(declare-fun Tm_arrow_53a47de46a631aa3eac76ad156b433ff () Term)
(declare-fun FStar.UInt8.minus@tok () Term)

; </end encoding let minus>


; <Start encoding let n_minus_one>

(declare-fun FStar.UInt8.n_minus_one (Dummy_sort) Term)

; </end encoding let n_minus_one>


; <Skipped #set-options "--z3rlimit 80 --initial_fuel 1 --max_fuel 1"/>


; <Start encoding let eq_mask>

(declare-fun FStar.UInt8.eq_mask (Term Term) Term)
(declare-fun Tm_refine_4b365856d6f9222ae4baaff2421b1f3d (Term Term) Term)
(declare-fun Tm_arrow_a445c7cdf140b45a21388352df89d169 () Term)
(declare-fun FStar.UInt8.eq_mask@tok () Term)


; </end encoding let eq_mask>


; <Start encoding val FStar.UInt8.lemma_sub_msbs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt8.lemma_sub_msbs (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt8.lemma_sub_msbs@tok () Term)

; </end encoding val FStar.UInt8.lemma_sub_msbs>


; <Start encoding let gte_mask>

(declare-fun FStar.UInt8.gte_mask (Term Term) Term)
(declare-fun Tm_refine_d0b1e2944ee74da332d1b0864caf4a29 (Term Term) Term)
(declare-fun Tm_arrow_fdec4315b860ac38893cb3277ba98c8c () Term)
(declare-fun FStar.UInt8.gte_mask@tok () Term)


; </end encoding let gte_mask>


; <Skipped #reset-options/>


; <Start encoding let op_Plus_Hat>

(declare-fun FStar.UInt8.op_Plus_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Plus_Hat@tok () Term)


; </end encoding let op_Plus_Hat>


; <Start encoding let op_Plus_Question_Hat>

(declare-fun FStar.UInt8.op_Plus_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Plus_Question_Hat@tok () Term)


; </end encoding let op_Plus_Question_Hat>


; <Start encoding let op_Plus_Percent_Hat>

(declare-fun FStar.UInt8.op_Plus_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Plus_Percent_Hat@tok () Term)


; </end encoding let op_Plus_Percent_Hat>


; <Start encoding let op_Subtraction_Hat>

(declare-fun FStar.UInt8.op_Subtraction_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Subtraction_Hat@tok () Term)


; </end encoding let op_Subtraction_Hat>


; <Start encoding let op_Subtraction_Question_Hat>

(declare-fun FStar.UInt8.op_Subtraction_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Subtraction_Question_Hat@tok () Term)


; </end encoding let op_Subtraction_Question_Hat>


; <Start encoding let op_Subtraction_Percent_Hat>

(declare-fun FStar.UInt8.op_Subtraction_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Subtraction_Percent_Hat@tok () Term)


; </end encoding let op_Subtraction_Percent_Hat>


; <Start encoding let op_Star_Hat>

(declare-fun FStar.UInt8.op_Star_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Star_Hat@tok () Term)


; </end encoding let op_Star_Hat>


; <Start encoding let op_Star_Question_Hat>

(declare-fun FStar.UInt8.op_Star_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Star_Question_Hat@tok () Term)


; </end encoding let op_Star_Question_Hat>


; <Start encoding let op_Star_Percent_Hat>

(declare-fun FStar.UInt8.op_Star_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Star_Percent_Hat@tok () Term)


; </end encoding let op_Star_Percent_Hat>


; <Start encoding let op_Slash_Hat>


(declare-fun FStar.UInt8.op_Slash_Hat (Term Term) Term)



(declare-fun FStar.UInt8.op_Slash_Hat@tok () Term)



; </end encoding let op_Slash_Hat>


; <Start encoding let op_Percent_Hat>


(declare-fun FStar.UInt8.op_Percent_Hat (Term Term) Term)



(declare-fun FStar.UInt8.op_Percent_Hat@tok () Term)



; </end encoding let op_Percent_Hat>


; <Start encoding let op_Hat_Hat>

(declare-fun FStar.UInt8.op_Hat_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Hat_Hat@tok () Term)


; </end encoding let op_Hat_Hat>


; <Start encoding let op_Amp_Hat>

(declare-fun FStar.UInt8.op_Amp_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Amp_Hat@tok () Term)


; </end encoding let op_Amp_Hat>


; <Start encoding let op_Bar_Hat>

(declare-fun FStar.UInt8.op_Bar_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Bar_Hat@tok () Term)


; </end encoding let op_Bar_Hat>


; <Start encoding let op_Less_Less_Hat>

(declare-fun FStar.UInt8.op_Less_Less_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Less_Less_Hat@tok () Term)


; </end encoding let op_Less_Less_Hat>


; <Start encoding let op_Greater_Greater_Hat>

(declare-fun FStar.UInt8.op_Greater_Greater_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Greater_Greater_Hat@tok () Term)


; </end encoding let op_Greater_Greater_Hat>


; <Start encoding let op_Equals_Hat>

(declare-fun FStar.UInt8.op_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt8.op_Equals_Hat@tok () Term)

; </end encoding let op_Equals_Hat>


; <Start encoding let op_Greater_Hat>

(declare-fun FStar.UInt8.op_Greater_Hat (Term Term) Term)

(declare-fun FStar.UInt8.op_Greater_Hat@tok () Term)

; </end encoding let op_Greater_Hat>


; <Start encoding let op_Greater_Equals_Hat>

(declare-fun FStar.UInt8.op_Greater_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt8.op_Greater_Equals_Hat@tok () Term)

; </end encoding let op_Greater_Equals_Hat>


; <Start encoding let op_Less_Hat>

(declare-fun FStar.UInt8.op_Less_Hat (Term Term) Term)

(declare-fun FStar.UInt8.op_Less_Hat@tok () Term)

; </end encoding let op_Less_Hat>


; <Start encoding let op_Less_Equals_Hat>

(declare-fun FStar.UInt8.op_Less_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt8.op_Less_Equals_Hat@tok () Term)

; </end encoding let op_Less_Equals_Hat>


; <Start encoding val FStar.UInt8.to_string>

(declare-fun FStar.UInt8.to_string (Term) Term)
(declare-fun Tm_arrow_630ce6920914ed05e3724fa72d06132c () Term)
(declare-fun FStar.UInt8.to_string@tok () Term)

; </end encoding val FStar.UInt8.to_string>


; <Start encoding val FStar.UInt8.to_string_hex>

(declare-fun FStar.UInt8.to_string_hex (Term) Term)

(declare-fun FStar.UInt8.to_string_hex@tok () Term)

; </end encoding val FStar.UInt8.to_string_hex>


; <Start encoding val FStar.UInt8.to_string_hex_pad>

(declare-fun FStar.UInt8.to_string_hex_pad (Term) Term)

(declare-fun FStar.UInt8.to_string_hex_pad@tok () Term)

; </end encoding val FStar.UInt8.to_string_hex_pad>


; <Start encoding val FStar.UInt8.of_string>

(declare-fun FStar.UInt8.of_string (Term) Term)
(declare-fun Tm_arrow_2b6f4c2bff8eb5d0563e8b6985a71043 () Term)
(declare-fun FStar.UInt8.of_string@tok () Term)

; </end encoding val FStar.UInt8.of_string>


; <Skipped #set-options "--admit_smt_queries true"/>


; <Start encoding let __uint_to_t>

(declare-fun FStar.UInt8.__uint_to_t (Term) Term)
(declare-fun Tm_arrow_52383a4d974551ee41b2c1746d04b8c5 () Term)
(declare-fun FStar.UInt8.__uint_to_t@tok () Term)

; </end encoding let __uint_to_t>


; <Skipped #reset-options/>


; <Start encoding let byte>

(declare-fun FStar.UInt8.byte (Dummy_sort) Term)

; </end encoding let byte>


; End Externals for interface FStar.UInt8


; Externals for module FStar.Int.Cast


; <Start encoding let op_At_Percent>


(declare-fun FStar.Int.Cast.op_At_Percent (Term Term) Term)


(declare-fun FStar.Int.Cast.op_At_Percent@tok () Term)


; </end encoding let op_At_Percent>


; <Skipped val FStar.Int.Cast.uint8_to_uint64/>


; <Start encoding let uint8_to_uint64>

(declare-fun FStar.Int.Cast.uint8_to_uint64 (Term) Term)
(declare-fun Tm_refine_6188ec86658c123c2c3404e80bc93cd0 () Term)
(declare-fun Tm_refine_a227ad0d71254edda31227d9c263f41f (Term) Term)
(declare-fun Tm_arrow_b30868c48f909fad59360eb5436def27 () Term)
(declare-fun FStar.Int.Cast.uint8_to_uint64@tok () Term)



; </end encoding let uint8_to_uint64>


; <Skipped val FStar.Int.Cast.uint8_to_uint32/>


; <Start encoding let uint8_to_uint32>

(declare-fun FStar.Int.Cast.uint8_to_uint32 (Term) Term)
(declare-fun Tm_refine_19e88ca5b68046e66eaf6d879a230cb2 () Term)
(declare-fun Tm_refine_f9fef8e8f7fb988701b6ae18e80c3650 (Term) Term)
(declare-fun Tm_arrow_3e792841744f96fe34ece25ea0958b5a () Term)
(declare-fun FStar.Int.Cast.uint8_to_uint32@tok () Term)



; </end encoding let uint8_to_uint32>


; <Skipped val FStar.Int.Cast.uint8_to_uint16/>


; <Start encoding let uint8_to_uint16>

(declare-fun FStar.Int.Cast.uint8_to_uint16 (Term) Term)
(declare-fun Tm_refine_4654dd4b2d6f243e5ec6eaf9826069c9 () Term)
(declare-fun Tm_refine_541d06ed6731928026bc39b1981eb00a (Term) Term)
(declare-fun Tm_arrow_33d01fdbf74fe116db26d351fc7017a6 () Term)
(declare-fun FStar.Int.Cast.uint8_to_uint16@tok () Term)



; </end encoding let uint8_to_uint16>


; <Skipped val FStar.Int.Cast.uint16_to_uint64/>


; <Start encoding let uint16_to_uint64>

(declare-fun FStar.Int.Cast.uint16_to_uint64 (Term) Term)
(declare-fun Tm_refine_4540dfbe159ce3f577a577d113336bcc () Term)
(declare-fun Tm_refine_9cf469fa8489cbf1b2ed08a71b5743d4 (Term) Term)
(declare-fun Tm_arrow_0cb6afa4d92844783b58f16fffb2aadd () Term)
(declare-fun FStar.Int.Cast.uint16_to_uint64@tok () Term)



; </end encoding let uint16_to_uint64>


; <Skipped val FStar.Int.Cast.uint16_to_uint32/>


; <Start encoding let uint16_to_uint32>

(declare-fun FStar.Int.Cast.uint16_to_uint32 (Term) Term)
(declare-fun Tm_refine_f91ac8d5efb06a83fcdb210426823423 () Term)
(declare-fun Tm_refine_88c857def71d9b11ced5e5e041edc24e (Term) Term)
(declare-fun Tm_arrow_effa2521fbf4da1bc3af389a0b715be8 () Term)
(declare-fun FStar.Int.Cast.uint16_to_uint32@tok () Term)



; </end encoding let uint16_to_uint32>


; <Skipped val FStar.Int.Cast.uint16_to_uint8/>


; <Start encoding let uint16_to_uint8>

(declare-fun FStar.Int.Cast.uint16_to_uint8 (Term) Term)
(declare-fun Tm_refine_af2ccefb76d12e4faeb5a044fc7b97fa (Term) Term)
(declare-fun Tm_arrow_0973f66356bdca368f98d6064110c664 () Term)
(declare-fun FStar.Int.Cast.uint16_to_uint8@tok () Term)


; </end encoding let uint16_to_uint8>


; <Skipped val FStar.Int.Cast.uint32_to_uint64/>


; <Start encoding let uint32_to_uint64>

(declare-fun FStar.Int.Cast.uint32_to_uint64 (Term) Term)
(declare-fun Tm_refine_a16f87d3d33f1a5fd74bee8c48ea5bbe () Term)
(declare-fun Tm_refine_d15a9766d4c1ec94d1574f05b54a618b (Term) Term)
(declare-fun Tm_arrow_e9cf004be5f180c5a2491182d3c322b8 () Term)
(declare-fun FStar.Int.Cast.uint32_to_uint64@tok () Term)



; </end encoding let uint32_to_uint64>


; <Skipped val FStar.Int.Cast.uint32_to_uint16/>


; <Start encoding let uint32_to_uint16>

(declare-fun FStar.Int.Cast.uint32_to_uint16 (Term) Term)
(declare-fun Tm_refine_c2c08e6a1513c9b4fdaa7cb1c01945c6 (Term) Term)
(declare-fun Tm_arrow_44b897918d7bbfb0379cac98e600cdb5 () Term)
(declare-fun FStar.Int.Cast.uint32_to_uint16@tok () Term)


; </end encoding let uint32_to_uint16>


; <Skipped val FStar.Int.Cast.uint32_to_uint8/>


; <Start encoding let uint32_to_uint8>

(declare-fun FStar.Int.Cast.uint32_to_uint8 (Term) Term)
(declare-fun Tm_refine_d9192f4297d24144581d486ededefa39 (Term) Term)
(declare-fun Tm_arrow_73ce2f9c6c951295db44e8ce00c6ac3a () Term)
(declare-fun FStar.Int.Cast.uint32_to_uint8@tok () Term)


; </end encoding let uint32_to_uint8>


; <Skipped val FStar.Int.Cast.uint64_to_uint32/>


; <Start encoding let uint64_to_uint32>

(declare-fun FStar.Int.Cast.uint64_to_uint32 (Term) Term)
(declare-fun Tm_refine_a3e91433acc705e2c7f5ab6f610b2493 (Term) Term)
(declare-fun Tm_arrow_8e494e3841dc742bdc3169e6e7f0e520 () Term)
(declare-fun FStar.Int.Cast.uint64_to_uint32@tok () Term)


; </end encoding let uint64_to_uint32>


; <Skipped val FStar.Int.Cast.uint64_to_uint16/>


; <Start encoding let uint64_to_uint16>

(declare-fun FStar.Int.Cast.uint64_to_uint16 (Term) Term)
(declare-fun Tm_refine_b1d824cf2088b268a2840e4d24632eda (Term) Term)
(declare-fun Tm_arrow_352d26b5f6ecf750411cfeb6933dfb62 () Term)
(declare-fun FStar.Int.Cast.uint64_to_uint16@tok () Term)


; </end encoding let uint64_to_uint16>


; <Skipped val FStar.Int.Cast.uint64_to_uint8/>


; <Start encoding let uint64_to_uint8>

(declare-fun FStar.Int.Cast.uint64_to_uint8 (Term) Term)
(declare-fun Tm_refine_0d41224c682684630fd89def512a35ee (Term) Term)
(declare-fun Tm_arrow_52e28d461537e7b65f5e8cc14082e14e () Term)
(declare-fun FStar.Int.Cast.uint64_to_uint8@tok () Term)


; </end encoding let uint64_to_uint8>


; <Skipped val FStar.Int.Cast.int8_to_int64/>


; <Start encoding let int8_to_int64>

(declare-fun FStar.Int.Cast.int8_to_int64 (Term) Term)
(declare-fun Tm_refine_a399bc5b4c3acf4a57becd3ec8db4b3b () Term)
(declare-fun Tm_refine_e314adf6675e8533aa83c6ce5c71c9fa (Term) Term)
(declare-fun Tm_arrow_112f07b72afdf921786d46937965a1b3 () Term)
(declare-fun FStar.Int.Cast.int8_to_int64@tok () Term)



; </end encoding let int8_to_int64>


; <Skipped val FStar.Int.Cast.int8_to_int32/>


; <Start encoding let int8_to_int32>

(declare-fun FStar.Int.Cast.int8_to_int32 (Term) Term)
(declare-fun Tm_refine_20555d4690db1ab7ba8f509bea00b24d () Term)
(declare-fun Tm_refine_4b22c947a87151885c92e2a7e2bd109a (Term) Term)
(declare-fun Tm_arrow_cc1dacf0370411eadb726abae2d44f63 () Term)
(declare-fun FStar.Int.Cast.int8_to_int32@tok () Term)



; </end encoding let int8_to_int32>


; <Skipped val FStar.Int.Cast.int8_to_int16/>


; <Start encoding let int8_to_int16>

(declare-fun FStar.Int.Cast.int8_to_int16 (Term) Term)
(declare-fun Tm_refine_b44e12994d2f4788a60cf11dcbfb8611 () Term)
(declare-fun Tm_refine_3ab503ce232a68746613ae032acba034 (Term) Term)
(declare-fun Tm_arrow_b80c1c6617bae3238804d4038267872c () Term)
(declare-fun FStar.Int.Cast.int8_to_int16@tok () Term)



; </end encoding let int8_to_int16>


; <Skipped val FStar.Int.Cast.int16_to_int64/>


; <Start encoding let int16_to_int64>

(declare-fun FStar.Int.Cast.int16_to_int64 (Term) Term)
(declare-fun Tm_refine_d4a84b93f9d98f1d1f86f8d8c79db285 () Term)
(declare-fun Tm_refine_602f9bac7efb12d89f78e75f59b9e80c (Term) Term)
(declare-fun Tm_arrow_1457f2d0e07ecb83fbdf06135d5b6bbb () Term)
(declare-fun FStar.Int.Cast.int16_to_int64@tok () Term)



; </end encoding let int16_to_int64>


; <Skipped val FStar.Int.Cast.int16_to_int32/>


; <Start encoding let int16_to_int32>

(declare-fun FStar.Int.Cast.int16_to_int32 (Term) Term)
(declare-fun Tm_refine_99be29c5f33c48c1672d3faa43f9cdfd () Term)
(declare-fun Tm_refine_f8e9042428580164ec1dc6c00c7f5cab (Term) Term)
(declare-fun Tm_arrow_f5c1843595acef62eca586a78487a579 () Term)
(declare-fun FStar.Int.Cast.int16_to_int32@tok () Term)



; </end encoding let int16_to_int32>


; <Skipped val FStar.Int.Cast.int16_to_int8/>


; <Start encoding let int16_to_int8>

(declare-fun FStar.Int.Cast.int16_to_int8 (Term) Term)
(declare-fun Tm_refine_a995c3cc7036f692b497220b043bcc27 (Term) Term)
(declare-fun Tm_arrow_f397785bfa03aa7f2d33767382b007da () Term)
(declare-fun FStar.Int.Cast.int16_to_int8@tok () Term)


; </end encoding let int16_to_int8>


; <Skipped val FStar.Int.Cast.int32_to_int64/>


; <Start encoding let int32_to_int64>

(declare-fun FStar.Int.Cast.int32_to_int64 (Term) Term)
(declare-fun Tm_refine_a8ce8a30c934a9cee3859f020c8d307b () Term)
(declare-fun Tm_refine_9f01234bd71588dca9c7d75e62bba5a9 (Term) Term)
(declare-fun Tm_arrow_f7c8b6ce706610352f972de2080cf6ea () Term)
(declare-fun FStar.Int.Cast.int32_to_int64@tok () Term)



; </end encoding let int32_to_int64>


; <Skipped val FStar.Int.Cast.int32_to_int16/>


; <Start encoding let int32_to_int16>

(declare-fun FStar.Int.Cast.int32_to_int16 (Term) Term)
(declare-fun Tm_refine_5f29c16e7741c37a49590c89f05643b9 (Term) Term)
(declare-fun Tm_arrow_cfb2c82411d7bff610842a265ad0e4fa () Term)
(declare-fun FStar.Int.Cast.int32_to_int16@tok () Term)


; </end encoding let int32_to_int16>


; <Skipped val FStar.Int.Cast.int32_to_int8/>


; <Start encoding let int32_to_int8>

(declare-fun FStar.Int.Cast.int32_to_int8 (Term) Term)
(declare-fun Tm_refine_05ff8833bcb488276b58c943e39d656a (Term) Term)
(declare-fun Tm_arrow_6b394b648b995ce2ae50470efff7e3e2 () Term)
(declare-fun FStar.Int.Cast.int32_to_int8@tok () Term)


; </end encoding let int32_to_int8>


; <Skipped val FStar.Int.Cast.int64_to_int32/>


; <Start encoding let int64_to_int32>

(declare-fun FStar.Int.Cast.int64_to_int32 (Term) Term)
(declare-fun Tm_refine_72ca2444b5d1539855725300fe501b81 (Term) Term)
(declare-fun Tm_arrow_5abf0ed1cc53d42c3093f36570bc7b1b () Term)
(declare-fun FStar.Int.Cast.int64_to_int32@tok () Term)


; </end encoding let int64_to_int32>


; <Skipped val FStar.Int.Cast.int64_to_int16/>


; <Start encoding let int64_to_int16>

(declare-fun FStar.Int.Cast.int64_to_int16 (Term) Term)
(declare-fun Tm_refine_da9342fe71736f1f888ac59e58b690cd (Term) Term)
(declare-fun Tm_arrow_d54f7fb1b8fc5952ed9540682bfb17e9 () Term)
(declare-fun FStar.Int.Cast.int64_to_int16@tok () Term)


; </end encoding let int64_to_int16>


; <Skipped val FStar.Int.Cast.int64_to_int8/>


; <Start encoding let int64_to_int8>

(declare-fun FStar.Int.Cast.int64_to_int8 (Term) Term)
(declare-fun Tm_refine_e2fc29919093cf2cde4a21a4afcc83ab (Term) Term)
(declare-fun Tm_arrow_3bc98739d3f8dbecf4c2a9665877518d () Term)
(declare-fun FStar.Int.Cast.int64_to_int8@tok () Term)


; </end encoding let int64_to_int8>


; <Skipped val FStar.Int.Cast.uint8_to_int64/>


; <Start encoding let uint8_to_int64>

(declare-fun FStar.Int.Cast.uint8_to_int64 (Term) Term)
(declare-fun Tm_refine_66b01e5a04cd5e59f9a6490d74f9c117 () Term)
(declare-fun Tm_refine_23f1c9c80c0b98a15e596c93c1434016 (Term) Term)
(declare-fun Tm_arrow_3616393d5a98b958597af8ff4c1d66c3 () Term)
(declare-fun FStar.Int.Cast.uint8_to_int64@tok () Term)



; </end encoding let uint8_to_int64>


; <Skipped val FStar.Int.Cast.uint8_to_int32/>


; <Start encoding let uint8_to_int32>

(declare-fun FStar.Int.Cast.uint8_to_int32 (Term) Term)
(declare-fun Tm_refine_30f54be659cb3068ff6b4d29fbfd37b9 () Term)
(declare-fun Tm_refine_cf578fb296bd23c2c44ac23f0c1ab02f (Term) Term)
(declare-fun Tm_arrow_9cb44043a017b4a323f7c0ec9ca86bd3 () Term)
(declare-fun FStar.Int.Cast.uint8_to_int32@tok () Term)



; </end encoding let uint8_to_int32>


; <Skipped val FStar.Int.Cast.uint8_to_int16/>


; <Start encoding let uint8_to_int16>

(declare-fun FStar.Int.Cast.uint8_to_int16 (Term) Term)
(declare-fun Tm_refine_0fa467ad3d3ad969314aac98bb8e0d1b () Term)
(declare-fun Tm_refine_ae02686b9f6923456fd487c2c9b9e342 (Term) Term)
(declare-fun Tm_arrow_4a9ea178892403f6f322eefcf79a587d () Term)
(declare-fun FStar.Int.Cast.uint8_to_int16@tok () Term)



; </end encoding let uint8_to_int16>


; <Skipped val FStar.Int.Cast.uint8_to_int8/>


; <Start encoding let uint8_to_int8>

(declare-fun FStar.Int.Cast.uint8_to_int8 (Term) Term)
(declare-fun Tm_refine_f7c1cb31f6532bc9ea476d36305e51cc (Term) Term)
(declare-fun Tm_arrow_847892e407a105d1ca5e64d5f9c78d8d () Term)
(declare-fun FStar.Int.Cast.uint8_to_int8@tok () Term)


; </end encoding let uint8_to_int8>


; <Skipped val FStar.Int.Cast.uint16_to_int64/>


; <Start encoding let uint16_to_int64>

(declare-fun FStar.Int.Cast.uint16_to_int64 (Term) Term)
(declare-fun Tm_refine_d601f2d8d86bb81cb4e53ef7f6de8606 () Term)
(declare-fun Tm_refine_581df71c96afff0e16eaaf326e7825ef (Term) Term)
(declare-fun Tm_arrow_45a4dfebb46ad0363ede1ff7158abbda () Term)
(declare-fun FStar.Int.Cast.uint16_to_int64@tok () Term)



; </end encoding let uint16_to_int64>


; <Skipped val FStar.Int.Cast.uint16_to_int32/>


; <Start encoding let uint16_to_int32>

(declare-fun FStar.Int.Cast.uint16_to_int32 (Term) Term)
(declare-fun Tm_refine_38a73e5144d443b0875e11c634d849b2 () Term)
(declare-fun Tm_refine_0dc4e94071105b843bcff67d2632c690 (Term) Term)
(declare-fun Tm_arrow_063cfbf1e8b876889cc40b92b62fc706 () Term)
(declare-fun FStar.Int.Cast.uint16_to_int32@tok () Term)



; </end encoding let uint16_to_int32>


; <Skipped val FStar.Int.Cast.uint16_to_int16/>


; <Start encoding let uint16_to_int16>

(declare-fun FStar.Int.Cast.uint16_to_int16 (Term) Term)
(declare-fun Tm_refine_94529b1af755ca27532a9b1afe59ecb4 (Term) Term)
(declare-fun Tm_arrow_a6d2e563e3cdf4fbac562b994789f788 () Term)
(declare-fun FStar.Int.Cast.uint16_to_int16@tok () Term)


; </end encoding let uint16_to_int16>


; <Skipped val FStar.Int.Cast.uint16_to_int8/>


; <Start encoding let uint16_to_int8>

(declare-fun FStar.Int.Cast.uint16_to_int8 (Term) Term)
(declare-fun Tm_refine_6fd4d3789031952837c2c7b3c3e901e9 (Term) Term)
(declare-fun Tm_arrow_28e8c6cd99a5b1ab22cfac6ad16ac1c3 () Term)
(declare-fun FStar.Int.Cast.uint16_to_int8@tok () Term)


; </end encoding let uint16_to_int8>


; <Skipped val FStar.Int.Cast.uint32_to_int64/>


; <Start encoding let uint32_to_int64>

(declare-fun FStar.Int.Cast.uint32_to_int64 (Term) Term)
(declare-fun Tm_refine_b5e6c055aa02f0fe99c3006bfade50de () Term)
(declare-fun Tm_refine_69b5bc2f0167419281a19f76e3e879be (Term) Term)
(declare-fun Tm_arrow_8d533ac247e0963f402bcd97e7983307 () Term)
(declare-fun FStar.Int.Cast.uint32_to_int64@tok () Term)



; </end encoding let uint32_to_int64>


; <Skipped val FStar.Int.Cast.uint32_to_int32/>


; <Start encoding let uint32_to_int32>

(declare-fun FStar.Int.Cast.uint32_to_int32 (Term) Term)
(declare-fun Tm_refine_f8becfef591c73e0694d1c5c365e8382 (Term) Term)
(declare-fun Tm_arrow_81f1324e2a340ce9da78c49852327f0d () Term)
(declare-fun FStar.Int.Cast.uint32_to_int32@tok () Term)


; </end encoding let uint32_to_int32>


; <Skipped val FStar.Int.Cast.uint32_to_int16/>


; <Start encoding let uint32_to_int16>

(declare-fun FStar.Int.Cast.uint32_to_int16 (Term) Term)
(declare-fun Tm_refine_2fed3cbbb5409570dc49319258ccf3ef (Term) Term)
(declare-fun Tm_arrow_2345e2f2acd04a838810b547244b2f50 () Term)
(declare-fun FStar.Int.Cast.uint32_to_int16@tok () Term)


; </end encoding let uint32_to_int16>


; <Skipped val FStar.Int.Cast.uint32_to_int8/>


; <Start encoding let uint32_to_int8>

(declare-fun FStar.Int.Cast.uint32_to_int8 (Term) Term)
(declare-fun Tm_refine_3c584f3fe1ee365defbf6bda5fccd7ec (Term) Term)
(declare-fun Tm_arrow_5890cc1a509aef4ad1d4c36150335ae3 () Term)
(declare-fun FStar.Int.Cast.uint32_to_int8@tok () Term)


; </end encoding let uint32_to_int8>


; <Skipped val FStar.Int.Cast.uint64_to_int64/>


; <Start encoding let uint64_to_int64>

(declare-fun FStar.Int.Cast.uint64_to_int64 (Term) Term)
(declare-fun Tm_refine_b1a4253476b77fa130c605646cc1dd10 (Term) Term)
(declare-fun Tm_arrow_348f26b36e63f2c00579d5193c674a6e () Term)
(declare-fun FStar.Int.Cast.uint64_to_int64@tok () Term)


; </end encoding let uint64_to_int64>


; <Skipped val FStar.Int.Cast.uint64_to_int32/>


; <Start encoding let uint64_to_int32>

(declare-fun FStar.Int.Cast.uint64_to_int32 (Term) Term)
(declare-fun Tm_refine_ff7be75a282a2d1efb57eeb2fd2ee26b (Term) Term)
(declare-fun Tm_arrow_a7cfcbe071987eae3f86bdadbe4199f6 () Term)
(declare-fun FStar.Int.Cast.uint64_to_int32@tok () Term)


; </end encoding let uint64_to_int32>


; <Skipped val FStar.Int.Cast.uint64_to_int16/>


; <Start encoding let uint64_to_int16>

(declare-fun FStar.Int.Cast.uint64_to_int16 (Term) Term)
(declare-fun Tm_refine_138d2fcfa5cc106f08023f48389b7c56 (Term) Term)
(declare-fun Tm_arrow_02639e85ebdabd354e76e10699692390 () Term)
(declare-fun FStar.Int.Cast.uint64_to_int16@tok () Term)


; </end encoding let uint64_to_int16>


; <Skipped val FStar.Int.Cast.uint64_to_int8/>


; <Start encoding let uint64_to_int8>

(declare-fun FStar.Int.Cast.uint64_to_int8 (Term) Term)
(declare-fun Tm_refine_6df89b85900113faf10d8cb061ec8297 (Term) Term)
(declare-fun Tm_arrow_c1e35fa2c4dbeea8718aed75c8427cfc () Term)
(declare-fun FStar.Int.Cast.uint64_to_int8@tok () Term)


; </end encoding let uint64_to_int8>


; <Skipped val FStar.Int.Cast.int8_to_uint64/>


; <Start encoding let int8_to_uint64>

(declare-fun FStar.Int.Cast.int8_to_uint64 (Term) Term)
(declare-fun Tm_refine_6725f4adff6b363b8006a224af88d3d8 (Term) Term)
(declare-fun Tm_arrow_169462abfa6bf6f667b7531226171d1e () Term)
(declare-fun FStar.Int.Cast.int8_to_uint64@tok () Term)


; </end encoding let int8_to_uint64>


; <Skipped val FStar.Int.Cast.int8_to_uint32/>


; <Start encoding let int8_to_uint32>

(declare-fun FStar.Int.Cast.int8_to_uint32 (Term) Term)
(declare-fun Tm_refine_c61120a48ea923b3f508ab6b6834aebd (Term) Term)
(declare-fun Tm_arrow_31295d9715b484817d50ce2b6a6fcabd () Term)
(declare-fun FStar.Int.Cast.int8_to_uint32@tok () Term)


; </end encoding let int8_to_uint32>


; <Skipped val FStar.Int.Cast.int8_to_uint16/>


; <Start encoding let int8_to_uint16>

(declare-fun FStar.Int.Cast.int8_to_uint16 (Term) Term)
(declare-fun Tm_refine_2df77538bb976c5347a86dd4169fe001 (Term) Term)
(declare-fun Tm_arrow_89df052e05666bf302588cd611eb47f4 () Term)
(declare-fun FStar.Int.Cast.int8_to_uint16@tok () Term)


; </end encoding let int8_to_uint16>


; <Skipped val FStar.Int.Cast.int8_to_uint8/>


; <Start encoding let int8_to_uint8>

(declare-fun FStar.Int.Cast.int8_to_uint8 (Term) Term)
(declare-fun Tm_refine_70247acca6618885acac490081edbfc0 (Term) Term)
(declare-fun Tm_arrow_6f812131e5e51bc427769ae875d4a341 () Term)
(declare-fun FStar.Int.Cast.int8_to_uint8@tok () Term)


; </end encoding let int8_to_uint8>


; <Skipped val FStar.Int.Cast.int16_to_uint64/>


; <Start encoding let int16_to_uint64>

(declare-fun FStar.Int.Cast.int16_to_uint64 (Term) Term)
(declare-fun Tm_refine_a26519a40aab867b4821f7c4709fce2f (Term) Term)
(declare-fun Tm_arrow_b6ed69d2b1ff88d468430e59ed8f216a () Term)
(declare-fun FStar.Int.Cast.int16_to_uint64@tok () Term)


; </end encoding let int16_to_uint64>


; <Skipped val FStar.Int.Cast.int16_to_uint32/>


; <Start encoding let int16_to_uint32>

(declare-fun FStar.Int.Cast.int16_to_uint32 (Term) Term)
(declare-fun Tm_refine_beede139ea3f7a90e582a1f4b5e8db0d (Term) Term)
(declare-fun Tm_arrow_705f0d60676ffddd1cedb9a5786dc911 () Term)
(declare-fun FStar.Int.Cast.int16_to_uint32@tok () Term)


; </end encoding let int16_to_uint32>


; <Skipped val FStar.Int.Cast.int16_to_uint16/>


; <Start encoding let int16_to_uint16>

(declare-fun FStar.Int.Cast.int16_to_uint16 (Term) Term)
(declare-fun Tm_refine_31cbf848d09e50ce0bac9457ee42d214 (Term) Term)
(declare-fun Tm_arrow_5490d75ec7e4d50a10e988d6f853fdf7 () Term)
(declare-fun FStar.Int.Cast.int16_to_uint16@tok () Term)


; </end encoding let int16_to_uint16>


; <Skipped val FStar.Int.Cast.int16_to_uint8/>


; <Start encoding let int16_to_uint8>

(declare-fun FStar.Int.Cast.int16_to_uint8 (Term) Term)
(declare-fun Tm_refine_1384a5b9a05cec0b617fb43252552353 (Term) Term)
(declare-fun Tm_arrow_c934b9b127f7d7c6e5c6c96909da3f94 () Term)
(declare-fun FStar.Int.Cast.int16_to_uint8@tok () Term)


; </end encoding let int16_to_uint8>


; <Skipped val FStar.Int.Cast.int32_to_uint64/>


; <Start encoding let int32_to_uint64>

(declare-fun FStar.Int.Cast.int32_to_uint64 (Term) Term)
(declare-fun Tm_refine_ec63826da772cf76cf20aa5b616602e0 (Term) Term)
(declare-fun Tm_arrow_4499665da7255445828a5e9de8c5ad68 () Term)
(declare-fun FStar.Int.Cast.int32_to_uint64@tok () Term)


; </end encoding let int32_to_uint64>


; <Skipped val FStar.Int.Cast.int32_to_uint32/>


; <Start encoding let int32_to_uint32>

(declare-fun FStar.Int.Cast.int32_to_uint32 (Term) Term)
(declare-fun Tm_refine_d02c3b6ffdeb0591f5aa4a4d977f5728 (Term) Term)
(declare-fun Tm_arrow_35f7cb06c070cb327fb84cb58a30bbff () Term)
(declare-fun FStar.Int.Cast.int32_to_uint32@tok () Term)


; </end encoding let int32_to_uint32>


; <Skipped val FStar.Int.Cast.int32_to_uint16/>


; <Start encoding let int32_to_uint16>

(declare-fun FStar.Int.Cast.int32_to_uint16 (Term) Term)
(declare-fun Tm_refine_e449b6e1c6e00f368340fb73db682fda (Term) Term)
(declare-fun Tm_arrow_842eca3d248fddcdb89fa181315ba69f () Term)
(declare-fun FStar.Int.Cast.int32_to_uint16@tok () Term)


; </end encoding let int32_to_uint16>


; <Skipped val FStar.Int.Cast.int32_to_uint8/>


; <Start encoding let int32_to_uint8>

(declare-fun FStar.Int.Cast.int32_to_uint8 (Term) Term)
(declare-fun Tm_refine_b64a84f458b8ad489604fc9affd5b8b6 (Term) Term)
(declare-fun Tm_arrow_8244c03c726fb8d315458f01acc11161 () Term)
(declare-fun FStar.Int.Cast.int32_to_uint8@tok () Term)


; </end encoding let int32_to_uint8>


; <Skipped val FStar.Int.Cast.int64_to_uint64/>


; <Start encoding let int64_to_uint64>

(declare-fun FStar.Int.Cast.int64_to_uint64 (Term) Term)
(declare-fun Tm_refine_12289bfec6b7b6d49daf3d53fef8e372 (Term) Term)
(declare-fun Tm_arrow_3a3abb9fd504a9a9c83c13081b486dac () Term)
(declare-fun FStar.Int.Cast.int64_to_uint64@tok () Term)


; </end encoding let int64_to_uint64>


; <Skipped val FStar.Int.Cast.int64_to_uint32/>


; <Start encoding let int64_to_uint32>

(declare-fun FStar.Int.Cast.int64_to_uint32 (Term) Term)
(declare-fun Tm_refine_aa10b26044072a79c677f1b78e9d2240 (Term) Term)
(declare-fun Tm_arrow_47a8effab975c1c3a5008108167e26c3 () Term)
(declare-fun FStar.Int.Cast.int64_to_uint32@tok () Term)


; </end encoding let int64_to_uint32>


; <Skipped val FStar.Int.Cast.int64_to_uint16/>


; <Start encoding let int64_to_uint16>

(declare-fun FStar.Int.Cast.int64_to_uint16 (Term) Term)
(declare-fun Tm_refine_7c201645d045b8db196510f74719ec8a (Term) Term)
(declare-fun Tm_arrow_a413b259785d40eb3a0af350ff560edd () Term)
(declare-fun FStar.Int.Cast.int64_to_uint16@tok () Term)


; </end encoding let int64_to_uint16>


; <Skipped val FStar.Int.Cast.int64_to_uint8/>


; <Start encoding let int64_to_uint8>

(declare-fun FStar.Int.Cast.int64_to_uint8 (Term) Term)
(declare-fun Tm_refine_1765c30fd6679f2fa6a46ea5468366f1 (Term) Term)
(declare-fun Tm_arrow_6bf93131ed5c50a7cc0b586fb1765052 () Term)
(declare-fun FStar.Int.Cast.int64_to_uint8@tok () Term)


; </end encoding let int64_to_uint8>


; End Externals for module FStar.Int.Cast


; Externals for module MiniParse.Spec.Int.Aux


; <Start encoding let decode_u16>

(declare-fun MiniParse.Spec.Int.Aux.decode_u16 (Term) Term)
;;;;;;;;;;;;;;;;lohi: FStar.UInt8.t & FStar.UInt8.t -> FStar.UInt16.t
(declare-fun Tm_arrow_f1e530ed5c4c00e487a8fb81156ffa1b () Term)
(declare-fun MiniParse.Spec.Int.Aux.decode_u16@tok () Term)

; </end encoding let decode_u16>


; <Start encoding let encode_u16>

(declare-fun MiniParse.Spec.Int.Aux.encode_u16 (Term) Term)
;;;;;;;;;;;;;;;;x: FStar.UInt16.t -> FStar.UInt8.t & FStar.UInt8.t
(declare-fun Tm_arrow_adf4135bdb7313f56fd1a914d2a3ca24 () Term)
(declare-fun MiniParse.Spec.Int.Aux.encode_u16@tok () Term)

; </end encoding let encode_u16>


; <Start encoding let encode_u16_decode_u16>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Int.Aux.encode_u16_decode_u16 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Int.Aux.encode_u16_decode_u16@tok () Term)

; </end encoding let encode_u16_decode_u16>


; <Start encoding let decode_u16_encode_u16>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Int.Aux.decode_u16_encode_u16 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Int.Aux.decode_u16_encode_u16@tok () Term)

; </end encoding let decode_u16_encode_u16>


; End Externals for module MiniParse.Spec.Int.Aux


; Externals for module MiniParse.Spec.Base


; <Start encoding let byte>

(declare-fun MiniParse.Spec.Base.byte (Dummy_sort) Term)

; </end encoding let byte>


; <Start encoding let bytes>

(declare-fun MiniParse.Spec.Base.bytes () Term)

; </end encoding let bytes>


; <Start encoding let consumed_length>

(declare-fun MiniParse.Spec.Base.consumed_length (Term) Term)
;;;;;;;;;;;;;;;;b: bytes -> Type
(declare-fun Tm_arrow_6ad57bb949e0d6345a8ea332ec1a107e () Term)
(declare-fun MiniParse.Spec.Base.consumed_length@tok () Term)
(declare-fun Tm_refine_f1ef48729dd48b5741a77671cc117cd5 (Term) Term)

; </end encoding let consumed_length>


; <Start encoding let bare_parser>

(declare-fun MiniParse.Spec.Base.bare_parser (Term) Term)

(declare-fun MiniParse.Spec.Base.bare_parser@tok () Term)
;;;;;;;;;;;;;;;;b: bytes -> Prims.GTot (FStar.Pervasives.Native.option (t & consumed_length b))
(declare-fun Tm_ghost_arrow_84eb031c18bd35e3c76ba4886d9ede0b (Term) Term)

; </end encoding let bare_parser>


; <Start encoding let bparse>

(declare-fun MiniParse.Spec.Base.bparse (Term Term Term) Term)
;;;;;;;;;;;;;;;;p: bare_parser t -> input: bytes   -> Prims.GTot (FStar.Pervasives.Native.option (t & consumed_length input))
(declare-fun Tm_ghost_arrow_99164b0887e22f166823e73d282f4625 () Term)
(declare-fun MiniParse.Spec.Base.bparse@tok () Term)

; </end encoding let bparse>


; <Start encoding let no_lookahead_weak_on>

(declare-fun MiniParse.Spec.Base.no_lookahead_weak_on (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;f: bare_parser t -> x: bytes -> x': bytes -> Prims.GTot Type
(declare-fun Tm_arrow_a0be510e56af15f88c93d4dcaf74ab01 () Term)
(declare-fun MiniParse.Spec.Base.no_lookahead_weak_on@tok () Term)

; </end encoding let no_lookahead_weak_on>


; <Start encoding let no_lookahead_weak_on_ext>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Base.no_lookahead_weak_on_ext (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Base.no_lookahead_weak_on_ext@tok () Term)

; </end encoding let no_lookahead_weak_on_ext>


; <Start encoding let no_lookahead_weak>

(declare-fun MiniParse.Spec.Base.no_lookahead_weak (Term Term) Term)
;;;;;;;;;;;;;;;;f: bare_parser t -> Prims.GTot Type
(declare-fun Tm_arrow_c20bec7661d564d1c6cf5bf2d95f1c17 () Term)
(declare-fun MiniParse.Spec.Base.no_lookahead_weak@tok () Term)

; </end encoding let no_lookahead_weak>


; <Start encoding let no_lookahead_weak_ext>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Base.no_lookahead_weak_ext (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Base.no_lookahead_weak_ext@tok () Term)

; </end encoding let no_lookahead_weak_ext>


; <Start encoding let injective_precond>

(declare-fun MiniParse.Spec.Base.injective_precond (Term Term Term Term) Term)

(declare-fun MiniParse.Spec.Base.injective_precond@tok () Term)

; </end encoding let injective_precond>


; <Start encoding let injective_precond_ext>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Base.injective_precond_ext (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Base.injective_precond_ext@tok () Term)

; </end encoding let injective_precond_ext>


; <Start encoding let injective_postcond>

(declare-fun MiniParse.Spec.Base.injective_postcond (Term Term Term Term) Term)

(declare-fun MiniParse.Spec.Base.injective_postcond@tok () Term)

; </end encoding let injective_postcond>


; <Start encoding let injective_postcond_ext>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Base.injective_postcond_ext (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Base.injective_postcond_ext@tok () Term)

; </end encoding let injective_postcond_ext>


; <Start encoding let injective>

(declare-fun MiniParse.Spec.Base.injective (Term Term) Term)

(declare-fun MiniParse.Spec.Base.injective@tok () Term)

; </end encoding let injective>


; <Start encoding let injective_ext>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Base.injective_ext (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Base.injective_ext@tok () Term)

; </end encoding let injective_ext>


; <Start encoding let no_lookahead_on_precond>

(declare-fun MiniParse.Spec.Base.no_lookahead_on_precond (Term Term Term Term) Term)

(declare-fun MiniParse.Spec.Base.no_lookahead_on_precond@tok () Term)

; </end encoding let no_lookahead_on_precond>


; <Start encoding let no_lookahead_on_postcond>

(declare-fun MiniParse.Spec.Base.no_lookahead_on_postcond (Term Term Term Term) Term)

(declare-fun MiniParse.Spec.Base.no_lookahead_on_postcond@tok () Term)

; </end encoding let no_lookahead_on_postcond>


; <Start encoding let no_lookahead_on>

(declare-fun MiniParse.Spec.Base.no_lookahead_on (Term Term Term Term) Term)

(declare-fun MiniParse.Spec.Base.no_lookahead_on@tok () Term)

; </end encoding let no_lookahead_on>


; <Start encoding let no_lookahead_on_ext>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Base.no_lookahead_on_ext (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Base.no_lookahead_on_ext@tok () Term)

; </end encoding let no_lookahead_on_ext>


; <Start encoding let no_lookahead>

(declare-fun MiniParse.Spec.Base.no_lookahead (Term Term) Term)

(declare-fun MiniParse.Spec.Base.no_lookahead@tok () Term)

; </end encoding let no_lookahead>


; <Start encoding let no_lookahead_ext>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Base.no_lookahead_ext (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Base.no_lookahead_ext@tok () Term)

; </end encoding let no_lookahead_ext>


; <Start encoding type MiniParse.Spec.Base.parser_spec>

;;;;;;;;;;;;;;;;Constructor
(declare-fun MiniParse.Spec.Base.parser_spec (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun MiniParse.Spec.Base.parser_spec@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun MiniParse.Spec.Base.Parser (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun MiniParse.Spec.Base.Parser_t (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun MiniParse.Spec.Base.Parser_f (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: MiniParse.Spec.Base.Parser
(declare-fun MiniParse.Spec.Base.Parser@tok () Term)
(declare-fun Tm_refine_95482e91a565bbc8d113ac6e95692d97 (Term) Term)

;;;;;;;;;;;;;;;;f: bare_parser t {no_lookahead_weak f /\ injective f /\ no_lookahead f} -> parser_spec t
(declare-fun Tm_arrow_b25ab83a8ff3e461d3d945d3d869dded () Term)

; <start constructor MiniParse.Spec.Base.parser_spec>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-MiniParse.Spec.Base.parser_spec ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
128)
(exists ((@x0 Term))
 (! (= __@x0
(MiniParse.Spec.Base.parser_spec @x0))
 
;;no pats
:qid is-MiniParse.Spec.Base.parser_spec))))

; </end constructor MiniParse.Spec.Base.parser_spec>


; <start constructor MiniParse.Spec.Base.Parser>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-MiniParse.Spec.Base.Parser ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
136)
(= __@x0
(MiniParse.Spec.Base.Parser (MiniParse.Spec.Base.Parser_t __@x0)
(MiniParse.Spec.Base.Parser_f __@x0)))))

; </end constructor MiniParse.Spec.Base.Parser>


; </end encoding type MiniParse.Spec.Base.parser_spec>


; <Start encoding val MiniParse.Spec.Base.uu___is_Parser>

(declare-fun MiniParse.Spec.Base.uu___is_Parser (Term Term) Term)
;;;;;;;;;;;;;;;;projectee: parser_spec t -> Prims.bool
(declare-fun Tm_arrow_a5cf99b8fbc97d1d543724148078c658 () Term)
(declare-fun MiniParse.Spec.Base.uu___is_Parser@tok () Term)

; </end encoding val MiniParse.Spec.Base.uu___is_Parser>


; <Skipped let uu___is_Parser/>


; <Start encoding val MiniParse.Spec.Base.__proj__Parser__item__f>

(declare-fun MiniParse.Spec.Base.__proj__Parser__item__f (Term Term) Term)

;;;;;;;;;;;;;;;;projectee: parser_spec t -> f: bare_parser t {no_lookahead_weak f /\ injective f /\ no_lookahead f}
(declare-fun Tm_arrow_50e6a45d3f19127249dea1079f5d74a8 () Term)
(declare-fun MiniParse.Spec.Base.__proj__Parser__item__f@tok () Term)


; </end encoding val MiniParse.Spec.Base.__proj__Parser__item__f>


; <Skipped let __proj__Parser__item__f/>


; <Start encoding let coerce_to_bare_parser>

(declare-fun MiniParse.Spec.Base.coerce_to_bare_parser (Term Term) Term)
;;;;;;;;;;;;;;;;t: Type -> p: parser_spec t -> bare_parser t
(declare-fun Tm_arrow_81728ab88ad4d2d6b3e89295e88468d3 () Term)
(declare-fun MiniParse.Spec.Base.coerce_to_bare_parser@tok () Term)

; </end encoding let coerce_to_bare_parser>


; <Start encoding let parse>

(declare-fun MiniParse.Spec.Base.parse (Term Term Term) Term)
;;;;;;;;;;;;;;;;p: parser_spec t -> input: bytes   -> Prims.GTot (FStar.Pervasives.Native.option (t & consumed_length input))
(declare-fun Tm_ghost_arrow_c5aa3104555e250c21d2c62a685affba () Term)
(declare-fun MiniParse.Spec.Base.parse@tok () Term)

; </end encoding let parse>


; <Start encoding let coerce>

(declare-fun MiniParse.Spec.Base.coerce (Term Term Term) Term)

;;;;;;;;;;;;;;;;t2: Type -> x: t1 -> Prims.Pure t2
(declare-fun Tm_arrow_a93d31919ffd5037c4c5d0b0794d9f8d () Term)
(declare-fun MiniParse.Spec.Base.coerce@tok () Term)


; </end encoding let coerce>


; <Start encoding let coerce_parser>

(declare-fun MiniParse.Spec.Base.coerce_parser (Term Term Term) Term)
(declare-fun Tm_refine_795fb455fe887e79d318ca3f6d129a29 (Term) Term)
;;;;;;;;;;;;;;;;t2: Type -> p: parser_spec t1 -> Prims.Pure (parser_spec t2)
(declare-fun Tm_arrow_defe626c1dfcae22a88d0ce7118177cf () Term)
(declare-fun MiniParse.Spec.Base.coerce_parser@tok () Term)


; </end encoding let coerce_parser>


; <Start encoding let bare_serializer>

(declare-fun MiniParse.Spec.Base.bare_serializer (Term) Term)

(declare-fun MiniParse.Spec.Base.bare_serializer@tok () Term)
;;;;;;;;;;;;;;;;_: t -> Prims.GTot bytes
(declare-fun Tm_ghost_arrow_4502d1a2310fff506c14a9e7677ba599 (Term) Term)

; </end encoding let bare_serializer>


; <Start encoding let serializer_correct>

(declare-fun MiniParse.Spec.Base.serializer_correct (Term Term Term) Term)
;;;;;;;;;;;;;;;;p: parser_spec t -> f: bare_serializer t -> Prims.GTot Type
(declare-fun Tm_arrow_4335f3e63c69411322d34044096ce85c () Term)
(declare-fun MiniParse.Spec.Base.serializer_correct@tok () Term)

; </end encoding let serializer_correct>


; <Start encoding let serializer_correct_ext>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Base.serializer_correct_ext (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Base.serializer_correct_ext@tok () Term)

; </end encoding let serializer_correct_ext>


; <Start encoding let serializer_complete>

(declare-fun MiniParse.Spec.Base.serializer_complete (Term Term Term) Term)

(declare-fun MiniParse.Spec.Base.serializer_complete@tok () Term)

; </end encoding let serializer_complete>


; <Start encoding let serializer_correct_implies_complete>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Base.serializer_correct_implies_complete (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Base.serializer_correct_implies_complete@tok () Term)

; </end encoding let serializer_correct_implies_complete>


; <Start encoding type MiniParse.Spec.Base.serializer_spec>

;;;;;;;;;;;;;;;;Constructor
(declare-fun MiniParse.Spec.Base.serializer_spec (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun MiniParse.Spec.Base.serializer_spec@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun MiniParse.Spec.Base.Serializer (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun MiniParse.Spec.Base.Serializer_t (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun MiniParse.Spec.Base.Serializer_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun MiniParse.Spec.Base.Serializer_f (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: MiniParse.Spec.Base.Serializer
(declare-fun MiniParse.Spec.Base.Serializer@tok () Term)
(declare-fun Tm_refine_8da27fc70f74cdb01995c74e5b0aab3a (Term Term) Term)

;;;;;;;;;;;;;;;;f: bare_serializer t {serializer_correct p f} -> serializer_spec p
(declare-fun Tm_arrow_78fbb3342439baf919ea758f9dc73de1 () Term)

; <start constructor MiniParse.Spec.Base.serializer_spec>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-MiniParse.Spec.Base.serializer_spec ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
167)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(MiniParse.Spec.Base.serializer_spec @x0
@x1))
 
;;no pats
:qid is-MiniParse.Spec.Base.serializer_spec))))

; </end constructor MiniParse.Spec.Base.serializer_spec>


; <start constructor MiniParse.Spec.Base.Serializer>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-MiniParse.Spec.Base.Serializer ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
175)
(= __@x0
(MiniParse.Spec.Base.Serializer (MiniParse.Spec.Base.Serializer_t __@x0)
(MiniParse.Spec.Base.Serializer_p __@x0)
(MiniParse.Spec.Base.Serializer_f __@x0)))))

; </end constructor MiniParse.Spec.Base.Serializer>


; </end encoding type MiniParse.Spec.Base.serializer_spec>


; <Start encoding val MiniParse.Spec.Base.uu___is_Serializer>

(declare-fun MiniParse.Spec.Base.uu___is_Serializer (Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: serializer_spec p -> Prims.bool
(declare-fun Tm_arrow_121ddabc540671bf1686c5bd9a2a0fbc () Term)
(declare-fun MiniParse.Spec.Base.uu___is_Serializer@tok () Term)

; </end encoding val MiniParse.Spec.Base.uu___is_Serializer>


; <Skipped let uu___is_Serializer/>


; <Start encoding val MiniParse.Spec.Base.__proj__Serializer__item__f>

(declare-fun MiniParse.Spec.Base.__proj__Serializer__item__f (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: serializer_spec p -> f: bare_serializer t {serializer_correct p f}
(declare-fun Tm_arrow_6fff714fa503dca55f8dee51ce96a75c () Term)
(declare-fun MiniParse.Spec.Base.__proj__Serializer__item__f@tok () Term)


; </end encoding val MiniParse.Spec.Base.__proj__Serializer__item__f>


; <Skipped let __proj__Serializer__item__f/>


; <Start encoding let coerce_serializer>


(declare-fun MiniParse.Spec.Base.coerce_serializer (Term Term Term Term Term) Term)

;;;;;;;;;;;;;;;;t2: Type -> s: serializer_spec p -> u2526: Prims.squash (t2 == t1) -> serializer_spec p
(declare-fun Tm_arrow_4bb7ec9a938b62118c753757c7804aec () Term)
(declare-fun MiniParse.Spec.Base.coerce_serializer@tok () Term)


; </end encoding let coerce_serializer>


; <Start encoding let serialize_ext>

(declare-fun MiniParse.Spec.Base.serialize_ext (Term Term Term Term Term) Term)
(declare-fun Tm_refine_d9c4b4f5350e06d893302895e7b320c0 (Term Term) Term)
;;;;;;;;;;;;;;;;p1: parser_spec t1 -> s1: serializer_spec p1 -> p2: parser_spec t2   -> Prims.Pure (serializer_spec p2)
(declare-fun Tm_arrow_61ffe7ed5fc798b2e27ec6fb688aa210 () Term)
(declare-fun MiniParse.Spec.Base.serialize_ext@tok () Term)


; </end encoding let serialize_ext>


; <Start encoding let serialize_ext'>

(declare-fun MiniParse.Spec.Base.serialize_ext_ (Term Term Term Term Term) Term)

;;;;;;;;;;;;;;;;p1: parser_spec t1 -> s1: serializer_spec p1 -> p2: parser_spec t2   -> Prims.Pure (serializer_spec p2)
(declare-fun Tm_arrow_c849cdabd7755e39e8b5ea992160e7ac () Term)
(declare-fun MiniParse.Spec.Base.serialize_ext_@tok () Term)


; </end encoding let serialize_ext'>


; <Start encoding let serialize>

(declare-fun MiniParse.Spec.Base.serialize (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;s: serializer_spec p -> x: t -> Prims.GTot bytes
(declare-fun Tm_ghost_arrow_5071ca442683837f0b764eb15abb1eb4 () Term)
(declare-fun MiniParse.Spec.Base.serialize@tok () Term)

; </end encoding let serialize>


; <Start encoding let serializer_unique>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Base.serializer_unique (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Base.serializer_unique@tok () Term)

; </end encoding let serializer_unique>


; <Start encoding let serializer_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Base.serializer_injective (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Base.serializer_injective@tok () Term)

; </end encoding let serializer_injective>


; <Start encoding let serializer_parser_unique'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Base.serializer_parser_unique_ (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Base.serializer_parser_unique_@tok () Term)

; </end encoding let serializer_parser_unique'>


; <Start encoding let serializer_parser_unique>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Base.serializer_parser_unique (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Base.serializer_parser_unique@tok () Term)

; </end encoding let serializer_parser_unique>


; End Externals for module MiniParse.Spec.Base


; Externals for module MiniParse.Spec.Combinators


; <Start encoding let make_constant_size_parser_aux>

(declare-fun Tm_refine_1634311840211d2f5a6f87aecae0847c (Term) Term)
;;;;;;;;;;;;;;;;s: MiniParse.Spec.Base.bytes{FStar.Seq.Base.length s == sz}   -> Prims.GTot (FStar.Pervasives.Native.option t)
(declare-fun Tm_ghost_arrow_7b4ac9a9f8f37901617c3fd8cea6c240 (Term Term) Term)
(declare-fun MiniParse.Spec.Combinators.make_constant_size_parser_aux (Term Term Term) Term)


;;;;;;;;;;;;;;;;sz: Prims.nat ->     t: Type ->     f:       (s: MiniParse.Spec.Base.bytes{FStar.Seq.Base.length s == sz}           -> Prims.GTot (FStar.Pervasives.Native.option t))   -> MiniParse.Spec.Base.bare_parser t
(declare-fun Tm_arrow_e4955ab636248ea8c79377e5c2d85d9e () Term)
(declare-fun MiniParse.Spec.Combinators.make_constant_size_parser_aux@tok () Term)



(declare-fun Tm_abs_32e00b3026b589e7656aa22095079513 (Term Term Term) Term)

; </end encoding let make_constant_size_parser_aux>


; <Start encoding let make_constant_size_parser_precond_precond>





(declare-fun MiniParse.Spec.Combinators.make_constant_size_parser_precond_precond (Term Term Term Term Term) Term)




;;;;;;;;;;;;;;;;sz: Prims.nat ->     t: Type ->     f:       (s: MiniParse.Spec.Base.bytes{FStar.Seq.Base.length s == sz}           -> Prims.GTot (FStar.Pervasives.Native.option t)) ->     s1: MiniParse.Spec.Base.bytes{FStar.Seq.Base.length s1 == sz} ->     s2: MiniParse.Spec.Base.bytes{FStar.Seq.Base.length s2 == sz}   -> Prims.GTot Type
(declare-fun Tm_arrow_564edf97564ea3cee0808b603aa816ba () Term)
(declare-fun MiniParse.Spec.Combinators.make_constant_size_parser_precond_precond@tok () Term)





; </end encoding let make_constant_size_parser_precond_precond>


; <Start encoding let make_constant_size_parser_precond>



(declare-fun MiniParse.Spec.Combinators.make_constant_size_parser_precond (Term Term Term) Term)


;;;;;;;;;;;;;;;;sz: Prims.nat ->     t: Type ->     f:       (s: MiniParse.Spec.Base.bytes{FStar.Seq.Base.length s == sz}           -> Prims.GTot (FStar.Pervasives.Native.option t))   -> Prims.GTot Type
(declare-fun Tm_arrow_5144c50ac2445a37592bbe449c8b45ab () Term)
(declare-fun MiniParse.Spec.Combinators.make_constant_size_parser_precond@tok () Term)





; </end encoding let make_constant_size_parser_precond>


; <Start encoding let make_constant_size_parser_precond'>



(declare-fun MiniParse.Spec.Combinators.make_constant_size_parser_precond_ (Term Term Term) Term)



(declare-fun MiniParse.Spec.Combinators.make_constant_size_parser_precond_@tok () Term)





; </end encoding let make_constant_size_parser_precond'>


; <Start encoding let make_constant_size_parser_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Combinators.make_constant_size_parser_injective (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Combinators.make_constant_size_parser_injective@tok () Term)

; </end encoding let make_constant_size_parser_injective>


; <Start encoding let make_constant_size_parser>



(declare-fun MiniParse.Spec.Combinators.make_constant_size_parser (Term Term Term) Term)



;;;;;;;;;;;;;;;;sz: Prims.nat ->     t: Type ->     f:       (s: MiniParse.Spec.Base.bytes{FStar.Seq.Base.length s == sz}           -> Prims.GTot (FStar.Pervasives.Native.option t))   -> Prims.Pure (MiniParse.Spec.Base.parser_spec t)
(declare-fun Tm_arrow_083db3aed6954c91c161500c17f64bd8 () Term)
(declare-fun MiniParse.Spec.Combinators.make_constant_size_parser@tok () Term)




; </end encoding let make_constant_size_parser>


; <Start encoding let make_total_constant_size_parser_precond>


;;;;;;;;;;;;;;;;s: MiniParse.Spec.Base.bytes{FStar.Seq.Base.length s == sz} -> Prims.GTot t
(declare-fun Tm_ghost_arrow_f221ab63d8461933925e6e711c0deafa (Term Term) Term)
(declare-fun MiniParse.Spec.Combinators.make_total_constant_size_parser_precond (Term Term Term) Term)


;;;;;;;;;;;;;;;;sz: Prims.nat ->     t: Type ->     f: (s: MiniParse.Spec.Base.bytes{FStar.Seq.Base.length s == sz} -> Prims.GTot t)   -> Prims.GTot Type
(declare-fun Tm_arrow_fb2a384f05c48412a21ada1565eb73eb () Term)
(declare-fun MiniParse.Spec.Combinators.make_total_constant_size_parser_precond@tok () Term)





; </end encoding let make_total_constant_size_parser_precond>


; <Start encoding let make_total_constant_size_parser>



(declare-fun MiniParse.Spec.Combinators.make_total_constant_size_parser (Term Term Term) Term)



;;;;;;;;;;;;;;;;sz: Prims.nat ->     t: Type ->     f: (s: MiniParse.Spec.Base.bytes{FStar.Seq.Base.length s == sz} -> Prims.GTot t)   -> Prims.Pure (MiniParse.Spec.Base.parser_spec t)
(declare-fun Tm_arrow_28acdfb17e03d0ec2985262c88a90437 () Term)
(declare-fun MiniParse.Spec.Combinators.make_total_constant_size_parser@tok () Term)






(declare-fun Tm_abs_8322151be44905be95082db1bf1d0c5b (Term Term Term) Term)

; </end encoding let make_total_constant_size_parser>


; <Start encoding let parse_ret'>

(declare-fun MiniParse.Spec.Combinators.parse_ret_ (Term Term) Term)
;;;;;;;;;;;;;;;;v: t -> MiniParse.Spec.Base.bare_parser t
(declare-fun Tm_arrow_2a6c8f4253e64ac531bca23f9dd950ea () Term)
(declare-fun MiniParse.Spec.Combinators.parse_ret_@tok () Term)

(declare-fun Tm_abs_24c49183d745861a79c9e705ccd478d5 (Term Term) Term)

; </end encoding let parse_ret'>


; <Start encoding let parse_ret>

(declare-fun MiniParse.Spec.Combinators.parse_ret (Term Term) Term)
;;;;;;;;;;;;;;;;v: t -> MiniParse.Spec.Base.parser_spec t
(declare-fun Tm_arrow_110e7a3862efadc1f211f09444b2675b () Term)
(declare-fun MiniParse.Spec.Combinators.parse_ret@tok () Term)



; </end encoding let parse_ret>


; <Start encoding let parse_empty>

(declare-fun MiniParse.Spec.Combinators.parse_empty (Dummy_sort) Term)

; </end encoding let parse_empty>


; <Start encoding let serialize_empty>

(declare-fun MiniParse.Spec.Combinators.serialize_empty (Dummy_sort) Term)
;;;;;;;;;;;;;;;;_: Prims.unit -> Prims.GTot MiniParse.Spec.Base.bytes
(declare-fun Tm_ghost_arrow_065db388c73c60fcaf4d830a33b1ff74 () Term)
(declare-fun Tm_abs_2d7aa5d41af7bc79e9fc4e0c42fe10d4 () Term)

; </end encoding let serialize_empty>


; <Skipped #set-options "--z3rlimit 16"/>


; <Start encoding let fail_parser'>

(declare-fun MiniParse.Spec.Combinators.fail_parser_ (Term) Term)
;;;;;;;;;;;;;;;;t: Type -> MiniParse.Spec.Base.bare_parser t
(declare-fun Tm_arrow_af7cd95b3e1e1a8b5c28944e7040a457 () Term)
(declare-fun MiniParse.Spec.Combinators.fail_parser_@tok () Term)

(declare-fun Tm_abs_70f489119d60d8732ac22a9de0b5f7be (Term) Term)

; </end encoding let fail_parser'>


; <Start encoding let fail_parser>

(declare-fun MiniParse.Spec.Combinators.fail_parser (Term) Term)
;;;;;;;;;;;;;;;;t: Type -> MiniParse.Spec.Base.parser_spec t
(declare-fun Tm_arrow_1d43e7980a4a39625918984abc7b9f58 () Term)
(declare-fun MiniParse.Spec.Combinators.fail_parser@tok () Term)

; </end encoding let fail_parser>


; <Skipped val MiniParse.Spec.Combinators.and_then_bare/>


; <Start encoding let and_then_bare>

;;;;;;;;;;;;;;;;_: t -> MiniParse.Spec.Base.bare_parser t'
(declare-fun Tm_arrow_9142d2bae8c7d17f5b41cdeff1cf06fc (Term Term) Term)
(declare-fun MiniParse.Spec.Combinators.and_then_bare (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;p: MiniParse.Spec.Base.bare_parser t -> p': (_: t -> MiniParse.Spec.Base.bare_parser t')   -> MiniParse.Spec.Base.bare_parser t'
(declare-fun Tm_arrow_6bb246360ddc6453cfe7eb87d2823bde () Term)
(declare-fun MiniParse.Spec.Combinators.and_then_bare@tok () Term)


(declare-fun Tm_abs_5a56d64ec9685d0352c27644697b3e56 (Term Term Term Term) Term)

; </end encoding let and_then_bare>


; <Skipped val MiniParse.Spec.Combinators.and_then_no_lookahead_weak_on/>


; <Start encoding let and_then_no_lookahead_weak_on>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Combinators.and_then_no_lookahead_weak_on (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Combinators.and_then_no_lookahead_weak_on@tok () Term)

; </end encoding let and_then_no_lookahead_weak_on>


; <Start encoding let and_then_no_lookahead_weak>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Combinators.and_then_no_lookahead_weak (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Combinators.and_then_no_lookahead_weak@tok () Term)

; </end encoding let and_then_no_lookahead_weak>


; <Start encoding let and_then_cases_injective_precond>


(declare-fun MiniParse.Spec.Combinators.and_then_cases_injective_precond (Term Term Term Term Term Term Term) Term)

;;;;;;;;;;;;;;;;p': (_: t -> MiniParse.Spec.Base.bare_parser t') ->     x1: t ->     x2: t ->     b1: MiniParse.Spec.Base.bytes ->     b2: MiniParse.Spec.Base.bytes   -> Prims.GTot Type
(declare-fun Tm_arrow_3ec634d353bc35aae984c334df29e7e0 () Term)
(declare-fun MiniParse.Spec.Combinators.and_then_cases_injective_precond@tok () Term)


; </end encoding let and_then_cases_injective_precond>


; <Start encoding let and_then_cases_injective'>


(declare-fun MiniParse.Spec.Combinators.and_then_cases_injective_ (Term Term Term) Term)

;;;;;;;;;;;;;;;;p': (_: t -> MiniParse.Spec.Base.bare_parser t') -> Prims.GTot Type
(declare-fun Tm_arrow_1ae05d7e616fc1e5c04b566a2608908a () Term)
(declare-fun MiniParse.Spec.Combinators.and_then_cases_injective_@tok () Term)


; </end encoding let and_then_cases_injective'>


; <Start encoding let coerce_to_bare_param_parser>

;;;;;;;;;;;;;;;;_: t -> MiniParse.Spec.Base.parser_spec t'
(declare-fun Tm_arrow_21c34ab6214876c3f64c3607461881fc (Term Term) Term)
(declare-fun MiniParse.Spec.Combinators.coerce_to_bare_param_parser (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;p': (_: t -> MiniParse.Spec.Base.parser_spec t') -> x: t -> MiniParse.Spec.Base.bare_parser t'
(declare-fun Tm_arrow_fe391d6680769aaad08ee4cff3d82de3 () Term)
(declare-fun MiniParse.Spec.Combinators.coerce_to_bare_param_parser@tok () Term)


; </end encoding let coerce_to_bare_param_parser>


; <Start encoding let and_then_cases_injective>


(declare-fun MiniParse.Spec.Combinators.and_then_cases_injective (Term Term Term) Term)

;;;;;;;;;;;;;;;;p': (_: t -> MiniParse.Spec.Base.parser_spec t') -> Prims.GTot Type
(declare-fun Tm_arrow_4b80c22d8d7c55065f1a400190b88c99 () Term)
(declare-fun MiniParse.Spec.Combinators.and_then_cases_injective@tok () Term)


; </end encoding let and_then_cases_injective>


; <Skipped val MiniParse.Spec.Combinators.and_then_injective/>


; <Start encoding let and_then_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Combinators.and_then_injective (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Combinators.and_then_injective@tok () Term)

; </end encoding let and_then_injective>


; <Skipped val MiniParse.Spec.Combinators.and_then_no_lookahead_on/>


; <Start encoding let and_then_no_lookahead_on>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Combinators.and_then_no_lookahead_on (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Combinators.and_then_no_lookahead_on@tok () Term)

; </end encoding let and_then_no_lookahead_on>


; <Start encoding let and_then_no_lookahead>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Combinators.and_then_no_lookahead (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Combinators.and_then_no_lookahead@tok () Term)

; </end encoding let and_then_no_lookahead>


; <Skipped #set-options "--max_fuel 8 --max_ifuel 8 --z3rlimit 64"/>


; <Start encoding let and_then_correct>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Combinators.and_then_correct (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Combinators.and_then_correct@tok () Term)

; </end encoding let and_then_correct>


; <Skipped #reset-options/>


; <Skipped val MiniParse.Spec.Combinators.and_then/>


; <Start encoding let and_then>


(declare-fun MiniParse.Spec.Combinators.and_then (Term Term Term Term) Term)


;;;;;;;;;;;;;;;;p: MiniParse.Spec.Base.parser_spec t -> p': (_: t -> MiniParse.Spec.Base.parser_spec t')   -> Prims.Pure (MiniParse.Spec.Base.parser_spec t')
(declare-fun Tm_arrow_2369fd909083477d520f1f9f872723e0 () Term)
(declare-fun MiniParse.Spec.Combinators.and_then@tok () Term)




; </end encoding let and_then>


; <Skipped #set-options "--z3rlimit 16"/>


; <Start encoding let nondep_then>

(declare-fun MiniParse.Spec.Combinators.nondep_then (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;p1: MiniParse.Spec.Base.parser_spec t1 -> p2: MiniParse.Spec.Base.parser_spec t2   -> MiniParse.Spec.Base.parser_spec (t1 & t2)
(declare-fun Tm_arrow_a8780ac7271bfe1e8f85e52ecd64da36 () Term)
(declare-fun MiniParse.Spec.Combinators.nondep_then@tok () Term)
;;;;;;;;;;;;;;;;v2: t2 -> MiniParse.Spec.Base.parser_spec (t1 & t2)
(declare-fun Tm_arrow_383de413e051f04d83f8d52608a46263 (Term Term) Term)
(declare-fun Tm_abs_b1966e89e7cd8f7f0d8af601292dbb6f (Term Term Term) Term)
;;;;;;;;;;;;;;;;v1: t1 -> MiniParse.Spec.Base.parser_spec (t1 & t2)
(declare-fun Tm_arrow_ac0692899dfa447ad13c5f2aefde77c5 (Term Term) Term)
(declare-fun Tm_abs_9b0fdcdb7bad65cf740850da64bc002a (Term Term Term) Term)

; </end encoding let nondep_then>


; <Start encoding let nondep_then_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Combinators.nondep_then_eq (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Combinators.nondep_then_eq@tok () Term)

; </end encoding let nondep_then_eq>


; <Start encoding let bare_serialize_nondep_then>

(declare-fun MiniParse.Spec.Combinators.bare_serialize_nondep_then (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;p1: MiniParse.Spec.Base.parser_spec t1 ->     s1: MiniParse.Spec.Base.serializer_spec p1 ->     p2: MiniParse.Spec.Base.parser_spec t2 ->     s2: MiniParse.Spec.Base.serializer_spec p2   -> MiniParse.Spec.Base.bare_serializer (t1 & t2)
(declare-fun Tm_arrow_6f45af358a0859bbc40786d00743b12c () Term)
(declare-fun MiniParse.Spec.Combinators.bare_serialize_nondep_then@tok () Term)
;;;;;;;;;;;;;;;;x: t1 & t2 -> Prims.GTot MiniParse.Spec.Base.bytes
(declare-fun Tm_ghost_arrow_74d5ca20293ddc2696b34978f3cd4f0a (Term Term) Term)
(declare-fun Tm_abs_84ca3be552b2abb245b330ca14b3d71f (Term Term Term Term Term Term) Term)

; </end encoding let bare_serialize_nondep_then>


; <Start encoding let seq_slice_append_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Combinators.seq_slice_append_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Combinators.seq_slice_append_l@tok () Term)

; </end encoding let seq_slice_append_l>


; <Start encoding let seq_slice_append_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Combinators.seq_slice_append_r (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Combinators.seq_slice_append_r@tok () Term)

; </end encoding let seq_slice_append_r>


; <Start encoding let bare_serialize_nondep_then_correct>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Combinators.bare_serialize_nondep_then_correct (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Combinators.bare_serialize_nondep_then_correct@tok () Term)

; </end encoding let bare_serialize_nondep_then_correct>


; <Start encoding let serialize_nondep_then>

(declare-fun MiniParse.Spec.Combinators.serialize_nondep_then (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;s1: MiniParse.Spec.Base.serializer_spec p1 -> s2: MiniParse.Spec.Base.serializer_spec p2   -> MiniParse.Spec.Base.serializer_spec (nondep_then p1 p2)
(declare-fun Tm_arrow_0d481d9eb351bb9b3ab476fbe718c7d9 () Term)
(declare-fun MiniParse.Spec.Combinators.serialize_nondep_then@tok () Term)

; </end encoding let serialize_nondep_then>


; <Start encoding let parse_fret'>


(declare-fun MiniParse.Spec.Combinators.parse_fret_ (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;f: (_: t -> Prims.GTot t') -> v: t -> MiniParse.Spec.Base.bare_parser t'
(declare-fun Tm_arrow_9e674f301f3e8bceee18d6c7c72e851f () Term)
(declare-fun MiniParse.Spec.Combinators.parse_fret_@tok () Term)


(declare-fun Tm_abs_1fb4b12c5e13644b16cddd2d7e9d02d4 (Term Term Term) Term)

; </end encoding let parse_fret'>


; <Start encoding let parse_fret>


(declare-fun MiniParse.Spec.Combinators.parse_fret (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;f: (_: t -> Prims.GTot t') -> v: t -> MiniParse.Spec.Base.parser_spec t'
(declare-fun Tm_arrow_9e28ecc2cc9dde5d7005e9d849c7cc4e () Term)
(declare-fun MiniParse.Spec.Combinators.parse_fret@tok () Term)




; </end encoding let parse_fret>


; <Start encoding let synth_inverse>



(declare-fun MiniParse.Spec.Combinators.synth_inverse (Term Term Term Term) Term)


;;;;;;;;;;;;;;;;f2: (_: t1 -> Prims.GTot t2) -> g1: (_: t2 -> Prims.GTot t1) -> Prims.GTot Type
(declare-fun Tm_arrow_e990ba0d546fe5f30f22053a4e876d5d () Term)
(declare-fun MiniParse.Spec.Combinators.synth_inverse@tok () Term)



; </end encoding let synth_inverse>


; <Start encoding let parse_synth'>


(declare-fun MiniParse.Spec.Combinators.parse_synth_ (Term Term Term Term) Term)


;;;;;;;;;;;;;;;;p1: MiniParse.Spec.Base.parser_spec t1 -> f2: (_: t1 -> Prims.GTot t2)   -> Prims.Pure (MiniParse.Spec.Base.parser_spec t2)
(declare-fun Tm_arrow_28008a06201b152df9c3b545f8ffb89f () Term)
(declare-fun MiniParse.Spec.Combinators.parse_synth_@tok () Term)





(declare-fun Tm_abs_957e8ad743772cbc360e7d8acd225cc1 (Term Term Term) Term)

; </end encoding let parse_synth'>


; <Start encoding let parse_synth>



(declare-fun MiniParse.Spec.Combinators.parse_synth (Term Term Term Term Term) Term)



;;;;;;;;;;;;;;;;p1: MiniParse.Spec.Base.parser_spec t1 ->     f2: (_: t1 -> Prims.GTot t2) ->     g1: (_: t2 -> Prims.GTot t1)   -> Prims.Pure (MiniParse.Spec.Base.parser_spec t2)
(declare-fun Tm_arrow_cb43d55b5c029e80ed235e7586227650 () Term)
(declare-fun MiniParse.Spec.Combinators.parse_synth@tok () Term)








; </end encoding let parse_synth>


; <Start encoding let parse_synth_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Combinators.parse_synth_eq (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Combinators.parse_synth_eq@tok () Term)

; </end encoding let parse_synth_eq>


; <Skipped val MiniParse.Spec.Combinators.bare_serialize_synth/>


; <Start encoding let bare_serialize_synth>



(declare-fun MiniParse.Spec.Combinators.bare_serialize_synth (Term Term Term Term Term Term) Term)


;;;;;;;;;;;;;;;;p1: MiniParse.Spec.Base.parser_spec t1 ->     f2: (_: t1 -> Prims.GTot t2) ->     s1: MiniParse.Spec.Base.serializer_spec p1 ->     g1: (_: t2 -> Prims.GTot t1)   -> MiniParse.Spec.Base.bare_serializer t2
(declare-fun Tm_arrow_0fb5e89f73edc8ed64078638d56ed8e2 () Term)
(declare-fun MiniParse.Spec.Combinators.bare_serialize_synth@tok () Term)



(declare-fun Tm_abs_5726c850e5adc579388e02f8d1747910 (Term Term Term Term Term) Term)

; </end encoding let bare_serialize_synth>


; <Skipped val MiniParse.Spec.Combinators.bare_serialize_synth_correct/>


; <Start encoding let bare_serialize_synth_correct>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Combinators.bare_serialize_synth_correct (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Combinators.bare_serialize_synth_correct@tok () Term)

; </end encoding let bare_serialize_synth_correct>


; <Start encoding let synth_inverse_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Combinators.synth_inverse_intro (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Combinators.synth_inverse_intro@tok () Term)

; </end encoding let synth_inverse_intro>


; <Start encoding let serialize_synth>



(declare-fun Tm_refine_e5dad5ef51a93741fdb3aaf46e97fb95 (Term Term Term Term) Term)
(declare-fun MiniParse.Spec.Combinators.serialize_synth (Term Term Term Term Term Term Term) Term)



;;;;;;;;;;;;;;;;s1: MiniParse.Spec.Base.serializer_spec p1 ->     f2: (_: t1 -> Prims.GTot t2) ->     g1: (_: t2 -> Prims.GTot t1) ->     u2656: Prims.squash (synth_inverse f2 g1 /\ synth_inverse g1 f2)   -> MiniParse.Spec.Base.serializer_spec (parse_synth p1 f2 g1)
(declare-fun Tm_arrow_8d6cd4b92df433ef773395d055d524e4 () Term)
(declare-fun MiniParse.Spec.Combinators.serialize_synth@tok () Term)




; </end encoding let serialize_synth>


; <Start encoding let lift_parser'>

;;;;;;;;;;;;;;;;_: Prims.unit -> Prims.GTot (MiniParse.Spec.Base.parser_spec t)
(declare-fun Tm_ghost_arrow_ac6e6f456246d2c100c6577d38c5a1e7 (Term) Term)
(declare-fun MiniParse.Spec.Combinators.lift_parser_ (Term Term) Term)

;;;;;;;;;;;;;;;;f: (_: Prims.unit -> Prims.GTot (MiniParse.Spec.Base.parser_spec t))   -> MiniParse.Spec.Base.bare_parser t
(declare-fun Tm_arrow_e459e0b029b354663edf1c6c9963a790 () Term)
(declare-fun MiniParse.Spec.Combinators.lift_parser_@tok () Term)


(declare-fun Tm_abs_fb66773af7f5fd01e183cbed4fff8be6 (Term Term) Term)

; </end encoding let lift_parser'>


; <Start encoding let lift_parser>


(declare-fun MiniParse.Spec.Combinators.lift_parser (Term Term) Term)

;;;;;;;;;;;;;;;;f: (_: Prims.unit -> Prims.GTot (MiniParse.Spec.Base.parser_spec t))   -> MiniParse.Spec.Base.parser_spec t
(declare-fun Tm_arrow_59650df95974a587798fd6dc9814cabf () Term)
(declare-fun MiniParse.Spec.Combinators.lift_parser@tok () Term)




; </end encoding let lift_parser>


; <Start encoding let parse_filter_payload>


(declare-fun MiniParse.Spec.Combinators.parse_filter_payload (Term Term Term) Term)

(declare-fun Tm_refine_47a1a40ac1f83f95f3b324d5e73614ef (Term Term) Term)
;;;;;;;;;;;;;;;;f: (_: t -> Prims.GTot Prims.bool) -> v: t -> MiniParse.Spec.Base.parser_spec (x: t{f x == true})
(declare-fun Tm_arrow_dd40325d19cf9e9f3e68140eb0c1fb89 () Term)
(declare-fun MiniParse.Spec.Combinators.parse_filter_payload@tok () Term)







;;;;;;;;;;;;;;;;input: MiniParse.Spec.Base.bytes   -> Prims.GTot     (FStar.Pervasives.Native.option (x: t{f x == true} & MiniParse.Spec.Base.consumed_length input))
(declare-fun Tm_ghost_arrow_a887c201afc5c7ee61d46806b9f63ea8 (Term Term) Term)
(declare-fun Tm_abs_2c62dd15e28a3b1b5c37052636225b47 (Term Term Term) Term)

; </end encoding let parse_filter_payload>


; <Start encoding let parse_filter>


(declare-fun MiniParse.Spec.Combinators.parse_filter (Term Term Term) Term)


;;;;;;;;;;;;;;;;p: MiniParse.Spec.Base.parser_spec t -> f: (_: t -> Prims.GTot Prims.bool)   -> MiniParse.Spec.Base.parser_spec (x: t{f x == true})
(declare-fun Tm_arrow_411bd0b36152d316a78d2cd5db308f39 () Term)
(declare-fun MiniParse.Spec.Combinators.parse_filter@tok () Term)




; </end encoding let parse_filter>


; <Start encoding let serialize_filter'>


(declare-fun MiniParse.Spec.Combinators.serialize_filter_ (Term Term Term Term) Term)


;;;;;;;;;;;;;;;;s: MiniParse.Spec.Base.serializer_spec p -> f: (_: t -> Prims.GTot Prims.bool)   -> MiniParse.Spec.Base.bare_serializer (x: t{f x == true})
(declare-fun Tm_arrow_9866077b0e71eea1a17290163e6e9b02 () Term)
(declare-fun MiniParse.Spec.Combinators.serialize_filter_@tok () Term)




;;;;;;;;;;;;;;;;input: t{f input == true} -> Prims.GTot MiniParse.Spec.Base.bytes
(declare-fun Tm_ghost_arrow_243f74750f91235d9f183b18d2e554d2 (Term Term) Term)
(declare-fun Tm_abs_f1ff1752f992f8166b0d544dd38cf6b2 (Term Term Term Term) Term)

; </end encoding let serialize_filter'>


; <Start encoding let serialize_filter>


(declare-fun MiniParse.Spec.Combinators.serialize_filter (Term Term Term Term) Term)


;;;;;;;;;;;;;;;;s: MiniParse.Spec.Base.serializer_spec p -> f: (_: t -> Prims.GTot Prims.bool)   -> MiniParse.Spec.Base.serializer_spec (parse_filter p f)
(declare-fun Tm_arrow_203c38d23e8b1b561044120d60a804d8 () Term)
(declare-fun MiniParse.Spec.Combinators.serialize_filter@tok () Term)




; </end encoding let serialize_filter>


; <Start encoding let cond_true>

(declare-fun MiniParse.Spec.Combinators.cond_true (Term) Term)
;;;;;;;;;;;;;;;;cond: Prims.bool -> Type
(declare-fun Tm_arrow_500279c757ae94c6b581e1748c9c53d5 () Term)
(declare-fun MiniParse.Spec.Combinators.cond_true@tok () Term)
(declare-fun Tm_refine_6164d9b106667485d32a033534b8978a (Term) Term)

; </end encoding let cond_true>


; <Start encoding let cond_false>

(declare-fun MiniParse.Spec.Combinators.cond_false (Term) Term)

(declare-fun MiniParse.Spec.Combinators.cond_false@tok () Term)
(declare-fun Tm_refine_616f57e023c93921420754bbdb26261e (Term) Term)

; </end encoding let cond_false>


; End Externals for module MiniParse.Spec.Combinators


; Externals for module MiniParse.Spec.Int


; <Start encoding let parse_u8>

(declare-fun MiniParse.Spec.Int.parse_u8 (Dummy_sort) Term)
(declare-fun Tm_refine_38b79b6b4f4ea1d3ca32ae422ac4dbd0 () Term)

;;;;;;;;;;;;;;;;x: s: MiniParse.Spec.Base.bytes{FStar.Seq.Base.length s == 1} -> Prims.GTot FStar.UInt8.t
(declare-fun Tm_ghost_arrow_e9597d594222ace98112eb24769c50ee () Term)
(declare-fun Tm_abs_3ef76a215283cba74a169f3545853f47 () Term)

; </end encoding let parse_u8>


; <Start encoding let serialize_u8>

(declare-fun MiniParse.Spec.Int.serialize_u8 (Dummy_sort) Term)
;;;;;;;;;;;;;;;;x: MiniParse.Spec.Base.byte -> Prims.GTot MiniParse.Spec.Base.bytes
(declare-fun Tm_ghost_arrow_68177d27518ab05984fe7d6fd90f34d8 () Term)
(declare-fun Tm_abs_36ba01fdea5aae7ab644f019f820248e () Term)

; </end encoding let serialize_u8>


; <Start encoding let parse_u16_aux>

(declare-fun Tm_refine_465e73a9e7b4ffe25ff829a7b12520e9 () Term)
(declare-fun MiniParse.Spec.Int.parse_u16_aux (Term) Term)

;;;;;;;;;;;;;;;;s: MiniParse.Spec.Base.bytes{FStar.Seq.Base.length s == 2} -> Prims.GTot FStar.UInt16.t
(declare-fun Tm_ghost_arrow_1fe656d4093709d679ecab497618c373 () Term)
(declare-fun Tm_refine_88e6b228c6827e1647d7d72b7b8f008b () Term)
(declare-fun MiniParse.Spec.Int.parse_u16_aux@tok () Term)


; </end encoding let parse_u16_aux>


; <Start encoding let parse_u16>

(declare-fun MiniParse.Spec.Int.parse_u16 (Dummy_sort) Term)

; </end encoding let parse_u16>


; <Start encoding let serialize_u16'>

(declare-fun MiniParse.Spec.Int.serialize_u16_ (Dummy_sort) Term)

; </end encoding let serialize_u16'>


; <Skipped #set-options "--z3rlimit 16"/>


; <Start encoding let serialize_u16>

(declare-fun MiniParse.Spec.Int.serialize_u16 (Dummy_sort) Term)

; </end encoding let serialize_u16>


; <Skipped #reset-options/>


; <Start encoding let mk_u16>

(declare-fun Tm_refine_641a6a7f4fb70f47c0def193c3c84dcf () Term)
(declare-fun MiniParse.Spec.Int.mk_u16 (Term) Term)

;;;;;;;;;;;;;;;;n: Prims.nat{n < 65536} -> FStar.UInt16.t
(declare-fun Tm_arrow_e77b3a272d1475960ee316d0ad701052 () Term)
(declare-fun MiniParse.Spec.Int.mk_u16@tok () Term)


; </end encoding let mk_u16>


; <Start encoding let bounded_u16>

(declare-fun MiniParse.Spec.Int.bounded_u16 (Term) Term)
;;;;;;;;;;;;;;;;b: Prims.nat -> Prims.eqtype
(declare-fun Tm_arrow_c5d86fb0d75b77cc2c34a8ca4931c392 () Term)
(declare-fun MiniParse.Spec.Int.bounded_u16@tok () Term)
(declare-fun Tm_refine_122393b221b19344c38b437c8217b781 (Term) Term)

; </end encoding let bounded_u16>


; <Start encoding let bounded_fun>

(declare-fun MiniParse.Spec.Int.bounded_fun (Term Term) Term)

(declare-fun MiniParse.Spec.Int.bounded_fun@tok () Term)
;;;;;;;;;;;;;;;;_: a -> bounded_u16 b
(declare-fun Tm_arrow_ea28364d911625630bebd8a591772bd7 (Term Term) Term)

; </end encoding let bounded_fun>


; <Start encoding let map_u16_to_bounded_u16>

;;;;;;;;;;;;;;;;_: a -> FStar.UInt16.t
(declare-fun Tm_arrow_670668ac62b2b8cad58ffee83e056603 (Term) Term)
;;;;;;;;;;;;;;;;x: a -> Prims.squash (FStar.UInt16.v (f x) < bound)
(declare-fun Tm_arrow_b440bd76a63a91e54a1d795facd13491 (Term Term Term) Term)


(declare-fun MiniParse.Spec.Int.map_u16_to_bounded_u16 (Term Term Term Term Term Term Term Term) Term)




;;;;;;;;;;;;;;;;a: Type ->     bound: Prims.nat ->     f: (_: a -> FStar.UInt16.t) ->     g: (x: a -> Prims.squash (FStar.UInt16.v (f x) < bound)) ->     a': Type ->     bound': Prims.nat ->     u1: Prims.squash (a == a') ->     u2: Prims.squash (bound == bound')   -> bounded_fun a' bound'
(declare-fun Tm_arrow_fd6d67ce93bcb22b84c173bee77d329d () Term)
(declare-fun MiniParse.Spec.Int.map_u16_to_bounded_u16@tok () Term)





(declare-fun Tm_abs_fbf00aa09d37c7399bfcfd8b328d3d11 (Term Term Term) Term)

; </end encoding let map_u16_to_bounded_u16>


; <Start encoding let pred_pre>

(declare-fun Tm_refine_35fb8759ee35d7bf7cf3df6dd7bf565c () Term)
;;;;;;;;;;;;;;;;_: bounded_u16 bound -> Prims.GTot Type
(declare-fun Tm_arrow_7b48bf5c91b1e428e5f3665bb06f2192 (Term) Term)
(declare-fun MiniParse.Spec.Int.pred_pre (Term Term Term) Term)


;;;;;;;;;;;;;;;;bound: Prims.nat{bound > 0 /\ bound <= 65536} ->     pred: (_: bounded_u16 bound -> Prims.GTot Type) ->     x: bounded_u16 (bound - 1)   -> Prims.GTot Type
(declare-fun Tm_arrow_33a928c5bee2efaac834c84182487440 () Term)
(declare-fun MiniParse.Spec.Int.pred_pre@tok () Term)



; </end encoding let pred_pre>


; <Start encoding let pred_large_bound>

(declare-fun Tm_refine_ed1ec337958d4240fdc3197cba495263 () Term)

(declare-fun MiniParse.Spec.Int.pred_large_bound (Term Term Term) Term)


;;;;;;;;;;;;;;;;bound: Prims.nat{bound > 65536} ->     pred: (_: bounded_u16 bound -> Prims.GTot Type) ->     x: bounded_u16 (bound - 1)   -> Prims.GTot Type
(declare-fun Tm_arrow_e5e2d48cba4ff92685d92d90a0935dbb () Term)
(declare-fun MiniParse.Spec.Int.pred_large_bound@tok () Term)



; </end encoding let pred_large_bound>


; <Start encoding let rec forall_bounded_u16>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun MiniParse.Spec.Int.forall_bounded_u16.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun MiniParse.Spec.Int.forall_bounded_u16.fuel_instrumented_token () Term)
(declare-fun MiniParse.Spec.Int.forall_bounded_u16 (Term Term) Term)
(declare-fun MiniParse.Spec.Int.forall_bounded_u16@tok () Term)



;;;;;;;;;;;;;;;;bound: Prims.nat -> pred: (_: bounded_u16 bound -> Prims.GTot Type) -> Prims.GTot Type
(declare-fun Tm_arrow_a171d798d0d7465df53d9e7b11f81ce0 () Term)

; </end encoding let rec forall_bounded_u16>


; <Start encoding let rec forall_bounded_u16_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.Int.forall_bounded_u16_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.Int.forall_bounded_u16_elim@tok () Term)

; </end encoding let rec forall_bounded_u16_elim>


; <Start encoding let bounded_u16_eq>

(declare-fun MiniParse.Spec.Int.bounded_u16_eq (Term) Term)
;;;;;;;;;;;;;;;;_: bounded_u16 b -> _: bounded_u16 b -> Prims.bool
(declare-fun Tm_arrow_33a72bc16588118f0decef65c06c46c2 (Term) Term)
;;;;;;;;;;;;;;;;b: Prims.nat -> _: bounded_u16 b -> _: bounded_u16 b -> Prims.bool
(declare-fun Tm_arrow_7ee15e144092628e702a85bc7909f3b8 () Term)
(declare-fun MiniParse.Spec.Int.bounded_u16_eq@tok () Term)


; </end encoding let bounded_u16_eq>


; <Start encoding let parse_bounded_u16>

(declare-fun MiniParse.Spec.Int.parse_bounded_u16 (Term) Term)
;;;;;;;;;;;;;;;;b: Prims.nat -> MiniParse.Spec.Base.parser_spec (bounded_u16 b)
(declare-fun Tm_arrow_b430edc8cdd3249d4b4e33bf4c1334c1 () Term)
(declare-fun MiniParse.Spec.Int.parse_bounded_u16@tok () Term)
(declare-fun Tm_refine_28d40196b504f2f00d0f756448346c5b (Term) Term)
;;;;;;;;;;;;;;;;x: FStar.UInt16.t -> Prims.GTot Prims.bool
(declare-fun Tm_ghost_arrow_3eb2fc70fe724a348d14c70febbc926e () Term)
(declare-fun Tm_abs_d129c60c9d6c84ddcba0badb27fa9ea9 (Term) Term)


;;;;;;;;;;;;;;;;x: FStar.UInt16.t{FStar.UInt16.v x < b == true} -> Prims.GTot (bounded_u16 b)
(declare-fun Tm_ghost_arrow_01c6d6a58a988a75184aa1b1fe89d44d (Term) Term)
(declare-fun Tm_abs_de01c43b3546b0d51de0388ad2d8dcc9 (Term) Term)

;;;;;;;;;;;;;;;;x: bounded_u16 b -> Prims.GTot (x: FStar.UInt16.t{FStar.UInt16.v x < b == true})
(declare-fun Tm_ghost_arrow_6bbc4bf54d0a9cdc9fa6b8ec018624d7 (Term) Term)
(declare-fun Tm_abs_1b9ab6f3d31dfe1991901f56a9cb8b84 (Term) Term)

; </end encoding let parse_bounded_u16>


; <Start encoding let serialize_bounded_u16>

(declare-fun MiniParse.Spec.Int.serialize_bounded_u16 (Term) Term)
;;;;;;;;;;;;;;;;b: Prims.nat -> MiniParse.Spec.Base.serializer_spec (parse_bounded_u16 b)
(declare-fun Tm_arrow_cde7a0f8b8d97fc872272376eab4ae43 () Term)
(declare-fun MiniParse.Spec.Int.serialize_bounded_u16@tok () Term)













; </end encoding let serialize_bounded_u16>


; End Externals for module MiniParse.Spec.Int


; Externals for module MiniParse.Tac.Base


; <Start encoding let pack_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Tac.Base.pack_nat (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Tac.Base.pack_nat@tok () Term)

; </end encoding let pack_nat>


; <Start encoding let rec app_head_rev_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Tac.Base.app_head_rev_tail (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Tac.Base.app_head_rev_tail@tok () Term)

; </end encoding let rec app_head_rev_tail>


; <Start encoding let app_head_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Tac.Base.app_head_tail (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Tac.Base.app_head_tail@tok () Term)

; </end encoding let app_head_tail>


; <Start encoding let ctest>

(declare-fun MiniParse.Tac.Base.ctest (Term Term) Term)
;;;;;;;;;;;;;;;;v: Prims.bool -> test: Prims.bool -> Type
(declare-fun Tm_arrow_7e42a58141940ca7fd41a690d8df93fc () Term)
(declare-fun MiniParse.Tac.Base.ctest@tok () Term)


; </end encoding let ctest>


; <Start encoding let mk_if_t>

;;;;;;;;;;;;;;;;_: ctest true test -> t
(declare-fun Tm_arrow_c2c36b0ec54253456b05b73566232633 (Term Term) Term)
;;;;;;;;;;;;;;;;_: ctest false test -> t
(declare-fun Tm_arrow_84a12e2f67e31a2062dfaba30c107dd0 (Term Term) Term)
(declare-fun MiniParse.Tac.Base.mk_if_t (Term Term Term Term) Term)


;;;;;;;;;;;;;;;;test: Prims.bool -> x1: (_: ctest true test -> t) -> x2: (_: ctest false test -> t) -> t
(declare-fun Tm_arrow_1fefde169294f62ed3050ad6d3b29cdf () Term)
(declare-fun MiniParse.Tac.Base.mk_if_t@tok () Term)



; </end encoding let mk_if_t>


; <Start encoding let mk_if>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Tac.Base.mk_if (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Tac.Base.mk_if@tok () Term)

; </end encoding let mk_if>


; <Start encoding let tfail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Tac.Base.tfail (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Tac.Base.tfail@tok () Term)

; </end encoding let tfail>


; <Start encoding let rec string_of_name>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun MiniParse.Tac.Base.string_of_name.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun MiniParse.Tac.Base.string_of_name.fuel_instrumented_token () Term)
(declare-fun MiniParse.Tac.Base.string_of_name (Term) Term)
(declare-fun MiniParse.Tac.Base.string_of_name@tok () Term)


; </end encoding let rec string_of_name>


; <Start encoding let unfold_fv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Tac.Base.unfold_fv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Tac.Base.unfold_fv@tok () Term)

; </end encoding let unfold_fv>


; <Start encoding let unfold_term>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Tac.Base.unfold_term (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Tac.Base.unfold_term@tok () Term)

; </end encoding let unfold_term>


; <Start encoding let tsuccess>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Tac.Base.tsuccess (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Tac.Base.tsuccess@tok () Term)

; </end encoding let tsuccess>


; <Start encoding let rec to_all_goals>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Tac.Base.to_all_goals (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Tac.Base.to_all_goals@tok () Term)

; </end encoding let rec to_all_goals>


; <Start encoding let rec imm_solve_goal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Tac.Base.imm_solve_goal (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Tac.Base.imm_solve_goal@tok () Term)

; </end encoding let rec imm_solve_goal>


; <Start encoding let tforall_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Tac.Base.tforall_intro (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Tac.Base.tforall_intro@tok () Term)

; </end encoding let tforall_intro>


; <Start encoding let timplies_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Tac.Base.timplies_intro (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Tac.Base.timplies_intro@tok () Term)

; </end encoding let timplies_intro>


; <Start encoding let tsplit>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Tac.Base.tsplit (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Tac.Base.tsplit@tok () Term)

; </end encoding let tsplit>


; <Start encoding let rec solve_goal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Tac.Base.solve_goal (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Tac.Base.solve_goal@tok () Term)

; </end encoding let rec solve_goal>


; <Start encoding let rec tconclude_with>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Tac.Base.tconclude_with (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Tac.Base.tconclude_with@tok () Term)

; </end encoding let rec tconclude_with>


; <Start encoding let tconclude>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Tac.Base.tconclude (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Tac.Base.tconclude@tok () Term)

; </end encoding let tconclude>


; <Start encoding let according_to>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Tac.Base.according_to (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Tac.Base.according_to@tok () Term)

; </end encoding let according_to>


; End Externals for module MiniParse.Tac.Base

(push) ;; push{1

; Internals for MiniParse.Spec.TEnum

;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.__cache_version_number__; Namespace Prims
(assert (! (HasType Prims.__cache_version_number__
Prims.int)
:named function_token_typing_Prims.__cache_version_number__))
;;;;;;;;;;;;;;;;Range_const typing
;;; Fact-ids: Name FStar.Range.range; Namespace FStar.Range
(assert (! (HasTypeZ (Range_const 1)
FStar.Range.range)
:named typing_range_const))
;;;;;;;;;;;;;;;;Constructor base
;;; Fact-ids: Name FStar.Stubs.Tactics.Common.NotAListLiteral; Namespace FStar.Stubs.Tactics.Common
(assert (! (implies (is-FStar.Stubs.Tactics.Common.NotAListLiteral FStar.Stubs.Tactics.Common.NotAListLiteral)
(= FStar.Stubs.Tactics.Common.NotAListLiteral
FStar.Stubs.Tactics.Common.NotAListLiteral@base))
:named constructor_base_FStar.Stubs.Tactics.Common.NotAListLiteral))
;;;;;;;;;;;;;;;;Constructor base
;;; Fact-ids: Name FStar.Stubs.Tactics.Common.SKIP; Namespace FStar.Stubs.Tactics.Common
(assert (! (implies (is-FStar.Stubs.Tactics.Common.SKIP FStar.Stubs.Tactics.Common.SKIP)
(= FStar.Stubs.Tactics.Common.SKIP
FStar.Stubs.Tactics.Common.SKIP@base))
:named constructor_base_FStar.Stubs.Tactics.Common.SKIP))
;;;;;;;;;;;;;;;;Constructor base
;;; Fact-ids: Name FStar.Tactics.V2.Derived.Goal_not_trivial; Namespace FStar.Tactics.V2.Derived
(assert (! (implies (is-FStar.Tactics.V2.Derived.Goal_not_trivial FStar.Tactics.V2.Derived.Goal_not_trivial)
(= FStar.Tactics.V2.Derived.Goal_not_trivial
FStar.Tactics.V2.Derived.Goal_not_trivial@base))
:named constructor_base_FStar.Tactics.V2.Derived.Goal_not_trivial))
;;;;;;;;;;;;;;;;well-founded ordering on nat (alt)
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Prims.int)
(HasTypeFuel @u0
@x2
Prims.int)
(> (BoxInt_proj_0 @x1)
0)
(>= (BoxInt_proj_0 @x2)
0)
(< (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x1)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
@x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.int) (HasTypeFuel @u0
@x2
Prims.int) (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
@x1)))
:qid well-founded-ordering-on-nat))
:named well-founded-ordering-on-nat))
;;;;;;;;;;;;;;;;unit typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Tm_unit
Prims.unit)
:named unit_typing))
;;;;;;;;;;;;;;;;unit inversion
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.unit)
(= @x1
Tm_unit))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.unit))
:qid unit_inversion))
:named unit_inversion))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (HasType Prims.T@tok
Prims.trivial)
:named typing_tok_Prims.T@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType FStar.Stubs.Reflection.V2.Data.Tv_Unsupp@tok
FStar.Stubs.Reflection.V2.Data.term_view)
:named typing_tok_FStar.Stubs.Reflection.V2.Data.Tv_Unsupp@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType FStar.Stubs.Reflection.V2.Data.Tv_Unknown@tok
FStar.Stubs.Reflection.V2.Data.term_view)
:named typing_tok_FStar.Stubs.Reflection.V2.Data.Tv_Unknown@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.aqualv; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Implicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Explicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Equality; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Meta; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType FStar.Stubs.Reflection.V2.Data.Q_Implicit@tok
FStar.Stubs.Reflection.V2.Data.aqualv)
:named typing_tok_FStar.Stubs.Reflection.V2.Data.Q_Implicit@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.aqualv; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Implicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Explicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Equality; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Meta; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType FStar.Stubs.Reflection.V2.Data.Q_Explicit@tok
FStar.Stubs.Reflection.V2.Data.aqualv)
:named typing_tok_FStar.Stubs.Reflection.V2.Data.Q_Explicit@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.aqualv; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Implicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Explicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Equality; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Meta; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType FStar.Stubs.Reflection.V2.Data.Q_Equality@tok
FStar.Stubs.Reflection.V2.Data.aqualv)
:named typing_tok_FStar.Stubs.Reflection.V2.Data.Q_Equality@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType FStar.Stubs.Reflection.V2.Data.C_Unit@tok
FStar.Stubs.Reflection.V2.Data.vconst)
:named typing_tok_FStar.Stubs.Reflection.V2.Data.C_Unit@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType FStar.Stubs.Reflection.V2.Data.C_True@tok
FStar.Stubs.Reflection.V2.Data.vconst)
:named typing_tok_FStar.Stubs.Reflection.V2.Data.C_True@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType FStar.Stubs.Reflection.V2.Data.C_Reify@tok
FStar.Stubs.Reflection.V2.Data.vconst)
:named typing_tok_FStar.Stubs.Reflection.V2.Data.C_Reify@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType FStar.Stubs.Reflection.V2.Data.C_False@tok
FStar.Stubs.Reflection.V2.Data.vconst)
:named typing_tok_FStar.Stubs.Reflection.V2.Data.C_False@tok))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.uu___is_Nil; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list @x0)))
(HasType (Prims.uu___is_Nil @x0
@x1)
Prims.bool))
 

:pattern ((Prims.uu___is_Nil @x0
@x1))
:qid typing_Prims.uu___is_Nil))

:named typing_Prims.uu___is_Nil))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.uu___is_Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list @x0)))
(HasType (Prims.uu___is_Cons @x0
@x1)
Prims.bool))
 

:pattern ((Prims.uu___is_Cons @x0
@x1))
:qid typing_Prims.uu___is_Cons))

:named typing_Prims.uu___is_Cons))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Prims.unit
Prims.eqtype)
:named typing_Prims.unit))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.subtype_of @x0
@x1)
Prims.logical))
 

:pattern ((Prims.subtype_of @x0
@x1))
:qid typing_Prims.subtype_of))

:named typing_Prims.subtype_of))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.string; Namespace Prims
(assert (! (HasType Prims.string
Prims.eqtype)
:named typing_Prims.string))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,5-117,11); use=Prims.fst(117,5-117,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.squash @x0)
Tm_type))
 

:pattern ((Prims.squash @x0))
:qid typing_Prims.squash))

:named typing_Prims.squash))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Prims.prop
Tm_type)
:named typing_Prims.prop))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pow2; Namespace Prims
(assert (! 
;; def=Prims.fst(708,8-708,12); use=Prims.fst(708,8-708,12)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.nat)
(HasType (Prims.pow2 @x0)
Prims.pos))
 

:pattern ((Prims.pow2 @x0))
:qid typing_Prims.pow2))

:named typing_Prims.pow2))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (HasType Prims.pos
Tm_type)
:named typing_Prims.pos))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Prims.nat
Tm_type)
:named typing_Prims.nat))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (HasType Prims.logical
Tm_type)
:named typing_Prims.logical))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (HasType Prims.l_True
Prims.logical)
:named typing_Prims.l_True))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (HasType Prims.int
Prims.eqtype)
:named typing_Prims.int))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.hasEq; Namespace Prims
(assert (! 
;; def=Prims.fst(69,5-69,10); use=Prims.fst(69,5-69,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.hasEq @x0)
Tm_type))
 

:pattern ((Prims.hasEq @x0))
:qid typing_Prims.hasEq))

:named typing_Prims.hasEq))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.guard_free; Namespace Prims
(assert (! 
;; def=Prims.fst(346,5-346,15); use=Prims.fst(346,5-346,15)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.guard_free @x0)
Tm_type))
 

:pattern ((Prims.guard_free @x0))
:qid typing_Prims.guard_free))

:named typing_Prims.guard_free))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.exn; Namespace Prims
(assert (! (HasType Prims.exn
Tm_type)
:named typing_Prims.exn))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Prims.eqtype
Tm_type)
:named typing_Prims.eqtype))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (HasType Prims.bool
Prims.eqtype)
:named typing_Prims.bool))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.size; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(50,4-50,8); use=FStar.UInt.fsti(50,4-50,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.int)
(HasType @x1
Prims.nat))
(HasType (FStar.UInt.size @x0
@x1)
Tm_type))
 

:pattern ((FStar.UInt.size @x0
@x1))
:qid typing_FStar.UInt.size))

:named typing_FStar.UInt.size))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.min_int; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(47,4-47,11); use=FStar.UInt.fsti(47,4-47,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.nat)
(HasType (FStar.UInt.min_int @x0)
Prims.int))
 

:pattern ((FStar.UInt.min_int @x0))
:qid typing_FStar.UInt.min_int))

:named typing_FStar.UInt.min_int))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.max_int; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(46,4-46,11); use=FStar.UInt.fsti(46,4-46,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.nat)
(HasType (FStar.UInt.max_int @x0)
Prims.int))
 

:pattern ((FStar.UInt.max_int @x0))
:qid typing_FStar.UInt.max_int))

:named typing_FStar.UInt.max_int))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.fits; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(49,4-49,8); use=FStar.UInt.fsti(49,4-49,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.int)
(HasType @x1
Prims.nat))
(HasType (FStar.UInt.fits @x0
@x1)
Prims.bool))
 

:pattern ((FStar.UInt.fits @x0
@x1))
:qid typing_FStar.UInt.fits))

:named typing_FStar.UInt.fits))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Pat_Var; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(78,3-78,10); use=FStar.Tactics.NamedView.fsti(78,3-78,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Tactics.NamedView.pattern)
(HasType (FStar.Tactics.NamedView.uu___is_Pat_Var @x0)
Prims.bool))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Pat_Var @x0))
:qid typing_FStar.Tactics.NamedView.uu___is_Pat_Var))

:named typing_FStar.Tactics.NamedView.uu___is_Pat_Var))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(84,3-84,15); use=FStar.Tactics.NamedView.fsti(84,3-84,15)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Tactics.NamedView.pattern)
(HasType (FStar.Tactics.NamedView.uu___is_Pat_Dot_Term @x0)
Prims.bool))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Pat_Dot_Term @x0))
:qid typing_FStar.Tactics.NamedView.uu___is_Pat_Dot_Term))

:named typing_FStar.Tactics.NamedView.uu___is_Pat_Dot_Term))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Pat_Constant; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(65,3-65,15); use=FStar.Tactics.NamedView.fsti(65,3-65,15)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Tactics.NamedView.pattern)
(HasType (FStar.Tactics.NamedView.uu___is_Pat_Constant @x0)
Prims.bool))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Pat_Constant @x0))
:qid typing_FStar.Tactics.NamedView.uu___is_Pat_Constant))

:named typing_FStar.Tactics.NamedView.uu___is_Pat_Constant))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Pat_Cons; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(71,3-71,11); use=FStar.Tactics.NamedView.fsti(71,3-71,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Tactics.NamedView.pattern)
(HasType (FStar.Tactics.NamedView.uu___is_Pat_Cons @x0)
Prims.bool))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Pat_Cons @x0))
:qid typing_FStar.Tactics.NamedView.uu___is_Pat_Cons))

:named typing_FStar.Tactics.NamedView.uu___is_Pat_Cons))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Tactics.NamedView.term; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.term
Tm_type)
:named typing_FStar.Tactics.NamedView.term))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Tactics.NamedView.namedv; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.namedv
Tm_type)
:named typing_FStar.Tactics.NamedView.namedv))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Tactics.NamedView.branch; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.branch
Tm_type)
:named typing_FStar.Tactics.NamedView.branch))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Tactics.Types.proofstate; Namespace FStar.Stubs.Tactics.Types
(assert (! (HasType FStar.Stubs.Tactics.Types.proofstate
Tm_type)
:named typing_FStar.Stubs.Tactics.Types.proofstate))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Tactics.Common.uu___is_TacticFailure; Namespace FStar.Stubs.Tactics.Common
(assert (! 
;; def=FStar.Stubs.Tactics.Common.fsti(12,10-12,23); use=FStar.Stubs.Tactics.Common.fsti(12,10-12,23)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.exn)
(HasType (FStar.Stubs.Tactics.Common.uu___is_TacticFailure @x0)
Prims.bool))
 

:pattern ((FStar.Stubs.Tactics.Common.uu___is_TacticFailure @x0))
:qid typing_FStar.Stubs.Tactics.Common.uu___is_TacticFailure))

:named typing_FStar.Stubs.Tactics.Common.uu___is_TacticFailure))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Syntax.Syntax.match_returns_ascription; Namespace FStar.Stubs.Syntax.Syntax
(assert (! (HasType FStar.Stubs.Syntax.Syntax.match_returns_ascription
Tm_type)
:named typing_FStar.Stubs.Syntax.Syntax.match_returns_ascription))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(141,4-141,10); use=FStar.Stubs.Reflection.V2.Data.fsti(141,4-141,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.V2.Data.term_view)
(HasType (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Var @x0)
Prims.bool))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Var @x0))
:qid typing_FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Var))

:named typing_FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Var))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(151,4-151,11); use=FStar.Stubs.Reflection.V2.Data.fsti(151,4-151,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.V2.Data.term_view)
(HasType (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Uvar @x0)
Prims.bool))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Uvar @x0))
:qid typing_FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Uvar))

:named typing_FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Uvar))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(144,4-144,12); use=FStar.Stubs.Reflection.V2.Data.fsti(144,4-144,12)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.V2.Data.term_view)
(HasType (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_UInst @x0)
Prims.bool))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Tv_UInst @x0))
:qid typing_FStar.Stubs.Reflection.V2.Data.uu___is_Tv_UInst))

:named typing_FStar.Stubs.Reflection.V2.Data.uu___is_Tv_UInst))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(148,4-148,11); use=FStar.Stubs.Reflection.V2.Data.fsti(148,4-148,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.V2.Data.term_view)
(HasType (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Type @x0)
Prims.bool))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Type @x0))
:qid typing_FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Type))

:named typing_FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Type))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(149,4-149,13); use=FStar.Stubs.Reflection.V2.Data.fsti(149,4-149,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.V2.Data.term_view)
(HasType (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Refine @x0)
Prims.bool))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Refine @x0))
:qid typing_FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Refine))

:named typing_FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Refine))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(153,4-153,12); use=FStar.Stubs.Reflection.V2.Data.fsti(153,4-153,12)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.V2.Data.term_view)
(HasType (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Match @x0)
Prims.bool))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Match @x0))
:qid typing_FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Match))

:named typing_FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Match))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(152,4-152,10); use=FStar.Stubs.Reflection.V2.Data.fsti(152,4-152,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.V2.Data.term_view)
(HasType (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Let @x0)
Prims.bool))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Let @x0))
:qid typing_FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Let))

:named typing_FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Let))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(143,4-143,11); use=FStar.Stubs.Reflection.V2.Data.fsti(143,4-143,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.V2.Data.term_view)
(HasType (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_FVar @x0)
Prims.bool))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Tv_FVar @x0))
:qid typing_FStar.Stubs.Reflection.V2.Data.uu___is_Tv_FVar))

:named typing_FStar.Stubs.Reflection.V2.Data.uu___is_Tv_FVar))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(150,4-150,12); use=FStar.Stubs.Reflection.V2.Data.fsti(150,4-150,12)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.V2.Data.term_view)
(HasType (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Const @x0)
Prims.bool))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Const @x0))
:qid typing_FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Const))

:named typing_FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Const))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(142,4-142,11); use=FStar.Stubs.Reflection.V2.Data.fsti(142,4-142,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.V2.Data.term_view)
(HasType (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_BVar @x0)
Prims.bool))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Tv_BVar @x0))
:qid typing_FStar.Stubs.Reflection.V2.Data.uu___is_Tv_BVar))

:named typing_FStar.Stubs.Reflection.V2.Data.uu___is_Tv_BVar))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(154,4-154,16); use=FStar.Stubs.Reflection.V2.Data.fsti(154,4-154,16)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.V2.Data.term_view)
(HasType (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_AscribedT @x0)
Prims.bool))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Tv_AscribedT @x0))
:qid typing_FStar.Stubs.Reflection.V2.Data.uu___is_Tv_AscribedT))

:named typing_FStar.Stubs.Reflection.V2.Data.uu___is_Tv_AscribedT))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(155,4-155,16); use=FStar.Stubs.Reflection.V2.Data.fsti(155,4-155,16)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.V2.Data.term_view)
(HasType (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_AscribedC @x0)
Prims.bool))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Tv_AscribedC @x0))
:qid typing_FStar.Stubs.Reflection.V2.Data.uu___is_Tv_AscribedC))

:named typing_FStar.Stubs.Reflection.V2.Data.uu___is_Tv_AscribedC))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(147,4-147,12); use=FStar.Stubs.Reflection.V2.Data.fsti(147,4-147,12)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.V2.Data.term_view)
(HasType (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Arrow @x0)
Prims.bool))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Arrow @x0))
:qid typing_FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Arrow))

:named typing_FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Arrow))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Tv_App; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(145,4-145,10); use=FStar.Stubs.Reflection.V2.Data.fsti(145,4-145,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.V2.Data.term_view)
(HasType (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_App @x0)
Prims.bool))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Tv_App @x0))
:qid typing_FStar.Stubs.Reflection.V2.Data.uu___is_Tv_App))

:named typing_FStar.Stubs.Reflection.V2.Data.uu___is_Tv_App))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(146,4-146,10); use=FStar.Stubs.Reflection.V2.Data.fsti(146,4-146,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.V2.Data.term_view)
(HasType (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Abs @x0)
Prims.bool))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Abs @x0))
:qid typing_FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Abs))

:named typing_FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Abs))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Q_Meta; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(80,4-80,10); use=FStar.Stubs.Reflection.V2.Data.fsti(80,4-80,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.V2.Data.aqualv)
(HasType (FStar.Stubs.Reflection.V2.Data.uu___is_Q_Meta @x0)
Prims.bool))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Q_Meta @x0))
:qid typing_FStar.Stubs.Reflection.V2.Data.uu___is_Q_Meta))

:named typing_FStar.Stubs.Reflection.V2.Data.uu___is_Q_Meta))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Q_Explicit; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(78,4-78,14); use=FStar.Stubs.Reflection.V2.Data.fsti(78,4-78,14)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.V2.Data.aqualv)
(HasType (FStar.Stubs.Reflection.V2.Data.uu___is_Q_Explicit @x0)
Prims.bool))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Q_Explicit @x0))
:qid typing_FStar.Stubs.Reflection.V2.Data.uu___is_Q_Explicit))

:named typing_FStar.Stubs.Reflection.V2.Data.uu___is_Q_Explicit))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Var; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(63,3-63,10); use=FStar.Stubs.Reflection.V2.Data.fsti(63,3-63,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.V2.Data.pattern)
(HasType (FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Var @x0)
Prims.bool))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Var @x0))
:qid typing_FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Var))

:named typing_FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Var))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Dot_Term; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(69,3-69,15); use=FStar.Stubs.Reflection.V2.Data.fsti(69,3-69,15)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.V2.Data.pattern)
(HasType (FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Dot_Term @x0)
Prims.bool))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Dot_Term @x0))
:qid typing_FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Dot_Term))

:named typing_FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Dot_Term))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Constant; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(46,3-46,15); use=FStar.Stubs.Reflection.V2.Data.fsti(46,3-46,15)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.V2.Data.pattern)
(HasType (FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Constant @x0)
Prims.bool))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Constant @x0))
:qid typing_FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Constant))

:named typing_FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Constant))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Cons; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(52,3-52,11); use=FStar.Stubs.Reflection.V2.Data.fsti(52,3-52,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.V2.Data.pattern)
(HasType (FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Cons @x0)
Prims.bool))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Cons @x0))
:qid typing_FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Cons))

:named typing_FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Cons))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_C_String; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(32,4-32,12); use=FStar.Stubs.Reflection.V2.Data.fsti(32,4-32,12)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.V2.Data.vconst)
(HasType (FStar.Stubs.Reflection.V2.Data.uu___is_C_String @x0)
Prims.bool))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_C_String @x0))
:qid typing_FStar.Stubs.Reflection.V2.Data.uu___is_C_String))

:named typing_FStar.Stubs.Reflection.V2.Data.uu___is_C_String))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(35,4-35,13); use=FStar.Stubs.Reflection.V2.Data.fsti(35,4-35,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.V2.Data.vconst)
(HasType (FStar.Stubs.Reflection.V2.Data.uu___is_C_Reflect @x0)
Prims.bool))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_C_Reflect @x0))
:qid typing_FStar.Stubs.Reflection.V2.Data.uu___is_C_Reflect))

:named typing_FStar.Stubs.Reflection.V2.Data.uu___is_C_Reflect))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(36,4-36,10); use=FStar.Stubs.Reflection.V2.Data.fsti(36,4-36,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.V2.Data.vconst)
(HasType (FStar.Stubs.Reflection.V2.Data.uu___is_C_Real @x0)
Prims.bool))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_C_Real @x0))
:qid typing_FStar.Stubs.Reflection.V2.Data.uu___is_C_Real))

:named typing_FStar.Stubs.Reflection.V2.Data.uu___is_C_Real))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_C_Range; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(33,4-33,11); use=FStar.Stubs.Reflection.V2.Data.fsti(33,4-33,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.V2.Data.vconst)
(HasType (FStar.Stubs.Reflection.V2.Data.uu___is_C_Range @x0)
Prims.bool))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_C_Range @x0))
:qid typing_FStar.Stubs.Reflection.V2.Data.uu___is_C_Range))

:named typing_FStar.Stubs.Reflection.V2.Data.uu___is_C_Range))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_C_Int; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(29,4-29,9); use=FStar.Stubs.Reflection.V2.Data.fsti(29,4-29,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.V2.Data.vconst)
(HasType (FStar.Stubs.Reflection.V2.Data.uu___is_C_Int @x0)
Prims.bool))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_C_Int @x0))
:qid typing_FStar.Stubs.Reflection.V2.Data.uu___is_C_Int))

:named typing_FStar.Stubs.Reflection.V2.Data.uu___is_C_Int))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.universes; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType FStar.Stubs.Reflection.V2.Data.universes
Tm_type)
:named typing_FStar.Stubs.Reflection.V2.Data.universes))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.simple_binder; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType FStar.Stubs.Reflection.V2.Data.simple_binder
Tm_type)
:named typing_FStar.Stubs.Reflection.V2.Data.simple_binder))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.ppname_t; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType FStar.Stubs.Reflection.V2.Data.ppname_t
Tm_type)
:named typing_FStar.Stubs.Reflection.V2.Data.ppname_t))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.branch; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType FStar.Stubs.Reflection.V2.Data.branch
Tm_type)
:named typing_FStar.Stubs.Reflection.V2.Data.branch))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.binder_is_simple; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(125,4-125,20); use=FStar.Stubs.Reflection.V2.Data.fsti(125,4-125,20)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.Types.binder)
(HasType (FStar.Stubs.Reflection.V2.Data.binder_is_simple @x0)
Prims.bool))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.binder_is_simple @x0))
:qid typing_FStar.Stubs.Reflection.V2.Data.binder_is_simple))

:named typing_FStar.Stubs.Reflection.V2.Data.binder_is_simple))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.argv; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType FStar.Stubs.Reflection.V2.Data.argv
Tm_type)
:named typing_FStar.Stubs.Reflection.V2.Data.argv))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__qual; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(105,2-105,6); use=FStar.Stubs.Reflection.V2.Data.fsti(105,2-105,6)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.V2.Data.binder_view)
(HasType (FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__qual @x0)
FStar.Stubs.Reflection.V2.Data.aqualv))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__qual @x0))
:qid typing_FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__qual))

:named typing_FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__qual))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__attrs; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(106,2-106,7); use=FStar.Stubs.Reflection.V2.Data.fsti(106,2-106,7)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.V2.Data.binder_view)
(HasType (FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__attrs @x0)
(Prims.list FStar.Stubs.Reflection.Types.term)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__attrs @x0))
:qid typing_FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__attrs))

:named typing_FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__attrs))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Builtins.pack_ln; Namespace FStar.Stubs.Reflection.V2.Builtins
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Builtins.fsti(50,4-50,11); use=FStar.Stubs.Reflection.V2.Builtins.fsti(50,4-50,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.V2.Data.term_view)
(HasType (FStar.Stubs.Reflection.V2.Builtins.pack_ln @x0)
FStar.Stubs.Reflection.Types.term))
 

:pattern ((FStar.Stubs.Reflection.V2.Builtins.pack_ln @x0))
:qid typing_FStar.Stubs.Reflection.V2.Builtins.pack_ln))

:named typing_FStar.Stubs.Reflection.V2.Builtins.pack_ln))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Builtins.pack_fv; Namespace FStar.Stubs.Reflection.V2.Builtins
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Builtins.fsti(59,4-59,11); use=FStar.Stubs.Reflection.V2.Builtins.fsti(59,4-59,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
(FStar.Stubs.Reflection.Types.name Dummy_value))
(HasType (FStar.Stubs.Reflection.V2.Builtins.pack_fv @x0)
FStar.Stubs.Reflection.Types.fv))
 

:pattern ((FStar.Stubs.Reflection.V2.Builtins.pack_fv @x0))
:qid typing_FStar.Stubs.Reflection.V2.Builtins.pack_fv))

:named typing_FStar.Stubs.Reflection.V2.Builtins.pack_fv))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Builtins.inspect_binder; Namespace FStar.Stubs.Reflection.V2.Builtins
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Builtins.fsti(70,4-70,18); use=FStar.Stubs.Reflection.V2.Builtins.fsti(70,4-70,18)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.Types.binder)
(HasType (FStar.Stubs.Reflection.V2.Builtins.inspect_binder @x0)
(Tm_refine_336c863ebf681869395d10a4c152247a @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Builtins.inspect_binder @x0))
:qid typing_FStar.Stubs.Reflection.V2.Builtins.inspect_binder))

:named typing_FStar.Stubs.Reflection.V2.Builtins.inspect_binder))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.universe; Namespace FStar.Stubs.Reflection.Types
(assert (! (HasType FStar.Stubs.Reflection.Types.universe
Tm_type)
:named typing_FStar.Stubs.Reflection.Types.universe))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.typ; Namespace FStar.Stubs.Reflection.Types
(assert (! (HasType FStar.Stubs.Reflection.Types.typ
Tm_type)
:named typing_FStar.Stubs.Reflection.Types.typ))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.term; Namespace FStar.Stubs.Reflection.Types
(assert (! (HasType FStar.Stubs.Reflection.Types.term
Tm_type)
:named typing_FStar.Stubs.Reflection.Types.term))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.namedv; Namespace FStar.Stubs.Reflection.Types
(assert (! (HasType FStar.Stubs.Reflection.Types.namedv
Tm_type)
:named typing_FStar.Stubs.Reflection.Types.namedv))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.name; Namespace FStar.Stubs.Reflection.Types
(assert (! 
;; def=FStar.Stubs.Reflection.Types.fsti(37,5-37,9); use=FStar.Stubs.Reflection.Types.fsti(37,5-37,9)
(forall ((@u0 Dummy_sort))
 (! (HasType (FStar.Stubs.Reflection.Types.name @u0)
Prims.eqtype)
 

:pattern ((FStar.Stubs.Reflection.Types.name @u0))
:qid typing_FStar.Stubs.Reflection.Types.name))

:named typing_FStar.Stubs.Reflection.Types.name))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.fv; Namespace FStar.Stubs.Reflection.Types
(assert (! (HasType FStar.Stubs.Reflection.Types.fv
Tm_type)
:named typing_FStar.Stubs.Reflection.Types.fv))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.env; Namespace FStar.Stubs.Reflection.Types
(assert (! (HasType FStar.Stubs.Reflection.Types.env
Tm_type)
:named typing_FStar.Stubs.Reflection.Types.env))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.ctx_uvar_and_subst; Namespace FStar.Stubs.Reflection.Types
(assert (! (HasType FStar.Stubs.Reflection.Types.ctx_uvar_and_subst
Tm_type)
:named typing_FStar.Stubs.Reflection.Types.ctx_uvar_and_subst))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.comp; Namespace FStar.Stubs.Reflection.Types
(assert (! (HasType FStar.Stubs.Reflection.Types.comp
Tm_type)
:named typing_FStar.Stubs.Reflection.Types.comp))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.bv; Namespace FStar.Stubs.Reflection.Types
(assert (! (HasType FStar.Stubs.Reflection.Types.bv
Tm_type)
:named typing_FStar.Stubs.Reflection.Types.bv))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.binder; Namespace FStar.Stubs.Reflection.Types
(assert (! (HasType FStar.Stubs.Reflection.Types.binder
Tm_type)
:named typing_FStar.Stubs.Reflection.Types.binder))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Errors.Msg.error_message; Namespace FStar.Stubs.Errors.Msg
(assert (! (HasType FStar.Stubs.Errors.Msg.error_message
Tm_type)
:named typing_FStar.Stubs.Errors.Msg.error_message))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Sealed.sealed; Namespace FStar.Sealed
(assert (! 
;; def=FStar.Sealed.fsti(34,9-34,15); use=FStar.Sealed.fsti(34,9-34,15)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Sealed.sealed @x0)
Tm_type))
 

:pattern ((FStar.Sealed.sealed @x0))
:qid typing_FStar.Sealed.sealed))

:named typing_FStar.Sealed.sealed))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Sealed.seal; Namespace FStar.Sealed
(assert (! 
;; def=FStar.Sealed.fsti(47,4-47,8); use=FStar.Sealed.fsti(47,4-47,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0))
(HasType (FStar.Sealed.seal @x0
@x1)
(FStar.Sealed.sealed @x0)))
 

:pattern ((FStar.Sealed.seal @x0
@x1))
:qid typing_FStar.Sealed.seal))

:named typing_FStar.Sealed.seal))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Sealed.Inhabited.sealed_; Namespace FStar.Sealed.Inhabited
(assert (! 
;; def=FStar.Sealed.Inhabited.fst(30,4-30,11); use=FStar.Sealed.Inhabited.fst(30,4-30,11)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0))
(HasType (FStar.Sealed.Inhabited.sealed_ @x0
@x1)
Tm_type))
 

:pattern ((FStar.Sealed.Inhabited.sealed_ @x0
@x1))
:qid typing_FStar.Sealed.Inhabited.sealed_))

:named typing_FStar.Sealed.Inhabited.sealed_))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Sealed.Inhabited.sealed; Namespace FStar.Sealed.Inhabited
(assert (! 
;; def=FStar.Sealed.Inhabited.fst(42,4-42,10); use=FStar.Sealed.Inhabited.fst(42,4-42,10)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0))
(HasType (FStar.Sealed.Inhabited.sealed @x0
@x1)
Tm_type))
 

:pattern ((FStar.Sealed.Inhabited.sealed @x0
@x1))
:qid typing_FStar.Sealed.Inhabited.sealed))

:named typing_FStar.Sealed.Inhabited.sealed))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Sealed.Inhabited.seal; Namespace FStar.Sealed.Inhabited
(assert (! 
;; def=FStar.Sealed.Inhabited.fst(48,4-48,8); use=FStar.Sealed.Inhabited.fst(48,4-48,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0)
(HasType @x2
@x0))
(HasType (FStar.Sealed.Inhabited.seal @x0
@x1
@x2)
(FStar.Sealed.Inhabited.sealed @x0
@x1)))
 

:pattern ((FStar.Sealed.Inhabited.seal @x0
@x1
@x2))
:qid typing_FStar.Sealed.Inhabited.seal))

:named typing_FStar.Sealed.Inhabited.seal))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Sealed.Inhabited.is_sealed; Namespace FStar.Sealed.Inhabited
(assert (! 
;; def=FStar.Sealed.Inhabited.fst(36,4-36,13); use=FStar.Sealed.Inhabited.fst(36,4-36,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0)
(HasType @x2
(FStar.Sealed.Inhabited.sealed_ @x0
@x1)))
(HasType (FStar.Sealed.Inhabited.is_sealed @x0
@x1
@x2)
Prims.prop))
 

:pattern ((FStar.Sealed.Inhabited.is_sealed @x0
@x1
@x2))
:qid typing_FStar.Sealed.Inhabited.is_sealed))

:named typing_FStar.Sealed.Inhabited.is_sealed))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Reflection.V2.Derived.mk_app; Namespace FStar.Reflection.V2.Derived
(assert (! 
;; def=FStar.Reflection.V2.Derived.fst(91,8-91,14); use=FStar.Reflection.V2.Derived.fst(91,8-91,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
FStar.Stubs.Reflection.Types.term)
(HasType @x1
(Prims.list FStar.Stubs.Reflection.V2.Data.argv)))
(HasType (FStar.Reflection.V2.Derived.mk_app @x0
@x1)
FStar.Stubs.Reflection.Types.term))
 

:pattern ((FStar.Reflection.V2.Derived.mk_app @x0
@x1))
:qid typing_FStar.Reflection.V2.Derived.mk_app))

:named typing_FStar.Reflection.V2.Derived.mk_app))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Range.range; Namespace FStar.Range
(assert (! (HasType FStar.Range.range
Tm_type)
:named typing_FStar.Range.range))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Range.__range; Namespace FStar.Range
(assert (! (HasType FStar.Range.__range
Tm_type)
:named typing_FStar.Range.__range))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pprint.document; Namespace FStar.Pprint
(assert (! (HasType FStar.Pprint.document
Tm_type)
:named typing_FStar.Pprint.document))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Pervasives.Native.option @x0)))
(HasType (FStar.Pervasives.Native.uu___is_Some @x0
@x1)
Prims.bool))
 

:pattern ((FStar.Pervasives.Native.uu___is_Some @x0
@x1))
:qid typing_FStar.Pervasives.Native.uu___is_Some))

:named typing_FStar.Pervasives.Native.uu___is_Some))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_None; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Pervasives.Native.option @x0)))
(HasType (FStar.Pervasives.Native.uu___is_None @x0
@x1)
Prims.bool))
 

:pattern ((FStar.Pervasives.Native.uu___is_None @x0
@x1))
:qid typing_FStar.Pervasives.Native.uu___is_None))

:named typing_FStar.Pervasives.Native.uu___is_None))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.List.Tot.Base.length; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(74,8-74,14); use=FStar.List.Tot.Base.fst(74,8-74,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list @x0)))
(HasType (FStar.List.Tot.Base.length @x0
@x1)
Prims.nat))
 

:pattern ((FStar.List.Tot.Base.length @x0
@x1))
:qid typing_FStar.List.Tot.Base.length))

:named typing_FStar.List.Tot.Base.length))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Int.size; Namespace FStar.Int
(assert (! 
;; def=FStar.Int.fsti(45,4-45,8); use=FStar.Int.fsti(45,4-45,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.int)
(HasType @x1
Prims.pos))
(HasType (FStar.Int.size @x0
@x1)
Tm_type))
 

:pattern ((FStar.Int.size @x0
@x1))
:qid typing_FStar.Int.size))

:named typing_FStar.Int.size))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Int.min_int; Namespace FStar.Int
(assert (! 
;; def=FStar.Int.fsti(42,4-42,11); use=FStar.Int.fsti(42,4-42,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.pos)
(HasType (FStar.Int.min_int @x0)
Prims.int))
 

:pattern ((FStar.Int.min_int @x0))
:qid typing_FStar.Int.min_int))

:named typing_FStar.Int.min_int))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Int.max_int; Namespace FStar.Int
(assert (! 
;; def=FStar.Int.fsti(41,4-41,11); use=FStar.Int.fsti(41,4-41,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.pos)
(HasType (FStar.Int.max_int @x0)
Prims.int))
 

:pattern ((FStar.Int.max_int @x0))
:qid typing_FStar.Int.max_int))

:named typing_FStar.Int.max_int))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Int.fits; Namespace FStar.Int
(assert (! 
;; def=FStar.Int.fsti(44,4-44,8); use=FStar.Int.fsti(44,4-44,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.int)
(HasType @x1
Prims.pos))
(HasType (FStar.Int.fits @x0
@x1)
Prims.bool))
 

:pattern ((FStar.Int.fits @x0
@x1))
:qid typing_FStar.Int.fits))

:named typing_FStar.Int.fits))
;;;;;;;;;;;;;;;;True interpretation
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (Valid Prims.l_True)
:named true_interp))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name Prims.pow2; Namespace Prims
(assert (! 
;; def=Prims.fst(708,8-708,12); use=Prims.fst(708,8-708,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasType @x1
Prims.nat)
(HasType (Prims.pow2.fuel_instrumented @u0
@x1)
Prims.pos))
 

:pattern ((Prims.pow2.fuel_instrumented @u0
@x1))
:qid token_correspondence_Prims.pow2.fuel_instrumented))

:named token_correspondence_Prims.pow2.fuel_instrumented))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(614,5-614,9); use=Prims.fst(614,5-614,9)
(forall ((@x0 Term))
 (! (= (ApplyTT Prims.list@tok
@x0)
(Prims.list @x0))
 

:pattern ((ApplyTT Prims.list@tok
@x0))

:pattern ((Prims.list @x0))
:qid token_correspondence_Prims.list@tok))

:named token_correspondence_Prims.list@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name FStar.Stubs.Tactics.Result.__result; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Success; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Failed; Namespace FStar.Stubs.Tactics.Result
(assert (! 
;; def=FStar.Stubs.Tactics.Result.fsti(24,10-24,18); use=FStar.Stubs.Tactics.Result.fsti(24,10-24,18)
(forall ((@x0 Term))
 (! (= (ApplyTT FStar.Stubs.Tactics.Result.__result@tok
@x0)
(FStar.Stubs.Tactics.Result.__result @x0))
 

:pattern ((ApplyTT FStar.Stubs.Tactics.Result.__result@tok
@x0))

:pattern ((FStar.Stubs.Tactics.Result.__result @x0))
:qid token_correspondence_FStar.Stubs.Tactics.Result.__result@tok))

:named token_correspondence_FStar.Stubs.Tactics.Result.__result@tok))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name FStar.Reflection.V2.Derived.mk_app; Namespace FStar.Reflection.V2.Derived
(assert (! 
;; def=FStar.Reflection.V2.Derived.fst(91,8-91,14); use=FStar.Reflection.V2.Derived.fst(91,8-91,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
FStar.Stubs.Reflection.Types.term)
(HasType @x2
(Prims.list FStar.Stubs.Reflection.V2.Data.argv)))
(HasType (FStar.Reflection.V2.Derived.mk_app.fuel_instrumented @u0
@x1
@x2)
FStar.Stubs.Reflection.Types.term))
 

:pattern ((FStar.Reflection.V2.Derived.mk_app.fuel_instrumented @u0
@x1
@x2))
:qid token_correspondence_FStar.Reflection.V2.Derived.mk_app.fuel_instrumented))

:named token_correspondence_FStar.Reflection.V2.Derived.mk_app.fuel_instrumented))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(730,5-730,11); use=FStar.Pervasives.fsti(730,5-730,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT FStar.Pervasives.either@tok
@x0)
@x1)
(FStar.Pervasives.either @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.either@tok
@x0)
@x1))

:pattern ((FStar.Pervasives.either @x0
@x1))
:qid token_correspondence_FStar.Pervasives.either@tok))

:named token_correspondence_FStar.Pervasives.either@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,5-65,11); use=FStar.Pervasives.Native.fst(65,5-65,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.tuple3@tok
@x0)
@x1)
@x2)
(FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.tuple3@tok
@x0)
@x1)
@x2))

:pattern ((FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))
:qid token_correspondence_FStar.Pervasives.Native.tuple3@tok))

:named token_correspondence_FStar.Pervasives.Native.tuple3@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT FStar.Pervasives.Native.tuple2@tok
@x0)
@x1)
(FStar.Pervasives.Native.tuple2 @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.Native.tuple2@tok
@x0)
@x1))

:pattern ((FStar.Pervasives.Native.tuple2 @x0
@x1))
:qid token_correspondence_FStar.Pervasives.Native.tuple2@tok))

:named token_correspondence_FStar.Pervasives.Native.tuple2@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@x0 Term))
 (! (= (ApplyTT FStar.Pervasives.Native.option@tok
@x0)
(FStar.Pervasives.Native.option @x0))
 

:pattern ((ApplyTT FStar.Pervasives.Native.option@tok
@x0))

:pattern ((FStar.Pervasives.Native.option @x0))
:qid token_correspondence_FStar.Pervasives.Native.option@tok))

:named token_correspondence_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name FStar.List.Tot.Base.length; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(74,8-74,14); use=FStar.List.Tot.Base.fst(74,8-74,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(Prims.list @x1)))
(HasType (FStar.List.Tot.Base.length.fuel_instrumented @u0
@x1
@x2)
Prims.nat))
 

:pattern ((FStar.List.Tot.Base.length.fuel_instrumented @u0
@x1
@x2))
:qid token_correspondence_FStar.List.Tot.Base.length.fuel_instrumented))

:named token_correspondence_FStar.List.Tot.Base.length.fuel_instrumented))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x4))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(Prims.Cons @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(Prims.Cons @x1
@x2
@x3)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x4)))
:qid subterm_ordering_Prims.Cons))

:named subterm_ordering_Prims.Cons))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(78,3-78,10); use=FStar.Tactics.NamedView.fsti(78,3-78,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Pat_Var @x1)
FStar.Tactics.NamedView.pattern)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Tactics.NamedView.Pat_Var @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Pat_Var @x1)
FStar.Tactics.NamedView.pattern))
:qid subterm_ordering_FStar.Tactics.NamedView.Pat_Var))

:named subterm_ordering_FStar.Tactics.NamedView.Pat_Var))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(84,3-84,15); use=FStar.Tactics.NamedView.fsti(84,3-84,15)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Pat_Dot_Term @x1)
FStar.Tactics.NamedView.pattern)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Tactics.NamedView.Pat_Dot_Term @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Pat_Dot_Term @x1)
FStar.Tactics.NamedView.pattern))
:qid subterm_ordering_FStar.Tactics.NamedView.Pat_Dot_Term))

:named subterm_ordering_FStar.Tactics.NamedView.Pat_Dot_Term))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(65,3-65,15); use=FStar.Tactics.NamedView.fsti(65,3-65,15)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Pat_Constant @x1)
FStar.Tactics.NamedView.pattern)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Tactics.NamedView.Pat_Constant @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Pat_Constant @x1)
FStar.Tactics.NamedView.pattern))
:qid subterm_ordering_FStar.Tactics.NamedView.Pat_Constant))

:named subterm_ordering_FStar.Tactics.NamedView.Pat_Constant))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(71,3-71,11); use=FStar.Tactics.NamedView.fsti(71,3-71,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Pat_Cons @x1)
FStar.Tactics.NamedView.pattern)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Tactics.NamedView.Pat_Cons @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Pat_Cons @x1)
FStar.Tactics.NamedView.pattern))
:qid subterm_ordering_FStar.Tactics.NamedView.Pat_Cons))

:named subterm_ordering_FStar.Tactics.NamedView.Pat_Cons))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(78,3-78,10); use=FStar.Tactics.NamedView.fsti(78,3-78,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload @x1
@x2)
FStar.Tactics.NamedView.pattern__Pat_Var__payload)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload @x1
@x2)
FStar.Tactics.NamedView.pattern__Pat_Var__payload))
:qid subterm_ordering_FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload))

:named subterm_ordering_FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(84,3-84,15); use=FStar.Tactics.NamedView.fsti(84,3-84,15)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload @x1)
FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload @x1)
FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload))
:qid subterm_ordering_FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload))

:named subterm_ordering_FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(65,3-65,15); use=FStar.Tactics.NamedView.fsti(65,3-65,15)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload @x1)
FStar.Tactics.NamedView.pattern__Pat_Constant__payload)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload @x1)
FStar.Tactics.NamedView.pattern__Pat_Constant__payload))
:qid subterm_ordering_FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload))

:named subterm_ordering_FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(71,3-71,11); use=FStar.Tactics.NamedView.fsti(71,3-71,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload @x1
@x2
@x3)
FStar.Tactics.NamedView.pattern__Pat_Cons__payload)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload @x1
@x2
@x3)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload @x1
@x2
@x3)
FStar.Tactics.NamedView.pattern__Pat_Cons__payload))
:qid subterm_ordering_FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload))

:named subterm_ordering_FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Stubs.Tactics.Result.__result; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Success; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Failed; Namespace FStar.Stubs.Tactics.Result
(assert (! 
;; def=FStar.Stubs.Tactics.Result.fsti(25,6-25,13); use=FStar.Stubs.Tactics.Result.fsti(25,6-25,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Tactics.Result.Success @x1
@x2
@x3)
(FStar.Stubs.Tactics.Result.__result @x4))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Stubs.Tactics.Result.Success @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(FStar.Stubs.Tactics.Result.Success @x1
@x2
@x3)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Tactics.Result.Success @x1
@x2
@x3)
(FStar.Stubs.Tactics.Result.__result @x4)))
:qid subterm_ordering_FStar.Stubs.Tactics.Result.Success))

:named subterm_ordering_FStar.Stubs.Tactics.Result.Success))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Stubs.Tactics.Result.__result; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Success; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Failed; Namespace FStar.Stubs.Tactics.Result
(assert (! 
;; def=FStar.Stubs.Tactics.Result.fsti(26,6-26,12); use=FStar.Stubs.Tactics.Result.fsti(26,6-26,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Tactics.Result.Failed @x1
@x2
@x3)
(FStar.Stubs.Tactics.Result.__result @x4))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Stubs.Tactics.Result.Failed @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(FStar.Stubs.Tactics.Result.Failed @x1
@x2
@x3)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Tactics.Result.Failed @x1
@x2
@x3)
(FStar.Stubs.Tactics.Result.__result @x4)))
:qid subterm_ordering_FStar.Stubs.Tactics.Result.Failed))

:named subterm_ordering_FStar.Stubs.Tactics.Result.Failed))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Stubs.Tactics.Common.TacticFailure; Namespace FStar.Stubs.Tactics.Common
(assert (! 
;; def=FStar.Stubs.Tactics.Common.fsti(12,10-12,23); use=FStar.Stubs.Tactics.Common.fsti(12,10-12,23)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Tactics.Common.TacticFailure @x1)
Prims.exn)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Stubs.Tactics.Common.TacticFailure @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Tactics.Common.TacticFailure @x1)
Prims.exn))
:qid subterm_ordering_FStar.Stubs.Tactics.Common.TacticFailure))

:named subterm_ordering_FStar.Stubs.Tactics.Common.TacticFailure))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(141,4-141,10); use=FStar.Stubs.Reflection.V2.Data.fsti(141,4-141,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_Var @x1)
FStar.Stubs.Reflection.V2.Data.term_view)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Stubs.Reflection.V2.Data.Tv_Var @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_Var @x1)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid subterm_ordering_FStar.Stubs.Reflection.V2.Data.Tv_Var))

:named subterm_ordering_FStar.Stubs.Reflection.V2.Data.Tv_Var))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(151,4-151,11); use=FStar.Stubs.Reflection.V2.Data.fsti(151,4-151,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_Uvar @x1
@x2)
FStar.Stubs.Reflection.V2.Data.term_view)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Stubs.Reflection.V2.Data.Tv_Uvar @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Stubs.Reflection.V2.Data.Tv_Uvar @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_Uvar @x1
@x2)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid subterm_ordering_FStar.Stubs.Reflection.V2.Data.Tv_Uvar))

:named subterm_ordering_FStar.Stubs.Reflection.V2.Data.Tv_Uvar))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(144,4-144,12); use=FStar.Stubs.Reflection.V2.Data.fsti(144,4-144,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_UInst @x1
@x2)
FStar.Stubs.Reflection.V2.Data.term_view)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Stubs.Reflection.V2.Data.Tv_UInst @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Stubs.Reflection.V2.Data.Tv_UInst @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_UInst @x1
@x2)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid subterm_ordering_FStar.Stubs.Reflection.V2.Data.Tv_UInst))

:named subterm_ordering_FStar.Stubs.Reflection.V2.Data.Tv_UInst))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(148,4-148,11); use=FStar.Stubs.Reflection.V2.Data.fsti(148,4-148,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_Type @x1)
FStar.Stubs.Reflection.V2.Data.term_view)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Stubs.Reflection.V2.Data.Tv_Type @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_Type @x1)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid subterm_ordering_FStar.Stubs.Reflection.V2.Data.Tv_Type))

:named subterm_ordering_FStar.Stubs.Reflection.V2.Data.Tv_Type))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(149,4-149,13); use=FStar.Stubs.Reflection.V2.Data.fsti(149,4-149,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_Refine @x1
@x2)
FStar.Stubs.Reflection.V2.Data.term_view)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Stubs.Reflection.V2.Data.Tv_Refine @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Stubs.Reflection.V2.Data.Tv_Refine @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_Refine @x1
@x2)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid subterm_ordering_FStar.Stubs.Reflection.V2.Data.Tv_Refine))

:named subterm_ordering_FStar.Stubs.Reflection.V2.Data.Tv_Refine))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(153,4-153,12); use=FStar.Stubs.Reflection.V2.Data.fsti(153,4-153,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_Match @x1
@x2
@x3)
FStar.Stubs.Reflection.V2.Data.term_view)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Stubs.Reflection.V2.Data.Tv_Match @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Stubs.Reflection.V2.Data.Tv_Match @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(FStar.Stubs.Reflection.V2.Data.Tv_Match @x1
@x2
@x3)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_Match @x1
@x2
@x3)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid subterm_ordering_FStar.Stubs.Reflection.V2.Data.Tv_Match))

:named subterm_ordering_FStar.Stubs.Reflection.V2.Data.Tv_Match))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(152,4-152,10); use=FStar.Stubs.Reflection.V2.Data.fsti(152,4-152,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_Let @x1
@x2
@x3
@x4
@x5)
FStar.Stubs.Reflection.V2.Data.term_view)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Stubs.Reflection.V2.Data.Tv_Let @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Stubs.Reflection.V2.Data.Tv_Let @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(FStar.Stubs.Reflection.V2.Data.Tv_Let @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(FStar.Stubs.Reflection.V2.Data.Tv_Let @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x5
(FStar.Stubs.Reflection.V2.Data.Tv_Let @x1
@x2
@x3
@x4
@x5)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_Let @x1
@x2
@x3
@x4
@x5)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid subterm_ordering_FStar.Stubs.Reflection.V2.Data.Tv_Let))

:named subterm_ordering_FStar.Stubs.Reflection.V2.Data.Tv_Let))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(143,4-143,11); use=FStar.Stubs.Reflection.V2.Data.fsti(143,4-143,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_FVar @x1)
FStar.Stubs.Reflection.V2.Data.term_view)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Stubs.Reflection.V2.Data.Tv_FVar @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_FVar @x1)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid subterm_ordering_FStar.Stubs.Reflection.V2.Data.Tv_FVar))

:named subterm_ordering_FStar.Stubs.Reflection.V2.Data.Tv_FVar))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(150,4-150,12); use=FStar.Stubs.Reflection.V2.Data.fsti(150,4-150,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_Const @x1)
FStar.Stubs.Reflection.V2.Data.term_view)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Stubs.Reflection.V2.Data.Tv_Const @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_Const @x1)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid subterm_ordering_FStar.Stubs.Reflection.V2.Data.Tv_Const))

:named subterm_ordering_FStar.Stubs.Reflection.V2.Data.Tv_Const))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(142,4-142,11); use=FStar.Stubs.Reflection.V2.Data.fsti(142,4-142,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_BVar @x1)
FStar.Stubs.Reflection.V2.Data.term_view)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Stubs.Reflection.V2.Data.Tv_BVar @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_BVar @x1)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid subterm_ordering_FStar.Stubs.Reflection.V2.Data.Tv_BVar))

:named subterm_ordering_FStar.Stubs.Reflection.V2.Data.Tv_BVar))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(154,4-154,16); use=FStar.Stubs.Reflection.V2.Data.fsti(154,4-154,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_AscribedT @x1
@x2
@x3
@x4)
FStar.Stubs.Reflection.V2.Data.term_view)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Stubs.Reflection.V2.Data.Tv_AscribedT @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Stubs.Reflection.V2.Data.Tv_AscribedT @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(FStar.Stubs.Reflection.V2.Data.Tv_AscribedT @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(FStar.Stubs.Reflection.V2.Data.Tv_AscribedT @x1
@x2
@x3
@x4)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_AscribedT @x1
@x2
@x3
@x4)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid subterm_ordering_FStar.Stubs.Reflection.V2.Data.Tv_AscribedT))

:named subterm_ordering_FStar.Stubs.Reflection.V2.Data.Tv_AscribedT))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(155,4-155,16); use=FStar.Stubs.Reflection.V2.Data.fsti(155,4-155,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_AscribedC @x1
@x2
@x3
@x4)
FStar.Stubs.Reflection.V2.Data.term_view)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Stubs.Reflection.V2.Data.Tv_AscribedC @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Stubs.Reflection.V2.Data.Tv_AscribedC @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(FStar.Stubs.Reflection.V2.Data.Tv_AscribedC @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(FStar.Stubs.Reflection.V2.Data.Tv_AscribedC @x1
@x2
@x3
@x4)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_AscribedC @x1
@x2
@x3
@x4)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid subterm_ordering_FStar.Stubs.Reflection.V2.Data.Tv_AscribedC))

:named subterm_ordering_FStar.Stubs.Reflection.V2.Data.Tv_AscribedC))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(147,4-147,12); use=FStar.Stubs.Reflection.V2.Data.fsti(147,4-147,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_Arrow @x1
@x2)
FStar.Stubs.Reflection.V2.Data.term_view)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Stubs.Reflection.V2.Data.Tv_Arrow @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Stubs.Reflection.V2.Data.Tv_Arrow @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_Arrow @x1
@x2)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid subterm_ordering_FStar.Stubs.Reflection.V2.Data.Tv_Arrow))

:named subterm_ordering_FStar.Stubs.Reflection.V2.Data.Tv_Arrow))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(145,4-145,10); use=FStar.Stubs.Reflection.V2.Data.fsti(145,4-145,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_App @x1
@x2)
FStar.Stubs.Reflection.V2.Data.term_view)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Stubs.Reflection.V2.Data.Tv_App @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Stubs.Reflection.V2.Data.Tv_App @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_App @x1
@x2)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid subterm_ordering_FStar.Stubs.Reflection.V2.Data.Tv_App))

:named subterm_ordering_FStar.Stubs.Reflection.V2.Data.Tv_App))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(146,4-146,10); use=FStar.Stubs.Reflection.V2.Data.fsti(146,4-146,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_Abs @x1
@x2)
FStar.Stubs.Reflection.V2.Data.term_view)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Stubs.Reflection.V2.Data.Tv_Abs @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Stubs.Reflection.V2.Data.Tv_Abs @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_Abs @x1
@x2)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid subterm_ordering_FStar.Stubs.Reflection.V2.Data.Tv_Abs))

:named subterm_ordering_FStar.Stubs.Reflection.V2.Data.Tv_Abs))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.aqualv; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Implicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Explicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Equality; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Meta; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(80,4-80,10); use=FStar.Stubs.Reflection.V2.Data.fsti(80,4-80,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Q_Meta @x1)
FStar.Stubs.Reflection.V2.Data.aqualv)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Stubs.Reflection.V2.Data.Q_Meta @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Q_Meta @x1)
FStar.Stubs.Reflection.V2.Data.aqualv))
:qid subterm_ordering_FStar.Stubs.Reflection.V2.Data.Q_Meta))

:named subterm_ordering_FStar.Stubs.Reflection.V2.Data.Q_Meta))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.pattern; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Constant; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Cons; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(63,3-63,10); use=FStar.Stubs.Reflection.V2.Data.fsti(63,3-63,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Pat_Var @x1
@x2)
FStar.Stubs.Reflection.V2.Data.pattern)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Stubs.Reflection.V2.Data.Pat_Var @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Stubs.Reflection.V2.Data.Pat_Var @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Pat_Var @x1
@x2)
FStar.Stubs.Reflection.V2.Data.pattern))
:qid subterm_ordering_FStar.Stubs.Reflection.V2.Data.Pat_Var))

:named subterm_ordering_FStar.Stubs.Reflection.V2.Data.Pat_Var))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.pattern; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Constant; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Cons; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(69,3-69,15); use=FStar.Stubs.Reflection.V2.Data.fsti(69,3-69,15)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term @x1)
FStar.Stubs.Reflection.V2.Data.pattern)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term @x1)
FStar.Stubs.Reflection.V2.Data.pattern))
:qid subterm_ordering_FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term))

:named subterm_ordering_FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.pattern; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Constant; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Cons; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(46,3-46,15); use=FStar.Stubs.Reflection.V2.Data.fsti(46,3-46,15)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Pat_Constant @x1)
FStar.Stubs.Reflection.V2.Data.pattern)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Stubs.Reflection.V2.Data.Pat_Constant @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Pat_Constant @x1)
FStar.Stubs.Reflection.V2.Data.pattern))
:qid subterm_ordering_FStar.Stubs.Reflection.V2.Data.Pat_Constant))

:named subterm_ordering_FStar.Stubs.Reflection.V2.Data.Pat_Constant))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.pattern; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Constant; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Cons; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(52,3-52,11); use=FStar.Stubs.Reflection.V2.Data.fsti(52,3-52,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Pat_Cons @x1
@x2
@x3)
FStar.Stubs.Reflection.V2.Data.pattern)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Stubs.Reflection.V2.Data.Pat_Cons @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Stubs.Reflection.V2.Data.Pat_Cons @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(FStar.Stubs.Reflection.V2.Data.Pat_Cons @x1
@x2
@x3)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Pat_Cons @x1
@x2
@x3)
FStar.Stubs.Reflection.V2.Data.pattern))
:qid subterm_ordering_FStar.Stubs.Reflection.V2.Data.Pat_Cons))

:named subterm_ordering_FStar.Stubs.Reflection.V2.Data.Pat_Cons))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.namedv_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Mknamedv_view; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(86,5-86,16); use=FStar.Stubs.Reflection.V2.Data.fsti(86,5-86,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Mknamedv_view @x1
@x2
@x3)
FStar.Stubs.Reflection.V2.Data.namedv_view)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Stubs.Reflection.V2.Data.Mknamedv_view @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Stubs.Reflection.V2.Data.Mknamedv_view @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(FStar.Stubs.Reflection.V2.Data.Mknamedv_view @x1
@x2
@x3)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Mknamedv_view @x1
@x2
@x3)
FStar.Stubs.Reflection.V2.Data.namedv_view))
:qid subterm_ordering_FStar.Stubs.Reflection.V2.Data.Mknamedv_view))

:named subterm_ordering_FStar.Stubs.Reflection.V2.Data.Mknamedv_view))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.binder_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Mkbinder_view; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(103,5-103,16); use=FStar.Stubs.Reflection.V2.Data.fsti(103,5-103,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Mkbinder_view @x1
@x2
@x3
@x4)
FStar.Stubs.Reflection.V2.Data.binder_view)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Stubs.Reflection.V2.Data.Mkbinder_view @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Stubs.Reflection.V2.Data.Mkbinder_view @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(FStar.Stubs.Reflection.V2.Data.Mkbinder_view @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(FStar.Stubs.Reflection.V2.Data.Mkbinder_view @x1
@x2
@x3
@x4)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Mkbinder_view @x1
@x2
@x3
@x4)
FStar.Stubs.Reflection.V2.Data.binder_view))
:qid subterm_ordering_FStar.Stubs.Reflection.V2.Data.Mkbinder_view))

:named subterm_ordering_FStar.Stubs.Reflection.V2.Data.Mkbinder_view))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(32,4-32,12); use=FStar.Stubs.Reflection.V2.Data.fsti(32,4-32,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.C_String @x1)
FStar.Stubs.Reflection.V2.Data.vconst)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Stubs.Reflection.V2.Data.C_String @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.C_String @x1)
FStar.Stubs.Reflection.V2.Data.vconst))
:qid subterm_ordering_FStar.Stubs.Reflection.V2.Data.C_String))

:named subterm_ordering_FStar.Stubs.Reflection.V2.Data.C_String))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(35,4-35,13); use=FStar.Stubs.Reflection.V2.Data.fsti(35,4-35,13)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.C_Reflect @x1)
FStar.Stubs.Reflection.V2.Data.vconst)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Stubs.Reflection.V2.Data.C_Reflect @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.C_Reflect @x1)
FStar.Stubs.Reflection.V2.Data.vconst))
:qid subterm_ordering_FStar.Stubs.Reflection.V2.Data.C_Reflect))

:named subterm_ordering_FStar.Stubs.Reflection.V2.Data.C_Reflect))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(36,4-36,10); use=FStar.Stubs.Reflection.V2.Data.fsti(36,4-36,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.C_Real @x1)
FStar.Stubs.Reflection.V2.Data.vconst)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Stubs.Reflection.V2.Data.C_Real @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.C_Real @x1)
FStar.Stubs.Reflection.V2.Data.vconst))
:qid subterm_ordering_FStar.Stubs.Reflection.V2.Data.C_Real))

:named subterm_ordering_FStar.Stubs.Reflection.V2.Data.C_Real))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(33,4-33,11); use=FStar.Stubs.Reflection.V2.Data.fsti(33,4-33,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.C_Range @x1)
FStar.Stubs.Reflection.V2.Data.vconst)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Stubs.Reflection.V2.Data.C_Range @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.C_Range @x1)
FStar.Stubs.Reflection.V2.Data.vconst))
:qid subterm_ordering_FStar.Stubs.Reflection.V2.Data.C_Range))

:named subterm_ordering_FStar.Stubs.Reflection.V2.Data.C_Range))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(29,4-29,9); use=FStar.Stubs.Reflection.V2.Data.fsti(29,4-29,9)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.C_Int @x1)
FStar.Stubs.Reflection.V2.Data.vconst)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Stubs.Reflection.V2.Data.C_Int @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.C_Int @x1)
FStar.Stubs.Reflection.V2.Data.vconst))
:qid subterm_ordering_FStar.Stubs.Reflection.V2.Data.C_Int))

:named subterm_ordering_FStar.Stubs.Reflection.V2.Data.C_Int))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Pervasives.Native.Some @x1
@x2))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3)))
:qid subterm_ordering_FStar.Pervasives.Native.Some))

:named subterm_ordering_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.Native.tuple3 @x7
@x8
@x9))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x5
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x6
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.Native.tuple3 @x7
@x8
@x9)))
:qid subterm_ordering_FStar.Pervasives.Native.Mktuple3))

:named subterm_ordering_FStar.Pervasives.Native.Mktuple3))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x5
@x6))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x5
@x6)))
:qid subterm_ordering_FStar.Pervasives.Native.Mktuple2))

:named subterm_ordering_FStar.Pervasives.Native.Mktuple2))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(732,4-732,7); use=FStar.Pervasives.fsti(732,4-732,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Inr @x1
@x2
@x3)
(FStar.Pervasives.either @x4
@x5))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(FStar.Pervasives.Inr @x1
@x2
@x3))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Inr @x1
@x2
@x3)
(FStar.Pervasives.either @x4
@x5)))
:qid subterm_ordering_FStar.Pervasives.Inr))

:named subterm_ordering_FStar.Pervasives.Inr))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(731,4-731,7); use=FStar.Pervasives.fsti(731,4-731,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Inl @x1
@x2
@x3)
(FStar.Pervasives.either @x4
@x5))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(FStar.Pervasives.Inl @x1
@x2
@x3))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Inl @x1
@x2
@x3)
(FStar.Pervasives.either @x4
@x5)))
:qid subterm_ordering_FStar.Pervasives.Inl))

:named subterm_ordering_FStar.Pervasives.Inl))
;;;;;;;;;;;;;;;;string typing
;;; Fact-ids: Name Prims.string; Namespace Prims
(assert (! (forall ((@u0 FString))
 (! (HasType (BoxString @u0)
Prims.string)
 

:pattern ((BoxString @u0))
:qid string_typing))
:named string_typing))
;;;;;;;;;;;;;;;;string inversion
;;; Fact-ids: Name Prims.string; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.string)
(is-BoxString @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.string))
:qid string_inversion))
:named string_inversion))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__C_Real__item___0; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType Tm_refine_fe52390e6170c16c172c68852b19e4e7
Tm_type)
:named refinement_kinding_Tm_refine_fe52390e6170c16c172c68852b19e4e7))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Pat_Dot_Term__item___0; Namespace FStar.Tactics.NamedView
(assert (! (HasType Tm_refine_fd8d0efc3ead3b7a2f2a11433fff8eaa
Tm_type)
:named refinement_kinding_Tm_refine_fd8d0efc3ead3b7a2f2a11433fff8eaa))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Q_Meta__item___0; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType Tm_refine_fbfbe764a7047d11d6f7378b2ea1d9c3
Tm_type)
:named refinement_kinding_Tm_refine_fbfbe764a7047d11d6f7378b2ea1d9c3))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Reflection.V2.Derived.mktuple_n; Namespace FStar.Reflection.V2.Derived
(assert (! (HasType Tm_refine_f977a384b76798b53763842ecb73fa85
Tm_type)
:named refinement_kinding_Tm_refine_f977a384b76798b53763842ecb73fa85))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Int.Cast.uint16_to_uint32; Namespace FStar.Int.Cast
(assert (! (HasType Tm_refine_f91ac8d5efb06a83fcdb210426823423
Tm_type)
:named refinement_kinding_Tm_refine_f91ac8d5efb06a83fcdb210426823423))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (HasType Tm_refine_f1ecc6ab6882a651504f328937700647
Tm_type)
:named refinement_kinding_Tm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name MiniParse.Spec.Int.pred_large_bound; Namespace MiniParse.Spec.Int
(assert (! (HasType Tm_refine_ed1ec337958d4240fdc3197cba495263
Tm_type)
:named refinement_kinding_Tm_refine_ed1ec337958d4240fdc3197cba495263))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_Uvar__item___0; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType Tm_refine_dd537019d2f0e727827f0138fef6addd
Tm_type)
:named refinement_kinding_Tm_refine_dd537019d2f0e727827f0138fef6addd))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedT__item__e; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType Tm_refine_dc6354cd01f0cd4240123aff4b38cfaa
Tm_type)
:named refinement_kinding_Tm_refine_dc6354cd01f0cd4240123aff4b38cfaa))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! (HasType Tm_refine_da3062322c9bea8d5b2058386775b91a
Tm_type)
:named refinement_kinding_Tm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Int.Cast.uint16_to_int64; Namespace FStar.Int.Cast
(assert (! (HasType Tm_refine_d601f2d8d86bb81cb4e53ef7f6de8606
Tm_type)
:named refinement_kinding_Tm_refine_d601f2d8d86bb81cb4e53ef7f6de8606))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Int.Cast.int16_to_int64; Namespace FStar.Int.Cast
(assert (! (HasType Tm_refine_d4a84b93f9d98f1d1f86f8d8c79db285
Tm_type)
:named refinement_kinding_Tm_refine_d4a84b93f9d98f1d1f86f8d8c79db285))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_FVar__item__v; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType Tm_refine_d2711b61c4b52079f3c5968c061f9fcf
Tm_type)
:named refinement_kinding_Tm_refine_d2711b61c4b52079f3c5968c061f9fcf))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_Type__item___0; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType Tm_refine_d1b122fd2b90ff0b3deddd8582e5a32a
Tm_type)
:named refinement_kinding_Tm_refine_d1b122fd2b90ff0b3deddd8582e5a32a))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_App__item__hd; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType Tm_refine_ce618e257bb72c7bc0890dfed3cccc9e
Tm_type)
:named refinement_kinding_Tm_refine_ce618e257bb72c7bc0890dfed3cccc9e))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_Var__item__v; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType Tm_refine_c4248e8eff973519c395e9ad8b18c7f9
Tm_type)
:named refinement_kinding_Tm_refine_c4248e8eff973519c395e9ad8b18c7f9))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_Refine__item__b; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType Tm_refine_c4075b916a3bb3afcd075e57f2a2a3f7
Tm_type)
:named refinement_kinding_Tm_refine_c4075b916a3bb3afcd075e57f2a2a3f7))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Pat_Var__item__sort; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType Tm_refine_b904eb95f43a094a00ec5951681ff0d1
Tm_type)
:named refinement_kinding_Tm_refine_b904eb95f43a094a00ec5951681ff0d1))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Tactics.Types.tracepoint; Namespace FStar.Stubs.Tactics.Types
(assert (! (HasType Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f
Tm_type)
:named refinement_kinding_Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Int.Cast.uint32_to_int64; Namespace FStar.Int.Cast
(assert (! (HasType Tm_refine_b5e6c055aa02f0fe99c3006bfade50de
Tm_type)
:named refinement_kinding_Tm_refine_b5e6c055aa02f0fe99c3006bfade50de))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Int.Cast.int8_to_int16; Namespace FStar.Int.Cast
(assert (! (HasType Tm_refine_b44e12994d2f4788a60cf11dcbfb8611
Tm_type)
:named refinement_kinding_Tm_refine_b44e12994d2f4788a60cf11dcbfb8611))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Issue.issue_level_string; Namespace FStar.Issue
(assert (! (HasType Tm_refine_aa8eedc0ecb86da30f7a24511f57030f
Tm_type)
:named refinement_kinding_Tm_refine_aa8eedc0ecb86da30f7a24511f57030f))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Int.Cast.int32_to_int64; Namespace FStar.Int.Cast
(assert (! (HasType Tm_refine_a8ce8a30c934a9cee3859f020c8d307b
Tm_type)
:named refinement_kinding_Tm_refine_a8ce8a30c934a9cee3859f020c8d307b))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.simple_binder; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType Tm_refine_a8284b5e442b1496d78105f043903ddc
Tm_type)
:named refinement_kinding_Tm_refine_a8284b5e442b1496d78105f043903ddc))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Int.Cast.int8_to_int64; Namespace FStar.Int.Cast
(assert (! (HasType Tm_refine_a399bc5b4c3acf4a57becd3ec8db4b3b
Tm_type)
:named refinement_kinding_Tm_refine_a399bc5b4c3acf4a57becd3ec8db4b3b))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Int.Cast.uint32_to_uint64; Namespace FStar.Int.Cast
(assert (! (HasType Tm_refine_a16f87d3d33f1a5fd74bee8c48ea5bbe
Tm_type)
:named refinement_kinding_Tm_refine_a16f87d3d33f1a5fd74bee8c48ea5bbe))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Int.Cast.int16_to_int32; Namespace FStar.Int.Cast
(assert (! (HasType Tm_refine_99be29c5f33c48c1672d3faa43f9cdfd
Tm_type)
:named refinement_kinding_Tm_refine_99be29c5f33c48c1672d3faa43f9cdfd))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Pat_Cons__item__head; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType Tm_refine_919c45f7fade48bc58599772159ac06a
Tm_type)
:named refinement_kinding_Tm_refine_919c45f7fade48bc58599772159ac06a))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__C_Reflect__item___0; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType Tm_refine_9030914e45d85a046cc0a6fdb9222232
Tm_type)
:named refinement_kinding_Tm_refine_9030914e45d85a046cc0a6fdb9222232))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_Arrow__item__bv; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType Tm_refine_8d01559daf290c998e8e5548df92339d
Tm_type)
:named refinement_kinding_Tm_refine_8d01559daf290c998e8e5548df92339d))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Pat_Dot_Term__item__t; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType Tm_refine_7fcbc4d4271baad02416b0bc6d22bd6f
Tm_type)
:named refinement_kinding_Tm_refine_7fcbc4d4271baad02416b0bc6d22bd6f))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__C_String__item___0; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType Tm_refine_7df21076da548fc4d6b8c52c485d3bab
Tm_type)
:named refinement_kinding_Tm_refine_7df21076da548fc4d6b8c52c485d3bab))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__C_Range__item___0; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType Tm_refine_77fa0f7914797f518561cfee6d1d9ee7
Tm_type)
:named refinement_kinding_Tm_refine_77fa0f7914797f518561cfee6d1d9ee7))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (HasType Tm_refine_774ba3f728d91ead8ef40be66c9802e5
Tm_type)
:named refinement_kinding_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Pat_Constant__item___0; Namespace FStar.Tactics.NamedView
(assert (! (HasType Tm_refine_760215d17bae6326cab536ca4b3b4619
Tm_type)
:named refinement_kinding_Tm_refine_760215d17bae6326cab536ca4b3b4619))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf
Tm_type)
:named refinement_kinding_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Int.op_At_Percent; Namespace FStar.Int
(assert (! (HasType Tm_refine_6f861454c283cab7fef581bd2f2d57c5
Tm_type)
:named refinement_kinding_Tm_refine_6f861454c283cab7fef581bd2f2d57c5))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Int.Cast.uint8_to_int64; Namespace FStar.Int.Cast
(assert (! (HasType Tm_refine_66b01e5a04cd5e59f9a6490d74f9c117
Tm_type)
:named refinement_kinding_Tm_refine_66b01e5a04cd5e59f9a6490d74f9c117))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name MiniParse.Spec.Int.mk_u16; Namespace MiniParse.Spec.Int
(assert (! (HasType Tm_refine_641a6a7f4fb70f47c0def193c3c84dcf
Tm_type)
:named refinement_kinding_Tm_refine_641a6a7f4fb70f47c0def193c3c84dcf))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Int.Cast.uint8_to_uint64; Namespace FStar.Int.Cast
(assert (! (HasType Tm_refine_6188ec86658c123c2c3404e80bc93cd0
Tm_type)
:named refinement_kinding_Tm_refine_6188ec86658c123c2c3404e80bc93cd0))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Pat_Var__item___0; Namespace FStar.Tactics.NamedView
(assert (! (HasType Tm_refine_5915aca42c70b204fb8abd23a0546bb3
Tm_type)
:named refinement_kinding_Tm_refine_5915aca42c70b204fb8abd23a0546bb3))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Tm_refine_542f9d4f129664613f2483a6c88bc7c2
Tm_type)
:named refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Int.pow2_minus_one; Namespace FStar.Int
(assert (! (HasType Tm_refine_4fe9a5df27ca5859eef8add9fc6819fb
Tm_type)
:named refinement_kinding_Tm_refine_4fe9a5df27ca5859eef8add9fc6819fb))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Tactics.V2.Derived.run_tactic; Namespace FStar.Tactics.V2.Derived
(assert (! (HasType Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
Tm_type)
:named refinement_kinding_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_BVar__item__v; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType Tm_refine_473c0367e281690ddeb7ba9d7d22f1f6
Tm_type)
:named refinement_kinding_Tm_refine_473c0367e281690ddeb7ba9d7d22f1f6))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Int.Cast.uint8_to_uint16; Namespace FStar.Int.Cast
(assert (! (HasType Tm_refine_4654dd4b2d6f243e5ec6eaf9826069c9
Tm_type)
:named refinement_kinding_Tm_refine_4654dd4b2d6f243e5ec6eaf9826069c9))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Int.Cast.uint16_to_uint64; Namespace FStar.Int.Cast
(assert (! (HasType Tm_refine_4540dfbe159ce3f577a577d113336bcc
Tm_type)
:named refinement_kinding_Tm_refine_4540dfbe159ce3f577a577d113336bcc))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__recf; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType Tm_refine_43c986d2cf42f8731bfb915090e09a0b
Tm_type)
:named refinement_kinding_Tm_refine_43c986d2cf42f8731bfb915090e09a0b))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Char.char_of_int; Namespace FStar.Char
(assert (! (HasType Tm_refine_41bb1fe33d2856748d537571528d32a1
Tm_type)
:named refinement_kinding_Tm_refine_41bb1fe33d2856748d537571528d32a1))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__C_Int__item___0; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType Tm_refine_418dc7105fe93def0897ac9652872c5e
Tm_type)
:named refinement_kinding_Tm_refine_418dc7105fe93def0897ac9652872c5e))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Tm_refine_414d0a9f578ab0048252f8c8f552b99f
Tm_type)
:named refinement_kinding_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Int.Cast.uint16_to_int32; Namespace FStar.Int.Cast
(assert (! (HasType Tm_refine_38a73e5144d443b0875e11c634d849b2
Tm_type)
:named refinement_kinding_Tm_refine_38a73e5144d443b0875e11c634d849b2))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_Abs__item__bv; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType Tm_refine_37a793ba5704ebbf15042feb27137572
Tm_type)
:named refinement_kinding_Tm_refine_37a793ba5704ebbf15042feb27137572))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name MiniParse.Spec.Int.pred_pre; Namespace MiniParse.Spec.Int
(assert (! (HasType Tm_refine_35fb8759ee35d7bf7cf3df6dd7bf565c
Tm_type)
:named refinement_kinding_Tm_refine_35fb8759ee35d7bf7cf3df6dd7bf565c))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Builtins.inspect_binder; Namespace FStar.Stubs.Reflection.V2.Builtins
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Builtins.fsti(70,33-70,57); use=FStar.Stubs.Reflection.V2.Builtins.fsti(70,33-70,57)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_336c863ebf681869395d10a4c152247a @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_336c863ebf681869395d10a4c152247a @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_336c863ebf681869395d10a4c152247a))

:named refinement_kinding_Tm_refine_336c863ebf681869395d10a4c152247a))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_Const__item___0; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType Tm_refine_33501ba90cf97ecf3695ea84cf87adca
Tm_type)
:named refinement_kinding_Tm_refine_33501ba90cf97ecf3695ea84cf87adca))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Tactics.Common.__proj__TacticFailure__item__uu___; Namespace FStar.Stubs.Tactics.Common
(assert (! (HasType Tm_refine_30f8904aa237d24acf9aace65cbaa40d
Tm_type)
:named refinement_kinding_Tm_refine_30f8904aa237d24acf9aace65cbaa40d))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Int.Cast.uint8_to_int32; Namespace FStar.Int.Cast
(assert (! (HasType Tm_refine_30f54be659cb3068ff6b4d29fbfd37b9
Tm_type)
:named refinement_kinding_Tm_refine_30f54be659cb3068ff6b4d29fbfd37b9))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,32-117,42); use=Prims.fst(117,32-117,42)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))

:named refinement_kinding_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Pat_Constant__item__c; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType Tm_refine_26a3ca3c291e017bd04ab88ab3f1bd16
Tm_type)
:named refinement_kinding_Tm_refine_26a3ca3c291e017bd04ab88ab3f1bd16))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Sealed.Inhabited.sealed; Namespace FStar.Sealed.Inhabited
(assert (! 
;; def=FStar.Sealed.Inhabited.fst(45,4-45,37); use=FStar.Sealed.Inhabited.fst(45,4-45,37)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_25fe9861b42cf97d961ff4c8f44eb399 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_25fe9861b42cf97d961ff4c8f44eb399 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_25fe9861b42cf97d961ff4c8f44eb399))

:named refinement_kinding_Tm_refine_25fe9861b42cf97d961ff4c8f44eb399))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_Match__item__scrutinee; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType Tm_refine_2565e86b1cc6542a4afc6f6409d3347b
Tm_type)
:named refinement_kinding_Tm_refine_2565e86b1cc6542a4afc6f6409d3347b))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Int.Cast.int8_to_int32; Namespace FStar.Int.Cast
(assert (! (HasType Tm_refine_20555d4690db1ab7ba8f509bea00b24d
Tm_type)
:named refinement_kinding_Tm_refine_20555d4690db1ab7ba8f509bea00b24d))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedC__item__e; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType Tm_refine_1ef62970670d75775a601f0b31c2dc27
Tm_type)
:named refinement_kinding_Tm_refine_1ef62970670d75775a601f0b31c2dc27))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_UInst__item__v; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType Tm_refine_1a52b06ee8dfc536800a89f6ecee4ecd
Tm_type)
:named refinement_kinding_Tm_refine_1a52b06ee8dfc536800a89f6ecee4ecd))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Int.Cast.uint8_to_uint32; Namespace FStar.Int.Cast
(assert (! (HasType Tm_refine_19e88ca5b68046e66eaf6d879a230cb2
Tm_type)
:named refinement_kinding_Tm_refine_19e88ca5b68046e66eaf6d879a230cb2))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Seq.Properties.createL_post; Namespace FStar.Seq.Properties
(assert (! (HasType Tm_refine_1780a0fddfda88c43d203b562c6d3f5b
Tm_type)
:named refinement_kinding_Tm_refine_1780a0fddfda88c43d203b562c6d3f5b))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Pat_Cons__item___0; Namespace FStar.Tactics.NamedView
(assert (! (HasType Tm_refine_1568b2d9001092df78423ad5031cadd0
Tm_type)
:named refinement_kinding_Tm_refine_1568b2d9001092df78423ad5031cadd0))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Reflection.V2.Derived.mk_arr_ln; Namespace FStar.Reflection.V2.Derived
(assert (! (HasType Tm_refine_14ce58fa655d913556bc0a15f9deed4c
Tm_type)
:named refinement_kinding_Tm_refine_14ce58fa655d913556bc0a15f9deed4c))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Int.Cast.uint8_to_int16; Namespace FStar.Int.Cast
(assert (! (HasType Tm_refine_0fa467ad3d3ad969314aac98bb8e0d1b
Tm_type)
:named refinement_kinding_Tm_refine_0fa467ad3d3ad969314aac98bb8e0d1b))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (HasType Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f
Tm_type)
:named refinement_kinding_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__C_Real__item___0; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(36,4-36,10); use=FStar.Stubs.Reflection.V2.Data.fsti(36,4-36,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_fe52390e6170c16c172c68852b19e4e7)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.vconst)

;; def=FStar.Stubs.Reflection.V2.Data.fsti(36,4-36,10); use=FStar.Stubs.Reflection.V2.Data.fsti(36,4-36,10)
(BoxBool_proj_0 (FStar.Stubs.Reflection.V2.Data.uu___is_C_Real @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_fe52390e6170c16c172c68852b19e4e7))
:qid refinement_interpretation_Tm_refine_fe52390e6170c16c172c68852b19e4e7))

:named refinement_interpretation_Tm_refine_fe52390e6170c16c172c68852b19e4e7))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Pat_Dot_Term__item___0; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(84,3-84,15); use=FStar.Tactics.NamedView.fsti(84,3-84,15)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_fd8d0efc3ead3b7a2f2a11433fff8eaa)
(and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.pattern)

;; def=FStar.Tactics.NamedView.fsti(84,3-84,15); use=FStar.Tactics.NamedView.fsti(84,3-84,15)
(BoxBool_proj_0 (FStar.Tactics.NamedView.uu___is_Pat_Dot_Term @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_fd8d0efc3ead3b7a2f2a11433fff8eaa))
:qid refinement_interpretation_Tm_refine_fd8d0efc3ead3b7a2f2a11433fff8eaa))

:named refinement_interpretation_Tm_refine_fd8d0efc3ead3b7a2f2a11433fff8eaa))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Q_Meta__item___0; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(80,4-80,10); use=FStar.Stubs.Reflection.V2.Data.fsti(80,4-80,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_fbfbe764a7047d11d6f7378b2ea1d9c3)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.aqualv)

;; def=FStar.Stubs.Reflection.V2.Data.fsti(80,4-80,10); use=FStar.Stubs.Reflection.V2.Data.fsti(80,4-80,10)
(BoxBool_proj_0 (FStar.Stubs.Reflection.V2.Data.uu___is_Q_Meta @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_fbfbe764a7047d11d6f7378b2ea1d9c3))
:qid refinement_interpretation_Tm_refine_fbfbe764a7047d11d6f7378b2ea1d9c3))

:named refinement_interpretation_Tm_refine_fbfbe764a7047d11d6f7378b2ea1d9c3))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Reflection.V2.Derived.mktuple_n; Namespace FStar.Reflection.V2.Derived
(assert (! 
;; def=FStar.Reflection.V2.Derived.fst(132,14-132,60); use=FStar.Reflection.V2.Derived.fst(132,14-132,60)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_f977a384b76798b53763842ecb73fa85)
(and (HasTypeFuel @u0
@x1
(Prims.list FStar.Stubs.Reflection.Types.term))

;; def=FStar.Reflection.V2.Derived.fst(132,30-132,58); use=FStar.Reflection.V2.Derived.fst(132,30-132,58)
(<= (BoxInt_proj_0 (FStar.List.Tot.Base.length FStar.Stubs.Reflection.Types.term
@x1))
(BoxInt_proj_0 (BoxInt 8)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_f977a384b76798b53763842ecb73fa85))
:qid refinement_interpretation_Tm_refine_f977a384b76798b53763842ecb73fa85))

:named refinement_interpretation_Tm_refine_f977a384b76798b53763842ecb73fa85))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Int.Cast.uint16_to_uint32; Namespace FStar.Int.Cast
(assert (! 
;; def=FStar.UInt.fsti(54,22-54,36); use=FStar.Int.Cast.fst(44,4-44,20)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_f91ac8d5efb06a83fcdb210426823423)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(44,4-44,20)
(or 
;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(44,4-44,20)
(Valid 
;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(44,4-44,20)
(FStar.UInt.size @x1
(BoxInt 32))
)


;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(44,4-44,20)
(Valid 
;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(44,4-44,20)
(FStar.UInt.size @x1
(BoxInt 16))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_f91ac8d5efb06a83fcdb210426823423))
:qid refinement_interpretation_Tm_refine_f91ac8d5efb06a83fcdb210426823423))

:named refinement_interpretation_Tm_refine_f91ac8d5efb06a83fcdb210426823423))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(772,26-772,42); use=FStar.Pervasives.fsti(772,26-772,42)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_f1ecc6ab6882a651504f328937700647)
false)
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_f1ecc6ab6882a651504f328937700647))
:qid refinement_interpretation_Tm_refine_f1ecc6ab6882a651504f328937700647))

:named refinement_interpretation_Tm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name MiniParse.Spec.Int.pred_large_bound; Namespace MiniParse.Spec.Int
(assert (! 
;; def=MiniParse.Spec.Int.fst(78,2-78,33); use=MiniParse.Spec.Int.fst(78,2-78,33)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_ed1ec337958d4240fdc3197cba495263)
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=MiniParse.Spec.Int.fst(78,16-78,29); use=MiniParse.Spec.Int.fst(78,16-78,29)
(> (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 65536)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_ed1ec337958d4240fdc3197cba495263))
:qid refinement_interpretation_Tm_refine_ed1ec337958d4240fdc3197cba495263))

:named refinement_interpretation_Tm_refine_ed1ec337958d4240fdc3197cba495263))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_Uvar__item___0; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(151,4-151,11); use=FStar.Stubs.Reflection.V2.Data.fsti(151,4-151,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_dd537019d2f0e727827f0138fef6addd)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.term_view)

;; def=FStar.Stubs.Reflection.V2.Data.fsti(151,4-151,11); use=FStar.Stubs.Reflection.V2.Data.fsti(151,4-151,11)
(BoxBool_proj_0 (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Uvar @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_dd537019d2f0e727827f0138fef6addd))
:qid refinement_interpretation_Tm_refine_dd537019d2f0e727827f0138fef6addd))

:named refinement_interpretation_Tm_refine_dd537019d2f0e727827f0138fef6addd))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedT__item__e; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(154,4-154,16); use=FStar.Stubs.Reflection.V2.Data.fsti(154,4-154,16)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_dc6354cd01f0cd4240123aff4b38cfaa)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.term_view)

;; def=FStar.Stubs.Reflection.V2.Data.fsti(154,4-154,16); use=FStar.Stubs.Reflection.V2.Data.fsti(154,4-154,16)
(BoxBool_proj_0 (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_AscribedT @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_dc6354cd01f0cd4240123aff4b38cfaa))
:qid refinement_interpretation_Tm_refine_dc6354cd01f0cd4240123aff4b38cfaa))

:named refinement_interpretation_Tm_refine_dc6354cd01f0cd4240123aff4b38cfaa))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(533,7-533,12); use=FStar.List.Tot.Base.fst(533,7-533,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_da3062322c9bea8d5b2058386775b91a)
(HasTypeFuel @u0
@x1
Tm_type))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_da3062322c9bea8d5b2058386775b91a))
:qid refinement_interpretation_Tm_refine_da3062322c9bea8d5b2058386775b91a))

:named refinement_interpretation_Tm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Int.Cast.uint16_to_int64; Namespace FStar.Int.Cast
(assert (! 
;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(134,4-134,19)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_d601f2d8d86bb81cb4e53ef7f6de8606)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(134,4-134,19)
(or 
;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(134,4-134,19)
(Valid 
;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(134,4-134,19)
(FStar.Int.size @x1
(BoxInt 64))
)


;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(134,4-134,19)
(Valid 
;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(134,4-134,19)
(FStar.UInt.size @x1
(BoxInt 16))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_d601f2d8d86bb81cb4e53ef7f6de8606))
:qid refinement_interpretation_Tm_refine_d601f2d8d86bb81cb4e53ef7f6de8606))

:named refinement_interpretation_Tm_refine_d601f2d8d86bb81cb4e53ef7f6de8606))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Int.Cast.int16_to_int64; Namespace FStar.Int.Cast
(assert (! 
;; def=FStar.Int.fsti(48,21-48,35); use=FStar.Int.Cast.fst(79,4-79,18)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_d4a84b93f9d98f1d1f86f8d8c79db285)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(79,4-79,18)
(or 
;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(79,4-79,18)
(Valid 
;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(79,4-79,18)
(FStar.Int.size @x1
(BoxInt 64))
)


;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(79,4-79,18)
(Valid 
;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(79,4-79,18)
(FStar.Int.size @x1
(BoxInt 16))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_d4a84b93f9d98f1d1f86f8d8c79db285))
:qid refinement_interpretation_Tm_refine_d4a84b93f9d98f1d1f86f8d8c79db285))

:named refinement_interpretation_Tm_refine_d4a84b93f9d98f1d1f86f8d8c79db285))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_FVar__item__v; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(143,4-143,11); use=FStar.Stubs.Reflection.V2.Data.fsti(143,4-143,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_d2711b61c4b52079f3c5968c061f9fcf)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.term_view)

;; def=FStar.Stubs.Reflection.V2.Data.fsti(143,4-143,11); use=FStar.Stubs.Reflection.V2.Data.fsti(143,4-143,11)
(BoxBool_proj_0 (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_FVar @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_d2711b61c4b52079f3c5968c061f9fcf))
:qid refinement_interpretation_Tm_refine_d2711b61c4b52079f3c5968c061f9fcf))

:named refinement_interpretation_Tm_refine_d2711b61c4b52079f3c5968c061f9fcf))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_Type__item___0; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(148,4-148,11); use=FStar.Stubs.Reflection.V2.Data.fsti(148,4-148,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_d1b122fd2b90ff0b3deddd8582e5a32a)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.term_view)

;; def=FStar.Stubs.Reflection.V2.Data.fsti(148,4-148,11); use=FStar.Stubs.Reflection.V2.Data.fsti(148,4-148,11)
(BoxBool_proj_0 (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Type @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_d1b122fd2b90ff0b3deddd8582e5a32a))
:qid refinement_interpretation_Tm_refine_d1b122fd2b90ff0b3deddd8582e5a32a))

:named refinement_interpretation_Tm_refine_d1b122fd2b90ff0b3deddd8582e5a32a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_App__item__hd; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(145,4-145,10); use=FStar.Stubs.Reflection.V2.Data.fsti(145,4-145,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_ce618e257bb72c7bc0890dfed3cccc9e)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.term_view)

;; def=FStar.Stubs.Reflection.V2.Data.fsti(145,4-145,10); use=FStar.Stubs.Reflection.V2.Data.fsti(145,4-145,10)
(BoxBool_proj_0 (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_App @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_ce618e257bb72c7bc0890dfed3cccc9e))
:qid refinement_interpretation_Tm_refine_ce618e257bb72c7bc0890dfed3cccc9e))

:named refinement_interpretation_Tm_refine_ce618e257bb72c7bc0890dfed3cccc9e))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_Var__item__v; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(141,4-141,10); use=FStar.Stubs.Reflection.V2.Data.fsti(141,4-141,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_c4248e8eff973519c395e9ad8b18c7f9)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.term_view)

;; def=FStar.Stubs.Reflection.V2.Data.fsti(141,4-141,10); use=FStar.Stubs.Reflection.V2.Data.fsti(141,4-141,10)
(BoxBool_proj_0 (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Var @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_c4248e8eff973519c395e9ad8b18c7f9))
:qid refinement_interpretation_Tm_refine_c4248e8eff973519c395e9ad8b18c7f9))

:named refinement_interpretation_Tm_refine_c4248e8eff973519c395e9ad8b18c7f9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_Refine__item__b; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(149,4-149,13); use=FStar.Stubs.Reflection.V2.Data.fsti(149,4-149,13)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_c4075b916a3bb3afcd075e57f2a2a3f7)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.term_view)

;; def=FStar.Stubs.Reflection.V2.Data.fsti(149,4-149,13); use=FStar.Stubs.Reflection.V2.Data.fsti(149,4-149,13)
(BoxBool_proj_0 (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Refine @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_c4075b916a3bb3afcd075e57f2a2a3f7))
:qid refinement_interpretation_Tm_refine_c4075b916a3bb3afcd075e57f2a2a3f7))

:named refinement_interpretation_Tm_refine_c4075b916a3bb3afcd075e57f2a2a3f7))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Pat_Var__item__sort; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(63,3-63,10); use=FStar.Stubs.Reflection.V2.Data.fsti(63,3-63,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_b904eb95f43a094a00ec5951681ff0d1)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.pattern)

;; def=FStar.Stubs.Reflection.V2.Data.fsti(63,3-63,10); use=FStar.Stubs.Reflection.V2.Data.fsti(63,3-63,10)
(BoxBool_proj_0 (FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Var @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_b904eb95f43a094a00ec5951681ff0d1))
:qid refinement_interpretation_Tm_refine_b904eb95f43a094a00ec5951681ff0d1))

:named refinement_interpretation_Tm_refine_b904eb95f43a094a00ec5951681ff0d1))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Tactics.Types.tracepoint; Namespace FStar.Stubs.Tactics.Types
(assert (! 
;; def=FStar.Stubs.Tactics.Types.fsti(44,31-44,48); use=FStar.Stubs.Tactics.Types.fsti(44,31-44,48)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f)
(and (HasTypeFuel @u0
@x1
Prims.bool)

;; def=FStar.Stubs.Tactics.Types.fsti(44,38-44,47); use=FStar.Stubs.Tactics.Types.fsti(44,38-44,47)
(= @x1
(BoxBool true))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f))
:qid refinement_interpretation_Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f))

:named refinement_interpretation_Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Int.Cast.uint32_to_int64; Namespace FStar.Int.Cast
(assert (! 
;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(150,4-150,19)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_b5e6c055aa02f0fe99c3006bfade50de)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(150,4-150,19)
(or 
;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(150,4-150,19)
(Valid 
;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(150,4-150,19)
(FStar.Int.size @x1
(BoxInt 64))
)


;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(150,4-150,19)
(Valid 
;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(150,4-150,19)
(FStar.UInt.size @x1
(BoxInt 32))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_b5e6c055aa02f0fe99c3006bfade50de))
:qid refinement_interpretation_Tm_refine_b5e6c055aa02f0fe99c3006bfade50de))

:named refinement_interpretation_Tm_refine_b5e6c055aa02f0fe99c3006bfade50de))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Int.Cast.int8_to_int16; Namespace FStar.Int.Cast
(assert (! 
;; def=FStar.Int.fsti(48,21-48,35); use=FStar.Int.Cast.fst(76,4-76,17)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_b44e12994d2f4788a60cf11dcbfb8611)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(76,4-76,17)
(or 
;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(76,4-76,17)
(Valid 
;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(76,4-76,17)
(FStar.Int.size @x1
(BoxInt 16))
)


;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(76,4-76,17)
(Valid 
;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(76,4-76,17)
(FStar.Int.size @x1
(BoxInt 8))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_b44e12994d2f4788a60cf11dcbfb8611))
:qid refinement_interpretation_Tm_refine_b44e12994d2f4788a60cf11dcbfb8611))

:named refinement_interpretation_Tm_refine_b44e12994d2f4788a60cf11dcbfb8611))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Issue.issue_level_string; Namespace FStar.Issue
(assert (! 
;; def=FStar.Issue.fsti(9,25-14,1); use=FStar.Issue.fsti(9,25-14,1)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_aa8eedc0ecb86da30f7a24511f57030f)
(and (HasTypeFuel @u0
@x1
Prims.string)

;; def=FStar.Issue.fsti(10,2-13,38); use=FStar.Issue.fsti(10,2-13,38)
(or 
;; def=FStar.Issue.fsti(10,2-10,13); use=FStar.Issue.fsti(10,2-10,13)
(= @x1
(BoxString (FString_const 0)))


;; def=FStar.Issue.fsti(11,2-11,16); use=FStar.Issue.fsti(11,2-11,16)
(= @x1
(BoxString (FString_const 1)))


;; def=FStar.Issue.fsti(12,2-12,14); use=FStar.Issue.fsti(12,2-12,14)
(= @x1
(BoxString (FString_const 2)))


;; def=FStar.Issue.fsti(13,2-13,38); use=FStar.Issue.fsti(13,2-13,38)
(= @x1
(BoxString (FString_const 3)))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_aa8eedc0ecb86da30f7a24511f57030f))
:qid refinement_interpretation_Tm_refine_aa8eedc0ecb86da30f7a24511f57030f))

:named refinement_interpretation_Tm_refine_aa8eedc0ecb86da30f7a24511f57030f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Int.Cast.int32_to_int64; Namespace FStar.Int.Cast
(assert (! 
;; def=FStar.Int.fsti(48,21-48,35); use=FStar.Int.Cast.fst(90,4-90,18)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_a8ce8a30c934a9cee3859f020c8d307b)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(90,4-90,18)
(or 
;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(90,4-90,18)
(Valid 
;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(90,4-90,18)
(FStar.Int.size @x1
(BoxInt 64))
)


;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(90,4-90,18)
(Valid 
;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(90,4-90,18)
(FStar.Int.size @x1
(BoxInt 32))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_a8ce8a30c934a9cee3859f020c8d307b))
:qid refinement_interpretation_Tm_refine_a8ce8a30c934a9cee3859f020c8d307b))

:named refinement_interpretation_Tm_refine_a8ce8a30c934a9cee3859f020c8d307b))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.simple_binder; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(127,21-127,49); use=FStar.Stubs.Reflection.V2.Data.fsti(127,21-127,49)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_a8284b5e442b1496d78105f043903ddc)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.binder)

;; def=FStar.Stubs.Reflection.V2.Data.fsti(127,30-127,48); use=FStar.Stubs.Reflection.V2.Data.fsti(127,30-127,48)
(BoxBool_proj_0 (FStar.Stubs.Reflection.V2.Data.binder_is_simple @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_a8284b5e442b1496d78105f043903ddc))
:qid refinement_interpretation_Tm_refine_a8284b5e442b1496d78105f043903ddc))

:named refinement_interpretation_Tm_refine_a8284b5e442b1496d78105f043903ddc))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Int.Cast.int8_to_int64; Namespace FStar.Int.Cast
(assert (! 
;; def=FStar.Int.fsti(48,21-48,35); use=FStar.Int.Cast.fst(70,4-70,17)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_a399bc5b4c3acf4a57becd3ec8db4b3b)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(70,4-70,17)
(or 
;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(70,4-70,17)
(Valid 
;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(70,4-70,17)
(FStar.Int.size @x1
(BoxInt 64))
)


;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(70,4-70,17)
(Valid 
;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(70,4-70,17)
(FStar.Int.size @x1
(BoxInt 8))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_a399bc5b4c3acf4a57becd3ec8db4b3b))
:qid refinement_interpretation_Tm_refine_a399bc5b4c3acf4a57becd3ec8db4b3b))

:named refinement_interpretation_Tm_refine_a399bc5b4c3acf4a57becd3ec8db4b3b))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Int.Cast.uint32_to_uint64; Namespace FStar.Int.Cast
(assert (! 
;; def=FStar.UInt.fsti(54,22-54,36); use=FStar.Int.Cast.fst(50,4-50,20)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_a16f87d3d33f1a5fd74bee8c48ea5bbe)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(50,4-50,20)
(or 
;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(50,4-50,20)
(Valid 
;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(50,4-50,20)
(FStar.UInt.size @x1
(BoxInt 64))
)


;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(50,4-50,20)
(Valid 
;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(50,4-50,20)
(FStar.UInt.size @x1
(BoxInt 32))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_a16f87d3d33f1a5fd74bee8c48ea5bbe))
:qid refinement_interpretation_Tm_refine_a16f87d3d33f1a5fd74bee8c48ea5bbe))

:named refinement_interpretation_Tm_refine_a16f87d3d33f1a5fd74bee8c48ea5bbe))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Int.Cast.int16_to_int32; Namespace FStar.Int.Cast
(assert (! 
;; def=FStar.Int.fsti(48,21-48,35); use=FStar.Int.Cast.fst(82,4-82,18)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_99be29c5f33c48c1672d3faa43f9cdfd)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(82,4-82,18)
(or 
;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(82,4-82,18)
(Valid 
;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(82,4-82,18)
(FStar.Int.size @x1
(BoxInt 32))
)


;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(82,4-82,18)
(Valid 
;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(82,4-82,18)
(FStar.Int.size @x1
(BoxInt 16))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_99be29c5f33c48c1672d3faa43f9cdfd))
:qid refinement_interpretation_Tm_refine_99be29c5f33c48c1672d3faa43f9cdfd))

:named refinement_interpretation_Tm_refine_99be29c5f33c48c1672d3faa43f9cdfd))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Pat_Cons__item__head; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(52,3-52,11); use=FStar.Stubs.Reflection.V2.Data.fsti(52,3-52,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_919c45f7fade48bc58599772159ac06a)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.pattern)

;; def=FStar.Stubs.Reflection.V2.Data.fsti(52,3-52,11); use=FStar.Stubs.Reflection.V2.Data.fsti(52,3-52,11)
(BoxBool_proj_0 (FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Cons @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_919c45f7fade48bc58599772159ac06a))
:qid refinement_interpretation_Tm_refine_919c45f7fade48bc58599772159ac06a))

:named refinement_interpretation_Tm_refine_919c45f7fade48bc58599772159ac06a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__C_Reflect__item___0; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(35,4-35,13); use=FStar.Stubs.Reflection.V2.Data.fsti(35,4-35,13)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_9030914e45d85a046cc0a6fdb9222232)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.vconst)

;; def=FStar.Stubs.Reflection.V2.Data.fsti(35,4-35,13); use=FStar.Stubs.Reflection.V2.Data.fsti(35,4-35,13)
(BoxBool_proj_0 (FStar.Stubs.Reflection.V2.Data.uu___is_C_Reflect @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_9030914e45d85a046cc0a6fdb9222232))
:qid refinement_interpretation_Tm_refine_9030914e45d85a046cc0a6fdb9222232))

:named refinement_interpretation_Tm_refine_9030914e45d85a046cc0a6fdb9222232))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_Arrow__item__bv; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(147,4-147,12); use=FStar.Stubs.Reflection.V2.Data.fsti(147,4-147,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_8d01559daf290c998e8e5548df92339d)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.term_view)

;; def=FStar.Stubs.Reflection.V2.Data.fsti(147,4-147,12); use=FStar.Stubs.Reflection.V2.Data.fsti(147,4-147,12)
(BoxBool_proj_0 (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Arrow @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_8d01559daf290c998e8e5548df92339d))
:qid refinement_interpretation_Tm_refine_8d01559daf290c998e8e5548df92339d))

:named refinement_interpretation_Tm_refine_8d01559daf290c998e8e5548df92339d))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Pat_Dot_Term__item__t; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(69,3-69,15); use=FStar.Stubs.Reflection.V2.Data.fsti(69,3-69,15)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_7fcbc4d4271baad02416b0bc6d22bd6f)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.pattern)

;; def=FStar.Stubs.Reflection.V2.Data.fsti(69,3-69,15); use=FStar.Stubs.Reflection.V2.Data.fsti(69,3-69,15)
(BoxBool_proj_0 (FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Dot_Term @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_7fcbc4d4271baad02416b0bc6d22bd6f))
:qid refinement_interpretation_Tm_refine_7fcbc4d4271baad02416b0bc6d22bd6f))

:named refinement_interpretation_Tm_refine_7fcbc4d4271baad02416b0bc6d22bd6f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__C_String__item___0; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(32,4-32,12); use=FStar.Stubs.Reflection.V2.Data.fsti(32,4-32,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_7df21076da548fc4d6b8c52c485d3bab)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.vconst)

;; def=FStar.Stubs.Reflection.V2.Data.fsti(32,4-32,12); use=FStar.Stubs.Reflection.V2.Data.fsti(32,4-32,12)
(BoxBool_proj_0 (FStar.Stubs.Reflection.V2.Data.uu___is_C_String @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_7df21076da548fc4d6b8c52c485d3bab))
:qid refinement_interpretation_Tm_refine_7df21076da548fc4d6b8c52c485d3bab))

:named refinement_interpretation_Tm_refine_7df21076da548fc4d6b8c52c485d3bab))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__C_Range__item___0; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(33,4-33,11); use=FStar.Stubs.Reflection.V2.Data.fsti(33,4-33,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_77fa0f7914797f518561cfee6d1d9ee7)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.vconst)

;; def=FStar.Stubs.Reflection.V2.Data.fsti(33,4-33,11); use=FStar.Stubs.Reflection.V2.Data.fsti(33,4-33,11)
(BoxBool_proj_0 (FStar.Stubs.Reflection.V2.Data.uu___is_C_Range @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_77fa0f7914797f518561cfee6d1d9ee7))
:qid refinement_interpretation_Tm_refine_77fa0f7914797f518561cfee6d1d9ee7))

:named refinement_interpretation_Tm_refine_77fa0f7914797f518561cfee6d1d9ee7))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! 
;; def=Prims.fst(683,11-683,24); use=Prims.fst(683,11-683,24)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_774ba3f728d91ead8ef40be66c9802e5)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(683,18-683,23); use=Prims.fst(683,18-683,23)
(> (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
:qid refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))

:named refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Pat_Constant__item___0; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(65,3-65,15); use=FStar.Tactics.NamedView.fsti(65,3-65,15)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_760215d17bae6326cab536ca4b3b4619)
(and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.pattern)

;; def=FStar.Tactics.NamedView.fsti(65,3-65,15); use=FStar.Tactics.NamedView.fsti(65,3-65,15)
(BoxBool_proj_0 (FStar.Tactics.NamedView.uu___is_Pat_Constant @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_760215d17bae6326cab536ca4b3b4619))
:qid refinement_interpretation_Tm_refine_760215d17bae6326cab536ca4b3b4619))

:named refinement_interpretation_Tm_refine_760215d17bae6326cab536ca4b3b4619))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! 
;; def=Prims.fst(304,12-304,41); use=Prims.fst(304,12-304,41)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf)
(and (HasTypeFuel @u0
@x1
Tm_type)

;; def=Prims.fst(304,21-304,40); use=Prims.fst(304,21-304,40)
(Valid 
;; def=Prims.fst(304,21-304,40); use=Prims.fst(304,21-304,40)
(Prims.subtype_of @x1
Prims.unit)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
:qid refinement_interpretation_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))

:named refinement_interpretation_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Int.op_At_Percent; Namespace FStar.Int
(assert (! 
;; def=FStar.Int.fsti(58,26-58,46); use=FStar.Int.fsti(58,26-58,46)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_6f861454c283cab7fef581bd2f2d57c5)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=FStar.Int.fsti(58,33-58,36); use=FStar.Int.fsti(58,33-58,36)
(> (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))


;; def=FStar.Int.fsti(58,39-58,44); use=FStar.Int.fsti(58,39-58,44)
(= (Prims.op_Modulus @x1
(BoxInt 2))
(BoxInt 0))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_6f861454c283cab7fef581bd2f2d57c5))
:qid refinement_interpretation_Tm_refine_6f861454c283cab7fef581bd2f2d57c5))

:named refinement_interpretation_Tm_refine_6f861454c283cab7fef581bd2f2d57c5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Int.Cast.uint8_to_int64; Namespace FStar.Int.Cast
(assert (! 
;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(120,4-120,18)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_66b01e5a04cd5e59f9a6490d74f9c117)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(120,4-120,18)
(or 
;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(120,4-120,18)
(Valid 
;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(120,4-120,18)
(FStar.Int.size @x1
(BoxInt 64))
)


;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(120,4-120,18)
(Valid 
;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(120,4-120,18)
(FStar.UInt.size @x1
(BoxInt 8))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_66b01e5a04cd5e59f9a6490d74f9c117))
:qid refinement_interpretation_Tm_refine_66b01e5a04cd5e59f9a6490d74f9c117))

:named refinement_interpretation_Tm_refine_66b01e5a04cd5e59f9a6490d74f9c117))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name MiniParse.Spec.Int.mk_u16; Namespace MiniParse.Spec.Int
(assert (! 
;; def=MiniParse.Spec.Int.fst(43,11-43,34); use=MiniParse.Spec.Int.fst(43,11-43,34)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_641a6a7f4fb70f47c0def193c3c84dcf)
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=MiniParse.Spec.Int.fst(43,21-43,30); use=MiniParse.Spec.Int.fst(43,21-43,30)
(< (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 65536)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_641a6a7f4fb70f47c0def193c3c84dcf))
:qid refinement_interpretation_Tm_refine_641a6a7f4fb70f47c0def193c3c84dcf))

:named refinement_interpretation_Tm_refine_641a6a7f4fb70f47c0def193c3c84dcf))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Int.Cast.uint8_to_uint64; Namespace FStar.Int.Cast
(assert (! 
;; def=FStar.UInt.fsti(54,22-54,36); use=FStar.Int.Cast.fst(32,4-32,19)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_6188ec86658c123c2c3404e80bc93cd0)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(32,4-32,19)
(or 
;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(32,4-32,19)
(Valid 
;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(32,4-32,19)
(FStar.UInt.size @x1
(BoxInt 64))
)


;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(32,4-32,19)
(Valid 
;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(32,4-32,19)
(FStar.UInt.size @x1
(BoxInt 8))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_6188ec86658c123c2c3404e80bc93cd0))
:qid refinement_interpretation_Tm_refine_6188ec86658c123c2c3404e80bc93cd0))

:named refinement_interpretation_Tm_refine_6188ec86658c123c2c3404e80bc93cd0))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Pat_Var__item___0; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(78,3-78,10); use=FStar.Tactics.NamedView.fsti(78,3-78,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_5915aca42c70b204fb8abd23a0546bb3)
(and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.pattern)

;; def=FStar.Tactics.NamedView.fsti(78,3-78,10); use=FStar.Tactics.NamedView.fsti(78,3-78,10)
(BoxBool_proj_0 (FStar.Tactics.NamedView.uu___is_Pat_Var @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_5915aca42c70b204fb8abd23a0546bb3))
:qid refinement_interpretation_Tm_refine_5915aca42c70b204fb8abd23a0546bb3))

:named refinement_interpretation_Tm_refine_5915aca42c70b204fb8abd23a0546bb3))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! 
;; def=Prims.fst(680,11-680,25); use=Prims.fst(680,11-680,25)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_542f9d4f129664613f2483a6c88bc7c2)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(680,18-680,24); use=Prims.fst(680,18-680,24)
(>= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
:qid refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))

:named refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Int.pow2_minus_one; Namespace FStar.Int
(assert (! 
;; def=FStar.Int.fsti(70,19-70,34); use=FStar.Int.fsti(70,19-70,34)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4fe9a5df27ca5859eef8add9fc6819fb)
(and (HasTypeFuel @u0
@x1
Prims.pos)

;; def=FStar.Int.fsti(70,27-70,32); use=FStar.Int.fsti(70,27-70,32)
(< (BoxInt_proj_0 (BoxInt 1))
(BoxInt_proj_0 @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4fe9a5df27ca5859eef8add9fc6819fb))
:qid refinement_interpretation_Tm_refine_4fe9a5df27ca5859eef8add9fc6819fb))

:named refinement_interpretation_Tm_refine_4fe9a5df27ca5859eef8add9fc6819fb))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Tactics.V2.Derived.run_tactic; Namespace FStar.Tactics.V2.Derived
(assert (! 
;; def=FStar.Tactics.V2.Derived.fst(145,9-145,13); use=FStar.Tactics.V2.Derived.fst(145,9-145,13)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasTypeFuel @u0
@x1
Prims.unit))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
:qid refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

:named refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_BVar__item__v; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(142,4-142,11); use=FStar.Stubs.Reflection.V2.Data.fsti(142,4-142,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_473c0367e281690ddeb7ba9d7d22f1f6)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.term_view)

;; def=FStar.Stubs.Reflection.V2.Data.fsti(142,4-142,11); use=FStar.Stubs.Reflection.V2.Data.fsti(142,4-142,11)
(BoxBool_proj_0 (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_BVar @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_473c0367e281690ddeb7ba9d7d22f1f6))
:qid refinement_interpretation_Tm_refine_473c0367e281690ddeb7ba9d7d22f1f6))

:named refinement_interpretation_Tm_refine_473c0367e281690ddeb7ba9d7d22f1f6))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Int.Cast.uint8_to_uint16; Namespace FStar.Int.Cast
(assert (! 
;; def=FStar.UInt.fsti(54,22-54,36); use=FStar.Int.Cast.fst(38,4-38,19)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4654dd4b2d6f243e5ec6eaf9826069c9)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(38,4-38,19)
(or 
;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(38,4-38,19)
(Valid 
;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(38,4-38,19)
(FStar.UInt.size @x1
(BoxInt 16))
)


;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(38,4-38,19)
(Valid 
;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(38,4-38,19)
(FStar.UInt.size @x1
(BoxInt 8))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4654dd4b2d6f243e5ec6eaf9826069c9))
:qid refinement_interpretation_Tm_refine_4654dd4b2d6f243e5ec6eaf9826069c9))

:named refinement_interpretation_Tm_refine_4654dd4b2d6f243e5ec6eaf9826069c9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Int.Cast.uint16_to_uint64; Namespace FStar.Int.Cast
(assert (! 
;; def=FStar.UInt.fsti(54,22-54,36); use=FStar.Int.Cast.fst(41,4-41,20)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4540dfbe159ce3f577a577d113336bcc)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(41,4-41,20)
(or 
;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(41,4-41,20)
(Valid 
;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(41,4-41,20)
(FStar.UInt.size @x1
(BoxInt 64))
)


;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(41,4-41,20)
(Valid 
;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(41,4-41,20)
(FStar.UInt.size @x1
(BoxInt 16))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4540dfbe159ce3f577a577d113336bcc))
:qid refinement_interpretation_Tm_refine_4540dfbe159ce3f577a577d113336bcc))

:named refinement_interpretation_Tm_refine_4540dfbe159ce3f577a577d113336bcc))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__recf; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(152,4-152,10); use=FStar.Stubs.Reflection.V2.Data.fsti(152,4-152,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_43c986d2cf42f8731bfb915090e09a0b)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.term_view)

;; def=FStar.Stubs.Reflection.V2.Data.fsti(152,4-152,10); use=FStar.Stubs.Reflection.V2.Data.fsti(152,4-152,10)
(BoxBool_proj_0 (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Let @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_43c986d2cf42f8731bfb915090e09a0b))
:qid refinement_interpretation_Tm_refine_43c986d2cf42f8731bfb915090e09a0b))

:named refinement_interpretation_Tm_refine_43c986d2cf42f8731bfb915090e09a0b))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Char.char_of_int; Namespace FStar.Char
(assert (! 
;; def=FStar.Char.fsti(57,16-57,70); use=FStar.Char.fsti(57,16-57,70)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_41bb1fe33d2856748d537571528d32a1)
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=FStar.Char.fsti(57,24-57,68); use=FStar.Char.fsti(57,24-57,68)
(or 
;; def=FStar.Char.fsti(57,24-57,34); use=FStar.Char.fsti(57,24-57,34)
(< (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 55295)))


;; def=FStar.Char.fsti(57,38-57,68); use=FStar.Char.fsti(57,38-57,68)
(and 
;; def=FStar.Char.fsti(57,39-57,50); use=FStar.Char.fsti(57,39-57,50)
(>= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 57344)))


;; def=FStar.Char.fsti(57,54-57,67); use=FStar.Char.fsti(57,54-57,67)
(<= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 1114111)))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_41bb1fe33d2856748d537571528d32a1))
:qid refinement_interpretation_Tm_refine_41bb1fe33d2856748d537571528d32a1))

:named refinement_interpretation_Tm_refine_41bb1fe33d2856748d537571528d32a1))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__C_Int__item___0; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(29,4-29,9); use=FStar.Stubs.Reflection.V2.Data.fsti(29,4-29,9)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_418dc7105fe93def0897ac9652872c5e)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.vconst)

;; def=FStar.Stubs.Reflection.V2.Data.fsti(29,4-29,9); use=FStar.Stubs.Reflection.V2.Data.fsti(29,4-29,9)
(BoxBool_proj_0 (FStar.Stubs.Reflection.V2.Data.uu___is_C_Int @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_418dc7105fe93def0897ac9652872c5e))
:qid refinement_interpretation_Tm_refine_418dc7105fe93def0897ac9652872c5e))

:named refinement_interpretation_Tm_refine_418dc7105fe93def0897ac9652872c5e))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! 
;; def=Prims.fst(73,14-73,31); use=Prims.fst(73,14-73,31)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_414d0a9f578ab0048252f8c8f552b99f)
(and (HasTypeFuel @u0
@x1
Tm_type)

;; def=Prims.fst(73,23-73,30); use=Prims.fst(73,23-73,30)
(Valid 
;; def=Prims.fst(73,23-73,30); use=Prims.fst(73,23-73,30)
(Prims.hasEq @x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
:qid refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))

:named refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Int.Cast.uint16_to_int32; Namespace FStar.Int.Cast
(assert (! 
;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(137,4-137,19)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_38a73e5144d443b0875e11c634d849b2)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(137,4-137,19)
(or 
;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(137,4-137,19)
(Valid 
;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(137,4-137,19)
(FStar.Int.size @x1
(BoxInt 32))
)


;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(137,4-137,19)
(Valid 
;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(137,4-137,19)
(FStar.UInt.size @x1
(BoxInt 16))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_38a73e5144d443b0875e11c634d849b2))
:qid refinement_interpretation_Tm_refine_38a73e5144d443b0875e11c634d849b2))

:named refinement_interpretation_Tm_refine_38a73e5144d443b0875e11c634d849b2))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_Abs__item__bv; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(146,4-146,10); use=FStar.Stubs.Reflection.V2.Data.fsti(146,4-146,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_37a793ba5704ebbf15042feb27137572)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.term_view)

;; def=FStar.Stubs.Reflection.V2.Data.fsti(146,4-146,10); use=FStar.Stubs.Reflection.V2.Data.fsti(146,4-146,10)
(BoxBool_proj_0 (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Abs @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_37a793ba5704ebbf15042feb27137572))
:qid refinement_interpretation_Tm_refine_37a793ba5704ebbf15042feb27137572))

:named refinement_interpretation_Tm_refine_37a793ba5704ebbf15042feb27137572))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name MiniParse.Spec.Int.pred_pre; Namespace MiniParse.Spec.Int
(assert (! 
;; def=MiniParse.Spec.Int.fst(71,2-71,47); use=MiniParse.Spec.Int.fst(71,2-71,47)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_35fb8759ee35d7bf7cf3df6dd7bf565c)
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=MiniParse.Spec.Int.fst(71,16-71,25); use=MiniParse.Spec.Int.fst(71,16-71,25)
(> (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))


;; def=MiniParse.Spec.Int.fst(71,29-71,43); use=MiniParse.Spec.Int.fst(71,29-71,43)
(<= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 65536)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_35fb8759ee35d7bf7cf3df6dd7bf565c))
:qid refinement_interpretation_Tm_refine_35fb8759ee35d7bf7cf3df6dd7bf565c))

:named refinement_interpretation_Tm_refine_35fb8759ee35d7bf7cf3df6dd7bf565c))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Builtins.inspect_binder; Namespace FStar.Stubs.Reflection.V2.Builtins
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Builtins.fsti(70,33-70,57); use=FStar.Stubs.Reflection.V2.Builtins.fsti(70,33-70,57)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_336c863ebf681869395d10a4c152247a @x2))
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.binder_view)

;; def=FStar.Stubs.Reflection.V2.Builtins.fsti(70,49-70,56); use=FStar.Stubs.Reflection.V2.Builtins.fsti(70,49-70,56)
(Valid 
;; def=FStar.Stubs.Reflection.V2.Builtins.fsti(70,49-70,56); use=FStar.Stubs.Reflection.V2.Builtins.fsti(70,49-70,56)
(Prims.precedes FStar.Stubs.Reflection.V2.Data.binder_view
FStar.Stubs.Reflection.Types.binder
@x1
@x2)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_336c863ebf681869395d10a4c152247a @x2)))
:qid refinement_interpretation_Tm_refine_336c863ebf681869395d10a4c152247a))

:named refinement_interpretation_Tm_refine_336c863ebf681869395d10a4c152247a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_Const__item___0; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(150,4-150,12); use=FStar.Stubs.Reflection.V2.Data.fsti(150,4-150,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_33501ba90cf97ecf3695ea84cf87adca)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.term_view)

;; def=FStar.Stubs.Reflection.V2.Data.fsti(150,4-150,12); use=FStar.Stubs.Reflection.V2.Data.fsti(150,4-150,12)
(BoxBool_proj_0 (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Const @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_33501ba90cf97ecf3695ea84cf87adca))
:qid refinement_interpretation_Tm_refine_33501ba90cf97ecf3695ea84cf87adca))

:named refinement_interpretation_Tm_refine_33501ba90cf97ecf3695ea84cf87adca))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Tactics.Common.__proj__TacticFailure__item__uu___; Namespace FStar.Stubs.Tactics.Common
(assert (! 
;; def=FStar.Stubs.Tactics.Common.fsti(12,10-12,23); use=FStar.Stubs.Tactics.Common.fsti(12,10-12,23)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_30f8904aa237d24acf9aace65cbaa40d)
(and (HasTypeFuel @u0
@x1
Prims.exn)

;; def=FStar.Stubs.Tactics.Common.fsti(12,10-12,23); use=FStar.Stubs.Tactics.Common.fsti(12,10-12,23)
(BoxBool_proj_0 (FStar.Stubs.Tactics.Common.uu___is_TacticFailure @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_30f8904aa237d24acf9aace65cbaa40d))
:qid refinement_interpretation_Tm_refine_30f8904aa237d24acf9aace65cbaa40d))

:named refinement_interpretation_Tm_refine_30f8904aa237d24acf9aace65cbaa40d))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Int.Cast.uint8_to_int32; Namespace FStar.Int.Cast
(assert (! 
;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(123,4-123,18)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_30f54be659cb3068ff6b4d29fbfd37b9)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(123,4-123,18)
(or 
;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(123,4-123,18)
(Valid 
;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(123,4-123,18)
(FStar.Int.size @x1
(BoxInt 32))
)


;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(123,4-123,18)
(Valid 
;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(123,4-123,18)
(FStar.UInt.size @x1
(BoxInt 8))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_30f54be659cb3068ff6b4d29fbfd37b9))
:qid refinement_interpretation_Tm_refine_30f54be659cb3068ff6b4d29fbfd37b9))

:named refinement_interpretation_Tm_refine_30f54be659cb3068ff6b4d29fbfd37b9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,32-117,42); use=Prims.fst(117,32-117,42)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(117,13-117,14); use=Prims.fst(117,40-117,41)
(Valid 
;; def=Prims.fst(117,13-117,14); use=Prims.fst(117,40-117,41)
@x2
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x2)))
:qid refinement_interpretation_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))

:named refinement_interpretation_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Pat_Constant__item__c; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(46,3-46,15); use=FStar.Stubs.Reflection.V2.Data.fsti(46,3-46,15)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_26a3ca3c291e017bd04ab88ab3f1bd16)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.pattern)

;; def=FStar.Stubs.Reflection.V2.Data.fsti(46,3-46,15); use=FStar.Stubs.Reflection.V2.Data.fsti(46,3-46,15)
(BoxBool_proj_0 (FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Constant @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_26a3ca3c291e017bd04ab88ab3f1bd16))
:qid refinement_interpretation_Tm_refine_26a3ca3c291e017bd04ab88ab3f1bd16))

:named refinement_interpretation_Tm_refine_26a3ca3c291e017bd04ab88ab3f1bd16))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Sealed.Inhabited.sealed; Namespace FStar.Sealed.Inhabited
(assert (! 
;; def=FStar.Sealed.Inhabited.fst(45,4-45,37); use=FStar.Sealed.Inhabited.fst(45,4-45,37)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_25fe9861b42cf97d961ff4c8f44eb399 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(FStar.Sealed.Inhabited.sealed_ @x2
@x3))

;; def=FStar.Sealed.Inhabited.fst(45,24-45,35); use=FStar.Sealed.Inhabited.fst(45,24-45,35)
(Valid 
;; def=FStar.Sealed.Inhabited.fst(45,24-45,35); use=FStar.Sealed.Inhabited.fst(45,24-45,35)
(FStar.Sealed.Inhabited.is_sealed @x2
@x3
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_25fe9861b42cf97d961ff4c8f44eb399 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_25fe9861b42cf97d961ff4c8f44eb399))

:named refinement_interpretation_Tm_refine_25fe9861b42cf97d961ff4c8f44eb399))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_Match__item__scrutinee; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(153,4-153,12); use=FStar.Stubs.Reflection.V2.Data.fsti(153,4-153,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_2565e86b1cc6542a4afc6f6409d3347b)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.term_view)

;; def=FStar.Stubs.Reflection.V2.Data.fsti(153,4-153,12); use=FStar.Stubs.Reflection.V2.Data.fsti(153,4-153,12)
(BoxBool_proj_0 (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Match @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_2565e86b1cc6542a4afc6f6409d3347b))
:qid refinement_interpretation_Tm_refine_2565e86b1cc6542a4afc6f6409d3347b))

:named refinement_interpretation_Tm_refine_2565e86b1cc6542a4afc6f6409d3347b))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Int.Cast.int8_to_int32; Namespace FStar.Int.Cast
(assert (! 
;; def=FStar.Int.fsti(48,21-48,35); use=FStar.Int.Cast.fst(73,4-73,17)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_20555d4690db1ab7ba8f509bea00b24d)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(73,4-73,17)
(or 
;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(73,4-73,17)
(Valid 
;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(73,4-73,17)
(FStar.Int.size @x1
(BoxInt 32))
)


;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(73,4-73,17)
(Valid 
;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(73,4-73,17)
(FStar.Int.size @x1
(BoxInt 8))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_20555d4690db1ab7ba8f509bea00b24d))
:qid refinement_interpretation_Tm_refine_20555d4690db1ab7ba8f509bea00b24d))

:named refinement_interpretation_Tm_refine_20555d4690db1ab7ba8f509bea00b24d))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedC__item__e; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(155,4-155,16); use=FStar.Stubs.Reflection.V2.Data.fsti(155,4-155,16)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_1ef62970670d75775a601f0b31c2dc27)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.term_view)

;; def=FStar.Stubs.Reflection.V2.Data.fsti(155,4-155,16); use=FStar.Stubs.Reflection.V2.Data.fsti(155,4-155,16)
(BoxBool_proj_0 (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_AscribedC @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_1ef62970670d75775a601f0b31c2dc27))
:qid refinement_interpretation_Tm_refine_1ef62970670d75775a601f0b31c2dc27))

:named refinement_interpretation_Tm_refine_1ef62970670d75775a601f0b31c2dc27))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_UInst__item__v; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(144,4-144,12); use=FStar.Stubs.Reflection.V2.Data.fsti(144,4-144,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_1a52b06ee8dfc536800a89f6ecee4ecd)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.term_view)

;; def=FStar.Stubs.Reflection.V2.Data.fsti(144,4-144,12); use=FStar.Stubs.Reflection.V2.Data.fsti(144,4-144,12)
(BoxBool_proj_0 (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_UInst @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_1a52b06ee8dfc536800a89f6ecee4ecd))
:qid refinement_interpretation_Tm_refine_1a52b06ee8dfc536800a89f6ecee4ecd))

:named refinement_interpretation_Tm_refine_1a52b06ee8dfc536800a89f6ecee4ecd))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Int.Cast.uint8_to_uint32; Namespace FStar.Int.Cast
(assert (! 
;; def=FStar.UInt.fsti(54,22-54,36); use=FStar.Int.Cast.fst(35,4-35,19)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_19e88ca5b68046e66eaf6d879a230cb2)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(35,4-35,19)
(or 
;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(35,4-35,19)
(Valid 
;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(35,4-35,19)
(FStar.UInt.size @x1
(BoxInt 32))
)


;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(35,4-35,19)
(Valid 
;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(35,4-35,19)
(FStar.UInt.size @x1
(BoxInt 8))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_19e88ca5b68046e66eaf6d879a230cb2))
:qid refinement_interpretation_Tm_refine_19e88ca5b68046e66eaf6d879a230cb2))

:named refinement_interpretation_Tm_refine_19e88ca5b68046e66eaf6d879a230cb2))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Seq.Properties.createL_post; Namespace FStar.Seq.Properties
(assert (! 
;; def=Prims.fst(680,11-680,25); use=Prims.fst(680,11-680,25)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_1780a0fddfda88c43d203b562c6d3f5b)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (Prims.op_GreaterThanOrEqual @x1
(BoxInt 0))
(BoxBool true))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_1780a0fddfda88c43d203b562c6d3f5b))
:qid refinement_interpretation_Tm_refine_1780a0fddfda88c43d203b562c6d3f5b))

:named refinement_interpretation_Tm_refine_1780a0fddfda88c43d203b562c6d3f5b))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Pat_Cons__item___0; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(71,3-71,11); use=FStar.Tactics.NamedView.fsti(71,3-71,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_1568b2d9001092df78423ad5031cadd0)
(and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.pattern)

;; def=FStar.Tactics.NamedView.fsti(71,3-71,11); use=FStar.Tactics.NamedView.fsti(71,3-71,11)
(BoxBool_proj_0 (FStar.Tactics.NamedView.uu___is_Pat_Cons @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_1568b2d9001092df78423ad5031cadd0))
:qid refinement_interpretation_Tm_refine_1568b2d9001092df78423ad5031cadd0))

:named refinement_interpretation_Tm_refine_1568b2d9001092df78423ad5031cadd0))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Reflection.V2.Derived.mk_arr_ln; Namespace FStar.Reflection.V2.Derived
(assert (! 
;; def=FStar.Reflection.V2.Derived.fst(108,18-108,47); use=FStar.Reflection.V2.Derived.fst(108,18-108,47)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_14ce58fa655d913556bc0a15f9deed4c)
(and (HasTypeFuel @u0
@x1
(Prims.list FStar.Stubs.Reflection.Types.binder))

;; def=FStar.Reflection.V2.Derived.fst(108,35-108,45); use=FStar.Reflection.V2.Derived.fst(108,35-108,45)
(not 
;; def=FStar.Reflection.V2.Derived.fst(108,36-108,45); use=FStar.Reflection.V2.Derived.fst(108,36-108,45)
(BoxBool_proj_0 (Prims.uu___is_Nil FStar.Stubs.Reflection.Types.binder
@x1))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_14ce58fa655d913556bc0a15f9deed4c))
:qid refinement_interpretation_Tm_refine_14ce58fa655d913556bc0a15f9deed4c))

:named refinement_interpretation_Tm_refine_14ce58fa655d913556bc0a15f9deed4c))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Int.Cast.uint8_to_int16; Namespace FStar.Int.Cast
(assert (! 
;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(126,4-126,18)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_0fa467ad3d3ad969314aac98bb8e0d1b)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(126,4-126,18)
(or 
;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(126,4-126,18)
(Valid 
;; def=FStar.Int.fsti(48,27-48,35); use=FStar.Int.Cast.fst(126,4-126,18)
(FStar.Int.size @x1
(BoxInt 16))
)


;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(126,4-126,18)
(Valid 
;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.Int.Cast.fst(126,4-126,18)
(FStar.UInt.size @x1
(BoxInt 8))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_0fa467ad3d3ad969314aac98bb8e0d1b))
:qid refinement_interpretation_Tm_refine_0fa467ad3d3ad969314aac98bb8e0d1b))

:named refinement_interpretation_Tm_refine_0fa467ad3d3ad969314aac98bb8e0d1b))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! 
;; def=Prims.fst(686,15-686,29); use=Prims.fst(686,15-686,29)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(686,22-686,28); use=Prims.fst(686,22-686,28)
(not (= @x1
(BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
:qid refinement_interpretation_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))

:named refinement_interpretation_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@x0 Term))
 (! (= (Prims.Nil_a (Prims.Nil @x0))
@x0)
 

:pattern ((Prims.Nil @x0))
:qid projection_inverse_Prims.Nil_a))

:named projection_inverse_Prims.Nil_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Cons_tl (Prims.Cons @x0
@x1
@x2))
@x2)
 

:pattern ((Prims.Cons @x0
@x1
@x2))
:qid projection_inverse_Prims.Cons_tl))

:named projection_inverse_Prims.Cons_tl))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Cons_hd (Prims.Cons @x0
@x1
@x2))
@x1)
 

:pattern ((Prims.Cons @x0
@x1
@x2))
:qid projection_inverse_Prims.Cons_hd))

:named projection_inverse_Prims.Cons_hd))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Cons_a (Prims.Cons @x0
@x1
@x2))
@x0)
 

:pattern ((Prims.Cons @x0
@x1
@x2))
:qid projection_inverse_Prims.Cons_a))

:named projection_inverse_Prims.Cons_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(78,3-78,10); use=FStar.Tactics.NamedView.fsti(78,3-78,10)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.Pat_Var__0 (FStar.Tactics.NamedView.Pat_Var @x0))
@x0)
 

:pattern ((FStar.Tactics.NamedView.Pat_Var @x0))
:qid projection_inverse_FStar.Tactics.NamedView.Pat_Var__0))

:named projection_inverse_FStar.Tactics.NamedView.Pat_Var__0))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(84,3-84,15); use=FStar.Tactics.NamedView.fsti(84,3-84,15)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.Pat_Dot_Term__0 (FStar.Tactics.NamedView.Pat_Dot_Term @x0))
@x0)
 

:pattern ((FStar.Tactics.NamedView.Pat_Dot_Term @x0))
:qid projection_inverse_FStar.Tactics.NamedView.Pat_Dot_Term__0))

:named projection_inverse_FStar.Tactics.NamedView.Pat_Dot_Term__0))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(65,3-65,15); use=FStar.Tactics.NamedView.fsti(65,3-65,15)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.Pat_Constant__0 (FStar.Tactics.NamedView.Pat_Constant @x0))
@x0)
 

:pattern ((FStar.Tactics.NamedView.Pat_Constant @x0))
:qid projection_inverse_FStar.Tactics.NamedView.Pat_Constant__0))

:named projection_inverse_FStar.Tactics.NamedView.Pat_Constant__0))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(71,3-71,11); use=FStar.Tactics.NamedView.fsti(71,3-71,11)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.Pat_Cons__0 (FStar.Tactics.NamedView.Pat_Cons @x0))
@x0)
 

:pattern ((FStar.Tactics.NamedView.Pat_Cons @x0))
:qid projection_inverse_FStar.Tactics.NamedView.Pat_Cons__0))

:named projection_inverse_FStar.Tactics.NamedView.Pat_Cons__0))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(78,3-78,10); use=FStar.Tactics.NamedView.fsti(78,3-78,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload_v (FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload @x0
@x1))
@x0)
 

:pattern ((FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload @x0
@x1))
:qid projection_inverse_FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload_v))

:named projection_inverse_FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload_v))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(78,3-78,10); use=FStar.Tactics.NamedView.fsti(78,3-78,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload_sort (FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload @x0
@x1))
@x1)
 

:pattern ((FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload @x0
@x1))
:qid projection_inverse_FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload_sort))

:named projection_inverse_FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload_sort))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(84,3-84,15); use=FStar.Tactics.NamedView.fsti(84,3-84,15)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload_t (FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload @x0))
@x0)
 

:pattern ((FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload @x0))
:qid projection_inverse_FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload_t))

:named projection_inverse_FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload_t))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(65,3-65,15); use=FStar.Tactics.NamedView.fsti(65,3-65,15)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload_c (FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload @x0))
@x0)
 

:pattern ((FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload @x0))
:qid projection_inverse_FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload_c))

:named projection_inverse_FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload_c))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(71,3-71,11); use=FStar.Tactics.NamedView.fsti(71,3-71,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload_univs (FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload @x0
@x1
@x2))
@x1)
 

:pattern ((FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload @x0
@x1
@x2))
:qid projection_inverse_FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload_univs))

:named projection_inverse_FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload_univs))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(71,3-71,11); use=FStar.Tactics.NamedView.fsti(71,3-71,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload_subpats (FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload @x0
@x1
@x2))
@x2)
 

:pattern ((FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload @x0
@x1
@x2))
:qid projection_inverse_FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload_subpats))

:named projection_inverse_FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload_subpats))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(71,3-71,11); use=FStar.Tactics.NamedView.fsti(71,3-71,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload_head (FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload @x0
@x1
@x2))
@x0)
 

:pattern ((FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload @x0
@x1
@x2))
:qid projection_inverse_FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload_head))

:named projection_inverse_FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload_head))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Tactics.Result.__result; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Success; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Failed; Namespace FStar.Stubs.Tactics.Result
(assert (! 
;; def=FStar.Stubs.Tactics.Result.fsti(25,6-25,13); use=FStar.Stubs.Tactics.Result.fsti(25,6-25,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Stubs.Tactics.Result.Success_v (FStar.Stubs.Tactics.Result.Success @x0
@x1
@x2))
@x1)
 

:pattern ((FStar.Stubs.Tactics.Result.Success @x0
@x1
@x2))
:qid projection_inverse_FStar.Stubs.Tactics.Result.Success_v))

:named projection_inverse_FStar.Stubs.Tactics.Result.Success_v))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Tactics.Result.__result; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Success; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Failed; Namespace FStar.Stubs.Tactics.Result
(assert (! 
;; def=FStar.Stubs.Tactics.Result.fsti(25,6-25,13); use=FStar.Stubs.Tactics.Result.fsti(25,6-25,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Stubs.Tactics.Result.Success_ps (FStar.Stubs.Tactics.Result.Success @x0
@x1
@x2))
@x2)
 

:pattern ((FStar.Stubs.Tactics.Result.Success @x0
@x1
@x2))
:qid projection_inverse_FStar.Stubs.Tactics.Result.Success_ps))

:named projection_inverse_FStar.Stubs.Tactics.Result.Success_ps))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Tactics.Result.__result; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Success; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Failed; Namespace FStar.Stubs.Tactics.Result
(assert (! 
;; def=FStar.Stubs.Tactics.Result.fsti(25,6-25,13); use=FStar.Stubs.Tactics.Result.fsti(25,6-25,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Stubs.Tactics.Result.Success_a (FStar.Stubs.Tactics.Result.Success @x0
@x1
@x2))
@x0)
 

:pattern ((FStar.Stubs.Tactics.Result.Success @x0
@x1
@x2))
:qid projection_inverse_FStar.Stubs.Tactics.Result.Success_a))

:named projection_inverse_FStar.Stubs.Tactics.Result.Success_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Tactics.Result.__result; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Success; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Failed; Namespace FStar.Stubs.Tactics.Result
(assert (! 
;; def=FStar.Stubs.Tactics.Result.fsti(26,6-26,12); use=FStar.Stubs.Tactics.Result.fsti(26,6-26,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Stubs.Tactics.Result.Failed_ps (FStar.Stubs.Tactics.Result.Failed @x0
@x1
@x2))
@x2)
 

:pattern ((FStar.Stubs.Tactics.Result.Failed @x0
@x1
@x2))
:qid projection_inverse_FStar.Stubs.Tactics.Result.Failed_ps))

:named projection_inverse_FStar.Stubs.Tactics.Result.Failed_ps))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Tactics.Result.__result; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Success; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Failed; Namespace FStar.Stubs.Tactics.Result
(assert (! 
;; def=FStar.Stubs.Tactics.Result.fsti(26,6-26,12); use=FStar.Stubs.Tactics.Result.fsti(26,6-26,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Stubs.Tactics.Result.Failed_exn (FStar.Stubs.Tactics.Result.Failed @x0
@x1
@x2))
@x1)
 

:pattern ((FStar.Stubs.Tactics.Result.Failed @x0
@x1
@x2))
:qid projection_inverse_FStar.Stubs.Tactics.Result.Failed_exn))

:named projection_inverse_FStar.Stubs.Tactics.Result.Failed_exn))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Tactics.Result.__result; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Success; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Failed; Namespace FStar.Stubs.Tactics.Result
(assert (! 
;; def=FStar.Stubs.Tactics.Result.fsti(26,6-26,12); use=FStar.Stubs.Tactics.Result.fsti(26,6-26,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Stubs.Tactics.Result.Failed_a (FStar.Stubs.Tactics.Result.Failed @x0
@x1
@x2))
@x0)
 

:pattern ((FStar.Stubs.Tactics.Result.Failed @x0
@x1
@x2))
:qid projection_inverse_FStar.Stubs.Tactics.Result.Failed_a))

:named projection_inverse_FStar.Stubs.Tactics.Result.Failed_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Tactics.Common.TacticFailure; Namespace FStar.Stubs.Tactics.Common
(assert (! 
;; def=FStar.Stubs.Tactics.Common.fsti(12,10-12,23); use=FStar.Stubs.Tactics.Common.fsti(12,10-12,23)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Tactics.Common.TacticFailure_uu___ (FStar.Stubs.Tactics.Common.TacticFailure @x0))
@x0)
 

:pattern ((FStar.Stubs.Tactics.Common.TacticFailure @x0))
:qid projection_inverse_FStar.Stubs.Tactics.Common.TacticFailure_uu___))

:named projection_inverse_FStar.Stubs.Tactics.Common.TacticFailure_uu___))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(141,4-141,10); use=FStar.Stubs.Reflection.V2.Data.fsti(141,4-141,10)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Tv_Var_v (FStar.Stubs.Reflection.V2.Data.Tv_Var @x0))
@x0)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_Var @x0))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Var_v))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Var_v))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(151,4-151,11); use=FStar.Stubs.Reflection.V2.Data.fsti(151,4-151,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Tv_Uvar__1 (FStar.Stubs.Reflection.V2.Data.Tv_Uvar @x0
@x1))
@x1)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_Uvar @x0
@x1))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Uvar__1))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Uvar__1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(151,4-151,11); use=FStar.Stubs.Reflection.V2.Data.fsti(151,4-151,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Tv_Uvar__0 (FStar.Stubs.Reflection.V2.Data.Tv_Uvar @x0
@x1))
@x0)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_Uvar @x0
@x1))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Uvar__0))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Uvar__0))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(144,4-144,12); use=FStar.Stubs.Reflection.V2.Data.fsti(144,4-144,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Tv_UInst_v (FStar.Stubs.Reflection.V2.Data.Tv_UInst @x0
@x1))
@x0)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_UInst @x0
@x1))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_UInst_v))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_UInst_v))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(144,4-144,12); use=FStar.Stubs.Reflection.V2.Data.fsti(144,4-144,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Tv_UInst_us (FStar.Stubs.Reflection.V2.Data.Tv_UInst @x0
@x1))
@x1)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_UInst @x0
@x1))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_UInst_us))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_UInst_us))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(148,4-148,11); use=FStar.Stubs.Reflection.V2.Data.fsti(148,4-148,11)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Tv_Type__0 (FStar.Stubs.Reflection.V2.Data.Tv_Type @x0))
@x0)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_Type @x0))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Type__0))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Type__0))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(149,4-149,13); use=FStar.Stubs.Reflection.V2.Data.fsti(149,4-149,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Tv_Refine_ref (FStar.Stubs.Reflection.V2.Data.Tv_Refine @x0
@x1))
@x1)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_Refine @x0
@x1))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Refine_ref))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Refine_ref))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(149,4-149,13); use=FStar.Stubs.Reflection.V2.Data.fsti(149,4-149,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Tv_Refine_b (FStar.Stubs.Reflection.V2.Data.Tv_Refine @x0
@x1))
@x0)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_Refine @x0
@x1))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Refine_b))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Refine_b))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(153,4-153,12); use=FStar.Stubs.Reflection.V2.Data.fsti(153,4-153,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Tv_Match_scrutinee (FStar.Stubs.Reflection.V2.Data.Tv_Match @x0
@x1
@x2))
@x0)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_Match @x0
@x1
@x2))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Match_scrutinee))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Match_scrutinee))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(153,4-153,12); use=FStar.Stubs.Reflection.V2.Data.fsti(153,4-153,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Tv_Match_ret (FStar.Stubs.Reflection.V2.Data.Tv_Match @x0
@x1
@x2))
@x1)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_Match @x0
@x1
@x2))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Match_ret))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Match_ret))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(153,4-153,12); use=FStar.Stubs.Reflection.V2.Data.fsti(153,4-153,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Tv_Match_brs (FStar.Stubs.Reflection.V2.Data.Tv_Match @x0
@x1
@x2))
@x2)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_Match @x0
@x1
@x2))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Match_brs))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Match_brs))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(152,4-152,10); use=FStar.Stubs.Reflection.V2.Data.fsti(152,4-152,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Tv_Let_recf (FStar.Stubs.Reflection.V2.Data.Tv_Let @x0
@x1
@x2
@x3
@x4))
@x0)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_Let @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Let_recf))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Let_recf))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(152,4-152,10); use=FStar.Stubs.Reflection.V2.Data.fsti(152,4-152,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Tv_Let_def (FStar.Stubs.Reflection.V2.Data.Tv_Let @x0
@x1
@x2
@x3
@x4))
@x3)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_Let @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Let_def))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Let_def))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(152,4-152,10); use=FStar.Stubs.Reflection.V2.Data.fsti(152,4-152,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Tv_Let_body (FStar.Stubs.Reflection.V2.Data.Tv_Let @x0
@x1
@x2
@x3
@x4))
@x4)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_Let @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Let_body))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Let_body))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(152,4-152,10); use=FStar.Stubs.Reflection.V2.Data.fsti(152,4-152,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Tv_Let_b (FStar.Stubs.Reflection.V2.Data.Tv_Let @x0
@x1
@x2
@x3
@x4))
@x2)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_Let @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Let_b))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Let_b))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(152,4-152,10); use=FStar.Stubs.Reflection.V2.Data.fsti(152,4-152,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Tv_Let_attrs (FStar.Stubs.Reflection.V2.Data.Tv_Let @x0
@x1
@x2
@x3
@x4))
@x1)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_Let @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Let_attrs))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Let_attrs))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(143,4-143,11); use=FStar.Stubs.Reflection.V2.Data.fsti(143,4-143,11)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Tv_FVar_v (FStar.Stubs.Reflection.V2.Data.Tv_FVar @x0))
@x0)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_FVar @x0))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_FVar_v))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_FVar_v))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(150,4-150,12); use=FStar.Stubs.Reflection.V2.Data.fsti(150,4-150,12)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Tv_Const__0 (FStar.Stubs.Reflection.V2.Data.Tv_Const @x0))
@x0)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_Const @x0))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Const__0))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Const__0))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(142,4-142,11); use=FStar.Stubs.Reflection.V2.Data.fsti(142,4-142,11)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Tv_BVar_v (FStar.Stubs.Reflection.V2.Data.Tv_BVar @x0))
@x0)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_BVar @x0))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_BVar_v))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_BVar_v))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(154,4-154,16); use=FStar.Stubs.Reflection.V2.Data.fsti(154,4-154,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Tv_AscribedT_use_eq (FStar.Stubs.Reflection.V2.Data.Tv_AscribedT @x0
@x1
@x2
@x3))
@x3)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_AscribedT @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_AscribedT_use_eq))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_AscribedT_use_eq))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(154,4-154,16); use=FStar.Stubs.Reflection.V2.Data.fsti(154,4-154,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Tv_AscribedT_tac (FStar.Stubs.Reflection.V2.Data.Tv_AscribedT @x0
@x1
@x2
@x3))
@x2)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_AscribedT @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_AscribedT_tac))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_AscribedT_tac))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(154,4-154,16); use=FStar.Stubs.Reflection.V2.Data.fsti(154,4-154,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Tv_AscribedT_t (FStar.Stubs.Reflection.V2.Data.Tv_AscribedT @x0
@x1
@x2
@x3))
@x1)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_AscribedT @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_AscribedT_t))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_AscribedT_t))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(154,4-154,16); use=FStar.Stubs.Reflection.V2.Data.fsti(154,4-154,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Tv_AscribedT_e (FStar.Stubs.Reflection.V2.Data.Tv_AscribedT @x0
@x1
@x2
@x3))
@x0)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_AscribedT @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_AscribedT_e))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_AscribedT_e))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(155,4-155,16); use=FStar.Stubs.Reflection.V2.Data.fsti(155,4-155,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Tv_AscribedC_use_eq (FStar.Stubs.Reflection.V2.Data.Tv_AscribedC @x0
@x1
@x2
@x3))
@x3)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_AscribedC @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_AscribedC_use_eq))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_AscribedC_use_eq))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(155,4-155,16); use=FStar.Stubs.Reflection.V2.Data.fsti(155,4-155,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Tv_AscribedC_tac (FStar.Stubs.Reflection.V2.Data.Tv_AscribedC @x0
@x1
@x2
@x3))
@x2)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_AscribedC @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_AscribedC_tac))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_AscribedC_tac))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(155,4-155,16); use=FStar.Stubs.Reflection.V2.Data.fsti(155,4-155,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Tv_AscribedC_e (FStar.Stubs.Reflection.V2.Data.Tv_AscribedC @x0
@x1
@x2
@x3))
@x0)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_AscribedC @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_AscribedC_e))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_AscribedC_e))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(155,4-155,16); use=FStar.Stubs.Reflection.V2.Data.fsti(155,4-155,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Tv_AscribedC_c (FStar.Stubs.Reflection.V2.Data.Tv_AscribedC @x0
@x1
@x2
@x3))
@x1)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_AscribedC @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_AscribedC_c))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_AscribedC_c))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(147,4-147,12); use=FStar.Stubs.Reflection.V2.Data.fsti(147,4-147,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Tv_Arrow_c (FStar.Stubs.Reflection.V2.Data.Tv_Arrow @x0
@x1))
@x1)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_Arrow @x0
@x1))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Arrow_c))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Arrow_c))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(147,4-147,12); use=FStar.Stubs.Reflection.V2.Data.fsti(147,4-147,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Tv_Arrow_bv (FStar.Stubs.Reflection.V2.Data.Tv_Arrow @x0
@x1))
@x0)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_Arrow @x0
@x1))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Arrow_bv))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Arrow_bv))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(145,4-145,10); use=FStar.Stubs.Reflection.V2.Data.fsti(145,4-145,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Tv_App_hd (FStar.Stubs.Reflection.V2.Data.Tv_App @x0
@x1))
@x0)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_App @x0
@x1))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_App_hd))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_App_hd))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(145,4-145,10); use=FStar.Stubs.Reflection.V2.Data.fsti(145,4-145,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Tv_App_a (FStar.Stubs.Reflection.V2.Data.Tv_App @x0
@x1))
@x1)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_App @x0
@x1))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_App_a))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_App_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(146,4-146,10); use=FStar.Stubs.Reflection.V2.Data.fsti(146,4-146,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Tv_Abs_bv (FStar.Stubs.Reflection.V2.Data.Tv_Abs @x0
@x1))
@x0)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_Abs @x0
@x1))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Abs_bv))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Abs_bv))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(146,4-146,10); use=FStar.Stubs.Reflection.V2.Data.fsti(146,4-146,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Tv_Abs_body (FStar.Stubs.Reflection.V2.Data.Tv_Abs @x0
@x1))
@x1)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_Abs @x0
@x1))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Abs_body))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Tv_Abs_body))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.aqualv; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Implicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Explicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Equality; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Meta; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(80,4-80,10); use=FStar.Stubs.Reflection.V2.Data.fsti(80,4-80,10)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Q_Meta__0 (FStar.Stubs.Reflection.V2.Data.Q_Meta @x0))
@x0)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Q_Meta @x0))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Q_Meta__0))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Q_Meta__0))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.pattern; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Constant; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Cons; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(63,3-63,10); use=FStar.Stubs.Reflection.V2.Data.fsti(63,3-63,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Pat_Var_sort (FStar.Stubs.Reflection.V2.Data.Pat_Var @x0
@x1))
@x0)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Pat_Var @x0
@x1))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Pat_Var_sort))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Pat_Var_sort))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.pattern; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Constant; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Cons; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(63,3-63,10); use=FStar.Stubs.Reflection.V2.Data.fsti(63,3-63,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Pat_Var_ppname (FStar.Stubs.Reflection.V2.Data.Pat_Var @x0
@x1))
@x1)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Pat_Var @x0
@x1))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Pat_Var_ppname))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Pat_Var_ppname))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.pattern; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Constant; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Cons; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(69,3-69,15); use=FStar.Stubs.Reflection.V2.Data.fsti(69,3-69,15)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term_t (FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term @x0))
@x0)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term @x0))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term_t))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term_t))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.pattern; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Constant; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Cons; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(46,3-46,15); use=FStar.Stubs.Reflection.V2.Data.fsti(46,3-46,15)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Pat_Constant_c (FStar.Stubs.Reflection.V2.Data.Pat_Constant @x0))
@x0)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Pat_Constant @x0))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Pat_Constant_c))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Pat_Constant_c))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.pattern; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Constant; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Cons; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(52,3-52,11); use=FStar.Stubs.Reflection.V2.Data.fsti(52,3-52,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Pat_Cons_univs (FStar.Stubs.Reflection.V2.Data.Pat_Cons @x0
@x1
@x2))
@x1)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Pat_Cons @x0
@x1
@x2))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Pat_Cons_univs))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Pat_Cons_univs))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.pattern; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Constant; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Cons; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(52,3-52,11); use=FStar.Stubs.Reflection.V2.Data.fsti(52,3-52,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Pat_Cons_subpats (FStar.Stubs.Reflection.V2.Data.Pat_Cons @x0
@x1
@x2))
@x2)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Pat_Cons @x0
@x1
@x2))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Pat_Cons_subpats))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Pat_Cons_subpats))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.pattern; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Constant; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Cons; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(52,3-52,11); use=FStar.Stubs.Reflection.V2.Data.fsti(52,3-52,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Pat_Cons_head (FStar.Stubs.Reflection.V2.Data.Pat_Cons @x0
@x1
@x2))
@x0)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Pat_Cons @x0
@x1
@x2))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Pat_Cons_head))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Pat_Cons_head))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.namedv_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Mknamedv_view; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(86,5-86,16); use=FStar.Stubs.Reflection.V2.Data.fsti(86,5-86,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Mknamedv_view_uniq (FStar.Stubs.Reflection.V2.Data.Mknamedv_view @x0
@x1
@x2))
@x0)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Mknamedv_view @x0
@x1
@x2))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Mknamedv_view_uniq))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Mknamedv_view_uniq))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.namedv_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Mknamedv_view; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(86,5-86,16); use=FStar.Stubs.Reflection.V2.Data.fsti(86,5-86,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Mknamedv_view_sort (FStar.Stubs.Reflection.V2.Data.Mknamedv_view @x0
@x1
@x2))
@x1)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Mknamedv_view @x0
@x1
@x2))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Mknamedv_view_sort))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Mknamedv_view_sort))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.namedv_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Mknamedv_view; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(86,5-86,16); use=FStar.Stubs.Reflection.V2.Data.fsti(86,5-86,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Mknamedv_view_ppname (FStar.Stubs.Reflection.V2.Data.Mknamedv_view @x0
@x1
@x2))
@x2)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Mknamedv_view @x0
@x1
@x2))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Mknamedv_view_ppname))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Mknamedv_view_ppname))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.binder_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Mkbinder_view; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(103,5-103,16); use=FStar.Stubs.Reflection.V2.Data.fsti(103,5-103,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Mkbinder_view_sort (FStar.Stubs.Reflection.V2.Data.Mkbinder_view @x0
@x1
@x2
@x3))
@x0)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Mkbinder_view @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Mkbinder_view_sort))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Mkbinder_view_sort))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.binder_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Mkbinder_view; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(103,5-103,16); use=FStar.Stubs.Reflection.V2.Data.fsti(103,5-103,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Mkbinder_view_qual (FStar.Stubs.Reflection.V2.Data.Mkbinder_view @x0
@x1
@x2
@x3))
@x1)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Mkbinder_view @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Mkbinder_view_qual))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Mkbinder_view_qual))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.binder_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Mkbinder_view; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(103,5-103,16); use=FStar.Stubs.Reflection.V2.Data.fsti(103,5-103,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Mkbinder_view_ppname (FStar.Stubs.Reflection.V2.Data.Mkbinder_view @x0
@x1
@x2
@x3))
@x3)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Mkbinder_view @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Mkbinder_view_ppname))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Mkbinder_view_ppname))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.binder_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Mkbinder_view; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(103,5-103,16); use=FStar.Stubs.Reflection.V2.Data.fsti(103,5-103,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Mkbinder_view_attrs (FStar.Stubs.Reflection.V2.Data.Mkbinder_view @x0
@x1
@x2
@x3))
@x2)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Mkbinder_view @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Mkbinder_view_attrs))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Mkbinder_view_attrs))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(32,4-32,12); use=FStar.Stubs.Reflection.V2.Data.fsti(32,4-32,12)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.C_String__0 (FStar.Stubs.Reflection.V2.Data.C_String @x0))
@x0)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.C_String @x0))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.C_String__0))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.C_String__0))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(35,4-35,13); use=FStar.Stubs.Reflection.V2.Data.fsti(35,4-35,13)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.C_Reflect__0 (FStar.Stubs.Reflection.V2.Data.C_Reflect @x0))
@x0)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.C_Reflect @x0))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.C_Reflect__0))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.C_Reflect__0))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(36,4-36,10); use=FStar.Stubs.Reflection.V2.Data.fsti(36,4-36,10)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.C_Real__0 (FStar.Stubs.Reflection.V2.Data.C_Real @x0))
@x0)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.C_Real @x0))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.C_Real__0))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.C_Real__0))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(33,4-33,11); use=FStar.Stubs.Reflection.V2.Data.fsti(33,4-33,11)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.C_Range__0 (FStar.Stubs.Reflection.V2.Data.C_Range @x0))
@x0)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.C_Range @x0))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.C_Range__0))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.C_Range__0))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(29,4-29,9); use=FStar.Stubs.Reflection.V2.Data.fsti(29,4-29,9)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.C_Int__0 (FStar.Stubs.Reflection.V2.Data.C_Int @x0))
@x0)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.C_Int @x0))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.C_Int__0))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.C_Int__0))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.Some_v (FStar.Pervasives.Native.Some @x0
@x1))
@x1)
 

:pattern ((FStar.Pervasives.Native.Some @x0
@x1))
:qid projection_inverse_FStar.Pervasives.Native.Some_v))

:named projection_inverse_FStar.Pervasives.Native.Some_v))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.Some_a (FStar.Pervasives.Native.Some @x0
@x1))
@x0)
 

:pattern ((FStar.Pervasives.Native.Some @x0
@x1))
:qid projection_inverse_FStar.Pervasives.Native.Some_a))

:named projection_inverse_FStar.Pervasives.Native.Some_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@x0 Term))
 (! (= (FStar.Pervasives.Native.None_a (FStar.Pervasives.Native.None @x0))
@x0)
 

:pattern ((FStar.Pervasives.Native.None @x0))
:qid projection_inverse_FStar.Pervasives.Native.None_a))

:named projection_inverse_FStar.Pervasives.Native.None_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.Mktuple3__c (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x2)
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple3__c))

:named projection_inverse_FStar.Pervasives.Native.Mktuple3__c))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.Mktuple3__b (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x1)
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple3__b))

:named projection_inverse_FStar.Pervasives.Native.Mktuple3__b))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.Mktuple3__a (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x0)
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple3__a))

:named projection_inverse_FStar.Pervasives.Native.Mktuple3__a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.Mktuple3__3 (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x5)
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple3__3))

:named projection_inverse_FStar.Pervasives.Native.Mktuple3__3))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.Mktuple3__2 (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x4)
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple3__2))

:named projection_inverse_FStar.Pervasives.Native.Mktuple3__2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.Mktuple3__1 (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x3)
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple3__1))

:named projection_inverse_FStar.Pervasives.Native.Mktuple3__1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.Mktuple2__b (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
@x1)
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple2__b))

:named projection_inverse_FStar.Pervasives.Native.Mktuple2__b))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.Mktuple2__a (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
@x0)
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple2__a))

:named projection_inverse_FStar.Pervasives.Native.Mktuple2__a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.Mktuple2__2 (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
@x3)
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple2__2))

:named projection_inverse_FStar.Pervasives.Native.Mktuple2__2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.Mktuple2__1 (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
@x2)
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple2__1))

:named projection_inverse_FStar.Pervasives.Native.Mktuple2__1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(732,4-732,7); use=FStar.Pervasives.fsti(732,4-732,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.Inr_v (FStar.Pervasives.Inr @x0
@x1
@x2))
@x2)
 

:pattern ((FStar.Pervasives.Inr @x0
@x1
@x2))
:qid projection_inverse_FStar.Pervasives.Inr_v))

:named projection_inverse_FStar.Pervasives.Inr_v))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(732,4-732,7); use=FStar.Pervasives.fsti(732,4-732,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.Inr_b (FStar.Pervasives.Inr @x0
@x1
@x2))
@x1)
 

:pattern ((FStar.Pervasives.Inr @x0
@x1
@x2))
:qid projection_inverse_FStar.Pervasives.Inr_b))

:named projection_inverse_FStar.Pervasives.Inr_b))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(732,4-732,7); use=FStar.Pervasives.fsti(732,4-732,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.Inr_a (FStar.Pervasives.Inr @x0
@x1
@x2))
@x0)
 

:pattern ((FStar.Pervasives.Inr @x0
@x1
@x2))
:qid projection_inverse_FStar.Pervasives.Inr_a))

:named projection_inverse_FStar.Pervasives.Inr_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(731,4-731,7); use=FStar.Pervasives.fsti(731,4-731,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.Inl_v (FStar.Pervasives.Inl @x0
@x1
@x2))
@x2)
 

:pattern ((FStar.Pervasives.Inl @x0
@x1
@x2))
:qid projection_inverse_FStar.Pervasives.Inl_v))

:named projection_inverse_FStar.Pervasives.Inl_v))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(731,4-731,7); use=FStar.Pervasives.fsti(731,4-731,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.Inl_b (FStar.Pervasives.Inl @x0
@x1
@x2))
@x1)
 

:pattern ((FStar.Pervasives.Inl @x0
@x1
@x2))
:qid projection_inverse_FStar.Pervasives.Inl_b))

:named projection_inverse_FStar.Pervasives.Inl_b))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(731,4-731,7); use=FStar.Pervasives.fsti(731,4-731,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.Inl_a (FStar.Pervasives.Inl @x0
@x1
@x2))
@x0)
 

:pattern ((FStar.Pervasives.Inl @x0
@x1
@x2))
:qid projection_inverse_FStar.Pervasives.Inl_a))

:named projection_inverse_FStar.Pervasives.Inl_a))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__qual; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(105,2-105,6); use=FStar.Stubs.Reflection.V2.Data.fsti(105,2-105,6)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__qual @x0)
(FStar.Stubs.Reflection.V2.Data.Mkbinder_view_qual @x0))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__qual @x0))
:qid proj_equation_FStar.Stubs.Reflection.V2.Data.Mkbinder_view_qual))

:named proj_equation_FStar.Stubs.Reflection.V2.Data.Mkbinder_view_qual))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__attrs; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(106,2-106,7); use=FStar.Stubs.Reflection.V2.Data.fsti(106,2-106,7)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__attrs @x0)
(FStar.Stubs.Reflection.V2.Data.Mkbinder_view_attrs @x0))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__attrs @x0))
:qid proj_equation_FStar.Stubs.Reflection.V2.Data.Mkbinder_view_attrs))

:named proj_equation_FStar.Stubs.Reflection.V2.Data.Mkbinder_view_attrs))
;;; Fact-ids: Name Prims.op_Subtraction; Namespace Prims
(assert (! 
;; def=Prims.fst(546,4-546,18); use=Prims.fst(546,4-546,18)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_Subtraction @x0
@x1)
(BoxInt (- (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_Subtraction @x0
@x1))
:qid primitive_Prims.op_Subtraction))

:named primitive_Prims.op_Subtraction))
;;; Fact-ids: Name Prims.op_Multiply; Namespace Prims
(assert (! 
;; def=Prims.fst(540,4-540,15); use=Prims.fst(540,4-540,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_Multiply @x0
@x1)
(BoxInt (* (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_Multiply @x0
@x1))
:qid primitive_Prims.op_Multiply))

:named primitive_Prims.op_Multiply))
;;; Fact-ids: Name Prims.op_Modulus; Namespace Prims
(assert (! 
;; def=Prims.fst(697,4-697,14); use=Prims.fst(697,4-697,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (not (= (BoxInt_proj_0 @x1)
0))
(= (Prims.op_Modulus @x0
@x1)
(BoxInt (mod (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1)))))
 

:pattern ((Prims.op_Modulus @x0
@x1))
:qid primitive_Prims.op_Modulus))

:named primitive_Prims.op_Modulus))
;;; Fact-ids: Name Prims.op_Minus; Namespace Prims
(assert (! 
;; def=Prims.fst(558,4-558,12); use=Prims.fst(558,4-558,12)
(forall ((@x0 Term))
 (! (= (Prims.op_Minus @x0)
(BoxInt (- (BoxInt_proj_0 @x0))))
 

:pattern ((Prims.op_Minus @x0))
:qid primitive_Prims.op_Minus))

:named primitive_Prims.op_Minus))
;;; Fact-ids: Name Prims.op_LessThanOrEqual; Namespace Prims
(assert (! 
;; def=Prims.fst(564,4-564,22); use=Prims.fst(564,4-564,22)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_LessThanOrEqual @x0
@x1)
(BoxBool (<= (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_LessThanOrEqual @x0
@x1))
:qid primitive_Prims.op_LessThanOrEqual))

:named primitive_Prims.op_LessThanOrEqual))
;;; Fact-ids: Name Prims.op_GreaterThanOrEqual; Namespace Prims
(assert (! 
;; def=Prims.fst(576,4-576,25); use=Prims.fst(576,4-576,25)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_GreaterThanOrEqual @x0
@x1)
(BoxBool (>= (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_GreaterThanOrEqual @x0
@x1))
:qid primitive_Prims.op_GreaterThanOrEqual))

:named primitive_Prims.op_GreaterThanOrEqual))
;;; Fact-ids: Name Prims.op_AmpAmp; Namespace Prims
(assert (! 
;; def=Prims.fst(522,4-522,13); use=Prims.fst(522,4-522,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_AmpAmp @x0
@x1)
(BoxBool (and (BoxBool_proj_0 @x0)
(BoxBool_proj_0 @x1))))
 

:pattern ((Prims.op_AmpAmp @x0
@x1))
:qid primitive_Prims.op_AmpAmp))

:named primitive_Prims.op_AmpAmp))
;;; Fact-ids: Name Prims.op_Addition; Namespace Prims
(assert (! 
;; def=Prims.fst(552,4-552,15); use=Prims.fst(552,4-552,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_Addition @x0
@x1)
(BoxInt (+ (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_Addition @x0
@x1))
:qid primitive_Prims.op_Addition))

:named primitive_Prims.op_Addition))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (is-Tm_arrow (PreType Prims.list@tok))
:named pre_kinding_Prims.list@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name FStar.Stubs.Tactics.Result.__result; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Success; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Failed; Namespace FStar.Stubs.Tactics.Result
(assert (! (is-Tm_arrow (PreType FStar.Stubs.Tactics.Result.__result@tok))
:named pre_kinding_FStar.Stubs.Tactics.Result.__result@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! (is-Tm_arrow (PreType FStar.Pervasives.either@tok))
:named pre_kinding_FStar.Pervasives.either@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (is-Tm_arrow (PreType FStar.Pervasives.Native.tuple3@tok))
:named pre_kinding_FStar.Pervasives.Native.tuple3@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (is-Tm_arrow (PreType FStar.Pervasives.Native.tuple2@tok))
:named pre_kinding_FStar.Pervasives.Native.tuple2@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (is-Tm_arrow (PreType FStar.Pervasives.Native.option@tok))
:named pre_kinding_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;Lemma: FStar.UInt.pow2_values
;;; Fact-ids: Name FStar.UInt.pow2_values; Namespace FStar.UInt
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.nat)
(let ((@lb1 @x0))
(ite (= @lb1
(BoxInt 0))

;; def=FStar.UInt.fsti(28,11-28,14); use=FStar.UInt.fsti(28,11-28,14)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 1))

(ite (= @lb1
(BoxInt 1))

;; def=FStar.UInt.fsti(29,11-29,14); use=FStar.UInt.fsti(29,11-29,14)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 2))

(ite (= @lb1
(BoxInt 8))

;; def=FStar.UInt.fsti(30,11-30,16); use=FStar.UInt.fsti(30,11-30,16)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 256))

(ite (= @lb1
(BoxInt 16))

;; def=FStar.UInt.fsti(31,11-31,18); use=FStar.UInt.fsti(31,11-31,18)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 65536))

(ite (= @lb1
(BoxInt 31))

;; def=FStar.UInt.fsti(32,11-32,23); use=FStar.UInt.fsti(32,11-32,23)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 2147483648))

(ite (= @lb1
(BoxInt 32))

;; def=FStar.UInt.fsti(33,11-33,23); use=FStar.UInt.fsti(33,11-33,23)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 4294967296))

(ite (= @lb1
(BoxInt 63))

;; def=FStar.UInt.fsti(34,11-34,32); use=FStar.UInt.fsti(34,11-34,32)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 9223372036854775808))

(ite (= @lb1
(BoxInt 64))

;; def=FStar.UInt.fsti(35,11-35,33); use=FStar.UInt.fsti(35,11-35,33)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 18446744073709551616))

(implies (= @lb1
(BoxInt 128))

;; def=FStar.UInt.fsti(36,12-36,49); use=FStar.UInt.fsti(36,12-36,49)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 340282366920938463463374607431768211456))
)))))))))))
 

:pattern ((Prims.pow2.fuel_instrumented ZFuel
@x0))
:qid lemma_FStar.UInt.pow2_values))
:named lemma_FStar.UInt.pow2_values))
;;;;;;;;;;;;;;;;Lemma: FStar.Stubs.Reflection.V2.Builtins.simple_binder_defn
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Builtins.simple_binder_defn; Namespace FStar.Stubs.Reflection.V2.Builtins
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.Types.binder)

;; def=FStar.Stubs.Reflection.V2.Builtins.fsti(112,8-113,79); use=FStar.Stubs.Reflection.V2.Builtins.fsti(112,8-113,79)
(iff 
;; def=FStar.Stubs.Reflection.V2.Builtins.fsti(112,9-112,27); use=FStar.Stubs.Reflection.V2.Builtins.fsti(112,9-112,27)
(BoxBool_proj_0 (FStar.Stubs.Reflection.V2.Data.binder_is_simple @x0))


;; def=FStar.Stubs.Reflection.V2.Builtins.fsti(113,10-113,78); use=FStar.Stubs.Reflection.V2.Builtins.fsti(113,10-113,78)
(and 
;; def=FStar.Stubs.Reflection.V2.Builtins.fsti(113,10-113,45); use=FStar.Stubs.Reflection.V2.Builtins.fsti(113,10-113,45)
(BoxBool_proj_0 (FStar.Stubs.Reflection.V2.Data.uu___is_Q_Explicit (FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__qual (FStar.Stubs.Reflection.V2.Builtins.inspect_binder @x0))))


;; def=FStar.Stubs.Reflection.V2.Builtins.fsti(113,49-113,78); use=FStar.Stubs.Reflection.V2.Builtins.fsti(113,49-113,78)
(BoxBool_proj_0 (Prims.uu___is_Nil FStar.Stubs.Reflection.Types.term
(FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__attrs (FStar.Stubs.Reflection.V2.Builtins.inspect_binder @x0))))
)
)
)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.binder_is_simple @x0))
:qid lemma_FStar.Stubs.Reflection.V2.Builtins.simple_binder_defn))
:named lemma_FStar.Stubs.Reflection.V2.Builtins.simple_binder_defn))
;;;;;;;;;;;;;;;;Lemma: FStar.Sealed.Inhabited.sealed_singleton
;;; Fact-ids: Name FStar.Sealed.Inhabited.sealed_singleton; Namespace FStar.Sealed.Inhabited
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0)
(HasType @x2
(FStar.Sealed.Inhabited.sealed @x0
@x1)))

;; def=FStar.Sealed.Inhabited.fst(55,10-55,29); use=FStar.Sealed.Inhabited.fst(55,10-55,29)
(= @x2
(FStar.Sealed.Inhabited.seal @x0
@x1
@x1))
)
 

:pattern ((FStar.Sealed.Inhabited.is_sealed @x0
@x1
@x2))
:qid lemma_FStar.Sealed.Inhabited.sealed_singleton))
:named lemma_FStar.Sealed.Inhabited.sealed_singleton))
;;;;;;;;;;;;;;;;Lemma: FStar.Pervasives.invertOption
;;; Fact-ids: Name FStar.Pervasives.invertOption; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)

;; def=FStar.Pervasives.fsti(727,37-727,79); use=FStar.Pervasives.fsti(727,37-727,79)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.Pervasives.Native.option @x0))

;; def=FStar.Pervasives.fsti(727,60-727,78); use=FStar.Pervasives.fsti(727,60-727,78)
(or 
;; def=FStar.Pervasives.fsti(727,60-727,67); use=FStar.Pervasives.fsti(727,60-727,67)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None @x0
@x1))


;; def=FStar.Pervasives.fsti(727,71-727,78); use=FStar.Pervasives.fsti(727,71-727,78)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x0
@x1))
)
)
 
;;no pats
:qid lemma_FStar.Pervasives.invertOption.1))
)
 

:pattern ((FStar.Pervasives.Native.option @x0))
:qid lemma_FStar.Pervasives.invertOption))
:named lemma_FStar.Pervasives.invertOption))
;;;;;;;;;;;;;;;;Lemma: FStar.Int.pow2_values
;;; Fact-ids: Name FStar.Int.pow2_values; Namespace FStar.Int
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.nat)
(let ((@lb1 @x0))
(ite (= @lb1
(BoxInt 0))

;; def=FStar.Int.fsti(28,11-28,14); use=FStar.Int.fsti(28,11-28,14)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 1))

(ite (= @lb1
(BoxInt 1))

;; def=FStar.Int.fsti(29,11-29,14); use=FStar.Int.fsti(29,11-29,14)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 2))

(ite (= @lb1
(BoxInt 8))

;; def=FStar.Int.fsti(30,11-30,16); use=FStar.Int.fsti(30,11-30,16)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 256))

(ite (= @lb1
(BoxInt 16))

;; def=FStar.Int.fsti(31,11-31,18); use=FStar.Int.fsti(31,11-31,18)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 65536))

(ite (= @lb1
(BoxInt 31))

;; def=FStar.Int.fsti(32,11-32,23); use=FStar.Int.fsti(32,11-32,23)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 2147483648))

(ite (= @lb1
(BoxInt 32))

;; def=FStar.Int.fsti(33,11-33,23); use=FStar.Int.fsti(33,11-33,23)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 4294967296))

(ite (= @lb1
(BoxInt 63))

;; def=FStar.Int.fsti(34,11-34,32); use=FStar.Int.fsti(34,11-34,32)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 9223372036854775808))

(implies (= @lb1
(BoxInt 64))

;; def=FStar.Int.fsti(35,11-35,33); use=FStar.Int.fsti(35,11-35,33)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 18446744073709551616))
))))))))))
 

:pattern ((Prims.pow2.fuel_instrumented ZFuel
@x0))
:qid lemma_FStar.Int.pow2_values))
:named lemma_FStar.Int.pow2_values))
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (HasType Prims.trivial
Tm_type)
:named kinding_Prims.trivial@tok))
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (and (IsTotFun Prims.list@tok)

;; def=Prims.fst(614,5-614,9); use=Prims.fst(614,5-614,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.list @x0)
Tm_type))
 

:pattern ((Prims.list @x0))
:qid kinding_Prims.list@tok))
)
:named kinding_Prims.list@tok))
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.pattern__Pat_Var__payload
Tm_type)
:named kinding_FStar.Tactics.NamedView.pattern__Pat_Var__payload@tok))
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload
Tm_type)
:named kinding_FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload@tok))
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.pattern__Pat_Constant__payload
Tm_type)
:named kinding_FStar.Tactics.NamedView.pattern__Pat_Constant__payload@tok))
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.pattern__Pat_Cons__payload
Tm_type)
:named kinding_FStar.Tactics.NamedView.pattern__Pat_Cons__payload@tok))
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.pattern
Tm_type)
:named kinding_FStar.Tactics.NamedView.pattern@tok))
;;; Fact-ids: Name FStar.Stubs.Tactics.Result.__result; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Success; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Failed; Namespace FStar.Stubs.Tactics.Result
(assert (! (and (IsTotFun FStar.Stubs.Tactics.Result.__result@tok)

;; def=FStar.Stubs.Tactics.Result.fsti(24,10-24,18); use=FStar.Stubs.Tactics.Result.fsti(24,10-24,18)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Stubs.Tactics.Result.__result @x0)
Tm_type))
 

:pattern ((FStar.Stubs.Tactics.Result.__result @x0))
:qid kinding_FStar.Stubs.Tactics.Result.__result@tok))
)
:named kinding_FStar.Stubs.Tactics.Result.__result@tok))
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType FStar.Stubs.Reflection.V2.Data.vconst
Tm_type)
:named kinding_FStar.Stubs.Reflection.V2.Data.vconst@tok))
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType FStar.Stubs.Reflection.V2.Data.term_view
Tm_type)
:named kinding_FStar.Stubs.Reflection.V2.Data.term_view@tok))
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.pattern; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Constant; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Cons; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType FStar.Stubs.Reflection.V2.Data.pattern
Tm_type)
:named kinding_FStar.Stubs.Reflection.V2.Data.pattern@tok))
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.namedv_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Mknamedv_view; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType FStar.Stubs.Reflection.V2.Data.namedv_view
Tm_type)
:named kinding_FStar.Stubs.Reflection.V2.Data.namedv_view@tok))
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.binder_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Mkbinder_view; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType FStar.Stubs.Reflection.V2.Data.binder_view
Tm_type)
:named kinding_FStar.Stubs.Reflection.V2.Data.binder_view@tok))
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.aqualv; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Implicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Explicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Equality; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Meta; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType FStar.Stubs.Reflection.V2.Data.aqualv
Tm_type)
:named kinding_FStar.Stubs.Reflection.V2.Data.aqualv@tok))
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! (and (IsTotFun FStar.Pervasives.either@tok)

;; def=FStar.Pervasives.fsti(730,5-730,11); use=FStar.Pervasives.fsti(730,5-730,11)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT FStar.Pervasives.either@tok
@x0))
 

:pattern ((ApplyTT FStar.Pervasives.either@tok
@x0))
:qid kinding_FStar.Pervasives.either@tok))


;; def=FStar.Pervasives.fsti(730,5-730,11); use=FStar.Pervasives.fsti(730,5-730,11)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (FStar.Pervasives.either @x0
@x1)
Tm_type))
 

:pattern ((FStar.Pervasives.either @x0
@x1))
:qid kinding_FStar.Pervasives.either@tok.1))
)
:named kinding_FStar.Pervasives.either@tok))
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (and (IsTotFun FStar.Pervasives.Native.tuple3@tok)

;; def=FStar.Pervasives.Native.fst(65,5-65,11); use=FStar.Pervasives.Native.fst(65,5-65,11)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT FStar.Pervasives.Native.tuple3@tok
@x0))
 

:pattern ((ApplyTT FStar.Pervasives.Native.tuple3@tok
@x0))
:qid kinding_FStar.Pervasives.Native.tuple3@tok))


;; def=FStar.Pervasives.Native.fst(65,5-65,11); use=FStar.Pervasives.Native.fst(65,5-65,11)
(forall ((@x0 Term) (@x1 Term))
 (! (IsTotFun (ApplyTT (ApplyTT FStar.Pervasives.Native.tuple3@tok
@x0)
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.Native.tuple3@tok
@x0)
@x1))
:qid kinding_FStar.Pervasives.Native.tuple3@tok.1))


;; def=FStar.Pervasives.Native.fst(65,5-65,11); use=FStar.Pervasives.Native.fst(65,5-65,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type))
(HasType (FStar.Pervasives.Native.tuple3 @x0
@x1
@x2)
Tm_type))
 

:pattern ((FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))
:qid kinding_FStar.Pervasives.Native.tuple3@tok.2))
)
:named kinding_FStar.Pervasives.Native.tuple3@tok))
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (and (IsTotFun FStar.Pervasives.Native.tuple2@tok)

;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT FStar.Pervasives.Native.tuple2@tok
@x0))
 

:pattern ((ApplyTT FStar.Pervasives.Native.tuple2@tok
@x0))
:qid kinding_FStar.Pervasives.Native.tuple2@tok))


;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (FStar.Pervasives.Native.tuple2 @x0
@x1)
Tm_type))
 

:pattern ((FStar.Pervasives.Native.tuple2 @x0
@x1))
:qid kinding_FStar.Pervasives.Native.tuple2@tok.1))
)
:named kinding_FStar.Pervasives.Native.tuple2@tok))
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (and (IsTotFun FStar.Pervasives.Native.option@tok)

;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Pervasives.Native.option @x0)
Tm_type))
 

:pattern ((FStar.Pervasives.Native.option @x0))
:qid kinding_FStar.Pervasives.Native.option@tok))
)
:named kinding_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;int typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Int))
 (! (HasType (BoxInt @u0)
Prims.int)
 

:pattern ((BoxInt @u0))
:qid int_typing))
:named int_typing))
;;;;;;;;;;;;;;;;int inversion
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.int)
(is-BoxInt @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.int))
:qid int_inversion))
:named int_inversion))
;;;;;;;;;;;;;;;;haseq for Tm_refine_fe52390e6170c16c172c68852b19e4e7
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__C_Real__item___0; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (iff (Valid (Prims.hasEq Tm_refine_fe52390e6170c16c172c68852b19e4e7))
(Valid (Prims.hasEq FStar.Stubs.Reflection.V2.Data.vconst)))
:named haseqTm_refine_fe52390e6170c16c172c68852b19e4e7))
;;;;;;;;;;;;;;;;haseq for Tm_refine_fd8d0efc3ead3b7a2f2a11433fff8eaa
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Pat_Dot_Term__item___0; Namespace FStar.Tactics.NamedView
(assert (! (iff (Valid (Prims.hasEq Tm_refine_fd8d0efc3ead3b7a2f2a11433fff8eaa))
(Valid (Prims.hasEq FStar.Tactics.NamedView.pattern)))
:named haseqTm_refine_fd8d0efc3ead3b7a2f2a11433fff8eaa))
;;;;;;;;;;;;;;;;haseq for Tm_refine_fbfbe764a7047d11d6f7378b2ea1d9c3
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Q_Meta__item___0; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (iff (Valid (Prims.hasEq Tm_refine_fbfbe764a7047d11d6f7378b2ea1d9c3))
(Valid (Prims.hasEq FStar.Stubs.Reflection.V2.Data.aqualv)))
:named haseqTm_refine_fbfbe764a7047d11d6f7378b2ea1d9c3))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f977a384b76798b53763842ecb73fa85
;;; Fact-ids: Name FStar.Reflection.V2.Derived.mktuple_n; Namespace FStar.Reflection.V2.Derived
(assert (! (iff (Valid (Prims.hasEq Tm_refine_f977a384b76798b53763842ecb73fa85))
(Valid (Prims.hasEq (Prims.list FStar.Stubs.Reflection.Types.term))))
:named haseqTm_refine_f977a384b76798b53763842ecb73fa85))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f91ac8d5efb06a83fcdb210426823423
;;; Fact-ids: Name FStar.Int.Cast.uint16_to_uint32; Namespace FStar.Int.Cast
(assert (! (iff (Valid (Prims.hasEq Tm_refine_f91ac8d5efb06a83fcdb210426823423))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_f91ac8d5efb06a83fcdb210426823423))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f1ecc6ab6882a651504f328937700647
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (iff (Valid (Prims.hasEq Tm_refine_f1ecc6ab6882a651504f328937700647))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;haseq for Tm_refine_ed1ec337958d4240fdc3197cba495263
;;; Fact-ids: Name MiniParse.Spec.Int.pred_large_bound; Namespace MiniParse.Spec.Int
(assert (! (iff (Valid (Prims.hasEq Tm_refine_ed1ec337958d4240fdc3197cba495263))
(Valid (Prims.hasEq Prims.nat)))
:named haseqTm_refine_ed1ec337958d4240fdc3197cba495263))
;;;;;;;;;;;;;;;;haseq for Tm_refine_dd537019d2f0e727827f0138fef6addd
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_Uvar__item___0; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (iff (Valid (Prims.hasEq Tm_refine_dd537019d2f0e727827f0138fef6addd))
(Valid (Prims.hasEq FStar.Stubs.Reflection.V2.Data.term_view)))
:named haseqTm_refine_dd537019d2f0e727827f0138fef6addd))
;;;;;;;;;;;;;;;;haseq for Tm_refine_dc6354cd01f0cd4240123aff4b38cfaa
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedT__item__e; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (iff (Valid (Prims.hasEq Tm_refine_dc6354cd01f0cd4240123aff4b38cfaa))
(Valid (Prims.hasEq FStar.Stubs.Reflection.V2.Data.term_view)))
:named haseqTm_refine_dc6354cd01f0cd4240123aff4b38cfaa))
;;;;;;;;;;;;;;;;haseq for Tm_refine_da3062322c9bea8d5b2058386775b91a
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! (iff (Valid (Prims.hasEq Tm_refine_da3062322c9bea8d5b2058386775b91a))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_d601f2d8d86bb81cb4e53ef7f6de8606
;;; Fact-ids: Name FStar.Int.Cast.uint16_to_int64; Namespace FStar.Int.Cast
(assert (! (iff (Valid (Prims.hasEq Tm_refine_d601f2d8d86bb81cb4e53ef7f6de8606))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_d601f2d8d86bb81cb4e53ef7f6de8606))
;;;;;;;;;;;;;;;;haseq for Tm_refine_d4a84b93f9d98f1d1f86f8d8c79db285
;;; Fact-ids: Name FStar.Int.Cast.int16_to_int64; Namespace FStar.Int.Cast
(assert (! (iff (Valid (Prims.hasEq Tm_refine_d4a84b93f9d98f1d1f86f8d8c79db285))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_d4a84b93f9d98f1d1f86f8d8c79db285))
;;;;;;;;;;;;;;;;haseq for Tm_refine_d2711b61c4b52079f3c5968c061f9fcf
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_FVar__item__v; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (iff (Valid (Prims.hasEq Tm_refine_d2711b61c4b52079f3c5968c061f9fcf))
(Valid (Prims.hasEq FStar.Stubs.Reflection.V2.Data.term_view)))
:named haseqTm_refine_d2711b61c4b52079f3c5968c061f9fcf))
;;;;;;;;;;;;;;;;haseq for Tm_refine_d1b122fd2b90ff0b3deddd8582e5a32a
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_Type__item___0; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (iff (Valid (Prims.hasEq Tm_refine_d1b122fd2b90ff0b3deddd8582e5a32a))
(Valid (Prims.hasEq FStar.Stubs.Reflection.V2.Data.term_view)))
:named haseqTm_refine_d1b122fd2b90ff0b3deddd8582e5a32a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_ce618e257bb72c7bc0890dfed3cccc9e
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_App__item__hd; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (iff (Valid (Prims.hasEq Tm_refine_ce618e257bb72c7bc0890dfed3cccc9e))
(Valid (Prims.hasEq FStar.Stubs.Reflection.V2.Data.term_view)))
:named haseqTm_refine_ce618e257bb72c7bc0890dfed3cccc9e))
;;;;;;;;;;;;;;;;haseq for Tm_refine_c4248e8eff973519c395e9ad8b18c7f9
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_Var__item__v; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (iff (Valid (Prims.hasEq Tm_refine_c4248e8eff973519c395e9ad8b18c7f9))
(Valid (Prims.hasEq FStar.Stubs.Reflection.V2.Data.term_view)))
:named haseqTm_refine_c4248e8eff973519c395e9ad8b18c7f9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_c4075b916a3bb3afcd075e57f2a2a3f7
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_Refine__item__b; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (iff (Valid (Prims.hasEq Tm_refine_c4075b916a3bb3afcd075e57f2a2a3f7))
(Valid (Prims.hasEq FStar.Stubs.Reflection.V2.Data.term_view)))
:named haseqTm_refine_c4075b916a3bb3afcd075e57f2a2a3f7))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b904eb95f43a094a00ec5951681ff0d1
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Pat_Var__item__sort; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (iff (Valid (Prims.hasEq Tm_refine_b904eb95f43a094a00ec5951681ff0d1))
(Valid (Prims.hasEq FStar.Stubs.Reflection.V2.Data.pattern)))
:named haseqTm_refine_b904eb95f43a094a00ec5951681ff0d1))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f
;;; Fact-ids: Name FStar.Stubs.Tactics.Types.tracepoint; Namespace FStar.Stubs.Tactics.Types
(assert (! (iff (Valid (Prims.hasEq Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f))
(Valid (Prims.hasEq Prims.bool)))
:named haseqTm_refine_b8e45d9d9da45ba5c9bad7262617aa9f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b5e6c055aa02f0fe99c3006bfade50de
;;; Fact-ids: Name FStar.Int.Cast.uint32_to_int64; Namespace FStar.Int.Cast
(assert (! (iff (Valid (Prims.hasEq Tm_refine_b5e6c055aa02f0fe99c3006bfade50de))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_b5e6c055aa02f0fe99c3006bfade50de))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b44e12994d2f4788a60cf11dcbfb8611
;;; Fact-ids: Name FStar.Int.Cast.int8_to_int16; Namespace FStar.Int.Cast
(assert (! (iff (Valid (Prims.hasEq Tm_refine_b44e12994d2f4788a60cf11dcbfb8611))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_b44e12994d2f4788a60cf11dcbfb8611))
;;;;;;;;;;;;;;;;haseq for Tm_refine_aa8eedc0ecb86da30f7a24511f57030f
;;; Fact-ids: Name FStar.Issue.issue_level_string; Namespace FStar.Issue
(assert (! (iff (Valid (Prims.hasEq Tm_refine_aa8eedc0ecb86da30f7a24511f57030f))
(Valid (Prims.hasEq Prims.string)))
:named haseqTm_refine_aa8eedc0ecb86da30f7a24511f57030f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a8ce8a30c934a9cee3859f020c8d307b
;;; Fact-ids: Name FStar.Int.Cast.int32_to_int64; Namespace FStar.Int.Cast
(assert (! (iff (Valid (Prims.hasEq Tm_refine_a8ce8a30c934a9cee3859f020c8d307b))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_a8ce8a30c934a9cee3859f020c8d307b))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a8284b5e442b1496d78105f043903ddc
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.simple_binder; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (iff (Valid (Prims.hasEq Tm_refine_a8284b5e442b1496d78105f043903ddc))
(Valid (Prims.hasEq FStar.Stubs.Reflection.Types.binder)))
:named haseqTm_refine_a8284b5e442b1496d78105f043903ddc))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a399bc5b4c3acf4a57becd3ec8db4b3b
;;; Fact-ids: Name FStar.Int.Cast.int8_to_int64; Namespace FStar.Int.Cast
(assert (! (iff (Valid (Prims.hasEq Tm_refine_a399bc5b4c3acf4a57becd3ec8db4b3b))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_a399bc5b4c3acf4a57becd3ec8db4b3b))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a16f87d3d33f1a5fd74bee8c48ea5bbe
;;; Fact-ids: Name FStar.Int.Cast.uint32_to_uint64; Namespace FStar.Int.Cast
(assert (! (iff (Valid (Prims.hasEq Tm_refine_a16f87d3d33f1a5fd74bee8c48ea5bbe))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_a16f87d3d33f1a5fd74bee8c48ea5bbe))
;;;;;;;;;;;;;;;;haseq for Tm_refine_99be29c5f33c48c1672d3faa43f9cdfd
;;; Fact-ids: Name FStar.Int.Cast.int16_to_int32; Namespace FStar.Int.Cast
(assert (! (iff (Valid (Prims.hasEq Tm_refine_99be29c5f33c48c1672d3faa43f9cdfd))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_99be29c5f33c48c1672d3faa43f9cdfd))
;;;;;;;;;;;;;;;;haseq for Tm_refine_919c45f7fade48bc58599772159ac06a
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Pat_Cons__item__head; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (iff (Valid (Prims.hasEq Tm_refine_919c45f7fade48bc58599772159ac06a))
(Valid (Prims.hasEq FStar.Stubs.Reflection.V2.Data.pattern)))
:named haseqTm_refine_919c45f7fade48bc58599772159ac06a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_9030914e45d85a046cc0a6fdb9222232
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__C_Reflect__item___0; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (iff (Valid (Prims.hasEq Tm_refine_9030914e45d85a046cc0a6fdb9222232))
(Valid (Prims.hasEq FStar.Stubs.Reflection.V2.Data.vconst)))
:named haseqTm_refine_9030914e45d85a046cc0a6fdb9222232))
;;;;;;;;;;;;;;;;haseq for Tm_refine_8d01559daf290c998e8e5548df92339d
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_Arrow__item__bv; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (iff (Valid (Prims.hasEq Tm_refine_8d01559daf290c998e8e5548df92339d))
(Valid (Prims.hasEq FStar.Stubs.Reflection.V2.Data.term_view)))
:named haseqTm_refine_8d01559daf290c998e8e5548df92339d))
;;;;;;;;;;;;;;;;haseq for Tm_refine_7fcbc4d4271baad02416b0bc6d22bd6f
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Pat_Dot_Term__item__t; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (iff (Valid (Prims.hasEq Tm_refine_7fcbc4d4271baad02416b0bc6d22bd6f))
(Valid (Prims.hasEq FStar.Stubs.Reflection.V2.Data.pattern)))
:named haseqTm_refine_7fcbc4d4271baad02416b0bc6d22bd6f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_7df21076da548fc4d6b8c52c485d3bab
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__C_String__item___0; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (iff (Valid (Prims.hasEq Tm_refine_7df21076da548fc4d6b8c52c485d3bab))
(Valid (Prims.hasEq FStar.Stubs.Reflection.V2.Data.vconst)))
:named haseqTm_refine_7df21076da548fc4d6b8c52c485d3bab))
;;;;;;;;;;;;;;;;haseq for Tm_refine_77fa0f7914797f518561cfee6d1d9ee7
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__C_Range__item___0; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (iff (Valid (Prims.hasEq Tm_refine_77fa0f7914797f518561cfee6d1d9ee7))
(Valid (Prims.hasEq FStar.Stubs.Reflection.V2.Data.vconst)))
:named haseqTm_refine_77fa0f7914797f518561cfee6d1d9ee7))
;;;;;;;;;;;;;;;;haseq for Tm_refine_774ba3f728d91ead8ef40be66c9802e5
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_760215d17bae6326cab536ca4b3b4619
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Pat_Constant__item___0; Namespace FStar.Tactics.NamedView
(assert (! (iff (Valid (Prims.hasEq Tm_refine_760215d17bae6326cab536ca4b3b4619))
(Valid (Prims.hasEq FStar.Tactics.NamedView.pattern)))
:named haseqTm_refine_760215d17bae6326cab536ca4b3b4619))
;;;;;;;;;;;;;;;;haseq for Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;haseq for Tm_refine_6f861454c283cab7fef581bd2f2d57c5
;;; Fact-ids: Name FStar.Int.op_At_Percent; Namespace FStar.Int
(assert (! (iff (Valid (Prims.hasEq Tm_refine_6f861454c283cab7fef581bd2f2d57c5))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_6f861454c283cab7fef581bd2f2d57c5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_66b01e5a04cd5e59f9a6490d74f9c117
;;; Fact-ids: Name FStar.Int.Cast.uint8_to_int64; Namespace FStar.Int.Cast
(assert (! (iff (Valid (Prims.hasEq Tm_refine_66b01e5a04cd5e59f9a6490d74f9c117))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_66b01e5a04cd5e59f9a6490d74f9c117))
;;;;;;;;;;;;;;;;haseq for Tm_refine_641a6a7f4fb70f47c0def193c3c84dcf
;;; Fact-ids: Name MiniParse.Spec.Int.mk_u16; Namespace MiniParse.Spec.Int
(assert (! (iff (Valid (Prims.hasEq Tm_refine_641a6a7f4fb70f47c0def193c3c84dcf))
(Valid (Prims.hasEq Prims.nat)))
:named haseqTm_refine_641a6a7f4fb70f47c0def193c3c84dcf))
;;;;;;;;;;;;;;;;haseq for Tm_refine_6188ec86658c123c2c3404e80bc93cd0
;;; Fact-ids: Name FStar.Int.Cast.uint8_to_uint64; Namespace FStar.Int.Cast
(assert (! (iff (Valid (Prims.hasEq Tm_refine_6188ec86658c123c2c3404e80bc93cd0))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_6188ec86658c123c2c3404e80bc93cd0))
;;;;;;;;;;;;;;;;haseq for Tm_refine_5915aca42c70b204fb8abd23a0546bb3
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Pat_Var__item___0; Namespace FStar.Tactics.NamedView
(assert (! (iff (Valid (Prims.hasEq Tm_refine_5915aca42c70b204fb8abd23a0546bb3))
(Valid (Prims.hasEq FStar.Tactics.NamedView.pattern)))
:named haseqTm_refine_5915aca42c70b204fb8abd23a0546bb3))
;;;;;;;;;;;;;;;;haseq for Tm_refine_542f9d4f129664613f2483a6c88bc7c2
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4fe9a5df27ca5859eef8add9fc6819fb
;;; Fact-ids: Name FStar.Int.pow2_minus_one; Namespace FStar.Int
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4fe9a5df27ca5859eef8add9fc6819fb))
(Valid (Prims.hasEq Prims.pos)))
:named haseqTm_refine_4fe9a5df27ca5859eef8add9fc6819fb))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
;;; Fact-ids: Name FStar.Tactics.V2.Derived.run_tactic; Namespace FStar.Tactics.V2.Derived
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_473c0367e281690ddeb7ba9d7d22f1f6
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_BVar__item__v; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (iff (Valid (Prims.hasEq Tm_refine_473c0367e281690ddeb7ba9d7d22f1f6))
(Valid (Prims.hasEq FStar.Stubs.Reflection.V2.Data.term_view)))
:named haseqTm_refine_473c0367e281690ddeb7ba9d7d22f1f6))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4654dd4b2d6f243e5ec6eaf9826069c9
;;; Fact-ids: Name FStar.Int.Cast.uint8_to_uint16; Namespace FStar.Int.Cast
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4654dd4b2d6f243e5ec6eaf9826069c9))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_4654dd4b2d6f243e5ec6eaf9826069c9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4540dfbe159ce3f577a577d113336bcc
;;; Fact-ids: Name FStar.Int.Cast.uint16_to_uint64; Namespace FStar.Int.Cast
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4540dfbe159ce3f577a577d113336bcc))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_4540dfbe159ce3f577a577d113336bcc))
;;;;;;;;;;;;;;;;haseq for Tm_refine_43c986d2cf42f8731bfb915090e09a0b
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__recf; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (iff (Valid (Prims.hasEq Tm_refine_43c986d2cf42f8731bfb915090e09a0b))
(Valid (Prims.hasEq FStar.Stubs.Reflection.V2.Data.term_view)))
:named haseqTm_refine_43c986d2cf42f8731bfb915090e09a0b))
;;;;;;;;;;;;;;;;haseq for Tm_refine_41bb1fe33d2856748d537571528d32a1
;;; Fact-ids: Name FStar.Char.char_of_int; Namespace FStar.Char
(assert (! (iff (Valid (Prims.hasEq Tm_refine_41bb1fe33d2856748d537571528d32a1))
(Valid (Prims.hasEq Prims.nat)))
:named haseqTm_refine_41bb1fe33d2856748d537571528d32a1))
;;;;;;;;;;;;;;;;haseq for Tm_refine_418dc7105fe93def0897ac9652872c5e
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__C_Int__item___0; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (iff (Valid (Prims.hasEq Tm_refine_418dc7105fe93def0897ac9652872c5e))
(Valid (Prims.hasEq FStar.Stubs.Reflection.V2.Data.vconst)))
:named haseqTm_refine_418dc7105fe93def0897ac9652872c5e))
;;;;;;;;;;;;;;;;haseq for Tm_refine_414d0a9f578ab0048252f8c8f552b99f
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_38a73e5144d443b0875e11c634d849b2
;;; Fact-ids: Name FStar.Int.Cast.uint16_to_int32; Namespace FStar.Int.Cast
(assert (! (iff (Valid (Prims.hasEq Tm_refine_38a73e5144d443b0875e11c634d849b2))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_38a73e5144d443b0875e11c634d849b2))
;;;;;;;;;;;;;;;;haseq for Tm_refine_37a793ba5704ebbf15042feb27137572
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_Abs__item__bv; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (iff (Valid (Prims.hasEq Tm_refine_37a793ba5704ebbf15042feb27137572))
(Valid (Prims.hasEq FStar.Stubs.Reflection.V2.Data.term_view)))
:named haseqTm_refine_37a793ba5704ebbf15042feb27137572))
;;;;;;;;;;;;;;;;haseq for Tm_refine_35fb8759ee35d7bf7cf3df6dd7bf565c
;;; Fact-ids: Name MiniParse.Spec.Int.pred_pre; Namespace MiniParse.Spec.Int
(assert (! (iff (Valid (Prims.hasEq Tm_refine_35fb8759ee35d7bf7cf3df6dd7bf565c))
(Valid (Prims.hasEq Prims.nat)))
:named haseqTm_refine_35fb8759ee35d7bf7cf3df6dd7bf565c))
;;;;;;;;;;;;;;;;haseq for Tm_refine_336c863ebf681869395d10a4c152247a
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Builtins.inspect_binder; Namespace FStar.Stubs.Reflection.V2.Builtins
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Builtins.fsti(70,33-70,57); use=FStar.Stubs.Reflection.V2.Builtins.fsti(70,33-70,57)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_336c863ebf681869395d10a4c152247a @x0)))
(Valid (Prims.hasEq FStar.Stubs.Reflection.V2.Data.binder_view)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_336c863ebf681869395d10a4c152247a @x0))))
:qid haseqTm_refine_336c863ebf681869395d10a4c152247a))

:named haseqTm_refine_336c863ebf681869395d10a4c152247a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_33501ba90cf97ecf3695ea84cf87adca
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_Const__item___0; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (iff (Valid (Prims.hasEq Tm_refine_33501ba90cf97ecf3695ea84cf87adca))
(Valid (Prims.hasEq FStar.Stubs.Reflection.V2.Data.term_view)))
:named haseqTm_refine_33501ba90cf97ecf3695ea84cf87adca))
;;;;;;;;;;;;;;;;haseq for Tm_refine_30f8904aa237d24acf9aace65cbaa40d
;;; Fact-ids: Name FStar.Stubs.Tactics.Common.__proj__TacticFailure__item__uu___; Namespace FStar.Stubs.Tactics.Common
(assert (! (iff (Valid (Prims.hasEq Tm_refine_30f8904aa237d24acf9aace65cbaa40d))
(Valid (Prims.hasEq Prims.exn)))
:named haseqTm_refine_30f8904aa237d24acf9aace65cbaa40d))
;;;;;;;;;;;;;;;;haseq for Tm_refine_30f54be659cb3068ff6b4d29fbfd37b9
;;; Fact-ids: Name FStar.Int.Cast.uint8_to_int32; Namespace FStar.Int.Cast
(assert (! (iff (Valid (Prims.hasEq Tm_refine_30f54be659cb3068ff6b4d29fbfd37b9))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_30f54be659cb3068ff6b4d29fbfd37b9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2de20c066034c13bf76e9c0b94f4806c
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,32-117,42); use=Prims.fst(117,32-117,42)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0))))
:qid haseqTm_refine_2de20c066034c13bf76e9c0b94f4806c))

:named haseqTm_refine_2de20c066034c13bf76e9c0b94f4806c))
;;;;;;;;;;;;;;;;haseq for Tm_refine_26a3ca3c291e017bd04ab88ab3f1bd16
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Pat_Constant__item__c; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (iff (Valid (Prims.hasEq Tm_refine_26a3ca3c291e017bd04ab88ab3f1bd16))
(Valid (Prims.hasEq FStar.Stubs.Reflection.V2.Data.pattern)))
:named haseqTm_refine_26a3ca3c291e017bd04ab88ab3f1bd16))
;;;;;;;;;;;;;;;;haseq for Tm_refine_25fe9861b42cf97d961ff4c8f44eb399
;;; Fact-ids: Name FStar.Sealed.Inhabited.sealed; Namespace FStar.Sealed.Inhabited
(assert (! 
;; def=FStar.Sealed.Inhabited.fst(45,4-45,37); use=FStar.Sealed.Inhabited.fst(45,4-45,37)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_25fe9861b42cf97d961ff4c8f44eb399 @x0
@x1)))
(Valid (Prims.hasEq (FStar.Sealed.Inhabited.sealed_ @x0
@x1))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_25fe9861b42cf97d961ff4c8f44eb399 @x0
@x1))))
:qid haseqTm_refine_25fe9861b42cf97d961ff4c8f44eb399))

:named haseqTm_refine_25fe9861b42cf97d961ff4c8f44eb399))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2565e86b1cc6542a4afc6f6409d3347b
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_Match__item__scrutinee; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (iff (Valid (Prims.hasEq Tm_refine_2565e86b1cc6542a4afc6f6409d3347b))
(Valid (Prims.hasEq FStar.Stubs.Reflection.V2.Data.term_view)))
:named haseqTm_refine_2565e86b1cc6542a4afc6f6409d3347b))
;;;;;;;;;;;;;;;;haseq for Tm_refine_20555d4690db1ab7ba8f509bea00b24d
;;; Fact-ids: Name FStar.Int.Cast.int8_to_int32; Namespace FStar.Int.Cast
(assert (! (iff (Valid (Prims.hasEq Tm_refine_20555d4690db1ab7ba8f509bea00b24d))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_20555d4690db1ab7ba8f509bea00b24d))
;;;;;;;;;;;;;;;;haseq for Tm_refine_1ef62970670d75775a601f0b31c2dc27
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedC__item__e; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (iff (Valid (Prims.hasEq Tm_refine_1ef62970670d75775a601f0b31c2dc27))
(Valid (Prims.hasEq FStar.Stubs.Reflection.V2.Data.term_view)))
:named haseqTm_refine_1ef62970670d75775a601f0b31c2dc27))
;;;;;;;;;;;;;;;;haseq for Tm_refine_1a52b06ee8dfc536800a89f6ecee4ecd
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__Tv_UInst__item__v; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (iff (Valid (Prims.hasEq Tm_refine_1a52b06ee8dfc536800a89f6ecee4ecd))
(Valid (Prims.hasEq FStar.Stubs.Reflection.V2.Data.term_view)))
:named haseqTm_refine_1a52b06ee8dfc536800a89f6ecee4ecd))
;;;;;;;;;;;;;;;;haseq for Tm_refine_19e88ca5b68046e66eaf6d879a230cb2
;;; Fact-ids: Name FStar.Int.Cast.uint8_to_uint32; Namespace FStar.Int.Cast
(assert (! (iff (Valid (Prims.hasEq Tm_refine_19e88ca5b68046e66eaf6d879a230cb2))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_19e88ca5b68046e66eaf6d879a230cb2))
;;;;;;;;;;;;;;;;haseq for Tm_refine_1780a0fddfda88c43d203b562c6d3f5b
;;; Fact-ids: Name FStar.Seq.Properties.createL_post; Namespace FStar.Seq.Properties
(assert (! (iff (Valid (Prims.hasEq Tm_refine_1780a0fddfda88c43d203b562c6d3f5b))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_1780a0fddfda88c43d203b562c6d3f5b))
;;;;;;;;;;;;;;;;haseq for Tm_refine_1568b2d9001092df78423ad5031cadd0
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Pat_Cons__item___0; Namespace FStar.Tactics.NamedView
(assert (! (iff (Valid (Prims.hasEq Tm_refine_1568b2d9001092df78423ad5031cadd0))
(Valid (Prims.hasEq FStar.Tactics.NamedView.pattern)))
:named haseqTm_refine_1568b2d9001092df78423ad5031cadd0))
;;;;;;;;;;;;;;;;haseq for Tm_refine_14ce58fa655d913556bc0a15f9deed4c
;;; Fact-ids: Name FStar.Reflection.V2.Derived.mk_arr_ln; Namespace FStar.Reflection.V2.Derived
(assert (! (iff (Valid (Prims.hasEq Tm_refine_14ce58fa655d913556bc0a15f9deed4c))
(Valid (Prims.hasEq (Prims.list FStar.Stubs.Reflection.Types.binder))))
:named haseqTm_refine_14ce58fa655d913556bc0a15f9deed4c))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0fa467ad3d3ad969314aac98bb8e0d1b
;;; Fact-ids: Name FStar.Int.Cast.uint8_to_int16; Namespace FStar.Int.Cast
(assert (! (iff (Valid (Prims.hasEq Tm_refine_0fa467ad3d3ad969314aac98bb8e0d1b))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_0fa467ad3d3ad969314aac98bb8e0d1b))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Prims.unit
Prims.eqtype)
:named function_token_typing_Prims.unit))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.string; Namespace Prims
(assert (! (HasType Prims.string
Prims.eqtype)
:named function_token_typing_Prims.string))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Prims.prop
Tm_type)
:named function_token_typing_Prims.prop))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (HasType Prims.pos
Tm_type)
:named function_token_typing_Prims.pos))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Prims.nat
Tm_type)
:named function_token_typing_Prims.nat))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (HasType Prims.logical
Tm_type)
:named function_token_typing_Prims.logical))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (HasType Prims.l_True
Prims.logical)
:named function_token_typing_Prims.l_True))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (HasType Prims.int
Prims.eqtype)
:named function_token_typing_Prims.int))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.exn; Namespace Prims
(assert (! (HasType Prims.exn
Tm_type)
:named function_token_typing_Prims.exn))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Prims.eqtype
Tm_type)
:named function_token_typing_Prims.eqtype))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (HasType Prims.bool
Prims.eqtype)
:named function_token_typing_Prims.bool))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Tactics.NamedView.term; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.term
Tm_type)
:named function_token_typing_FStar.Tactics.NamedView.term))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Tactics.NamedView.namedv; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.namedv
Tm_type)
:named function_token_typing_FStar.Tactics.NamedView.namedv))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Tactics.NamedView.branch; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.branch
Tm_type)
:named function_token_typing_FStar.Tactics.NamedView.branch))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Stubs.Tactics.Types.proofstate; Namespace FStar.Stubs.Tactics.Types
(assert (! (HasType FStar.Stubs.Tactics.Types.proofstate
Tm_type)
:named function_token_typing_FStar.Stubs.Tactics.Types.proofstate))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Stubs.Syntax.Syntax.match_returns_ascription; Namespace FStar.Stubs.Syntax.Syntax
(assert (! (HasType FStar.Stubs.Syntax.Syntax.match_returns_ascription
Tm_type)
:named function_token_typing_FStar.Stubs.Syntax.Syntax.match_returns_ascription))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.universes; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType FStar.Stubs.Reflection.V2.Data.universes
Tm_type)
:named function_token_typing_FStar.Stubs.Reflection.V2.Data.universes))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.simple_binder; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType FStar.Stubs.Reflection.V2.Data.simple_binder
Tm_type)
:named function_token_typing_FStar.Stubs.Reflection.V2.Data.simple_binder))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.ppname_t; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType FStar.Stubs.Reflection.V2.Data.ppname_t
Tm_type)
:named function_token_typing_FStar.Stubs.Reflection.V2.Data.ppname_t))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.branch; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType FStar.Stubs.Reflection.V2.Data.branch
Tm_type)
:named function_token_typing_FStar.Stubs.Reflection.V2.Data.branch))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.argv; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType FStar.Stubs.Reflection.V2.Data.argv
Tm_type)
:named function_token_typing_FStar.Stubs.Reflection.V2.Data.argv))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.universe; Namespace FStar.Stubs.Reflection.Types
(assert (! (HasType FStar.Stubs.Reflection.Types.universe
Tm_type)
:named function_token_typing_FStar.Stubs.Reflection.Types.universe))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.typ; Namespace FStar.Stubs.Reflection.Types
(assert (! (HasType FStar.Stubs.Reflection.Types.typ
Tm_type)
:named function_token_typing_FStar.Stubs.Reflection.Types.typ))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.term; Namespace FStar.Stubs.Reflection.Types
(assert (! (HasType FStar.Stubs.Reflection.Types.term
Tm_type)
:named function_token_typing_FStar.Stubs.Reflection.Types.term))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.namedv; Namespace FStar.Stubs.Reflection.Types
(assert (! (HasType FStar.Stubs.Reflection.Types.namedv
Tm_type)
:named function_token_typing_FStar.Stubs.Reflection.Types.namedv))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.fv; Namespace FStar.Stubs.Reflection.Types
(assert (! (HasType FStar.Stubs.Reflection.Types.fv
Tm_type)
:named function_token_typing_FStar.Stubs.Reflection.Types.fv))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.env; Namespace FStar.Stubs.Reflection.Types
(assert (! (HasType FStar.Stubs.Reflection.Types.env
Tm_type)
:named function_token_typing_FStar.Stubs.Reflection.Types.env))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.ctx_uvar_and_subst; Namespace FStar.Stubs.Reflection.Types
(assert (! (HasType FStar.Stubs.Reflection.Types.ctx_uvar_and_subst
Tm_type)
:named function_token_typing_FStar.Stubs.Reflection.Types.ctx_uvar_and_subst))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.comp; Namespace FStar.Stubs.Reflection.Types
(assert (! (HasType FStar.Stubs.Reflection.Types.comp
Tm_type)
:named function_token_typing_FStar.Stubs.Reflection.Types.comp))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.bv; Namespace FStar.Stubs.Reflection.Types
(assert (! (HasType FStar.Stubs.Reflection.Types.bv
Tm_type)
:named function_token_typing_FStar.Stubs.Reflection.Types.bv))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.binder; Namespace FStar.Stubs.Reflection.Types
(assert (! (HasType FStar.Stubs.Reflection.Types.binder
Tm_type)
:named function_token_typing_FStar.Stubs.Reflection.Types.binder))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Stubs.Errors.Msg.error_message; Namespace FStar.Stubs.Errors.Msg
(assert (! (HasType FStar.Stubs.Errors.Msg.error_message
Tm_type)
:named function_token_typing_FStar.Stubs.Errors.Msg.error_message))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Range.range; Namespace FStar.Range
(assert (! (HasType FStar.Range.range
Tm_type)
:named function_token_typing_FStar.Range.range))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Range.__range; Namespace FStar.Range
(assert (! (HasType FStar.Range.__range
Tm_type)
:named function_token_typing_FStar.Range.__range))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pprint.document; Namespace FStar.Pprint
(assert (! (HasType FStar.Pprint.document
Tm_type)
:named function_token_typing_FStar.Pprint.document))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! 
;; def=Prims.fst(91,5-91,12); use=Prims.fst(91,5-91,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.trivial)
(is-Prims.T @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.trivial))
:qid fuel_guarded_inversion_Prims.trivial))

:named fuel_guarded_inversion_Prims.trivial))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(614,5-614,9); use=Prims.fst(614,5-614,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(Prims.list @x2))
(or (and (is-Prims.Nil @x1)
(= @x2
(Prims.Nil_a @x1)))
(and (is-Prims.Cons @x1)
(= @x2
(Prims.Cons_a @x1)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(Prims.list @x2)))
:qid fuel_guarded_inversion_Prims.list))

:named fuel_guarded_inversion_Prims.list))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(78,3-78,10); use=FStar.Tactics.NamedView.fsti(78,3-78,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.pattern__Pat_Var__payload)
(is-FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload @x1))
 

:pattern ((HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.pattern__Pat_Var__payload))
:qid fuel_guarded_inversion_FStar.Tactics.NamedView.pattern__Pat_Var__payload))

:named fuel_guarded_inversion_FStar.Tactics.NamedView.pattern__Pat_Var__payload))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(84,3-84,15); use=FStar.Tactics.NamedView.fsti(84,3-84,15)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload)
(is-FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload @x1))
 

:pattern ((HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload))
:qid fuel_guarded_inversion_FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload))

:named fuel_guarded_inversion_FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(65,3-65,15); use=FStar.Tactics.NamedView.fsti(65,3-65,15)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.pattern__Pat_Constant__payload)
(is-FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload @x1))
 

:pattern ((HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.pattern__Pat_Constant__payload))
:qid fuel_guarded_inversion_FStar.Tactics.NamedView.pattern__Pat_Constant__payload))

:named fuel_guarded_inversion_FStar.Tactics.NamedView.pattern__Pat_Constant__payload))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(71,3-71,11); use=FStar.Tactics.NamedView.fsti(71,3-71,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.pattern__Pat_Cons__payload)
(is-FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload @x1))
 

:pattern ((HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.pattern__Pat_Cons__payload))
:qid fuel_guarded_inversion_FStar.Tactics.NamedView.pattern__Pat_Cons__payload))

:named fuel_guarded_inversion_FStar.Tactics.NamedView.pattern__Pat_Cons__payload))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(63,5-63,12); use=FStar.Tactics.NamedView.fsti(63,5-63,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
FStar.Tactics.NamedView.pattern)
(or (is-FStar.Tactics.NamedView.Pat_Constant @x1)
(is-FStar.Tactics.NamedView.Pat_Cons @x1)
(is-FStar.Tactics.NamedView.Pat_Var @x1)
(is-FStar.Tactics.NamedView.Pat_Dot_Term @x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
FStar.Tactics.NamedView.pattern))
:qid fuel_guarded_inversion_FStar.Tactics.NamedView.pattern))

:named fuel_guarded_inversion_FStar.Tactics.NamedView.pattern))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Stubs.Tactics.Result.__result; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Success; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Failed; Namespace FStar.Stubs.Tactics.Result
(assert (! 
;; def=FStar.Stubs.Tactics.Result.fsti(24,10-24,18); use=FStar.Stubs.Tactics.Result.fsti(24,10-24,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(FStar.Stubs.Tactics.Result.__result @x2))
(or (and (is-FStar.Stubs.Tactics.Result.Success @x1)
(= @x2
(FStar.Stubs.Tactics.Result.Success_a @x1)))
(and (is-FStar.Stubs.Tactics.Result.Failed @x1)
(= @x2
(FStar.Stubs.Tactics.Result.Failed_a @x1)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(FStar.Stubs.Tactics.Result.__result @x2)))
:qid fuel_guarded_inversion_FStar.Stubs.Tactics.Result.__result))

:named fuel_guarded_inversion_FStar.Stubs.Tactics.Result.__result))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(27,5-27,11); use=FStar.Stubs.Reflection.V2.Data.fsti(27,5-27,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
FStar.Stubs.Reflection.V2.Data.vconst)
(or (is-FStar.Stubs.Reflection.V2.Data.C_Unit @x1)
(is-FStar.Stubs.Reflection.V2.Data.C_Int @x1)
(is-FStar.Stubs.Reflection.V2.Data.C_True @x1)
(is-FStar.Stubs.Reflection.V2.Data.C_False @x1)
(is-FStar.Stubs.Reflection.V2.Data.C_String @x1)
(is-FStar.Stubs.Reflection.V2.Data.C_Range @x1)
(is-FStar.Stubs.Reflection.V2.Data.C_Reify @x1)
(is-FStar.Stubs.Reflection.V2.Data.C_Reflect @x1)
(is-FStar.Stubs.Reflection.V2.Data.C_Real @x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
FStar.Stubs.Reflection.V2.Data.vconst))
:qid fuel_guarded_inversion_FStar.Stubs.Reflection.V2.Data.vconst))

:named fuel_guarded_inversion_FStar.Stubs.Reflection.V2.Data.vconst))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(140,5-140,14); use=FStar.Stubs.Reflection.V2.Data.fsti(140,5-140,14)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
FStar.Stubs.Reflection.V2.Data.term_view)
(or (is-FStar.Stubs.Reflection.V2.Data.Tv_Var @x1)
(is-FStar.Stubs.Reflection.V2.Data.Tv_BVar @x1)
(is-FStar.Stubs.Reflection.V2.Data.Tv_FVar @x1)
(is-FStar.Stubs.Reflection.V2.Data.Tv_UInst @x1)
(is-FStar.Stubs.Reflection.V2.Data.Tv_App @x1)
(is-FStar.Stubs.Reflection.V2.Data.Tv_Abs @x1)
(is-FStar.Stubs.Reflection.V2.Data.Tv_Arrow @x1)
(is-FStar.Stubs.Reflection.V2.Data.Tv_Type @x1)
(is-FStar.Stubs.Reflection.V2.Data.Tv_Refine @x1)
(is-FStar.Stubs.Reflection.V2.Data.Tv_Const @x1)
(is-FStar.Stubs.Reflection.V2.Data.Tv_Uvar @x1)
(is-FStar.Stubs.Reflection.V2.Data.Tv_Let @x1)
(is-FStar.Stubs.Reflection.V2.Data.Tv_Match @x1)
(is-FStar.Stubs.Reflection.V2.Data.Tv_AscribedT @x1)
(is-FStar.Stubs.Reflection.V2.Data.Tv_AscribedC @x1)
(is-FStar.Stubs.Reflection.V2.Data.Tv_Unknown @x1)
(is-FStar.Stubs.Reflection.V2.Data.Tv_Unsupp @x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
FStar.Stubs.Reflection.V2.Data.term_view))
:qid fuel_guarded_inversion_FStar.Stubs.Reflection.V2.Data.term_view))

:named fuel_guarded_inversion_FStar.Stubs.Reflection.V2.Data.term_view))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.pattern; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Constant; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Cons; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(44,5-44,12); use=FStar.Stubs.Reflection.V2.Data.fsti(44,5-44,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
FStar.Stubs.Reflection.V2.Data.pattern)
(or (is-FStar.Stubs.Reflection.V2.Data.Pat_Constant @x1)
(is-FStar.Stubs.Reflection.V2.Data.Pat_Cons @x1)
(is-FStar.Stubs.Reflection.V2.Data.Pat_Var @x1)
(is-FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term @x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
FStar.Stubs.Reflection.V2.Data.pattern))
:qid fuel_guarded_inversion_FStar.Stubs.Reflection.V2.Data.pattern))

:named fuel_guarded_inversion_FStar.Stubs.Reflection.V2.Data.pattern))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.namedv_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Mknamedv_view; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(86,5-86,16); use=FStar.Stubs.Reflection.V2.Data.fsti(86,5-86,16)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.namedv_view)
(is-FStar.Stubs.Reflection.V2.Data.Mknamedv_view @x1))
 

:pattern ((HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.namedv_view))
:qid fuel_guarded_inversion_FStar.Stubs.Reflection.V2.Data.namedv_view))

:named fuel_guarded_inversion_FStar.Stubs.Reflection.V2.Data.namedv_view))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.binder_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Mkbinder_view; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(103,5-103,16); use=FStar.Stubs.Reflection.V2.Data.fsti(103,5-103,16)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.binder_view)
(is-FStar.Stubs.Reflection.V2.Data.Mkbinder_view @x1))
 

:pattern ((HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.binder_view))
:qid fuel_guarded_inversion_FStar.Stubs.Reflection.V2.Data.binder_view))

:named fuel_guarded_inversion_FStar.Stubs.Reflection.V2.Data.binder_view))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.aqualv; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Implicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Explicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Equality; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Meta; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(76,5-76,11); use=FStar.Stubs.Reflection.V2.Data.fsti(76,5-76,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
FStar.Stubs.Reflection.V2.Data.aqualv)
(or (is-FStar.Stubs.Reflection.V2.Data.Q_Implicit @x1)
(is-FStar.Stubs.Reflection.V2.Data.Q_Explicit @x1)
(is-FStar.Stubs.Reflection.V2.Data.Q_Equality @x1)
(is-FStar.Stubs.Reflection.V2.Data.Q_Meta @x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
FStar.Stubs.Reflection.V2.Data.aqualv))
:qid fuel_guarded_inversion_FStar.Stubs.Reflection.V2.Data.aqualv))

:named fuel_guarded_inversion_FStar.Stubs.Reflection.V2.Data.aqualv))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(730,5-730,11); use=FStar.Pervasives.fsti(730,5-730,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(FStar.Pervasives.either @x2
@x3))
(or (and (is-FStar.Pervasives.Inl @x1)
(= @x2
(FStar.Pervasives.Inl_a @x1))
(= @x3
(FStar.Pervasives.Inl_b @x1)))
(and (is-FStar.Pervasives.Inr @x1)
(= @x2
(FStar.Pervasives.Inr_a @x1))
(= @x3
(FStar.Pervasives.Inr_b @x1)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(FStar.Pervasives.either @x2
@x3)))
:qid fuel_guarded_inversion_FStar.Pervasives.either))

:named fuel_guarded_inversion_FStar.Pervasives.either))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,5-65,11); use=FStar.Pervasives.Native.fst(65,5-65,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple3 @x2
@x3
@x4))
(and (is-FStar.Pervasives.Native.Mktuple3 @x1)
(= @x2
(FStar.Pervasives.Native.Mktuple3__a @x1))
(= @x3
(FStar.Pervasives.Native.Mktuple3__b @x1))
(= @x4
(FStar.Pervasives.Native.Mktuple3__c @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple3 @x2
@x3
@x4)))
:qid fuel_guarded_inversion_FStar.Pervasives.Native.tuple3))

:named fuel_guarded_inversion_FStar.Pervasives.Native.tuple3))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 @x2
@x3))
(and (is-FStar.Pervasives.Native.Mktuple2 @x1)
(= @x2
(FStar.Pervasives.Native.Mktuple2__a @x1))
(= @x3
(FStar.Pervasives.Native.Mktuple2__b @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 @x2
@x3)))
:qid fuel_guarded_inversion_FStar.Pervasives.Native.tuple2))

:named fuel_guarded_inversion_FStar.Pervasives.Native.tuple2))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(FStar.Pervasives.Native.option @x2))
(or (and (is-FStar.Pervasives.Native.None @x1)
(= @x2
(FStar.Pervasives.Native.None_a @x1)))
(and (is-FStar.Pervasives.Native.Some @x1)
(= @x2
(FStar.Pervasives.Native.Some_a @x1)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(FStar.Pervasives.Native.option @x2)))
:qid fuel_guarded_inversion_FStar.Pervasives.Native.option))

:named fuel_guarded_inversion_FStar.Pervasives.Native.option))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (= 319
(Term_constr_id Prims.list@tok))
:named fresh_token_Prims.list@tok))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Stubs.Tactics.Result.__result; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Success; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Failed; Namespace FStar.Stubs.Tactics.Result
(assert (! (= 102
(Term_constr_id FStar.Stubs.Tactics.Result.__result@tok))
:named fresh_token_FStar.Stubs.Tactics.Result.__result@tok))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! (= 403
(Term_constr_id FStar.Pervasives.either@tok))
:named fresh_token_FStar.Pervasives.either@tok))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (= 147
(Term_constr_id FStar.Pervasives.Native.tuple3@tok))
:named fresh_token_FStar.Pervasives.Native.tuple3@tok))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (= 126
(Term_constr_id FStar.Pervasives.Native.tuple2@tok))
:named fresh_token_FStar.Pervasives.Native.tuple2@tok))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (= 102
(Term_constr_id FStar.Pervasives.Native.option@tok))
:named fresh_token_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: Prims.pow2
;;; Fact-ids: Name Prims.pow2; Namespace Prims
(assert (! 
;; def=Prims.fst(708,8-708,12); use=Prims.fst(708,8-708,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasType @x1
Prims.nat)
(= (Prims.pow2.fuel_instrumented (SFuel @u0)
@x1)
(let ((@lb2 @x1))
(ite (= @lb2
(BoxInt 0))
(BoxInt 1)
(Prims.op_Multiply (BoxInt 2)
(Prims.pow2.fuel_instrumented @u0
(Prims.op_Subtraction @x1
(BoxInt 1))))))))
 :weight 0


:pattern ((Prims.pow2.fuel_instrumented (SFuel @u0)
@x1))
:qid equation_with_fuel_Prims.pow2.fuel_instrumented))

:named equation_with_fuel_Prims.pow2.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: FStar.Reflection.V2.Derived.mk_app
;;; Fact-ids: Name FStar.Reflection.V2.Derived.mk_app; Namespace FStar.Reflection.V2.Derived
(assert (! 
;; def=FStar.Reflection.V2.Derived.fst(91,8-91,14); use=FStar.Reflection.V2.Derived.fst(91,8-91,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
FStar.Stubs.Reflection.Types.term)
(HasType @x2
(Prims.list FStar.Stubs.Reflection.V2.Data.argv)))
(= (FStar.Reflection.V2.Derived.mk_app.fuel_instrumented (SFuel @u0)
@x1
@x2)
(let ((@lb3 @x2))
(ite (is-Prims.Nil @lb3)
@x1
(ite (is-Prims.Cons @lb3)
(FStar.Reflection.V2.Derived.mk_app.fuel_instrumented @u0
(FStar.Stubs.Reflection.V2.Builtins.pack_ln (FStar.Stubs.Reflection.V2.Data.Tv_App @x1
(Prims.Cons_hd @lb3)))
(Prims.Cons_tl @lb3))
Tm_unit)))))
 :weight 0


:pattern ((FStar.Reflection.V2.Derived.mk_app.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid equation_with_fuel_FStar.Reflection.V2.Derived.mk_app.fuel_instrumented))

:named equation_with_fuel_FStar.Reflection.V2.Derived.mk_app.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: FStar.List.Tot.Base.length
;;; Fact-ids: Name FStar.List.Tot.Base.length; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(74,8-74,14); use=FStar.List.Tot.Base.fst(74,8-74,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(Prims.list @x1)))
(= (FStar.List.Tot.Base.length.fuel_instrumented (SFuel @u0)
@x1
@x2)
(let ((@lb3 @x2))
(ite (is-Prims.Nil @lb3)
(BoxInt 0)
(ite (is-Prims.Cons @lb3)
(Prims.op_Addition (BoxInt 1)
(FStar.List.Tot.Base.length.fuel_instrumented @u0
@x1
(Prims.Cons_tl @lb3)))
Tm_unit)))))
 :weight 0


:pattern ((FStar.List.Tot.Base.length.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid equation_with_fuel_FStar.List.Tot.Base.length.fuel_instrumented))

:named equation_with_fuel_FStar.List.Tot.Base.length.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for Prims.subtype_of
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (Prims.subtype_of @x0
@x1))

;; def=Prims.fst(291,31-291,60); use=Prims.fst(291,31-291,60)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x0)
(HasType @x2
@x1))
 
;;no pats
:qid equation_Prims.subtype_of.1))
)
 

:pattern ((Prims.subtype_of @x0
@x1))
:qid equation_Prims.subtype_of))

:named equation_Prims.subtype_of))
;;;;;;;;;;;;;;;;Equation for Prims.squash
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,5-117,11); use=Prims.fst(117,5-117,11)
(forall ((@x0 Term))
 (! (= (Prims.squash @x0)
(Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0))
 

:pattern ((Prims.squash @x0))
:qid equation_Prims.squash))

:named equation_Prims.squash))
;;;;;;;;;;;;;;;;Equation for Prims.prop
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (= Prims.prop
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf)
:named equation_Prims.prop))
;;;;;;;;;;;;;;;;Equation for Prims.pos
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (= Prims.pos
Tm_refine_774ba3f728d91ead8ef40be66c9802e5)
:named equation_Prims.pos))
;;;;;;;;;;;;;;;;Equation for Prims.nat
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (= Prims.nat
Tm_refine_542f9d4f129664613f2483a6c88bc7c2)
:named equation_Prims.nat))
;;;;;;;;;;;;;;;;Equation for Prims.logical
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (= Prims.logical
Tm_type)
:named equation_Prims.logical))
;;;;;;;;;;;;;;;;Equation for Prims.l_True
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (= Prims.l_True
(Prims.squash Prims.trivial))
:named equation_Prims.l_True))
;;;;;;;;;;;;;;;;Equation for Prims.eqtype
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (= Prims.eqtype
Tm_refine_414d0a9f578ab0048252f8c8f552b99f)
:named equation_Prims.eqtype))
;;;;;;;;;;;;;;;;Equation for FStar.UInt.size
;;; Fact-ids: Name FStar.UInt.size; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(50,4-50,8); use=FStar.UInt.fsti(50,4-50,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.UInt.size @x0
@x1)
(Prims.b2t (FStar.UInt.fits @x0
@x1)))
 

:pattern ((FStar.UInt.size @x0
@x1))
:qid equation_FStar.UInt.size))

:named equation_FStar.UInt.size))
;;;;;;;;;;;;;;;;Equation for FStar.UInt.min_int
;;; Fact-ids: Name FStar.UInt.min_int; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(47,4-47,11); use=FStar.UInt.fsti(47,4-47,11)
(forall ((@x0 Term))
 (! (= (FStar.UInt.min_int @x0)
(BoxInt 0))
 

:pattern ((FStar.UInt.min_int @x0))
:qid equation_FStar.UInt.min_int))

:named equation_FStar.UInt.min_int))
;;;;;;;;;;;;;;;;Equation for FStar.UInt.max_int
;;; Fact-ids: Name FStar.UInt.max_int; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(46,4-46,11); use=FStar.UInt.fsti(46,4-46,11)
(forall ((@x0 Term))
 (! (= (FStar.UInt.max_int @x0)
(Prims.op_Subtraction (Prims.pow2 @x0)
(BoxInt 1)))
 

:pattern ((FStar.UInt.max_int @x0))
:qid equation_FStar.UInt.max_int))

:named equation_FStar.UInt.max_int))
;;;;;;;;;;;;;;;;Equation for FStar.UInt.fits
;;; Fact-ids: Name FStar.UInt.fits; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(49,4-49,8); use=FStar.UInt.fsti(49,4-49,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.UInt.fits @x0
@x1)
(Prims.op_AmpAmp (Prims.op_LessThanOrEqual (FStar.UInt.min_int @x1)
@x0)
(Prims.op_LessThanOrEqual @x0
(FStar.UInt.max_int @x1))))
 

:pattern ((FStar.UInt.fits @x0
@x1))
:qid equation_FStar.UInt.fits))

:named equation_FStar.UInt.fits))
;;;;;;;;;;;;;;;;Equation for FStar.Tactics.NamedView.term
;;; Fact-ids: Name FStar.Tactics.NamedView.term; Namespace FStar.Tactics.NamedView
(assert (! (= FStar.Tactics.NamedView.term
FStar.Stubs.Reflection.Types.term)
:named equation_FStar.Tactics.NamedView.term))
;;;;;;;;;;;;;;;;Equation for FStar.Tactics.NamedView.namedv
;;; Fact-ids: Name FStar.Tactics.NamedView.namedv; Namespace FStar.Tactics.NamedView
(assert (! (= FStar.Tactics.NamedView.namedv
FStar.Stubs.Reflection.V2.Data.namedv_view)
:named equation_FStar.Tactics.NamedView.namedv))
;;;;;;;;;;;;;;;;Equation for FStar.Tactics.NamedView.branch
;;; Fact-ids: Name FStar.Tactics.NamedView.branch; Namespace FStar.Tactics.NamedView
(assert (! (= FStar.Tactics.NamedView.branch
(FStar.Pervasives.Native.tuple2 FStar.Tactics.NamedView.pattern
FStar.Tactics.NamedView.term))
:named equation_FStar.Tactics.NamedView.branch))
;;;;;;;;;;;;;;;;Equation for FStar.Stubs.Syntax.Syntax.match_returns_ascription
;;; Fact-ids: Name FStar.Stubs.Syntax.Syntax.match_returns_ascription; Namespace FStar.Stubs.Syntax.Syntax
(assert (! (= FStar.Stubs.Syntax.Syntax.match_returns_ascription
(FStar.Pervasives.Native.tuple2 FStar.Stubs.Reflection.Types.binder
(FStar.Pervasives.Native.tuple3 (FStar.Pervasives.either FStar.Stubs.Reflection.Types.term
FStar.Stubs.Reflection.Types.comp)
(FStar.Pervasives.Native.option FStar.Stubs.Reflection.Types.term)
Prims.bool)))
:named equation_FStar.Stubs.Syntax.Syntax.match_returns_ascription))
;;;;;;;;;;;;;;;;Equation for FStar.Stubs.Reflection.V2.Data.universes
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.universes; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (= FStar.Stubs.Reflection.V2.Data.universes
(Prims.list FStar.Stubs.Reflection.Types.universe))
:named equation_FStar.Stubs.Reflection.V2.Data.universes))
;;;;;;;;;;;;;;;;Equation for FStar.Stubs.Reflection.V2.Data.simple_binder
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.simple_binder; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (= FStar.Stubs.Reflection.V2.Data.simple_binder
Tm_refine_a8284b5e442b1496d78105f043903ddc)
:named equation_FStar.Stubs.Reflection.V2.Data.simple_binder))
;;;;;;;;;;;;;;;;Equation for FStar.Stubs.Reflection.V2.Data.ppname_t
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.ppname_t; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (= FStar.Stubs.Reflection.V2.Data.ppname_t
(FStar.Sealed.Inhabited.sealed Prims.string
(BoxString (FString_const 4))))
:named equation_FStar.Stubs.Reflection.V2.Data.ppname_t))
;;;;;;;;;;;;;;;;Equation for FStar.Stubs.Reflection.V2.Data.branch
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.branch; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (= FStar.Stubs.Reflection.V2.Data.branch
(FStar.Pervasives.Native.tuple2 FStar.Stubs.Reflection.V2.Data.pattern
FStar.Stubs.Reflection.Types.term))
:named equation_FStar.Stubs.Reflection.V2.Data.branch))
;;;;;;;;;;;;;;;;Equation for FStar.Stubs.Reflection.V2.Data.argv
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.argv; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (= FStar.Stubs.Reflection.V2.Data.argv
(FStar.Pervasives.Native.tuple2 FStar.Stubs.Reflection.Types.term
FStar.Stubs.Reflection.V2.Data.aqualv))
:named equation_FStar.Stubs.Reflection.V2.Data.argv))
;;;;;;;;;;;;;;;;Equation for FStar.Stubs.Reflection.Types.typ
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.typ; Namespace FStar.Stubs.Reflection.Types
(assert (! (= FStar.Stubs.Reflection.Types.typ
FStar.Stubs.Reflection.Types.term)
:named equation_FStar.Stubs.Reflection.Types.typ))
;;;;;;;;;;;;;;;;Equation for FStar.Stubs.Reflection.Types.name
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.name; Namespace FStar.Stubs.Reflection.Types
(assert (! 
;; def=FStar.Stubs.Reflection.Types.fsti(37,5-37,9); use=FStar.Stubs.Reflection.Types.fsti(37,5-37,9)
(forall ((@u0 Dummy_sort))
 (! (= 
;; def=FStar.Stubs.Reflection.Types.fsti(37,5-37,9); use=FStar.Stubs.Reflection.Types.fsti(37,5-37,9)
(FStar.Stubs.Reflection.Types.name @u0)

(Prims.list Prims.string))
 

:pattern (
;; def=FStar.Stubs.Reflection.Types.fsti(37,5-37,9); use=FStar.Stubs.Reflection.Types.fsti(37,5-37,9)
(FStar.Stubs.Reflection.Types.name @u0)
)
:qid equation_FStar.Stubs.Reflection.Types.name))

:named equation_FStar.Stubs.Reflection.Types.name))
;;;;;;;;;;;;;;;;Equation for FStar.Stubs.Errors.Msg.error_message
;;; Fact-ids: Name FStar.Stubs.Errors.Msg.error_message; Namespace FStar.Stubs.Errors.Msg
(assert (! (= FStar.Stubs.Errors.Msg.error_message
(Prims.list FStar.Pprint.document))
:named equation_FStar.Stubs.Errors.Msg.error_message))
;;;;;;;;;;;;;;;;Equation for FStar.Sealed.Inhabited.sealed_
;;; Fact-ids: Name FStar.Sealed.Inhabited.sealed_; Namespace FStar.Sealed.Inhabited
(assert (! 
;; def=FStar.Sealed.Inhabited.fst(30,4-30,11); use=FStar.Sealed.Inhabited.fst(30,4-30,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Sealed.Inhabited.sealed_ @x0
@x1)
(FStar.Sealed.sealed @x0))
 

:pattern ((FStar.Sealed.Inhabited.sealed_ @x0
@x1))
:qid equation_FStar.Sealed.Inhabited.sealed_))

:named equation_FStar.Sealed.Inhabited.sealed_))
;;;;;;;;;;;;;;;;Equation for FStar.Sealed.Inhabited.sealed
;;; Fact-ids: Name FStar.Sealed.Inhabited.sealed; Namespace FStar.Sealed.Inhabited
(assert (! 
;; def=FStar.Sealed.Inhabited.fst(42,4-42,10); use=FStar.Sealed.Inhabited.fst(42,4-42,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Sealed.Inhabited.sealed @x0
@x1)
(Tm_refine_25fe9861b42cf97d961ff4c8f44eb399 @x0
@x1))
 

:pattern ((FStar.Sealed.Inhabited.sealed @x0
@x1))
:qid equation_FStar.Sealed.Inhabited.sealed))

:named equation_FStar.Sealed.Inhabited.sealed))
;;;;;;;;;;;;;;;;Equation for FStar.Sealed.Inhabited.seal
;;; Fact-ids: Name FStar.Sealed.Inhabited.seal; Namespace FStar.Sealed.Inhabited
(assert (! 
;; def=FStar.Sealed.Inhabited.fst(48,4-48,8); use=FStar.Sealed.Inhabited.fst(48,4-48,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Sealed.Inhabited.seal @x0
@x1
@x2)
(FStar.Sealed.seal @x0
@x2))
 

:pattern ((FStar.Sealed.Inhabited.seal @x0
@x1
@x2))
:qid equation_FStar.Sealed.Inhabited.seal))

:named equation_FStar.Sealed.Inhabited.seal))
;;;;;;;;;;;;;;;;Equation for FStar.Sealed.Inhabited.is_sealed
;;; Fact-ids: Name FStar.Sealed.Inhabited.is_sealed; Namespace FStar.Sealed.Inhabited
(assert (! 
;; def=FStar.Sealed.Inhabited.fst(36,4-36,13); use=FStar.Sealed.Inhabited.fst(36,4-36,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Sealed.Inhabited.is_sealed @x0
@x1
@x2)
Prims.l_True)
 

:pattern ((FStar.Sealed.Inhabited.is_sealed @x0
@x1
@x2))
:qid equation_FStar.Sealed.Inhabited.is_sealed))

:named equation_FStar.Sealed.Inhabited.is_sealed))
;;;;;;;;;;;;;;;;Equation for FStar.Range.range
;;; Fact-ids: Name FStar.Range.range; Namespace FStar.Range
(assert (! (= FStar.Range.range
(FStar.Sealed.sealed FStar.Range.__range))
:named equation_FStar.Range.range))
;;;;;;;;;;;;;;;;Equation for FStar.Int.size
;;; Fact-ids: Name FStar.Int.size; Namespace FStar.Int
(assert (! 
;; def=FStar.Int.fsti(45,4-45,8); use=FStar.Int.fsti(45,4-45,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Int.size @x0
@x1)
(Prims.b2t (FStar.Int.fits @x0
@x1)))
 

:pattern ((FStar.Int.size @x0
@x1))
:qid equation_FStar.Int.size))

:named equation_FStar.Int.size))
;;;;;;;;;;;;;;;;Equation for FStar.Int.min_int
;;; Fact-ids: Name FStar.Int.min_int; Namespace FStar.Int
(assert (! 
;; def=FStar.Int.fsti(42,4-42,11); use=FStar.Int.fsti(42,4-42,11)
(forall ((@x0 Term))
 (! (= (FStar.Int.min_int @x0)
(Prims.op_Minus (Prims.pow2 (Prims.op_Subtraction @x0
(BoxInt 1)))))
 

:pattern ((FStar.Int.min_int @x0))
:qid equation_FStar.Int.min_int))

:named equation_FStar.Int.min_int))
;;;;;;;;;;;;;;;;Equation for FStar.Int.max_int
;;; Fact-ids: Name FStar.Int.max_int; Namespace FStar.Int
(assert (! 
;; def=FStar.Int.fsti(41,4-41,11); use=FStar.Int.fsti(41,4-41,11)
(forall ((@x0 Term))
 (! (= (FStar.Int.max_int @x0)
(Prims.op_Subtraction (Prims.pow2 (Prims.op_Subtraction @x0
(BoxInt 1)))
(BoxInt 1)))
 

:pattern ((FStar.Int.max_int @x0))
:qid equation_FStar.Int.max_int))

:named equation_FStar.Int.max_int))
;;;;;;;;;;;;;;;;Equation for FStar.Int.fits
;;; Fact-ids: Name FStar.Int.fits; Namespace FStar.Int
(assert (! 
;; def=FStar.Int.fsti(44,4-44,8); use=FStar.Int.fsti(44,4-44,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Int.fits @x0
@x1)
(Prims.op_AmpAmp (Prims.op_LessThanOrEqual (FStar.Int.min_int @x1)
@x0)
(Prims.op_LessThanOrEqual @x0
(FStar.Int.max_int @x1))))
 

:pattern ((FStar.Int.fits @x0
@x1))
:qid equation_FStar.Int.fits))

:named equation_FStar.Int.fits))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (= Prims.T@tok
Prims.T)
:named equality_tok_Prims.T@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (= FStar.Stubs.Reflection.V2.Data.Tv_Unsupp@tok
FStar.Stubs.Reflection.V2.Data.Tv_Unsupp)
:named equality_tok_FStar.Stubs.Reflection.V2.Data.Tv_Unsupp@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (= FStar.Stubs.Reflection.V2.Data.Tv_Unknown@tok
FStar.Stubs.Reflection.V2.Data.Tv_Unknown)
:named equality_tok_FStar.Stubs.Reflection.V2.Data.Tv_Unknown@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.aqualv; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Implicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Explicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Equality; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Meta; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (= FStar.Stubs.Reflection.V2.Data.Q_Implicit@tok
FStar.Stubs.Reflection.V2.Data.Q_Implicit)
:named equality_tok_FStar.Stubs.Reflection.V2.Data.Q_Implicit@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.aqualv; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Implicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Explicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Equality; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Meta; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (= FStar.Stubs.Reflection.V2.Data.Q_Explicit@tok
FStar.Stubs.Reflection.V2.Data.Q_Explicit)
:named equality_tok_FStar.Stubs.Reflection.V2.Data.Q_Explicit@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.aqualv; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Implicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Explicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Equality; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Meta; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (= FStar.Stubs.Reflection.V2.Data.Q_Equality@tok
FStar.Stubs.Reflection.V2.Data.Q_Equality)
:named equality_tok_FStar.Stubs.Reflection.V2.Data.Q_Equality@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (= FStar.Stubs.Reflection.V2.Data.C_Unit@tok
FStar.Stubs.Reflection.V2.Data.C_Unit)
:named equality_tok_FStar.Stubs.Reflection.V2.Data.C_Unit@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (= FStar.Stubs.Reflection.V2.Data.C_True@tok
FStar.Stubs.Reflection.V2.Data.C_True)
:named equality_tok_FStar.Stubs.Reflection.V2.Data.C_True@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (= FStar.Stubs.Reflection.V2.Data.C_Reify@tok
FStar.Stubs.Reflection.V2.Data.C_Reify)
:named equality_tok_FStar.Stubs.Reflection.V2.Data.C_Reify@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (= FStar.Stubs.Reflection.V2.Data.C_False@tok
FStar.Stubs.Reflection.V2.Data.C_False)
:named equality_tok_FStar.Stubs.Reflection.V2.Data.C_False@tok))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name Prims.uu___is_Nil; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.uu___is_Nil @x0
@x1)
(BoxBool (is-Prims.Nil @x1)))
 

:pattern ((Prims.uu___is_Nil @x0
@x1))
:qid disc_equation_Prims.Nil))

:named disc_equation_Prims.Nil))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name Prims.uu___is_Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.uu___is_Cons @x0
@x1)
(BoxBool (is-Prims.Cons @x1)))
 

:pattern ((Prims.uu___is_Cons @x0
@x1))
:qid disc_equation_Prims.Cons))

:named disc_equation_Prims.Cons))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Pat_Var; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(78,3-78,10); use=FStar.Tactics.NamedView.fsti(78,3-78,10)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.uu___is_Pat_Var @x0)
(BoxBool (is-FStar.Tactics.NamedView.Pat_Var @x0)))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Pat_Var @x0))
:qid disc_equation_FStar.Tactics.NamedView.Pat_Var))

:named disc_equation_FStar.Tactics.NamedView.Pat_Var))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(84,3-84,15); use=FStar.Tactics.NamedView.fsti(84,3-84,15)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.uu___is_Pat_Dot_Term @x0)
(BoxBool (is-FStar.Tactics.NamedView.Pat_Dot_Term @x0)))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Pat_Dot_Term @x0))
:qid disc_equation_FStar.Tactics.NamedView.Pat_Dot_Term))

:named disc_equation_FStar.Tactics.NamedView.Pat_Dot_Term))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Pat_Constant; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(65,3-65,15); use=FStar.Tactics.NamedView.fsti(65,3-65,15)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.uu___is_Pat_Constant @x0)
(BoxBool (is-FStar.Tactics.NamedView.Pat_Constant @x0)))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Pat_Constant @x0))
:qid disc_equation_FStar.Tactics.NamedView.Pat_Constant))

:named disc_equation_FStar.Tactics.NamedView.Pat_Constant))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Pat_Cons; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(71,3-71,11); use=FStar.Tactics.NamedView.fsti(71,3-71,11)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.uu___is_Pat_Cons @x0)
(BoxBool (is-FStar.Tactics.NamedView.Pat_Cons @x0)))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Pat_Cons @x0))
:qid disc_equation_FStar.Tactics.NamedView.Pat_Cons))

:named disc_equation_FStar.Tactics.NamedView.Pat_Cons))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Stubs.Tactics.Common.uu___is_TacticFailure; Namespace FStar.Stubs.Tactics.Common
(assert (! 
;; def=FStar.Stubs.Tactics.Common.fsti(12,10-12,23); use=FStar.Stubs.Tactics.Common.fsti(12,10-12,23)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Tactics.Common.uu___is_TacticFailure @x0)
(BoxBool (is-FStar.Stubs.Tactics.Common.TacticFailure @x0)))
 

:pattern ((FStar.Stubs.Tactics.Common.uu___is_TacticFailure @x0))
:qid disc_equation_FStar.Stubs.Tactics.Common.TacticFailure))

:named disc_equation_FStar.Stubs.Tactics.Common.TacticFailure))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(141,4-141,10); use=FStar.Stubs.Reflection.V2.Data.fsti(141,4-141,10)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Var @x0)
(BoxBool (is-FStar.Stubs.Reflection.V2.Data.Tv_Var @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Var @x0))
:qid disc_equation_FStar.Stubs.Reflection.V2.Data.Tv_Var))

:named disc_equation_FStar.Stubs.Reflection.V2.Data.Tv_Var))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(151,4-151,11); use=FStar.Stubs.Reflection.V2.Data.fsti(151,4-151,11)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Uvar @x0)
(BoxBool (is-FStar.Stubs.Reflection.V2.Data.Tv_Uvar @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Uvar @x0))
:qid disc_equation_FStar.Stubs.Reflection.V2.Data.Tv_Uvar))

:named disc_equation_FStar.Stubs.Reflection.V2.Data.Tv_Uvar))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(144,4-144,12); use=FStar.Stubs.Reflection.V2.Data.fsti(144,4-144,12)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_UInst @x0)
(BoxBool (is-FStar.Stubs.Reflection.V2.Data.Tv_UInst @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Tv_UInst @x0))
:qid disc_equation_FStar.Stubs.Reflection.V2.Data.Tv_UInst))

:named disc_equation_FStar.Stubs.Reflection.V2.Data.Tv_UInst))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(148,4-148,11); use=FStar.Stubs.Reflection.V2.Data.fsti(148,4-148,11)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Type @x0)
(BoxBool (is-FStar.Stubs.Reflection.V2.Data.Tv_Type @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Type @x0))
:qid disc_equation_FStar.Stubs.Reflection.V2.Data.Tv_Type))

:named disc_equation_FStar.Stubs.Reflection.V2.Data.Tv_Type))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(149,4-149,13); use=FStar.Stubs.Reflection.V2.Data.fsti(149,4-149,13)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Refine @x0)
(BoxBool (is-FStar.Stubs.Reflection.V2.Data.Tv_Refine @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Refine @x0))
:qid disc_equation_FStar.Stubs.Reflection.V2.Data.Tv_Refine))

:named disc_equation_FStar.Stubs.Reflection.V2.Data.Tv_Refine))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(153,4-153,12); use=FStar.Stubs.Reflection.V2.Data.fsti(153,4-153,12)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Match @x0)
(BoxBool (is-FStar.Stubs.Reflection.V2.Data.Tv_Match @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Match @x0))
:qid disc_equation_FStar.Stubs.Reflection.V2.Data.Tv_Match))

:named disc_equation_FStar.Stubs.Reflection.V2.Data.Tv_Match))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(152,4-152,10); use=FStar.Stubs.Reflection.V2.Data.fsti(152,4-152,10)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Let @x0)
(BoxBool (is-FStar.Stubs.Reflection.V2.Data.Tv_Let @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Let @x0))
:qid disc_equation_FStar.Stubs.Reflection.V2.Data.Tv_Let))

:named disc_equation_FStar.Stubs.Reflection.V2.Data.Tv_Let))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(143,4-143,11); use=FStar.Stubs.Reflection.V2.Data.fsti(143,4-143,11)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_FVar @x0)
(BoxBool (is-FStar.Stubs.Reflection.V2.Data.Tv_FVar @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Tv_FVar @x0))
:qid disc_equation_FStar.Stubs.Reflection.V2.Data.Tv_FVar))

:named disc_equation_FStar.Stubs.Reflection.V2.Data.Tv_FVar))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(150,4-150,12); use=FStar.Stubs.Reflection.V2.Data.fsti(150,4-150,12)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Const @x0)
(BoxBool (is-FStar.Stubs.Reflection.V2.Data.Tv_Const @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Const @x0))
:qid disc_equation_FStar.Stubs.Reflection.V2.Data.Tv_Const))

:named disc_equation_FStar.Stubs.Reflection.V2.Data.Tv_Const))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(142,4-142,11); use=FStar.Stubs.Reflection.V2.Data.fsti(142,4-142,11)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_BVar @x0)
(BoxBool (is-FStar.Stubs.Reflection.V2.Data.Tv_BVar @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Tv_BVar @x0))
:qid disc_equation_FStar.Stubs.Reflection.V2.Data.Tv_BVar))

:named disc_equation_FStar.Stubs.Reflection.V2.Data.Tv_BVar))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(154,4-154,16); use=FStar.Stubs.Reflection.V2.Data.fsti(154,4-154,16)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_AscribedT @x0)
(BoxBool (is-FStar.Stubs.Reflection.V2.Data.Tv_AscribedT @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Tv_AscribedT @x0))
:qid disc_equation_FStar.Stubs.Reflection.V2.Data.Tv_AscribedT))

:named disc_equation_FStar.Stubs.Reflection.V2.Data.Tv_AscribedT))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(155,4-155,16); use=FStar.Stubs.Reflection.V2.Data.fsti(155,4-155,16)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_AscribedC @x0)
(BoxBool (is-FStar.Stubs.Reflection.V2.Data.Tv_AscribedC @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Tv_AscribedC @x0))
:qid disc_equation_FStar.Stubs.Reflection.V2.Data.Tv_AscribedC))

:named disc_equation_FStar.Stubs.Reflection.V2.Data.Tv_AscribedC))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(147,4-147,12); use=FStar.Stubs.Reflection.V2.Data.fsti(147,4-147,12)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Arrow @x0)
(BoxBool (is-FStar.Stubs.Reflection.V2.Data.Tv_Arrow @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Arrow @x0))
:qid disc_equation_FStar.Stubs.Reflection.V2.Data.Tv_Arrow))

:named disc_equation_FStar.Stubs.Reflection.V2.Data.Tv_Arrow))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Tv_App; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(145,4-145,10); use=FStar.Stubs.Reflection.V2.Data.fsti(145,4-145,10)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_App @x0)
(BoxBool (is-FStar.Stubs.Reflection.V2.Data.Tv_App @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Tv_App @x0))
:qid disc_equation_FStar.Stubs.Reflection.V2.Data.Tv_App))

:named disc_equation_FStar.Stubs.Reflection.V2.Data.Tv_App))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(146,4-146,10); use=FStar.Stubs.Reflection.V2.Data.fsti(146,4-146,10)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Abs @x0)
(BoxBool (is-FStar.Stubs.Reflection.V2.Data.Tv_Abs @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Abs @x0))
:qid disc_equation_FStar.Stubs.Reflection.V2.Data.Tv_Abs))

:named disc_equation_FStar.Stubs.Reflection.V2.Data.Tv_Abs))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Q_Meta; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(80,4-80,10); use=FStar.Stubs.Reflection.V2.Data.fsti(80,4-80,10)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.uu___is_Q_Meta @x0)
(BoxBool (is-FStar.Stubs.Reflection.V2.Data.Q_Meta @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Q_Meta @x0))
:qid disc_equation_FStar.Stubs.Reflection.V2.Data.Q_Meta))

:named disc_equation_FStar.Stubs.Reflection.V2.Data.Q_Meta))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Q_Explicit; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(78,4-78,14); use=FStar.Stubs.Reflection.V2.Data.fsti(78,4-78,14)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.uu___is_Q_Explicit @x0)
(BoxBool (is-FStar.Stubs.Reflection.V2.Data.Q_Explicit @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Q_Explicit @x0))
:qid disc_equation_FStar.Stubs.Reflection.V2.Data.Q_Explicit))

:named disc_equation_FStar.Stubs.Reflection.V2.Data.Q_Explicit))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Var; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(63,3-63,10); use=FStar.Stubs.Reflection.V2.Data.fsti(63,3-63,10)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Var @x0)
(BoxBool (is-FStar.Stubs.Reflection.V2.Data.Pat_Var @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Var @x0))
:qid disc_equation_FStar.Stubs.Reflection.V2.Data.Pat_Var))

:named disc_equation_FStar.Stubs.Reflection.V2.Data.Pat_Var))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Dot_Term; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(69,3-69,15); use=FStar.Stubs.Reflection.V2.Data.fsti(69,3-69,15)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Dot_Term @x0)
(BoxBool (is-FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Dot_Term @x0))
:qid disc_equation_FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term))

:named disc_equation_FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Constant; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(46,3-46,15); use=FStar.Stubs.Reflection.V2.Data.fsti(46,3-46,15)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Constant @x0)
(BoxBool (is-FStar.Stubs.Reflection.V2.Data.Pat_Constant @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Constant @x0))
:qid disc_equation_FStar.Stubs.Reflection.V2.Data.Pat_Constant))

:named disc_equation_FStar.Stubs.Reflection.V2.Data.Pat_Constant))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Cons; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(52,3-52,11); use=FStar.Stubs.Reflection.V2.Data.fsti(52,3-52,11)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Cons @x0)
(BoxBool (is-FStar.Stubs.Reflection.V2.Data.Pat_Cons @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Cons @x0))
:qid disc_equation_FStar.Stubs.Reflection.V2.Data.Pat_Cons))

:named disc_equation_FStar.Stubs.Reflection.V2.Data.Pat_Cons))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_C_String; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(32,4-32,12); use=FStar.Stubs.Reflection.V2.Data.fsti(32,4-32,12)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.uu___is_C_String @x0)
(BoxBool (is-FStar.Stubs.Reflection.V2.Data.C_String @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_C_String @x0))
:qid disc_equation_FStar.Stubs.Reflection.V2.Data.C_String))

:named disc_equation_FStar.Stubs.Reflection.V2.Data.C_String))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(35,4-35,13); use=FStar.Stubs.Reflection.V2.Data.fsti(35,4-35,13)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.uu___is_C_Reflect @x0)
(BoxBool (is-FStar.Stubs.Reflection.V2.Data.C_Reflect @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_C_Reflect @x0))
:qid disc_equation_FStar.Stubs.Reflection.V2.Data.C_Reflect))

:named disc_equation_FStar.Stubs.Reflection.V2.Data.C_Reflect))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(36,4-36,10); use=FStar.Stubs.Reflection.V2.Data.fsti(36,4-36,10)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.uu___is_C_Real @x0)
(BoxBool (is-FStar.Stubs.Reflection.V2.Data.C_Real @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_C_Real @x0))
:qid disc_equation_FStar.Stubs.Reflection.V2.Data.C_Real))

:named disc_equation_FStar.Stubs.Reflection.V2.Data.C_Real))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_C_Range; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(33,4-33,11); use=FStar.Stubs.Reflection.V2.Data.fsti(33,4-33,11)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.uu___is_C_Range @x0)
(BoxBool (is-FStar.Stubs.Reflection.V2.Data.C_Range @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_C_Range @x0))
:qid disc_equation_FStar.Stubs.Reflection.V2.Data.C_Range))

:named disc_equation_FStar.Stubs.Reflection.V2.Data.C_Range))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_C_Int; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(29,4-29,9); use=FStar.Stubs.Reflection.V2.Data.fsti(29,4-29,9)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.uu___is_C_Int @x0)
(BoxBool (is-FStar.Stubs.Reflection.V2.Data.C_Int @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_C_Int @x0))
:qid disc_equation_FStar.Stubs.Reflection.V2.Data.C_Int))

:named disc_equation_FStar.Stubs.Reflection.V2.Data.C_Int))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.uu___is_Some @x0
@x1)
(BoxBool (is-FStar.Pervasives.Native.Some @x1)))
 

:pattern ((FStar.Pervasives.Native.uu___is_Some @x0
@x1))
:qid disc_equation_FStar.Pervasives.Native.Some))

:named disc_equation_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_None; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.uu___is_None @x0
@x1)
(BoxBool (is-FStar.Pervasives.Native.None @x1)))
 

:pattern ((FStar.Pervasives.Native.uu___is_None @x0
@x1))
:qid disc_equation_FStar.Pervasives.Native.None))

:named disc_equation_FStar.Pervasives.Native.None))
;;;;;;;;;;;;;;;;Prop-typing for Prims.subtype_of
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(Valid (Prims.subtype_of (Prims.subtype_of @x0
@x1)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Prims.subtype_of @x0
@x1)
Prims.unit))
:qid defn_equation_Prims.subtype_of))

:named defn_equation_Prims.subtype_of))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! 
;; def=Prims.fst(91,17-91,18); use=Prims.fst(91,17-91,18)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
Prims.T
Prims.trivial)
 

:pattern ((HasTypeFuel @u0
Prims.T
Prims.trivial))
:qid data_typing_intro_Prims.T@tok))

:named data_typing_intro_Prims.T@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
(Prims.Nil @x1)
(Prims.list @x1)))
 

:pattern ((HasTypeFuel @u0
(Prims.Nil @x1)
(Prims.list @x1)))
:qid data_typing_intro_Prims.Nil@tok))

:named data_typing_intro_Prims.Nil@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
@x1)
(HasTypeFuel @u0
@x3
(Prims.list @x1)))
(HasTypeFuel @u0
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x1)))
 

:pattern ((HasTypeFuel @u0
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x1)))
:qid data_typing_intro_Prims.Cons@tok))

:named data_typing_intro_Prims.Cons@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(78,3-78,10); use=FStar.Tactics.NamedView.fsti(78,3-78,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.pattern__Pat_Var__payload)
(HasTypeFuel @u0
(FStar.Tactics.NamedView.Pat_Var @x1)
FStar.Tactics.NamedView.pattern))
 

:pattern ((HasTypeFuel @u0
(FStar.Tactics.NamedView.Pat_Var @x1)
FStar.Tactics.NamedView.pattern))
:qid data_typing_intro_FStar.Tactics.NamedView.Pat_Var@tok))

:named data_typing_intro_FStar.Tactics.NamedView.Pat_Var@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(84,3-84,15); use=FStar.Tactics.NamedView.fsti(84,3-84,15)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload)
(HasTypeFuel @u0
(FStar.Tactics.NamedView.Pat_Dot_Term @x1)
FStar.Tactics.NamedView.pattern))
 

:pattern ((HasTypeFuel @u0
(FStar.Tactics.NamedView.Pat_Dot_Term @x1)
FStar.Tactics.NamedView.pattern))
:qid data_typing_intro_FStar.Tactics.NamedView.Pat_Dot_Term@tok))

:named data_typing_intro_FStar.Tactics.NamedView.Pat_Dot_Term@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(65,3-65,15); use=FStar.Tactics.NamedView.fsti(65,3-65,15)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.pattern__Pat_Constant__payload)
(HasTypeFuel @u0
(FStar.Tactics.NamedView.Pat_Constant @x1)
FStar.Tactics.NamedView.pattern))
 

:pattern ((HasTypeFuel @u0
(FStar.Tactics.NamedView.Pat_Constant @x1)
FStar.Tactics.NamedView.pattern))
:qid data_typing_intro_FStar.Tactics.NamedView.Pat_Constant@tok))

:named data_typing_intro_FStar.Tactics.NamedView.Pat_Constant@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(71,3-71,11); use=FStar.Tactics.NamedView.fsti(71,3-71,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.pattern__Pat_Cons__payload)
(HasTypeFuel @u0
(FStar.Tactics.NamedView.Pat_Cons @x1)
FStar.Tactics.NamedView.pattern))
 

:pattern ((HasTypeFuel @u0
(FStar.Tactics.NamedView.Pat_Cons @x1)
FStar.Tactics.NamedView.pattern))
:qid data_typing_intro_FStar.Tactics.NamedView.Pat_Cons@tok))

:named data_typing_intro_FStar.Tactics.NamedView.Pat_Cons@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(78,3-78,10); use=FStar.Tactics.NamedView.fsti(78,3-78,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.namedv)
(HasTypeFuel @u0
@x2
(FStar.Sealed.sealed FStar.Stubs.Reflection.Types.typ)))
(HasTypeFuel @u0
(FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload @x1
@x2)
FStar.Tactics.NamedView.pattern__Pat_Var__payload))
 

:pattern ((HasTypeFuel @u0
(FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload @x1
@x2)
FStar.Tactics.NamedView.pattern__Pat_Var__payload))
:qid data_typing_intro_FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload@tok))

:named data_typing_intro_FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(84,3-84,15); use=FStar.Tactics.NamedView.fsti(84,3-84,15)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.option FStar.Tactics.NamedView.term))
(HasTypeFuel @u0
(FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload @x1)
FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload))
 

:pattern ((HasTypeFuel @u0
(FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload @x1)
FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload))
:qid data_typing_intro_FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload@tok))

:named data_typing_intro_FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(65,3-65,15); use=FStar.Tactics.NamedView.fsti(65,3-65,15)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.vconst)
(HasTypeFuel @u0
(FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload @x1)
FStar.Tactics.NamedView.pattern__Pat_Constant__payload))
 

:pattern ((HasTypeFuel @u0
(FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload @x1)
FStar.Tactics.NamedView.pattern__Pat_Constant__payload))
:qid data_typing_intro_FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload@tok))

:named data_typing_intro_FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(71,3-71,11); use=FStar.Tactics.NamedView.fsti(71,3-71,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.fv)
(HasTypeFuel @u0
@x2
(FStar.Pervasives.Native.option FStar.Stubs.Reflection.V2.Data.universes))
(HasTypeFuel @u0
@x3
(Prims.list (FStar.Pervasives.Native.tuple2 FStar.Tactics.NamedView.pattern
Prims.bool))))
(HasTypeFuel @u0
(FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload @x1
@x2
@x3)
FStar.Tactics.NamedView.pattern__Pat_Cons__payload))
 

:pattern ((HasTypeFuel @u0
(FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload @x1
@x2
@x3)
FStar.Tactics.NamedView.pattern__Pat_Cons__payload))
:qid data_typing_intro_FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload@tok))

:named data_typing_intro_FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Tactics.Result.__result; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Success; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Failed; Namespace FStar.Stubs.Tactics.Result
(assert (! 
;; def=FStar.Stubs.Tactics.Result.fsti(25,6-25,13); use=FStar.Stubs.Tactics.Result.fsti(25,6-25,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
@x1)
(HasTypeFuel @u0
@x3
FStar.Stubs.Tactics.Types.proofstate))
(HasTypeFuel @u0
(FStar.Stubs.Tactics.Result.Success @x1
@x2
@x3)
(FStar.Stubs.Tactics.Result.__result @x1)))
 

:pattern ((HasTypeFuel @u0
(FStar.Stubs.Tactics.Result.Success @x1
@x2
@x3)
(FStar.Stubs.Tactics.Result.__result @x1)))
:qid data_typing_intro_FStar.Stubs.Tactics.Result.Success@tok))

:named data_typing_intro_FStar.Stubs.Tactics.Result.Success@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Tactics.Result.__result; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Success; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Failed; Namespace FStar.Stubs.Tactics.Result
(assert (! 
;; def=FStar.Stubs.Tactics.Result.fsti(26,6-26,12); use=FStar.Stubs.Tactics.Result.fsti(26,6-26,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Prims.exn)
(HasTypeFuel @u0
@x3
FStar.Stubs.Tactics.Types.proofstate))
(HasTypeFuel @u0
(FStar.Stubs.Tactics.Result.Failed @x1
@x2
@x3)
(FStar.Stubs.Tactics.Result.__result @x1)))
 

:pattern ((HasTypeFuel @u0
(FStar.Stubs.Tactics.Result.Failed @x1
@x2
@x3)
(FStar.Stubs.Tactics.Result.__result @x1)))
:qid data_typing_intro_FStar.Stubs.Tactics.Result.Failed@tok))

:named data_typing_intro_FStar.Stubs.Tactics.Result.Failed@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Tactics.Common.TacticFailure; Namespace FStar.Stubs.Tactics.Common
(assert (! 
;; def=FStar.Stubs.Tactics.Common.fsti(12,10-12,23); use=FStar.Stubs.Tactics.Common.fsti(12,10-12,23)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 FStar.Stubs.Errors.Msg.error_message
(FStar.Pervasives.Native.option FStar.Range.range)))
(HasTypeFuel @u0
(FStar.Stubs.Tactics.Common.TacticFailure @x1)
Prims.exn))
 

:pattern ((HasTypeFuel @u0
(FStar.Stubs.Tactics.Common.TacticFailure @x1)
Prims.exn))
:qid data_typing_intro_FStar.Stubs.Tactics.Common.TacticFailure@tok))

:named data_typing_intro_FStar.Stubs.Tactics.Common.TacticFailure@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(141,4-141,10); use=FStar.Stubs.Reflection.V2.Data.fsti(141,4-141,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.namedv)
(HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Tv_Var @x1)
FStar.Stubs.Reflection.V2.Data.term_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Tv_Var @x1)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.Tv_Var@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.Tv_Var@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(151,4-151,11); use=FStar.Stubs.Reflection.V2.Data.fsti(151,4-151,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Prims.nat)
(HasTypeFuel @u0
@x2
FStar.Stubs.Reflection.Types.ctx_uvar_and_subst))
(HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Tv_Uvar @x1
@x2)
FStar.Stubs.Reflection.V2.Data.term_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Tv_Uvar @x1
@x2)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.Tv_Uvar@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.Tv_Uvar@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(157,4-157,13); use=FStar.Stubs.Reflection.V2.Data.fsti(157,4-157,13)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
FStar.Stubs.Reflection.V2.Data.Tv_Unsupp
FStar.Stubs.Reflection.V2.Data.term_view)
 

:pattern ((HasTypeFuel @u0
FStar.Stubs.Reflection.V2.Data.Tv_Unsupp
FStar.Stubs.Reflection.V2.Data.term_view))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.Tv_Unsupp@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.Tv_Unsupp@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(156,4-156,14); use=FStar.Stubs.Reflection.V2.Data.fsti(156,4-156,14)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
FStar.Stubs.Reflection.V2.Data.Tv_Unknown
FStar.Stubs.Reflection.V2.Data.term_view)
 

:pattern ((HasTypeFuel @u0
FStar.Stubs.Reflection.V2.Data.Tv_Unknown
FStar.Stubs.Reflection.V2.Data.term_view))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.Tv_Unknown@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.Tv_Unknown@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(144,4-144,12); use=FStar.Stubs.Reflection.V2.Data.fsti(144,4-144,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.fv)
(HasTypeFuel @u0
@x2
FStar.Stubs.Reflection.V2.Data.universes))
(HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Tv_UInst @x1
@x2)
FStar.Stubs.Reflection.V2.Data.term_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Tv_UInst @x1
@x2)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.Tv_UInst@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.Tv_UInst@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(148,4-148,11); use=FStar.Stubs.Reflection.V2.Data.fsti(148,4-148,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.universe)
(HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Tv_Type @x1)
FStar.Stubs.Reflection.V2.Data.term_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Tv_Type @x1)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.Tv_Type@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.Tv_Type@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(149,4-149,13); use=FStar.Stubs.Reflection.V2.Data.fsti(149,4-149,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.simple_binder)
(HasTypeFuel @u0
@x2
FStar.Stubs.Reflection.Types.term))
(HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Tv_Refine @x1
@x2)
FStar.Stubs.Reflection.V2.Data.term_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Tv_Refine @x1
@x2)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.Tv_Refine@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.Tv_Refine@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(153,4-153,12); use=FStar.Stubs.Reflection.V2.Data.fsti(153,4-153,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.term)
(HasTypeFuel @u0
@x2
(FStar.Pervasives.Native.option FStar.Stubs.Syntax.Syntax.match_returns_ascription))
(HasTypeFuel @u0
@x3
(Prims.list FStar.Stubs.Reflection.V2.Data.branch)))
(HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Tv_Match @x1
@x2
@x3)
FStar.Stubs.Reflection.V2.Data.term_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Tv_Match @x1
@x2
@x3)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.Tv_Match@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.Tv_Match@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(152,4-152,10); use=FStar.Stubs.Reflection.V2.Data.fsti(152,4-152,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Prims.bool)
(HasTypeFuel @u0
@x2
(Prims.list FStar.Stubs.Reflection.Types.term))
(HasTypeFuel @u0
@x3
FStar.Stubs.Reflection.V2.Data.simple_binder)
(HasTypeFuel @u0
@x4
FStar.Stubs.Reflection.Types.term)
(HasTypeFuel @u0
@x5
FStar.Stubs.Reflection.Types.term))
(HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Tv_Let @x1
@x2
@x3
@x4
@x5)
FStar.Stubs.Reflection.V2.Data.term_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Tv_Let @x1
@x2
@x3
@x4
@x5)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.Tv_Let@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.Tv_Let@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(143,4-143,11); use=FStar.Stubs.Reflection.V2.Data.fsti(143,4-143,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.fv)
(HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Tv_FVar @x1)
FStar.Stubs.Reflection.V2.Data.term_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Tv_FVar @x1)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.Tv_FVar@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.Tv_FVar@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(150,4-150,12); use=FStar.Stubs.Reflection.V2.Data.fsti(150,4-150,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.vconst)
(HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Tv_Const @x1)
FStar.Stubs.Reflection.V2.Data.term_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Tv_Const @x1)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.Tv_Const@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.Tv_Const@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(142,4-142,11); use=FStar.Stubs.Reflection.V2.Data.fsti(142,4-142,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.bv)
(HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Tv_BVar @x1)
FStar.Stubs.Reflection.V2.Data.term_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Tv_BVar @x1)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.Tv_BVar@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.Tv_BVar@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(154,4-154,16); use=FStar.Stubs.Reflection.V2.Data.fsti(154,4-154,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.term)
(HasTypeFuel @u0
@x2
FStar.Stubs.Reflection.Types.term)
(HasTypeFuel @u0
@x3
(FStar.Pervasives.Native.option FStar.Stubs.Reflection.Types.term))
(HasTypeFuel @u0
@x4
Prims.bool))
(HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Tv_AscribedT @x1
@x2
@x3
@x4)
FStar.Stubs.Reflection.V2.Data.term_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Tv_AscribedT @x1
@x2
@x3
@x4)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.Tv_AscribedT@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.Tv_AscribedT@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(155,4-155,16); use=FStar.Stubs.Reflection.V2.Data.fsti(155,4-155,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.term)
(HasTypeFuel @u0
@x2
FStar.Stubs.Reflection.Types.comp)
(HasTypeFuel @u0
@x3
(FStar.Pervasives.Native.option FStar.Stubs.Reflection.Types.term))
(HasTypeFuel @u0
@x4
Prims.bool))
(HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Tv_AscribedC @x1
@x2
@x3
@x4)
FStar.Stubs.Reflection.V2.Data.term_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Tv_AscribedC @x1
@x2
@x3
@x4)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.Tv_AscribedC@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.Tv_AscribedC@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(147,4-147,12); use=FStar.Stubs.Reflection.V2.Data.fsti(147,4-147,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.binder)
(HasTypeFuel @u0
@x2
FStar.Stubs.Reflection.Types.comp))
(HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Tv_Arrow @x1
@x2)
FStar.Stubs.Reflection.V2.Data.term_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Tv_Arrow @x1
@x2)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.Tv_Arrow@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.Tv_Arrow@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(145,4-145,10); use=FStar.Stubs.Reflection.V2.Data.fsti(145,4-145,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.term)
(HasTypeFuel @u0
@x2
FStar.Stubs.Reflection.V2.Data.argv))
(HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Tv_App @x1
@x2)
FStar.Stubs.Reflection.V2.Data.term_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Tv_App @x1
@x2)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.Tv_App@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.Tv_App@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(146,4-146,10); use=FStar.Stubs.Reflection.V2.Data.fsti(146,4-146,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.binder)
(HasTypeFuel @u0
@x2
FStar.Stubs.Reflection.Types.term))
(HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Tv_Abs @x1
@x2)
FStar.Stubs.Reflection.V2.Data.term_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Tv_Abs @x1
@x2)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.Tv_Abs@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.Tv_Abs@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.aqualv; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Implicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Explicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Equality; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Meta; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(80,4-80,10); use=FStar.Stubs.Reflection.V2.Data.fsti(80,4-80,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.term)
(HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Q_Meta @x1)
FStar.Stubs.Reflection.V2.Data.aqualv))
 

:pattern ((HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Q_Meta @x1)
FStar.Stubs.Reflection.V2.Data.aqualv))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.Q_Meta@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.Q_Meta@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.aqualv; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Implicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Explicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Equality; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Meta; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(77,4-77,14); use=FStar.Stubs.Reflection.V2.Data.fsti(77,4-77,14)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
FStar.Stubs.Reflection.V2.Data.Q_Implicit
FStar.Stubs.Reflection.V2.Data.aqualv)
 

:pattern ((HasTypeFuel @u0
FStar.Stubs.Reflection.V2.Data.Q_Implicit
FStar.Stubs.Reflection.V2.Data.aqualv))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.Q_Implicit@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.Q_Implicit@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.aqualv; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Implicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Explicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Equality; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Meta; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(78,4-78,14); use=FStar.Stubs.Reflection.V2.Data.fsti(78,4-78,14)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
FStar.Stubs.Reflection.V2.Data.Q_Explicit
FStar.Stubs.Reflection.V2.Data.aqualv)
 

:pattern ((HasTypeFuel @u0
FStar.Stubs.Reflection.V2.Data.Q_Explicit
FStar.Stubs.Reflection.V2.Data.aqualv))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.Q_Explicit@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.Q_Explicit@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.aqualv; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Implicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Explicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Equality; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Meta; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(79,4-79,14); use=FStar.Stubs.Reflection.V2.Data.fsti(79,4-79,14)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
FStar.Stubs.Reflection.V2.Data.Q_Equality
FStar.Stubs.Reflection.V2.Data.aqualv)
 

:pattern ((HasTypeFuel @u0
FStar.Stubs.Reflection.V2.Data.Q_Equality
FStar.Stubs.Reflection.V2.Data.aqualv))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.Q_Equality@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.Q_Equality@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.pattern; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Constant; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Cons; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(63,3-63,10); use=FStar.Stubs.Reflection.V2.Data.fsti(63,3-63,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
(FStar.Sealed.sealed FStar.Stubs.Reflection.Types.term))
(HasTypeFuel @u0
@x2
FStar.Stubs.Reflection.V2.Data.ppname_t))
(HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Pat_Var @x1
@x2)
FStar.Stubs.Reflection.V2.Data.pattern))
 

:pattern ((HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Pat_Var @x1
@x2)
FStar.Stubs.Reflection.V2.Data.pattern))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.Pat_Var@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.Pat_Var@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.pattern; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Constant; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Cons; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(69,3-69,15); use=FStar.Stubs.Reflection.V2.Data.fsti(69,3-69,15)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.option FStar.Stubs.Reflection.Types.term))
(HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term @x1)
FStar.Stubs.Reflection.V2.Data.pattern))
 

:pattern ((HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term @x1)
FStar.Stubs.Reflection.V2.Data.pattern))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.pattern; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Constant; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Cons; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(46,3-46,15); use=FStar.Stubs.Reflection.V2.Data.fsti(46,3-46,15)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.vconst)
(HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Pat_Constant @x1)
FStar.Stubs.Reflection.V2.Data.pattern))
 

:pattern ((HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Pat_Constant @x1)
FStar.Stubs.Reflection.V2.Data.pattern))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.Pat_Constant@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.Pat_Constant@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.pattern; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Constant; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Cons; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(52,3-52,11); use=FStar.Stubs.Reflection.V2.Data.fsti(52,3-52,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.fv)
(HasTypeFuel @u0
@x2
(FStar.Pervasives.Native.option FStar.Stubs.Reflection.V2.Data.universes))
(HasTypeFuel @u0
@x3
(Prims.list (FStar.Pervasives.Native.tuple2 FStar.Stubs.Reflection.V2.Data.pattern
Prims.bool))))
(HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Pat_Cons @x1
@x2
@x3)
FStar.Stubs.Reflection.V2.Data.pattern))
 

:pattern ((HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Pat_Cons @x1
@x2
@x3)
FStar.Stubs.Reflection.V2.Data.pattern))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.Pat_Cons@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.Pat_Cons@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.namedv_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Mknamedv_view; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(86,5-86,16); use=FStar.Stubs.Reflection.V2.Data.fsti(86,5-86,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Prims.nat)
(HasTypeFuel @u0
@x2
(FStar.Sealed.sealed FStar.Stubs.Reflection.Types.typ))
(HasTypeFuel @u0
@x3
FStar.Stubs.Reflection.V2.Data.ppname_t))
(HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Mknamedv_view @x1
@x2
@x3)
FStar.Stubs.Reflection.V2.Data.namedv_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Mknamedv_view @x1
@x2
@x3)
FStar.Stubs.Reflection.V2.Data.namedv_view))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.Mknamedv_view@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.Mknamedv_view@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.binder_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Mkbinder_view; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(103,5-103,16); use=FStar.Stubs.Reflection.V2.Data.fsti(103,5-103,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.typ)
(HasTypeFuel @u0
@x2
FStar.Stubs.Reflection.V2.Data.aqualv)
(HasTypeFuel @u0
@x3
(Prims.list FStar.Stubs.Reflection.Types.term))
(HasTypeFuel @u0
@x4
FStar.Stubs.Reflection.V2.Data.ppname_t))
(HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Mkbinder_view @x1
@x2
@x3
@x4)
FStar.Stubs.Reflection.V2.Data.binder_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Mkbinder_view @x1
@x2
@x3
@x4)
FStar.Stubs.Reflection.V2.Data.binder_view))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.Mkbinder_view@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.Mkbinder_view@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(28,4-28,10); use=FStar.Stubs.Reflection.V2.Data.fsti(28,4-28,10)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
FStar.Stubs.Reflection.V2.Data.C_Unit
FStar.Stubs.Reflection.V2.Data.vconst)
 

:pattern ((HasTypeFuel @u0
FStar.Stubs.Reflection.V2.Data.C_Unit
FStar.Stubs.Reflection.V2.Data.vconst))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.C_Unit@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.C_Unit@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(30,4-30,10); use=FStar.Stubs.Reflection.V2.Data.fsti(30,4-30,10)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
FStar.Stubs.Reflection.V2.Data.C_True
FStar.Stubs.Reflection.V2.Data.vconst)
 

:pattern ((HasTypeFuel @u0
FStar.Stubs.Reflection.V2.Data.C_True
FStar.Stubs.Reflection.V2.Data.vconst))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.C_True@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.C_True@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(32,4-32,12); use=FStar.Stubs.Reflection.V2.Data.fsti(32,4-32,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.string)
(HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.C_String @x1)
FStar.Stubs.Reflection.V2.Data.vconst))
 

:pattern ((HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.C_String @x1)
FStar.Stubs.Reflection.V2.Data.vconst))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.C_String@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.C_String@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(34,4-34,11); use=FStar.Stubs.Reflection.V2.Data.fsti(34,4-34,11)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
FStar.Stubs.Reflection.V2.Data.C_Reify
FStar.Stubs.Reflection.V2.Data.vconst)
 

:pattern ((HasTypeFuel @u0
FStar.Stubs.Reflection.V2.Data.C_Reify
FStar.Stubs.Reflection.V2.Data.vconst))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.C_Reify@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.C_Reify@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(35,4-35,13); use=FStar.Stubs.Reflection.V2.Data.fsti(35,4-35,13)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
(FStar.Stubs.Reflection.Types.name Dummy_value))
(HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.C_Reflect @x1)
FStar.Stubs.Reflection.V2.Data.vconst))
 

:pattern ((HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.C_Reflect @x1)
FStar.Stubs.Reflection.V2.Data.vconst))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.C_Reflect@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.C_Reflect@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(36,4-36,10); use=FStar.Stubs.Reflection.V2.Data.fsti(36,4-36,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.string)
(HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.C_Real @x1)
FStar.Stubs.Reflection.V2.Data.vconst))
 

:pattern ((HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.C_Real @x1)
FStar.Stubs.Reflection.V2.Data.vconst))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.C_Real@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.C_Real@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(33,4-33,11); use=FStar.Stubs.Reflection.V2.Data.fsti(33,4-33,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
FStar.Range.range)
(HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.C_Range @x1)
FStar.Stubs.Reflection.V2.Data.vconst))
 

:pattern ((HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.C_Range @x1)
FStar.Stubs.Reflection.V2.Data.vconst))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.C_Range@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.C_Range@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(29,4-29,9); use=FStar.Stubs.Reflection.V2.Data.fsti(29,4-29,9)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.int)
(HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.C_Int @x1)
FStar.Stubs.Reflection.V2.Data.vconst))
 

:pattern ((HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.C_Int @x1)
FStar.Stubs.Reflection.V2.Data.vconst))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.C_Int@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.C_Int@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(31,4-31,11); use=FStar.Stubs.Reflection.V2.Data.fsti(31,4-31,11)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
FStar.Stubs.Reflection.V2.Data.C_False
FStar.Stubs.Reflection.V2.Data.vconst)
 

:pattern ((HasTypeFuel @u0
FStar.Stubs.Reflection.V2.Data.C_False
FStar.Stubs.Reflection.V2.Data.vconst))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.C_False@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.C_False@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
@x1))
(HasTypeFuel @u0
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x1)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x1)))
:qid data_typing_intro_FStar.Pervasives.Native.Some@tok))

:named data_typing_intro_FStar.Pervasives.Native.Some@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x1)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x1)))
:qid data_typing_intro_FStar.Pervasives.Native.None@tok))

:named data_typing_intro_FStar.Pervasives.Native.None@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x4
@x1)
(HasTypeFuel @u0
@x5
@x2)
(HasTypeFuel @u0
@x6
@x3))
(HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.Native.tuple3 @x1
@x2
@x3)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.Native.tuple3 @x1
@x2
@x3)))
:qid data_typing_intro_FStar.Pervasives.Native.Mktuple3@tok))

:named data_typing_intro_FStar.Pervasives.Native.Mktuple3@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x1)
(HasTypeFuel @u0
@x4
@x2))
(HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x1
@x2)))
:qid data_typing_intro_FStar.Pervasives.Native.Mktuple2@tok))

:named data_typing_intro_FStar.Pervasives.Native.Mktuple2@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(732,4-732,7); use=FStar.Pervasives.fsti(732,4-732,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x2))
(HasTypeFuel @u0
(FStar.Pervasives.Inr @x1
@x2
@x3)
(FStar.Pervasives.either @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Inr @x1
@x2
@x3)
(FStar.Pervasives.either @x1
@x2)))
:qid data_typing_intro_FStar.Pervasives.Inr@tok))

:named data_typing_intro_FStar.Pervasives.Inr@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(731,4-731,7); use=FStar.Pervasives.fsti(731,4-731,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x1))
(HasTypeFuel @u0
(FStar.Pervasives.Inl @x1
@x2
@x3)
(FStar.Pervasives.either @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Inl @x1
@x2
@x3)
(FStar.Pervasives.either @x1
@x2)))
:qid data_typing_intro_FStar.Pervasives.Inl@tok))

:named data_typing_intro_FStar.Pervasives.Inl@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Nil @x1)
(Prims.list @x2))
(HasTypeFuel @u0
@x2
Tm_type))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Nil @x1)
(Prims.list @x2)))
:qid data_elim_Prims.Nil))

:named data_elim_Prims.Nil))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x4))
(and (HasTypeFuel @u0
@x4
Tm_type)
(HasTypeFuel @u0
@x2
@x4)
(HasTypeFuel @u0
@x3
(Prims.list @x4))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x4)))
:qid data_elim_Prims.Cons))

:named data_elim_Prims.Cons))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(78,3-78,10); use=FStar.Tactics.NamedView.fsti(78,3-78,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Pat_Var @x1)
FStar.Tactics.NamedView.pattern)
(HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.pattern__Pat_Var__payload))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Pat_Var @x1)
FStar.Tactics.NamedView.pattern))
:qid data_elim_FStar.Tactics.NamedView.Pat_Var))

:named data_elim_FStar.Tactics.NamedView.Pat_Var))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(84,3-84,15); use=FStar.Tactics.NamedView.fsti(84,3-84,15)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Pat_Dot_Term @x1)
FStar.Tactics.NamedView.pattern)
(HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Pat_Dot_Term @x1)
FStar.Tactics.NamedView.pattern))
:qid data_elim_FStar.Tactics.NamedView.Pat_Dot_Term))

:named data_elim_FStar.Tactics.NamedView.Pat_Dot_Term))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(65,3-65,15); use=FStar.Tactics.NamedView.fsti(65,3-65,15)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Pat_Constant @x1)
FStar.Tactics.NamedView.pattern)
(HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.pattern__Pat_Constant__payload))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Pat_Constant @x1)
FStar.Tactics.NamedView.pattern))
:qid data_elim_FStar.Tactics.NamedView.Pat_Constant))

:named data_elim_FStar.Tactics.NamedView.Pat_Constant))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(71,3-71,11); use=FStar.Tactics.NamedView.fsti(71,3-71,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Pat_Cons @x1)
FStar.Tactics.NamedView.pattern)
(HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.pattern__Pat_Cons__payload))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Pat_Cons @x1)
FStar.Tactics.NamedView.pattern))
:qid data_elim_FStar.Tactics.NamedView.Pat_Cons))

:named data_elim_FStar.Tactics.NamedView.Pat_Cons))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(78,3-78,10); use=FStar.Tactics.NamedView.fsti(78,3-78,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload @x1
@x2)
FStar.Tactics.NamedView.pattern__Pat_Var__payload)
(and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.namedv)
(HasTypeFuel @u0
@x2
(FStar.Sealed.sealed FStar.Stubs.Reflection.Types.typ))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload @x1
@x2)
FStar.Tactics.NamedView.pattern__Pat_Var__payload))
:qid data_elim_FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload))

:named data_elim_FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(84,3-84,15); use=FStar.Tactics.NamedView.fsti(84,3-84,15)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload @x1)
FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload)
(HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.option FStar.Tactics.NamedView.term)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload @x1)
FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload))
:qid data_elim_FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload))

:named data_elim_FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(65,3-65,15); use=FStar.Tactics.NamedView.fsti(65,3-65,15)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload @x1)
FStar.Tactics.NamedView.pattern__Pat_Constant__payload)
(HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.vconst))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload @x1)
FStar.Tactics.NamedView.pattern__Pat_Constant__payload))
:qid data_elim_FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload))

:named data_elim_FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(71,3-71,11); use=FStar.Tactics.NamedView.fsti(71,3-71,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload @x1
@x2
@x3)
FStar.Tactics.NamedView.pattern__Pat_Cons__payload)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.fv)
(HasTypeFuel @u0
@x2
(FStar.Pervasives.Native.option FStar.Stubs.Reflection.V2.Data.universes))
(HasTypeFuel @u0
@x3
(Prims.list (FStar.Pervasives.Native.tuple2 FStar.Tactics.NamedView.pattern
Prims.bool)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload @x1
@x2
@x3)
FStar.Tactics.NamedView.pattern__Pat_Cons__payload))
:qid data_elim_FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload))

:named data_elim_FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Stubs.Tactics.Result.__result; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Success; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Failed; Namespace FStar.Stubs.Tactics.Result
(assert (! 
;; def=FStar.Stubs.Tactics.Result.fsti(25,6-25,13); use=FStar.Stubs.Tactics.Result.fsti(25,6-25,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Tactics.Result.Success @x1
@x2
@x3)
(FStar.Stubs.Tactics.Result.__result @x4))
(and (HasTypeFuel @u0
@x4
Tm_type)
(HasTypeFuel @u0
@x2
@x4)
(HasTypeFuel @u0
@x3
FStar.Stubs.Tactics.Types.proofstate)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Tactics.Result.Success @x1
@x2
@x3)
(FStar.Stubs.Tactics.Result.__result @x4)))
:qid data_elim_FStar.Stubs.Tactics.Result.Success))

:named data_elim_FStar.Stubs.Tactics.Result.Success))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Stubs.Tactics.Result.__result; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Success; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Failed; Namespace FStar.Stubs.Tactics.Result
(assert (! 
;; def=FStar.Stubs.Tactics.Result.fsti(26,6-26,12); use=FStar.Stubs.Tactics.Result.fsti(26,6-26,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Tactics.Result.Failed @x1
@x2
@x3)
(FStar.Stubs.Tactics.Result.__result @x4))
(and (HasTypeFuel @u0
@x4
Tm_type)
(HasTypeFuel @u0
@x2
Prims.exn)
(HasTypeFuel @u0
@x3
FStar.Stubs.Tactics.Types.proofstate)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Tactics.Result.Failed @x1
@x2
@x3)
(FStar.Stubs.Tactics.Result.__result @x4)))
:qid data_elim_FStar.Stubs.Tactics.Result.Failed))

:named data_elim_FStar.Stubs.Tactics.Result.Failed))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Stubs.Tactics.Common.TacticFailure; Namespace FStar.Stubs.Tactics.Common
(assert (! 
;; def=FStar.Stubs.Tactics.Common.fsti(12,10-12,23); use=FStar.Stubs.Tactics.Common.fsti(12,10-12,23)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Tactics.Common.TacticFailure @x1)
Prims.exn)
(HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 FStar.Stubs.Errors.Msg.error_message
(FStar.Pervasives.Native.option FStar.Range.range))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Tactics.Common.TacticFailure @x1)
Prims.exn))
:qid data_elim_FStar.Stubs.Tactics.Common.TacticFailure))

:named data_elim_FStar.Stubs.Tactics.Common.TacticFailure))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(141,4-141,10); use=FStar.Stubs.Reflection.V2.Data.fsti(141,4-141,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_Var @x1)
FStar.Stubs.Reflection.V2.Data.term_view)
(HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.namedv))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_Var @x1)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid data_elim_FStar.Stubs.Reflection.V2.Data.Tv_Var))

:named data_elim_FStar.Stubs.Reflection.V2.Data.Tv_Var))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(151,4-151,11); use=FStar.Stubs.Reflection.V2.Data.fsti(151,4-151,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_Uvar @x1
@x2)
FStar.Stubs.Reflection.V2.Data.term_view)
(and (HasTypeFuel @u0
@x1
Prims.nat)
(HasTypeFuel @u0
@x2
FStar.Stubs.Reflection.Types.ctx_uvar_and_subst)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_Uvar @x1
@x2)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid data_elim_FStar.Stubs.Reflection.V2.Data.Tv_Uvar))

:named data_elim_FStar.Stubs.Reflection.V2.Data.Tv_Uvar))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(144,4-144,12); use=FStar.Stubs.Reflection.V2.Data.fsti(144,4-144,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_UInst @x1
@x2)
FStar.Stubs.Reflection.V2.Data.term_view)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.fv)
(HasTypeFuel @u0
@x2
FStar.Stubs.Reflection.V2.Data.universes)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_UInst @x1
@x2)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid data_elim_FStar.Stubs.Reflection.V2.Data.Tv_UInst))

:named data_elim_FStar.Stubs.Reflection.V2.Data.Tv_UInst))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(148,4-148,11); use=FStar.Stubs.Reflection.V2.Data.fsti(148,4-148,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_Type @x1)
FStar.Stubs.Reflection.V2.Data.term_view)
(HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.universe))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_Type @x1)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid data_elim_FStar.Stubs.Reflection.V2.Data.Tv_Type))

:named data_elim_FStar.Stubs.Reflection.V2.Data.Tv_Type))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(149,4-149,13); use=FStar.Stubs.Reflection.V2.Data.fsti(149,4-149,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_Refine @x1
@x2)
FStar.Stubs.Reflection.V2.Data.term_view)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.simple_binder)
(HasTypeFuel @u0
@x2
FStar.Stubs.Reflection.Types.term)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_Refine @x1
@x2)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid data_elim_FStar.Stubs.Reflection.V2.Data.Tv_Refine))

:named data_elim_FStar.Stubs.Reflection.V2.Data.Tv_Refine))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(153,4-153,12); use=FStar.Stubs.Reflection.V2.Data.fsti(153,4-153,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_Match @x1
@x2
@x3)
FStar.Stubs.Reflection.V2.Data.term_view)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.term)
(HasTypeFuel @u0
@x2
(FStar.Pervasives.Native.option FStar.Stubs.Syntax.Syntax.match_returns_ascription))
(HasTypeFuel @u0
@x3
(Prims.list FStar.Stubs.Reflection.V2.Data.branch))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_Match @x1
@x2
@x3)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid data_elim_FStar.Stubs.Reflection.V2.Data.Tv_Match))

:named data_elim_FStar.Stubs.Reflection.V2.Data.Tv_Match))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(152,4-152,10); use=FStar.Stubs.Reflection.V2.Data.fsti(152,4-152,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_Let @x1
@x2
@x3
@x4
@x5)
FStar.Stubs.Reflection.V2.Data.term_view)
(and (HasTypeFuel @u0
@x1
Prims.bool)
(HasTypeFuel @u0
@x2
(Prims.list FStar.Stubs.Reflection.Types.term))
(HasTypeFuel @u0
@x3
FStar.Stubs.Reflection.V2.Data.simple_binder)
(HasTypeFuel @u0
@x4
FStar.Stubs.Reflection.Types.term)
(HasTypeFuel @u0
@x5
FStar.Stubs.Reflection.Types.term)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_Let @x1
@x2
@x3
@x4
@x5)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid data_elim_FStar.Stubs.Reflection.V2.Data.Tv_Let))

:named data_elim_FStar.Stubs.Reflection.V2.Data.Tv_Let))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(143,4-143,11); use=FStar.Stubs.Reflection.V2.Data.fsti(143,4-143,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_FVar @x1)
FStar.Stubs.Reflection.V2.Data.term_view)
(HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.fv))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_FVar @x1)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid data_elim_FStar.Stubs.Reflection.V2.Data.Tv_FVar))

:named data_elim_FStar.Stubs.Reflection.V2.Data.Tv_FVar))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(150,4-150,12); use=FStar.Stubs.Reflection.V2.Data.fsti(150,4-150,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_Const @x1)
FStar.Stubs.Reflection.V2.Data.term_view)
(HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.vconst))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_Const @x1)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid data_elim_FStar.Stubs.Reflection.V2.Data.Tv_Const))

:named data_elim_FStar.Stubs.Reflection.V2.Data.Tv_Const))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(142,4-142,11); use=FStar.Stubs.Reflection.V2.Data.fsti(142,4-142,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_BVar @x1)
FStar.Stubs.Reflection.V2.Data.term_view)
(HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.bv))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_BVar @x1)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid data_elim_FStar.Stubs.Reflection.V2.Data.Tv_BVar))

:named data_elim_FStar.Stubs.Reflection.V2.Data.Tv_BVar))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(154,4-154,16); use=FStar.Stubs.Reflection.V2.Data.fsti(154,4-154,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_AscribedT @x1
@x2
@x3
@x4)
FStar.Stubs.Reflection.V2.Data.term_view)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.term)
(HasTypeFuel @u0
@x2
FStar.Stubs.Reflection.Types.term)
(HasTypeFuel @u0
@x3
(FStar.Pervasives.Native.option FStar.Stubs.Reflection.Types.term))
(HasTypeFuel @u0
@x4
Prims.bool)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_AscribedT @x1
@x2
@x3
@x4)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid data_elim_FStar.Stubs.Reflection.V2.Data.Tv_AscribedT))

:named data_elim_FStar.Stubs.Reflection.V2.Data.Tv_AscribedT))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(155,4-155,16); use=FStar.Stubs.Reflection.V2.Data.fsti(155,4-155,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_AscribedC @x1
@x2
@x3
@x4)
FStar.Stubs.Reflection.V2.Data.term_view)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.term)
(HasTypeFuel @u0
@x2
FStar.Stubs.Reflection.Types.comp)
(HasTypeFuel @u0
@x3
(FStar.Pervasives.Native.option FStar.Stubs.Reflection.Types.term))
(HasTypeFuel @u0
@x4
Prims.bool)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_AscribedC @x1
@x2
@x3
@x4)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid data_elim_FStar.Stubs.Reflection.V2.Data.Tv_AscribedC))

:named data_elim_FStar.Stubs.Reflection.V2.Data.Tv_AscribedC))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(147,4-147,12); use=FStar.Stubs.Reflection.V2.Data.fsti(147,4-147,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_Arrow @x1
@x2)
FStar.Stubs.Reflection.V2.Data.term_view)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.binder)
(HasTypeFuel @u0
@x2
FStar.Stubs.Reflection.Types.comp)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_Arrow @x1
@x2)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid data_elim_FStar.Stubs.Reflection.V2.Data.Tv_Arrow))

:named data_elim_FStar.Stubs.Reflection.V2.Data.Tv_Arrow))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(145,4-145,10); use=FStar.Stubs.Reflection.V2.Data.fsti(145,4-145,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_App @x1
@x2)
FStar.Stubs.Reflection.V2.Data.term_view)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.term)
(HasTypeFuel @u0
@x2
FStar.Stubs.Reflection.V2.Data.argv)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_App @x1
@x2)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid data_elim_FStar.Stubs.Reflection.V2.Data.Tv_App))

:named data_elim_FStar.Stubs.Reflection.V2.Data.Tv_App))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(146,4-146,10); use=FStar.Stubs.Reflection.V2.Data.fsti(146,4-146,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_Abs @x1
@x2)
FStar.Stubs.Reflection.V2.Data.term_view)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.binder)
(HasTypeFuel @u0
@x2
FStar.Stubs.Reflection.Types.term)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Tv_Abs @x1
@x2)
FStar.Stubs.Reflection.V2.Data.term_view))
:qid data_elim_FStar.Stubs.Reflection.V2.Data.Tv_Abs))

:named data_elim_FStar.Stubs.Reflection.V2.Data.Tv_Abs))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.aqualv; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Implicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Explicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Equality; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Meta; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(80,4-80,10); use=FStar.Stubs.Reflection.V2.Data.fsti(80,4-80,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Q_Meta @x1)
FStar.Stubs.Reflection.V2.Data.aqualv)
(HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.term))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Q_Meta @x1)
FStar.Stubs.Reflection.V2.Data.aqualv))
:qid data_elim_FStar.Stubs.Reflection.V2.Data.Q_Meta))

:named data_elim_FStar.Stubs.Reflection.V2.Data.Q_Meta))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.pattern; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Constant; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Cons; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(63,3-63,10); use=FStar.Stubs.Reflection.V2.Data.fsti(63,3-63,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Pat_Var @x1
@x2)
FStar.Stubs.Reflection.V2.Data.pattern)
(and (HasTypeFuel @u0
@x1
(FStar.Sealed.sealed FStar.Stubs.Reflection.Types.term))
(HasTypeFuel @u0
@x2
FStar.Stubs.Reflection.V2.Data.ppname_t)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Pat_Var @x1
@x2)
FStar.Stubs.Reflection.V2.Data.pattern))
:qid data_elim_FStar.Stubs.Reflection.V2.Data.Pat_Var))

:named data_elim_FStar.Stubs.Reflection.V2.Data.Pat_Var))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.pattern; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Constant; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Cons; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(69,3-69,15); use=FStar.Stubs.Reflection.V2.Data.fsti(69,3-69,15)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term @x1)
FStar.Stubs.Reflection.V2.Data.pattern)
(HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.option FStar.Stubs.Reflection.Types.term)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term @x1)
FStar.Stubs.Reflection.V2.Data.pattern))
:qid data_elim_FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term))

:named data_elim_FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.pattern; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Constant; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Cons; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(46,3-46,15); use=FStar.Stubs.Reflection.V2.Data.fsti(46,3-46,15)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Pat_Constant @x1)
FStar.Stubs.Reflection.V2.Data.pattern)
(HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.vconst))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Pat_Constant @x1)
FStar.Stubs.Reflection.V2.Data.pattern))
:qid data_elim_FStar.Stubs.Reflection.V2.Data.Pat_Constant))

:named data_elim_FStar.Stubs.Reflection.V2.Data.Pat_Constant))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.pattern; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Constant; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Cons; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(52,3-52,11); use=FStar.Stubs.Reflection.V2.Data.fsti(52,3-52,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Pat_Cons @x1
@x2
@x3)
FStar.Stubs.Reflection.V2.Data.pattern)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.fv)
(HasTypeFuel @u0
@x2
(FStar.Pervasives.Native.option FStar.Stubs.Reflection.V2.Data.universes))
(HasTypeFuel @u0
@x3
(Prims.list (FStar.Pervasives.Native.tuple2 FStar.Stubs.Reflection.V2.Data.pattern
Prims.bool)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Pat_Cons @x1
@x2
@x3)
FStar.Stubs.Reflection.V2.Data.pattern))
:qid data_elim_FStar.Stubs.Reflection.V2.Data.Pat_Cons))

:named data_elim_FStar.Stubs.Reflection.V2.Data.Pat_Cons))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.namedv_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Mknamedv_view; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(86,5-86,16); use=FStar.Stubs.Reflection.V2.Data.fsti(86,5-86,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Mknamedv_view @x1
@x2
@x3)
FStar.Stubs.Reflection.V2.Data.namedv_view)
(and (HasTypeFuel @u0
@x1
Prims.nat)
(HasTypeFuel @u0
@x2
(FStar.Sealed.sealed FStar.Stubs.Reflection.Types.typ))
(HasTypeFuel @u0
@x3
FStar.Stubs.Reflection.V2.Data.ppname_t)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Mknamedv_view @x1
@x2
@x3)
FStar.Stubs.Reflection.V2.Data.namedv_view))
:qid data_elim_FStar.Stubs.Reflection.V2.Data.Mknamedv_view))

:named data_elim_FStar.Stubs.Reflection.V2.Data.Mknamedv_view))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.binder_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Mkbinder_view; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(103,5-103,16); use=FStar.Stubs.Reflection.V2.Data.fsti(103,5-103,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Mkbinder_view @x1
@x2
@x3
@x4)
FStar.Stubs.Reflection.V2.Data.binder_view)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.typ)
(HasTypeFuel @u0
@x2
FStar.Stubs.Reflection.V2.Data.aqualv)
(HasTypeFuel @u0
@x3
(Prims.list FStar.Stubs.Reflection.Types.term))
(HasTypeFuel @u0
@x4
FStar.Stubs.Reflection.V2.Data.ppname_t)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Mkbinder_view @x1
@x2
@x3
@x4)
FStar.Stubs.Reflection.V2.Data.binder_view))
:qid data_elim_FStar.Stubs.Reflection.V2.Data.Mkbinder_view))

:named data_elim_FStar.Stubs.Reflection.V2.Data.Mkbinder_view))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(32,4-32,12); use=FStar.Stubs.Reflection.V2.Data.fsti(32,4-32,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.C_String @x1)
FStar.Stubs.Reflection.V2.Data.vconst)
(HasTypeFuel @u0
@x1
Prims.string))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.C_String @x1)
FStar.Stubs.Reflection.V2.Data.vconst))
:qid data_elim_FStar.Stubs.Reflection.V2.Data.C_String))

:named data_elim_FStar.Stubs.Reflection.V2.Data.C_String))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(35,4-35,13); use=FStar.Stubs.Reflection.V2.Data.fsti(35,4-35,13)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.C_Reflect @x1)
FStar.Stubs.Reflection.V2.Data.vconst)
(HasTypeFuel @u0
@x1
(FStar.Stubs.Reflection.Types.name Dummy_value)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.C_Reflect @x1)
FStar.Stubs.Reflection.V2.Data.vconst))
:qid data_elim_FStar.Stubs.Reflection.V2.Data.C_Reflect))

:named data_elim_FStar.Stubs.Reflection.V2.Data.C_Reflect))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(36,4-36,10); use=FStar.Stubs.Reflection.V2.Data.fsti(36,4-36,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.C_Real @x1)
FStar.Stubs.Reflection.V2.Data.vconst)
(HasTypeFuel @u0
@x1
Prims.string))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.C_Real @x1)
FStar.Stubs.Reflection.V2.Data.vconst))
:qid data_elim_FStar.Stubs.Reflection.V2.Data.C_Real))

:named data_elim_FStar.Stubs.Reflection.V2.Data.C_Real))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(33,4-33,11); use=FStar.Stubs.Reflection.V2.Data.fsti(33,4-33,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.C_Range @x1)
FStar.Stubs.Reflection.V2.Data.vconst)
(HasTypeFuel @u0
@x1
FStar.Range.range))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.C_Range @x1)
FStar.Stubs.Reflection.V2.Data.vconst))
:qid data_elim_FStar.Stubs.Reflection.V2.Data.C_Range))

:named data_elim_FStar.Stubs.Reflection.V2.Data.C_Range))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(29,4-29,9); use=FStar.Stubs.Reflection.V2.Data.fsti(29,4-29,9)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.C_Int @x1)
FStar.Stubs.Reflection.V2.Data.vconst)
(HasTypeFuel @u0
@x1
Prims.int))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.C_Int @x1)
FStar.Stubs.Reflection.V2.Data.vconst))
:qid data_elim_FStar.Stubs.Reflection.V2.Data.C_Int))

:named data_elim_FStar.Stubs.Reflection.V2.Data.C_Int))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3))
(and (HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x2
@x3)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3)))
:qid data_elim_FStar.Pervasives.Native.Some))

:named data_elim_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x2))
(HasTypeFuel @u0
@x2
Tm_type))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x2)))
:qid data_elim_FStar.Pervasives.Native.None))

:named data_elim_FStar.Pervasives.Native.None))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.Native.tuple3 @x7
@x8
@x9))
(and (HasTypeFuel @u0
@x7
Tm_type)
(HasTypeFuel @u0
@x8
Tm_type)
(HasTypeFuel @u0
@x9
Tm_type)
(HasTypeFuel @u0
@x4
@x7)
(HasTypeFuel @u0
@x5
@x8)
(HasTypeFuel @u0
@x6
@x9)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.Native.tuple3 @x7
@x8
@x9)))
:qid data_elim_FStar.Pervasives.Native.Mktuple3))

:named data_elim_FStar.Pervasives.Native.Mktuple3))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x5
@x6))
(and (HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x6
Tm_type)
(HasTypeFuel @u0
@x3
@x5)
(HasTypeFuel @u0
@x4
@x6)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x5
@x6)))
:qid data_elim_FStar.Pervasives.Native.Mktuple2))

:named data_elim_FStar.Pervasives.Native.Mktuple2))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(732,4-732,7); use=FStar.Pervasives.fsti(732,4-732,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Inr @x1
@x2
@x3)
(FStar.Pervasives.either @x4
@x5))
(and (HasTypeFuel @u0
@x4
Tm_type)
(HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x3
@x5)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Inr @x1
@x2
@x3)
(FStar.Pervasives.either @x4
@x5)))
:qid data_elim_FStar.Pervasives.Inr))

:named data_elim_FStar.Pervasives.Inr))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(731,4-731,7); use=FStar.Pervasives.fsti(731,4-731,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Inl @x1
@x2
@x3)
(FStar.Pervasives.either @x4
@x5))
(and (HasTypeFuel @u0
@x4
Tm_type)
(HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x3
@x4)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Inl @x1
@x2
@x3)
(FStar.Pervasives.either @x4
@x5)))
:qid data_elim_FStar.Pervasives.Inl))

:named data_elim_FStar.Pervasives.Inl))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (= 125
(Term_constr_id Prims.unit))
:named constructor_distinct_Prims.unit))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (= 116
(Term_constr_id Prims.trivial))
:named constructor_distinct_Prims.trivial))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.string; Namespace Prims
(assert (! (= 207
(Term_constr_id Prims.string))
:named constructor_distinct_Prims.string))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(614,5-614,9); use=Prims.fst(614,5-614,9)
(forall ((@x0 Term))
 (! (= 318
(Term_constr_id (Prims.list @x0)))
 

:pattern ((Prims.list @x0))
:qid constructor_distinct_Prims.list))

:named constructor_distinct_Prims.list))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (= 303
(Term_constr_id Prims.int))
:named constructor_distinct_Prims.int))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.exn; Namespace Prims
(assert (! (= 308
(Term_constr_id Prims.exn))
:named constructor_distinct_Prims.exn))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (= 107
(Term_constr_id Prims.bool))
:named constructor_distinct_Prims.bool))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (= 122
(Term_constr_id Prims.T))
:named constructor_distinct_Prims.T))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@x0 Term))
 (! (= 325
(Term_constr_id (Prims.Nil @x0)))
 

:pattern ((Prims.Nil @x0))
:qid constructor_distinct_Prims.Nil))

:named constructor_distinct_Prims.Nil))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 330
(Term_constr_id (Prims.Cons @x0
@x1
@x2)))
 

:pattern ((Prims.Cons @x0
@x1
@x2))
:qid constructor_distinct_Prims.Cons))

:named constructor_distinct_Prims.Cons))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! (= 202
(Term_constr_id FStar.Tactics.NamedView.pattern__Pat_Var__payload))
:named constructor_distinct_FStar.Tactics.NamedView.pattern__Pat_Var__payload))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! (= 207
(Term_constr_id FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload))
:named constructor_distinct_FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! (= 192
(Term_constr_id FStar.Tactics.NamedView.pattern__Pat_Constant__payload))
:named constructor_distinct_FStar.Tactics.NamedView.pattern__Pat_Constant__payload))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! (= 197
(Term_constr_id FStar.Tactics.NamedView.pattern__Pat_Cons__payload))
:named constructor_distinct_FStar.Tactics.NamedView.pattern__Pat_Cons__payload))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! (= 212
(Term_constr_id FStar.Tactics.NamedView.pattern))
:named constructor_distinct_FStar.Tactics.NamedView.pattern))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(78,3-78,10); use=FStar.Tactics.NamedView.fsti(78,3-78,10)
(forall ((@x0 Term))
 (! (= 248
(Term_constr_id (FStar.Tactics.NamedView.Pat_Var @x0)))
 

:pattern ((FStar.Tactics.NamedView.Pat_Var @x0))
:qid constructor_distinct_FStar.Tactics.NamedView.Pat_Var))

:named constructor_distinct_FStar.Tactics.NamedView.Pat_Var))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(84,3-84,15); use=FStar.Tactics.NamedView.fsti(84,3-84,15)
(forall ((@x0 Term))
 (! (= 253
(Term_constr_id (FStar.Tactics.NamedView.Pat_Dot_Term @x0)))
 

:pattern ((FStar.Tactics.NamedView.Pat_Dot_Term @x0))
:qid constructor_distinct_FStar.Tactics.NamedView.Pat_Dot_Term))

:named constructor_distinct_FStar.Tactics.NamedView.Pat_Dot_Term))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(65,3-65,15); use=FStar.Tactics.NamedView.fsti(65,3-65,15)
(forall ((@x0 Term))
 (! (= 238
(Term_constr_id (FStar.Tactics.NamedView.Pat_Constant @x0)))
 

:pattern ((FStar.Tactics.NamedView.Pat_Constant @x0))
:qid constructor_distinct_FStar.Tactics.NamedView.Pat_Constant))

:named constructor_distinct_FStar.Tactics.NamedView.Pat_Constant))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(71,3-71,11); use=FStar.Tactics.NamedView.fsti(71,3-71,11)
(forall ((@x0 Term))
 (! (= 243
(Term_constr_id (FStar.Tactics.NamedView.Pat_Cons @x0)))
 

:pattern ((FStar.Tactics.NamedView.Pat_Cons @x0))
:qid constructor_distinct_FStar.Tactics.NamedView.Pat_Cons))

:named constructor_distinct_FStar.Tactics.NamedView.Pat_Cons))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(78,3-78,10); use=FStar.Tactics.NamedView.fsti(78,3-78,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= 228
(Term_constr_id (FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload @x0
@x1)))
 

:pattern ((FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload @x0
@x1))
:qid constructor_distinct_FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload))

:named constructor_distinct_FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(84,3-84,15); use=FStar.Tactics.NamedView.fsti(84,3-84,15)
(forall ((@x0 Term))
 (! (= 233
(Term_constr_id (FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload @x0)))
 

:pattern ((FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload @x0))
:qid constructor_distinct_FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload))

:named constructor_distinct_FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(65,3-65,15); use=FStar.Tactics.NamedView.fsti(65,3-65,15)
(forall ((@x0 Term))
 (! (= 218
(Term_constr_id (FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload @x0)))
 

:pattern ((FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload @x0))
:qid constructor_distinct_FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload))

:named constructor_distinct_FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(71,3-71,11); use=FStar.Tactics.NamedView.fsti(71,3-71,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 223
(Term_constr_id (FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload @x0
@x1
@x2)))
 

:pattern ((FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload @x0
@x1
@x2))
:qid constructor_distinct_FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload))

:named constructor_distinct_FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Tactics.Types.proofstate; Namespace FStar.Stubs.Tactics.Types
(assert (! (= 104
(Term_constr_id FStar.Stubs.Tactics.Types.proofstate))
:named constructor_distinct_FStar.Stubs.Tactics.Types.proofstate))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Tactics.Result.__result; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Success; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Failed; Namespace FStar.Stubs.Tactics.Result
(assert (! 
;; def=FStar.Stubs.Tactics.Result.fsti(24,10-24,18); use=FStar.Stubs.Tactics.Result.fsti(24,10-24,18)
(forall ((@x0 Term))
 (! (= 101
(Term_constr_id (FStar.Stubs.Tactics.Result.__result @x0)))
 

:pattern ((FStar.Stubs.Tactics.Result.__result @x0))
:qid constructor_distinct_FStar.Stubs.Tactics.Result.__result))

:named constructor_distinct_FStar.Stubs.Tactics.Result.__result))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Tactics.Result.__result; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Success; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Failed; Namespace FStar.Stubs.Tactics.Result
(assert (! 
;; def=FStar.Stubs.Tactics.Result.fsti(25,6-25,13); use=FStar.Stubs.Tactics.Result.fsti(25,6-25,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 108
(Term_constr_id (FStar.Stubs.Tactics.Result.Success @x0
@x1
@x2)))
 

:pattern ((FStar.Stubs.Tactics.Result.Success @x0
@x1
@x2))
:qid constructor_distinct_FStar.Stubs.Tactics.Result.Success))

:named constructor_distinct_FStar.Stubs.Tactics.Result.Success))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Tactics.Result.__result; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Success; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Failed; Namespace FStar.Stubs.Tactics.Result
(assert (! 
;; def=FStar.Stubs.Tactics.Result.fsti(26,6-26,12); use=FStar.Stubs.Tactics.Result.fsti(26,6-26,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 113
(Term_constr_id (FStar.Stubs.Tactics.Result.Failed @x0
@x1
@x2)))
 

:pattern ((FStar.Stubs.Tactics.Result.Failed @x0
@x1
@x2))
:qid constructor_distinct_FStar.Stubs.Tactics.Result.Failed))

:named constructor_distinct_FStar.Stubs.Tactics.Result.Failed))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Tactics.Common.TacticFailure; Namespace FStar.Stubs.Tactics.Common
(assert (! 
;; def=FStar.Stubs.Tactics.Common.fsti(12,10-12,23); use=FStar.Stubs.Tactics.Common.fsti(12,10-12,23)
(forall ((@x0 Term))
 (! (= 106
(Term_constr_id (FStar.Stubs.Tactics.Common.TacticFailure @x0)))
 

:pattern ((FStar.Stubs.Tactics.Common.TacticFailure @x0))
:qid constructor_distinct_FStar.Stubs.Tactics.Common.TacticFailure))

:named constructor_distinct_FStar.Stubs.Tactics.Common.TacticFailure))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (= 103
(Term_constr_id FStar.Stubs.Reflection.V2.Data.vconst))
:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.vconst))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (= 405
(Term_constr_id FStar.Stubs.Reflection.V2.Data.term_view))
:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.term_view))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.pattern; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Constant; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Cons; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (= 179
(Term_constr_id FStar.Stubs.Reflection.V2.Data.pattern))
:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.pattern))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.namedv_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Mknamedv_view; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (= 268
(Term_constr_id FStar.Stubs.Reflection.V2.Data.namedv_view))
:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.namedv_view))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.binder_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Mkbinder_view; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (= 300
(Term_constr_id FStar.Stubs.Reflection.V2.Data.binder_view))
:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.binder_view))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.aqualv; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Implicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Explicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Equality; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Meta; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (= 240
(Term_constr_id FStar.Stubs.Reflection.V2.Data.aqualv))
:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.aqualv))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(141,4-141,10); use=FStar.Stubs.Reflection.V2.Data.fsti(141,4-141,10)
(forall ((@x0 Term))
 (! (= 411
(Term_constr_id (FStar.Stubs.Reflection.V2.Data.Tv_Var @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_Var @x0))
:qid constructor_distinct_FStar.Stubs.Reflection.V2.Data.Tv_Var))

:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.Tv_Var))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(151,4-151,11); use=FStar.Stubs.Reflection.V2.Data.fsti(151,4-151,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= 461
(Term_constr_id (FStar.Stubs.Reflection.V2.Data.Tv_Uvar @x0
@x1)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_Uvar @x0
@x1))
:qid constructor_distinct_FStar.Stubs.Reflection.V2.Data.Tv_Uvar))

:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.Tv_Uvar))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (= 488
(Term_constr_id FStar.Stubs.Reflection.V2.Data.Tv_Unsupp))
:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.Tv_Unsupp))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (= 486
(Term_constr_id FStar.Stubs.Reflection.V2.Data.Tv_Unknown))
:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.Tv_Unknown))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(144,4-144,12); use=FStar.Stubs.Reflection.V2.Data.fsti(144,4-144,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= 426
(Term_constr_id (FStar.Stubs.Reflection.V2.Data.Tv_UInst @x0
@x1)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_UInst @x0
@x1))
:qid constructor_distinct_FStar.Stubs.Reflection.V2.Data.Tv_UInst))

:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.Tv_UInst))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(148,4-148,11); use=FStar.Stubs.Reflection.V2.Data.fsti(148,4-148,11)
(forall ((@x0 Term))
 (! (= 446
(Term_constr_id (FStar.Stubs.Reflection.V2.Data.Tv_Type @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_Type @x0))
:qid constructor_distinct_FStar.Stubs.Reflection.V2.Data.Tv_Type))

:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.Tv_Type))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(149,4-149,13); use=FStar.Stubs.Reflection.V2.Data.fsti(149,4-149,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= 451
(Term_constr_id (FStar.Stubs.Reflection.V2.Data.Tv_Refine @x0
@x1)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_Refine @x0
@x1))
:qid constructor_distinct_FStar.Stubs.Reflection.V2.Data.Tv_Refine))

:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.Tv_Refine))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(153,4-153,12); use=FStar.Stubs.Reflection.V2.Data.fsti(153,4-153,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 471
(Term_constr_id (FStar.Stubs.Reflection.V2.Data.Tv_Match @x0
@x1
@x2)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_Match @x0
@x1
@x2))
:qid constructor_distinct_FStar.Stubs.Reflection.V2.Data.Tv_Match))

:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.Tv_Match))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(152,4-152,10); use=FStar.Stubs.Reflection.V2.Data.fsti(152,4-152,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= 466
(Term_constr_id (FStar.Stubs.Reflection.V2.Data.Tv_Let @x0
@x1
@x2
@x3
@x4)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_Let @x0
@x1
@x2
@x3
@x4))
:qid constructor_distinct_FStar.Stubs.Reflection.V2.Data.Tv_Let))

:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.Tv_Let))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(143,4-143,11); use=FStar.Stubs.Reflection.V2.Data.fsti(143,4-143,11)
(forall ((@x0 Term))
 (! (= 421
(Term_constr_id (FStar.Stubs.Reflection.V2.Data.Tv_FVar @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_FVar @x0))
:qid constructor_distinct_FStar.Stubs.Reflection.V2.Data.Tv_FVar))

:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.Tv_FVar))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(150,4-150,12); use=FStar.Stubs.Reflection.V2.Data.fsti(150,4-150,12)
(forall ((@x0 Term))
 (! (= 456
(Term_constr_id (FStar.Stubs.Reflection.V2.Data.Tv_Const @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_Const @x0))
:qid constructor_distinct_FStar.Stubs.Reflection.V2.Data.Tv_Const))

:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.Tv_Const))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(142,4-142,11); use=FStar.Stubs.Reflection.V2.Data.fsti(142,4-142,11)
(forall ((@x0 Term))
 (! (= 416
(Term_constr_id (FStar.Stubs.Reflection.V2.Data.Tv_BVar @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_BVar @x0))
:qid constructor_distinct_FStar.Stubs.Reflection.V2.Data.Tv_BVar))

:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.Tv_BVar))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(154,4-154,16); use=FStar.Stubs.Reflection.V2.Data.fsti(154,4-154,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 476
(Term_constr_id (FStar.Stubs.Reflection.V2.Data.Tv_AscribedT @x0
@x1
@x2
@x3)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_AscribedT @x0
@x1
@x2
@x3))
:qid constructor_distinct_FStar.Stubs.Reflection.V2.Data.Tv_AscribedT))

:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.Tv_AscribedT))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(155,4-155,16); use=FStar.Stubs.Reflection.V2.Data.fsti(155,4-155,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 481
(Term_constr_id (FStar.Stubs.Reflection.V2.Data.Tv_AscribedC @x0
@x1
@x2
@x3)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_AscribedC @x0
@x1
@x2
@x3))
:qid constructor_distinct_FStar.Stubs.Reflection.V2.Data.Tv_AscribedC))

:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.Tv_AscribedC))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(147,4-147,12); use=FStar.Stubs.Reflection.V2.Data.fsti(147,4-147,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= 441
(Term_constr_id (FStar.Stubs.Reflection.V2.Data.Tv_Arrow @x0
@x1)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_Arrow @x0
@x1))
:qid constructor_distinct_FStar.Stubs.Reflection.V2.Data.Tv_Arrow))

:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.Tv_Arrow))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(145,4-145,10); use=FStar.Stubs.Reflection.V2.Data.fsti(145,4-145,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= 431
(Term_constr_id (FStar.Stubs.Reflection.V2.Data.Tv_App @x0
@x1)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_App @x0
@x1))
:qid constructor_distinct_FStar.Stubs.Reflection.V2.Data.Tv_App))

:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.Tv_App))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(146,4-146,10); use=FStar.Stubs.Reflection.V2.Data.fsti(146,4-146,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= 436
(Term_constr_id (FStar.Stubs.Reflection.V2.Data.Tv_Abs @x0
@x1)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Tv_Abs @x0
@x1))
:qid constructor_distinct_FStar.Stubs.Reflection.V2.Data.Tv_Abs))

:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.Tv_Abs))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.aqualv; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Implicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Explicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Equality; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Meta; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(80,4-80,10); use=FStar.Stubs.Reflection.V2.Data.fsti(80,4-80,10)
(forall ((@x0 Term))
 (! (= 252
(Term_constr_id (FStar.Stubs.Reflection.V2.Data.Q_Meta @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Q_Meta @x0))
:qid constructor_distinct_FStar.Stubs.Reflection.V2.Data.Q_Meta))

:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.Q_Meta))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.aqualv; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Implicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Explicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Equality; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Meta; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (= 246
(Term_constr_id FStar.Stubs.Reflection.V2.Data.Q_Implicit))
:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.Q_Implicit))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.aqualv; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Implicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Explicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Equality; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Meta; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (= 248
(Term_constr_id FStar.Stubs.Reflection.V2.Data.Q_Explicit))
:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.Q_Explicit))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.aqualv; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Implicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Explicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Equality; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Meta; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (= 250
(Term_constr_id FStar.Stubs.Reflection.V2.Data.Q_Equality))
:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.Q_Equality))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.pattern; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Constant; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Cons; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(63,3-63,10); use=FStar.Stubs.Reflection.V2.Data.fsti(63,3-63,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= 195
(Term_constr_id (FStar.Stubs.Reflection.V2.Data.Pat_Var @x0
@x1)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Pat_Var @x0
@x1))
:qid constructor_distinct_FStar.Stubs.Reflection.V2.Data.Pat_Var))

:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.Pat_Var))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.pattern; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Constant; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Cons; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(69,3-69,15); use=FStar.Stubs.Reflection.V2.Data.fsti(69,3-69,15)
(forall ((@x0 Term))
 (! (= 200
(Term_constr_id (FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term @x0))
:qid constructor_distinct_FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term))

:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.pattern; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Constant; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Cons; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(46,3-46,15); use=FStar.Stubs.Reflection.V2.Data.fsti(46,3-46,15)
(forall ((@x0 Term))
 (! (= 185
(Term_constr_id (FStar.Stubs.Reflection.V2.Data.Pat_Constant @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Pat_Constant @x0))
:qid constructor_distinct_FStar.Stubs.Reflection.V2.Data.Pat_Constant))

:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.Pat_Constant))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.pattern; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Constant; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Cons; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(52,3-52,11); use=FStar.Stubs.Reflection.V2.Data.fsti(52,3-52,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 190
(Term_constr_id (FStar.Stubs.Reflection.V2.Data.Pat_Cons @x0
@x1
@x2)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Pat_Cons @x0
@x1
@x2))
:qid constructor_distinct_FStar.Stubs.Reflection.V2.Data.Pat_Cons))

:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.Pat_Cons))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.namedv_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Mknamedv_view; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(86,5-86,16); use=FStar.Stubs.Reflection.V2.Data.fsti(86,5-86,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 274
(Term_constr_id (FStar.Stubs.Reflection.V2.Data.Mknamedv_view @x0
@x1
@x2)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Mknamedv_view @x0
@x1
@x2))
:qid constructor_distinct_FStar.Stubs.Reflection.V2.Data.Mknamedv_view))

:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.Mknamedv_view))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.binder_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Mkbinder_view; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(103,5-103,16); use=FStar.Stubs.Reflection.V2.Data.fsti(103,5-103,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 306
(Term_constr_id (FStar.Stubs.Reflection.V2.Data.Mkbinder_view @x0
@x1
@x2
@x3)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Mkbinder_view @x0
@x1
@x2
@x3))
:qid constructor_distinct_FStar.Stubs.Reflection.V2.Data.Mkbinder_view))

:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.Mkbinder_view))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (= 109
(Term_constr_id FStar.Stubs.Reflection.V2.Data.C_Unit))
:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.C_Unit))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (= 116
(Term_constr_id FStar.Stubs.Reflection.V2.Data.C_True))
:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.C_True))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(32,4-32,12); use=FStar.Stubs.Reflection.V2.Data.fsti(32,4-32,12)
(forall ((@x0 Term))
 (! (= 120
(Term_constr_id (FStar.Stubs.Reflection.V2.Data.C_String @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.C_String @x0))
:qid constructor_distinct_FStar.Stubs.Reflection.V2.Data.C_String))

:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.C_String))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (= 130
(Term_constr_id FStar.Stubs.Reflection.V2.Data.C_Reify))
:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.C_Reify))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(35,4-35,13); use=FStar.Stubs.Reflection.V2.Data.fsti(35,4-35,13)
(forall ((@x0 Term))
 (! (= 132
(Term_constr_id (FStar.Stubs.Reflection.V2.Data.C_Reflect @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.C_Reflect @x0))
:qid constructor_distinct_FStar.Stubs.Reflection.V2.Data.C_Reflect))

:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.C_Reflect))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(36,4-36,10); use=FStar.Stubs.Reflection.V2.Data.fsti(36,4-36,10)
(forall ((@x0 Term))
 (! (= 137
(Term_constr_id (FStar.Stubs.Reflection.V2.Data.C_Real @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.C_Real @x0))
:qid constructor_distinct_FStar.Stubs.Reflection.V2.Data.C_Real))

:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.C_Real))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(33,4-33,11); use=FStar.Stubs.Reflection.V2.Data.fsti(33,4-33,11)
(forall ((@x0 Term))
 (! (= 125
(Term_constr_id (FStar.Stubs.Reflection.V2.Data.C_Range @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.C_Range @x0))
:qid constructor_distinct_FStar.Stubs.Reflection.V2.Data.C_Range))

:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.C_Range))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(29,4-29,9); use=FStar.Stubs.Reflection.V2.Data.fsti(29,4-29,9)
(forall ((@x0 Term))
 (! (= 111
(Term_constr_id (FStar.Stubs.Reflection.V2.Data.C_Int @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.C_Int @x0))
:qid constructor_distinct_FStar.Stubs.Reflection.V2.Data.C_Int))

:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.C_Int))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (= 118
(Term_constr_id FStar.Stubs.Reflection.V2.Data.C_False))
:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.C_False))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.universe; Namespace FStar.Stubs.Reflection.Types
(assert (! (= 137
(Term_constr_id FStar.Stubs.Reflection.Types.universe))
:named constructor_distinct_FStar.Stubs.Reflection.Types.universe))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.term; Namespace FStar.Stubs.Reflection.Types
(assert (! (= 110
(Term_constr_id FStar.Stubs.Reflection.Types.term))
:named constructor_distinct_FStar.Stubs.Reflection.Types.term))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.namedv; Namespace FStar.Stubs.Reflection.Types
(assert (! (= 101
(Term_constr_id FStar.Stubs.Reflection.Types.namedv))
:named constructor_distinct_FStar.Stubs.Reflection.Types.namedv))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.fv; Namespace FStar.Stubs.Reflection.Types
(assert (! (= 116
(Term_constr_id FStar.Stubs.Reflection.Types.fv))
:named constructor_distinct_FStar.Stubs.Reflection.Types.fv))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.env; Namespace FStar.Stubs.Reflection.Types
(assert (! (= 113
(Term_constr_id FStar.Stubs.Reflection.Types.env))
:named constructor_distinct_FStar.Stubs.Reflection.Types.env))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.ctx_uvar_and_subst; Namespace FStar.Stubs.Reflection.Types
(assert (! (= 125
(Term_constr_id FStar.Stubs.Reflection.Types.ctx_uvar_and_subst))
:named constructor_distinct_FStar.Stubs.Reflection.Types.ctx_uvar_and_subst))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.comp; Namespace FStar.Stubs.Reflection.Types
(assert (! (= 119
(Term_constr_id FStar.Stubs.Reflection.Types.comp))
:named constructor_distinct_FStar.Stubs.Reflection.Types.comp))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.bv; Namespace FStar.Stubs.Reflection.Types
(assert (! (= 104
(Term_constr_id FStar.Stubs.Reflection.Types.bv))
:named constructor_distinct_FStar.Stubs.Reflection.Types.bv))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.binder; Namespace FStar.Stubs.Reflection.Types
(assert (! (= 107
(Term_constr_id FStar.Stubs.Reflection.Types.binder))
:named constructor_distinct_FStar.Stubs.Reflection.Types.binder))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Sealed.sealed; Namespace FStar.Sealed
(assert (! 
;; def=FStar.Sealed.fsti(34,9-34,15); use=FStar.Sealed.fsti(34,9-34,15)
(forall ((@x0 Term))
 (! (= 103
(Term_constr_id (FStar.Sealed.sealed @x0)))
 

:pattern ((FStar.Sealed.sealed @x0))
:qid constructor_distinct_FStar.Sealed.sealed))

:named constructor_distinct_FStar.Sealed.sealed))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Range.__range; Namespace FStar.Range
(assert (! (= 101
(Term_constr_id FStar.Range.__range))
:named constructor_distinct_FStar.Range.__range))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pprint.document; Namespace FStar.Pprint
(assert (! (= 101
(Term_constr_id FStar.Pprint.document))
:named constructor_distinct_FStar.Pprint.document))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(730,5-730,11); use=FStar.Pervasives.fsti(730,5-730,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= 402
(Term_constr_id (FStar.Pervasives.either @x0
@x1)))
 

:pattern ((FStar.Pervasives.either @x0
@x1))
:qid constructor_distinct_FStar.Pervasives.either))

:named constructor_distinct_FStar.Pervasives.either))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,5-65,11); use=FStar.Pervasives.Native.fst(65,5-65,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 146
(Term_constr_id (FStar.Pervasives.Native.tuple3 @x0
@x1
@x2)))
 

:pattern ((FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))
:qid constructor_distinct_FStar.Pervasives.Native.tuple3))

:named constructor_distinct_FStar.Pervasives.Native.tuple3))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= 125
(Term_constr_id (FStar.Pervasives.Native.tuple2 @x0
@x1)))
 

:pattern ((FStar.Pervasives.Native.tuple2 @x0
@x1))
:qid constructor_distinct_FStar.Pervasives.Native.tuple2))

:named constructor_distinct_FStar.Pervasives.Native.tuple2))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@x0 Term))
 (! (= 101
(Term_constr_id (FStar.Pervasives.Native.option @x0)))
 

:pattern ((FStar.Pervasives.Native.option @x0))
:qid constructor_distinct_FStar.Pervasives.Native.option))

:named constructor_distinct_FStar.Pervasives.Native.option))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= 113
(Term_constr_id (FStar.Pervasives.Native.Some @x0
@x1)))
 

:pattern ((FStar.Pervasives.Native.Some @x0
@x1))
:qid constructor_distinct_FStar.Pervasives.Native.Some))

:named constructor_distinct_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@x0 Term))
 (! (= 108
(Term_constr_id (FStar.Pervasives.Native.None @x0)))
 

:pattern ((FStar.Pervasives.Native.None @x0))
:qid constructor_distinct_FStar.Pervasives.Native.None))

:named constructor_distinct_FStar.Pervasives.Native.None))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= 153
(Term_constr_id (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5)))
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid constructor_distinct_FStar.Pervasives.Native.Mktuple3))

:named constructor_distinct_FStar.Pervasives.Native.Mktuple3))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 132
(Term_constr_id (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3)))
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid constructor_distinct_FStar.Pervasives.Native.Mktuple2))

:named constructor_distinct_FStar.Pervasives.Native.Mktuple2))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(732,4-732,7); use=FStar.Pervasives.fsti(732,4-732,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 414
(Term_constr_id (FStar.Pervasives.Inr @x0
@x1
@x2)))
 

:pattern ((FStar.Pervasives.Inr @x0
@x1
@x2))
:qid constructor_distinct_FStar.Pervasives.Inr))

:named constructor_distinct_FStar.Pervasives.Inr))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(731,4-731,7); use=FStar.Pervasives.fsti(731,4-731,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 409
(Term_constr_id (FStar.Pervasives.Inl @x0
@x1
@x2)))
 

:pattern ((FStar.Pervasives.Inl @x0
@x1
@x2))
:qid constructor_distinct_FStar.Pervasives.Inl))

:named constructor_distinct_FStar.Pervasives.Inl))
;;;;;;;;;;;;;;;;Constructor base
;;; Fact-ids: Name FStar.Stubs.Tactics.Common.TacticFailure; Namespace FStar.Stubs.Tactics.Common
(assert (! 
;; def=FStar.Stubs.Tactics.Common.fsti(12,10-12,23); use=FStar.Stubs.Tactics.Common.fsti(12,10-12,23)
(forall ((@x0 Term))
 (! (implies (is-FStar.Stubs.Tactics.Common.TacticFailure (FStar.Stubs.Tactics.Common.TacticFailure @x0))
(= (FStar.Stubs.Tactics.Common.TacticFailure @x0)
(FStar.Stubs.Tactics.Common.TacticFailure@base @x0)))
 

:pattern ((FStar.Stubs.Tactics.Common.TacticFailure @x0))
:qid constructor_base_FStar.Stubs.Tactics.Common.TacticFailure))

:named constructor_base_FStar.Stubs.Tactics.Common.TacticFailure))
;;;;;;;;;;;;;;;;bool typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (forall ((@u0 Bool))
 (! (HasType (BoxBool @u0)
Prims.bool)
 

:pattern ((BoxBool @u0))
:qid bool_typing))
:named bool_typing))
;;;;;;;;;;;;;;;;bool inversion
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.bool)
(is-BoxBool @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.bool))
:qid bool_inversion))
:named bool_inversion))
;;;;;;;;;;;;;;;;b2t typing
;;; Fact-ids: Name Prims.b2t; Namespace Prims
(assert (! 
;; def=Prims.fst(180,5-180,8); use=Prims.fst(180,5-180,8)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.bool)
(HasType (Prims.b2t @x0)
Tm_type))
 

:pattern ((Prims.b2t @x0))
:qid b2t_typing))

:named b2t_typing))
;;;;;;;;;;;;;;;;b2t def
;;; Fact-ids: Name Prims.b2t; Namespace Prims
(assert (! 
;; def=Prims.fst(180,5-180,8); use=Prims.fst(180,5-180,8)
(forall ((@x0 Term))
 (! (= (Valid (Prims.b2t @x0))
(BoxBool_proj_0 @x0))
 

:pattern ((Prims.b2t @x0))
:qid b2t_def))

:named b2t_def))
;;;;;;;;;;;;;;;;Assumption: Prims.list__uu___haseq
;;; Fact-ids: Name Prims.list__uu___haseq; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_type)
(Valid (Prims.hasEq @x0)))
(Valid (Prims.hasEq (Prims.list @x0))))
 

:pattern ((Prims.hasEq (Prims.list @x0)))
:qid assumption_Prims.list__uu___haseq))
:named assumption_Prims.list__uu___haseq))
;;;;;;;;;;;;;;;;Assumption: FStar.Pervasives.either__uu___haseq
;;; Fact-ids: Name FStar.Pervasives.either__uu___haseq; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(Valid (Prims.hasEq @x0))
(Valid (Prims.hasEq @x1)))
(Valid (Prims.hasEq (FStar.Pervasives.either @x0
@x1))))
 

:pattern ((Prims.hasEq (FStar.Pervasives.either @x0
@x1)))
:qid assumption_FStar.Pervasives.either__uu___haseq))
:named assumption_FStar.Pervasives.either__uu___haseq))
;;;;;;;;;;;;;;;;Assumption: FStar.Pervasives.Native.tuple3__uu___haseq
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3__uu___haseq; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(Valid (Prims.hasEq @x0))
(Valid (Prims.hasEq @x1))
(Valid (Prims.hasEq @x2)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))))
 

:pattern ((Prims.hasEq (FStar.Pervasives.Native.tuple3 @x0
@x1
@x2)))
:qid assumption_FStar.Pervasives.Native.tuple3__uu___haseq))
:named assumption_FStar.Pervasives.Native.tuple3__uu___haseq))
;;;;;;;;;;;;;;;;Assumption: FStar.Pervasives.Native.tuple2__uu___haseq
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2__uu___haseq; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(Valid (Prims.hasEq @x0))
(Valid (Prims.hasEq @x1)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple2 @x0
@x1))))
 

:pattern ((Prims.hasEq (FStar.Pervasives.Native.tuple2 @x0
@x1)))
:qid assumption_FStar.Pervasives.Native.tuple2__uu___haseq))
:named assumption_FStar.Pervasives.Native.tuple2__uu___haseq))
;;;;;;;;;;;;;;;;Assumption: FStar.Pervasives.Native.option__uu___haseq
;;; Fact-ids: Name FStar.Pervasives.Native.option__uu___haseq; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_type)
(Valid (Prims.hasEq @x0)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.option @x0))))
 

:pattern ((Prims.hasEq (FStar.Pervasives.Native.option @x0)))
:qid assumption_FStar.Pervasives.Native.option__uu___haseq))
:named assumption_FStar.Pervasives.Native.option__uu___haseq))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! 
;; def=Prims.fst(96,5-96,9); use=Prims.fst(96,5-96,9)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.unit)
(= Prims.unit
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.unit))
:qid Prims_pretyping_f8666440faa91836cc5a13998af863fc))

:named Prims_pretyping_f8666440faa91836cc5a13998af863fc))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! 
;; def=Prims.fst(80,5-80,9); use=Prims.fst(80,5-80,9)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.bool)
(= Prims.bool
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.bool))
:qid Prims_pretyping_f537159ed795b314b4e58c260361ae86))

:named Prims_pretyping_f537159ed795b314b4e58c260361ae86))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! 
;; def=Prims.fst(91,5-91,12); use=Prims.fst(91,5-91,12)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.trivial)
(= Prims.trivial
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.trivial))
:qid Prims_pretyping_e8ffb7d227a1bbf69407a8d2ad2c4c83))

:named Prims_pretyping_e8ffb7d227a1bbf69407a8d2ad2c4c83))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.string; Namespace Prims
(assert (! 
;; def=Prims.fst(239,5-239,11); use=Prims.fst(239,5-239,11)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.string)
(= Prims.string
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.string))
:qid Prims_pretyping_ce036b6b736ef4e0bc3a9ff132a12aed))

:named Prims_pretyping_ce036b6b736ef4e0bc3a9ff132a12aed))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! 
;; def=Prims.fst(514,5-514,8); use=Prims.fst(514,5-514,8)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.int)
(= Prims.int
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.int))
:qid Prims_pretyping_ae567c2fb75be05905677af440075565))

:named Prims_pretyping_ae567c2fb75be05905677af440075565))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(614,5-614,9); use=Prims.fst(614,5-614,9)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(Prims.list @x2))
(= (Prims.list @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(Prims.list @x2)))
:qid Prims_pretyping_3862c4e8ff39bfc3871b6a47e7ff5b2e))

:named Prims_pretyping_3862c4e8ff39bfc3871b6a47e7ff5b2e))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.exn; Namespace Prims
(assert (! 
;; def=Prims.fst(598,5-598,8); use=Prims.fst(598,5-598,8)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.exn)
(= Prims.exn
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.exn))
:qid Prims_pretyping_2feddfe489e78a01f5d2e9b55172b46a))

:named Prims_pretyping_2feddfe489e78a01f5d2e9b55172b46a))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(78,3-78,10); use=FStar.Tactics.NamedView.fsti(78,3-78,10)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
FStar.Tactics.NamedView.pattern__Pat_Var__payload)
(= FStar.Tactics.NamedView.pattern__Pat_Var__payload
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
FStar.Tactics.NamedView.pattern__Pat_Var__payload))
:qid FStar.Tactics.NamedView_pretyping_f8cb91b6cf3588bfd370b95676fca963))

:named FStar.Tactics.NamedView_pretyping_f8cb91b6cf3588bfd370b95676fca963))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(63,5-63,12); use=FStar.Tactics.NamedView.fsti(63,5-63,12)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
FStar.Tactics.NamedView.pattern)
(= FStar.Tactics.NamedView.pattern
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
FStar.Tactics.NamedView.pattern))
:qid FStar.Tactics.NamedView_pretyping_b095297e66da3cf228bdc8f1227bada4))

:named FStar.Tactics.NamedView_pretyping_b095297e66da3cf228bdc8f1227bada4))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(71,3-71,11); use=FStar.Tactics.NamedView.fsti(71,3-71,11)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
FStar.Tactics.NamedView.pattern__Pat_Cons__payload)
(= FStar.Tactics.NamedView.pattern__Pat_Cons__payload
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
FStar.Tactics.NamedView.pattern__Pat_Cons__payload))
:qid FStar.Tactics.NamedView_pretyping_9a3a90422cf007a376da9eec6510ebcf))

:named FStar.Tactics.NamedView_pretyping_9a3a90422cf007a376da9eec6510ebcf))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(65,3-65,15); use=FStar.Tactics.NamedView.fsti(65,3-65,15)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
FStar.Tactics.NamedView.pattern__Pat_Constant__payload)
(= FStar.Tactics.NamedView.pattern__Pat_Constant__payload
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
FStar.Tactics.NamedView.pattern__Pat_Constant__payload))
:qid FStar.Tactics.NamedView_pretyping_5dc2c7571af9d8b40f16b29af3229cf9))

:named FStar.Tactics.NamedView_pretyping_5dc2c7571af9d8b40f16b29af3229cf9))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Tactics.NamedView.pattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.pattern; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Constant; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Cons; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Pat_Dot_Term; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(84,3-84,15); use=FStar.Tactics.NamedView.fsti(84,3-84,15)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload)
(= FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload))
:qid FStar.Tactics.NamedView_pretyping_0c18f6b93a2f839f94942e4946e144cb))

:named FStar.Tactics.NamedView_pretyping_0c18f6b93a2f839f94942e4946e144cb))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Stubs.Tactics.Types.proofstate; Namespace FStar.Stubs.Tactics.Types
(assert (! 
;; def=FStar.Stubs.Tactics.Types.fsti(23,16-23,26); use=FStar.Stubs.Tactics.Types.fsti(23,16-23,26)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
FStar.Stubs.Tactics.Types.proofstate)
(= FStar.Stubs.Tactics.Types.proofstate
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
FStar.Stubs.Tactics.Types.proofstate))
:qid FStar.Stubs.Tactics.Types_pretyping_5fa2548ebd57526a21fa3c80850bae0a))

:named FStar.Stubs.Tactics.Types_pretyping_5fa2548ebd57526a21fa3c80850bae0a))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Stubs.Tactics.Result.__result; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Success; Namespace FStar.Stubs.Tactics.Result; Name FStar.Stubs.Tactics.Result.Failed; Namespace FStar.Stubs.Tactics.Result
(assert (! 
;; def=FStar.Stubs.Tactics.Result.fsti(24,10-24,18); use=FStar.Stubs.Tactics.Result.fsti(24,10-24,18)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Stubs.Tactics.Result.__result @x2))
(= (FStar.Stubs.Tactics.Result.__result @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Stubs.Tactics.Result.__result @x2)))
:qid FStar.Stubs.Tactics.Result_pretyping_ea758e3e3461681389cb1a7a617d9310))

:named FStar.Stubs.Tactics.Result_pretyping_ea758e3e3461681389cb1a7a617d9310))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.pattern; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Constant; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Cons; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(44,5-44,12); use=FStar.Stubs.Reflection.V2.Data.fsti(44,5-44,12)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
FStar.Stubs.Reflection.V2.Data.pattern)
(= FStar.Stubs.Reflection.V2.Data.pattern
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
FStar.Stubs.Reflection.V2.Data.pattern))
:qid FStar.Stubs.Reflection.V2.Data_pretyping_f6f3059e71a4af19e0916e39904f564a))

:named FStar.Stubs.Reflection.V2.Data_pretyping_f6f3059e71a4af19e0916e39904f564a))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.vconst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Unit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Int; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_True; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_False; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_String; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Range; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reify; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Reflect; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Real; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(27,5-27,11); use=FStar.Stubs.Reflection.V2.Data.fsti(27,5-27,11)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
FStar.Stubs.Reflection.V2.Data.vconst)
(= FStar.Stubs.Reflection.V2.Data.vconst
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
FStar.Stubs.Reflection.V2.Data.vconst))
:qid FStar.Stubs.Reflection.V2.Data_pretyping_99d6d2b40667d88a9b3c35fb2d11826a))

:named FStar.Stubs.Reflection.V2.Data_pretyping_99d6d2b40667d88a9b3c35fb2d11826a))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.namedv_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Mknamedv_view; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(86,5-86,16); use=FStar.Stubs.Reflection.V2.Data.fsti(86,5-86,16)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
FStar.Stubs.Reflection.V2.Data.namedv_view)
(= FStar.Stubs.Reflection.V2.Data.namedv_view
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
FStar.Stubs.Reflection.V2.Data.namedv_view))
:qid FStar.Stubs.Reflection.V2.Data_pretyping_877ace45aeae6fd601d7a9b75d8a0541))

:named FStar.Stubs.Reflection.V2.Data_pretyping_877ace45aeae6fd601d7a9b75d8a0541))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.binder_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Mkbinder_view; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(103,5-103,16); use=FStar.Stubs.Reflection.V2.Data.fsti(103,5-103,16)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
FStar.Stubs.Reflection.V2.Data.binder_view)
(= FStar.Stubs.Reflection.V2.Data.binder_view
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
FStar.Stubs.Reflection.V2.Data.binder_view))
:qid FStar.Stubs.Reflection.V2.Data_pretyping_639bd2be760a1eade190d7619eaaf225))

:named FStar.Stubs.Reflection.V2.Data_pretyping_639bd2be760a1eade190d7619eaaf225))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.aqualv; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Implicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Explicit; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Equality; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Q_Meta; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(76,5-76,11); use=FStar.Stubs.Reflection.V2.Data.fsti(76,5-76,11)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
FStar.Stubs.Reflection.V2.Data.aqualv)
(= FStar.Stubs.Reflection.V2.Data.aqualv
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
FStar.Stubs.Reflection.V2.Data.aqualv))
:qid FStar.Stubs.Reflection.V2.Data_pretyping_25489d564b00c456a9aebf5245eb3f03))

:named FStar.Stubs.Reflection.V2.Data_pretyping_25489d564b00c456a9aebf5245eb3f03))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.term_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Var; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_BVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_FVar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_UInst; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_App; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Abs; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Arrow; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Type; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Refine; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Const; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Uvar; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Let; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Match; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedT; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_AscribedC; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unknown; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Tv_Unsupp; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(140,5-140,14); use=FStar.Stubs.Reflection.V2.Data.fsti(140,5-140,14)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
FStar.Stubs.Reflection.V2.Data.term_view)
(= FStar.Stubs.Reflection.V2.Data.term_view
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
FStar.Stubs.Reflection.V2.Data.term_view))
:qid FStar.Stubs.Reflection.V2.Data_pretyping_250ec2f946e12594618df379d0cb7f9b))

:named FStar.Stubs.Reflection.V2.Data_pretyping_250ec2f946e12594618df379d0cb7f9b))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.fv; Namespace FStar.Stubs.Reflection.Types
(assert (! 
;; def=FStar.Stubs.Reflection.Types.fsti(27,16-27,18); use=FStar.Stubs.Reflection.Types.fsti(27,16-27,18)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
FStar.Stubs.Reflection.Types.fv)
(= FStar.Stubs.Reflection.Types.fv
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
FStar.Stubs.Reflection.Types.fv))
:qid FStar.Stubs.Reflection.Types_pretyping_f37434771f1714f89de453177d8cd6a9))

:named FStar.Stubs.Reflection.Types_pretyping_f37434771f1714f89de453177d8cd6a9))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.env; Namespace FStar.Stubs.Reflection.Types
(assert (! 
;; def=FStar.Stubs.Reflection.Types.fsti(26,16-26,19); use=FStar.Stubs.Reflection.Types.fsti(26,16-26,19)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
FStar.Stubs.Reflection.Types.env)
(= FStar.Stubs.Reflection.Types.env
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
FStar.Stubs.Reflection.Types.env))
:qid FStar.Stubs.Reflection.Types_pretyping_d880a66b21ec85b3fa80d2570aa5edd8))

:named FStar.Stubs.Reflection.Types_pretyping_d880a66b21ec85b3fa80d2570aa5edd8))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.namedv; Namespace FStar.Stubs.Reflection.Types
(assert (! 
;; def=FStar.Stubs.Reflection.Types.fsti(21,16-21,22); use=FStar.Stubs.Reflection.Types.fsti(21,16-21,22)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
FStar.Stubs.Reflection.Types.namedv)
(= FStar.Stubs.Reflection.Types.namedv
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
FStar.Stubs.Reflection.Types.namedv))
:qid FStar.Stubs.Reflection.Types_pretyping_a3e5345c6f091cb3afabb754f1cc0d2b))

:named FStar.Stubs.Reflection.Types_pretyping_a3e5345c6f091cb3afabb754f1cc0d2b))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.binder; Namespace FStar.Stubs.Reflection.Types
(assert (! 
;; def=FStar.Stubs.Reflection.Types.fsti(23,16-23,22); use=FStar.Stubs.Reflection.Types.fsti(23,16-23,22)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
FStar.Stubs.Reflection.Types.binder)
(= FStar.Stubs.Reflection.Types.binder
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
FStar.Stubs.Reflection.Types.binder))
:qid FStar.Stubs.Reflection.Types_pretyping_9b991758ca636436bc8d1f0999dd3cf1))

:named FStar.Stubs.Reflection.Types_pretyping_9b991758ca636436bc8d1f0999dd3cf1))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.bv; Namespace FStar.Stubs.Reflection.Types
(assert (! 
;; def=FStar.Stubs.Reflection.Types.fsti(22,16-22,18); use=FStar.Stubs.Reflection.Types.fsti(22,16-22,18)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
FStar.Stubs.Reflection.Types.bv)
(= FStar.Stubs.Reflection.Types.bv
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
FStar.Stubs.Reflection.Types.bv))
:qid FStar.Stubs.Reflection.Types_pretyping_9b8e6a12c372ca559985520083f6f237))

:named FStar.Stubs.Reflection.Types_pretyping_9b8e6a12c372ca559985520083f6f237))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.ctx_uvar_and_subst; Namespace FStar.Stubs.Reflection.Types
(assert (! 
;; def=FStar.Stubs.Reflection.Types.fsti(30,16-30,34); use=FStar.Stubs.Reflection.Types.fsti(30,16-30,34)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
FStar.Stubs.Reflection.Types.ctx_uvar_and_subst)
(= FStar.Stubs.Reflection.Types.ctx_uvar_and_subst
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
FStar.Stubs.Reflection.Types.ctx_uvar_and_subst))
:qid FStar.Stubs.Reflection.Types_pretyping_73df2ba22e0bb3beb9227d98b71ce287))

:named FStar.Stubs.Reflection.Types_pretyping_73df2ba22e0bb3beb9227d98b71ce287))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.comp; Namespace FStar.Stubs.Reflection.Types
(assert (! 
;; def=FStar.Stubs.Reflection.Types.fsti(28,16-28,20); use=FStar.Stubs.Reflection.Types.fsti(28,16-28,20)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
FStar.Stubs.Reflection.Types.comp)
(= FStar.Stubs.Reflection.Types.comp
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
FStar.Stubs.Reflection.Types.comp))
:qid FStar.Stubs.Reflection.Types_pretyping_6810d13cb9b08df0f69a36697286e796))

:named FStar.Stubs.Reflection.Types_pretyping_6810d13cb9b08df0f69a36697286e796))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.term; Namespace FStar.Stubs.Reflection.Types
(assert (! 
;; def=FStar.Stubs.Reflection.Types.fsti(25,16-25,20); use=FStar.Stubs.Reflection.Types.fsti(25,16-25,20)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
FStar.Stubs.Reflection.Types.term)
(= FStar.Stubs.Reflection.Types.term
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
FStar.Stubs.Reflection.Types.term))
:qid FStar.Stubs.Reflection.Types_pretyping_651778f725c07b6c259161d48455093d))

:named FStar.Stubs.Reflection.Types_pretyping_651778f725c07b6c259161d48455093d))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.universe; Namespace FStar.Stubs.Reflection.Types
(assert (! 
;; def=FStar.Stubs.Reflection.Types.fsti(35,16-35,24); use=FStar.Stubs.Reflection.Types.fsti(35,16-35,24)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
FStar.Stubs.Reflection.Types.universe)
(= FStar.Stubs.Reflection.Types.universe
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
FStar.Stubs.Reflection.Types.universe))
:qid FStar.Stubs.Reflection.Types_pretyping_1e7d50258c90a67cd2d1434776b23416))

:named FStar.Stubs.Reflection.Types_pretyping_1e7d50258c90a67cd2d1434776b23416))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Sealed.sealed; Namespace FStar.Sealed
(assert (! 
;; def=FStar.Sealed.fsti(34,9-34,15); use=FStar.Sealed.fsti(34,9-34,15)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Sealed.sealed @x2))
(= (FStar.Sealed.sealed @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Sealed.sealed @x2)))
:qid FStar.Sealed_pretyping_1ca2a4440b3b942a4d7dd2ab3cd3f1bf))

:named FStar.Sealed_pretyping_1ca2a4440b3b942a4d7dd2ab3cd3f1bf))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Range.__range; Namespace FStar.Range
(assert (! 
;; def=FStar.Range.fsti(33,16-33,23); use=FStar.Range.fsti(33,16-33,23)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
FStar.Range.__range)
(= FStar.Range.__range
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
FStar.Range.__range))
:qid FStar.Range_pretyping_f74555f406a5a5cdaf563561d6f78f8d))

:named FStar.Range_pretyping_f74555f406a5a5cdaf563561d6f78f8d))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Pprint.document; Namespace FStar.Pprint
(assert (! 
;; def=FStar.Pprint.fsti(37,4-37,12); use=FStar.Pprint.fsti(37,4-37,12)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
FStar.Pprint.document)
(= FStar.Pprint.document
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
FStar.Pprint.document))
:qid FStar.Pprint_pretyping_e6d0430473ed41348d665e1a22697d2a))

:named FStar.Pprint_pretyping_e6d0430473ed41348d665e1a22697d2a))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(730,5-730,11); use=FStar.Pervasives.fsti(730,5-730,11)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Pervasives.either @x2
@x3))
(= (FStar.Pervasives.either @x2
@x3)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Pervasives.either @x2
@x3)))
:qid FStar.Pervasives_pretyping_b33635a76275268b8c60db6fa0677ca6))

:named FStar.Pervasives_pretyping_b33635a76275268b8c60db6fa0677ca6))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.option @x2))
(= (FStar.Pervasives.Native.option @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.option @x2)))
:qid FStar.Pervasives.Native_pretyping_b53dbd183c526bc5d0f20d7b966ae125))

:named FStar.Pervasives.Native_pretyping_b53dbd183c526bc5d0f20d7b966ae125))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple2 @x2
@x3))
(= (FStar.Pervasives.Native.tuple2 @x2
@x3)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple2 @x2
@x3)))
:qid FStar.Pervasives.Native_pretyping_4894c30cf477acf9a27e7a844279eb08))

:named FStar.Pervasives.Native_pretyping_4894c30cf477acf9a27e7a844279eb08))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,5-65,11); use=FStar.Pervasives.Native.fst(65,5-65,11)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple3 @x2
@x3
@x4))
(= (FStar.Pervasives.Native.tuple3 @x2
@x3
@x4)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple3 @x2
@x3
@x4)))
:qid FStar.Pervasives.Native_pretyping_3c3cf72e1bf7b1d6f8b0873a4feb6ec5))

:named FStar.Pervasives.Native_pretyping_3c3cf72e1bf7b1d6f8b0873a4feb6ec5))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name Prims.pow2; Namespace Prims
(assert (! 
;; def=Prims.fst(708,8-708,12); use=Prims.fst(708,8-708,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (= (Prims.pow2.fuel_instrumented (SFuel @u0)
@x1)
(Prims.pow2.fuel_instrumented ZFuel
@x1))
 

:pattern ((Prims.pow2.fuel_instrumented (SFuel @u0)
@x1))
:qid @fuel_irrelevance_Prims.pow2.fuel_instrumented))

:named @fuel_irrelevance_Prims.pow2.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Reflection.V2.Derived.mk_app; Namespace FStar.Reflection.V2.Derived
(assert (! 
;; def=FStar.Reflection.V2.Derived.fst(91,8-91,14); use=FStar.Reflection.V2.Derived.fst(91,8-91,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.Reflection.V2.Derived.mk_app.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.Reflection.V2.Derived.mk_app.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.Reflection.V2.Derived.mk_app.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.Reflection.V2.Derived.mk_app.fuel_instrumented))

:named @fuel_irrelevance_FStar.Reflection.V2.Derived.mk_app.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.length; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(74,8-74,14); use=FStar.List.Tot.Base.fst(74,8-74,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.length.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.List.Tot.Base.length.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.length.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.List.Tot.Base.length.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.length.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name Prims.pow2; Namespace Prims
(assert (! 
;; def=Prims.fst(708,8-708,12); use=Prims.fst(708,8-708,12)
(forall ((@x0 Term))
 (! (= (Prims.pow2 @x0)
(Prims.pow2.fuel_instrumented MaxFuel
@x0))
 

:pattern ((Prims.pow2 @x0))
:qid @fuel_correspondence_Prims.pow2.fuel_instrumented))

:named @fuel_correspondence_Prims.pow2.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Reflection.V2.Derived.mk_app; Namespace FStar.Reflection.V2.Derived
(assert (! 
;; def=FStar.Reflection.V2.Derived.fst(91,8-91,14); use=FStar.Reflection.V2.Derived.fst(91,8-91,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Reflection.V2.Derived.mk_app @x0
@x1)
(FStar.Reflection.V2.Derived.mk_app.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.Reflection.V2.Derived.mk_app @x0
@x1))
:qid @fuel_correspondence_FStar.Reflection.V2.Derived.mk_app.fuel_instrumented))

:named @fuel_correspondence_FStar.Reflection.V2.Derived.mk_app.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.length; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(74,8-74,14); use=FStar.List.Tot.Base.fst(74,8-74,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.List.Tot.Base.length @x0
@x1)
(FStar.List.Tot.Base.length.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.List.Tot.Base.length @x0
@x1))
:qid @fuel_correspondence_FStar.List.Tot.Base.length.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.length.fuel_instrumented))
(push) ;; push{2

; Starting query at MiniParse.Spec.TEnum.fst(25,2-44,7)

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.TEnum.mk_tenum_branches (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.TEnum.mk_tenum_branches@tok () Term)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
;;;;;;;;;;;;;;;;_: FStar.Stubs.Tactics.Result.__result (Prims.list FStar.Tactics.NamedView.branch) -> Type
(declare-fun Tm_arrow_d0e74b3e3df5819bf58cb3756a7887b4 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_d0e74b3e3df5819bf58cb3756a7887b4
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_d0e74b3e3df5819bf58cb3756a7887b4
Tm_type)
:named kinding_Tm_arrow_d0e74b3e3df5819bf58cb3756a7887b4))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.Tactics.Effect.fsti(28,17-28,36); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_d0e74b3e3df5819bf58cb3756a7887b4)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_d0e74b3e3df5819bf58cb3756a7887b4))
:qid MiniParse.Spec.TEnum_pre_typing_Tm_arrow_d0e74b3e3df5819bf58cb3756a7887b4))

:named MiniParse.Spec.TEnum_pre_typing_Tm_arrow_d0e74b3e3df5819bf58cb3756a7887b4))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_d0e74b3e3df5819bf58cb3756a7887b4
;;; Fact-ids: 
(assert (! 
;; def=FStar.Tactics.Effect.fsti(28,17-28,36); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_d0e74b3e3df5819bf58cb3756a7887b4)
(and 
;; def=FStar.Tactics.Effect.fsti(28,17-28,36); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.Stubs.Tactics.Result.__result (Prims.list FStar.Tactics.NamedView.branch)))
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid MiniParse.Spec.TEnum_interpretation_Tm_arrow_d0e74b3e3df5819bf58cb3756a7887b4.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_d0e74b3e3df5819bf58cb3756a7887b4))
:qid MiniParse.Spec.TEnum_interpretation_Tm_arrow_d0e74b3e3df5819bf58cb3756a7887b4))

:named MiniParse.Spec.TEnum_interpretation_Tm_arrow_d0e74b3e3df5819bf58cb3756a7887b4))





;;;;;;;;;;;;;;;;_: FStar.Stubs.Tactics.Result.__result FStar.Stubs.Reflection.Types.term -> Type
(declare-fun Tm_arrow_6d0137c59ebc58ae60f94c27f1d3ccc6 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_6d0137c59ebc58ae60f94c27f1d3ccc6
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_6d0137c59ebc58ae60f94c27f1d3ccc6
Tm_type)
:named kinding_Tm_arrow_6d0137c59ebc58ae60f94c27f1d3ccc6))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.Tactics.Effect.fsti(61,12-61,31); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_6d0137c59ebc58ae60f94c27f1d3ccc6)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_6d0137c59ebc58ae60f94c27f1d3ccc6))
:qid MiniParse.Spec.TEnum_pre_typing_Tm_arrow_6d0137c59ebc58ae60f94c27f1d3ccc6))

:named MiniParse.Spec.TEnum_pre_typing_Tm_arrow_6d0137c59ebc58ae60f94c27f1d3ccc6))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_6d0137c59ebc58ae60f94c27f1d3ccc6
;;; Fact-ids: 
(assert (! 
;; def=FStar.Tactics.Effect.fsti(61,12-61,31); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_6d0137c59ebc58ae60f94c27f1d3ccc6)
(and 
;; def=FStar.Tactics.Effect.fsti(61,12-61,31); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.Stubs.Tactics.Result.__result FStar.Stubs.Reflection.Types.term))
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid MiniParse.Spec.TEnum_interpretation_Tm_arrow_6d0137c59ebc58ae60f94c27f1d3ccc6.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_6d0137c59ebc58ae60f94c27f1d3ccc6))
:qid MiniParse.Spec.TEnum_interpretation_Tm_arrow_6d0137c59ebc58ae60f94c27f1d3ccc6))

:named MiniParse.Spec.TEnum_interpretation_Tm_arrow_6d0137c59ebc58ae60f94c27f1d3ccc6))
;;;;;;;;;;;;;;;;_: FStar.Stubs.Tactics.Result.__result (Prims.list FStar.Stubs.Reflection.V2.Data.argv) -> Type
(declare-fun Tm_arrow_10f072c37b4c50d6ff127fe4eb793970 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_10f072c37b4c50d6ff127fe4eb793970
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_10f072c37b4c50d6ff127fe4eb793970
Tm_type)
:named kinding_Tm_arrow_10f072c37b4c50d6ff127fe4eb793970))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.Tactics.Effect.fsti(61,12-61,31); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_10f072c37b4c50d6ff127fe4eb793970)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_10f072c37b4c50d6ff127fe4eb793970))
:qid MiniParse.Spec.TEnum_pre_typing_Tm_arrow_10f072c37b4c50d6ff127fe4eb793970))

:named MiniParse.Spec.TEnum_pre_typing_Tm_arrow_10f072c37b4c50d6ff127fe4eb793970))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_10f072c37b4c50d6ff127fe4eb793970
;;; Fact-ids: 
(assert (! 
;; def=FStar.Tactics.Effect.fsti(61,12-61,31); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_10f072c37b4c50d6ff127fe4eb793970)
(and 
;; def=FStar.Tactics.Effect.fsti(61,12-61,31); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.Stubs.Tactics.Result.__result (Prims.list FStar.Stubs.Reflection.V2.Data.argv)))
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid MiniParse.Spec.TEnum_interpretation_Tm_arrow_10f072c37b4c50d6ff127fe4eb793970.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_10f072c37b4c50d6ff127fe4eb793970))
:qid MiniParse.Spec.TEnum_interpretation_Tm_arrow_10f072c37b4c50d6ff127fe4eb793970))

:named MiniParse.Spec.TEnum_interpretation_Tm_arrow_10f072c37b4c50d6ff127fe4eb793970))
;;;;;;;;;;;;;;;;_: FStar.Stubs.Tactics.Result.__result FStar.Stubs.Reflection.V2.Data.argv -> Type
(declare-fun Tm_arrow_9eaa4be6cb8a5aef0898588610cf78d0 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_9eaa4be6cb8a5aef0898588610cf78d0
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_9eaa4be6cb8a5aef0898588610cf78d0
Tm_type)
:named kinding_Tm_arrow_9eaa4be6cb8a5aef0898588610cf78d0))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.Tactics.Effect.fsti(61,12-61,31); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_9eaa4be6cb8a5aef0898588610cf78d0)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_9eaa4be6cb8a5aef0898588610cf78d0))
:qid MiniParse.Spec.TEnum_pre_typing_Tm_arrow_9eaa4be6cb8a5aef0898588610cf78d0))

:named MiniParse.Spec.TEnum_pre_typing_Tm_arrow_9eaa4be6cb8a5aef0898588610cf78d0))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_9eaa4be6cb8a5aef0898588610cf78d0
;;; Fact-ids: 
(assert (! 
;; def=FStar.Tactics.Effect.fsti(61,12-61,31); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_9eaa4be6cb8a5aef0898588610cf78d0)
(and 
;; def=FStar.Tactics.Effect.fsti(61,12-61,31); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.Stubs.Tactics.Result.__result FStar.Stubs.Reflection.V2.Data.argv))
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid MiniParse.Spec.TEnum_interpretation_Tm_arrow_9eaa4be6cb8a5aef0898588610cf78d0.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_9eaa4be6cb8a5aef0898588610cf78d0))
:qid MiniParse.Spec.TEnum_interpretation_Tm_arrow_9eaa4be6cb8a5aef0898588610cf78d0))

:named MiniParse.Spec.TEnum_interpretation_Tm_arrow_9eaa4be6cb8a5aef0898588610cf78d0))





; Encoding query formula : forall (ty: FStar.Tactics.NamedView.term)
;   (vty: FStar.Tactics.NamedView.term)
;   (v: Prims.nat)
;   (accu: Prims.list FStar.Tactics.NamedView.branch)
;   (l: Prims.list FStar.Stubs.Reflection.Types.name).
;   (*  - Could not prove post-condition
; *)
;   forall (ps: FStar.Stubs.Tactics.Types.proofstate)
;     (p:
;     (_: FStar.Stubs.Tactics.Result.__result (Prims.list FStar.Tactics.NamedView.branch) -> Type0)).
;     (forall (r: FStar.Stubs.Tactics.Result.__result (Prims.list FStar.Tactics.NamedView.branch)).
;         Prims.auto_squash (p r)) ==>
;     (forall (k:
;         (_: FStar.Stubs.Tactics.Result.__result (Prims.list FStar.Tactics.NamedView.branch) -> Type0
;         )).
;         (forall (r: FStar.Stubs.Tactics.Result.__result (Prims.list FStar.Tactics.NamedView.branch))
;           .
;             {:pattern Prims.guard_free (k r)}
;             Prims.auto_squash (k r)) ==>
;         (~(Nil? l) /\ ~(Cons? l) ==> Prims.l_False) /\
;         (forall (k:
;             (_: FStar.Stubs.Tactics.Result.__result (Prims.list FStar.Tactics.NamedView.branch)
;                 -> Type0)).
;             (forall (r:
;                 FStar.Stubs.Tactics.Result.__result (Prims.list FStar.Tactics.NamedView.branch)).
;                 {:pattern Prims.guard_free (k r)}
;                 Prims.auto_squash (k r)) ==>
;             ~(Nil? l) ==>
;             (forall (x: FStar.Stubs.Reflection.Types.name)
;                 (x: Prims.list FStar.Stubs.Reflection.Types.name)
;                 (k:
;                 (_: FStar.Stubs.Tactics.Result.__result (Prims.list FStar.Tactics.NamedView.branch)
;                     -> Type0)).
;                 (forall (r:
;                     FStar.Stubs.Tactics.Result.__result (Prims.list FStar.Tactics.NamedView.branch))
;                   .
;                     {:pattern Prims.guard_free (k r)}
;                     Prims.auto_squash (k r)) ==>
;                 l == x :: x ==>
;                 (forall (k:
;                     (
;                           _:
;                             FStar.Stubs.Tactics.Result.__result
;                             (Prims.list FStar.Tactics.NamedView.branch)
;                         -> Type0)).
;                     (forall (r:
;                         FStar.Stubs.Tactics.Result.__result
;                         (Prims.list FStar.Tactics.NamedView.branch)).
;                         {:pattern Prims.guard_free (k r)}
;                         Prims.auto_squash (k r)) ==>
;                     (forall (r:
;                         FStar.Stubs.Tactics.Result.__result FStar.Stubs.Reflection.Types.env).
;                         Prims.auto_squash (match r with
;                             | FStar.Stubs.Tactics.Result.Success _ _ ->
;                               forall (k:
;                                 (
;                                       _:
;                                         FStar.Stubs.Tactics.Result.__result
;                                         (Prims.list FStar.Tactics.NamedView.branch)
;                                     -> Type0)).
;                                 (forall (r:
;                                     FStar.Stubs.Tactics.Result.__result
;                                     (Prims.list FStar.Tactics.NamedView.branch)).
;                                     {:pattern Prims.guard_free (k r)}
;                                     Prims.auto_squash (k r)) ==>
;                                 (forall (k:
;                                     (
;                                           _:
;                                             FStar.Stubs.Tactics.Result.__result
;                                             FStar.Stubs.Reflection.Types.term
;                                         -> Type0)).
;                                     (forall (r:
;                                         FStar.Stubs.Tactics.Result.__result
;                                         FStar.Stubs.Reflection.Types.term).
;                                         {:pattern Prims.guard_free (k r)}
;                                         (match r with
;                                           | FStar.Stubs.Tactics.Result.Success _ _ ->
;                                             forall (k:
;                                               (
;                                                     _:
;                                                       FStar.Stubs.Tactics.Result.__result
;                                                       (Prims.list FStar.Tactics.NamedView.branch)
;                                                   -> Type0)).
;                                               (forall (r:
;                                                   FStar.Stubs.Tactics.Result.__result
;                                                   (Prims.list FStar.Tactics.NamedView.branch)).
;                                                   {:pattern Prims.guard_free (k r)}
;                                                   Prims.auto_squash (k r)) ==>
;                                               (forall (k:
;                                                   (
;                                                         _:
;                                                           FStar.Stubs.Tactics.Result.__result
;                                                           (Prims.list FStar.Tactics.NamedView.branch
;                                                           )
;                                                       -> Type0)).
;                                                   (forall (r:
;                                                       FStar.Stubs.Tactics.Result.__result
;                                                       (Prims.list FStar.Tactics.NamedView.branch)).
;                                                       {:pattern Prims.guard_free (k r)}
;                                                       Prims.auto_squash (k r)) ==>
;                                                   ~(Nil? x) ==>
;                                                   (forall (x:
;                                                       Prims.list FStar.Stubs.Reflection.Types.name)
;                                                       (k:
;                                                       (
;                                                             _:
;                                                               FStar.Stubs.Tactics.Result.__result
;                                                               (Prims.list FStar.Tactics.NamedView.branch
;                                                                 )
;                                                           -> Type0)).
;                                                       (forall (r:
;                                                           FStar.Stubs.Tactics.Result.__result
;                                                           (Prims.list FStar.Tactics.NamedView.branch
;                                                           )).
;                                                           {:pattern Prims.guard_free (k r)}
;                                                           Prims.auto_squash (k r)) ==>
;                                                       x == x ==>
;                                                       (forall (k:
;                                                           (
;                                                                 _:
;                                                                   FStar.Stubs.Tactics.Result.__result
;                                                                   (Prims.list FStar.Tactics.NamedView.branch
;                                                                     )
;                                                               -> Type0)).
;                                                           (forall (r:
;                                                               FStar.Stubs.Tactics.Result.__result
;                                                               (Prims.list FStar.Tactics.NamedView.branch
;                                                                 )).
;                                                               {:pattern Prims.guard_free (k r)}
;                                                               Prims.auto_squash (k r)) ==>
;                                                           v + 1 >= 0)))
;                                           | FStar.Stubs.Tactics.Result.Failed _ _ -> Prims.l_True) ==>
;                                         k r) ==>
;                                     (forall (k:
;                                         (
;                                               _:
;                                                 FStar.Stubs.Tactics.Result.__result
;                                                 (Prims.list FStar.Stubs.Reflection.V2.Data.argv)
;                                             -> Type0)).
;                                         (forall (r:
;                                             FStar.Stubs.Tactics.Result.__result
;                                             (Prims.list FStar.Stubs.Reflection.V2.Data.argv)).
;                                             {:pattern Prims.guard_free (k r)}
;                                             (match r with
;                                               | FStar.Stubs.Tactics.Result.Success x ps ->
;                                                 k (FStar.Stubs.Tactics.Result.Success
;                                                       (FStar.Reflection.V2.Derived.mk_app (`MiniParse.Spec.Int.mk_u16
;                                                           )
;                                                           x) ps)
;                                               | FStar.Stubs.Tactics.Result.Failed ex ps ->
;                                                 k (FStar.Stubs.Tactics.Result.Failed ex ps)) ==>
;                                             k r) ==>
;                                         (forall (k:
;                                             (
;                                                   _:
;                                                     FStar.Stubs.Tactics.Result.__result
;                                                     FStar.Stubs.Reflection.V2.Data.argv
;                                                 -> Type0)).
;                                             (forall (r:
;                                                 FStar.Stubs.Tactics.Result.__result
;                                                 FStar.Stubs.Reflection.V2.Data.argv).
;                                                 {:pattern Prims.guard_free (k r)}
;                                                 (match r with
;                                                   | FStar.Stubs.Tactics.Result.Success x ps ->
;                                                     k (FStar.Stubs.Tactics.Result.Success [x] ps)
;                                                   | FStar.Stubs.Tactics.Result.Failed ex ps ->
;                                                     k (FStar.Stubs.Tactics.Result.Failed ex ps)) ==>
;                                                 k r) ==>
;                                             (forall (r:
;                                                 FStar.Stubs.Tactics.Result.__result
;                                                 FStar.Stubs.Reflection.Types.term).
;                                                 Prims.auto_squash (match r with
;                                                     | FStar.Stubs.Tactics.Result.Success x ps ->
;                                                       k (FStar.Stubs.Tactics.Result.Success
;                                                             (x,
;                                                             FStar.Stubs.Reflection.V2.Data.Q_Explicit)
;                                                             ps)
;                                                     | FStar.Stubs.Tactics.Result.Failed ex ps ->
;                                                       k (FStar.Stubs.Tactics.Result.Failed ex ps))))
;                                     ))
;                             | FStar.Stubs.Tactics.Result.Failed _ _ -> Prims.l_True))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec mk_tenum_branches`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
FStar.Tactics.NamedView.term)
(HasType @x1
FStar.Tactics.NamedView.term)
(HasType @x2
Prims.nat)
(HasType @x3
(Prims.list FStar.Tactics.NamedView.branch))
(HasType @x4
(Prims.list (FStar.Stubs.Reflection.Types.name Dummy_value))))

;; def=FStar.Tactics.Effect.fsti(129,19-129,55); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(forall ((@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x5
FStar.Stubs.Tactics.Types.proofstate)
(HasType @x6
Tm_arrow_d0e74b3e3df5819bf58cb3756a7887b4)

;; def=FStar.Tactics.Effect.fsti(159,37-159,70); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(forall ((@x7 Term))
 (! (implies (HasType @x7
(FStar.Stubs.Tactics.Result.__result (Prims.list FStar.Tactics.NamedView.branch)))

;; def=FStar.Tactics.Effect.fsti(159,62-159,69); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(Valid 
;; def=FStar.Tactics.Effect.fsti(159,62-159,69); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(ApplyTT @x6
@x7)
)
)
 
;;no pats
:qid @query.2))
)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Tm_arrow_d0e74b3e3df5819bf58cb3756a7887b4)

;; def=FStar.Tactics.Effect.fsti(61,34-61,102); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(forall ((@x8 Term))
 (! 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(Valid 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(ApplyTT @x7
@x8)
)

 

:pattern ((ApplyTT @x7
@x8))
:qid @query.4))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(and (implies 
;; def=MiniParse.Spec.TEnum.fst(24,85-24,86); use=MiniParse.Spec.TEnum.fst(25,8-25,9)
(and 
;; def=MiniParse.Spec.TEnum.fst(24,85-24,86); use=MiniParse.Spec.TEnum.fst(25,8-25,9)
(not 
;; def=MiniParse.Spec.TEnum.fst(24,85-24,86); use=MiniParse.Spec.TEnum.fst(25,8-25,9)
(BoxBool_proj_0 (Prims.uu___is_Nil (FStar.Stubs.Reflection.Types.name Dummy_value)
@x4))
)


;; def=MiniParse.Spec.TEnum.fst(24,85-24,86); use=MiniParse.Spec.TEnum.fst(25,8-25,9)
(not 
;; def=MiniParse.Spec.TEnum.fst(24,85-24,86); use=MiniParse.Spec.TEnum.fst(25,8-25,9)
(BoxBool_proj_0 (Prims.uu___is_Cons (FStar.Stubs.Reflection.Types.name Dummy_value)
@x4))
)
)

label_1)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Tm_arrow_d0e74b3e3df5819bf58cb3756a7887b4)

;; def=FStar.Tactics.Effect.fsti(61,34-61,102); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(forall ((@x9 Term))
 (! 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(Valid 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(ApplyTT @x8
@x9)
)

 

:pattern ((ApplyTT @x8
@x9))
:qid @query.6))


;; def=FStar.Tactics.Effect.fsti(113,17-113,22); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(not 
;; def=FStar.Tactics.Effect.fsti(110,77-110,78); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(BoxBool_proj_0 (Prims.uu___is_Nil (FStar.Stubs.Reflection.Types.name Dummy_value)
@x4))
)
)

;; def=FStar.Tactics.Effect.fsti(137,29-137,57); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(forall ((@x9 Term))
 (! (implies (HasType @x9
(FStar.Stubs.Reflection.Types.name Dummy_value))

;; def=FStar.Tactics.Effect.fsti(137,29-137,57); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(forall ((@x10 Term))
 (! (implies (HasType @x10
(Prims.list (FStar.Stubs.Reflection.Types.name Dummy_value)))
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Tm_arrow_d0e74b3e3df5819bf58cb3756a7887b4)

;; def=FStar.Tactics.Effect.fsti(61,34-61,102); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(forall ((@x12 Term))
 (! 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(Valid 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(ApplyTT @x11
@x12)
)

 

:pattern ((ApplyTT @x11
@x12))
:qid @query.10))


;; def=MiniParse.Spec.TEnum.fst(24,85-27,10); use=MiniParse.Spec.TEnum.fst(25,8-27,10)
(= @x4
(Prims.Cons (FStar.Stubs.Reflection.Types.name Dummy_value)
@x9
@x10))
)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Tm_arrow_d0e74b3e3df5819bf58cb3756a7887b4)

;; def=FStar.Tactics.Effect.fsti(61,34-61,102); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(forall ((@x13 Term))
 (! 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(Valid 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(ApplyTT @x12
@x13)
)

 

:pattern ((ApplyTT @x12
@x13))
:qid @query.12))
)

;; def=FStar.Tactics.Effect.fsti(159,37-159,70); use=MiniParse.Spec.TEnum.fst(29,16-29,23)
(forall ((@x13 Term))
 (! (implies (HasType @x13
(FStar.Stubs.Tactics.Result.__result FStar.Stubs.Reflection.Types.env))
(let ((@lb14 @x13))
(ite (is-FStar.Stubs.Tactics.Result.Success @lb14)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
Tm_arrow_d0e74b3e3df5819bf58cb3756a7887b4)

;; def=FStar.Tactics.Effect.fsti(61,34-61,102); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(forall ((@x16 Term))
 (! 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(Valid 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(ApplyTT @x15
@x16)
)

 

:pattern ((ApplyTT @x15
@x16))
:qid @query.15))
)

;; def=FStar.Tactics.Effect.fsti(61,2-61,114); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
Tm_arrow_6d0137c59ebc58ae60f94c27f1d3ccc6)

;; def=FStar.Tactics.Effect.fsti(61,2-61,114); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(forall ((@x17 Term))
 (! (implies (let ((@lb18 @x17))
(ite (is-FStar.Stubs.Tactics.Result.Success @lb18)
(forall ((@x19 Term))
 (! (implies (and (HasType @x19
Tm_arrow_d0e74b3e3df5819bf58cb3756a7887b4)

;; def=FStar.Tactics.Effect.fsti(61,34-61,102); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(forall ((@x20 Term))
 (! 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(Valid 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(ApplyTT @x19
@x20)
)

 

:pattern ((ApplyTT @x19
@x20))
:qid @query.19))
)
(forall ((@x20 Term))
 (! (implies (and (HasType @x20
Tm_arrow_d0e74b3e3df5819bf58cb3756a7887b4)

;; def=FStar.Tactics.Effect.fsti(61,34-61,102); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(forall ((@x21 Term))
 (! 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(Valid 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(ApplyTT @x20
@x21)
)

 

:pattern ((ApplyTT @x20
@x21))
:qid @query.21))


;; def=FStar.Tactics.Effect.fsti(113,17-113,22); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(not 
;; def=FStar.Tactics.Effect.fsti(110,77-110,78); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(BoxBool_proj_0 (Prims.uu___is_Nil (FStar.Stubs.Reflection.Types.name Dummy_value)
@x10))
)
)

;; def=FStar.Tactics.Effect.fsti(137,29-137,57); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(forall ((@x21 Term))
 (! (implies (HasType @x21
(Prims.list (FStar.Stubs.Reflection.Types.name Dummy_value)))
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
Tm_arrow_d0e74b3e3df5819bf58cb3756a7887b4)

;; def=FStar.Tactics.Effect.fsti(61,34-61,102); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(forall ((@x23 Term))
 (! 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(Valid 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(ApplyTT @x22
@x23)
)

 

:pattern ((ApplyTT @x22
@x23))
:qid @query.24))


;; def=MiniParse.Spec.TEnum.fst(27,9-43,7); use=MiniParse.Spec.TEnum.fst(37,16-43,7)
(= @x10
@x21)
)
(forall ((@x23 Term))
 (! (implies (and (HasType @x23
Tm_arrow_d0e74b3e3df5819bf58cb3756a7887b4)

;; def=FStar.Tactics.Effect.fsti(61,34-61,102); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(forall ((@x24 Term))
 (! 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(Valid 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(ApplyTT @x23
@x24)
)

 

:pattern ((ApplyTT @x23
@x24))
:qid @query.26))
)

;; def=Prims.fst(680,18-680,24); use=MiniParse.Spec.TEnum.fst(43,36-43,38)
(or label_2

;; def=Prims.fst(680,18-680,24); use=MiniParse.Spec.TEnum.fst(43,36-43,38)
(>= (BoxInt_proj_0 (Prims.op_Addition @x2
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)
)
 
;;no pats
:qid @query.25)))
 
;;no pats
:qid @query.23)))
 
;;no pats
:qid @query.22))
)
 
;;no pats
:qid @query.20)))
 
;;no pats
:qid @query.18))
(implies (not (is-FStar.Stubs.Tactics.Result.Failed @lb18))
Unreachable)))

;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(Valid 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(ApplyTT @x16
@x17)
)
)
 :weight 0


:pattern ((ApplyTT @x16
@x17))
:qid @query.17))
)

;; def=FStar.Tactics.Effect.fsti(61,2-61,114); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Tm_arrow_10f072c37b4c50d6ff127fe4eb793970)

;; def=FStar.Tactics.Effect.fsti(61,2-61,114); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(forall ((@x18 Term))
 (! (implies (let ((@lb19 @x18))
(ite (is-FStar.Stubs.Tactics.Result.Success @lb19)

;; def=FStar.Tactics.Effect.fsti(42,17-42,36); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(Valid 
;; def=FStar.Tactics.Effect.fsti(42,17-42,36); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(ApplyTT @x16
(FStar.Stubs.Tactics.Result.Success FStar.Stubs.Reflection.Types.term
(FStar.Reflection.V2.Derived.mk_app (FStar.Stubs.Reflection.V2.Builtins.pack_ln (FStar.Stubs.Reflection.V2.Data.Tv_FVar (FStar.Stubs.Reflection.V2.Builtins.pack_fv (Prims.Cons Prims.string
(BoxString (FString_const 5))
(Prims.Cons Prims.string
(BoxString (FString_const 6))
(Prims.Cons Prims.string
(BoxString (FString_const 7))
(Prims.Cons Prims.string
(BoxString (FString_const 8))
(Prims.Nil Prims.string))))))))
(FStar.Stubs.Tactics.Result.Success_v @lb19))
(FStar.Stubs.Tactics.Result.Success_ps @lb19)))
)

(ite (is-FStar.Stubs.Tactics.Result.Failed @lb19)

;; def=FStar.Tactics.Effect.fsti(54,29-54,48); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(Valid 
;; def=FStar.Tactics.Effect.fsti(54,29-54,48); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(ApplyTT @x16
(FStar.Stubs.Tactics.Result.Failed FStar.Stubs.Reflection.Types.term
(FStar.Stubs.Tactics.Result.Failed_exn @lb19)
(FStar.Stubs.Tactics.Result.Failed_ps @lb19)))
)

Unreachable)))

;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(Valid 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(ApplyTT @x17
@x18)
)
)
 :weight 0


:pattern ((ApplyTT @x17
@x18))
:qid @query.28))
)

;; def=FStar.Tactics.Effect.fsti(61,2-61,114); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
Tm_arrow_9eaa4be6cb8a5aef0898588610cf78d0)

;; def=FStar.Tactics.Effect.fsti(61,2-61,114); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(forall ((@x19 Term))
 (! (implies (let ((@lb20 @x19))
(ite (is-FStar.Stubs.Tactics.Result.Success @lb20)

;; def=FStar.Tactics.Effect.fsti(42,17-42,36); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(Valid 
;; def=FStar.Tactics.Effect.fsti(42,17-42,36); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(ApplyTT @x17
(FStar.Stubs.Tactics.Result.Success (Prims.list FStar.Stubs.Reflection.V2.Data.argv)
(Prims.Cons FStar.Stubs.Reflection.V2.Data.argv
(FStar.Stubs.Tactics.Result.Success_v @lb20)
(Prims.Nil FStar.Stubs.Reflection.V2.Data.argv))
(FStar.Stubs.Tactics.Result.Success_ps @lb20)))
)

(ite (is-FStar.Stubs.Tactics.Result.Failed @lb20)

;; def=FStar.Tactics.Effect.fsti(54,29-54,48); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(Valid 
;; def=FStar.Tactics.Effect.fsti(54,29-54,48); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(ApplyTT @x17
(FStar.Stubs.Tactics.Result.Failed (Prims.list FStar.Stubs.Reflection.V2.Data.argv)
(FStar.Stubs.Tactics.Result.Failed_exn @lb20)
(FStar.Stubs.Tactics.Result.Failed_ps @lb20)))
)

Unreachable)))

;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(Valid 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(ApplyTT @x18
@x19)
)
)
 :weight 0


:pattern ((ApplyTT @x18
@x19))
:qid @query.30))
)

;; def=FStar.Tactics.Effect.fsti(159,37-159,70); use=MiniParse.Spec.TEnum.fst(30,34-30,42)
(forall ((@x19 Term))
 (! (implies (HasType @x19
(FStar.Stubs.Tactics.Result.__result FStar.Stubs.Reflection.Types.term))
(let ((@lb20 @x19))
(ite (is-FStar.Stubs.Tactics.Result.Success @lb20)

;; def=FStar.Tactics.Effect.fsti(42,17-42,36); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(Valid 
;; def=FStar.Tactics.Effect.fsti(42,17-42,36); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(ApplyTT @x18
(FStar.Stubs.Tactics.Result.Success FStar.Stubs.Reflection.V2.Data.argv
(FStar.Pervasives.Native.Mktuple2 FStar.Stubs.Reflection.Types.term
FStar.Stubs.Reflection.V2.Data.aqualv
(FStar.Stubs.Tactics.Result.Success_v @lb20)
FStar.Stubs.Reflection.V2.Data.Q_Explicit@tok)
(FStar.Stubs.Tactics.Result.Success_ps @lb20)))
)

(ite (is-FStar.Stubs.Tactics.Result.Failed @lb20)

;; def=FStar.Tactics.Effect.fsti(54,29-54,48); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(Valid 
;; def=FStar.Tactics.Effect.fsti(54,29-54,48); use=MiniParse.Spec.TEnum.fst(25,2-44,7)
(ApplyTT @x18
(FStar.Stubs.Tactics.Result.Failed FStar.Stubs.Reflection.V2.Data.argv
(FStar.Stubs.Tactics.Result.Failed_exn @lb20)
(FStar.Stubs.Tactics.Result.Failed_ps @lb20)))
)

Unreachable))))
 
;;no pats
:qid @query.31))
)
 
;;no pats
:qid @query.29))
)
 
;;no pats
:qid @query.27))
)
 
;;no pats
:qid @query.16))
)
 
;;no pats
:qid @query.14))
(implies (not (is-FStar.Stubs.Tactics.Result.Failed @lb14))
Unreachable))))
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.11)))
 
;;no pats
:qid @query.9)))
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.5)))
)
 
;;no pats
:qid @query.3)))
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.TEnum.mk_tenum_branches, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, constructor_distinct_FStar.Stubs.Tactics.Result.Failed, constructor_distinct_FStar.Stubs.Tactics.Result.Success, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equation_FStar.Stubs.Reflection.Types.name, equation_FStar.Stubs.Reflection.V2.Data.argv, equation_Prims.nat, fuel_guarded_inversion_FStar.Stubs.Tactics.Result.__result, fuel_guarded_inversion_Prims.list, int_inversion, primitive_Prims.op_Addition, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Stubs.Tactics.Result.Failed_a, projection_inverse_FStar.Stubs.Tactics.Result.Failed_exn, projection_inverse_FStar.Stubs.Tactics.Result.Failed_ps, projection_inverse_FStar.Stubs.Tactics.Result.Success_a, projection_inverse_FStar.Stubs.Tactics.Result.Success_ps, projection_inverse_FStar.Stubs.Tactics.Result.Success_v, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec mk_tenum_branches


; <Start encoding let rec mk_tenum_branches>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.TEnum.mk_tenum_branches (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.TEnum.mk_tenum_branches@tok () Term)

; </end encoding let rec mk_tenum_branches>


; encoding sigelt let mk_function


; <Start encoding let mk_function>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.TEnum.mk_function (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.TEnum.mk_function@tok () Term)

; </end encoding let mk_function>

;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.Unk@tok
FStar.Tactics.NamedView.named_sigelt_view)
:named typing_tok_FStar.Tactics.NamedView.Unk@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.Tv_Unsupp@tok
FStar.Tactics.NamedView.named_term_view)
:named typing_tok_FStar.Tactics.NamedView.Tv_Unsupp@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.Tv_Unknown@tok
FStar.Tactics.NamedView.named_term_view)
:named typing_tok_FStar.Tactics.NamedView.Tv_Unknown@tok))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Tv_Var; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(94,4-94,10); use=FStar.Tactics.NamedView.fsti(94,4-94,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Tactics.NamedView.named_term_view)
(HasType (FStar.Tactics.NamedView.uu___is_Tv_Var @x0)
Prims.bool))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Tv_Var @x0))
:qid typing_FStar.Tactics.NamedView.uu___is_Tv_Var))

:named typing_FStar.Tactics.NamedView.uu___is_Tv_Var))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Tv_Uvar; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(104,4-104,11); use=FStar.Tactics.NamedView.fsti(104,4-104,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Tactics.NamedView.named_term_view)
(HasType (FStar.Tactics.NamedView.uu___is_Tv_Uvar @x0)
Prims.bool))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Tv_Uvar @x0))
:qid typing_FStar.Tactics.NamedView.uu___is_Tv_Uvar))

:named typing_FStar.Tactics.NamedView.uu___is_Tv_Uvar))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Tv_UInst; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(97,4-97,12); use=FStar.Tactics.NamedView.fsti(97,4-97,12)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Tactics.NamedView.named_term_view)
(HasType (FStar.Tactics.NamedView.uu___is_Tv_UInst @x0)
Prims.bool))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Tv_UInst @x0))
:qid typing_FStar.Tactics.NamedView.uu___is_Tv_UInst))

:named typing_FStar.Tactics.NamedView.uu___is_Tv_UInst))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Tv_Type; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(101,4-101,11); use=FStar.Tactics.NamedView.fsti(101,4-101,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Tactics.NamedView.named_term_view)
(HasType (FStar.Tactics.NamedView.uu___is_Tv_Type @x0)
Prims.bool))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Tv_Type @x0))
:qid typing_FStar.Tactics.NamedView.uu___is_Tv_Type))

:named typing_FStar.Tactics.NamedView.uu___is_Tv_Type))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Tv_Refine; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(102,4-102,13); use=FStar.Tactics.NamedView.fsti(102,4-102,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Tactics.NamedView.named_term_view)
(HasType (FStar.Tactics.NamedView.uu___is_Tv_Refine @x0)
Prims.bool))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Tv_Refine @x0))
:qid typing_FStar.Tactics.NamedView.uu___is_Tv_Refine))

:named typing_FStar.Tactics.NamedView.uu___is_Tv_Refine))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Tv_Match; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(106,4-106,12); use=FStar.Tactics.NamedView.fsti(106,4-106,12)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Tactics.NamedView.named_term_view)
(HasType (FStar.Tactics.NamedView.uu___is_Tv_Match @x0)
Prims.bool))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Tv_Match @x0))
:qid typing_FStar.Tactics.NamedView.uu___is_Tv_Match))

:named typing_FStar.Tactics.NamedView.uu___is_Tv_Match))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Tv_Let; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(105,4-105,10); use=FStar.Tactics.NamedView.fsti(105,4-105,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Tactics.NamedView.named_term_view)
(HasType (FStar.Tactics.NamedView.uu___is_Tv_Let @x0)
Prims.bool))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Tv_Let @x0))
:qid typing_FStar.Tactics.NamedView.uu___is_Tv_Let))

:named typing_FStar.Tactics.NamedView.uu___is_Tv_Let))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Tv_FVar; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(96,4-96,11); use=FStar.Tactics.NamedView.fsti(96,4-96,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Tactics.NamedView.named_term_view)
(HasType (FStar.Tactics.NamedView.uu___is_Tv_FVar @x0)
Prims.bool))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Tv_FVar @x0))
:qid typing_FStar.Tactics.NamedView.uu___is_Tv_FVar))

:named typing_FStar.Tactics.NamedView.uu___is_Tv_FVar))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Tv_Const; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(103,4-103,12); use=FStar.Tactics.NamedView.fsti(103,4-103,12)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Tactics.NamedView.named_term_view)
(HasType (FStar.Tactics.NamedView.uu___is_Tv_Const @x0)
Prims.bool))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Tv_Const @x0))
:qid typing_FStar.Tactics.NamedView.uu___is_Tv_Const))

:named typing_FStar.Tactics.NamedView.uu___is_Tv_Const))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Tv_BVar; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(95,4-95,11); use=FStar.Tactics.NamedView.fsti(95,4-95,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Tactics.NamedView.named_term_view)
(HasType (FStar.Tactics.NamedView.uu___is_Tv_BVar @x0)
Prims.bool))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Tv_BVar @x0))
:qid typing_FStar.Tactics.NamedView.uu___is_Tv_BVar))

:named typing_FStar.Tactics.NamedView.uu___is_Tv_BVar))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Tv_AscribedT; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(107,4-107,16); use=FStar.Tactics.NamedView.fsti(107,4-107,16)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Tactics.NamedView.named_term_view)
(HasType (FStar.Tactics.NamedView.uu___is_Tv_AscribedT @x0)
Prims.bool))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Tv_AscribedT @x0))
:qid typing_FStar.Tactics.NamedView.uu___is_Tv_AscribedT))

:named typing_FStar.Tactics.NamedView.uu___is_Tv_AscribedT))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Tv_AscribedC; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(108,4-108,16); use=FStar.Tactics.NamedView.fsti(108,4-108,16)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Tactics.NamedView.named_term_view)
(HasType (FStar.Tactics.NamedView.uu___is_Tv_AscribedC @x0)
Prims.bool))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Tv_AscribedC @x0))
:qid typing_FStar.Tactics.NamedView.uu___is_Tv_AscribedC))

:named typing_FStar.Tactics.NamedView.uu___is_Tv_AscribedC))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Tv_Arrow; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(100,4-100,12); use=FStar.Tactics.NamedView.fsti(100,4-100,12)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Tactics.NamedView.named_term_view)
(HasType (FStar.Tactics.NamedView.uu___is_Tv_Arrow @x0)
Prims.bool))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Tv_Arrow @x0))
:qid typing_FStar.Tactics.NamedView.uu___is_Tv_Arrow))

:named typing_FStar.Tactics.NamedView.uu___is_Tv_Arrow))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Tv_App; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(98,4-98,10); use=FStar.Tactics.NamedView.fsti(98,4-98,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Tactics.NamedView.named_term_view)
(HasType (FStar.Tactics.NamedView.uu___is_Tv_App @x0)
Prims.bool))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Tv_App @x0))
:qid typing_FStar.Tactics.NamedView.uu___is_Tv_App))

:named typing_FStar.Tactics.NamedView.uu___is_Tv_App))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Tv_Abs; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(99,4-99,10); use=FStar.Tactics.NamedView.fsti(99,4-99,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Tactics.NamedView.named_term_view)
(HasType (FStar.Tactics.NamedView.uu___is_Tv_Abs @x0)
Prims.bool))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Tv_Abs @x0))
:qid typing_FStar.Tactics.NamedView.uu___is_Tv_Abs))

:named typing_FStar.Tactics.NamedView.uu___is_Tv_Abs))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Sg_Val; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(145,4-145,10); use=FStar.Tactics.NamedView.fsti(145,4-145,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Tactics.NamedView.named_sigelt_view)
(HasType (FStar.Tactics.NamedView.uu___is_Sg_Val @x0)
Prims.bool))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Sg_Val @x0))
:qid typing_FStar.Tactics.NamedView.uu___is_Sg_Val))

:named typing_FStar.Tactics.NamedView.uu___is_Sg_Val))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Sg_Let; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(128,4-128,10); use=FStar.Tactics.NamedView.fsti(128,4-128,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Tactics.NamedView.named_sigelt_view)
(HasType (FStar.Tactics.NamedView.uu___is_Sg_Let @x0)
Prims.bool))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Sg_Let @x0))
:qid typing_FStar.Tactics.NamedView.uu___is_Sg_Let))

:named typing_FStar.Tactics.NamedView.uu___is_Sg_Let))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Sg_Inductive; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(137,4-137,16); use=FStar.Tactics.NamedView.fsti(137,4-137,16)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Tactics.NamedView.named_sigelt_view)
(HasType (FStar.Tactics.NamedView.uu___is_Sg_Inductive @x0)
Prims.bool))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Sg_Inductive @x0))
:qid typing_FStar.Tactics.NamedView.uu___is_Sg_Inductive))

:named typing_FStar.Tactics.NamedView.uu___is_Sg_Inductive))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Tactics.NamedView.universe; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.universe
Tm_type)
:named typing_FStar.Tactics.NamedView.universe))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Tactics.NamedView.univ_name; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.univ_name
Tm_type)
:named typing_FStar.Tactics.NamedView.univ_name))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Tactics.NamedView.term_view; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.term_view
Tm_type)
:named typing_FStar.Tactics.NamedView.term_view))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Tactics.NamedView.simple_binder; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.simple_binder
Tm_type)
:named typing_FStar.Tactics.NamedView.simple_binder))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Tactics.NamedView.match_returns_ascription; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.match_returns_ascription
Tm_type)
:named typing_FStar.Tactics.NamedView.match_returns_ascription))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Tactics.NamedView.is_simple_binder; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(45,4-45,20); use=FStar.Tactics.NamedView.fsti(45,4-45,20)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Tactics.NamedView.binder)
(HasType (FStar.Tactics.NamedView.is_simple_binder @x0)
Prims.logical))
 

:pattern ((FStar.Tactics.NamedView.is_simple_binder @x0))
:qid typing_FStar.Tactics.NamedView.is_simple_binder))

:named typing_FStar.Tactics.NamedView.is_simple_binder))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Tactics.NamedView.comp; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.comp
Tm_type)
:named typing_FStar.Tactics.NamedView.comp))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Tactics.NamedView.bv; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.bv
Tm_type)
:named typing_FStar.Tactics.NamedView.bv))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Tactics.NamedView.binders; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.binders
Tm_type)
:named typing_FStar.Tactics.NamedView.binders))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Mkbinder__item__qual; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(40,2-40,6); use=FStar.Tactics.NamedView.fsti(40,2-40,6)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Tactics.NamedView.binder)
(HasType (FStar.Tactics.NamedView.__proj__Mkbinder__item__qual @x0)
FStar.Stubs.Reflection.V2.Data.aqualv))
 

:pattern ((FStar.Tactics.NamedView.__proj__Mkbinder__item__qual @x0))
:qid typing_FStar.Tactics.NamedView.__proj__Mkbinder__item__qual))

:named typing_FStar.Tactics.NamedView.__proj__Mkbinder__item__qual))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Mkbinder__item__attrs; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(41,2-41,7); use=FStar.Tactics.NamedView.fsti(41,2-41,7)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Tactics.NamedView.binder)
(HasType (FStar.Tactics.NamedView.__proj__Mkbinder__item__attrs @x0)
(Prims.list FStar.Tactics.NamedView.term)))
 

:pattern ((FStar.Tactics.NamedView.__proj__Mkbinder__item__attrs @x0))
:qid typing_FStar.Tactics.NamedView.__proj__Mkbinder__item__attrs))

:named typing_FStar.Tactics.NamedView.__proj__Mkbinder__item__attrs))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_C_Total; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(165,4-165,11); use=FStar.Stubs.Reflection.V2.Data.fsti(165,4-165,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.V2.Data.comp_view)
(HasType (FStar.Stubs.Reflection.V2.Data.uu___is_C_Total @x0)
Prims.bool))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_C_Total @x0))
:qid typing_FStar.Stubs.Reflection.V2.Data.uu___is_C_Total))

:named typing_FStar.Stubs.Reflection.V2.Data.uu___is_C_Total))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_C_Lemma; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(167,4-167,11); use=FStar.Stubs.Reflection.V2.Data.fsti(167,4-167,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.V2.Data.comp_view)
(HasType (FStar.Stubs.Reflection.V2.Data.uu___is_C_Lemma @x0)
Prims.bool))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_C_Lemma @x0))
:qid typing_FStar.Stubs.Reflection.V2.Data.uu___is_C_Lemma))

:named typing_FStar.Stubs.Reflection.V2.Data.uu___is_C_Lemma))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_C_GTotal; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(166,4-166,12); use=FStar.Stubs.Reflection.V2.Data.fsti(166,4-166,12)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.V2.Data.comp_view)
(HasType (FStar.Stubs.Reflection.V2.Data.uu___is_C_GTotal @x0)
Prims.bool))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_C_GTotal @x0))
:qid typing_FStar.Stubs.Reflection.V2.Data.uu___is_C_GTotal))

:named typing_FStar.Stubs.Reflection.V2.Data.uu___is_C_GTotal))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_C_Eff; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(168,4-168,9); use=FStar.Stubs.Reflection.V2.Data.fsti(168,4-168,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.V2.Data.comp_view)
(HasType (FStar.Stubs.Reflection.V2.Data.uu___is_C_Eff @x0)
Prims.bool))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_C_Eff @x0))
:qid typing_FStar.Stubs.Reflection.V2.Data.uu___is_C_Eff))

:named typing_FStar.Stubs.Reflection.V2.Data.uu___is_C_Eff))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.ctor; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType FStar.Stubs.Reflection.V2.Data.ctor
Tm_type)
:named typing_FStar.Stubs.Reflection.V2.Data.ctor))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Builtins.lookup_typ; Namespace FStar.Stubs.Reflection.V2.Builtins
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Builtins.fsti(126,4-126,14); use=FStar.Stubs.Reflection.V2.Builtins.fsti(126,4-126,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
FStar.Stubs.Reflection.Types.env)
(HasType @x1
(FStar.Stubs.Reflection.Types.name Dummy_value)))
(HasType (FStar.Stubs.Reflection.V2.Builtins.lookup_typ @x0
@x1)
(FStar.Pervasives.Native.option FStar.Stubs.Reflection.Types.sigelt)))
 

:pattern ((FStar.Stubs.Reflection.V2.Builtins.lookup_typ @x0
@x1))
:qid typing_FStar.Stubs.Reflection.V2.Builtins.lookup_typ))

:named typing_FStar.Stubs.Reflection.V2.Builtins.lookup_typ))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Builtins.inspect_fv; Namespace FStar.Stubs.Reflection.V2.Builtins
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Builtins.fsti(58,4-58,14); use=FStar.Stubs.Reflection.V2.Builtins.fsti(58,4-58,14)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Stubs.Reflection.Types.fv)
(HasType (FStar.Stubs.Reflection.V2.Builtins.inspect_fv @x0)
(FStar.Stubs.Reflection.Types.name Dummy_value)))
 

:pattern ((FStar.Stubs.Reflection.V2.Builtins.inspect_fv @x0))
:qid typing_FStar.Stubs.Reflection.V2.Builtins.inspect_fv))

:named typing_FStar.Stubs.Reflection.V2.Builtins.inspect_fv))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.sigelt; Namespace FStar.Stubs.Reflection.Types
(assert (! (HasType FStar.Stubs.Reflection.Types.sigelt
Tm_type)
:named typing_FStar.Stubs.Reflection.Types.sigelt))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(94,4-94,10); use=FStar.Tactics.NamedView.fsti(94,4-94,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_Var @x1)
FStar.Tactics.NamedView.named_term_view)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Tactics.NamedView.Tv_Var @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_Var @x1)
FStar.Tactics.NamedView.named_term_view))
:qid subterm_ordering_FStar.Tactics.NamedView.Tv_Var))

:named subterm_ordering_FStar.Tactics.NamedView.Tv_Var))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(104,4-104,11); use=FStar.Tactics.NamedView.fsti(104,4-104,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_Uvar @x1
@x2)
FStar.Tactics.NamedView.named_term_view)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Tactics.NamedView.Tv_Uvar @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Tactics.NamedView.Tv_Uvar @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_Uvar @x1
@x2)
FStar.Tactics.NamedView.named_term_view))
:qid subterm_ordering_FStar.Tactics.NamedView.Tv_Uvar))

:named subterm_ordering_FStar.Tactics.NamedView.Tv_Uvar))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(97,4-97,12); use=FStar.Tactics.NamedView.fsti(97,4-97,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_UInst @x1
@x2)
FStar.Tactics.NamedView.named_term_view)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Tactics.NamedView.Tv_UInst @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Tactics.NamedView.Tv_UInst @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_UInst @x1
@x2)
FStar.Tactics.NamedView.named_term_view))
:qid subterm_ordering_FStar.Tactics.NamedView.Tv_UInst))

:named subterm_ordering_FStar.Tactics.NamedView.Tv_UInst))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(101,4-101,11); use=FStar.Tactics.NamedView.fsti(101,4-101,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_Type @x1)
FStar.Tactics.NamedView.named_term_view)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Tactics.NamedView.Tv_Type @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_Type @x1)
FStar.Tactics.NamedView.named_term_view))
:qid subterm_ordering_FStar.Tactics.NamedView.Tv_Type))

:named subterm_ordering_FStar.Tactics.NamedView.Tv_Type))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(102,4-102,13); use=FStar.Tactics.NamedView.fsti(102,4-102,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_Refine @x1
@x2)
FStar.Tactics.NamedView.named_term_view)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Tactics.NamedView.Tv_Refine @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Tactics.NamedView.Tv_Refine @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_Refine @x1
@x2)
FStar.Tactics.NamedView.named_term_view))
:qid subterm_ordering_FStar.Tactics.NamedView.Tv_Refine))

:named subterm_ordering_FStar.Tactics.NamedView.Tv_Refine))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(106,4-106,12); use=FStar.Tactics.NamedView.fsti(106,4-106,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_Match @x1
@x2
@x3)
FStar.Tactics.NamedView.named_term_view)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Tactics.NamedView.Tv_Match @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Tactics.NamedView.Tv_Match @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(FStar.Tactics.NamedView.Tv_Match @x1
@x2
@x3)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_Match @x1
@x2
@x3)
FStar.Tactics.NamedView.named_term_view))
:qid subterm_ordering_FStar.Tactics.NamedView.Tv_Match))

:named subterm_ordering_FStar.Tactics.NamedView.Tv_Match))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(105,4-105,10); use=FStar.Tactics.NamedView.fsti(105,4-105,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_Let @x1
@x2
@x3
@x4
@x5)
FStar.Tactics.NamedView.named_term_view)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Tactics.NamedView.Tv_Let @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Tactics.NamedView.Tv_Let @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(FStar.Tactics.NamedView.Tv_Let @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(FStar.Tactics.NamedView.Tv_Let @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x5
(FStar.Tactics.NamedView.Tv_Let @x1
@x2
@x3
@x4
@x5)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_Let @x1
@x2
@x3
@x4
@x5)
FStar.Tactics.NamedView.named_term_view))
:qid subterm_ordering_FStar.Tactics.NamedView.Tv_Let))

:named subterm_ordering_FStar.Tactics.NamedView.Tv_Let))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(96,4-96,11); use=FStar.Tactics.NamedView.fsti(96,4-96,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_FVar @x1)
FStar.Tactics.NamedView.named_term_view)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Tactics.NamedView.Tv_FVar @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_FVar @x1)
FStar.Tactics.NamedView.named_term_view))
:qid subterm_ordering_FStar.Tactics.NamedView.Tv_FVar))

:named subterm_ordering_FStar.Tactics.NamedView.Tv_FVar))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(103,4-103,12); use=FStar.Tactics.NamedView.fsti(103,4-103,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_Const @x1)
FStar.Tactics.NamedView.named_term_view)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Tactics.NamedView.Tv_Const @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_Const @x1)
FStar.Tactics.NamedView.named_term_view))
:qid subterm_ordering_FStar.Tactics.NamedView.Tv_Const))

:named subterm_ordering_FStar.Tactics.NamedView.Tv_Const))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(95,4-95,11); use=FStar.Tactics.NamedView.fsti(95,4-95,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_BVar @x1)
FStar.Tactics.NamedView.named_term_view)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Tactics.NamedView.Tv_BVar @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_BVar @x1)
FStar.Tactics.NamedView.named_term_view))
:qid subterm_ordering_FStar.Tactics.NamedView.Tv_BVar))

:named subterm_ordering_FStar.Tactics.NamedView.Tv_BVar))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(107,4-107,16); use=FStar.Tactics.NamedView.fsti(107,4-107,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_AscribedT @x1
@x2
@x3
@x4)
FStar.Tactics.NamedView.named_term_view)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Tactics.NamedView.Tv_AscribedT @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Tactics.NamedView.Tv_AscribedT @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(FStar.Tactics.NamedView.Tv_AscribedT @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(FStar.Tactics.NamedView.Tv_AscribedT @x1
@x2
@x3
@x4)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_AscribedT @x1
@x2
@x3
@x4)
FStar.Tactics.NamedView.named_term_view))
:qid subterm_ordering_FStar.Tactics.NamedView.Tv_AscribedT))

:named subterm_ordering_FStar.Tactics.NamedView.Tv_AscribedT))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(108,4-108,16); use=FStar.Tactics.NamedView.fsti(108,4-108,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_AscribedC @x1
@x2
@x3
@x4)
FStar.Tactics.NamedView.named_term_view)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Tactics.NamedView.Tv_AscribedC @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Tactics.NamedView.Tv_AscribedC @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(FStar.Tactics.NamedView.Tv_AscribedC @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(FStar.Tactics.NamedView.Tv_AscribedC @x1
@x2
@x3
@x4)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_AscribedC @x1
@x2
@x3
@x4)
FStar.Tactics.NamedView.named_term_view))
:qid subterm_ordering_FStar.Tactics.NamedView.Tv_AscribedC))

:named subterm_ordering_FStar.Tactics.NamedView.Tv_AscribedC))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(100,4-100,12); use=FStar.Tactics.NamedView.fsti(100,4-100,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_Arrow @x1
@x2)
FStar.Tactics.NamedView.named_term_view)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Tactics.NamedView.Tv_Arrow @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Tactics.NamedView.Tv_Arrow @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_Arrow @x1
@x2)
FStar.Tactics.NamedView.named_term_view))
:qid subterm_ordering_FStar.Tactics.NamedView.Tv_Arrow))

:named subterm_ordering_FStar.Tactics.NamedView.Tv_Arrow))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(98,4-98,10); use=FStar.Tactics.NamedView.fsti(98,4-98,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_App @x1
@x2)
FStar.Tactics.NamedView.named_term_view)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Tactics.NamedView.Tv_App @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Tactics.NamedView.Tv_App @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_App @x1
@x2)
FStar.Tactics.NamedView.named_term_view))
:qid subterm_ordering_FStar.Tactics.NamedView.Tv_App))

:named subterm_ordering_FStar.Tactics.NamedView.Tv_App))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(99,4-99,10); use=FStar.Tactics.NamedView.fsti(99,4-99,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_Abs @x1
@x2)
FStar.Tactics.NamedView.named_term_view)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Tactics.NamedView.Tv_Abs @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Tactics.NamedView.Tv_Abs @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_Abs @x1
@x2)
FStar.Tactics.NamedView.named_term_view))
:qid subterm_ordering_FStar.Tactics.NamedView.Tv_Abs))

:named subterm_ordering_FStar.Tactics.NamedView.Tv_Abs))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(145,4-145,10); use=FStar.Tactics.NamedView.fsti(145,4-145,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Sg_Val @x1)
FStar.Tactics.NamedView.named_sigelt_view)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Tactics.NamedView.Sg_Val @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Sg_Val @x1)
FStar.Tactics.NamedView.named_sigelt_view))
:qid subterm_ordering_FStar.Tactics.NamedView.Sg_Val))

:named subterm_ordering_FStar.Tactics.NamedView.Sg_Val))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(128,4-128,10); use=FStar.Tactics.NamedView.fsti(128,4-128,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Sg_Let @x1)
FStar.Tactics.NamedView.named_sigelt_view)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Tactics.NamedView.Sg_Let @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Sg_Let @x1)
FStar.Tactics.NamedView.named_sigelt_view))
:qid subterm_ordering_FStar.Tactics.NamedView.Sg_Let))

:named subterm_ordering_FStar.Tactics.NamedView.Sg_Let))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(137,4-137,16); use=FStar.Tactics.NamedView.fsti(137,4-137,16)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Sg_Inductive @x1)
FStar.Tactics.NamedView.named_sigelt_view)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Tactics.NamedView.Sg_Inductive @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Sg_Inductive @x1)
FStar.Tactics.NamedView.named_sigelt_view))
:qid subterm_ordering_FStar.Tactics.NamedView.Sg_Inductive))

:named subterm_ordering_FStar.Tactics.NamedView.Sg_Inductive))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(145,4-145,10); use=FStar.Tactics.NamedView.fsti(145,4-145,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload @x1
@x2
@x3)
FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload @x1
@x2
@x3)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload @x1
@x2
@x3)
FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload))
:qid subterm_ordering_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload))

:named subterm_ordering_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(128,4-128,10); use=FStar.Tactics.NamedView.fsti(128,4-128,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload @x1
@x2)
FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload @x1
@x2)
FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload))
:qid subterm_ordering_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload))

:named subterm_ordering_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(137,4-137,16); use=FStar.Tactics.NamedView.fsti(137,4-137,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload @x1
@x2
@x3
@x4
@x5)
FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x5
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload @x1
@x2
@x3
@x4
@x5)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload @x1
@x2
@x3
@x4
@x5)
FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload))
:qid subterm_ordering_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload))

:named subterm_ordering_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Tactics.NamedView.letbinding; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkletbinding; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(118,5-118,15); use=FStar.Tactics.NamedView.fsti(118,5-118,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Mkletbinding @x1
@x2
@x3
@x4)
FStar.Tactics.NamedView.letbinding)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Tactics.NamedView.Mkletbinding @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Tactics.NamedView.Mkletbinding @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(FStar.Tactics.NamedView.Mkletbinding @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(FStar.Tactics.NamedView.Mkletbinding @x1
@x2
@x3
@x4)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Mkletbinding @x1
@x2
@x3
@x4)
FStar.Tactics.NamedView.letbinding))
:qid subterm_ordering_FStar.Tactics.NamedView.Mkletbinding))

:named subterm_ordering_FStar.Tactics.NamedView.Mkletbinding))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Tactics.NamedView.binder; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkbinder; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(35,5-35,11); use=FStar.Tactics.NamedView.fsti(35,5-35,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Mkbinder @x1
@x2
@x3
@x4
@x5)
FStar.Tactics.NamedView.binder)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Tactics.NamedView.Mkbinder @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Tactics.NamedView.Mkbinder @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(FStar.Tactics.NamedView.Mkbinder @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(FStar.Tactics.NamedView.Mkbinder @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x5
(FStar.Tactics.NamedView.Mkbinder @x1
@x2
@x3
@x4
@x5)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Mkbinder @x1
@x2
@x3
@x4
@x5)
FStar.Tactics.NamedView.binder))
:qid subterm_ordering_FStar.Tactics.NamedView.Mkbinder))

:named subterm_ordering_FStar.Tactics.NamedView.Mkbinder))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.bv_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Mkbv_view; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(94,5-94,12); use=FStar.Stubs.Reflection.V2.Data.fsti(94,5-94,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Mkbv_view @x1
@x2
@x3)
FStar.Stubs.Reflection.V2.Data.bv_view)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Stubs.Reflection.V2.Data.Mkbv_view @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Stubs.Reflection.V2.Data.Mkbv_view @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(FStar.Stubs.Reflection.V2.Data.Mkbv_view @x1
@x2
@x3)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Mkbv_view @x1
@x2
@x3)
FStar.Stubs.Reflection.V2.Data.bv_view))
:qid subterm_ordering_FStar.Stubs.Reflection.V2.Data.Mkbv_view))

:named subterm_ordering_FStar.Stubs.Reflection.V2.Data.Mkbv_view))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.comp_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Total; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_GTotal; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Lemma; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Eff; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(165,4-165,11); use=FStar.Stubs.Reflection.V2.Data.fsti(165,4-165,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.C_Total @x1)
FStar.Stubs.Reflection.V2.Data.comp_view)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Stubs.Reflection.V2.Data.C_Total @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.C_Total @x1)
FStar.Stubs.Reflection.V2.Data.comp_view))
:qid subterm_ordering_FStar.Stubs.Reflection.V2.Data.C_Total))

:named subterm_ordering_FStar.Stubs.Reflection.V2.Data.C_Total))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.comp_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Total; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_GTotal; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Lemma; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Eff; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(167,4-167,11); use=FStar.Stubs.Reflection.V2.Data.fsti(167,4-167,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.C_Lemma @x1
@x2
@x3)
FStar.Stubs.Reflection.V2.Data.comp_view)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Stubs.Reflection.V2.Data.C_Lemma @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Stubs.Reflection.V2.Data.C_Lemma @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(FStar.Stubs.Reflection.V2.Data.C_Lemma @x1
@x2
@x3)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.C_Lemma @x1
@x2
@x3)
FStar.Stubs.Reflection.V2.Data.comp_view))
:qid subterm_ordering_FStar.Stubs.Reflection.V2.Data.C_Lemma))

:named subterm_ordering_FStar.Stubs.Reflection.V2.Data.C_Lemma))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.comp_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Total; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_GTotal; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Lemma; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Eff; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(166,4-166,12); use=FStar.Stubs.Reflection.V2.Data.fsti(166,4-166,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.C_GTotal @x1)
FStar.Stubs.Reflection.V2.Data.comp_view)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Stubs.Reflection.V2.Data.C_GTotal @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.C_GTotal @x1)
FStar.Stubs.Reflection.V2.Data.comp_view))
:qid subterm_ordering_FStar.Stubs.Reflection.V2.Data.C_GTotal))

:named subterm_ordering_FStar.Stubs.Reflection.V2.Data.C_GTotal))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.comp_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Total; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_GTotal; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Lemma; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Eff; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(168,4-168,9); use=FStar.Stubs.Reflection.V2.Data.fsti(168,4-168,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.C_Eff @x1
@x2
@x3
@x4
@x5)
FStar.Stubs.Reflection.V2.Data.comp_view)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(FStar.Stubs.Reflection.V2.Data.C_Eff @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Stubs.Reflection.V2.Data.C_Eff @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(FStar.Stubs.Reflection.V2.Data.C_Eff @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(FStar.Stubs.Reflection.V2.Data.C_Eff @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x5
(FStar.Stubs.Reflection.V2.Data.C_Eff @x1
@x2
@x3
@x4
@x5)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.C_Eff @x1
@x2
@x3
@x4
@x5)
FStar.Stubs.Reflection.V2.Data.comp_view))
:qid subterm_ordering_FStar.Stubs.Reflection.V2.Data.C_Eff))

:named subterm_ordering_FStar.Stubs.Reflection.V2.Data.C_Eff))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__C_GTotal__item__ret; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType Tm_refine_f55a5511b0c7b341ac4e0a29f002e4aa
Tm_type)
:named refinement_kinding_Tm_refine_f55a5511b0c7b341ac4e0a29f002e4aa))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_Arrow__item__b; Namespace FStar.Tactics.NamedView
(assert (! (HasType Tm_refine_f2276b7d8e23c26ee3ba9a535c3c060a
Tm_type)
:named refinement_kinding_Tm_refine_f2276b7d8e23c26ee3ba9a535c3c060a))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_Const__item___0; Namespace FStar.Tactics.NamedView
(assert (! (HasType Tm_refine_e43528237c88eee4c4a7209fbfece30a
Tm_type)
:named refinement_kinding_Tm_refine_e43528237c88eee4c4a7209fbfece30a))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__us; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType Tm_refine_dd0fe4daa6c85dc6cf40f0518ba6e942
Tm_type)
:named refinement_kinding_Tm_refine_dd0fe4daa6c85dc6cf40f0518ba6e942))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_App__item__hd; Namespace FStar.Tactics.NamedView
(assert (! (HasType Tm_refine_cffc8fe5fb5b8b45155c826839a0836a
Tm_type)
:named refinement_kinding_Tm_refine_cffc8fe5fb5b8b45155c826839a0836a))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Sg_Val__item___0; Namespace FStar.Tactics.NamedView
(assert (! (HasType Tm_refine_ca9b00c9dce34c559545c63ba449a355
Tm_type)
:named refinement_kinding_Tm_refine_ca9b00c9dce34c559545c63ba449a355))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_Type__item___0; Namespace FStar.Tactics.NamedView
(assert (! (HasType Tm_refine_b305bae344c1a3fca91e8645cdcd9dd7
Tm_type)
:named refinement_kinding_Tm_refine_b305bae344c1a3fca91e8645cdcd9dd7))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Tactics.NamedView.simple_binder; Namespace FStar.Tactics.NamedView
(assert (! (HasType Tm_refine_b26ca2aff6a22929fb21b63f378a437f
Tm_type)
:named refinement_kinding_Tm_refine_b26ca2aff6a22929fb21b63f378a437f))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_Var__item__v; Namespace FStar.Tactics.NamedView
(assert (! (HasType Tm_refine_87a3dba5453ef74fda9f0336086dad8a
Tm_type)
:named refinement_kinding_Tm_refine_87a3dba5453ef74fda9f0336086dad8a))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_FVar__item__v; Namespace FStar.Tactics.NamedView
(assert (! (HasType Tm_refine_7aae385a6086c7833dd8519240cd12b3
Tm_type)
:named refinement_kinding_Tm_refine_7aae385a6086c7833dd8519240cd12b3))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__C_Total__item__ret; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType Tm_refine_74ef9f3102c78539bcc06df8913ee8b1
Tm_type)
:named refinement_kinding_Tm_refine_74ef9f3102c78539bcc06df8913ee8b1))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_UInst__item__v; Namespace FStar.Tactics.NamedView
(assert (! (HasType Tm_refine_655439b8882f5161418b9e9a204ac9a0
Tm_type)
:named refinement_kinding_Tm_refine_655439b8882f5161418b9e9a204ac9a0))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_Abs__item__b; Namespace FStar.Tactics.NamedView
(assert (! (HasType Tm_refine_5d3cef9f2193748f571d405779044e57
Tm_type)
:named refinement_kinding_Tm_refine_5d3cef9f2193748f571d405779044e57))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_Let__item__recf; Namespace FStar.Tactics.NamedView
(assert (! (HasType Tm_refine_580a83cfd5a14ce77506ef9a20b92d03
Tm_type)
:named refinement_kinding_Tm_refine_580a83cfd5a14ce77506ef9a20b92d03))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__e; Namespace FStar.Tactics.NamedView
(assert (! (HasType Tm_refine_4fe825d3c6fe2aa01d40d69b72618cd9
Tm_type)
:named refinement_kinding_Tm_refine_4fe825d3c6fe2aa01d40d69b72618cd9))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Sg_Inductive__item___0; Namespace FStar.Tactics.NamedView
(assert (! (HasType Tm_refine_452c9c8e2825a8035099cf4978a670c1
Tm_type)
:named refinement_kinding_Tm_refine_452c9c8e2825a8035099cf4978a670c1))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_Uvar__item___0; Namespace FStar.Tactics.NamedView
(assert (! (HasType Tm_refine_2dfafc08974a66f04ebf362802f0a508
Tm_type)
:named refinement_kinding_Tm_refine_2dfafc08974a66f04ebf362802f0a508))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_BVar__item__v; Namespace FStar.Tactics.NamedView
(assert (! (HasType Tm_refine_2041770b714b0ea10869e92b575e16fd
Tm_type)
:named refinement_kinding_Tm_refine_2041770b714b0ea10869e92b575e16fd))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_Refine__item__b; Namespace FStar.Tactics.NamedView
(assert (! (HasType Tm_refine_1c7ad8d12925c022661dbfe6bb0e51a3
Tm_type)
:named refinement_kinding_Tm_refine_1c7ad8d12925c022661dbfe6bb0e51a3))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__C_Lemma__item___0; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType Tm_refine_1bc38916a900e5bdd4fb925f184ebe66
Tm_type)
:named refinement_kinding_Tm_refine_1bc38916a900e5bdd4fb925f184ebe66))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__e; Namespace FStar.Tactics.NamedView
(assert (! (HasType Tm_refine_188807386559837eacdc72e583387de0
Tm_type)
:named refinement_kinding_Tm_refine_188807386559837eacdc72e583387de0))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Sg_Let__item___0; Namespace FStar.Tactics.NamedView
(assert (! (HasType Tm_refine_0c417824af864c5dfeb7045b84af008c
Tm_type)
:named refinement_kinding_Tm_refine_0c417824af864c5dfeb7045b84af008c))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_Match__item__scrutinee; Namespace FStar.Tactics.NamedView
(assert (! (HasType Tm_refine_0c31d3f32afa528dfef0b4e53409fe9f
Tm_type)
:named refinement_kinding_Tm_refine_0c31d3f32afa528dfef0b4e53409fe9f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__C_GTotal__item__ret; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(166,4-166,12); use=FStar.Stubs.Reflection.V2.Data.fsti(166,4-166,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_f55a5511b0c7b341ac4e0a29f002e4aa)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.comp_view)

;; def=FStar.Stubs.Reflection.V2.Data.fsti(166,4-166,12); use=FStar.Stubs.Reflection.V2.Data.fsti(166,4-166,12)
(BoxBool_proj_0 (FStar.Stubs.Reflection.V2.Data.uu___is_C_GTotal @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_f55a5511b0c7b341ac4e0a29f002e4aa))
:qid refinement_interpretation_Tm_refine_f55a5511b0c7b341ac4e0a29f002e4aa))

:named refinement_interpretation_Tm_refine_f55a5511b0c7b341ac4e0a29f002e4aa))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_Arrow__item__b; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(100,4-100,12); use=FStar.Tactics.NamedView.fsti(100,4-100,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_f2276b7d8e23c26ee3ba9a535c3c060a)
(and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.named_term_view)

;; def=FStar.Tactics.NamedView.fsti(100,4-100,12); use=FStar.Tactics.NamedView.fsti(100,4-100,12)
(BoxBool_proj_0 (FStar.Tactics.NamedView.uu___is_Tv_Arrow @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_f2276b7d8e23c26ee3ba9a535c3c060a))
:qid refinement_interpretation_Tm_refine_f2276b7d8e23c26ee3ba9a535c3c060a))

:named refinement_interpretation_Tm_refine_f2276b7d8e23c26ee3ba9a535c3c060a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_Const__item___0; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(103,4-103,12); use=FStar.Tactics.NamedView.fsti(103,4-103,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_e43528237c88eee4c4a7209fbfece30a)
(and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.named_term_view)

;; def=FStar.Tactics.NamedView.fsti(103,4-103,12); use=FStar.Tactics.NamedView.fsti(103,4-103,12)
(BoxBool_proj_0 (FStar.Tactics.NamedView.uu___is_Tv_Const @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_e43528237c88eee4c4a7209fbfece30a))
:qid refinement_interpretation_Tm_refine_e43528237c88eee4c4a7209fbfece30a))

:named refinement_interpretation_Tm_refine_e43528237c88eee4c4a7209fbfece30a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__us; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(168,4-168,9); use=FStar.Stubs.Reflection.V2.Data.fsti(168,4-168,9)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_dd0fe4daa6c85dc6cf40f0518ba6e942)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.comp_view)

;; def=FStar.Stubs.Reflection.V2.Data.fsti(168,4-168,9); use=FStar.Stubs.Reflection.V2.Data.fsti(168,4-168,9)
(BoxBool_proj_0 (FStar.Stubs.Reflection.V2.Data.uu___is_C_Eff @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_dd0fe4daa6c85dc6cf40f0518ba6e942))
:qid refinement_interpretation_Tm_refine_dd0fe4daa6c85dc6cf40f0518ba6e942))

:named refinement_interpretation_Tm_refine_dd0fe4daa6c85dc6cf40f0518ba6e942))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_App__item__hd; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(98,4-98,10); use=FStar.Tactics.NamedView.fsti(98,4-98,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_cffc8fe5fb5b8b45155c826839a0836a)
(and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.named_term_view)

;; def=FStar.Tactics.NamedView.fsti(98,4-98,10); use=FStar.Tactics.NamedView.fsti(98,4-98,10)
(BoxBool_proj_0 (FStar.Tactics.NamedView.uu___is_Tv_App @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_cffc8fe5fb5b8b45155c826839a0836a))
:qid refinement_interpretation_Tm_refine_cffc8fe5fb5b8b45155c826839a0836a))

:named refinement_interpretation_Tm_refine_cffc8fe5fb5b8b45155c826839a0836a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Sg_Val__item___0; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(145,4-145,10); use=FStar.Tactics.NamedView.fsti(145,4-145,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_ca9b00c9dce34c559545c63ba449a355)
(and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.named_sigelt_view)

;; def=FStar.Tactics.NamedView.fsti(145,4-145,10); use=FStar.Tactics.NamedView.fsti(145,4-145,10)
(BoxBool_proj_0 (FStar.Tactics.NamedView.uu___is_Sg_Val @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_ca9b00c9dce34c559545c63ba449a355))
:qid refinement_interpretation_Tm_refine_ca9b00c9dce34c559545c63ba449a355))

:named refinement_interpretation_Tm_refine_ca9b00c9dce34c559545c63ba449a355))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_Type__item___0; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(101,4-101,11); use=FStar.Tactics.NamedView.fsti(101,4-101,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_b305bae344c1a3fca91e8645cdcd9dd7)
(and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.named_term_view)

;; def=FStar.Tactics.NamedView.fsti(101,4-101,11); use=FStar.Tactics.NamedView.fsti(101,4-101,11)
(BoxBool_proj_0 (FStar.Tactics.NamedView.uu___is_Tv_Type @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_b305bae344c1a3fca91e8645cdcd9dd7))
:qid refinement_interpretation_Tm_refine_b305bae344c1a3fca91e8645cdcd9dd7))

:named refinement_interpretation_Tm_refine_b305bae344c1a3fca91e8645cdcd9dd7))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Tactics.NamedView.simple_binder; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(46,21-46,49); use=FStar.Tactics.NamedView.fsti(46,21-46,49)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_b26ca2aff6a22929fb21b63f378a437f)
(and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.binder)

;; def=FStar.Tactics.NamedView.fsti(46,30-46,48); use=FStar.Tactics.NamedView.fsti(46,30-46,48)
(Valid 
;; def=FStar.Tactics.NamedView.fsti(46,30-46,48); use=FStar.Tactics.NamedView.fsti(46,30-46,48)
(FStar.Tactics.NamedView.is_simple_binder @x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_b26ca2aff6a22929fb21b63f378a437f))
:qid refinement_interpretation_Tm_refine_b26ca2aff6a22929fb21b63f378a437f))

:named refinement_interpretation_Tm_refine_b26ca2aff6a22929fb21b63f378a437f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_Var__item__v; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(94,4-94,10); use=FStar.Tactics.NamedView.fsti(94,4-94,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_87a3dba5453ef74fda9f0336086dad8a)
(and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.named_term_view)

;; def=FStar.Tactics.NamedView.fsti(94,4-94,10); use=FStar.Tactics.NamedView.fsti(94,4-94,10)
(BoxBool_proj_0 (FStar.Tactics.NamedView.uu___is_Tv_Var @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_87a3dba5453ef74fda9f0336086dad8a))
:qid refinement_interpretation_Tm_refine_87a3dba5453ef74fda9f0336086dad8a))

:named refinement_interpretation_Tm_refine_87a3dba5453ef74fda9f0336086dad8a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_FVar__item__v; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(96,4-96,11); use=FStar.Tactics.NamedView.fsti(96,4-96,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_7aae385a6086c7833dd8519240cd12b3)
(and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.named_term_view)

;; def=FStar.Tactics.NamedView.fsti(96,4-96,11); use=FStar.Tactics.NamedView.fsti(96,4-96,11)
(BoxBool_proj_0 (FStar.Tactics.NamedView.uu___is_Tv_FVar @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_7aae385a6086c7833dd8519240cd12b3))
:qid refinement_interpretation_Tm_refine_7aae385a6086c7833dd8519240cd12b3))

:named refinement_interpretation_Tm_refine_7aae385a6086c7833dd8519240cd12b3))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__C_Total__item__ret; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(165,4-165,11); use=FStar.Stubs.Reflection.V2.Data.fsti(165,4-165,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_74ef9f3102c78539bcc06df8913ee8b1)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.comp_view)

;; def=FStar.Stubs.Reflection.V2.Data.fsti(165,4-165,11); use=FStar.Stubs.Reflection.V2.Data.fsti(165,4-165,11)
(BoxBool_proj_0 (FStar.Stubs.Reflection.V2.Data.uu___is_C_Total @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_74ef9f3102c78539bcc06df8913ee8b1))
:qid refinement_interpretation_Tm_refine_74ef9f3102c78539bcc06df8913ee8b1))

:named refinement_interpretation_Tm_refine_74ef9f3102c78539bcc06df8913ee8b1))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_UInst__item__v; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(97,4-97,12); use=FStar.Tactics.NamedView.fsti(97,4-97,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_655439b8882f5161418b9e9a204ac9a0)
(and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.named_term_view)

;; def=FStar.Tactics.NamedView.fsti(97,4-97,12); use=FStar.Tactics.NamedView.fsti(97,4-97,12)
(BoxBool_proj_0 (FStar.Tactics.NamedView.uu___is_Tv_UInst @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_655439b8882f5161418b9e9a204ac9a0))
:qid refinement_interpretation_Tm_refine_655439b8882f5161418b9e9a204ac9a0))

:named refinement_interpretation_Tm_refine_655439b8882f5161418b9e9a204ac9a0))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_Abs__item__b; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(99,4-99,10); use=FStar.Tactics.NamedView.fsti(99,4-99,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_5d3cef9f2193748f571d405779044e57)
(and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.named_term_view)

;; def=FStar.Tactics.NamedView.fsti(99,4-99,10); use=FStar.Tactics.NamedView.fsti(99,4-99,10)
(BoxBool_proj_0 (FStar.Tactics.NamedView.uu___is_Tv_Abs @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_5d3cef9f2193748f571d405779044e57))
:qid refinement_interpretation_Tm_refine_5d3cef9f2193748f571d405779044e57))

:named refinement_interpretation_Tm_refine_5d3cef9f2193748f571d405779044e57))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_Let__item__recf; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(105,4-105,10); use=FStar.Tactics.NamedView.fsti(105,4-105,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_580a83cfd5a14ce77506ef9a20b92d03)
(and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.named_term_view)

;; def=FStar.Tactics.NamedView.fsti(105,4-105,10); use=FStar.Tactics.NamedView.fsti(105,4-105,10)
(BoxBool_proj_0 (FStar.Tactics.NamedView.uu___is_Tv_Let @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_580a83cfd5a14ce77506ef9a20b92d03))
:qid refinement_interpretation_Tm_refine_580a83cfd5a14ce77506ef9a20b92d03))

:named refinement_interpretation_Tm_refine_580a83cfd5a14ce77506ef9a20b92d03))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__e; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(107,4-107,16); use=FStar.Tactics.NamedView.fsti(107,4-107,16)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4fe825d3c6fe2aa01d40d69b72618cd9)
(and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.named_term_view)

;; def=FStar.Tactics.NamedView.fsti(107,4-107,16); use=FStar.Tactics.NamedView.fsti(107,4-107,16)
(BoxBool_proj_0 (FStar.Tactics.NamedView.uu___is_Tv_AscribedT @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4fe825d3c6fe2aa01d40d69b72618cd9))
:qid refinement_interpretation_Tm_refine_4fe825d3c6fe2aa01d40d69b72618cd9))

:named refinement_interpretation_Tm_refine_4fe825d3c6fe2aa01d40d69b72618cd9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Sg_Inductive__item___0; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(137,4-137,16); use=FStar.Tactics.NamedView.fsti(137,4-137,16)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_452c9c8e2825a8035099cf4978a670c1)
(and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.named_sigelt_view)

;; def=FStar.Tactics.NamedView.fsti(137,4-137,16); use=FStar.Tactics.NamedView.fsti(137,4-137,16)
(BoxBool_proj_0 (FStar.Tactics.NamedView.uu___is_Sg_Inductive @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_452c9c8e2825a8035099cf4978a670c1))
:qid refinement_interpretation_Tm_refine_452c9c8e2825a8035099cf4978a670c1))

:named refinement_interpretation_Tm_refine_452c9c8e2825a8035099cf4978a670c1))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_Uvar__item___0; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(104,4-104,11); use=FStar.Tactics.NamedView.fsti(104,4-104,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_2dfafc08974a66f04ebf362802f0a508)
(and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.named_term_view)

;; def=FStar.Tactics.NamedView.fsti(104,4-104,11); use=FStar.Tactics.NamedView.fsti(104,4-104,11)
(BoxBool_proj_0 (FStar.Tactics.NamedView.uu___is_Tv_Uvar @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_2dfafc08974a66f04ebf362802f0a508))
:qid refinement_interpretation_Tm_refine_2dfafc08974a66f04ebf362802f0a508))

:named refinement_interpretation_Tm_refine_2dfafc08974a66f04ebf362802f0a508))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_BVar__item__v; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(95,4-95,11); use=FStar.Tactics.NamedView.fsti(95,4-95,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_2041770b714b0ea10869e92b575e16fd)
(and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.named_term_view)

;; def=FStar.Tactics.NamedView.fsti(95,4-95,11); use=FStar.Tactics.NamedView.fsti(95,4-95,11)
(BoxBool_proj_0 (FStar.Tactics.NamedView.uu___is_Tv_BVar @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_2041770b714b0ea10869e92b575e16fd))
:qid refinement_interpretation_Tm_refine_2041770b714b0ea10869e92b575e16fd))

:named refinement_interpretation_Tm_refine_2041770b714b0ea10869e92b575e16fd))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_Refine__item__b; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(102,4-102,13); use=FStar.Tactics.NamedView.fsti(102,4-102,13)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_1c7ad8d12925c022661dbfe6bb0e51a3)
(and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.named_term_view)

;; def=FStar.Tactics.NamedView.fsti(102,4-102,13); use=FStar.Tactics.NamedView.fsti(102,4-102,13)
(BoxBool_proj_0 (FStar.Tactics.NamedView.uu___is_Tv_Refine @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_1c7ad8d12925c022661dbfe6bb0e51a3))
:qid refinement_interpretation_Tm_refine_1c7ad8d12925c022661dbfe6bb0e51a3))

:named refinement_interpretation_Tm_refine_1c7ad8d12925c022661dbfe6bb0e51a3))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__C_Lemma__item___0; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(167,4-167,11); use=FStar.Stubs.Reflection.V2.Data.fsti(167,4-167,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_1bc38916a900e5bdd4fb925f184ebe66)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.comp_view)

;; def=FStar.Stubs.Reflection.V2.Data.fsti(167,4-167,11); use=FStar.Stubs.Reflection.V2.Data.fsti(167,4-167,11)
(BoxBool_proj_0 (FStar.Stubs.Reflection.V2.Data.uu___is_C_Lemma @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_1bc38916a900e5bdd4fb925f184ebe66))
:qid refinement_interpretation_Tm_refine_1bc38916a900e5bdd4fb925f184ebe66))

:named refinement_interpretation_Tm_refine_1bc38916a900e5bdd4fb925f184ebe66))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__e; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(108,4-108,16); use=FStar.Tactics.NamedView.fsti(108,4-108,16)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_188807386559837eacdc72e583387de0)
(and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.named_term_view)

;; def=FStar.Tactics.NamedView.fsti(108,4-108,16); use=FStar.Tactics.NamedView.fsti(108,4-108,16)
(BoxBool_proj_0 (FStar.Tactics.NamedView.uu___is_Tv_AscribedC @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_188807386559837eacdc72e583387de0))
:qid refinement_interpretation_Tm_refine_188807386559837eacdc72e583387de0))

:named refinement_interpretation_Tm_refine_188807386559837eacdc72e583387de0))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Sg_Let__item___0; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(128,4-128,10); use=FStar.Tactics.NamedView.fsti(128,4-128,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_0c417824af864c5dfeb7045b84af008c)
(and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.named_sigelt_view)

;; def=FStar.Tactics.NamedView.fsti(128,4-128,10); use=FStar.Tactics.NamedView.fsti(128,4-128,10)
(BoxBool_proj_0 (FStar.Tactics.NamedView.uu___is_Sg_Let @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_0c417824af864c5dfeb7045b84af008c))
:qid refinement_interpretation_Tm_refine_0c417824af864c5dfeb7045b84af008c))

:named refinement_interpretation_Tm_refine_0c417824af864c5dfeb7045b84af008c))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_Match__item__scrutinee; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(106,4-106,12); use=FStar.Tactics.NamedView.fsti(106,4-106,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_0c31d3f32afa528dfef0b4e53409fe9f)
(and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.named_term_view)

;; def=FStar.Tactics.NamedView.fsti(106,4-106,12); use=FStar.Tactics.NamedView.fsti(106,4-106,12)
(BoxBool_proj_0 (FStar.Tactics.NamedView.uu___is_Tv_Match @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_0c31d3f32afa528dfef0b4e53409fe9f))
:qid refinement_interpretation_Tm_refine_0c31d3f32afa528dfef0b4e53409fe9f))

:named refinement_interpretation_Tm_refine_0c31d3f32afa528dfef0b4e53409fe9f))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(94,4-94,10); use=FStar.Tactics.NamedView.fsti(94,4-94,10)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.Tv_Var_v (FStar.Tactics.NamedView.Tv_Var @x0))
@x0)
 

:pattern ((FStar.Tactics.NamedView.Tv_Var @x0))
:qid projection_inverse_FStar.Tactics.NamedView.Tv_Var_v))

:named projection_inverse_FStar.Tactics.NamedView.Tv_Var_v))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(104,4-104,11); use=FStar.Tactics.NamedView.fsti(104,4-104,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Tactics.NamedView.Tv_Uvar__1 (FStar.Tactics.NamedView.Tv_Uvar @x0
@x1))
@x1)
 

:pattern ((FStar.Tactics.NamedView.Tv_Uvar @x0
@x1))
:qid projection_inverse_FStar.Tactics.NamedView.Tv_Uvar__1))

:named projection_inverse_FStar.Tactics.NamedView.Tv_Uvar__1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(104,4-104,11); use=FStar.Tactics.NamedView.fsti(104,4-104,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Tactics.NamedView.Tv_Uvar__0 (FStar.Tactics.NamedView.Tv_Uvar @x0
@x1))
@x0)
 

:pattern ((FStar.Tactics.NamedView.Tv_Uvar @x0
@x1))
:qid projection_inverse_FStar.Tactics.NamedView.Tv_Uvar__0))

:named projection_inverse_FStar.Tactics.NamedView.Tv_Uvar__0))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(97,4-97,12); use=FStar.Tactics.NamedView.fsti(97,4-97,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Tactics.NamedView.Tv_UInst_v (FStar.Tactics.NamedView.Tv_UInst @x0
@x1))
@x0)
 

:pattern ((FStar.Tactics.NamedView.Tv_UInst @x0
@x1))
:qid projection_inverse_FStar.Tactics.NamedView.Tv_UInst_v))

:named projection_inverse_FStar.Tactics.NamedView.Tv_UInst_v))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(97,4-97,12); use=FStar.Tactics.NamedView.fsti(97,4-97,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Tactics.NamedView.Tv_UInst_us (FStar.Tactics.NamedView.Tv_UInst @x0
@x1))
@x1)
 

:pattern ((FStar.Tactics.NamedView.Tv_UInst @x0
@x1))
:qid projection_inverse_FStar.Tactics.NamedView.Tv_UInst_us))

:named projection_inverse_FStar.Tactics.NamedView.Tv_UInst_us))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(101,4-101,11); use=FStar.Tactics.NamedView.fsti(101,4-101,11)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.Tv_Type__0 (FStar.Tactics.NamedView.Tv_Type @x0))
@x0)
 

:pattern ((FStar.Tactics.NamedView.Tv_Type @x0))
:qid projection_inverse_FStar.Tactics.NamedView.Tv_Type__0))

:named projection_inverse_FStar.Tactics.NamedView.Tv_Type__0))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(102,4-102,13); use=FStar.Tactics.NamedView.fsti(102,4-102,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Tactics.NamedView.Tv_Refine_ref (FStar.Tactics.NamedView.Tv_Refine @x0
@x1))
@x1)
 

:pattern ((FStar.Tactics.NamedView.Tv_Refine @x0
@x1))
:qid projection_inverse_FStar.Tactics.NamedView.Tv_Refine_ref))

:named projection_inverse_FStar.Tactics.NamedView.Tv_Refine_ref))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(102,4-102,13); use=FStar.Tactics.NamedView.fsti(102,4-102,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Tactics.NamedView.Tv_Refine_b (FStar.Tactics.NamedView.Tv_Refine @x0
@x1))
@x0)
 

:pattern ((FStar.Tactics.NamedView.Tv_Refine @x0
@x1))
:qid projection_inverse_FStar.Tactics.NamedView.Tv_Refine_b))

:named projection_inverse_FStar.Tactics.NamedView.Tv_Refine_b))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(106,4-106,12); use=FStar.Tactics.NamedView.fsti(106,4-106,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Tactics.NamedView.Tv_Match_scrutinee (FStar.Tactics.NamedView.Tv_Match @x0
@x1
@x2))
@x0)
 

:pattern ((FStar.Tactics.NamedView.Tv_Match @x0
@x1
@x2))
:qid projection_inverse_FStar.Tactics.NamedView.Tv_Match_scrutinee))

:named projection_inverse_FStar.Tactics.NamedView.Tv_Match_scrutinee))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(106,4-106,12); use=FStar.Tactics.NamedView.fsti(106,4-106,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Tactics.NamedView.Tv_Match_ret (FStar.Tactics.NamedView.Tv_Match @x0
@x1
@x2))
@x1)
 

:pattern ((FStar.Tactics.NamedView.Tv_Match @x0
@x1
@x2))
:qid projection_inverse_FStar.Tactics.NamedView.Tv_Match_ret))

:named projection_inverse_FStar.Tactics.NamedView.Tv_Match_ret))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(106,4-106,12); use=FStar.Tactics.NamedView.fsti(106,4-106,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Tactics.NamedView.Tv_Match_brs (FStar.Tactics.NamedView.Tv_Match @x0
@x1
@x2))
@x2)
 

:pattern ((FStar.Tactics.NamedView.Tv_Match @x0
@x1
@x2))
:qid projection_inverse_FStar.Tactics.NamedView.Tv_Match_brs))

:named projection_inverse_FStar.Tactics.NamedView.Tv_Match_brs))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(105,4-105,10); use=FStar.Tactics.NamedView.fsti(105,4-105,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Tactics.NamedView.Tv_Let_recf (FStar.Tactics.NamedView.Tv_Let @x0
@x1
@x2
@x3
@x4))
@x0)
 

:pattern ((FStar.Tactics.NamedView.Tv_Let @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_FStar.Tactics.NamedView.Tv_Let_recf))

:named projection_inverse_FStar.Tactics.NamedView.Tv_Let_recf))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(105,4-105,10); use=FStar.Tactics.NamedView.fsti(105,4-105,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Tactics.NamedView.Tv_Let_def (FStar.Tactics.NamedView.Tv_Let @x0
@x1
@x2
@x3
@x4))
@x3)
 

:pattern ((FStar.Tactics.NamedView.Tv_Let @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_FStar.Tactics.NamedView.Tv_Let_def))

:named projection_inverse_FStar.Tactics.NamedView.Tv_Let_def))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(105,4-105,10); use=FStar.Tactics.NamedView.fsti(105,4-105,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Tactics.NamedView.Tv_Let_body (FStar.Tactics.NamedView.Tv_Let @x0
@x1
@x2
@x3
@x4))
@x4)
 

:pattern ((FStar.Tactics.NamedView.Tv_Let @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_FStar.Tactics.NamedView.Tv_Let_body))

:named projection_inverse_FStar.Tactics.NamedView.Tv_Let_body))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(105,4-105,10); use=FStar.Tactics.NamedView.fsti(105,4-105,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Tactics.NamedView.Tv_Let_b (FStar.Tactics.NamedView.Tv_Let @x0
@x1
@x2
@x3
@x4))
@x2)
 

:pattern ((FStar.Tactics.NamedView.Tv_Let @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_FStar.Tactics.NamedView.Tv_Let_b))

:named projection_inverse_FStar.Tactics.NamedView.Tv_Let_b))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(105,4-105,10); use=FStar.Tactics.NamedView.fsti(105,4-105,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Tactics.NamedView.Tv_Let_attrs (FStar.Tactics.NamedView.Tv_Let @x0
@x1
@x2
@x3
@x4))
@x1)
 

:pattern ((FStar.Tactics.NamedView.Tv_Let @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_FStar.Tactics.NamedView.Tv_Let_attrs))

:named projection_inverse_FStar.Tactics.NamedView.Tv_Let_attrs))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(96,4-96,11); use=FStar.Tactics.NamedView.fsti(96,4-96,11)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.Tv_FVar_v (FStar.Tactics.NamedView.Tv_FVar @x0))
@x0)
 

:pattern ((FStar.Tactics.NamedView.Tv_FVar @x0))
:qid projection_inverse_FStar.Tactics.NamedView.Tv_FVar_v))

:named projection_inverse_FStar.Tactics.NamedView.Tv_FVar_v))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(103,4-103,12); use=FStar.Tactics.NamedView.fsti(103,4-103,12)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.Tv_Const__0 (FStar.Tactics.NamedView.Tv_Const @x0))
@x0)
 

:pattern ((FStar.Tactics.NamedView.Tv_Const @x0))
:qid projection_inverse_FStar.Tactics.NamedView.Tv_Const__0))

:named projection_inverse_FStar.Tactics.NamedView.Tv_Const__0))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(95,4-95,11); use=FStar.Tactics.NamedView.fsti(95,4-95,11)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.Tv_BVar_v (FStar.Tactics.NamedView.Tv_BVar @x0))
@x0)
 

:pattern ((FStar.Tactics.NamedView.Tv_BVar @x0))
:qid projection_inverse_FStar.Tactics.NamedView.Tv_BVar_v))

:named projection_inverse_FStar.Tactics.NamedView.Tv_BVar_v))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(107,4-107,16); use=FStar.Tactics.NamedView.fsti(107,4-107,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Tactics.NamedView.Tv_AscribedT_use_eq (FStar.Tactics.NamedView.Tv_AscribedT @x0
@x1
@x2
@x3))
@x3)
 

:pattern ((FStar.Tactics.NamedView.Tv_AscribedT @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Tactics.NamedView.Tv_AscribedT_use_eq))

:named projection_inverse_FStar.Tactics.NamedView.Tv_AscribedT_use_eq))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(107,4-107,16); use=FStar.Tactics.NamedView.fsti(107,4-107,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Tactics.NamedView.Tv_AscribedT_tac (FStar.Tactics.NamedView.Tv_AscribedT @x0
@x1
@x2
@x3))
@x2)
 

:pattern ((FStar.Tactics.NamedView.Tv_AscribedT @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Tactics.NamedView.Tv_AscribedT_tac))

:named projection_inverse_FStar.Tactics.NamedView.Tv_AscribedT_tac))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(107,4-107,16); use=FStar.Tactics.NamedView.fsti(107,4-107,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Tactics.NamedView.Tv_AscribedT_t (FStar.Tactics.NamedView.Tv_AscribedT @x0
@x1
@x2
@x3))
@x1)
 

:pattern ((FStar.Tactics.NamedView.Tv_AscribedT @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Tactics.NamedView.Tv_AscribedT_t))

:named projection_inverse_FStar.Tactics.NamedView.Tv_AscribedT_t))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(107,4-107,16); use=FStar.Tactics.NamedView.fsti(107,4-107,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Tactics.NamedView.Tv_AscribedT_e (FStar.Tactics.NamedView.Tv_AscribedT @x0
@x1
@x2
@x3))
@x0)
 

:pattern ((FStar.Tactics.NamedView.Tv_AscribedT @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Tactics.NamedView.Tv_AscribedT_e))

:named projection_inverse_FStar.Tactics.NamedView.Tv_AscribedT_e))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(108,4-108,16); use=FStar.Tactics.NamedView.fsti(108,4-108,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Tactics.NamedView.Tv_AscribedC_use_eq (FStar.Tactics.NamedView.Tv_AscribedC @x0
@x1
@x2
@x3))
@x3)
 

:pattern ((FStar.Tactics.NamedView.Tv_AscribedC @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Tactics.NamedView.Tv_AscribedC_use_eq))

:named projection_inverse_FStar.Tactics.NamedView.Tv_AscribedC_use_eq))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(108,4-108,16); use=FStar.Tactics.NamedView.fsti(108,4-108,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Tactics.NamedView.Tv_AscribedC_tac (FStar.Tactics.NamedView.Tv_AscribedC @x0
@x1
@x2
@x3))
@x2)
 

:pattern ((FStar.Tactics.NamedView.Tv_AscribedC @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Tactics.NamedView.Tv_AscribedC_tac))

:named projection_inverse_FStar.Tactics.NamedView.Tv_AscribedC_tac))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(108,4-108,16); use=FStar.Tactics.NamedView.fsti(108,4-108,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Tactics.NamedView.Tv_AscribedC_e (FStar.Tactics.NamedView.Tv_AscribedC @x0
@x1
@x2
@x3))
@x0)
 

:pattern ((FStar.Tactics.NamedView.Tv_AscribedC @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Tactics.NamedView.Tv_AscribedC_e))

:named projection_inverse_FStar.Tactics.NamedView.Tv_AscribedC_e))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(108,4-108,16); use=FStar.Tactics.NamedView.fsti(108,4-108,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Tactics.NamedView.Tv_AscribedC_c (FStar.Tactics.NamedView.Tv_AscribedC @x0
@x1
@x2
@x3))
@x1)
 

:pattern ((FStar.Tactics.NamedView.Tv_AscribedC @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Tactics.NamedView.Tv_AscribedC_c))

:named projection_inverse_FStar.Tactics.NamedView.Tv_AscribedC_c))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(100,4-100,12); use=FStar.Tactics.NamedView.fsti(100,4-100,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Tactics.NamedView.Tv_Arrow_c (FStar.Tactics.NamedView.Tv_Arrow @x0
@x1))
@x1)
 

:pattern ((FStar.Tactics.NamedView.Tv_Arrow @x0
@x1))
:qid projection_inverse_FStar.Tactics.NamedView.Tv_Arrow_c))

:named projection_inverse_FStar.Tactics.NamedView.Tv_Arrow_c))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(100,4-100,12); use=FStar.Tactics.NamedView.fsti(100,4-100,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Tactics.NamedView.Tv_Arrow_b (FStar.Tactics.NamedView.Tv_Arrow @x0
@x1))
@x0)
 

:pattern ((FStar.Tactics.NamedView.Tv_Arrow @x0
@x1))
:qid projection_inverse_FStar.Tactics.NamedView.Tv_Arrow_b))

:named projection_inverse_FStar.Tactics.NamedView.Tv_Arrow_b))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(98,4-98,10); use=FStar.Tactics.NamedView.fsti(98,4-98,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Tactics.NamedView.Tv_App_hd (FStar.Tactics.NamedView.Tv_App @x0
@x1))
@x0)
 

:pattern ((FStar.Tactics.NamedView.Tv_App @x0
@x1))
:qid projection_inverse_FStar.Tactics.NamedView.Tv_App_hd))

:named projection_inverse_FStar.Tactics.NamedView.Tv_App_hd))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(98,4-98,10); use=FStar.Tactics.NamedView.fsti(98,4-98,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Tactics.NamedView.Tv_App_a (FStar.Tactics.NamedView.Tv_App @x0
@x1))
@x1)
 

:pattern ((FStar.Tactics.NamedView.Tv_App @x0
@x1))
:qid projection_inverse_FStar.Tactics.NamedView.Tv_App_a))

:named projection_inverse_FStar.Tactics.NamedView.Tv_App_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(99,4-99,10); use=FStar.Tactics.NamedView.fsti(99,4-99,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Tactics.NamedView.Tv_Abs_body (FStar.Tactics.NamedView.Tv_Abs @x0
@x1))
@x1)
 

:pattern ((FStar.Tactics.NamedView.Tv_Abs @x0
@x1))
:qid projection_inverse_FStar.Tactics.NamedView.Tv_Abs_body))

:named projection_inverse_FStar.Tactics.NamedView.Tv_Abs_body))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(99,4-99,10); use=FStar.Tactics.NamedView.fsti(99,4-99,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Tactics.NamedView.Tv_Abs_b (FStar.Tactics.NamedView.Tv_Abs @x0
@x1))
@x0)
 

:pattern ((FStar.Tactics.NamedView.Tv_Abs @x0
@x1))
:qid projection_inverse_FStar.Tactics.NamedView.Tv_Abs_b))

:named projection_inverse_FStar.Tactics.NamedView.Tv_Abs_b))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(145,4-145,10); use=FStar.Tactics.NamedView.fsti(145,4-145,10)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.Sg_Val__0 (FStar.Tactics.NamedView.Sg_Val @x0))
@x0)
 

:pattern ((FStar.Tactics.NamedView.Sg_Val @x0))
:qid projection_inverse_FStar.Tactics.NamedView.Sg_Val__0))

:named projection_inverse_FStar.Tactics.NamedView.Sg_Val__0))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(128,4-128,10); use=FStar.Tactics.NamedView.fsti(128,4-128,10)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.Sg_Let__0 (FStar.Tactics.NamedView.Sg_Let @x0))
@x0)
 

:pattern ((FStar.Tactics.NamedView.Sg_Let @x0))
:qid projection_inverse_FStar.Tactics.NamedView.Sg_Let__0))

:named projection_inverse_FStar.Tactics.NamedView.Sg_Let__0))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(137,4-137,16); use=FStar.Tactics.NamedView.fsti(137,4-137,16)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.Sg_Inductive__0 (FStar.Tactics.NamedView.Sg_Inductive @x0))
@x0)
 

:pattern ((FStar.Tactics.NamedView.Sg_Inductive @x0))
:qid projection_inverse_FStar.Tactics.NamedView.Sg_Inductive__0))

:named projection_inverse_FStar.Tactics.NamedView.Sg_Inductive__0))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(145,4-145,10); use=FStar.Tactics.NamedView.fsti(145,4-145,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload_univs (FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload @x0
@x1
@x2))
@x1)
 

:pattern ((FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload @x0
@x1
@x2))
:qid projection_inverse_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload_univs))

:named projection_inverse_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload_univs))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(145,4-145,10); use=FStar.Tactics.NamedView.fsti(145,4-145,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload_typ (FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload @x0
@x1
@x2))
@x2)
 

:pattern ((FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload @x0
@x1
@x2))
:qid projection_inverse_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload_typ))

:named projection_inverse_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload_typ))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(145,4-145,10); use=FStar.Tactics.NamedView.fsti(145,4-145,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload_nm (FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload @x0
@x1
@x2))
@x0)
 

:pattern ((FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload @x0
@x1
@x2))
:qid projection_inverse_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload_nm))

:named projection_inverse_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload_nm))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(128,4-128,10); use=FStar.Tactics.NamedView.fsti(128,4-128,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload_lbs (FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload @x0
@x1))
@x1)
 

:pattern ((FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload @x0
@x1))
:qid projection_inverse_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload_lbs))

:named projection_inverse_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload_lbs))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(128,4-128,10); use=FStar.Tactics.NamedView.fsti(128,4-128,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload_isrec (FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload @x0
@x1))
@x0)
 

:pattern ((FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload @x0
@x1))
:qid projection_inverse_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload_isrec))

:named projection_inverse_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload_isrec))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(137,4-137,16); use=FStar.Tactics.NamedView.fsti(137,4-137,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_univs (FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload @x0
@x1
@x2
@x3
@x4))
@x1)
 

:pattern ((FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_univs))

:named projection_inverse_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_univs))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(137,4-137,16); use=FStar.Tactics.NamedView.fsti(137,4-137,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_typ (FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload @x0
@x1
@x2
@x3
@x4))
@x3)
 

:pattern ((FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_typ))

:named projection_inverse_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_typ))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(137,4-137,16); use=FStar.Tactics.NamedView.fsti(137,4-137,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_params (FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload @x0
@x1
@x2
@x3
@x4))
@x2)
 

:pattern ((FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_params))

:named projection_inverse_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_params))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(137,4-137,16); use=FStar.Tactics.NamedView.fsti(137,4-137,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_nm (FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload @x0
@x1
@x2
@x3
@x4))
@x0)
 

:pattern ((FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_nm))

:named projection_inverse_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_nm))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(137,4-137,16); use=FStar.Tactics.NamedView.fsti(137,4-137,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_ctors (FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload @x0
@x1
@x2
@x3
@x4))
@x4)
 

:pattern ((FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_ctors))

:named projection_inverse_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_ctors))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.letbinding; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkletbinding; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(118,5-118,15); use=FStar.Tactics.NamedView.fsti(118,5-118,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Tactics.NamedView.Mkletbinding_lb_us (FStar.Tactics.NamedView.Mkletbinding @x0
@x1
@x2
@x3))
@x1)
 

:pattern ((FStar.Tactics.NamedView.Mkletbinding @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Tactics.NamedView.Mkletbinding_lb_us))

:named projection_inverse_FStar.Tactics.NamedView.Mkletbinding_lb_us))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.letbinding; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkletbinding; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(118,5-118,15); use=FStar.Tactics.NamedView.fsti(118,5-118,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Tactics.NamedView.Mkletbinding_lb_typ (FStar.Tactics.NamedView.Mkletbinding @x0
@x1
@x2
@x3))
@x2)
 

:pattern ((FStar.Tactics.NamedView.Mkletbinding @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Tactics.NamedView.Mkletbinding_lb_typ))

:named projection_inverse_FStar.Tactics.NamedView.Mkletbinding_lb_typ))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.letbinding; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkletbinding; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(118,5-118,15); use=FStar.Tactics.NamedView.fsti(118,5-118,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Tactics.NamedView.Mkletbinding_lb_fv (FStar.Tactics.NamedView.Mkletbinding @x0
@x1
@x2
@x3))
@x0)
 

:pattern ((FStar.Tactics.NamedView.Mkletbinding @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Tactics.NamedView.Mkletbinding_lb_fv))

:named projection_inverse_FStar.Tactics.NamedView.Mkletbinding_lb_fv))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.letbinding; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkletbinding; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(118,5-118,15); use=FStar.Tactics.NamedView.fsti(118,5-118,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Tactics.NamedView.Mkletbinding_lb_def (FStar.Tactics.NamedView.Mkletbinding @x0
@x1
@x2
@x3))
@x3)
 

:pattern ((FStar.Tactics.NamedView.Mkletbinding @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Tactics.NamedView.Mkletbinding_lb_def))

:named projection_inverse_FStar.Tactics.NamedView.Mkletbinding_lb_def))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.binder; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkbinder; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(35,5-35,11); use=FStar.Tactics.NamedView.fsti(35,5-35,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Tactics.NamedView.Mkbinder_uniq (FStar.Tactics.NamedView.Mkbinder @x0
@x1
@x2
@x3
@x4))
@x0)
 

:pattern ((FStar.Tactics.NamedView.Mkbinder @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_FStar.Tactics.NamedView.Mkbinder_uniq))

:named projection_inverse_FStar.Tactics.NamedView.Mkbinder_uniq))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.binder; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkbinder; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(35,5-35,11); use=FStar.Tactics.NamedView.fsti(35,5-35,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Tactics.NamedView.Mkbinder_sort (FStar.Tactics.NamedView.Mkbinder @x0
@x1
@x2
@x3
@x4))
@x2)
 

:pattern ((FStar.Tactics.NamedView.Mkbinder @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_FStar.Tactics.NamedView.Mkbinder_sort))

:named projection_inverse_FStar.Tactics.NamedView.Mkbinder_sort))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.binder; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkbinder; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(35,5-35,11); use=FStar.Tactics.NamedView.fsti(35,5-35,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Tactics.NamedView.Mkbinder_qual (FStar.Tactics.NamedView.Mkbinder @x0
@x1
@x2
@x3
@x4))
@x3)
 

:pattern ((FStar.Tactics.NamedView.Mkbinder @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_FStar.Tactics.NamedView.Mkbinder_qual))

:named projection_inverse_FStar.Tactics.NamedView.Mkbinder_qual))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.binder; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkbinder; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(35,5-35,11); use=FStar.Tactics.NamedView.fsti(35,5-35,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Tactics.NamedView.Mkbinder_ppname (FStar.Tactics.NamedView.Mkbinder @x0
@x1
@x2
@x3
@x4))
@x1)
 

:pattern ((FStar.Tactics.NamedView.Mkbinder @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_FStar.Tactics.NamedView.Mkbinder_ppname))

:named projection_inverse_FStar.Tactics.NamedView.Mkbinder_ppname))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Tactics.NamedView.binder; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkbinder; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(35,5-35,11); use=FStar.Tactics.NamedView.fsti(35,5-35,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Tactics.NamedView.Mkbinder_attrs (FStar.Tactics.NamedView.Mkbinder @x0
@x1
@x2
@x3
@x4))
@x4)
 

:pattern ((FStar.Tactics.NamedView.Mkbinder @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_FStar.Tactics.NamedView.Mkbinder_attrs))

:named projection_inverse_FStar.Tactics.NamedView.Mkbinder_attrs))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.bv_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Mkbv_view; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(94,5-94,12); use=FStar.Stubs.Reflection.V2.Data.fsti(94,5-94,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Mkbv_view_sort (FStar.Stubs.Reflection.V2.Data.Mkbv_view @x0
@x1
@x2))
@x1)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Mkbv_view @x0
@x1
@x2))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Mkbv_view_sort))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Mkbv_view_sort))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.bv_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Mkbv_view; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(94,5-94,12); use=FStar.Stubs.Reflection.V2.Data.fsti(94,5-94,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Mkbv_view_ppname (FStar.Stubs.Reflection.V2.Data.Mkbv_view @x0
@x1
@x2))
@x2)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Mkbv_view @x0
@x1
@x2))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Mkbv_view_ppname))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Mkbv_view_ppname))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.bv_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Mkbv_view; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(94,5-94,12); use=FStar.Stubs.Reflection.V2.Data.fsti(94,5-94,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.Mkbv_view_index (FStar.Stubs.Reflection.V2.Data.Mkbv_view @x0
@x1
@x2))
@x0)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Mkbv_view @x0
@x1
@x2))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.Mkbv_view_index))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.Mkbv_view_index))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.comp_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Total; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_GTotal; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Lemma; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Eff; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(165,4-165,11); use=FStar.Stubs.Reflection.V2.Data.fsti(165,4-165,11)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.C_Total_ret (FStar.Stubs.Reflection.V2.Data.C_Total @x0))
@x0)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.C_Total @x0))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.C_Total_ret))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.C_Total_ret))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.comp_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Total; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_GTotal; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Lemma; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Eff; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(167,4-167,11); use=FStar.Stubs.Reflection.V2.Data.fsti(167,4-167,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.C_Lemma__2 (FStar.Stubs.Reflection.V2.Data.C_Lemma @x0
@x1
@x2))
@x2)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.C_Lemma @x0
@x1
@x2))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.C_Lemma__2))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.C_Lemma__2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.comp_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Total; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_GTotal; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Lemma; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Eff; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(167,4-167,11); use=FStar.Stubs.Reflection.V2.Data.fsti(167,4-167,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.C_Lemma__1 (FStar.Stubs.Reflection.V2.Data.C_Lemma @x0
@x1
@x2))
@x1)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.C_Lemma @x0
@x1
@x2))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.C_Lemma__1))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.C_Lemma__1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.comp_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Total; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_GTotal; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Lemma; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Eff; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(167,4-167,11); use=FStar.Stubs.Reflection.V2.Data.fsti(167,4-167,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.C_Lemma__0 (FStar.Stubs.Reflection.V2.Data.C_Lemma @x0
@x1
@x2))
@x0)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.C_Lemma @x0
@x1
@x2))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.C_Lemma__0))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.C_Lemma__0))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.comp_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Total; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_GTotal; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Lemma; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Eff; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(166,4-166,12); use=FStar.Stubs.Reflection.V2.Data.fsti(166,4-166,12)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.C_GTotal_ret (FStar.Stubs.Reflection.V2.Data.C_GTotal @x0))
@x0)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.C_GTotal @x0))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.C_GTotal_ret))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.C_GTotal_ret))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.comp_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Total; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_GTotal; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Lemma; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Eff; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(168,4-168,9); use=FStar.Stubs.Reflection.V2.Data.fsti(168,4-168,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.C_Eff_us (FStar.Stubs.Reflection.V2.Data.C_Eff @x0
@x1
@x2
@x3
@x4))
@x0)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.C_Eff @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.C_Eff_us))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.C_Eff_us))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.comp_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Total; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_GTotal; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Lemma; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Eff; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(168,4-168,9); use=FStar.Stubs.Reflection.V2.Data.fsti(168,4-168,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.C_Eff_result (FStar.Stubs.Reflection.V2.Data.C_Eff @x0
@x1
@x2
@x3
@x4))
@x2)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.C_Eff @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.C_Eff_result))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.C_Eff_result))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.comp_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Total; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_GTotal; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Lemma; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Eff; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(168,4-168,9); use=FStar.Stubs.Reflection.V2.Data.fsti(168,4-168,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.C_Eff_eff_name (FStar.Stubs.Reflection.V2.Data.C_Eff @x0
@x1
@x2
@x3
@x4))
@x1)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.C_Eff @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.C_Eff_eff_name))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.C_Eff_eff_name))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.comp_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Total; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_GTotal; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Lemma; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Eff; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(168,4-168,9); use=FStar.Stubs.Reflection.V2.Data.fsti(168,4-168,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.C_Eff_eff_args (FStar.Stubs.Reflection.V2.Data.C_Eff @x0
@x1
@x2
@x3
@x4))
@x3)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.C_Eff @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.C_Eff_eff_args))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.C_Eff_eff_args))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.comp_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Total; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_GTotal; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Lemma; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Eff; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(168,4-168,9); use=FStar.Stubs.Reflection.V2.Data.fsti(168,4-168,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.C_Eff_decrs (FStar.Stubs.Reflection.V2.Data.C_Eff @x0
@x1
@x2
@x3
@x4))
@x4)
 

:pattern ((FStar.Stubs.Reflection.V2.Data.C_Eff @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_FStar.Stubs.Reflection.V2.Data.C_Eff_decrs))

:named projection_inverse_FStar.Stubs.Reflection.V2.Data.C_Eff_decrs))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Mkbinder__item__qual; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(40,2-40,6); use=FStar.Tactics.NamedView.fsti(40,2-40,6)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.__proj__Mkbinder__item__qual @x0)
(FStar.Tactics.NamedView.Mkbinder_qual @x0))
 

:pattern ((FStar.Tactics.NamedView.__proj__Mkbinder__item__qual @x0))
:qid proj_equation_FStar.Tactics.NamedView.Mkbinder_qual))

:named proj_equation_FStar.Tactics.NamedView.Mkbinder_qual))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Mkbinder__item__attrs; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(41,2-41,7); use=FStar.Tactics.NamedView.fsti(41,2-41,7)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.__proj__Mkbinder__item__attrs @x0)
(FStar.Tactics.NamedView.Mkbinder_attrs @x0))
 

:pattern ((FStar.Tactics.NamedView.__proj__Mkbinder__item__attrs @x0))
:qid proj_equation_FStar.Tactics.NamedView.Mkbinder_attrs))

:named proj_equation_FStar.Tactics.NamedView.Mkbinder_attrs))
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.named_term_view
Tm_type)
:named kinding_FStar.Tactics.NamedView.named_term_view@tok))
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload
Tm_type)
:named kinding_FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload@tok))
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload
Tm_type)
:named kinding_FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload@tok))
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload
Tm_type)
:named kinding_FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload@tok))
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.named_sigelt_view
Tm_type)
:named kinding_FStar.Tactics.NamedView.named_sigelt_view@tok))
;;; Fact-ids: Name FStar.Tactics.NamedView.letbinding; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkletbinding; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.letbinding
Tm_type)
:named kinding_FStar.Tactics.NamedView.letbinding@tok))
;;; Fact-ids: Name FStar.Tactics.NamedView.binder; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkbinder; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.binder
Tm_type)
:named kinding_FStar.Tactics.NamedView.binder@tok))
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.comp_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Total; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_GTotal; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Lemma; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Eff; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType FStar.Stubs.Reflection.V2.Data.comp_view
Tm_type)
:named kinding_FStar.Stubs.Reflection.V2.Data.comp_view@tok))
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.bv_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Mkbv_view; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType FStar.Stubs.Reflection.V2.Data.bv_view
Tm_type)
:named kinding_FStar.Stubs.Reflection.V2.Data.bv_view@tok))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f55a5511b0c7b341ac4e0a29f002e4aa
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__C_GTotal__item__ret; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (iff (Valid (Prims.hasEq Tm_refine_f55a5511b0c7b341ac4e0a29f002e4aa))
(Valid (Prims.hasEq FStar.Stubs.Reflection.V2.Data.comp_view)))
:named haseqTm_refine_f55a5511b0c7b341ac4e0a29f002e4aa))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f2276b7d8e23c26ee3ba9a535c3c060a
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_Arrow__item__b; Namespace FStar.Tactics.NamedView
(assert (! (iff (Valid (Prims.hasEq Tm_refine_f2276b7d8e23c26ee3ba9a535c3c060a))
(Valid (Prims.hasEq FStar.Tactics.NamedView.named_term_view)))
:named haseqTm_refine_f2276b7d8e23c26ee3ba9a535c3c060a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e43528237c88eee4c4a7209fbfece30a
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_Const__item___0; Namespace FStar.Tactics.NamedView
(assert (! (iff (Valid (Prims.hasEq Tm_refine_e43528237c88eee4c4a7209fbfece30a))
(Valid (Prims.hasEq FStar.Tactics.NamedView.named_term_view)))
:named haseqTm_refine_e43528237c88eee4c4a7209fbfece30a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_dd0fe4daa6c85dc6cf40f0518ba6e942
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__us; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (iff (Valid (Prims.hasEq Tm_refine_dd0fe4daa6c85dc6cf40f0518ba6e942))
(Valid (Prims.hasEq FStar.Stubs.Reflection.V2.Data.comp_view)))
:named haseqTm_refine_dd0fe4daa6c85dc6cf40f0518ba6e942))
;;;;;;;;;;;;;;;;haseq for Tm_refine_cffc8fe5fb5b8b45155c826839a0836a
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_App__item__hd; Namespace FStar.Tactics.NamedView
(assert (! (iff (Valid (Prims.hasEq Tm_refine_cffc8fe5fb5b8b45155c826839a0836a))
(Valid (Prims.hasEq FStar.Tactics.NamedView.named_term_view)))
:named haseqTm_refine_cffc8fe5fb5b8b45155c826839a0836a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_ca9b00c9dce34c559545c63ba449a355
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Sg_Val__item___0; Namespace FStar.Tactics.NamedView
(assert (! (iff (Valid (Prims.hasEq Tm_refine_ca9b00c9dce34c559545c63ba449a355))
(Valid (Prims.hasEq FStar.Tactics.NamedView.named_sigelt_view)))
:named haseqTm_refine_ca9b00c9dce34c559545c63ba449a355))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b305bae344c1a3fca91e8645cdcd9dd7
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_Type__item___0; Namespace FStar.Tactics.NamedView
(assert (! (iff (Valid (Prims.hasEq Tm_refine_b305bae344c1a3fca91e8645cdcd9dd7))
(Valid (Prims.hasEq FStar.Tactics.NamedView.named_term_view)))
:named haseqTm_refine_b305bae344c1a3fca91e8645cdcd9dd7))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b26ca2aff6a22929fb21b63f378a437f
;;; Fact-ids: Name FStar.Tactics.NamedView.simple_binder; Namespace FStar.Tactics.NamedView
(assert (! (iff (Valid (Prims.hasEq Tm_refine_b26ca2aff6a22929fb21b63f378a437f))
(Valid (Prims.hasEq FStar.Tactics.NamedView.binder)))
:named haseqTm_refine_b26ca2aff6a22929fb21b63f378a437f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_87a3dba5453ef74fda9f0336086dad8a
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_Var__item__v; Namespace FStar.Tactics.NamedView
(assert (! (iff (Valid (Prims.hasEq Tm_refine_87a3dba5453ef74fda9f0336086dad8a))
(Valid (Prims.hasEq FStar.Tactics.NamedView.named_term_view)))
:named haseqTm_refine_87a3dba5453ef74fda9f0336086dad8a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_7aae385a6086c7833dd8519240cd12b3
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_FVar__item__v; Namespace FStar.Tactics.NamedView
(assert (! (iff (Valid (Prims.hasEq Tm_refine_7aae385a6086c7833dd8519240cd12b3))
(Valid (Prims.hasEq FStar.Tactics.NamedView.named_term_view)))
:named haseqTm_refine_7aae385a6086c7833dd8519240cd12b3))
;;;;;;;;;;;;;;;;haseq for Tm_refine_74ef9f3102c78539bcc06df8913ee8b1
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__C_Total__item__ret; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (iff (Valid (Prims.hasEq Tm_refine_74ef9f3102c78539bcc06df8913ee8b1))
(Valid (Prims.hasEq FStar.Stubs.Reflection.V2.Data.comp_view)))
:named haseqTm_refine_74ef9f3102c78539bcc06df8913ee8b1))
;;;;;;;;;;;;;;;;haseq for Tm_refine_655439b8882f5161418b9e9a204ac9a0
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_UInst__item__v; Namespace FStar.Tactics.NamedView
(assert (! (iff (Valid (Prims.hasEq Tm_refine_655439b8882f5161418b9e9a204ac9a0))
(Valid (Prims.hasEq FStar.Tactics.NamedView.named_term_view)))
:named haseqTm_refine_655439b8882f5161418b9e9a204ac9a0))
;;;;;;;;;;;;;;;;haseq for Tm_refine_5d3cef9f2193748f571d405779044e57
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_Abs__item__b; Namespace FStar.Tactics.NamedView
(assert (! (iff (Valid (Prims.hasEq Tm_refine_5d3cef9f2193748f571d405779044e57))
(Valid (Prims.hasEq FStar.Tactics.NamedView.named_term_view)))
:named haseqTm_refine_5d3cef9f2193748f571d405779044e57))
;;;;;;;;;;;;;;;;haseq for Tm_refine_580a83cfd5a14ce77506ef9a20b92d03
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_Let__item__recf; Namespace FStar.Tactics.NamedView
(assert (! (iff (Valid (Prims.hasEq Tm_refine_580a83cfd5a14ce77506ef9a20b92d03))
(Valid (Prims.hasEq FStar.Tactics.NamedView.named_term_view)))
:named haseqTm_refine_580a83cfd5a14ce77506ef9a20b92d03))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4fe825d3c6fe2aa01d40d69b72618cd9
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__e; Namespace FStar.Tactics.NamedView
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4fe825d3c6fe2aa01d40d69b72618cd9))
(Valid (Prims.hasEq FStar.Tactics.NamedView.named_term_view)))
:named haseqTm_refine_4fe825d3c6fe2aa01d40d69b72618cd9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_452c9c8e2825a8035099cf4978a670c1
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Sg_Inductive__item___0; Namespace FStar.Tactics.NamedView
(assert (! (iff (Valid (Prims.hasEq Tm_refine_452c9c8e2825a8035099cf4978a670c1))
(Valid (Prims.hasEq FStar.Tactics.NamedView.named_sigelt_view)))
:named haseqTm_refine_452c9c8e2825a8035099cf4978a670c1))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2dfafc08974a66f04ebf362802f0a508
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_Uvar__item___0; Namespace FStar.Tactics.NamedView
(assert (! (iff (Valid (Prims.hasEq Tm_refine_2dfafc08974a66f04ebf362802f0a508))
(Valid (Prims.hasEq FStar.Tactics.NamedView.named_term_view)))
:named haseqTm_refine_2dfafc08974a66f04ebf362802f0a508))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2041770b714b0ea10869e92b575e16fd
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_BVar__item__v; Namespace FStar.Tactics.NamedView
(assert (! (iff (Valid (Prims.hasEq Tm_refine_2041770b714b0ea10869e92b575e16fd))
(Valid (Prims.hasEq FStar.Tactics.NamedView.named_term_view)))
:named haseqTm_refine_2041770b714b0ea10869e92b575e16fd))
;;;;;;;;;;;;;;;;haseq for Tm_refine_1c7ad8d12925c022661dbfe6bb0e51a3
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_Refine__item__b; Namespace FStar.Tactics.NamedView
(assert (! (iff (Valid (Prims.hasEq Tm_refine_1c7ad8d12925c022661dbfe6bb0e51a3))
(Valid (Prims.hasEq FStar.Tactics.NamedView.named_term_view)))
:named haseqTm_refine_1c7ad8d12925c022661dbfe6bb0e51a3))
;;;;;;;;;;;;;;;;haseq for Tm_refine_1bc38916a900e5bdd4fb925f184ebe66
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.__proj__C_Lemma__item___0; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (iff (Valid (Prims.hasEq Tm_refine_1bc38916a900e5bdd4fb925f184ebe66))
(Valid (Prims.hasEq FStar.Stubs.Reflection.V2.Data.comp_view)))
:named haseqTm_refine_1bc38916a900e5bdd4fb925f184ebe66))
;;;;;;;;;;;;;;;;haseq for Tm_refine_188807386559837eacdc72e583387de0
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__e; Namespace FStar.Tactics.NamedView
(assert (! (iff (Valid (Prims.hasEq Tm_refine_188807386559837eacdc72e583387de0))
(Valid (Prims.hasEq FStar.Tactics.NamedView.named_term_view)))
:named haseqTm_refine_188807386559837eacdc72e583387de0))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0c417824af864c5dfeb7045b84af008c
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Sg_Let__item___0; Namespace FStar.Tactics.NamedView
(assert (! (iff (Valid (Prims.hasEq Tm_refine_0c417824af864c5dfeb7045b84af008c))
(Valid (Prims.hasEq FStar.Tactics.NamedView.named_sigelt_view)))
:named haseqTm_refine_0c417824af864c5dfeb7045b84af008c))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0c31d3f32afa528dfef0b4e53409fe9f
;;; Fact-ids: Name FStar.Tactics.NamedView.__proj__Tv_Match__item__scrutinee; Namespace FStar.Tactics.NamedView
(assert (! (iff (Valid (Prims.hasEq Tm_refine_0c31d3f32afa528dfef0b4e53409fe9f))
(Valid (Prims.hasEq FStar.Tactics.NamedView.named_term_view)))
:named haseqTm_refine_0c31d3f32afa528dfef0b4e53409fe9f))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Tactics.NamedView.universe; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.universe
Tm_type)
:named function_token_typing_FStar.Tactics.NamedView.universe))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Tactics.NamedView.univ_name; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.univ_name
Tm_type)
:named function_token_typing_FStar.Tactics.NamedView.univ_name))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Tactics.NamedView.term_view; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.term_view
Tm_type)
:named function_token_typing_FStar.Tactics.NamedView.term_view))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Tactics.NamedView.simple_binder; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.simple_binder
Tm_type)
:named function_token_typing_FStar.Tactics.NamedView.simple_binder))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Tactics.NamedView.match_returns_ascription; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.match_returns_ascription
Tm_type)
:named function_token_typing_FStar.Tactics.NamedView.match_returns_ascription))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Tactics.NamedView.comp; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.comp
Tm_type)
:named function_token_typing_FStar.Tactics.NamedView.comp))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Tactics.NamedView.bv; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.bv
Tm_type)
:named function_token_typing_FStar.Tactics.NamedView.bv))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Tactics.NamedView.binders; Namespace FStar.Tactics.NamedView
(assert (! (HasType FStar.Tactics.NamedView.binders
Tm_type)
:named function_token_typing_FStar.Tactics.NamedView.binders))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.ctor; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (HasType FStar.Stubs.Reflection.V2.Data.ctor
Tm_type)
:named function_token_typing_FStar.Stubs.Reflection.V2.Data.ctor))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.sigelt; Namespace FStar.Stubs.Reflection.Types
(assert (! (HasType FStar.Stubs.Reflection.Types.sigelt
Tm_type)
:named function_token_typing_FStar.Stubs.Reflection.Types.sigelt))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(93,5-93,20); use=FStar.Tactics.NamedView.fsti(93,5-93,20)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
FStar.Tactics.NamedView.named_term_view)
(or (is-FStar.Tactics.NamedView.Tv_Var @x1)
(is-FStar.Tactics.NamedView.Tv_BVar @x1)
(is-FStar.Tactics.NamedView.Tv_FVar @x1)
(is-FStar.Tactics.NamedView.Tv_UInst @x1)
(is-FStar.Tactics.NamedView.Tv_App @x1)
(is-FStar.Tactics.NamedView.Tv_Abs @x1)
(is-FStar.Tactics.NamedView.Tv_Arrow @x1)
(is-FStar.Tactics.NamedView.Tv_Type @x1)
(is-FStar.Tactics.NamedView.Tv_Refine @x1)
(is-FStar.Tactics.NamedView.Tv_Const @x1)
(is-FStar.Tactics.NamedView.Tv_Uvar @x1)
(is-FStar.Tactics.NamedView.Tv_Let @x1)
(is-FStar.Tactics.NamedView.Tv_Match @x1)
(is-FStar.Tactics.NamedView.Tv_AscribedT @x1)
(is-FStar.Tactics.NamedView.Tv_AscribedC @x1)
(is-FStar.Tactics.NamedView.Tv_Unknown @x1)
(is-FStar.Tactics.NamedView.Tv_Unsupp @x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
FStar.Tactics.NamedView.named_term_view))
:qid fuel_guarded_inversion_FStar.Tactics.NamedView.named_term_view))

:named fuel_guarded_inversion_FStar.Tactics.NamedView.named_term_view))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(145,4-145,10); use=FStar.Tactics.NamedView.fsti(145,4-145,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload)
(is-FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload @x1))
 

:pattern ((HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload))
:qid fuel_guarded_inversion_FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload))

:named fuel_guarded_inversion_FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(128,4-128,10); use=FStar.Tactics.NamedView.fsti(128,4-128,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload)
(is-FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload @x1))
 

:pattern ((HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload))
:qid fuel_guarded_inversion_FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload))

:named fuel_guarded_inversion_FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(137,4-137,16); use=FStar.Tactics.NamedView.fsti(137,4-137,16)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload)
(is-FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload @x1))
 

:pattern ((HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload))
:qid fuel_guarded_inversion_FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload))

:named fuel_guarded_inversion_FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(127,5-127,22); use=FStar.Tactics.NamedView.fsti(127,5-127,22)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
FStar.Tactics.NamedView.named_sigelt_view)
(or (is-FStar.Tactics.NamedView.Sg_Let @x1)
(is-FStar.Tactics.NamedView.Sg_Inductive @x1)
(is-FStar.Tactics.NamedView.Sg_Val @x1)
(is-FStar.Tactics.NamedView.Unk @x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
FStar.Tactics.NamedView.named_sigelt_view))
:qid fuel_guarded_inversion_FStar.Tactics.NamedView.named_sigelt_view))

:named fuel_guarded_inversion_FStar.Tactics.NamedView.named_sigelt_view))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Tactics.NamedView.letbinding; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkletbinding; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(118,5-118,15); use=FStar.Tactics.NamedView.fsti(118,5-118,15)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.letbinding)
(is-FStar.Tactics.NamedView.Mkletbinding @x1))
 

:pattern ((HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.letbinding))
:qid fuel_guarded_inversion_FStar.Tactics.NamedView.letbinding))

:named fuel_guarded_inversion_FStar.Tactics.NamedView.letbinding))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Tactics.NamedView.binder; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkbinder; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(35,5-35,11); use=FStar.Tactics.NamedView.fsti(35,5-35,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.binder)
(is-FStar.Tactics.NamedView.Mkbinder @x1))
 

:pattern ((HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.binder))
:qid fuel_guarded_inversion_FStar.Tactics.NamedView.binder))

:named fuel_guarded_inversion_FStar.Tactics.NamedView.binder))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.comp_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Total; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_GTotal; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Lemma; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Eff; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(164,5-164,14); use=FStar.Stubs.Reflection.V2.Data.fsti(164,5-164,14)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
FStar.Stubs.Reflection.V2.Data.comp_view)
(or (is-FStar.Stubs.Reflection.V2.Data.C_Total @x1)
(is-FStar.Stubs.Reflection.V2.Data.C_GTotal @x1)
(is-FStar.Stubs.Reflection.V2.Data.C_Lemma @x1)
(is-FStar.Stubs.Reflection.V2.Data.C_Eff @x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
FStar.Stubs.Reflection.V2.Data.comp_view))
:qid fuel_guarded_inversion_FStar.Stubs.Reflection.V2.Data.comp_view))

:named fuel_guarded_inversion_FStar.Stubs.Reflection.V2.Data.comp_view))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.bv_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Mkbv_view; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(94,5-94,12); use=FStar.Stubs.Reflection.V2.Data.fsti(94,5-94,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.bv_view)
(is-FStar.Stubs.Reflection.V2.Data.Mkbv_view @x1))
 

:pattern ((HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.bv_view))
:qid fuel_guarded_inversion_FStar.Stubs.Reflection.V2.Data.bv_view))

:named fuel_guarded_inversion_FStar.Stubs.Reflection.V2.Data.bv_view))
;;;;;;;;;;;;;;;;Equation for FStar.Tactics.NamedView.universe
;;; Fact-ids: Name FStar.Tactics.NamedView.universe; Namespace FStar.Tactics.NamedView
(assert (! (= FStar.Tactics.NamedView.universe
FStar.Stubs.Reflection.Types.universe)
:named equation_FStar.Tactics.NamedView.universe))
;;;;;;;;;;;;;;;;Equation for FStar.Tactics.NamedView.univ_name
;;; Fact-ids: Name FStar.Tactics.NamedView.univ_name; Namespace FStar.Tactics.NamedView
(assert (! (= FStar.Tactics.NamedView.univ_name
(FStar.Pervasives.Native.tuple2 Prims.string
FStar.Range.range))
:named equation_FStar.Tactics.NamedView.univ_name))
;;;;;;;;;;;;;;;;Equation for FStar.Tactics.NamedView.term_view
;;; Fact-ids: Name FStar.Tactics.NamedView.term_view; Namespace FStar.Tactics.NamedView
(assert (! (= FStar.Tactics.NamedView.term_view
FStar.Tactics.NamedView.named_term_view)
:named equation_FStar.Tactics.NamedView.term_view))
;;;;;;;;;;;;;;;;Equation for FStar.Tactics.NamedView.simple_binder
;;; Fact-ids: Name FStar.Tactics.NamedView.simple_binder; Namespace FStar.Tactics.NamedView
(assert (! (= FStar.Tactics.NamedView.simple_binder
Tm_refine_b26ca2aff6a22929fb21b63f378a437f)
:named equation_FStar.Tactics.NamedView.simple_binder))
;;;;;;;;;;;;;;;;Equation for FStar.Tactics.NamedView.match_returns_ascription
;;; Fact-ids: Name FStar.Tactics.NamedView.match_returns_ascription; Namespace FStar.Tactics.NamedView
(assert (! (= FStar.Tactics.NamedView.match_returns_ascription
(FStar.Pervasives.Native.tuple2 FStar.Tactics.NamedView.binder
(FStar.Pervasives.Native.tuple3 (FStar.Pervasives.either FStar.Tactics.NamedView.term
FStar.Tactics.NamedView.comp)
(FStar.Pervasives.Native.option FStar.Tactics.NamedView.term)
Prims.bool)))
:named equation_FStar.Tactics.NamedView.match_returns_ascription))
;;;;;;;;;;;;;;;;Equation for FStar.Tactics.NamedView.is_simple_binder
;;; Fact-ids: Name FStar.Tactics.NamedView.is_simple_binder; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(45,4-45,20); use=FStar.Tactics.NamedView.fsti(45,4-45,20)
(forall ((@x0 Term))
 (! (= (Valid (FStar.Tactics.NamedView.is_simple_binder @x0))

;; def=FStar.Tactics.NamedView.fsti(45,34-45,68); use=FStar.Tactics.NamedView.fsti(45,34-45,68)
(and 
;; def=FStar.Tactics.NamedView.fsti(45,34-45,52); use=FStar.Tactics.NamedView.fsti(45,34-45,52)
(BoxBool_proj_0 (FStar.Stubs.Reflection.V2.Data.uu___is_Q_Explicit (FStar.Tactics.NamedView.__proj__Mkbinder__item__qual @x0)))


;; def=FStar.Tactics.NamedView.fsti(45,56-45,68); use=FStar.Tactics.NamedView.fsti(45,56-45,68)
(BoxBool_proj_0 (Prims.uu___is_Nil FStar.Tactics.NamedView.term
(FStar.Tactics.NamedView.__proj__Mkbinder__item__attrs @x0)))
)
)
 

:pattern ((FStar.Tactics.NamedView.is_simple_binder @x0))
:qid equation_FStar.Tactics.NamedView.is_simple_binder))

:named equation_FStar.Tactics.NamedView.is_simple_binder))
;;;;;;;;;;;;;;;;Equation for FStar.Tactics.NamedView.comp
;;; Fact-ids: Name FStar.Tactics.NamedView.comp; Namespace FStar.Tactics.NamedView
(assert (! (= FStar.Tactics.NamedView.comp
FStar.Stubs.Reflection.V2.Data.comp_view)
:named equation_FStar.Tactics.NamedView.comp))
;;;;;;;;;;;;;;;;Equation for FStar.Tactics.NamedView.bv
;;; Fact-ids: Name FStar.Tactics.NamedView.bv; Namespace FStar.Tactics.NamedView
(assert (! (= FStar.Tactics.NamedView.bv
FStar.Stubs.Reflection.V2.Data.bv_view)
:named equation_FStar.Tactics.NamedView.bv))
;;;;;;;;;;;;;;;;Equation for FStar.Tactics.NamedView.binders
;;; Fact-ids: Name FStar.Tactics.NamedView.binders; Namespace FStar.Tactics.NamedView
(assert (! (= FStar.Tactics.NamedView.binders
(Prims.list FStar.Tactics.NamedView.binder))
:named equation_FStar.Tactics.NamedView.binders))
;;;;;;;;;;;;;;;;Equation for FStar.Stubs.Reflection.V2.Data.ctor
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.ctor; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (= FStar.Stubs.Reflection.V2.Data.ctor
(FStar.Pervasives.Native.tuple2 (FStar.Stubs.Reflection.Types.name Dummy_value)
FStar.Stubs.Reflection.Types.typ))
:named equation_FStar.Stubs.Reflection.V2.Data.ctor))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! (= FStar.Tactics.NamedView.Unk@tok
FStar.Tactics.NamedView.Unk)
:named equality_tok_FStar.Tactics.NamedView.Unk@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! (= FStar.Tactics.NamedView.Tv_Unsupp@tok
FStar.Tactics.NamedView.Tv_Unsupp)
:named equality_tok_FStar.Tactics.NamedView.Tv_Unsupp@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! (= FStar.Tactics.NamedView.Tv_Unknown@tok
FStar.Tactics.NamedView.Tv_Unknown)
:named equality_tok_FStar.Tactics.NamedView.Tv_Unknown@tok))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Tv_Var; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(94,4-94,10); use=FStar.Tactics.NamedView.fsti(94,4-94,10)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.uu___is_Tv_Var @x0)
(BoxBool (is-FStar.Tactics.NamedView.Tv_Var @x0)))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Tv_Var @x0))
:qid disc_equation_FStar.Tactics.NamedView.Tv_Var))

:named disc_equation_FStar.Tactics.NamedView.Tv_Var))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Tv_Uvar; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(104,4-104,11); use=FStar.Tactics.NamedView.fsti(104,4-104,11)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.uu___is_Tv_Uvar @x0)
(BoxBool (is-FStar.Tactics.NamedView.Tv_Uvar @x0)))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Tv_Uvar @x0))
:qid disc_equation_FStar.Tactics.NamedView.Tv_Uvar))

:named disc_equation_FStar.Tactics.NamedView.Tv_Uvar))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Tv_UInst; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(97,4-97,12); use=FStar.Tactics.NamedView.fsti(97,4-97,12)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.uu___is_Tv_UInst @x0)
(BoxBool (is-FStar.Tactics.NamedView.Tv_UInst @x0)))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Tv_UInst @x0))
:qid disc_equation_FStar.Tactics.NamedView.Tv_UInst))

:named disc_equation_FStar.Tactics.NamedView.Tv_UInst))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Tv_Type; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(101,4-101,11); use=FStar.Tactics.NamedView.fsti(101,4-101,11)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.uu___is_Tv_Type @x0)
(BoxBool (is-FStar.Tactics.NamedView.Tv_Type @x0)))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Tv_Type @x0))
:qid disc_equation_FStar.Tactics.NamedView.Tv_Type))

:named disc_equation_FStar.Tactics.NamedView.Tv_Type))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Tv_Refine; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(102,4-102,13); use=FStar.Tactics.NamedView.fsti(102,4-102,13)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.uu___is_Tv_Refine @x0)
(BoxBool (is-FStar.Tactics.NamedView.Tv_Refine @x0)))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Tv_Refine @x0))
:qid disc_equation_FStar.Tactics.NamedView.Tv_Refine))

:named disc_equation_FStar.Tactics.NamedView.Tv_Refine))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Tv_Match; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(106,4-106,12); use=FStar.Tactics.NamedView.fsti(106,4-106,12)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.uu___is_Tv_Match @x0)
(BoxBool (is-FStar.Tactics.NamedView.Tv_Match @x0)))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Tv_Match @x0))
:qid disc_equation_FStar.Tactics.NamedView.Tv_Match))

:named disc_equation_FStar.Tactics.NamedView.Tv_Match))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Tv_Let; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(105,4-105,10); use=FStar.Tactics.NamedView.fsti(105,4-105,10)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.uu___is_Tv_Let @x0)
(BoxBool (is-FStar.Tactics.NamedView.Tv_Let @x0)))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Tv_Let @x0))
:qid disc_equation_FStar.Tactics.NamedView.Tv_Let))

:named disc_equation_FStar.Tactics.NamedView.Tv_Let))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Tv_FVar; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(96,4-96,11); use=FStar.Tactics.NamedView.fsti(96,4-96,11)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.uu___is_Tv_FVar @x0)
(BoxBool (is-FStar.Tactics.NamedView.Tv_FVar @x0)))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Tv_FVar @x0))
:qid disc_equation_FStar.Tactics.NamedView.Tv_FVar))

:named disc_equation_FStar.Tactics.NamedView.Tv_FVar))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Tv_Const; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(103,4-103,12); use=FStar.Tactics.NamedView.fsti(103,4-103,12)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.uu___is_Tv_Const @x0)
(BoxBool (is-FStar.Tactics.NamedView.Tv_Const @x0)))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Tv_Const @x0))
:qid disc_equation_FStar.Tactics.NamedView.Tv_Const))

:named disc_equation_FStar.Tactics.NamedView.Tv_Const))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Tv_BVar; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(95,4-95,11); use=FStar.Tactics.NamedView.fsti(95,4-95,11)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.uu___is_Tv_BVar @x0)
(BoxBool (is-FStar.Tactics.NamedView.Tv_BVar @x0)))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Tv_BVar @x0))
:qid disc_equation_FStar.Tactics.NamedView.Tv_BVar))

:named disc_equation_FStar.Tactics.NamedView.Tv_BVar))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Tv_AscribedT; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(107,4-107,16); use=FStar.Tactics.NamedView.fsti(107,4-107,16)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.uu___is_Tv_AscribedT @x0)
(BoxBool (is-FStar.Tactics.NamedView.Tv_AscribedT @x0)))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Tv_AscribedT @x0))
:qid disc_equation_FStar.Tactics.NamedView.Tv_AscribedT))

:named disc_equation_FStar.Tactics.NamedView.Tv_AscribedT))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Tv_AscribedC; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(108,4-108,16); use=FStar.Tactics.NamedView.fsti(108,4-108,16)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.uu___is_Tv_AscribedC @x0)
(BoxBool (is-FStar.Tactics.NamedView.Tv_AscribedC @x0)))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Tv_AscribedC @x0))
:qid disc_equation_FStar.Tactics.NamedView.Tv_AscribedC))

:named disc_equation_FStar.Tactics.NamedView.Tv_AscribedC))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Tv_Arrow; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(100,4-100,12); use=FStar.Tactics.NamedView.fsti(100,4-100,12)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.uu___is_Tv_Arrow @x0)
(BoxBool (is-FStar.Tactics.NamedView.Tv_Arrow @x0)))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Tv_Arrow @x0))
:qid disc_equation_FStar.Tactics.NamedView.Tv_Arrow))

:named disc_equation_FStar.Tactics.NamedView.Tv_Arrow))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Tv_App; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(98,4-98,10); use=FStar.Tactics.NamedView.fsti(98,4-98,10)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.uu___is_Tv_App @x0)
(BoxBool (is-FStar.Tactics.NamedView.Tv_App @x0)))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Tv_App @x0))
:qid disc_equation_FStar.Tactics.NamedView.Tv_App))

:named disc_equation_FStar.Tactics.NamedView.Tv_App))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Tv_Abs; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(99,4-99,10); use=FStar.Tactics.NamedView.fsti(99,4-99,10)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.uu___is_Tv_Abs @x0)
(BoxBool (is-FStar.Tactics.NamedView.Tv_Abs @x0)))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Tv_Abs @x0))
:qid disc_equation_FStar.Tactics.NamedView.Tv_Abs))

:named disc_equation_FStar.Tactics.NamedView.Tv_Abs))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Sg_Val; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(145,4-145,10); use=FStar.Tactics.NamedView.fsti(145,4-145,10)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.uu___is_Sg_Val @x0)
(BoxBool (is-FStar.Tactics.NamedView.Sg_Val @x0)))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Sg_Val @x0))
:qid disc_equation_FStar.Tactics.NamedView.Sg_Val))

:named disc_equation_FStar.Tactics.NamedView.Sg_Val))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Sg_Let; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(128,4-128,10); use=FStar.Tactics.NamedView.fsti(128,4-128,10)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.uu___is_Sg_Let @x0)
(BoxBool (is-FStar.Tactics.NamedView.Sg_Let @x0)))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Sg_Let @x0))
:qid disc_equation_FStar.Tactics.NamedView.Sg_Let))

:named disc_equation_FStar.Tactics.NamedView.Sg_Let))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Tactics.NamedView.uu___is_Sg_Inductive; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(137,4-137,16); use=FStar.Tactics.NamedView.fsti(137,4-137,16)
(forall ((@x0 Term))
 (! (= (FStar.Tactics.NamedView.uu___is_Sg_Inductive @x0)
(BoxBool (is-FStar.Tactics.NamedView.Sg_Inductive @x0)))
 

:pattern ((FStar.Tactics.NamedView.uu___is_Sg_Inductive @x0))
:qid disc_equation_FStar.Tactics.NamedView.Sg_Inductive))

:named disc_equation_FStar.Tactics.NamedView.Sg_Inductive))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_C_Total; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(165,4-165,11); use=FStar.Stubs.Reflection.V2.Data.fsti(165,4-165,11)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.uu___is_C_Total @x0)
(BoxBool (is-FStar.Stubs.Reflection.V2.Data.C_Total @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_C_Total @x0))
:qid disc_equation_FStar.Stubs.Reflection.V2.Data.C_Total))

:named disc_equation_FStar.Stubs.Reflection.V2.Data.C_Total))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_C_Lemma; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(167,4-167,11); use=FStar.Stubs.Reflection.V2.Data.fsti(167,4-167,11)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.uu___is_C_Lemma @x0)
(BoxBool (is-FStar.Stubs.Reflection.V2.Data.C_Lemma @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_C_Lemma @x0))
:qid disc_equation_FStar.Stubs.Reflection.V2.Data.C_Lemma))

:named disc_equation_FStar.Stubs.Reflection.V2.Data.C_Lemma))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_C_GTotal; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(166,4-166,12); use=FStar.Stubs.Reflection.V2.Data.fsti(166,4-166,12)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.uu___is_C_GTotal @x0)
(BoxBool (is-FStar.Stubs.Reflection.V2.Data.C_GTotal @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_C_GTotal @x0))
:qid disc_equation_FStar.Stubs.Reflection.V2.Data.C_GTotal))

:named disc_equation_FStar.Stubs.Reflection.V2.Data.C_GTotal))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.uu___is_C_Eff; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(168,4-168,9); use=FStar.Stubs.Reflection.V2.Data.fsti(168,4-168,9)
(forall ((@x0 Term))
 (! (= (FStar.Stubs.Reflection.V2.Data.uu___is_C_Eff @x0)
(BoxBool (is-FStar.Stubs.Reflection.V2.Data.C_Eff @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.uu___is_C_Eff @x0))
:qid disc_equation_FStar.Stubs.Reflection.V2.Data.C_Eff))

:named disc_equation_FStar.Stubs.Reflection.V2.Data.C_Eff))
;;;;;;;;;;;;;;;;Prop-typing for FStar.Tactics.NamedView.is_simple_binder
;;; Fact-ids: Name FStar.Tactics.NamedView.is_simple_binder; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(45,4-45,20); use=FStar.Tactics.NamedView.fsti(45,4-45,20)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Tactics.NamedView.binder)
(Valid (Prims.subtype_of (FStar.Tactics.NamedView.is_simple_binder @x0)
Prims.unit)))
 

:pattern ((Prims.subtype_of (FStar.Tactics.NamedView.is_simple_binder @x0)
Prims.unit))
:qid defn_equation_FStar.Tactics.NamedView.is_simple_binder))

:named defn_equation_FStar.Tactics.NamedView.is_simple_binder))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(151,4-151,7); use=FStar.Tactics.NamedView.fsti(151,4-151,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
FStar.Tactics.NamedView.Unk
FStar.Tactics.NamedView.named_sigelt_view)
 

:pattern ((HasTypeFuel @u0
FStar.Tactics.NamedView.Unk
FStar.Tactics.NamedView.named_sigelt_view))
:qid data_typing_intro_FStar.Tactics.NamedView.Unk@tok))

:named data_typing_intro_FStar.Tactics.NamedView.Unk@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(94,4-94,10); use=FStar.Tactics.NamedView.fsti(94,4-94,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.namedv)
(HasTypeFuel @u0
(FStar.Tactics.NamedView.Tv_Var @x1)
FStar.Tactics.NamedView.named_term_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Tactics.NamedView.Tv_Var @x1)
FStar.Tactics.NamedView.named_term_view))
:qid data_typing_intro_FStar.Tactics.NamedView.Tv_Var@tok))

:named data_typing_intro_FStar.Tactics.NamedView.Tv_Var@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(104,4-104,11); use=FStar.Tactics.NamedView.fsti(104,4-104,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Prims.nat)
(HasTypeFuel @u0
@x2
FStar.Stubs.Reflection.Types.ctx_uvar_and_subst))
(HasTypeFuel @u0
(FStar.Tactics.NamedView.Tv_Uvar @x1
@x2)
FStar.Tactics.NamedView.named_term_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Tactics.NamedView.Tv_Uvar @x1
@x2)
FStar.Tactics.NamedView.named_term_view))
:qid data_typing_intro_FStar.Tactics.NamedView.Tv_Uvar@tok))

:named data_typing_intro_FStar.Tactics.NamedView.Tv_Uvar@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(110,4-110,13); use=FStar.Tactics.NamedView.fsti(110,4-110,13)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
FStar.Tactics.NamedView.Tv_Unsupp
FStar.Tactics.NamedView.named_term_view)
 

:pattern ((HasTypeFuel @u0
FStar.Tactics.NamedView.Tv_Unsupp
FStar.Tactics.NamedView.named_term_view))
:qid data_typing_intro_FStar.Tactics.NamedView.Tv_Unsupp@tok))

:named data_typing_intro_FStar.Tactics.NamedView.Tv_Unsupp@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(109,4-109,14); use=FStar.Tactics.NamedView.fsti(109,4-109,14)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
FStar.Tactics.NamedView.Tv_Unknown
FStar.Tactics.NamedView.named_term_view)
 

:pattern ((HasTypeFuel @u0
FStar.Tactics.NamedView.Tv_Unknown
FStar.Tactics.NamedView.named_term_view))
:qid data_typing_intro_FStar.Tactics.NamedView.Tv_Unknown@tok))

:named data_typing_intro_FStar.Tactics.NamedView.Tv_Unknown@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(97,4-97,12); use=FStar.Tactics.NamedView.fsti(97,4-97,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.fv)
(HasTypeFuel @u0
@x2
FStar.Stubs.Reflection.V2.Data.universes))
(HasTypeFuel @u0
(FStar.Tactics.NamedView.Tv_UInst @x1
@x2)
FStar.Tactics.NamedView.named_term_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Tactics.NamedView.Tv_UInst @x1
@x2)
FStar.Tactics.NamedView.named_term_view))
:qid data_typing_intro_FStar.Tactics.NamedView.Tv_UInst@tok))

:named data_typing_intro_FStar.Tactics.NamedView.Tv_UInst@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(101,4-101,11); use=FStar.Tactics.NamedView.fsti(101,4-101,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.universe)
(HasTypeFuel @u0
(FStar.Tactics.NamedView.Tv_Type @x1)
FStar.Tactics.NamedView.named_term_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Tactics.NamedView.Tv_Type @x1)
FStar.Tactics.NamedView.named_term_view))
:qid data_typing_intro_FStar.Tactics.NamedView.Tv_Type@tok))

:named data_typing_intro_FStar.Tactics.NamedView.Tv_Type@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(102,4-102,13); use=FStar.Tactics.NamedView.fsti(102,4-102,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.simple_binder)
(HasTypeFuel @u0
@x2
FStar.Tactics.NamedView.term))
(HasTypeFuel @u0
(FStar.Tactics.NamedView.Tv_Refine @x1
@x2)
FStar.Tactics.NamedView.named_term_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Tactics.NamedView.Tv_Refine @x1
@x2)
FStar.Tactics.NamedView.named_term_view))
:qid data_typing_intro_FStar.Tactics.NamedView.Tv_Refine@tok))

:named data_typing_intro_FStar.Tactics.NamedView.Tv_Refine@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(106,4-106,12); use=FStar.Tactics.NamedView.fsti(106,4-106,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.term)
(HasTypeFuel @u0
@x2
(FStar.Pervasives.Native.option FStar.Tactics.NamedView.match_returns_ascription))
(HasTypeFuel @u0
@x3
(Prims.list FStar.Tactics.NamedView.branch)))
(HasTypeFuel @u0
(FStar.Tactics.NamedView.Tv_Match @x1
@x2
@x3)
FStar.Tactics.NamedView.named_term_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Tactics.NamedView.Tv_Match @x1
@x2
@x3)
FStar.Tactics.NamedView.named_term_view))
:qid data_typing_intro_FStar.Tactics.NamedView.Tv_Match@tok))

:named data_typing_intro_FStar.Tactics.NamedView.Tv_Match@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(105,4-105,10); use=FStar.Tactics.NamedView.fsti(105,4-105,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Prims.bool)
(HasTypeFuel @u0
@x2
(Prims.list FStar.Tactics.NamedView.term))
(HasTypeFuel @u0
@x3
FStar.Tactics.NamedView.simple_binder)
(HasTypeFuel @u0
@x4
FStar.Tactics.NamedView.term)
(HasTypeFuel @u0
@x5
FStar.Tactics.NamedView.term))
(HasTypeFuel @u0
(FStar.Tactics.NamedView.Tv_Let @x1
@x2
@x3
@x4
@x5)
FStar.Tactics.NamedView.named_term_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Tactics.NamedView.Tv_Let @x1
@x2
@x3
@x4
@x5)
FStar.Tactics.NamedView.named_term_view))
:qid data_typing_intro_FStar.Tactics.NamedView.Tv_Let@tok))

:named data_typing_intro_FStar.Tactics.NamedView.Tv_Let@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(96,4-96,11); use=FStar.Tactics.NamedView.fsti(96,4-96,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.fv)
(HasTypeFuel @u0
(FStar.Tactics.NamedView.Tv_FVar @x1)
FStar.Tactics.NamedView.named_term_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Tactics.NamedView.Tv_FVar @x1)
FStar.Tactics.NamedView.named_term_view))
:qid data_typing_intro_FStar.Tactics.NamedView.Tv_FVar@tok))

:named data_typing_intro_FStar.Tactics.NamedView.Tv_FVar@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(103,4-103,12); use=FStar.Tactics.NamedView.fsti(103,4-103,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.vconst)
(HasTypeFuel @u0
(FStar.Tactics.NamedView.Tv_Const @x1)
FStar.Tactics.NamedView.named_term_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Tactics.NamedView.Tv_Const @x1)
FStar.Tactics.NamedView.named_term_view))
:qid data_typing_intro_FStar.Tactics.NamedView.Tv_Const@tok))

:named data_typing_intro_FStar.Tactics.NamedView.Tv_Const@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(95,4-95,11); use=FStar.Tactics.NamedView.fsti(95,4-95,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.bv)
(HasTypeFuel @u0
(FStar.Tactics.NamedView.Tv_BVar @x1)
FStar.Tactics.NamedView.named_term_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Tactics.NamedView.Tv_BVar @x1)
FStar.Tactics.NamedView.named_term_view))
:qid data_typing_intro_FStar.Tactics.NamedView.Tv_BVar@tok))

:named data_typing_intro_FStar.Tactics.NamedView.Tv_BVar@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(107,4-107,16); use=FStar.Tactics.NamedView.fsti(107,4-107,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.term)
(HasTypeFuel @u0
@x2
FStar.Tactics.NamedView.term)
(HasTypeFuel @u0
@x3
(FStar.Pervasives.Native.option FStar.Tactics.NamedView.term))
(HasTypeFuel @u0
@x4
Prims.bool))
(HasTypeFuel @u0
(FStar.Tactics.NamedView.Tv_AscribedT @x1
@x2
@x3
@x4)
FStar.Tactics.NamedView.named_term_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Tactics.NamedView.Tv_AscribedT @x1
@x2
@x3
@x4)
FStar.Tactics.NamedView.named_term_view))
:qid data_typing_intro_FStar.Tactics.NamedView.Tv_AscribedT@tok))

:named data_typing_intro_FStar.Tactics.NamedView.Tv_AscribedT@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(108,4-108,16); use=FStar.Tactics.NamedView.fsti(108,4-108,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.term)
(HasTypeFuel @u0
@x2
FStar.Tactics.NamedView.comp)
(HasTypeFuel @u0
@x3
(FStar.Pervasives.Native.option FStar.Tactics.NamedView.term))
(HasTypeFuel @u0
@x4
Prims.bool))
(HasTypeFuel @u0
(FStar.Tactics.NamedView.Tv_AscribedC @x1
@x2
@x3
@x4)
FStar.Tactics.NamedView.named_term_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Tactics.NamedView.Tv_AscribedC @x1
@x2
@x3
@x4)
FStar.Tactics.NamedView.named_term_view))
:qid data_typing_intro_FStar.Tactics.NamedView.Tv_AscribedC@tok))

:named data_typing_intro_FStar.Tactics.NamedView.Tv_AscribedC@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(100,4-100,12); use=FStar.Tactics.NamedView.fsti(100,4-100,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.binder)
(HasTypeFuel @u0
@x2
FStar.Tactics.NamedView.comp))
(HasTypeFuel @u0
(FStar.Tactics.NamedView.Tv_Arrow @x1
@x2)
FStar.Tactics.NamedView.named_term_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Tactics.NamedView.Tv_Arrow @x1
@x2)
FStar.Tactics.NamedView.named_term_view))
:qid data_typing_intro_FStar.Tactics.NamedView.Tv_Arrow@tok))

:named data_typing_intro_FStar.Tactics.NamedView.Tv_Arrow@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(98,4-98,10); use=FStar.Tactics.NamedView.fsti(98,4-98,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.term)
(HasTypeFuel @u0
@x2
FStar.Stubs.Reflection.V2.Data.argv))
(HasTypeFuel @u0
(FStar.Tactics.NamedView.Tv_App @x1
@x2)
FStar.Tactics.NamedView.named_term_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Tactics.NamedView.Tv_App @x1
@x2)
FStar.Tactics.NamedView.named_term_view))
:qid data_typing_intro_FStar.Tactics.NamedView.Tv_App@tok))

:named data_typing_intro_FStar.Tactics.NamedView.Tv_App@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(99,4-99,10); use=FStar.Tactics.NamedView.fsti(99,4-99,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.binder)
(HasTypeFuel @u0
@x2
FStar.Tactics.NamedView.term))
(HasTypeFuel @u0
(FStar.Tactics.NamedView.Tv_Abs @x1
@x2)
FStar.Tactics.NamedView.named_term_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Tactics.NamedView.Tv_Abs @x1
@x2)
FStar.Tactics.NamedView.named_term_view))
:qid data_typing_intro_FStar.Tactics.NamedView.Tv_Abs@tok))

:named data_typing_intro_FStar.Tactics.NamedView.Tv_Abs@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(145,4-145,10); use=FStar.Tactics.NamedView.fsti(145,4-145,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload)
(HasTypeFuel @u0
(FStar.Tactics.NamedView.Sg_Val @x1)
FStar.Tactics.NamedView.named_sigelt_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Tactics.NamedView.Sg_Val @x1)
FStar.Tactics.NamedView.named_sigelt_view))
:qid data_typing_intro_FStar.Tactics.NamedView.Sg_Val@tok))

:named data_typing_intro_FStar.Tactics.NamedView.Sg_Val@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(128,4-128,10); use=FStar.Tactics.NamedView.fsti(128,4-128,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload)
(HasTypeFuel @u0
(FStar.Tactics.NamedView.Sg_Let @x1)
FStar.Tactics.NamedView.named_sigelt_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Tactics.NamedView.Sg_Let @x1)
FStar.Tactics.NamedView.named_sigelt_view))
:qid data_typing_intro_FStar.Tactics.NamedView.Sg_Let@tok))

:named data_typing_intro_FStar.Tactics.NamedView.Sg_Let@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(137,4-137,16); use=FStar.Tactics.NamedView.fsti(137,4-137,16)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload)
(HasTypeFuel @u0
(FStar.Tactics.NamedView.Sg_Inductive @x1)
FStar.Tactics.NamedView.named_sigelt_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Tactics.NamedView.Sg_Inductive @x1)
FStar.Tactics.NamedView.named_sigelt_view))
:qid data_typing_intro_FStar.Tactics.NamedView.Sg_Inductive@tok))

:named data_typing_intro_FStar.Tactics.NamedView.Sg_Inductive@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(145,4-145,10); use=FStar.Tactics.NamedView.fsti(145,4-145,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
(FStar.Stubs.Reflection.Types.name Dummy_value))
(HasTypeFuel @u0
@x2
(Prims.list FStar.Tactics.NamedView.univ_name))
(HasTypeFuel @u0
@x3
FStar.Stubs.Reflection.Types.typ))
(HasTypeFuel @u0
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload @x1
@x2
@x3)
FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload))
 

:pattern ((HasTypeFuel @u0
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload @x1
@x2
@x3)
FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload))
:qid data_typing_intro_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload@tok))

:named data_typing_intro_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(128,4-128,10); use=FStar.Tactics.NamedView.fsti(128,4-128,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Prims.bool)
(HasTypeFuel @u0
@x2
(Prims.list FStar.Tactics.NamedView.letbinding)))
(HasTypeFuel @u0
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload @x1
@x2)
FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload))
 

:pattern ((HasTypeFuel @u0
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload @x1
@x2)
FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload))
:qid data_typing_intro_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload@tok))

:named data_typing_intro_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(137,4-137,16); use=FStar.Tactics.NamedView.fsti(137,4-137,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
(FStar.Stubs.Reflection.Types.name Dummy_value))
(HasTypeFuel @u0
@x2
(Prims.list FStar.Tactics.NamedView.univ_name))
(HasTypeFuel @u0
@x3
FStar.Tactics.NamedView.binders)
(HasTypeFuel @u0
@x4
FStar.Stubs.Reflection.Types.typ)
(HasTypeFuel @u0
@x5
(Prims.list FStar.Stubs.Reflection.V2.Data.ctor)))
(HasTypeFuel @u0
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload @x1
@x2
@x3
@x4
@x5)
FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload))
 

:pattern ((HasTypeFuel @u0
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload @x1
@x2
@x3
@x4
@x5)
FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload))
:qid data_typing_intro_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload@tok))

:named data_typing_intro_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Tactics.NamedView.letbinding; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkletbinding; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(118,5-118,15); use=FStar.Tactics.NamedView.fsti(118,5-118,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.fv)
(HasTypeFuel @u0
@x2
(Prims.list FStar.Tactics.NamedView.univ_name))
(HasTypeFuel @u0
@x3
FStar.Stubs.Reflection.Types.typ)
(HasTypeFuel @u0
@x4
FStar.Tactics.NamedView.term))
(HasTypeFuel @u0
(FStar.Tactics.NamedView.Mkletbinding @x1
@x2
@x3
@x4)
FStar.Tactics.NamedView.letbinding))
 

:pattern ((HasTypeFuel @u0
(FStar.Tactics.NamedView.Mkletbinding @x1
@x2
@x3
@x4)
FStar.Tactics.NamedView.letbinding))
:qid data_typing_intro_FStar.Tactics.NamedView.Mkletbinding@tok))

:named data_typing_intro_FStar.Tactics.NamedView.Mkletbinding@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Tactics.NamedView.binder; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkbinder; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(35,5-35,11); use=FStar.Tactics.NamedView.fsti(35,5-35,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Prims.nat)
(HasTypeFuel @u0
@x2
FStar.Stubs.Reflection.V2.Data.ppname_t)
(HasTypeFuel @u0
@x3
FStar.Stubs.Reflection.Types.typ)
(HasTypeFuel @u0
@x4
FStar.Stubs.Reflection.V2.Data.aqualv)
(HasTypeFuel @u0
@x5
(Prims.list FStar.Tactics.NamedView.term)))
(HasTypeFuel @u0
(FStar.Tactics.NamedView.Mkbinder @x1
@x2
@x3
@x4
@x5)
FStar.Tactics.NamedView.binder))
 

:pattern ((HasTypeFuel @u0
(FStar.Tactics.NamedView.Mkbinder @x1
@x2
@x3
@x4
@x5)
FStar.Tactics.NamedView.binder))
:qid data_typing_intro_FStar.Tactics.NamedView.Mkbinder@tok))

:named data_typing_intro_FStar.Tactics.NamedView.Mkbinder@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.bv_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Mkbv_view; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(94,5-94,12); use=FStar.Stubs.Reflection.V2.Data.fsti(94,5-94,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Prims.nat)
(HasTypeFuel @u0
@x2
(FStar.Sealed.sealed FStar.Stubs.Reflection.Types.typ))
(HasTypeFuel @u0
@x3
FStar.Stubs.Reflection.V2.Data.ppname_t))
(HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Mkbv_view @x1
@x2
@x3)
FStar.Stubs.Reflection.V2.Data.bv_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.Mkbv_view @x1
@x2
@x3)
FStar.Stubs.Reflection.V2.Data.bv_view))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.Mkbv_view@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.Mkbv_view@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.comp_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Total; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_GTotal; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Lemma; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Eff; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(165,4-165,11); use=FStar.Stubs.Reflection.V2.Data.fsti(165,4-165,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.typ)
(HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.C_Total @x1)
FStar.Stubs.Reflection.V2.Data.comp_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.C_Total @x1)
FStar.Stubs.Reflection.V2.Data.comp_view))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.C_Total@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.C_Total@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.comp_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Total; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_GTotal; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Lemma; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Eff; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(167,4-167,11); use=FStar.Stubs.Reflection.V2.Data.fsti(167,4-167,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.term)
(HasTypeFuel @u0
@x2
FStar.Stubs.Reflection.Types.term)
(HasTypeFuel @u0
@x3
FStar.Stubs.Reflection.Types.term))
(HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.C_Lemma @x1
@x2
@x3)
FStar.Stubs.Reflection.V2.Data.comp_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.C_Lemma @x1
@x2
@x3)
FStar.Stubs.Reflection.V2.Data.comp_view))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.C_Lemma@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.C_Lemma@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.comp_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Total; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_GTotal; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Lemma; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Eff; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(166,4-166,12); use=FStar.Stubs.Reflection.V2.Data.fsti(166,4-166,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.typ)
(HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.C_GTotal @x1)
FStar.Stubs.Reflection.V2.Data.comp_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.C_GTotal @x1)
FStar.Stubs.Reflection.V2.Data.comp_view))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.C_GTotal@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.C_GTotal@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.comp_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Total; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_GTotal; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Lemma; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Eff; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(168,4-168,9); use=FStar.Stubs.Reflection.V2.Data.fsti(168,4-168,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.universes)
(HasTypeFuel @u0
@x2
(FStar.Stubs.Reflection.Types.name Dummy_value))
(HasTypeFuel @u0
@x3
FStar.Stubs.Reflection.Types.term)
(HasTypeFuel @u0
@x4
(Prims.list FStar.Stubs.Reflection.V2.Data.argv))
(HasTypeFuel @u0
@x5
(Prims.list FStar.Stubs.Reflection.Types.term)))
(HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.C_Eff @x1
@x2
@x3
@x4
@x5)
FStar.Stubs.Reflection.V2.Data.comp_view))
 

:pattern ((HasTypeFuel @u0
(FStar.Stubs.Reflection.V2.Data.C_Eff @x1
@x2
@x3
@x4
@x5)
FStar.Stubs.Reflection.V2.Data.comp_view))
:qid data_typing_intro_FStar.Stubs.Reflection.V2.Data.C_Eff@tok))

:named data_typing_intro_FStar.Stubs.Reflection.V2.Data.C_Eff@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(94,4-94,10); use=FStar.Tactics.NamedView.fsti(94,4-94,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_Var @x1)
FStar.Tactics.NamedView.named_term_view)
(HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.namedv))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_Var @x1)
FStar.Tactics.NamedView.named_term_view))
:qid data_elim_FStar.Tactics.NamedView.Tv_Var))

:named data_elim_FStar.Tactics.NamedView.Tv_Var))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(104,4-104,11); use=FStar.Tactics.NamedView.fsti(104,4-104,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_Uvar @x1
@x2)
FStar.Tactics.NamedView.named_term_view)
(and (HasTypeFuel @u0
@x1
Prims.nat)
(HasTypeFuel @u0
@x2
FStar.Stubs.Reflection.Types.ctx_uvar_and_subst)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_Uvar @x1
@x2)
FStar.Tactics.NamedView.named_term_view))
:qid data_elim_FStar.Tactics.NamedView.Tv_Uvar))

:named data_elim_FStar.Tactics.NamedView.Tv_Uvar))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(97,4-97,12); use=FStar.Tactics.NamedView.fsti(97,4-97,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_UInst @x1
@x2)
FStar.Tactics.NamedView.named_term_view)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.fv)
(HasTypeFuel @u0
@x2
FStar.Stubs.Reflection.V2.Data.universes)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_UInst @x1
@x2)
FStar.Tactics.NamedView.named_term_view))
:qid data_elim_FStar.Tactics.NamedView.Tv_UInst))

:named data_elim_FStar.Tactics.NamedView.Tv_UInst))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(101,4-101,11); use=FStar.Tactics.NamedView.fsti(101,4-101,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_Type @x1)
FStar.Tactics.NamedView.named_term_view)
(HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.universe))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_Type @x1)
FStar.Tactics.NamedView.named_term_view))
:qid data_elim_FStar.Tactics.NamedView.Tv_Type))

:named data_elim_FStar.Tactics.NamedView.Tv_Type))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(102,4-102,13); use=FStar.Tactics.NamedView.fsti(102,4-102,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_Refine @x1
@x2)
FStar.Tactics.NamedView.named_term_view)
(and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.simple_binder)
(HasTypeFuel @u0
@x2
FStar.Tactics.NamedView.term)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_Refine @x1
@x2)
FStar.Tactics.NamedView.named_term_view))
:qid data_elim_FStar.Tactics.NamedView.Tv_Refine))

:named data_elim_FStar.Tactics.NamedView.Tv_Refine))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(106,4-106,12); use=FStar.Tactics.NamedView.fsti(106,4-106,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_Match @x1
@x2
@x3)
FStar.Tactics.NamedView.named_term_view)
(and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.term)
(HasTypeFuel @u0
@x2
(FStar.Pervasives.Native.option FStar.Tactics.NamedView.match_returns_ascription))
(HasTypeFuel @u0
@x3
(Prims.list FStar.Tactics.NamedView.branch))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_Match @x1
@x2
@x3)
FStar.Tactics.NamedView.named_term_view))
:qid data_elim_FStar.Tactics.NamedView.Tv_Match))

:named data_elim_FStar.Tactics.NamedView.Tv_Match))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(105,4-105,10); use=FStar.Tactics.NamedView.fsti(105,4-105,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_Let @x1
@x2
@x3
@x4
@x5)
FStar.Tactics.NamedView.named_term_view)
(and (HasTypeFuel @u0
@x1
Prims.bool)
(HasTypeFuel @u0
@x2
(Prims.list FStar.Tactics.NamedView.term))
(HasTypeFuel @u0
@x3
FStar.Tactics.NamedView.simple_binder)
(HasTypeFuel @u0
@x4
FStar.Tactics.NamedView.term)
(HasTypeFuel @u0
@x5
FStar.Tactics.NamedView.term)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_Let @x1
@x2
@x3
@x4
@x5)
FStar.Tactics.NamedView.named_term_view))
:qid data_elim_FStar.Tactics.NamedView.Tv_Let))

:named data_elim_FStar.Tactics.NamedView.Tv_Let))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(96,4-96,11); use=FStar.Tactics.NamedView.fsti(96,4-96,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_FVar @x1)
FStar.Tactics.NamedView.named_term_view)
(HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.fv))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_FVar @x1)
FStar.Tactics.NamedView.named_term_view))
:qid data_elim_FStar.Tactics.NamedView.Tv_FVar))

:named data_elim_FStar.Tactics.NamedView.Tv_FVar))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(103,4-103,12); use=FStar.Tactics.NamedView.fsti(103,4-103,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_Const @x1)
FStar.Tactics.NamedView.named_term_view)
(HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.vconst))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_Const @x1)
FStar.Tactics.NamedView.named_term_view))
:qid data_elim_FStar.Tactics.NamedView.Tv_Const))

:named data_elim_FStar.Tactics.NamedView.Tv_Const))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(95,4-95,11); use=FStar.Tactics.NamedView.fsti(95,4-95,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_BVar @x1)
FStar.Tactics.NamedView.named_term_view)
(HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.bv))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_BVar @x1)
FStar.Tactics.NamedView.named_term_view))
:qid data_elim_FStar.Tactics.NamedView.Tv_BVar))

:named data_elim_FStar.Tactics.NamedView.Tv_BVar))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(107,4-107,16); use=FStar.Tactics.NamedView.fsti(107,4-107,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_AscribedT @x1
@x2
@x3
@x4)
FStar.Tactics.NamedView.named_term_view)
(and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.term)
(HasTypeFuel @u0
@x2
FStar.Tactics.NamedView.term)
(HasTypeFuel @u0
@x3
(FStar.Pervasives.Native.option FStar.Tactics.NamedView.term))
(HasTypeFuel @u0
@x4
Prims.bool)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_AscribedT @x1
@x2
@x3
@x4)
FStar.Tactics.NamedView.named_term_view))
:qid data_elim_FStar.Tactics.NamedView.Tv_AscribedT))

:named data_elim_FStar.Tactics.NamedView.Tv_AscribedT))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(108,4-108,16); use=FStar.Tactics.NamedView.fsti(108,4-108,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_AscribedC @x1
@x2
@x3
@x4)
FStar.Tactics.NamedView.named_term_view)
(and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.term)
(HasTypeFuel @u0
@x2
FStar.Tactics.NamedView.comp)
(HasTypeFuel @u0
@x3
(FStar.Pervasives.Native.option FStar.Tactics.NamedView.term))
(HasTypeFuel @u0
@x4
Prims.bool)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_AscribedC @x1
@x2
@x3
@x4)
FStar.Tactics.NamedView.named_term_view))
:qid data_elim_FStar.Tactics.NamedView.Tv_AscribedC))

:named data_elim_FStar.Tactics.NamedView.Tv_AscribedC))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(100,4-100,12); use=FStar.Tactics.NamedView.fsti(100,4-100,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_Arrow @x1
@x2)
FStar.Tactics.NamedView.named_term_view)
(and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.binder)
(HasTypeFuel @u0
@x2
FStar.Tactics.NamedView.comp)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_Arrow @x1
@x2)
FStar.Tactics.NamedView.named_term_view))
:qid data_elim_FStar.Tactics.NamedView.Tv_Arrow))

:named data_elim_FStar.Tactics.NamedView.Tv_Arrow))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(98,4-98,10); use=FStar.Tactics.NamedView.fsti(98,4-98,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_App @x1
@x2)
FStar.Tactics.NamedView.named_term_view)
(and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.term)
(HasTypeFuel @u0
@x2
FStar.Stubs.Reflection.V2.Data.argv)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_App @x1
@x2)
FStar.Tactics.NamedView.named_term_view))
:qid data_elim_FStar.Tactics.NamedView.Tv_App))

:named data_elim_FStar.Tactics.NamedView.Tv_App))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(99,4-99,10); use=FStar.Tactics.NamedView.fsti(99,4-99,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_Abs @x1
@x2)
FStar.Tactics.NamedView.named_term_view)
(and (HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.binder)
(HasTypeFuel @u0
@x2
FStar.Tactics.NamedView.term)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Tv_Abs @x1
@x2)
FStar.Tactics.NamedView.named_term_view))
:qid data_elim_FStar.Tactics.NamedView.Tv_Abs))

:named data_elim_FStar.Tactics.NamedView.Tv_Abs))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(145,4-145,10); use=FStar.Tactics.NamedView.fsti(145,4-145,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Sg_Val @x1)
FStar.Tactics.NamedView.named_sigelt_view)
(HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Sg_Val @x1)
FStar.Tactics.NamedView.named_sigelt_view))
:qid data_elim_FStar.Tactics.NamedView.Sg_Val))

:named data_elim_FStar.Tactics.NamedView.Sg_Val))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(128,4-128,10); use=FStar.Tactics.NamedView.fsti(128,4-128,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Sg_Let @x1)
FStar.Tactics.NamedView.named_sigelt_view)
(HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Sg_Let @x1)
FStar.Tactics.NamedView.named_sigelt_view))
:qid data_elim_FStar.Tactics.NamedView.Sg_Let))

:named data_elim_FStar.Tactics.NamedView.Sg_Let))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(137,4-137,16); use=FStar.Tactics.NamedView.fsti(137,4-137,16)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Sg_Inductive @x1)
FStar.Tactics.NamedView.named_sigelt_view)
(HasTypeFuel @u0
@x1
FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Sg_Inductive @x1)
FStar.Tactics.NamedView.named_sigelt_view))
:qid data_elim_FStar.Tactics.NamedView.Sg_Inductive))

:named data_elim_FStar.Tactics.NamedView.Sg_Inductive))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(145,4-145,10); use=FStar.Tactics.NamedView.fsti(145,4-145,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload @x1
@x2
@x3)
FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload)
(and (HasTypeFuel @u0
@x1
(FStar.Stubs.Reflection.Types.name Dummy_value))
(HasTypeFuel @u0
@x2
(Prims.list FStar.Tactics.NamedView.univ_name))
(HasTypeFuel @u0
@x3
FStar.Stubs.Reflection.Types.typ)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload @x1
@x2
@x3)
FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload))
:qid data_elim_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload))

:named data_elim_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(128,4-128,10); use=FStar.Tactics.NamedView.fsti(128,4-128,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload @x1
@x2)
FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload)
(and (HasTypeFuel @u0
@x1
Prims.bool)
(HasTypeFuel @u0
@x2
(Prims.list FStar.Tactics.NamedView.letbinding))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload @x1
@x2)
FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload))
:qid data_elim_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload))

:named data_elim_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(137,4-137,16); use=FStar.Tactics.NamedView.fsti(137,4-137,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload @x1
@x2
@x3
@x4
@x5)
FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload)
(and (HasTypeFuel @u0
@x1
(FStar.Stubs.Reflection.Types.name Dummy_value))
(HasTypeFuel @u0
@x2
(Prims.list FStar.Tactics.NamedView.univ_name))
(HasTypeFuel @u0
@x3
FStar.Tactics.NamedView.binders)
(HasTypeFuel @u0
@x4
FStar.Stubs.Reflection.Types.typ)
(HasTypeFuel @u0
@x5
(Prims.list FStar.Stubs.Reflection.V2.Data.ctor))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload @x1
@x2
@x3
@x4
@x5)
FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload))
:qid data_elim_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload))

:named data_elim_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Tactics.NamedView.letbinding; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkletbinding; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(118,5-118,15); use=FStar.Tactics.NamedView.fsti(118,5-118,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Mkletbinding @x1
@x2
@x3
@x4)
FStar.Tactics.NamedView.letbinding)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.fv)
(HasTypeFuel @u0
@x2
(Prims.list FStar.Tactics.NamedView.univ_name))
(HasTypeFuel @u0
@x3
FStar.Stubs.Reflection.Types.typ)
(HasTypeFuel @u0
@x4
FStar.Tactics.NamedView.term)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Mkletbinding @x1
@x2
@x3
@x4)
FStar.Tactics.NamedView.letbinding))
:qid data_elim_FStar.Tactics.NamedView.Mkletbinding))

:named data_elim_FStar.Tactics.NamedView.Mkletbinding))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Tactics.NamedView.binder; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkbinder; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(35,5-35,11); use=FStar.Tactics.NamedView.fsti(35,5-35,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Mkbinder @x1
@x2
@x3
@x4
@x5)
FStar.Tactics.NamedView.binder)
(and (HasTypeFuel @u0
@x1
Prims.nat)
(HasTypeFuel @u0
@x2
FStar.Stubs.Reflection.V2.Data.ppname_t)
(HasTypeFuel @u0
@x3
FStar.Stubs.Reflection.Types.typ)
(HasTypeFuel @u0
@x4
FStar.Stubs.Reflection.V2.Data.aqualv)
(HasTypeFuel @u0
@x5
(Prims.list FStar.Tactics.NamedView.term))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Tactics.NamedView.Mkbinder @x1
@x2
@x3
@x4
@x5)
FStar.Tactics.NamedView.binder))
:qid data_elim_FStar.Tactics.NamedView.Mkbinder))

:named data_elim_FStar.Tactics.NamedView.Mkbinder))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.bv_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Mkbv_view; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(94,5-94,12); use=FStar.Stubs.Reflection.V2.Data.fsti(94,5-94,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Mkbv_view @x1
@x2
@x3)
FStar.Stubs.Reflection.V2.Data.bv_view)
(and (HasTypeFuel @u0
@x1
Prims.nat)
(HasTypeFuel @u0
@x2
(FStar.Sealed.sealed FStar.Stubs.Reflection.Types.typ))
(HasTypeFuel @u0
@x3
FStar.Stubs.Reflection.V2.Data.ppname_t)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.Mkbv_view @x1
@x2
@x3)
FStar.Stubs.Reflection.V2.Data.bv_view))
:qid data_elim_FStar.Stubs.Reflection.V2.Data.Mkbv_view))

:named data_elim_FStar.Stubs.Reflection.V2.Data.Mkbv_view))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.comp_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Total; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_GTotal; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Lemma; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Eff; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(165,4-165,11); use=FStar.Stubs.Reflection.V2.Data.fsti(165,4-165,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.C_Total @x1)
FStar.Stubs.Reflection.V2.Data.comp_view)
(HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.typ))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.C_Total @x1)
FStar.Stubs.Reflection.V2.Data.comp_view))
:qid data_elim_FStar.Stubs.Reflection.V2.Data.C_Total))

:named data_elim_FStar.Stubs.Reflection.V2.Data.C_Total))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.comp_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Total; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_GTotal; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Lemma; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Eff; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(167,4-167,11); use=FStar.Stubs.Reflection.V2.Data.fsti(167,4-167,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.C_Lemma @x1
@x2
@x3)
FStar.Stubs.Reflection.V2.Data.comp_view)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.term)
(HasTypeFuel @u0
@x2
FStar.Stubs.Reflection.Types.term)
(HasTypeFuel @u0
@x3
FStar.Stubs.Reflection.Types.term)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.C_Lemma @x1
@x2
@x3)
FStar.Stubs.Reflection.V2.Data.comp_view))
:qid data_elim_FStar.Stubs.Reflection.V2.Data.C_Lemma))

:named data_elim_FStar.Stubs.Reflection.V2.Data.C_Lemma))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.comp_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Total; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_GTotal; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Lemma; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Eff; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(166,4-166,12); use=FStar.Stubs.Reflection.V2.Data.fsti(166,4-166,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.C_GTotal @x1)
FStar.Stubs.Reflection.V2.Data.comp_view)
(HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.Types.typ))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.C_GTotal @x1)
FStar.Stubs.Reflection.V2.Data.comp_view))
:qid data_elim_FStar.Stubs.Reflection.V2.Data.C_GTotal))

:named data_elim_FStar.Stubs.Reflection.V2.Data.C_GTotal))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.comp_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Total; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_GTotal; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Lemma; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Eff; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(168,4-168,9); use=FStar.Stubs.Reflection.V2.Data.fsti(168,4-168,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.C_Eff @x1
@x2
@x3
@x4
@x5)
FStar.Stubs.Reflection.V2.Data.comp_view)
(and (HasTypeFuel @u0
@x1
FStar.Stubs.Reflection.V2.Data.universes)
(HasTypeFuel @u0
@x2
(FStar.Stubs.Reflection.Types.name Dummy_value))
(HasTypeFuel @u0
@x3
FStar.Stubs.Reflection.Types.term)
(HasTypeFuel @u0
@x4
(Prims.list FStar.Stubs.Reflection.V2.Data.argv))
(HasTypeFuel @u0
@x5
(Prims.list FStar.Stubs.Reflection.Types.term))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Stubs.Reflection.V2.Data.C_Eff @x1
@x2
@x3
@x4
@x5)
FStar.Stubs.Reflection.V2.Data.comp_view))
:qid data_elim_FStar.Stubs.Reflection.V2.Data.C_Eff))

:named data_elim_FStar.Stubs.Reflection.V2.Data.C_Eff))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! (= 295
(Term_constr_id FStar.Tactics.NamedView.named_term_view))
:named constructor_distinct_FStar.Tactics.NamedView.named_term_view))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! (= 575
(Term_constr_id FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload))
:named constructor_distinct_FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! (= 565
(Term_constr_id FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload))
:named constructor_distinct_FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! (= 570
(Term_constr_id FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload))
:named constructor_distinct_FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! (= 580
(Term_constr_id FStar.Tactics.NamedView.named_sigelt_view))
:named constructor_distinct_FStar.Tactics.NamedView.named_sigelt_view))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.letbinding; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkletbinding; Namespace FStar.Tactics.NamedView
(assert (! (= 547
(Term_constr_id FStar.Tactics.NamedView.letbinding))
:named constructor_distinct_FStar.Tactics.NamedView.letbinding))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.binder; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkbinder; Namespace FStar.Tactics.NamedView
(assert (! (= 101
(Term_constr_id FStar.Tactics.NamedView.binder))
:named constructor_distinct_FStar.Tactics.NamedView.binder))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! (= 616
(Term_constr_id FStar.Tactics.NamedView.Unk))
:named constructor_distinct_FStar.Tactics.NamedView.Unk))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(94,4-94,10); use=FStar.Tactics.NamedView.fsti(94,4-94,10)
(forall ((@x0 Term))
 (! (= 301
(Term_constr_id (FStar.Tactics.NamedView.Tv_Var @x0)))
 

:pattern ((FStar.Tactics.NamedView.Tv_Var @x0))
:qid constructor_distinct_FStar.Tactics.NamedView.Tv_Var))

:named constructor_distinct_FStar.Tactics.NamedView.Tv_Var))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(104,4-104,11); use=FStar.Tactics.NamedView.fsti(104,4-104,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= 351
(Term_constr_id (FStar.Tactics.NamedView.Tv_Uvar @x0
@x1)))
 

:pattern ((FStar.Tactics.NamedView.Tv_Uvar @x0
@x1))
:qid constructor_distinct_FStar.Tactics.NamedView.Tv_Uvar))

:named constructor_distinct_FStar.Tactics.NamedView.Tv_Uvar))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! (= 378
(Term_constr_id FStar.Tactics.NamedView.Tv_Unsupp))
:named constructor_distinct_FStar.Tactics.NamedView.Tv_Unsupp))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! (= 376
(Term_constr_id FStar.Tactics.NamedView.Tv_Unknown))
:named constructor_distinct_FStar.Tactics.NamedView.Tv_Unknown))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(97,4-97,12); use=FStar.Tactics.NamedView.fsti(97,4-97,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= 316
(Term_constr_id (FStar.Tactics.NamedView.Tv_UInst @x0
@x1)))
 

:pattern ((FStar.Tactics.NamedView.Tv_UInst @x0
@x1))
:qid constructor_distinct_FStar.Tactics.NamedView.Tv_UInst))

:named constructor_distinct_FStar.Tactics.NamedView.Tv_UInst))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(101,4-101,11); use=FStar.Tactics.NamedView.fsti(101,4-101,11)
(forall ((@x0 Term))
 (! (= 336
(Term_constr_id (FStar.Tactics.NamedView.Tv_Type @x0)))
 

:pattern ((FStar.Tactics.NamedView.Tv_Type @x0))
:qid constructor_distinct_FStar.Tactics.NamedView.Tv_Type))

:named constructor_distinct_FStar.Tactics.NamedView.Tv_Type))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(102,4-102,13); use=FStar.Tactics.NamedView.fsti(102,4-102,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= 341
(Term_constr_id (FStar.Tactics.NamedView.Tv_Refine @x0
@x1)))
 

:pattern ((FStar.Tactics.NamedView.Tv_Refine @x0
@x1))
:qid constructor_distinct_FStar.Tactics.NamedView.Tv_Refine))

:named constructor_distinct_FStar.Tactics.NamedView.Tv_Refine))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(106,4-106,12); use=FStar.Tactics.NamedView.fsti(106,4-106,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 361
(Term_constr_id (FStar.Tactics.NamedView.Tv_Match @x0
@x1
@x2)))
 

:pattern ((FStar.Tactics.NamedView.Tv_Match @x0
@x1
@x2))
:qid constructor_distinct_FStar.Tactics.NamedView.Tv_Match))

:named constructor_distinct_FStar.Tactics.NamedView.Tv_Match))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(105,4-105,10); use=FStar.Tactics.NamedView.fsti(105,4-105,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= 356
(Term_constr_id (FStar.Tactics.NamedView.Tv_Let @x0
@x1
@x2
@x3
@x4)))
 

:pattern ((FStar.Tactics.NamedView.Tv_Let @x0
@x1
@x2
@x3
@x4))
:qid constructor_distinct_FStar.Tactics.NamedView.Tv_Let))

:named constructor_distinct_FStar.Tactics.NamedView.Tv_Let))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(96,4-96,11); use=FStar.Tactics.NamedView.fsti(96,4-96,11)
(forall ((@x0 Term))
 (! (= 311
(Term_constr_id (FStar.Tactics.NamedView.Tv_FVar @x0)))
 

:pattern ((FStar.Tactics.NamedView.Tv_FVar @x0))
:qid constructor_distinct_FStar.Tactics.NamedView.Tv_FVar))

:named constructor_distinct_FStar.Tactics.NamedView.Tv_FVar))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(103,4-103,12); use=FStar.Tactics.NamedView.fsti(103,4-103,12)
(forall ((@x0 Term))
 (! (= 346
(Term_constr_id (FStar.Tactics.NamedView.Tv_Const @x0)))
 

:pattern ((FStar.Tactics.NamedView.Tv_Const @x0))
:qid constructor_distinct_FStar.Tactics.NamedView.Tv_Const))

:named constructor_distinct_FStar.Tactics.NamedView.Tv_Const))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(95,4-95,11); use=FStar.Tactics.NamedView.fsti(95,4-95,11)
(forall ((@x0 Term))
 (! (= 306
(Term_constr_id (FStar.Tactics.NamedView.Tv_BVar @x0)))
 

:pattern ((FStar.Tactics.NamedView.Tv_BVar @x0))
:qid constructor_distinct_FStar.Tactics.NamedView.Tv_BVar))

:named constructor_distinct_FStar.Tactics.NamedView.Tv_BVar))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(107,4-107,16); use=FStar.Tactics.NamedView.fsti(107,4-107,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 366
(Term_constr_id (FStar.Tactics.NamedView.Tv_AscribedT @x0
@x1
@x2
@x3)))
 

:pattern ((FStar.Tactics.NamedView.Tv_AscribedT @x0
@x1
@x2
@x3))
:qid constructor_distinct_FStar.Tactics.NamedView.Tv_AscribedT))

:named constructor_distinct_FStar.Tactics.NamedView.Tv_AscribedT))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(108,4-108,16); use=FStar.Tactics.NamedView.fsti(108,4-108,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 371
(Term_constr_id (FStar.Tactics.NamedView.Tv_AscribedC @x0
@x1
@x2
@x3)))
 

:pattern ((FStar.Tactics.NamedView.Tv_AscribedC @x0
@x1
@x2
@x3))
:qid constructor_distinct_FStar.Tactics.NamedView.Tv_AscribedC))

:named constructor_distinct_FStar.Tactics.NamedView.Tv_AscribedC))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(100,4-100,12); use=FStar.Tactics.NamedView.fsti(100,4-100,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= 331
(Term_constr_id (FStar.Tactics.NamedView.Tv_Arrow @x0
@x1)))
 

:pattern ((FStar.Tactics.NamedView.Tv_Arrow @x0
@x1))
:qid constructor_distinct_FStar.Tactics.NamedView.Tv_Arrow))

:named constructor_distinct_FStar.Tactics.NamedView.Tv_Arrow))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(98,4-98,10); use=FStar.Tactics.NamedView.fsti(98,4-98,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= 321
(Term_constr_id (FStar.Tactics.NamedView.Tv_App @x0
@x1)))
 

:pattern ((FStar.Tactics.NamedView.Tv_App @x0
@x1))
:qid constructor_distinct_FStar.Tactics.NamedView.Tv_App))

:named constructor_distinct_FStar.Tactics.NamedView.Tv_App))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(99,4-99,10); use=FStar.Tactics.NamedView.fsti(99,4-99,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= 326
(Term_constr_id (FStar.Tactics.NamedView.Tv_Abs @x0
@x1)))
 

:pattern ((FStar.Tactics.NamedView.Tv_Abs @x0
@x1))
:qid constructor_distinct_FStar.Tactics.NamedView.Tv_Abs))

:named constructor_distinct_FStar.Tactics.NamedView.Tv_Abs))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(145,4-145,10); use=FStar.Tactics.NamedView.fsti(145,4-145,10)
(forall ((@x0 Term))
 (! (= 611
(Term_constr_id (FStar.Tactics.NamedView.Sg_Val @x0)))
 

:pattern ((FStar.Tactics.NamedView.Sg_Val @x0))
:qid constructor_distinct_FStar.Tactics.NamedView.Sg_Val))

:named constructor_distinct_FStar.Tactics.NamedView.Sg_Val))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(128,4-128,10); use=FStar.Tactics.NamedView.fsti(128,4-128,10)
(forall ((@x0 Term))
 (! (= 601
(Term_constr_id (FStar.Tactics.NamedView.Sg_Let @x0)))
 

:pattern ((FStar.Tactics.NamedView.Sg_Let @x0))
:qid constructor_distinct_FStar.Tactics.NamedView.Sg_Let))

:named constructor_distinct_FStar.Tactics.NamedView.Sg_Let))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(137,4-137,16); use=FStar.Tactics.NamedView.fsti(137,4-137,16)
(forall ((@x0 Term))
 (! (= 606
(Term_constr_id (FStar.Tactics.NamedView.Sg_Inductive @x0)))
 

:pattern ((FStar.Tactics.NamedView.Sg_Inductive @x0))
:qid constructor_distinct_FStar.Tactics.NamedView.Sg_Inductive))

:named constructor_distinct_FStar.Tactics.NamedView.Sg_Inductive))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(145,4-145,10); use=FStar.Tactics.NamedView.fsti(145,4-145,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 596
(Term_constr_id (FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload @x0
@x1
@x2)))
 

:pattern ((FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload @x0
@x1
@x2))
:qid constructor_distinct_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload))

:named constructor_distinct_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(128,4-128,10); use=FStar.Tactics.NamedView.fsti(128,4-128,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= 586
(Term_constr_id (FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload @x0
@x1)))
 

:pattern ((FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload @x0
@x1))
:qid constructor_distinct_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload))

:named constructor_distinct_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(137,4-137,16); use=FStar.Tactics.NamedView.fsti(137,4-137,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= 591
(Term_constr_id (FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload @x0
@x1
@x2
@x3
@x4)))
 

:pattern ((FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload @x0
@x1
@x2
@x3
@x4))
:qid constructor_distinct_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload))

:named constructor_distinct_FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.letbinding; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkletbinding; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(118,5-118,15); use=FStar.Tactics.NamedView.fsti(118,5-118,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 553
(Term_constr_id (FStar.Tactics.NamedView.Mkletbinding @x0
@x1
@x2
@x3)))
 

:pattern ((FStar.Tactics.NamedView.Mkletbinding @x0
@x1
@x2
@x3))
:qid constructor_distinct_FStar.Tactics.NamedView.Mkletbinding))

:named constructor_distinct_FStar.Tactics.NamedView.Mkletbinding))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Tactics.NamedView.binder; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkbinder; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(35,5-35,11); use=FStar.Tactics.NamedView.fsti(35,5-35,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= 107
(Term_constr_id (FStar.Tactics.NamedView.Mkbinder @x0
@x1
@x2
@x3
@x4)))
 

:pattern ((FStar.Tactics.NamedView.Mkbinder @x0
@x1
@x2
@x3
@x4))
:qid constructor_distinct_FStar.Tactics.NamedView.Mkbinder))

:named constructor_distinct_FStar.Tactics.NamedView.Mkbinder))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.comp_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Total; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_GTotal; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Lemma; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Eff; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (= 657
(Term_constr_id FStar.Stubs.Reflection.V2.Data.comp_view))
:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.comp_view))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.bv_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Mkbv_view; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! (= 284
(Term_constr_id FStar.Stubs.Reflection.V2.Data.bv_view))
:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.bv_view))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.bv_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Mkbv_view; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(94,5-94,12); use=FStar.Stubs.Reflection.V2.Data.fsti(94,5-94,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 290
(Term_constr_id (FStar.Stubs.Reflection.V2.Data.Mkbv_view @x0
@x1
@x2)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.Mkbv_view @x0
@x1
@x2))
:qid constructor_distinct_FStar.Stubs.Reflection.V2.Data.Mkbv_view))

:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.Mkbv_view))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.comp_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Total; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_GTotal; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Lemma; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Eff; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(165,4-165,11); use=FStar.Stubs.Reflection.V2.Data.fsti(165,4-165,11)
(forall ((@x0 Term))
 (! (= 663
(Term_constr_id (FStar.Stubs.Reflection.V2.Data.C_Total @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.C_Total @x0))
:qid constructor_distinct_FStar.Stubs.Reflection.V2.Data.C_Total))

:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.C_Total))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.comp_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Total; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_GTotal; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Lemma; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Eff; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(167,4-167,11); use=FStar.Stubs.Reflection.V2.Data.fsti(167,4-167,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 673
(Term_constr_id (FStar.Stubs.Reflection.V2.Data.C_Lemma @x0
@x1
@x2)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.C_Lemma @x0
@x1
@x2))
:qid constructor_distinct_FStar.Stubs.Reflection.V2.Data.C_Lemma))

:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.C_Lemma))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.comp_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Total; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_GTotal; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Lemma; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Eff; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(166,4-166,12); use=FStar.Stubs.Reflection.V2.Data.fsti(166,4-166,12)
(forall ((@x0 Term))
 (! (= 668
(Term_constr_id (FStar.Stubs.Reflection.V2.Data.C_GTotal @x0)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.C_GTotal @x0))
:qid constructor_distinct_FStar.Stubs.Reflection.V2.Data.C_GTotal))

:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.C_GTotal))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.comp_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Total; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_GTotal; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Lemma; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Eff; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(168,4-168,9); use=FStar.Stubs.Reflection.V2.Data.fsti(168,4-168,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= 678
(Term_constr_id (FStar.Stubs.Reflection.V2.Data.C_Eff @x0
@x1
@x2
@x3
@x4)))
 

:pattern ((FStar.Stubs.Reflection.V2.Data.C_Eff @x0
@x1
@x2
@x3
@x4))
:qid constructor_distinct_FStar.Stubs.Reflection.V2.Data.C_Eff))

:named constructor_distinct_FStar.Stubs.Reflection.V2.Data.C_Eff))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.sigelt; Namespace FStar.Stubs.Reflection.Types
(assert (! (= 122
(Term_constr_id FStar.Stubs.Reflection.Types.sigelt))
:named constructor_distinct_FStar.Stubs.Reflection.Types.sigelt))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(145,4-145,10); use=FStar.Tactics.NamedView.fsti(145,4-145,10)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload)
(= FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload))
:qid FStar.Tactics.NamedView_pretyping_e3494a79686f799daf781bcc06eaaefc))

:named FStar.Tactics.NamedView_pretyping_e3494a79686f799daf781bcc06eaaefc))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Tactics.NamedView.named_term_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Var; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_BVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_FVar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_UInst; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_App; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Abs; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Arrow; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Type; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Refine; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Const; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Uvar; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Match; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedT; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_AscribedC; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unknown; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Tv_Unsupp; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(93,5-93,20); use=FStar.Tactics.NamedView.fsti(93,5-93,20)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
FStar.Tactics.NamedView.named_term_view)
(= FStar.Tactics.NamedView.named_term_view
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
FStar.Tactics.NamedView.named_term_view))
:qid FStar.Tactics.NamedView_pretyping_b9909aecbb024f77e489710ef0c3a302))

:named FStar.Tactics.NamedView_pretyping_b9909aecbb024f77e489710ef0c3a302))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Tactics.NamedView.binder; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkbinder; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(35,5-35,11); use=FStar.Tactics.NamedView.fsti(35,5-35,11)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
FStar.Tactics.NamedView.binder)
(= FStar.Tactics.NamedView.binder
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
FStar.Tactics.NamedView.binder))
:qid FStar.Tactics.NamedView_pretyping_aa11da717b0f96191732249a5f8a1b65))

:named FStar.Tactics.NamedView_pretyping_aa11da717b0f96191732249a5f8a1b65))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(128,4-128,10); use=FStar.Tactics.NamedView.fsti(128,4-128,10)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload)
(= FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload))
:qid FStar.Tactics.NamedView_pretyping_6431c17bd4ef31ed4e5c8a8ef7dd87dc))

:named FStar.Tactics.NamedView_pretyping_6431c17bd4ef31ed4e5c8a8ef7dd87dc))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(137,4-137,16); use=FStar.Tactics.NamedView.fsti(137,4-137,16)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload)
(= FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload))
:qid FStar.Tactics.NamedView_pretyping_450f89be37499b016782f78b22298c79))

:named FStar.Tactics.NamedView_pretyping_450f89be37499b016782f78b22298c79))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Tactics.NamedView.letbinding; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mkletbinding; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(118,5-118,15); use=FStar.Tactics.NamedView.fsti(118,5-118,15)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
FStar.Tactics.NamedView.letbinding)
(= FStar.Tactics.NamedView.letbinding
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
FStar.Tactics.NamedView.letbinding))
:qid FStar.Tactics.NamedView_pretyping_33c669f7fc4082ed20aa557734fdc133))

:named FStar.Tactics.NamedView_pretyping_33c669f7fc4082ed20aa557734fdc133))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.named_sigelt_view; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Let; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Inductive; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Sg_Val; Namespace FStar.Tactics.NamedView; Name FStar.Tactics.NamedView.Unk; Namespace FStar.Tactics.NamedView
(assert (! 
;; def=FStar.Tactics.NamedView.fsti(127,5-127,22); use=FStar.Tactics.NamedView.fsti(127,5-127,22)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
FStar.Tactics.NamedView.named_sigelt_view)
(= FStar.Tactics.NamedView.named_sigelt_view
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
FStar.Tactics.NamedView.named_sigelt_view))
:qid FStar.Tactics.NamedView_pretyping_2c3785eaaa5c523428a493e66bedbc78))

:named FStar.Tactics.NamedView_pretyping_2c3785eaaa5c523428a493e66bedbc78))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.bv_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.Mkbv_view; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(94,5-94,12); use=FStar.Stubs.Reflection.V2.Data.fsti(94,5-94,12)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
FStar.Stubs.Reflection.V2.Data.bv_view)
(= FStar.Stubs.Reflection.V2.Data.bv_view
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
FStar.Stubs.Reflection.V2.Data.bv_view))
:qid FStar.Stubs.Reflection.V2.Data_pretyping_7ea2d7ca472dd33d8ecb8013e7ee7fc0))

:named FStar.Stubs.Reflection.V2.Data_pretyping_7ea2d7ca472dd33d8ecb8013e7ee7fc0))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Stubs.Reflection.V2.Data.comp_view; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Total; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_GTotal; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Lemma; Namespace FStar.Stubs.Reflection.V2.Data; Name FStar.Stubs.Reflection.V2.Data.C_Eff; Namespace FStar.Stubs.Reflection.V2.Data
(assert (! 
;; def=FStar.Stubs.Reflection.V2.Data.fsti(164,5-164,14); use=FStar.Stubs.Reflection.V2.Data.fsti(164,5-164,14)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
FStar.Stubs.Reflection.V2.Data.comp_view)
(= FStar.Stubs.Reflection.V2.Data.comp_view
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
FStar.Stubs.Reflection.V2.Data.comp_view))
:qid FStar.Stubs.Reflection.V2.Data_pretyping_56295bb78e8bec278ade72bb76fc2ada))

:named FStar.Stubs.Reflection.V2.Data_pretyping_56295bb78e8bec278ade72bb76fc2ada))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Stubs.Reflection.Types.sigelt; Namespace FStar.Stubs.Reflection.Types
(assert (! 
;; def=FStar.Stubs.Reflection.Types.fsti(29,16-29,22); use=FStar.Stubs.Reflection.Types.fsti(29,16-29,22)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
FStar.Stubs.Reflection.Types.sigelt)
(= FStar.Stubs.Reflection.Types.sigelt
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
FStar.Stubs.Reflection.Types.sigelt))
:qid FStar.Stubs.Reflection.Types_pretyping_aeec38d96618fe613d59310926b75342))

:named FStar.Stubs.Reflection.Types_pretyping_aeec38d96618fe613d59310926b75342))
(push) ;; push{2

; Starting query at MiniParse.Spec.TEnum.fst(51,66-66,37)

(declare-fun label_1 () Bool)
;;;;;;;;;;;;;;;;_: FStar.Stubs.Tactics.Result.__result (Prims.list FStar.Stubs.Reflection.Types.name) -> Type
(declare-fun Tm_arrow_d4d543e7e95869f166896805e21068c6 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_d4d543e7e95869f166896805e21068c6
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_d4d543e7e95869f166896805e21068c6
Tm_type)
:named kinding_Tm_arrow_d4d543e7e95869f166896805e21068c6))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.Tactics.Effect.fsti(28,17-28,36); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_d4d543e7e95869f166896805e21068c6)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_d4d543e7e95869f166896805e21068c6))
:qid MiniParse.Spec.TEnum_pre_typing_Tm_arrow_d4d543e7e95869f166896805e21068c6))

:named MiniParse.Spec.TEnum_pre_typing_Tm_arrow_d4d543e7e95869f166896805e21068c6))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_d4d543e7e95869f166896805e21068c6
;;; Fact-ids: 
(assert (! 
;; def=FStar.Tactics.Effect.fsti(28,17-28,36); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_d4d543e7e95869f166896805e21068c6)
(and 
;; def=FStar.Tactics.Effect.fsti(28,17-28,36); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.Stubs.Tactics.Result.__result (Prims.list (FStar.Stubs.Reflection.Types.name Dummy_value))))
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid MiniParse.Spec.TEnum_interpretation_Tm_arrow_d4d543e7e95869f166896805e21068c6.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_d4d543e7e95869f166896805e21068c6))
:qid MiniParse.Spec.TEnum_interpretation_Tm_arrow_d4d543e7e95869f166896805e21068c6))

:named MiniParse.Spec.TEnum_interpretation_Tm_arrow_d4d543e7e95869f166896805e21068c6))









;;;;;;;;;;;;;;;;_: FStar.Stubs.Tactics.Result.__result FStar.Tactics.NamedView.named_sigelt_view -> Type
(declare-fun Tm_arrow_8b186eb557cd4f7b2cb6b6818606c495 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_8b186eb557cd4f7b2cb6b6818606c495
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_8b186eb557cd4f7b2cb6b6818606c495
Tm_type)
:named kinding_Tm_arrow_8b186eb557cd4f7b2cb6b6818606c495))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.Tactics.Effect.fsti(61,12-61,31); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_8b186eb557cd4f7b2cb6b6818606c495)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_8b186eb557cd4f7b2cb6b6818606c495))
:qid MiniParse.Spec.TEnum_pre_typing_Tm_arrow_8b186eb557cd4f7b2cb6b6818606c495))

:named MiniParse.Spec.TEnum_pre_typing_Tm_arrow_8b186eb557cd4f7b2cb6b6818606c495))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_8b186eb557cd4f7b2cb6b6818606c495
;;; Fact-ids: 
(assert (! 
;; def=FStar.Tactics.Effect.fsti(61,12-61,31); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_8b186eb557cd4f7b2cb6b6818606c495)
(and 
;; def=FStar.Tactics.Effect.fsti(61,12-61,31); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.Stubs.Tactics.Result.__result FStar.Tactics.NamedView.named_sigelt_view))
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid MiniParse.Spec.TEnum_interpretation_Tm_arrow_8b186eb557cd4f7b2cb6b6818606c495.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_8b186eb557cd4f7b2cb6b6818606c495))
:qid MiniParse.Spec.TEnum_interpretation_Tm_arrow_8b186eb557cd4f7b2cb6b6818606c495))

:named MiniParse.Spec.TEnum_interpretation_Tm_arrow_8b186eb557cd4f7b2cb6b6818606c495))

; Encoding query formula : forall (t: FStar.Tactics.NamedView.term).
;   (*  - Could not prove post-condition
; *)
;   forall (ps: FStar.Stubs.Tactics.Types.proofstate)
;     (p:
;     (_: FStar.Stubs.Tactics.Result.__result (Prims.list FStar.Stubs.Reflection.Types.name) -> Type0))
;   .
;     (forall (r: FStar.Stubs.Tactics.Result.__result (Prims.list FStar.Stubs.Reflection.Types.name)).
;         Prims.auto_squash (p r)) ==>
;     (forall (k:
;         (_: FStar.Stubs.Tactics.Result.__result (Prims.list FStar.Stubs.Reflection.Types.name)
;             -> Type0)).
;         (forall (r:
;             FStar.Stubs.Tactics.Result.__result (Prims.list FStar.Stubs.Reflection.Types.name)).
;             {:pattern Prims.guard_free (k r)}
;             Prims.auto_squash (k r)) ==>
;         (forall (r: FStar.Stubs.Tactics.Result.__result FStar.Tactics.NamedView.term_view).
;             Prims.auto_squash (match r with
;                 | FStar.Stubs.Tactics.Result.Success x _ ->
;                   forall (k:
;                     (
;                           _:
;                             FStar.Stubs.Tactics.Result.__result
;                             (Prims.list FStar.Stubs.Reflection.Types.name)
;                         -> Type0)).
;                     (forall (r:
;                         FStar.Stubs.Tactics.Result.__result
;                         (Prims.list FStar.Stubs.Reflection.Types.name)).
;                         {:pattern Prims.guard_free (k r)}
;                         Prims.auto_squash (k r)) ==>
;                     (forall (k:
;                         (
;                               _:
;                                 FStar.Stubs.Tactics.Result.__result
;                                 (Prims.list FStar.Stubs.Reflection.Types.name)
;                             -> Type0)).
;                         (forall (r:
;                             FStar.Stubs.Tactics.Result.__result
;                             (Prims.list FStar.Stubs.Reflection.Types.name)).
;                             {:pattern Prims.guard_free (k r)}
;                             Prims.auto_squash (k r)) ==>
;                         Tv_FVar? x ==>
;                         (forall (x: FStar.Stubs.Reflection.Types.fv)
;                             (k:
;                             (
;                                   _:
;                                     FStar.Stubs.Tactics.Result.__result
;                                     (Prims.list FStar.Stubs.Reflection.Types.name)
;                                 -> Type0)).
;                             (forall (r:
;                                 FStar.Stubs.Tactics.Result.__result
;                                 (Prims.list FStar.Stubs.Reflection.Types.name)).
;                                 {:pattern Prims.guard_free (k r)}
;                                 Prims.auto_squash (k r)) ==>
;                             x == FStar.Tactics.NamedView.Tv_FVar x ==>
;                             (forall (k:
;                                 (
;                                       _:
;                                         FStar.Stubs.Tactics.Result.__result
;                                         (Prims.list FStar.Stubs.Reflection.Types.name)
;                                     -> Type0)).
;                                 (forall (r:
;                                     FStar.Stubs.Tactics.Result.__result
;                                     (Prims.list FStar.Stubs.Reflection.Types.name)).
;                                     {:pattern Prims.guard_free (k r)}
;                                     Prims.auto_squash (k r)) ==>
;                                 (forall (r:
;                                     FStar.Stubs.Tactics.Result.__result
;                                     FStar.Stubs.Reflection.Types.env).
;                                     Prims.auto_squash (match r with
;                                         | FStar.Stubs.Tactics.Result.Success x _ ->
;                                           forall (k:
;                                             (
;                                                   _:
;                                                     FStar.Stubs.Tactics.Result.__result
;                                                     (Prims.list FStar.Stubs.Reflection.Types.name)
;                                                 -> Type0)).
;                                             (forall (r:
;                                                 FStar.Stubs.Tactics.Result.__result
;                                                 (Prims.list FStar.Stubs.Reflection.Types.name)).
;                                                 {:pattern Prims.guard_free (k r)}
;                                                 Prims.auto_squash (k r)) ==>
;                                             (forall (k:
;                                                 (
;                                                       _:
;                                                         FStar.Stubs.Tactics.Result.__result
;                                                         (Prims.list FStar.Stubs.Reflection.Types.name
;                                                           )
;                                                     -> Type0)).
;                                                 (forall (r:
;                                                     FStar.Stubs.Tactics.Result.__result
;                                                     (Prims.list FStar.Stubs.Reflection.Types.name)).
;                                                     {:pattern Prims.guard_free (k r)}
;                                                     Prims.auto_squash (k r)) ==>
;                                                 ~(None? (FStar.Stubs.Reflection.V2.Builtins.lookup_typ
;                                                         x
;                                                         (FStar.Stubs.Reflection.V2.Builtins.inspect_fv
;                                                             x)) =
;                                                   true) ==>
;                                                 (forall (x: Prims.bool)
;                                                     (k:
;                                                     (
;                                                           _:
;                                                             FStar.Stubs.Tactics.Result.__result
;                                                             (Prims.list FStar.Stubs.Reflection.Types.name
;                                                               )
;                                                         -> Type0)).
;                                                     (forall (r:
;                                                         FStar.Stubs.Tactics.Result.__result
;                                                         (Prims.list FStar.Stubs.Reflection.Types.name
;                                                           )).
;                                                         {:pattern Prims.guard_free (k r)}
;                                                         Prims.auto_squash (k r)) ==>
;                                                     None? (FStar.Stubs.Reflection.V2.Builtins.lookup_typ
;                                                           x
;                                                           (FStar.Stubs.Reflection.V2.Builtins.inspect_fv
;                                                               x)) ==
;                                                     x ==>
;                                                     (forall (k:
;                                                         (
;                                                               _:
;                                                                 FStar.Stubs.Tactics.Result.__result
;                                                                 (Prims.list FStar.Stubs.Reflection.Types.name
;                                                                   )
;                                                             -> Type0)).
;                                                         (forall (r:
;                                                             FStar.Stubs.Tactics.Result.__result
;                                                             (Prims.list FStar.Stubs.Reflection.Types.name
;                                                               )).
;                                                             {:pattern Prims.guard_free (k r)}
;                                                             Prims.auto_squash (k r)) ==>
;                                                         (forall (k:
;                                                             (
;                                                                   _:
;                                                                     FStar.Stubs.Tactics.Result.__result
;                                                                     FStar.Tactics.NamedView.named_sigelt_view
;                                                                 -> Type0)).
;                                                             (forall (r:
;                                                                 FStar.Stubs.Tactics.Result.__result
;                                                                 FStar.Tactics.NamedView.named_sigelt_view)
;                                                               .
;                                                                 {:pattern Prims.guard_free (k r)}
;                                                                 Prims.auto_squash (k r)) ==>
;                                                             Some? (FStar.Stubs.Reflection.V2.Builtins.lookup_typ
;                                                                   x
;                                                                   (FStar.Stubs.Reflection.V2.Builtins.inspect_fv
;                                                                       x))))))
;                                         | FStar.Stubs.Tactics.Result.Failed _ _ -> Prims.l_True)))))
;                 | FStar.Stubs.Tactics.Result.Failed _ _ -> Prims.l_True)))


; Context: While encoding a query
; While typechecking the top-level declaration `let get_inductive_constructors`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Tactics.NamedView.term)

;; def=FStar.Tactics.Effect.fsti(129,19-129,55); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
FStar.Stubs.Tactics.Types.proofstate)
(HasType @x2
Tm_arrow_d4d543e7e95869f166896805e21068c6)

;; def=FStar.Tactics.Effect.fsti(159,37-159,70); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(FStar.Stubs.Tactics.Result.__result (Prims.list (FStar.Stubs.Reflection.Types.name Dummy_value))))

;; def=FStar.Tactics.Effect.fsti(159,62-159,69); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(Valid 
;; def=FStar.Tactics.Effect.fsti(159,62-159,69); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(ApplyTT @x2
@x3)
)
)
 
;;no pats
:qid @query.2))
)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Tm_arrow_d4d543e7e95869f166896805e21068c6)

;; def=FStar.Tactics.Effect.fsti(61,34-61,102); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(forall ((@x4 Term))
 (! 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(Valid 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(ApplyTT @x3
@x4)
)

 

:pattern ((ApplyTT @x3
@x4))
:qid @query.4))
)

;; def=FStar.Tactics.Effect.fsti(159,37-159,70); use=MiniParse.Spec.TEnum.fst(52,26-52,33)
(forall ((@x4 Term))
 (! (implies (HasType @x4
(FStar.Stubs.Tactics.Result.__result FStar.Tactics.NamedView.term_view))
(let ((@lb5 @x4))
(ite (is-FStar.Stubs.Tactics.Result.Success @lb5)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Tm_arrow_d4d543e7e95869f166896805e21068c6)

;; def=FStar.Tactics.Effect.fsti(61,34-61,102); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(forall ((@x7 Term))
 (! 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(Valid 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(ApplyTT @x6
@x7)
)

 

:pattern ((ApplyTT @x6
@x7))
:qid @query.7))
)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Tm_arrow_d4d543e7e95869f166896805e21068c6)

;; def=FStar.Tactics.Effect.fsti(61,34-61,102); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(forall ((@x8 Term))
 (! 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(Valid 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(ApplyTT @x7
@x8)
)

 

:pattern ((ApplyTT @x7
@x8))
:qid @query.9))


;; def=FStar.Tactics.Effect.fsti(110,77-110,78); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(BoxBool_proj_0 (FStar.Tactics.NamedView.uu___is_Tv_FVar (FStar.Stubs.Tactics.Result.Success_v @lb5)))
)

;; def=FStar.Tactics.Effect.fsti(137,29-137,57); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(forall ((@x8 Term))
 (! (implies (HasType @x8
FStar.Stubs.Reflection.Types.fv)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Tm_arrow_d4d543e7e95869f166896805e21068c6)

;; def=FStar.Tactics.Effect.fsti(61,34-61,102); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(forall ((@x10 Term))
 (! 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(Valid 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(ApplyTT @x9
@x10)
)

 

:pattern ((ApplyTT @x9
@x10))
:qid @query.12))


;; def=MiniParse.Spec.TEnum.fst(52,6-54,15); use=MiniParse.Spec.TEnum.fst(53,8-54,15)
(= (FStar.Stubs.Tactics.Result.Success_v @lb5)
(FStar.Tactics.NamedView.Tv_FVar @x8))
)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Tm_arrow_d4d543e7e95869f166896805e21068c6)

;; def=FStar.Tactics.Effect.fsti(61,34-61,102); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(forall ((@x11 Term))
 (! 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(Valid 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(ApplyTT @x10
@x11)
)

 

:pattern ((ApplyTT @x10
@x11))
:qid @query.14))
)

;; def=FStar.Tactics.Effect.fsti(159,37-159,70); use=MiniParse.Spec.TEnum.fst(56,16-56,23)
(forall ((@x11 Term))
 (! (implies (HasType @x11
(FStar.Stubs.Tactics.Result.__result FStar.Stubs.Reflection.Types.env))
(let ((@lb12 @x11))
(ite (is-FStar.Stubs.Tactics.Result.Success @lb12)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
Tm_arrow_d4d543e7e95869f166896805e21068c6)

;; def=FStar.Tactics.Effect.fsti(61,34-61,102); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(forall ((@x14 Term))
 (! 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(Valid 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(ApplyTT @x13
@x14)
)

 

:pattern ((ApplyTT @x13
@x14))
:qid @query.17))
)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
Tm_arrow_d4d543e7e95869f166896805e21068c6)

;; def=FStar.Tactics.Effect.fsti(61,34-61,102); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(forall ((@x15 Term))
 (! 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(Valid 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(ApplyTT @x14
@x15)
)

 

:pattern ((ApplyTT @x14
@x15))
:qid @query.19))


;; def=FStar.Tactics.Effect.fsti(113,17-113,22); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(not 
;; def=FStar.Tactics.Effect.fsti(110,77-110,78); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(= (FStar.Pervasives.Native.uu___is_None FStar.Stubs.Reflection.Types.sigelt
(FStar.Stubs.Reflection.V2.Builtins.lookup_typ (FStar.Stubs.Tactics.Result.Success_v @lb12)
(FStar.Stubs.Reflection.V2.Builtins.inspect_fv @x8)))
(BoxBool true))
)
)

;; def=FStar.Tactics.Effect.fsti(137,29-137,57); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(forall ((@x15 Term))
 (! (implies (HasType @x15
Prims.bool)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
Tm_arrow_d4d543e7e95869f166896805e21068c6)

;; def=FStar.Tactics.Effect.fsti(61,34-61,102); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(forall ((@x17 Term))
 (! 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(Valid 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(ApplyTT @x16
@x17)
)

 

:pattern ((ApplyTT @x16
@x17))
:qid @query.22))


;; def=MiniParse.Spec.TEnum.fst(58,7-64,43); use=MiniParse.Spec.TEnum.fst(58,7-64,43)
(= (FStar.Pervasives.Native.uu___is_None FStar.Stubs.Reflection.Types.sigelt
(FStar.Stubs.Reflection.V2.Builtins.lookup_typ (FStar.Stubs.Tactics.Result.Success_v @lb12)
(FStar.Stubs.Reflection.V2.Builtins.inspect_fv @x8)))
@x15)
)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Tm_arrow_d4d543e7e95869f166896805e21068c6)

;; def=FStar.Tactics.Effect.fsti(61,34-61,102); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(forall ((@x18 Term))
 (! 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(Valid 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(ApplyTT @x17
@x18)
)

 

:pattern ((ApplyTT @x17
@x18))
:qid @query.24))
)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
Tm_arrow_8b186eb557cd4f7b2cb6b6818606c495)

;; def=FStar.Tactics.Effect.fsti(61,34-61,102); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(forall ((@x19 Term))
 (! 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(Valid 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(51,66-66,37)
(ApplyTT @x18
@x19)
)

 

:pattern ((ApplyTT @x18
@x19))
:qid @query.26))
)

;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=MiniParse.Spec.TEnum.fst(61,56-61,57)
(or label_1

;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=MiniParse.Spec.TEnum.fst(61,56-61,57)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some FStar.Stubs.Reflection.Types.sigelt
(FStar.Stubs.Reflection.V2.Builtins.lookup_typ (FStar.Stubs.Tactics.Result.Success_v @lb12)
(FStar.Stubs.Reflection.V2.Builtins.inspect_fv @x8))))
)
)
 
;;no pats
:qid @query.25)))
 
;;no pats
:qid @query.23)))
 
;;no pats
:qid @query.21)))
 
;;no pats
:qid @query.20))
)
 
;;no pats
:qid @query.18)))
 
;;no pats
:qid @query.16))
(implies (not (is-FStar.Stubs.Tactics.Result.Failed @lb12))
Unreachable))))
 
;;no pats
:qid @query.15))
)
 
;;no pats
:qid @query.13)))
 
;;no pats
:qid @query.11)))
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.8)))
 
;;no pats
:qid @query.6))
(implies (not (is-FStar.Stubs.Tactics.Result.Failed @lb5))
Unreachable))))
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.3)))
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.TEnum.get_inductive_constructors, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_FStar.Stubs.Tactics.Result.Success, data_elim_FStar.Stubs.Tactics.Result.Success, disc_equation_FStar.Pervasives.Native.Some, equation_FStar.Tactics.NamedView.term_view, fuel_guarded_inversion_FStar.Stubs.Tactics.Result.__result, lemma_FStar.Pervasives.invertOption, projection_inverse_BoxBool_proj_0, typing_FStar.Stubs.Reflection.Types.sigelt, typing_FStar.Stubs.Reflection.V2.Builtins.inspect_fv, typing_FStar.Stubs.Reflection.V2.Builtins.lookup_typ

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let get_inductive_constructors


; <Start encoding let get_inductive_constructors>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.TEnum.get_inductive_constructors (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.TEnum.get_inductive_constructors@tok () Term)

; </end encoding let get_inductive_constructors>


; encoding sigelt let gen_synth'


; <Start encoding let gen_synth'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.TEnum.gen_synth_ (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.TEnum.gen_synth_@tok () Term)

; </end encoding let gen_synth'>


; encoding sigelt let gen_synth


; <Start encoding let gen_synth>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.TEnum.gen_synth (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.TEnum.gen_synth@tok () Term)

; </end encoding let gen_synth>


; encoding sigelt let pat_of_term


; <Start encoding let pat_of_term>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.TEnum.pat_of_term (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.TEnum.pat_of_term@tok () Term)

; </end encoding let pat_of_term>


; encoding sigelt let term_of_pat


; <Start encoding let term_of_pat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.TEnum.term_of_pat (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.TEnum.term_of_pat@tok () Term)

; </end encoding let term_of_pat>

(push) ;; push{2

; Starting query at MiniParse.Spec.TEnum.fst(95,2-116,7)

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.TEnum.invert_branches_with_cascade (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.TEnum.invert_branches_with_cascade@tok () Term)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
;;;;;;;;;;;;;;;;_: FStar.Stubs.Tactics.Result.__result FStar.Tactics.NamedView.term -> Type
(declare-fun Tm_arrow_678b210a93c20fe8a76bcc86ebf12570 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_678b210a93c20fe8a76bcc86ebf12570
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_678b210a93c20fe8a76bcc86ebf12570
Tm_type)
:named kinding_Tm_arrow_678b210a93c20fe8a76bcc86ebf12570))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.Tactics.Effect.fsti(28,17-28,36); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_678b210a93c20fe8a76bcc86ebf12570)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_678b210a93c20fe8a76bcc86ebf12570))
:qid MiniParse.Spec.TEnum_pre_typing_Tm_arrow_678b210a93c20fe8a76bcc86ebf12570))

:named MiniParse.Spec.TEnum_pre_typing_Tm_arrow_678b210a93c20fe8a76bcc86ebf12570))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_678b210a93c20fe8a76bcc86ebf12570
;;; Fact-ids: 
(assert (! 
;; def=FStar.Tactics.Effect.fsti(28,17-28,36); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_678b210a93c20fe8a76bcc86ebf12570)
(and 
;; def=FStar.Tactics.Effect.fsti(28,17-28,36); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.Stubs.Tactics.Result.__result FStar.Tactics.NamedView.term))
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid MiniParse.Spec.TEnum_interpretation_Tm_arrow_678b210a93c20fe8a76bcc86ebf12570.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_678b210a93c20fe8a76bcc86ebf12570))
:qid MiniParse.Spec.TEnum_interpretation_Tm_arrow_678b210a93c20fe8a76bcc86ebf12570))

:named MiniParse.Spec.TEnum_interpretation_Tm_arrow_678b210a93c20fe8a76bcc86ebf12570))










;;;;;;;;;;;;;;;;_: FStar.Stubs.Tactics.Result.__result (FStar.Pervasives.Native.option FStar.Tactics.NamedView.term)   -> Type
(declare-fun Tm_arrow_3f550022eaaaf1d3037ac18400354803 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_3f550022eaaaf1d3037ac18400354803
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_3f550022eaaaf1d3037ac18400354803
Tm_type)
:named kinding_Tm_arrow_3f550022eaaaf1d3037ac18400354803))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.Tactics.Effect.fsti(61,12-61,31); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_3f550022eaaaf1d3037ac18400354803)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_3f550022eaaaf1d3037ac18400354803))
:qid MiniParse.Spec.TEnum_pre_typing_Tm_arrow_3f550022eaaaf1d3037ac18400354803))

:named MiniParse.Spec.TEnum_pre_typing_Tm_arrow_3f550022eaaaf1d3037ac18400354803))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_3f550022eaaaf1d3037ac18400354803
;;; Fact-ids: 
(assert (! 
;; def=FStar.Tactics.Effect.fsti(61,12-61,31); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_3f550022eaaaf1d3037ac18400354803)
(and 
;; def=FStar.Tactics.Effect.fsti(61,12-61,31); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.Stubs.Tactics.Result.__result (FStar.Pervasives.Native.option FStar.Tactics.NamedView.term)))
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid MiniParse.Spec.TEnum_interpretation_Tm_arrow_3f550022eaaaf1d3037ac18400354803.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_3f550022eaaaf1d3037ac18400354803))
:qid MiniParse.Spec.TEnum_interpretation_Tm_arrow_3f550022eaaaf1d3037ac18400354803))

:named MiniParse.Spec.TEnum_interpretation_Tm_arrow_3f550022eaaaf1d3037ac18400354803))

; Encoding query formula : forall (enum_ty: FStar.Tactics.NamedView.term)
;   (val_eq: FStar.Tactics.NamedView.term)
;   (x: FStar.Tactics.NamedView.term)
;   (accu: FStar.Pervasives.Native.option FStar.Tactics.NamedView.term)
;   (l: Prims.list FStar.Tactics.NamedView.branch).
;   (*  - Could not prove post-condition
; *)
;   forall (ps: FStar.Stubs.Tactics.Types.proofstate)
;     (p: (_: FStar.Stubs.Tactics.Result.__result FStar.Tactics.NamedView.term -> Type0)).
;     (forall (r: FStar.Stubs.Tactics.Result.__result FStar.Tactics.NamedView.term).
;         Prims.auto_squash (p r)) ==>
;     (forall (k: (_: FStar.Stubs.Tactics.Result.__result FStar.Tactics.NamedView.term -> Type0)).
;         (forall (r: FStar.Stubs.Tactics.Result.__result FStar.Tactics.NamedView.term).
;             {:pattern Prims.guard_free (k r)}
;             Prims.auto_squash (k r)) ==>
;         (~(Nil? l) /\ ~(Cons? l) ==> Prims.l_False) /\
;         (forall (k: (_: FStar.Stubs.Tactics.Result.__result FStar.Tactics.NamedView.term -> Type0)).
;             (forall (r: FStar.Stubs.Tactics.Result.__result FStar.Tactics.NamedView.term).
;                 {:pattern Prims.guard_free (k r)}
;                 Prims.auto_squash (k r)) ==>
;             (Nil? l ==>
;               (forall (k:
;                   (_: FStar.Stubs.Tactics.Result.__result FStar.Tactics.NamedView.term -> Type0)).
;                   (forall (r: FStar.Stubs.Tactics.Result.__result FStar.Tactics.NamedView.term).
;                       {:pattern Prims.guard_free (k r)}
;                       Prims.auto_squash (k r)) ==>
;                   l == [] ==>
;                   (forall (k:
;                       (_: FStar.Stubs.Tactics.Result.__result FStar.Tactics.NamedView.term -> Type0))
;                     .
;                       (forall (r: FStar.Stubs.Tactics.Result.__result FStar.Tactics.NamedView.term).
;                           {:pattern Prims.guard_free (k r)}
;                           Prims.auto_squash (k r)) ==>
;                       ~(None? accu) /\ ~(Some? accu) ==> Prims.l_False))) /\
;             (~(Nil? l) ==>
;               (forall (x: FStar.Tactics.NamedView.pattern)
;                   (x: FStar.Tactics.NamedView.term)
;                   (x: Prims.list FStar.Tactics.NamedView.branch)
;                   (k:
;                   (_: FStar.Stubs.Tactics.Result.__result FStar.Tactics.NamedView.term -> Type0)).
;                   (forall (r: FStar.Stubs.Tactics.Result.__result FStar.Tactics.NamedView.term).
;                       {:pattern Prims.guard_free (k r)}
;                       Prims.auto_squash (k r)) ==>
;                   l == (x, x) :: x ==>
;                   (forall (k:
;                       (_: FStar.Stubs.Tactics.Result.__result FStar.Tactics.NamedView.term -> Type0))
;                     .
;                       (forall (r: FStar.Stubs.Tactics.Result.__result FStar.Tactics.NamedView.term).
;                           {:pattern Prims.guard_free (k r)}
;                           Prims.auto_squash (k r)) ==>
;                       (forall (r:
;                           FStar.Stubs.Tactics.Result.__result
;                           (FStar.Pervasives.Native.option FStar.Tactics.NamedView.term)).
;                           Prims.auto_squash (match r with
;                               | FStar.Stubs.Tactics.Result.Success x _ ->
;                                 forall (k:
;                                   (
;                                         _:
;                                           FStar.Stubs.Tactics.Result.__result
;                                           FStar.Tactics.NamedView.term
;                                       -> Type0)).
;                                   (forall (r:
;                                       FStar.Stubs.Tactics.Result.__result
;                                       FStar.Tactics.NamedView.term).
;                                       {:pattern Prims.guard_free (k r)}
;                                       Prims.auto_squash (k r)) ==>
;                                   (forall (k:
;                                       (
;                                             _:
;                                               FStar.Stubs.Tactics.Result.__result
;                                               FStar.Tactics.NamedView.term
;                                           -> Type0)).
;                                       (forall (r:
;                                           FStar.Stubs.Tactics.Result.__result
;                                           FStar.Tactics.NamedView.term).
;                                           {:pattern Prims.guard_free (k r)}
;                                           Prims.auto_squash (k r)) ==>
;                                       Some? x ==>
;                                       (forall (x: FStar.Tactics.NamedView.term)
;                                           (k:
;                                           (
;                                                 _:
;                                                   FStar.Stubs.Tactics.Result.__result
;                                                   FStar.Tactics.NamedView.term
;                                               -> Type0)).
;                                           (forall (r:
;                                               FStar.Stubs.Tactics.Result.__result
;                                               FStar.Tactics.NamedView.term).
;                                               {:pattern Prims.guard_free (k r)}
;                                               Prims.auto_squash (k r)) ==>
;                                           x == FStar.Pervasives.Native.Some x ==>
;                                           (forall (k:
;                                               (
;                                                     _:
;                                                       FStar.Stubs.Tactics.Result.__result
;                                                       FStar.Tactics.NamedView.term
;                                                   -> Type0)).
;                                               (forall (r:
;                                                   FStar.Stubs.Tactics.Result.__result
;                                                   FStar.Tactics.NamedView.term).
;                                                   {:pattern Prims.guard_free (k r)}
;                                                   Prims.auto_squash (k r)) ==>
;                                               (forall (k:
;                                                   (
;                                                         _:
;                                                           FStar.Stubs.Tactics.Result.__result
;                                                           (FStar.Pervasives.Native.option FStar.Tactics.NamedView.term
;                                                             )
;                                                       -> Type0)).
;                                                   (forall (r:
;                                                       FStar.Stubs.Tactics.Result.__result
;                                                       (FStar.Pervasives.Native.option FStar.Tactics.NamedView.term
;                                                         )).
;                                                       {:pattern Prims.guard_free (k r)}
;                                                       Prims.auto_squash (k r)) ==>
;                                                   ~(None? accu) /\ ~(Some? accu) ==> Prims.l_False))
;                                       ))
;                               | FStar.Stubs.Tactics.Result.Failed _ _ -> Prims.l_True)))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec invert_branches_with_cascade`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
FStar.Tactics.NamedView.term)
(HasType @x1
FStar.Tactics.NamedView.term)
(HasType @x2
FStar.Tactics.NamedView.term)
(HasType @x3
(FStar.Pervasives.Native.option FStar.Tactics.NamedView.term))
(HasType @x4
(Prims.list FStar.Tactics.NamedView.branch)))

;; def=FStar.Tactics.Effect.fsti(129,19-129,55); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(forall ((@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x5
FStar.Stubs.Tactics.Types.proofstate)
(HasType @x6
Tm_arrow_678b210a93c20fe8a76bcc86ebf12570)

;; def=FStar.Tactics.Effect.fsti(159,37-159,70); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(forall ((@x7 Term))
 (! (implies (HasType @x7
(FStar.Stubs.Tactics.Result.__result FStar.Tactics.NamedView.term))

;; def=FStar.Tactics.Effect.fsti(159,62-159,69); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(Valid 
;; def=FStar.Tactics.Effect.fsti(159,62-159,69); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(ApplyTT @x6
@x7)
)
)
 
;;no pats
:qid @query.2))
)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Tm_arrow_678b210a93c20fe8a76bcc86ebf12570)

;; def=FStar.Tactics.Effect.fsti(61,34-61,102); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(forall ((@x8 Term))
 (! 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(Valid 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(ApplyTT @x7
@x8)
)

 

:pattern ((ApplyTT @x7
@x8))
:qid @query.4))
)

;; def=Prims.fst(459,77-459,89); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(and (implies 
;; def=MiniParse.Spec.TEnum.fst(94,107-94,108); use=MiniParse.Spec.TEnum.fst(95,8-95,9)
(and 
;; def=MiniParse.Spec.TEnum.fst(94,107-94,108); use=MiniParse.Spec.TEnum.fst(95,8-95,9)
(not 
;; def=MiniParse.Spec.TEnum.fst(94,107-94,108); use=MiniParse.Spec.TEnum.fst(95,8-95,9)
(BoxBool_proj_0 (Prims.uu___is_Nil FStar.Tactics.NamedView.branch
@x4))
)


;; def=MiniParse.Spec.TEnum.fst(94,107-94,108); use=MiniParse.Spec.TEnum.fst(95,8-95,9)
(not 
;; def=MiniParse.Spec.TEnum.fst(94,107-94,108); use=MiniParse.Spec.TEnum.fst(95,8-95,9)
(BoxBool_proj_0 (Prims.uu___is_Cons FStar.Tactics.NamedView.branch
@x4))
)
)

label_1)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Tm_arrow_678b210a93c20fe8a76bcc86ebf12570)

;; def=FStar.Tactics.Effect.fsti(61,34-61,102); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(forall ((@x9 Term))
 (! 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(Valid 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(ApplyTT @x8
@x9)
)

 

:pattern ((ApplyTT @x8
@x9))
:qid @query.6))
)

;; def=FStar.Tactics.Effect.fsti(112,19-113,43); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(and (implies 
;; def=FStar.Tactics.Effect.fsti(110,77-110,78); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(BoxBool_proj_0 (Prims.uu___is_Nil FStar.Tactics.NamedView.branch
@x4))

(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Tm_arrow_678b210a93c20fe8a76bcc86ebf12570)

;; def=FStar.Tactics.Effect.fsti(61,34-61,102); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(forall ((@x10 Term))
 (! 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(Valid 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(ApplyTT @x9
@x10)
)

 

:pattern ((ApplyTT @x9
@x10))
:qid @query.8))


;; def=MiniParse.Spec.TEnum.fst(94,107-96,6); use=MiniParse.Spec.TEnum.fst(95,8-96,6)
(= @x4
(Prims.Nil FStar.Tactics.NamedView.branch))
)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Tm_arrow_678b210a93c20fe8a76bcc86ebf12570)

;; def=FStar.Tactics.Effect.fsti(61,34-61,102); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(forall ((@x11 Term))
 (! 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(Valid 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(ApplyTT @x10
@x11)
)

 

:pattern ((ApplyTT @x10
@x11))
:qid @query.10))


;; def=MiniParse.Spec.TEnum.fst(94,85-94,89); use=MiniParse.Spec.TEnum.fst(97,16-97,20)
(not 
;; def=MiniParse.Spec.TEnum.fst(94,85-94,89); use=MiniParse.Spec.TEnum.fst(97,16-97,20)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None FStar.Tactics.NamedView.term
@x3))
)


;; def=MiniParse.Spec.TEnum.fst(94,85-94,89); use=MiniParse.Spec.TEnum.fst(97,16-97,20)
(not 
;; def=MiniParse.Spec.TEnum.fst(94,85-94,89); use=MiniParse.Spec.TEnum.fst(97,16-97,20)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some FStar.Tactics.NamedView.term
@x3))
)
)
label_2)
 
;;no pats
:qid @query.9)))
 
;;no pats
:qid @query.7)))
(implies 
;; def=FStar.Tactics.Effect.fsti(113,17-113,22); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(not 
;; def=FStar.Tactics.Effect.fsti(110,77-110,78); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(BoxBool_proj_0 (Prims.uu___is_Nil FStar.Tactics.NamedView.branch
@x4))
)


;; def=FStar.Tactics.Effect.fsti(137,29-137,57); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(forall ((@x9 Term))
 (! (implies (HasType @x9
FStar.Tactics.NamedView.pattern)

;; def=FStar.Tactics.Effect.fsti(137,29-137,57); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(forall ((@x10 Term))
 (! (implies (HasType @x10
FStar.Tactics.NamedView.term)

;; def=FStar.Tactics.Effect.fsti(137,29-137,57); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(forall ((@x11 Term))
 (! (implies (HasType @x11
(Prims.list FStar.Tactics.NamedView.branch))
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Tm_arrow_678b210a93c20fe8a76bcc86ebf12570)

;; def=FStar.Tactics.Effect.fsti(61,34-61,102); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(forall ((@x13 Term))
 (! 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(Valid 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(ApplyTT @x12
@x13)
)

 

:pattern ((ApplyTT @x12
@x13))
:qid @query.15))


;; def=MiniParse.Spec.TEnum.fst(94,107-101,15); use=MiniParse.Spec.TEnum.fst(95,8-101,15)
(= @x4
(Prims.Cons FStar.Tactics.NamedView.branch
(FStar.Pervasives.Native.Mktuple2 FStar.Tactics.NamedView.pattern
FStar.Tactics.NamedView.term
@x9
@x10)
@x11))
)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
Tm_arrow_678b210a93c20fe8a76bcc86ebf12570)

;; def=FStar.Tactics.Effect.fsti(61,34-61,102); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(forall ((@x14 Term))
 (! 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(Valid 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(ApplyTT @x13
@x14)
)

 

:pattern ((ApplyTT @x13
@x14))
:qid @query.17))
)

;; def=FStar.Tactics.Effect.fsti(159,37-159,70); use=MiniParse.Spec.TEnum.fst(102,16-102,27)
(forall ((@x14 Term))
 (! (implies (HasType @x14
(FStar.Stubs.Tactics.Result.__result (FStar.Pervasives.Native.option FStar.Tactics.NamedView.term)))
(let ((@lb15 @x14))
(ite (is-FStar.Stubs.Tactics.Result.Success @lb15)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
Tm_arrow_678b210a93c20fe8a76bcc86ebf12570)

;; def=FStar.Tactics.Effect.fsti(61,34-61,102); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(forall ((@x17 Term))
 (! 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(Valid 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(ApplyTT @x16
@x17)
)

 

:pattern ((ApplyTT @x16
@x17))
:qid @query.20))
)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Tm_arrow_678b210a93c20fe8a76bcc86ebf12570)

;; def=FStar.Tactics.Effect.fsti(61,34-61,102); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(forall ((@x18 Term))
 (! 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(Valid 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(ApplyTT @x17
@x18)
)

 

:pattern ((ApplyTT @x17
@x18))
:qid @query.22))


;; def=FStar.Tactics.Effect.fsti(110,77-110,78); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some FStar.Tactics.NamedView.term
(FStar.Stubs.Tactics.Result.Success_v @lb15)))
)

;; def=FStar.Tactics.Effect.fsti(137,29-137,57); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(forall ((@x18 Term))
 (! (implies (HasType @x18
FStar.Tactics.NamedView.term)
(forall ((@x19 Term))
 (! (implies (and (HasType @x19
Tm_arrow_678b210a93c20fe8a76bcc86ebf12570)

;; def=FStar.Tactics.Effect.fsti(61,34-61,102); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(forall ((@x20 Term))
 (! 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(Valid 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(ApplyTT @x19
@x20)
)

 

:pattern ((ApplyTT @x19
@x20))
:qid @query.25))


;; def=MiniParse.Spec.TEnum.fst(102,16-103,12); use=MiniParse.Spec.TEnum.fst(102,16-103,12)
(= (FStar.Stubs.Tactics.Result.Success_v @lb15)
(FStar.Pervasives.Native.Some FStar.Tactics.NamedView.term
@x18))
)
(forall ((@x20 Term))
 (! (implies (and (HasType @x20
Tm_arrow_678b210a93c20fe8a76bcc86ebf12570)

;; def=FStar.Tactics.Effect.fsti(61,34-61,102); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(forall ((@x21 Term))
 (! 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(Valid 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(ApplyTT @x20
@x21)
)

 

:pattern ((ApplyTT @x20
@x21))
:qid @query.27))
)
(forall ((@x21 Term))
 (! (implies (and (HasType @x21
Tm_arrow_3f550022eaaaf1d3037ac18400354803)

;; def=FStar.Tactics.Effect.fsti(61,34-61,102); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(forall ((@x22 Term))
 (! 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(Valid 
;; def=FStar.Tactics.Effect.fsti(61,98-61,101); use=MiniParse.Spec.TEnum.fst(95,2-116,7)
(ApplyTT @x21
@x22)
)

 

:pattern ((ApplyTT @x21
@x22))
:qid @query.29))


;; def=MiniParse.Spec.TEnum.fst(94,85-94,89); use=MiniParse.Spec.TEnum.fst(104,24-104,28)
(not 
;; def=MiniParse.Spec.TEnum.fst(94,85-94,89); use=MiniParse.Spec.TEnum.fst(104,24-104,28)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None FStar.Tactics.NamedView.term
@x3))
)


;; def=MiniParse.Spec.TEnum.fst(94,85-94,89); use=MiniParse.Spec.TEnum.fst(104,24-104,28)
(not 
;; def=MiniParse.Spec.TEnum.fst(94,85-94,89); use=MiniParse.Spec.TEnum.fst(104,24-104,28)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some FStar.Tactics.NamedView.term
@x3))
)
)
label_3)
 
;;no pats
:qid @query.28)))
 
;;no pats
:qid @query.26)))
 
;;no pats
:qid @query.24)))
 
;;no pats
:qid @query.23))
)
 
;;no pats
:qid @query.21)))
 
;;no pats
:qid @query.19))
(implies (not (is-FStar.Stubs.Tactics.Result.Failed @lb15))
Unreachable))))
 
;;no pats
:qid @query.18))
)
 
;;no pats
:qid @query.16)))
 
;;no pats
:qid @query.14)))
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))
))
)
 
;;no pats
:qid @query.5)))
)
 
;;no pats
:qid @query.3)))
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.TEnum.invert_branches_with_cascade, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equation_FStar.Tactics.NamedView.branch, equation_FStar.Tactics.NamedView.term, fuel_guarded_inversion_FStar.Stubs.Tactics.Result.__result, fuel_guarded_inversion_Prims.list, lemma_FStar.Pervasives.invertOption, projection_inverse_BoxBool_proj_0, typing_FStar.Stubs.Reflection.Types.term

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec invert_branches_with_cascade


; <Start encoding let rec invert_branches_with_cascade>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.TEnum.invert_branches_with_cascade (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.TEnum.invert_branches_with_cascade@tok () Term)

; </end encoding let rec invert_branches_with_cascade>


; encoding sigelt let invert_function'


; <Start encoding let invert_function'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.TEnum.invert_function_ (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.TEnum.invert_function_@tok () Term)

; </end encoding let invert_function'>


; encoding sigelt let tenum_bound_nat


; <Start encoding let tenum_bound_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.TEnum.tenum_bound_nat (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.TEnum.tenum_bound_nat@tok () Term)

; </end encoding let tenum_bound_nat>


; encoding sigelt let tenum_bound'


; <Start encoding let tenum_bound'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.TEnum.tenum_bound_ (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.TEnum.tenum_bound_@tok () Term)

; </end encoding let tenum_bound'>


; encoding sigelt let tenum_bound


; <Start encoding let tenum_bound>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.TEnum.tenum_bound (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.TEnum.tenum_bound@tok () Term)

; </end encoding let tenum_bound>


; encoding sigelt let gen_synth_bounded'


; <Start encoding let gen_synth_bounded'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MiniParse.Spec.TEnum.gen_synth_bounded_ (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MiniParse.Spec.TEnum.gen_synth_bounded_@tok () Term)

; </end encoding let gen_synth_bounded'>


; encoding sigelt let synth_inverse_forall_bounded_u16_pred


; <Start encoding let synth_inverse_forall_bounded_u16_pred>

;;;;;;;;;;;;;;;;_: MiniParse.Spec.Int.bounded_u16 b -> Prims.GTot t
(declare-fun Tm_ghost_arrow_aa4ee400e74a2ccb18d62d2f18333628 (Term Term) Term)
;;;;;;;;;;;;;;;;_: t -> Prims.GTot (MiniParse.Spec.Int.bounded_u16 b)
(declare-fun Tm_ghost_arrow_70c09af8b77dc51f7fbdc428d1499189 (Term Term) Term)
(declare-fun MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred (Term Term Term Term Term) Term)


;;;;;;;;;;;;;;;;b: Prims.nat ->     t: Type ->     f1: (_: MiniParse.Spec.Int.bounded_u16 b -> Prims.GTot t) ->     f2: (_: t -> Prims.GTot (MiniParse.Spec.Int.bounded_u16 b)) ->     x: MiniParse.Spec.Int.bounded_u16 b   -> Prims.GTot Type
(declare-fun Tm_arrow_ede77d927a36bef34eeac399b95a4c56 () Term)
(declare-fun MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred@tok () Term)



; </end encoding let synth_inverse_forall_bounded_u16_pred>


; encoding sigelt let synth_inverse_forall_bounded_u16'


; <Start encoding let synth_inverse_forall_bounded_u16'>



(declare-fun MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_ (Term Term Term Term) Term)


;;;;;;;;;;;;;;;;b: Prims.nat ->     t: Type ->     f1: (_: MiniParse.Spec.Int.bounded_u16 b -> Prims.GTot t) ->     f2: (_: t -> Prims.GTot (MiniParse.Spec.Int.bounded_u16 b))   -> Prims.GTot Type
(declare-fun Tm_arrow_792251f51c19967fdc7ac87f37a7e700 () Term)
(declare-fun MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_@tok () Term)



; </end encoding let synth_inverse_forall_bounded_u16'>


; encoding sigelt val MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_intro


; <Skipped val MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_intro/>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_and; Namespace Prims
(assert (! 
;; def=Prims.fst(188,5-188,10); use=Prims.fst(188,5-188,10)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.logical)
(HasType @x1
Prims.logical))
(HasType (Prims.l_and @x0
@x1)
Prims.logical))
 

:pattern ((Prims.l_and @x0
@x1))
:qid typing_Prims.l_and))

:named typing_Prims.l_and))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.eq2; Namespace Prims
(assert (! 
;; def=Prims.fst(175,5-175,8); use=Prims.fst(175,5-175,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0)
(HasType @x2
@x0))
(HasType (Prims.eq2 @x0
@x1
@x2)
Prims.logical))
 

:pattern ((Prims.eq2 @x0
@x1
@x2))
:qid typing_Prims.eq2))

:named typing_Prims.eq2))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred; Namespace MiniParse.Spec.TEnum
(assert (! 
;; def=MiniParse.Spec.TEnum.fst(148,4-148,41); use=MiniParse.Spec.TEnum.fst(148,4-148,41)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Tm_type)
(HasType @x2
(Tm_ghost_arrow_aa4ee400e74a2ccb18d62d2f18333628 @x1
@x0))
(HasType @x3
(Tm_ghost_arrow_70c09af8b77dc51f7fbdc428d1499189 @x0
@x1))
(HasType @x4
(MiniParse.Spec.Int.bounded_u16 @x0)))
(HasType (MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred @x0
@x1
@x2
@x3
@x4)
Tm_type))
 

:pattern ((MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred @x0
@x1
@x2
@x3
@x4))
:qid typing_MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred))

:named typing_MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16'; Namespace MiniParse.Spec.TEnum
(assert (! 
;; def=MiniParse.Spec.TEnum.fst(157,4-157,37); use=MiniParse.Spec.TEnum.fst(157,4-157,37)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Tm_type)
(HasType @x2
(Tm_ghost_arrow_aa4ee400e74a2ccb18d62d2f18333628 @x1
@x0))
(HasType @x3
(Tm_ghost_arrow_70c09af8b77dc51f7fbdc428d1499189 @x0
@x1)))
(HasType (MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_ @x0
@x1
@x2
@x3)
Tm_type))
 

:pattern ((MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_ @x0
@x1
@x2
@x3))
:qid typing_MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_))

:named typing_MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Int.pred_pre; Namespace MiniParse.Spec.Int
(assert (! 
;; def=MiniParse.Spec.Int.fst(70,4-70,12); use=MiniParse.Spec.Int.fst(70,4-70,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_refine_35fb8759ee35d7bf7cf3df6dd7bf565c)
(HasType @x1
(Tm_arrow_7b48bf5c91b1e428e5f3665bb06f2192 @x0))
(HasType @x2
(MiniParse.Spec.Int.bounded_u16 (Prims.op_Subtraction @x0
(BoxInt 1)))))
(HasType (MiniParse.Spec.Int.pred_pre @x0
@x1
@x2)
Tm_type))
 

:pattern ((MiniParse.Spec.Int.pred_pre @x0
@x1
@x2))
:qid typing_MiniParse.Spec.Int.pred_pre))

:named typing_MiniParse.Spec.Int.pred_pre))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Int.pred_large_bound; Namespace MiniParse.Spec.Int
(assert (! 
;; def=MiniParse.Spec.Int.fst(77,4-77,20); use=MiniParse.Spec.Int.fst(77,4-77,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_refine_ed1ec337958d4240fdc3197cba495263)
(HasType @x1
(Tm_arrow_7b48bf5c91b1e428e5f3665bb06f2192 @x0))
(HasType @x2
(MiniParse.Spec.Int.bounded_u16 (Prims.op_Subtraction @x0
(BoxInt 1)))))
(HasType (MiniParse.Spec.Int.pred_large_bound @x0
@x1
@x2)
Tm_type))
 

:pattern ((MiniParse.Spec.Int.pred_large_bound @x0
@x1
@x2))
:qid typing_MiniParse.Spec.Int.pred_large_bound))

:named typing_MiniParse.Spec.Int.pred_large_bound))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Int.forall_bounded_u16; Namespace MiniParse.Spec.Int
(assert (! 
;; def=MiniParse.Spec.Int.fst(84,8-84,26); use=MiniParse.Spec.Int.fst(84,8-84,26)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
(Tm_arrow_7b48bf5c91b1e428e5f3665bb06f2192 @x0)))
(HasType (MiniParse.Spec.Int.forall_bounded_u16 @x0
@x1)
Tm_type))
 

:pattern ((MiniParse.Spec.Int.forall_bounded_u16 @x0
@x1))
:qid typing_MiniParse.Spec.Int.forall_bounded_u16))

:named typing_MiniParse.Spec.Int.forall_bounded_u16))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Int.bounded_u16; Namespace MiniParse.Spec.Int
(assert (! 
;; def=MiniParse.Spec.Int.fst(46,4-46,15); use=MiniParse.Spec.Int.fst(46,4-46,15)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.nat)
(HasType (MiniParse.Spec.Int.bounded_u16 @x0)
Prims.eqtype))
 

:pattern ((MiniParse.Spec.Int.bounded_u16 @x0))
:qid typing_MiniParse.Spec.Int.bounded_u16))

:named typing_MiniParse.Spec.Int.bounded_u16))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MiniParse.Spec.Combinators.synth_inverse; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(568,4-568,17); use=MiniParse.Spec.Combinators.fst(568,4-568,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x1
@x0))
(HasType @x3
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x0
@x1)))
(HasType (MiniParse.Spec.Combinators.synth_inverse @x0
@x1
@x2
@x3)
Tm_type))
 

:pattern ((MiniParse.Spec.Combinators.synth_inverse @x0
@x1
@x2
@x3))
:qid typing_MiniParse.Spec.Combinators.synth_inverse))

:named typing_MiniParse.Spec.Combinators.synth_inverse))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt16.v; Namespace FStar.UInt16
(assert (! 
;; def=FStar.UInt16.fsti(54,4-54,5); use=FStar.UInt16.fsti(54,4-54,5)
(forall ((@x0 Term))
 (! (implies (HasType @x0
(FStar.UInt16.t Dummy_value))
(HasType (FStar.UInt16.v @x0)
(FStar.UInt.uint_t (BoxInt 16))))
 

:pattern ((FStar.UInt16.v @x0))
:qid typing_FStar.UInt16.v))

:named typing_FStar.UInt16.v))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt16.uint_to_t; Namespace FStar.UInt16
(assert (! 
;; def=FStar.UInt16.fsti(58,4-58,13); use=FStar.UInt16.fsti(58,4-58,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
(FStar.UInt.uint_t (BoxInt 16)))
(HasType (FStar.UInt16.uint_to_t @x0)
(Tm_refine_f2a41cd0b7a1b87e64e4bdabfc823091 @x0)))
 

:pattern ((FStar.UInt16.uint_to_t @x0))
:qid typing_FStar.UInt16.uint_to_t))

:named typing_FStar.UInt16.uint_to_t))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt16.t; Namespace FStar.UInt16
(assert (! 
;; def=FStar.UInt16.fsti(50,8-50,9); use=FStar.UInt16.fsti(50,8-50,9)
(forall ((@u0 Dummy_sort))
 (! (HasType (FStar.UInt16.t @u0)
Prims.eqtype)
 

:pattern ((FStar.UInt16.t @u0))
:qid typing_FStar.UInt16.t))

:named typing_FStar.UInt16.t))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt16.add; Namespace FStar.UInt16
(assert (! 
;; def=FStar.UInt16.fsti(88,4-88,7); use=FStar.UInt16.fsti(88,4-88,7)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and 
;; def=FStar.UInt16.fsti(89,12-89,32); use=FStar.UInt16.fsti(89,12-89,32)
(Valid 
;; def=FStar.UInt16.fsti(89,12-89,32); use=FStar.UInt16.fsti(89,12-89,32)
(FStar.UInt.size (Prims.op_Addition (FStar.UInt16.v @x0)
(FStar.UInt16.v @x1))
(BoxInt 16))
)

(HasType @x0
(FStar.UInt16.t Dummy_value))
(HasType @x1
(FStar.UInt16.t Dummy_value)))
(HasType (FStar.UInt16.add @x0
@x1)
(Tm_refine_6fc1cfeb1ee6b248d1fef572cc963c99 @x0
@x1)))
 

:pattern ((FStar.UInt16.add @x0
@x1))
:qid typing_FStar.UInt16.add))

:named typing_FStar.UInt16.add))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.uint_t; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(54,5-54,11); use=FStar.UInt.fsti(54,5-54,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.nat)
(HasType (FStar.UInt.uint_t @x0)
Tm_type))
 

:pattern ((FStar.UInt.uint_t @x0))
:qid typing_FStar.UInt.uint_t))

:named typing_FStar.UInt.uint_t))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.pair@tok
@x0)
@x1)
(Prims.pair @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.pair@tok
@x0)
@x1))

:pattern ((Prims.pair @x0
@x1))
:qid token_correspondence_Prims.pair@tok))

:named token_correspondence_Prims.pair@tok))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.op_Equality; Namespace Prims
(assert (! 
;; def=Prims.fst(588,4-588,15); use=Prims.fst(588,4-588,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT Prims.op_Equality@tok
@x0)
@x1)
@x2)
(Prims.op_Equality @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT Prims.op_Equality@tok
@x0)
@x1)
@x2))
:qid token_correspondence_Prims.op_Equality))

:named token_correspondence_Prims.op_Equality))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT Prims.equals@tok
@x0)
@x1)
@x2)
(Prims.equals @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT Prims.equals@tok
@x0)
@x1)
@x2))

:pattern ((Prims.equals @x0
@x1
@x2))
:qid token_correspondence_Prims.equals@tok))

:named token_correspondence_Prims.equals@tok))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred; Namespace MiniParse.Spec.TEnum
(assert (! 
;; def=MiniParse.Spec.TEnum.fst(148,4-148,41); use=MiniParse.Spec.TEnum.fst(148,4-148,41)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred@tok
@x0)
@x1)
@x2)
@x3)
@x4)
(MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred @x0
@x1
@x2
@x3
@x4))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred@tok
@x0)
@x1)
@x2)
@x3)
@x4))
:qid token_correspondence_MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred))

:named token_correspondence_MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name MiniParse.Spec.Int.pred_pre; Namespace MiniParse.Spec.Int
(assert (! 
;; def=MiniParse.Spec.Int.fst(70,4-70,12); use=MiniParse.Spec.Int.fst(70,4-70,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Int.pred_pre@tok
@x0)
@x1)
@x2)
(MiniParse.Spec.Int.pred_pre @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Int.pred_pre@tok
@x0)
@x1)
@x2))
:qid token_correspondence_MiniParse.Spec.Int.pred_pre))

:named token_correspondence_MiniParse.Spec.Int.pred_pre))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name MiniParse.Spec.Int.pred_large_bound; Namespace MiniParse.Spec.Int
(assert (! 
;; def=MiniParse.Spec.Int.fst(77,4-77,20); use=MiniParse.Spec.Int.fst(77,4-77,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Int.pred_large_bound@tok
@x0)
@x1)
@x2)
(MiniParse.Spec.Int.pred_large_bound @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Int.pred_large_bound@tok
@x0)
@x1)
@x2))
:qid token_correspondence_MiniParse.Spec.Int.pred_large_bound))

:named token_correspondence_MiniParse.Spec.Int.pred_large_bound))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name MiniParse.Spec.Int.forall_bounded_u16; Namespace MiniParse.Spec.Int
(assert (! 
;; def=MiniParse.Spec.Int.fst(84,8-84,26); use=MiniParse.Spec.Int.fst(84,8-84,26)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.nat)
(HasType @x2
(Tm_arrow_7b48bf5c91b1e428e5f3665bb06f2192 @x1)))
(HasType (MiniParse.Spec.Int.forall_bounded_u16.fuel_instrumented @u0
@x1
@x2)
Tm_type))
 

:pattern ((MiniParse.Spec.Int.forall_bounded_u16.fuel_instrumented @u0
@x1
@x2))
:qid token_correspondence_MiniParse.Spec.Int.forall_bounded_u16.fuel_instrumented))

:named token_correspondence_MiniParse.Spec.Int.forall_bounded_u16.fuel_instrumented))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x5
@x6))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(Prims.Pair @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(Prims.Pair @x1
@x2
@x3
@x4)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x5
@x6)))
:qid subterm_ordering_Prims.Pair))

:named subterm_ordering_Prims.Pair))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt16.uint_to_t; Namespace FStar.UInt16
(assert (! 
;; def=FStar.UInt16.fsti(58,34-58,35); use=FStar.UInt16.fsti(58,34-58,35)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_f2a41cd0b7a1b87e64e4bdabfc823091 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_f2a41cd0b7a1b87e64e4bdabfc823091 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_f2a41cd0b7a1b87e64e4bdabfc823091))

:named refinement_kinding_Tm_refine_f2a41cd0b7a1b87e64e4bdabfc823091))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt.uint_t; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(54,22-54,37); use=FStar.UInt.fsti(54,22-54,37)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_f13070840248fced9d9d60d77bdae3ec @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_f13070840248fced9d9d60d77bdae3ec @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_f13070840248fced9d9d60d77bdae3ec))

:named refinement_kinding_Tm_refine_f13070840248fced9d9d60d77bdae3ec))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt16.zero; Namespace FStar.UInt16
(assert (! (HasType Tm_refine_954f2f8414e85457d28fe853c92eda2f
Tm_type)
:named refinement_kinding_Tm_refine_954f2f8414e85457d28fe853c92eda2f))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt16.add; Namespace FStar.UInt16
(assert (! 
;; def=FStar.UInt16.fsti(88,27-88,28); use=FStar.UInt16.fsti(88,27-88,28)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_6fc1cfeb1ee6b248d1fef572cc963c99 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_6fc1cfeb1ee6b248d1fef572cc963c99 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_6fc1cfeb1ee6b248d1fef572cc963c99))

:named refinement_kinding_Tm_refine_6fc1cfeb1ee6b248d1fef572cc963c99))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt16.div; Namespace FStar.UInt16
(assert (! (HasType Tm_refine_3e34e2c4f5ba554ca9d5a94a7452f876
Tm_type)
:named refinement_kinding_Tm_refine_3e34e2c4f5ba554ca9d5a94a7452f876))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt16.one; Namespace FStar.UInt16
(assert (! (HasType Tm_refine_2808678106914fa614675fc00e2d12d2
Tm_type)
:named refinement_kinding_Tm_refine_2808678106914fa614675fc00e2d12d2))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name MiniParse.Spec.Int.bounded_u16; Namespace MiniParse.Spec.Int
(assert (! 
;; def=MiniParse.Spec.Int.fst(46,40-46,67); use=MiniParse.Spec.Int.fst(46,40-46,67)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_122393b221b19344c38b437c8217b781 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_122393b221b19344c38b437c8217b781 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_122393b221b19344c38b437c8217b781))

:named refinement_kinding_Tm_refine_122393b221b19344c38b437c8217b781))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt16.uint_to_t; Namespace FStar.UInt16
(assert (! 
;; def=FStar.UInt16.fsti(58,34-58,35); use=FStar.UInt16.fsti(58,34-58,35)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_f2a41cd0b7a1b87e64e4bdabfc823091 @x2))
(and (HasTypeFuel @u0
@x1
(FStar.UInt16.t Dummy_value))

;; def=FStar.UInt16.fsti(60,21-60,28); use=FStar.UInt16.fsti(60,21-60,28)
(= (FStar.UInt16.v @x1)
@x2)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_f2a41cd0b7a1b87e64e4bdabfc823091 @x2)))
:qid refinement_interpretation_Tm_refine_f2a41cd0b7a1b87e64e4bdabfc823091))

:named refinement_interpretation_Tm_refine_f2a41cd0b7a1b87e64e4bdabfc823091))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt.uint_t; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(54,22-54,37); use=FStar.UInt.fsti(54,22-54,37)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_f13070840248fced9d9d60d77bdae3ec @x2))
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.UInt.fsti(54,28-54,36)
(Valid 
;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.UInt.fsti(54,28-54,36)
(FStar.UInt.size @x1
@x2)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_f13070840248fced9d9d60d77bdae3ec @x2)))
:qid refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec))

:named refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt16.zero; Namespace FStar.UInt16
(assert (! 
;; def=FStar.UInt16.fsti(78,11-78,23); use=FStar.UInt16.fsti(78,11-78,23)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_954f2f8414e85457d28fe853c92eda2f)
(and (HasTypeFuel @u0
@x1
(FStar.UInt16.t Dummy_value))

;; def=FStar.UInt16.fsti(78,15-78,22); use=FStar.UInt16.fsti(78,15-78,22)
(= (FStar.UInt16.v @x1)
(BoxInt 0))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_954f2f8414e85457d28fe853c92eda2f))
:qid refinement_interpretation_Tm_refine_954f2f8414e85457d28fe853c92eda2f))

:named refinement_interpretation_Tm_refine_954f2f8414e85457d28fe853c92eda2f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt16.add; Namespace FStar.UInt16
(assert (! 
;; def=FStar.UInt16.fsti(88,27-88,28); use=FStar.UInt16.fsti(88,27-88,28)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_6fc1cfeb1ee6b248d1fef572cc963c99 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(FStar.UInt16.t Dummy_value))

;; def=FStar.UInt16.fsti(90,21-90,36); use=FStar.UInt16.fsti(90,21-90,36)
(= (Prims.op_Addition (FStar.UInt16.v @x2)
(FStar.UInt16.v @x3))
(FStar.UInt16.v @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_6fc1cfeb1ee6b248d1fef572cc963c99 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_6fc1cfeb1ee6b248d1fef572cc963c99))

:named refinement_interpretation_Tm_refine_6fc1cfeb1ee6b248d1fef572cc963c99))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt16.div; Namespace FStar.UInt16
(assert (! 
;; def=FStar.UInt16.fsti(168,14-168,29); use=FStar.UInt16.fsti(168,14-168,29)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_3e34e2c4f5ba554ca9d5a94a7452f876)
(and (HasTypeFuel @u0
@x1
(FStar.UInt16.t Dummy_value))

;; def=FStar.UInt16.fsti(168,19-168,27); use=FStar.UInt16.fsti(168,19-168,27)
(not (= (FStar.UInt16.v @x1)
(BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_3e34e2c4f5ba554ca9d5a94a7452f876))
:qid refinement_interpretation_Tm_refine_3e34e2c4f5ba554ca9d5a94a7452f876))

:named refinement_interpretation_Tm_refine_3e34e2c4f5ba554ca9d5a94a7452f876))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt16.one; Namespace FStar.UInt16
(assert (! 
;; def=FStar.UInt16.fsti(80,10-80,22); use=FStar.UInt16.fsti(80,10-80,22)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_2808678106914fa614675fc00e2d12d2)
(and (HasTypeFuel @u0
@x1
(FStar.UInt16.t Dummy_value))

;; def=FStar.UInt16.fsti(80,14-80,21); use=FStar.UInt16.fsti(80,14-80,21)
(= (FStar.UInt16.v @x1)
(BoxInt 1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_2808678106914fa614675fc00e2d12d2))
:qid refinement_interpretation_Tm_refine_2808678106914fa614675fc00e2d12d2))

:named refinement_interpretation_Tm_refine_2808678106914fa614675fc00e2d12d2))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name MiniParse.Spec.Int.bounded_u16; Namespace MiniParse.Spec.Int
(assert (! 
;; def=MiniParse.Spec.Int.fst(46,40-46,67); use=MiniParse.Spec.Int.fst(46,40-46,67)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_122393b221b19344c38b437c8217b781 @x2))
(and (HasTypeFuel @u0
@x1
(FStar.UInt16.t Dummy_value))

;; def=MiniParse.Spec.Int.fst(46,52-46,63); use=MiniParse.Spec.Int.fst(46,52-46,63)
(< (BoxInt_proj_0 (FStar.UInt16.v @x1))
(BoxInt_proj_0 @x2))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_122393b221b19344c38b437c8217b781 @x2)))
:qid refinement_interpretation_Tm_refine_122393b221b19344c38b437c8217b781))

:named refinement_interpretation_Tm_refine_122393b221b19344c38b437c8217b781))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Pair_q (Prims.Pair @x0
@x1
@x2
@x3))
@x1)
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Pair_q))

:named projection_inverse_Prims.Pair_q))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Pair_p (Prims.Pair @x0
@x1
@x2
@x3))
@x0)
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Pair_p))

:named projection_inverse_Prims.Pair_p))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Pair__2 (Prims.Pair @x0
@x1
@x2
@x3))
@x3)
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Pair__2))

:named projection_inverse_Prims.Pair__2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Pair__1 (Prims.Pair @x0
@x1
@x2
@x3))
@x2)
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Pair__1))

:named projection_inverse_Prims.Pair__1))
;;; Fact-ids: Name Prims.op_Equality; Namespace Prims
(assert (! 
;; def=Prims.fst(588,4-588,15); use=Prims.fst(588,4-588,15)
(forall ((@x0 Term) (@x1 Term))
 (! (IsTotFun (ApplyTT (ApplyTT Prims.op_Equality@tok
@x0)
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.op_Equality@tok
@x0)
@x1))
:qid primitive_tot_fun_Prims.op_Equality.2))

:named primitive_tot_fun_Prims.op_Equality.2))
;;; Fact-ids: Name Prims.op_Equality; Namespace Prims
(assert (! 
;; def=Prims.fst(588,4-588,15); use=Prims.fst(588,4-588,15)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Prims.op_Equality@tok
@x0))
 

:pattern ((ApplyTT Prims.op_Equality@tok
@x0))
:qid primitive_tot_fun_Prims.op_Equality.1))

:named primitive_tot_fun_Prims.op_Equality.1))
;;; Fact-ids: Name Prims.op_Equality; Namespace Prims
(assert (! (IsTotFun Prims.op_Equality@tok)
:named primitive_tot_fun_Prims.op_Equality))
;;; Fact-ids: Name Prims.op_GreaterThan; Namespace Prims
(assert (! 
;; def=Prims.fst(570,4-570,18); use=Prims.fst(570,4-570,18)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_GreaterThan @x0
@x1)
(BoxBool (> (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_GreaterThan @x0
@x1))
:qid primitive_Prims.op_GreaterThan))

:named primitive_Prims.op_GreaterThan))
;;; Fact-ids: Name Prims.op_Equality; Namespace Prims
(assert (! 
;; def=Prims.fst(588,4-588,15); use=Prims.fst(588,4-588,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.op_Equality @x0
@x1
@x2)
(BoxBool (= @x1
@x2)))
 

:pattern ((Prims.op_Equality @x0
@x1
@x2))
:qid primitive_Prims.op_Equality))

:named primitive_Prims.op_Equality))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! (is-Tm_arrow (PreType Prims.pair@tok))
:named pre_kinding_Prims.pair@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! (is-Tm_arrow (PreType Prims.equals@tok))
:named pre_kinding_Prims.equals@tok))
;;;;;;;;;;;;;;;;Lemma: FStar.UInt16.vu_inv
;;; Fact-ids: Name FStar.UInt16.vu_inv; Namespace FStar.UInt16
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
(FStar.UInt.uint_t (BoxInt 16)))

;; def=FStar.UInt16.fsti(69,11-69,33); use=FStar.UInt16.fsti(69,11-69,33)
(= (FStar.UInt16.v (FStar.UInt16.uint_to_t @x0))
@x0)
)
 

:pattern ((FStar.UInt16.uint_to_t @x0))
:qid lemma_FStar.UInt16.vu_inv))
:named lemma_FStar.UInt16.vu_inv))
;;;;;;;;;;;;;;;;Lemma: FStar.UInt16.uv_inv
;;; Fact-ids: Name FStar.UInt16.uv_inv; Namespace FStar.UInt16
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
(FStar.UInt16.t Dummy_value))

;; def=FStar.UInt16.fsti(64,11-64,33); use=FStar.UInt16.fsti(64,11-64,33)
(= (FStar.UInt16.uint_to_t (FStar.UInt16.v @x0))
@x0)
)
 

:pattern ((FStar.UInt16.v @x0))
:qid lemma_FStar.UInt16.uv_inv))
:named lemma_FStar.UInt16.uv_inv))
;;;;;;;;;;;;;;;;/\ interpretation
;;; Fact-ids: Name Prims.l_and; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (and (Valid @x0)
(Valid @x1))
(Valid (Prims.l_and @x0
@x1)))
 

:pattern ((Prims.l_and @x0
@x1))
:qid l_and-interp))
:named l_and-interp))
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_aa4ee400e74a2ccb18d62d2f18333628
;;; Fact-ids: Name MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred; Namespace MiniParse.Spec.TEnum
(assert (! 
;; def=MiniParse.Spec.TEnum.fst(150,3-151,21); use=MiniParse.Spec.TEnum.fst(151,8-151,31)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_ghost_arrow_aa4ee400e74a2ccb18d62d2f18333628 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_ghost_arrow_aa4ee400e74a2ccb18d62d2f18333628 @x0
@x1)
Tm_type))
:qid kinding_Tm_ghost_arrow_aa4ee400e74a2ccb18d62d2f18333628))

:named kinding_Tm_ghost_arrow_aa4ee400e74a2ccb18d62d2f18333628))
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_70c09af8b77dc51f7fbdc428d1499189
;;; Fact-ids: Name MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred; Namespace MiniParse.Spec.TEnum
(assert (! 
;; def=MiniParse.Spec.TEnum.fst(150,3-152,33); use=MiniParse.Spec.TEnum.fst(152,8-152,33)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_ghost_arrow_70c09af8b77dc51f7fbdc428d1499189 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_ghost_arrow_70c09af8b77dc51f7fbdc428d1499189 @x0
@x1)
Tm_type))
:qid kinding_Tm_ghost_arrow_70c09af8b77dc51f7fbdc428d1499189))

:named kinding_Tm_ghost_arrow_70c09af8b77dc51f7fbdc428d1499189))
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a
;;; Fact-ids: Name Prims.l_imp; Namespace Prims
(assert (! 
;; def=Prims.fst(204,12-204,26); use=Prims.fst(204,57-204,68)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x0
@x1)
Tm_type))
:qid kinding_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a))

:named kinding_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_ede77d927a36bef34eeac399b95a4c56
;;; Fact-ids: Name MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred; Namespace MiniParse.Spec.TEnum
(assert (! (HasType Tm_arrow_ede77d927a36bef34eeac399b95a4c56
Tm_type)
:named kinding_Tm_arrow_ede77d927a36bef34eeac399b95a4c56))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_e5e2d48cba4ff92685d92d90a0935dbb
;;; Fact-ids: Name MiniParse.Spec.Int.pred_large_bound; Namespace MiniParse.Spec.Int
(assert (! (HasType Tm_arrow_e5e2d48cba4ff92685d92d90a0935dbb
Tm_type)
:named kinding_Tm_arrow_e5e2d48cba4ff92685d92d90a0935dbb))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_7b48bf5c91b1e428e5f3665bb06f2192
;;; Fact-ids: Name MiniParse.Spec.Int.pred_pre; Namespace MiniParse.Spec.Int
(assert (! 
;; def=MiniParse.Spec.Int.fst(72,9-72,40); use=MiniParse.Spec.Int.fst(72,9-72,40)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_7b48bf5c91b1e428e5f3665bb06f2192 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_7b48bf5c91b1e428e5f3665bb06f2192 @x0)
Tm_type))
:qid kinding_Tm_arrow_7b48bf5c91b1e428e5f3665bb06f2192))

:named kinding_Tm_arrow_7b48bf5c91b1e428e5f3665bb06f2192))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_33a928c5bee2efaac834c84182487440
;;; Fact-ids: Name MiniParse.Spec.Int.pred_pre; Namespace MiniParse.Spec.Int
(assert (! (HasType Tm_arrow_33a928c5bee2efaac834c84182487440
Tm_type)
:named kinding_Tm_arrow_33a928c5bee2efaac834c84182487440))
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! (and (IsTotFun Prims.pair@tok)

;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Prims.pair@tok
@x0))
 

:pattern ((ApplyTT Prims.pair@tok
@x0))
:qid kinding_Prims.pair@tok))


;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.pair @x0
@x1)
Tm_type))
 

:pattern ((Prims.pair @x0
@x1))
:qid kinding_Prims.pair@tok.1))
)
:named kinding_Prims.pair@tok))
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! (and (IsTotFun Prims.equals@tok)

;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Prims.equals@tok
@x0))
 

:pattern ((ApplyTT Prims.equals@tok
@x0))
:qid kinding_Prims.equals@tok))


;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@x0 Term) (@x1 Term))
 (! (IsTotFun (ApplyTT (ApplyTT Prims.equals@tok
@x0)
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.equals@tok
@x0)
@x1))
:qid kinding_Prims.equals@tok.1))


;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0)
(HasType @x2
@x0))
(HasType (Prims.equals @x0
@x1
@x2)
Tm_type))
 

:pattern ((Prims.equals @x0
@x1
@x2))
:qid kinding_Prims.equals@tok.2))
)
:named kinding_Prims.equals@tok))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f2a41cd0b7a1b87e64e4bdabfc823091
;;; Fact-ids: Name FStar.UInt16.uint_to_t; Namespace FStar.UInt16
(assert (! 
;; def=FStar.UInt16.fsti(58,34-58,35); use=FStar.UInt16.fsti(58,34-58,35)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_f2a41cd0b7a1b87e64e4bdabfc823091 @x0)))
(Valid (Prims.hasEq (FStar.UInt16.t Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_f2a41cd0b7a1b87e64e4bdabfc823091 @x0))))
:qid haseqTm_refine_f2a41cd0b7a1b87e64e4bdabfc823091))

:named haseqTm_refine_f2a41cd0b7a1b87e64e4bdabfc823091))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f13070840248fced9d9d60d77bdae3ec
;;; Fact-ids: Name FStar.UInt.uint_t; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(54,22-54,37); use=FStar.UInt.fsti(54,22-54,37)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_f13070840248fced9d9d60d77bdae3ec @x0)))
(Valid (Prims.hasEq Prims.int)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_f13070840248fced9d9d60d77bdae3ec @x0))))
:qid haseqTm_refine_f13070840248fced9d9d60d77bdae3ec))

:named haseqTm_refine_f13070840248fced9d9d60d77bdae3ec))
;;;;;;;;;;;;;;;;haseq for Tm_refine_954f2f8414e85457d28fe853c92eda2f
;;; Fact-ids: Name FStar.UInt16.zero; Namespace FStar.UInt16
(assert (! (iff (Valid (Prims.hasEq Tm_refine_954f2f8414e85457d28fe853c92eda2f))
(Valid (Prims.hasEq (FStar.UInt16.t Dummy_value))))
:named haseqTm_refine_954f2f8414e85457d28fe853c92eda2f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_6fc1cfeb1ee6b248d1fef572cc963c99
;;; Fact-ids: Name FStar.UInt16.add; Namespace FStar.UInt16
(assert (! 
;; def=FStar.UInt16.fsti(88,27-88,28); use=FStar.UInt16.fsti(88,27-88,28)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_6fc1cfeb1ee6b248d1fef572cc963c99 @x0
@x1)))
(Valid (Prims.hasEq (FStar.UInt16.t Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_6fc1cfeb1ee6b248d1fef572cc963c99 @x0
@x1))))
:qid haseqTm_refine_6fc1cfeb1ee6b248d1fef572cc963c99))

:named haseqTm_refine_6fc1cfeb1ee6b248d1fef572cc963c99))
;;;;;;;;;;;;;;;;haseq for Tm_refine_3e34e2c4f5ba554ca9d5a94a7452f876
;;; Fact-ids: Name FStar.UInt16.div; Namespace FStar.UInt16
(assert (! (iff (Valid (Prims.hasEq Tm_refine_3e34e2c4f5ba554ca9d5a94a7452f876))
(Valid (Prims.hasEq (FStar.UInt16.t Dummy_value))))
:named haseqTm_refine_3e34e2c4f5ba554ca9d5a94a7452f876))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2808678106914fa614675fc00e2d12d2
;;; Fact-ids: Name FStar.UInt16.one; Namespace FStar.UInt16
(assert (! (iff (Valid (Prims.hasEq Tm_refine_2808678106914fa614675fc00e2d12d2))
(Valid (Prims.hasEq (FStar.UInt16.t Dummy_value))))
:named haseqTm_refine_2808678106914fa614675fc00e2d12d2))
;;;;;;;;;;;;;;;;haseq for Tm_refine_122393b221b19344c38b437c8217b781
;;; Fact-ids: Name MiniParse.Spec.Int.bounded_u16; Namespace MiniParse.Spec.Int
(assert (! 
;; def=MiniParse.Spec.Int.fst(46,40-46,67); use=MiniParse.Spec.Int.fst(46,40-46,67)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_122393b221b19344c38b437c8217b781 @x0)))
(Valid (Prims.hasEq (FStar.UInt16.t Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_122393b221b19344c38b437c8217b781 @x0))))
:qid haseqTm_refine_122393b221b19344c38b437c8217b781))

:named haseqTm_refine_122393b221b19344c38b437c8217b781))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred; Namespace MiniParse.Spec.TEnum
(assert (! 
;; def=MiniParse.Spec.TEnum.fst(148,4-148,41); use=MiniParse.Spec.TEnum.fst(148,4-148,41)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred@tok
Tm_arrow_ede77d927a36bef34eeac399b95a4c56))

;; def=MiniParse.Spec.TEnum.fst(148,4-148,41); use=MiniParse.Spec.TEnum.fst(148,4-148,41)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred@tok
@x1)
@x2)
@x3)
@x4)
@x5)
(MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred @x1
@x2
@x3
@x4
@x5))
 

:pattern ((MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred @x1
@x2
@x3
@x4
@x5))
:qid function_token_typing_MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred.1))
)
 

:pattern ((ApplyTT @x0
MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred@tok))
:qid function_token_typing_MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred))

:named function_token_typing_MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name MiniParse.Spec.Int.pred_pre; Namespace MiniParse.Spec.Int
(assert (! 
;; def=MiniParse.Spec.Int.fst(70,4-70,12); use=MiniParse.Spec.Int.fst(70,4-70,12)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType MiniParse.Spec.Int.pred_pre@tok
Tm_arrow_33a928c5bee2efaac834c84182487440))

;; def=MiniParse.Spec.Int.fst(70,4-70,12); use=MiniParse.Spec.Int.fst(70,4-70,12)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Int.pred_pre@tok
@x1)
@x2)
@x3)
(MiniParse.Spec.Int.pred_pre @x1
@x2
@x3))
 

:pattern ((MiniParse.Spec.Int.pred_pre @x1
@x2
@x3))
:qid function_token_typing_MiniParse.Spec.Int.pred_pre.1))
)
 

:pattern ((ApplyTT @x0
MiniParse.Spec.Int.pred_pre@tok))
:qid function_token_typing_MiniParse.Spec.Int.pred_pre))

:named function_token_typing_MiniParse.Spec.Int.pred_pre))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name MiniParse.Spec.Int.pred_large_bound; Namespace MiniParse.Spec.Int
(assert (! 
;; def=MiniParse.Spec.Int.fst(77,4-77,20); use=MiniParse.Spec.Int.fst(77,4-77,20)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType MiniParse.Spec.Int.pred_large_bound@tok
Tm_arrow_e5e2d48cba4ff92685d92d90a0935dbb))

;; def=MiniParse.Spec.Int.fst(77,4-77,20); use=MiniParse.Spec.Int.fst(77,4-77,20)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.Int.pred_large_bound@tok
@x1)
@x2)
@x3)
(MiniParse.Spec.Int.pred_large_bound @x1
@x2
@x3))
 

:pattern ((MiniParse.Spec.Int.pred_large_bound @x1
@x2
@x3))
:qid function_token_typing_MiniParse.Spec.Int.pred_large_bound.1))
)
 

:pattern ((ApplyTT @x0
MiniParse.Spec.Int.pred_large_bound@tok))
:qid function_token_typing_MiniParse.Spec.Int.pred_large_bound))

:named function_token_typing_MiniParse.Spec.Int.pred_large_bound))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Prims.pair @x2
@x3))
(and (is-Prims.Pair @x1)
(= @x2
(Prims.Pair_p @x1))
(= @x3
(Prims.Pair_q @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(Prims.pair @x2
@x3)))
:qid fuel_guarded_inversion_Prims.pair))

:named fuel_guarded_inversion_Prims.pair))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Prims.equals @x2
@x3
@x4))
(is-Prims.Refl @x1))
 

:pattern ((HasTypeFuel @u0
@x1
(Prims.equals @x2
@x3
@x4)))
:qid fuel_guarded_inversion_Prims.equals))

:named fuel_guarded_inversion_Prims.equals))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! (= 151
(Term_constr_id Prims.pair@tok))
:named fresh_token_Prims.pair@tok))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! (= 135
(Term_constr_id Prims.equals@tok))
:named fresh_token_Prims.equals@tok))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: MiniParse.Spec.Int.forall_bounded_u16
;;; Fact-ids: Name MiniParse.Spec.Int.forall_bounded_u16; Namespace MiniParse.Spec.Int
(assert (! 
;; def=MiniParse.Spec.Int.fst(84,8-84,26); use=MiniParse.Spec.Int.fst(84,8-84,26)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.nat)
(HasType @x2
(Tm_arrow_7b48bf5c91b1e428e5f3665bb06f2192 @x1)))
(= (MiniParse.Spec.Int.forall_bounded_u16.fuel_instrumented (SFuel @u0)
@x1
@x2)
(let ((@lb3 (Prims.op_Equality Prims.int
@x1
(BoxInt 0))))
(ite (= @lb3
(BoxBool true))
Prims.l_True
(let ((@lb4 (Prims.op_GreaterThan @x1
(BoxInt 65536))))
(ite (= @lb4
(BoxBool true))
(MiniParse.Spec.Int.forall_bounded_u16.fuel_instrumented @u0
(Prims.op_Subtraction @x1
(BoxInt 1))
(ApplyTT (ApplyTT MiniParse.Spec.Int.pred_large_bound@tok
@x1)
@x2))
(Prims.l_and (ApplyTT @x2
(FStar.UInt16.uint_to_t (BoxInt 0)))
(MiniParse.Spec.Int.forall_bounded_u16.fuel_instrumented @u0
(Prims.op_Subtraction @x1
(BoxInt 1))
(ApplyTT (ApplyTT MiniParse.Spec.Int.pred_pre@tok
@x1)
@x2)))))))))
 :weight 0


:pattern ((MiniParse.Spec.Int.forall_bounded_u16.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid equation_with_fuel_MiniParse.Spec.Int.forall_bounded_u16.fuel_instrumented))

:named equation_with_fuel_MiniParse.Spec.Int.forall_bounded_u16.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for Prims.l_and
;;; Fact-ids: Name Prims.l_and; Namespace Prims
(assert (! 
;; def=Prims.fst(188,5-188,10); use=Prims.fst(188,5-188,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.l_and @x0
@x1)
(Prims.squash (Prims.pair @x0
@x1)))
 

:pattern ((Prims.l_and @x0
@x1))
:qid equation_Prims.l_and))

:named equation_Prims.l_and))
;;;;;;;;;;;;;;;;Equation for Prims.eq2
;;; Fact-ids: Name Prims.eq2; Namespace Prims
(assert (! 
;; def=Prims.fst(175,5-175,8); use=Prims.fst(175,5-175,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.eq2 @x0
@x1
@x2)
(Prims.squash (Prims.equals @x0
@x1
@x2)))
 

:pattern ((Prims.eq2 @x0
@x1
@x2))
:qid equation_Prims.eq2))

:named equation_Prims.eq2))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred
;;; Fact-ids: Name MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred; Namespace MiniParse.Spec.TEnum
(assert (! 
;; def=MiniParse.Spec.TEnum.fst(148,4-148,41); use=MiniParse.Spec.TEnum.fst(148,4-148,41)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred @x0
@x1
@x2
@x3
@x4)
(Prims.eq2 (MiniParse.Spec.Int.bounded_u16 @x0)
(ApplyTT @x3
(ApplyTT @x2
@x4))
@x4))
 

:pattern ((MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred @x0
@x1
@x2
@x3
@x4))
:qid equation_MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred))

:named equation_MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16'
;;; Fact-ids: Name MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16'; Namespace MiniParse.Spec.TEnum
(assert (! 
;; def=MiniParse.Spec.TEnum.fst(157,4-157,37); use=MiniParse.Spec.TEnum.fst(157,4-157,37)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_ @x0
@x1
@x2
@x3)
(MiniParse.Spec.Int.forall_bounded_u16 @x0
(ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred@tok
@x0)
@x1)
@x2)
@x3)))
 

:pattern ((MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_ @x0
@x1
@x2
@x3))
:qid equation_MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_))

:named equation_MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Int.pred_pre
;;; Fact-ids: Name MiniParse.Spec.Int.pred_pre; Namespace MiniParse.Spec.Int
(assert (! 
;; def=MiniParse.Spec.Int.fst(70,4-70,12); use=MiniParse.Spec.Int.fst(70,4-70,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (MiniParse.Spec.Int.pred_pre @x0
@x1
@x2)
(ApplyTT @x1
(FStar.UInt16.add @x2
(FStar.UInt16.uint_to_t (BoxInt 1)))))
 

:pattern ((MiniParse.Spec.Int.pred_pre @x0
@x1
@x2))
:qid equation_MiniParse.Spec.Int.pred_pre))

:named equation_MiniParse.Spec.Int.pred_pre))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Int.pred_large_bound
;;; Fact-ids: Name MiniParse.Spec.Int.pred_large_bound; Namespace MiniParse.Spec.Int
(assert (! 
;; def=MiniParse.Spec.Int.fst(77,4-77,20); use=MiniParse.Spec.Int.fst(77,4-77,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (MiniParse.Spec.Int.pred_large_bound @x0
@x1
@x2)
(ApplyTT @x1
@x2))
 

:pattern ((MiniParse.Spec.Int.pred_large_bound @x0
@x1
@x2))
:qid equation_MiniParse.Spec.Int.pred_large_bound))

:named equation_MiniParse.Spec.Int.pred_large_bound))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Int.bounded_u16
;;; Fact-ids: Name MiniParse.Spec.Int.bounded_u16; Namespace MiniParse.Spec.Int
(assert (! 
;; def=MiniParse.Spec.Int.fst(46,4-46,15); use=MiniParse.Spec.Int.fst(46,4-46,15)
(forall ((@x0 Term))
 (! (= (MiniParse.Spec.Int.bounded_u16 @x0)
(Tm_refine_122393b221b19344c38b437c8217b781 @x0))
 

:pattern ((MiniParse.Spec.Int.bounded_u16 @x0))
:qid equation_MiniParse.Spec.Int.bounded_u16))

:named equation_MiniParse.Spec.Int.bounded_u16))
;;;;;;;;;;;;;;;;Equation for MiniParse.Spec.Combinators.synth_inverse
;;; Fact-ids: Name MiniParse.Spec.Combinators.synth_inverse; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(568,4-568,17); use=MiniParse.Spec.Combinators.fst(568,4-568,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Valid (MiniParse.Spec.Combinators.synth_inverse @x0
@x1
@x2
@x3))

;; def=MiniParse.Spec.Combinators.fst(574,2-574,36); use=MiniParse.Spec.Combinators.fst(574,2-574,36)
(forall ((@x4 Term))
 (! (implies (HasType @x4
@x1)

;; def=MiniParse.Spec.Combinators.fst(574,21-574,35); use=MiniParse.Spec.Combinators.fst(574,21-574,35)
(= (ApplyTT @x2
(ApplyTT @x3
@x4))
@x4)
)
 
;;no pats
:qid equation_MiniParse.Spec.Combinators.synth_inverse.1))
)
 

:pattern ((MiniParse.Spec.Combinators.synth_inverse @x0
@x1
@x2
@x3))
:qid equation_MiniParse.Spec.Combinators.synth_inverse))

:named equation_MiniParse.Spec.Combinators.synth_inverse))
;;;;;;;;;;;;;;;;Equation for FStar.UInt.uint_t
;;; Fact-ids: Name FStar.UInt.uint_t; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(54,5-54,11); use=FStar.UInt.fsti(54,5-54,11)
(forall ((@x0 Term))
 (! (= (FStar.UInt.uint_t @x0)
(Tm_refine_f13070840248fced9d9d60d77bdae3ec @x0))
 

:pattern ((FStar.UInt.uint_t @x0))
:qid equation_FStar.UInt.uint_t))

:named equation_FStar.UInt.uint_t))
;;;;;;;;;;;;;;;;Eq2 interpretation
;;; Fact-ids: Name Prims.eq2; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (= @x1
@x2)
(Valid (Prims.eq2 @x0
@x1
@x2)))
 

:pattern ((Prims.eq2 @x0
@x1
@x2))
:qid eq2-interp))
:named eq2-interp))
;;;;;;;;;;;;;;;;Prop-typing for MiniParse.Spec.Combinators.synth_inverse
;;; Fact-ids: Name MiniParse.Spec.Combinators.synth_inverse; Namespace MiniParse.Spec.Combinators
(assert (! 
;; def=MiniParse.Spec.Combinators.fst(568,4-568,17); use=MiniParse.Spec.Combinators.fst(568,4-568,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x1
@x0))
(HasType @x3
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x0
@x1)))
(Valid (Prims.subtype_of (MiniParse.Spec.Combinators.synth_inverse @x0
@x1
@x2
@x3)
Prims.unit)))
 

:pattern ((Prims.subtype_of (MiniParse.Spec.Combinators.synth_inverse @x0
@x1
@x2
@x3)
Prims.unit))
:qid defn_equation_MiniParse.Spec.Combinators.synth_inverse))

:named defn_equation_MiniParse.Spec.Combinators.synth_inverse))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,46-165,50); use=Prims.fst(165,46-165,50)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
@x1)
(= @x2
@x3))
(HasTypeFuel @u0
(Prims.Refl @x1
@x2)
(Prims.equals @x1
@x2
@x3)))
 

:pattern ((HasTypeFuel @u0
(Prims.Refl @x1
@x2)
(Prims.equals @x1
@x2
@x3)))
:qid data_typing_intro_Prims.Refl@tok))

:named data_typing_intro_Prims.Refl@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x1)
(HasTypeFuel @u0
@x4
@x2))
(HasTypeFuel @u0
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x1
@x2)))
:qid data_typing_intro_Prims.Pair@tok))

:named data_typing_intro_Prims.Pair@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,46-165,50); use=Prims.fst(165,46-165,50)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Refl @x1
@x2)
(Prims.equals @x3
@x4
@x5))
(and (= @x4
@x5)
(HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x4
@x3)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Refl @x1
@x2)
(Prims.equals @x3
@x4
@x5)))
:qid data_elim_Prims.Refl))

:named data_elim_Prims.Refl))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x5
@x6))
(and (HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x6
Tm_type)
(HasTypeFuel @u0
@x3
@x5)
(HasTypeFuel @u0
@x4
@x6)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x5
@x6)))
:qid data_elim_Prims.Pair))

:named data_elim_Prims.Pair))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= 150
(Term_constr_id (Prims.pair @x0
@x1)))
 

:pattern ((Prims.pair @x0
@x1))
:qid constructor_distinct_Prims.pair))

:named constructor_distinct_Prims.pair))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 134
(Term_constr_id (Prims.equals @x0
@x1
@x2)))
 

:pattern ((Prims.equals @x0
@x1
@x2))
:qid constructor_distinct_Prims.equals))

:named constructor_distinct_Prims.equals))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,46-165,50); use=Prims.fst(165,46-165,50)
(forall ((@x0 Term) (@x1 Term))
 (! (= 141
(Term_constr_id (Prims.Refl @x0
@x1)))
 

:pattern ((Prims.Refl @x0
@x1))
:qid constructor_distinct_Prims.Refl))

:named constructor_distinct_Prims.Refl))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 157
(Term_constr_id (Prims.Pair @x0
@x1
@x2
@x3)))
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid constructor_distinct_Prims.Pair))

:named constructor_distinct_Prims.Pair))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.UInt16.t; Namespace FStar.UInt16
(assert (! 
;; def=FStar.UInt16.fsti(50,8-50,9); use=FStar.UInt16.fsti(50,8-50,9)
(forall ((@u0 Dummy_sort))
 (! (= 101
(Term_constr_id (FStar.UInt16.t @u0)))
 

:pattern ((FStar.UInt16.t @u0))
:qid constructor_distinct_FStar.UInt16.t))

:named constructor_distinct_FStar.UInt16.t))
;;;;;;;;;;;;;;;;Constructor base
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,46-165,50); use=Prims.fst(165,46-165,50)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (is-Prims.Refl (Prims.Refl @x0
@x1))
(= (Prims.Refl @x0
@x1)
Prims.Refl@base))
 

:pattern ((Prims.Refl @x0
@x1))
:qid constructor_base_Prims.Refl))

:named constructor_base_Prims.Refl))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u1
@x0
(Prims.pair @x2
@x3))
(= (Prims.pair @x2
@x3)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(Prims.pair @x2
@x3)))
:qid Prims_pretyping_b7882067459c08225ce8e64864e7b31f))

:named Prims_pretyping_b7882067459c08225ce8e64864e7b31f))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u1
@x0
(Prims.equals @x2
@x3
@x4))
(= (Term_constr_id (Prims.equals @x2
@x3
@x4))
(Term_constr_id (PreType @x0))))
 

:pattern ((HasTypeFuel @u1
@x0
(Prims.equals @x2
@x3
@x4)))
:qid Prims_pretyping_b2d64ca214b8828a9eba2c140aea0816))

:named Prims_pretyping_b2d64ca214b8828a9eba2c140aea0816))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.l_imp; Namespace Prims
(assert (! 
;; def=Prims.fst(204,12-204,26); use=Prims.fst(204,57-204,68)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x2
@x3)))
:qid Prims_pre_typing_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a))

:named Prims_pre_typing_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a
;;; Fact-ids: Name Prims.l_imp; Namespace Prims
(assert (! 
;; def=Prims.fst(204,12-204,26); use=Prims.fst(204,57-204,68)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x1
@x2))

;; def=Prims.fst(204,12-204,26); use=Prims.fst(204,57-204,68)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)
(HasType (ApplyTT @x0
@x3)
@x1))
 

:pattern ((ApplyTT @x0
@x3))
:qid Prims_interpretation_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a.1))
)
 

:pattern ((HasTypeZ @x0
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x1
@x2)))
:qid Prims_interpretation_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a))

:named Prims_interpretation_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred; Namespace MiniParse.Spec.TEnum
(assert (! 
;; def=MiniParse.Spec.TEnum.fst(150,3-151,21); use=MiniParse.Spec.TEnum.fst(151,8-151,31)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_ghost_arrow_aa4ee400e74a2ccb18d62d2f18333628 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_ghost_arrow_aa4ee400e74a2ccb18d62d2f18333628 @x2
@x3)))
:qid MiniParse.Spec.TEnum_pre_typing_Tm_ghost_arrow_aa4ee400e74a2ccb18d62d2f18333628))

:named MiniParse.Spec.TEnum_pre_typing_Tm_ghost_arrow_aa4ee400e74a2ccb18d62d2f18333628))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred; Namespace MiniParse.Spec.TEnum
(assert (! 
;; def=MiniParse.Spec.TEnum.fst(150,3-152,33); use=MiniParse.Spec.TEnum.fst(152,8-152,33)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_ghost_arrow_70c09af8b77dc51f7fbdc428d1499189 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_ghost_arrow_70c09af8b77dc51f7fbdc428d1499189 @x2
@x3)))
:qid MiniParse.Spec.TEnum_pre_typing_Tm_ghost_arrow_70c09af8b77dc51f7fbdc428d1499189))

:named MiniParse.Spec.TEnum_pre_typing_Tm_ghost_arrow_70c09af8b77dc51f7fbdc428d1499189))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred; Namespace MiniParse.Spec.TEnum
(assert (! 
;; def=MiniParse.Spec.TEnum.fst(149,6-154,12); use=MiniParse.Spec.TEnum.fst(149,6-154,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_ede77d927a36bef34eeac399b95a4c56)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_ede77d927a36bef34eeac399b95a4c56))
:qid MiniParse.Spec.TEnum_pre_typing_Tm_arrow_ede77d927a36bef34eeac399b95a4c56))

:named MiniParse.Spec.TEnum_pre_typing_Tm_arrow_ede77d927a36bef34eeac399b95a4c56))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_aa4ee400e74a2ccb18d62d2f18333628
;;; Fact-ids: Name MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred; Namespace MiniParse.Spec.TEnum
(assert (! 
;; def=MiniParse.Spec.TEnum.fst(150,3-151,21); use=MiniParse.Spec.TEnum.fst(151,8-151,31)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_ghost_arrow_aa4ee400e74a2ccb18d62d2f18333628 @x1
@x2))

;; def=MiniParse.Spec.TEnum.fst(150,3-151,21); use=MiniParse.Spec.TEnum.fst(151,8-151,31)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(MiniParse.Spec.Int.bounded_u16 @x2))
(HasType (ApplyTT @x0
@x3)
@x1))
 

:pattern ((ApplyTT @x0
@x3))
:qid MiniParse.Spec.TEnum_interpretation_Tm_ghost_arrow_aa4ee400e74a2ccb18d62d2f18333628.1))
)
 

:pattern ((HasTypeZ @x0
(Tm_ghost_arrow_aa4ee400e74a2ccb18d62d2f18333628 @x1
@x2)))
:qid MiniParse.Spec.TEnum_interpretation_Tm_ghost_arrow_aa4ee400e74a2ccb18d62d2f18333628))

:named MiniParse.Spec.TEnum_interpretation_Tm_ghost_arrow_aa4ee400e74a2ccb18d62d2f18333628))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_70c09af8b77dc51f7fbdc428d1499189
;;; Fact-ids: Name MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred; Namespace MiniParse.Spec.TEnum
(assert (! 
;; def=MiniParse.Spec.TEnum.fst(150,3-152,33); use=MiniParse.Spec.TEnum.fst(152,8-152,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_ghost_arrow_70c09af8b77dc51f7fbdc428d1499189 @x1
@x2))

;; def=MiniParse.Spec.TEnum.fst(150,3-152,33); use=MiniParse.Spec.TEnum.fst(152,8-152,33)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)
(HasType (ApplyTT @x0
@x3)
(MiniParse.Spec.Int.bounded_u16 @x1)))
 

:pattern ((ApplyTT @x0
@x3))
:qid MiniParse.Spec.TEnum_interpretation_Tm_ghost_arrow_70c09af8b77dc51f7fbdc428d1499189.1))
)
 

:pattern ((HasTypeZ @x0
(Tm_ghost_arrow_70c09af8b77dc51f7fbdc428d1499189 @x1
@x2)))
:qid MiniParse.Spec.TEnum_interpretation_Tm_ghost_arrow_70c09af8b77dc51f7fbdc428d1499189))

:named MiniParse.Spec.TEnum_interpretation_Tm_ghost_arrow_70c09af8b77dc51f7fbdc428d1499189))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_ede77d927a36bef34eeac399b95a4c56
;;; Fact-ids: Name MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred; Namespace MiniParse.Spec.TEnum
(assert (! 
;; def=MiniParse.Spec.TEnum.fst(149,6-154,12); use=MiniParse.Spec.TEnum.fst(149,6-154,12)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_ede77d927a36bef34eeac399b95a4c56)
(and 
;; def=MiniParse.Spec.TEnum.fst(149,6-154,12); use=MiniParse.Spec.TEnum.fst(149,6-154,12)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x1
Prims.nat)
(HasType @x2
Tm_type)
(HasType @x3
(Tm_ghost_arrow_aa4ee400e74a2ccb18d62d2f18333628 @x2
@x1))
(HasType @x4
(Tm_ghost_arrow_70c09af8b77dc51f7fbdc428d1499189 @x1
@x2))
(HasType @x5
(MiniParse.Spec.Int.bounded_u16 @x1)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5))
:qid MiniParse.Spec.TEnum_interpretation_Tm_arrow_ede77d927a36bef34eeac399b95a4c56.1))

(IsTotFun @x0)

;; def=MiniParse.Spec.TEnum.fst(149,6-154,12); use=MiniParse.Spec.TEnum.fst(149,6-154,12)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.nat)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid MiniParse.Spec.TEnum_interpretation_Tm_arrow_ede77d927a36bef34eeac399b95a4c56.2))


;; def=MiniParse.Spec.TEnum.fst(149,6-154,12); use=MiniParse.Spec.TEnum.fst(149,6-154,12)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.nat)
(HasType @x2
Tm_type))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid MiniParse.Spec.TEnum_interpretation_Tm_arrow_ede77d927a36bef34eeac399b95a4c56.3))


;; def=MiniParse.Spec.TEnum.fst(149,6-154,12); use=MiniParse.Spec.TEnum.fst(149,6-154,12)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Prims.nat)
(HasType @x2
Tm_type)
(HasType @x3
(Tm_ghost_arrow_aa4ee400e74a2ccb18d62d2f18333628 @x2
@x1)))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid MiniParse.Spec.TEnum_interpretation_Tm_arrow_ede77d927a36bef34eeac399b95a4c56.4))


;; def=MiniParse.Spec.TEnum.fst(149,6-154,12); use=MiniParse.Spec.TEnum.fst(149,6-154,12)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Prims.nat)
(HasType @x2
Tm_type)
(HasType @x3
(Tm_ghost_arrow_aa4ee400e74a2ccb18d62d2f18333628 @x2
@x1))
(HasType @x4
(Tm_ghost_arrow_70c09af8b77dc51f7fbdc428d1499189 @x1
@x2)))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid MiniParse.Spec.TEnum_interpretation_Tm_arrow_ede77d927a36bef34eeac399b95a4c56.5))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_ede77d927a36bef34eeac399b95a4c56))
:qid MiniParse.Spec.TEnum_interpretation_Tm_arrow_ede77d927a36bef34eeac399b95a4c56))

:named MiniParse.Spec.TEnum_interpretation_Tm_arrow_ede77d927a36bef34eeac399b95a4c56))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name MiniParse.Spec.Int.pred_large_bound; Namespace MiniParse.Spec.Int
(assert (! 
;; def=MiniParse.Spec.Int.fst(78,2-81,12); use=MiniParse.Spec.Int.fst(78,2-81,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_e5e2d48cba4ff92685d92d90a0935dbb)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_e5e2d48cba4ff92685d92d90a0935dbb))
:qid MiniParse.Spec.Int_pre_typing_Tm_arrow_e5e2d48cba4ff92685d92d90a0935dbb))

:named MiniParse.Spec.Int_pre_typing_Tm_arrow_e5e2d48cba4ff92685d92d90a0935dbb))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name MiniParse.Spec.Int.pred_pre; Namespace MiniParse.Spec.Int
(assert (! 
;; def=MiniParse.Spec.Int.fst(72,9-72,40); use=MiniParse.Spec.Int.fst(72,9-72,40)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_7b48bf5c91b1e428e5f3665bb06f2192 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_7b48bf5c91b1e428e5f3665bb06f2192 @x2)))
:qid MiniParse.Spec.Int_pre_typing_Tm_arrow_7b48bf5c91b1e428e5f3665bb06f2192))

:named MiniParse.Spec.Int_pre_typing_Tm_arrow_7b48bf5c91b1e428e5f3665bb06f2192))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name MiniParse.Spec.Int.pred_pre; Namespace MiniParse.Spec.Int
(assert (! 
;; def=MiniParse.Spec.Int.fst(71,2-74,12); use=MiniParse.Spec.Int.fst(71,2-74,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_33a928c5bee2efaac834c84182487440)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_33a928c5bee2efaac834c84182487440))
:qid MiniParse.Spec.Int_pre_typing_Tm_arrow_33a928c5bee2efaac834c84182487440))

:named MiniParse.Spec.Int_pre_typing_Tm_arrow_33a928c5bee2efaac834c84182487440))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_e5e2d48cba4ff92685d92d90a0935dbb
;;; Fact-ids: Name MiniParse.Spec.Int.pred_large_bound; Namespace MiniParse.Spec.Int
(assert (! 
;; def=MiniParse.Spec.Int.fst(78,2-81,12); use=MiniParse.Spec.Int.fst(78,2-81,12)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_e5e2d48cba4ff92685d92d90a0935dbb)
(and 
;; def=MiniParse.Spec.Int.fst(78,2-81,12); use=MiniParse.Spec.Int.fst(78,2-81,12)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_refine_ed1ec337958d4240fdc3197cba495263)
(HasType @x2
(Tm_arrow_7b48bf5c91b1e428e5f3665bb06f2192 @x1))
(HasType @x3
(MiniParse.Spec.Int.bounded_u16 (Prims.op_Subtraction @x1
(BoxInt 1)))))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid MiniParse.Spec.Int_interpretation_Tm_arrow_e5e2d48cba4ff92685d92d90a0935dbb.1))

(IsTotFun @x0)

;; def=MiniParse.Spec.Int.fst(78,2-81,12); use=MiniParse.Spec.Int.fst(78,2-81,12)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Tm_refine_ed1ec337958d4240fdc3197cba495263)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid MiniParse.Spec.Int_interpretation_Tm_arrow_e5e2d48cba4ff92685d92d90a0935dbb.2))


;; def=MiniParse.Spec.Int.fst(78,2-81,12); use=MiniParse.Spec.Int.fst(78,2-81,12)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_refine_ed1ec337958d4240fdc3197cba495263)
(HasType @x2
(Tm_arrow_7b48bf5c91b1e428e5f3665bb06f2192 @x1)))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid MiniParse.Spec.Int_interpretation_Tm_arrow_e5e2d48cba4ff92685d92d90a0935dbb.3))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_e5e2d48cba4ff92685d92d90a0935dbb))
:qid MiniParse.Spec.Int_interpretation_Tm_arrow_e5e2d48cba4ff92685d92d90a0935dbb))

:named MiniParse.Spec.Int_interpretation_Tm_arrow_e5e2d48cba4ff92685d92d90a0935dbb))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_7b48bf5c91b1e428e5f3665bb06f2192
;;; Fact-ids: Name MiniParse.Spec.Int.pred_pre; Namespace MiniParse.Spec.Int
(assert (! 
;; def=MiniParse.Spec.Int.fst(72,9-72,40); use=MiniParse.Spec.Int.fst(72,9-72,40)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_7b48bf5c91b1e428e5f3665bb06f2192 @x1))
(and 
;; def=MiniParse.Spec.Int.fst(72,9-72,40); use=MiniParse.Spec.Int.fst(72,9-72,40)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(MiniParse.Spec.Int.bounded_u16 @x1))
(HasType (ApplyTT @x0
@x2)
Tm_type))
 

:pattern ((ApplyTT @x0
@x2))
:qid MiniParse.Spec.Int_interpretation_Tm_arrow_7b48bf5c91b1e428e5f3665bb06f2192.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_7b48bf5c91b1e428e5f3665bb06f2192 @x1)))
:qid MiniParse.Spec.Int_interpretation_Tm_arrow_7b48bf5c91b1e428e5f3665bb06f2192))

:named MiniParse.Spec.Int_interpretation_Tm_arrow_7b48bf5c91b1e428e5f3665bb06f2192))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_33a928c5bee2efaac834c84182487440
;;; Fact-ids: Name MiniParse.Spec.Int.pred_pre; Namespace MiniParse.Spec.Int
(assert (! 
;; def=MiniParse.Spec.Int.fst(71,2-74,12); use=MiniParse.Spec.Int.fst(71,2-74,12)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_33a928c5bee2efaac834c84182487440)
(and 
;; def=MiniParse.Spec.Int.fst(71,2-74,12); use=MiniParse.Spec.Int.fst(71,2-74,12)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_refine_35fb8759ee35d7bf7cf3df6dd7bf565c)
(HasType @x2
(Tm_arrow_7b48bf5c91b1e428e5f3665bb06f2192 @x1))
(HasType @x3
(MiniParse.Spec.Int.bounded_u16 (Prims.op_Subtraction @x1
(BoxInt 1)))))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid MiniParse.Spec.Int_interpretation_Tm_arrow_33a928c5bee2efaac834c84182487440.1))

(IsTotFun @x0)

;; def=MiniParse.Spec.Int.fst(71,2-74,12); use=MiniParse.Spec.Int.fst(71,2-74,12)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Tm_refine_35fb8759ee35d7bf7cf3df6dd7bf565c)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid MiniParse.Spec.Int_interpretation_Tm_arrow_33a928c5bee2efaac834c84182487440.2))


;; def=MiniParse.Spec.Int.fst(71,2-74,12); use=MiniParse.Spec.Int.fst(71,2-74,12)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_refine_35fb8759ee35d7bf7cf3df6dd7bf565c)
(HasType @x2
(Tm_arrow_7b48bf5c91b1e428e5f3665bb06f2192 @x1)))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid MiniParse.Spec.Int_interpretation_Tm_arrow_33a928c5bee2efaac834c84182487440.3))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_33a928c5bee2efaac834c84182487440))
:qid MiniParse.Spec.Int_interpretation_Tm_arrow_33a928c5bee2efaac834c84182487440))

:named MiniParse.Spec.Int_interpretation_Tm_arrow_33a928c5bee2efaac834c84182487440))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.UInt16.t; Namespace FStar.UInt16
(assert (! 
;; def=FStar.UInt16.fsti(50,8-50,9); use=FStar.UInt16.fsti(50,8-50,9)
(forall ((@x0 Term) (@u1 Fuel) (@u2 Dummy_sort))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.UInt16.t @u2))
(= (FStar.UInt16.t @u2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.UInt16.t @u2)))
:qid FStar.UInt16_pretyping_a374e0041a556ce7cd8f23e40af799b0))

:named FStar.UInt16_pretyping_a374e0041a556ce7cd8f23e40af799b0))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name MiniParse.Spec.Int.forall_bounded_u16; Namespace MiniParse.Spec.Int
(assert (! (Valid (ApplyTT __uu__PartialApp
MiniParse.Spec.Int.pred_large_bound@tok))
:named @kick_partial_app_f136d5415b73e471c06d1aeab1960243))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16'; Namespace MiniParse.Spec.TEnum
(assert (! (Valid (ApplyTT __uu__PartialApp
MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred@tok))
:named @kick_partial_app_be327e57484e2556feb4a37a364b0e1b))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name MiniParse.Spec.Int.bounded_u16_eq; Namespace MiniParse.Spec.Int
(assert (! (Valid (ApplyTT __uu__PartialApp
Prims.op_Equality@tok))
:named @kick_partial_app_b473763fdfbbd0eb29a77f290b3d7a4d))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name MiniParse.Spec.Int.forall_bounded_u16; Namespace MiniParse.Spec.Int
(assert (! (Valid (ApplyTT __uu__PartialApp
MiniParse.Spec.Int.pred_pre@tok))
:named @kick_partial_app_9b5c011be0dccae076f4b64911adbbff))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name MiniParse.Spec.Int.forall_bounded_u16; Namespace MiniParse.Spec.Int
(assert (! 
;; def=MiniParse.Spec.Int.fst(84,8-84,26); use=MiniParse.Spec.Int.fst(84,8-84,26)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (MiniParse.Spec.Int.forall_bounded_u16.fuel_instrumented (SFuel @u0)
@x1
@x2)
(MiniParse.Spec.Int.forall_bounded_u16.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((MiniParse.Spec.Int.forall_bounded_u16.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_MiniParse.Spec.Int.forall_bounded_u16.fuel_instrumented))

:named @fuel_irrelevance_MiniParse.Spec.Int.forall_bounded_u16.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name MiniParse.Spec.Int.forall_bounded_u16; Namespace MiniParse.Spec.Int
(assert (! 
;; def=MiniParse.Spec.Int.fst(84,8-84,26); use=MiniParse.Spec.Int.fst(84,8-84,26)
(forall ((@x0 Term) (@x1 Term))
 (! (= (MiniParse.Spec.Int.forall_bounded_u16 @x0
@x1)
(MiniParse.Spec.Int.forall_bounded_u16.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((MiniParse.Spec.Int.forall_bounded_u16 @x0
@x1))
:qid @fuel_correspondence_MiniParse.Spec.Int.forall_bounded_u16.fuel_instrumented))

:named @fuel_correspondence_MiniParse.Spec.Int.forall_bounded_u16.fuel_instrumented))
(push) ;; push{2

; Starting query at MiniParse.Spec.TEnum.fst(174,2-174,128)

(declare-fun label_1 () Bool)




; Encoding query formula : forall (b: Prims.nat)
;   (t: Type)
;   (f1: (_: MiniParse.Spec.Int.bounded_u16 b -> Prims.GTot t))
;   (f2: (_: t -> Prims.GTot (MiniParse.Spec.Int.bounded_u16 b)))
;   (u609: Prims.squash (MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16' b t f1 f2)).
;   (*  - Could not prove post-condition
; *)
;   forall (pure_result: Prims.unit).
;     (forall (x: MiniParse.Spec.Int.bounded_u16 b).
;         MiniParse.Spec.Int.forall_bounded_u16 b
;           (MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred b t f1 f2) ==>
;         MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred b t f1 f2 x) ==>
;     Prims.auto_squash (MiniParse.Spec.Combinators.synth_inverse f2 f1)


; Context: While encoding a query
; While typechecking the top-level declaration `let synth_inverse_forall_bounded_u16_intro`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Tm_type)
(HasType @x2
(Tm_ghost_arrow_aa4ee400e74a2ccb18d62d2f18333628 @x1
@x0))
(HasType @x3
(Tm_ghost_arrow_70c09af8b77dc51f7fbdc428d1499189 @x0
@x1))
(HasType @x4
(Prims.squash (MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_ @x0
@x1
@x2
@x3))))

;; def=Prims.fst(441,36-441,97); use=MiniParse.Spec.TEnum.fst(174,12-174,24)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)

;; def=FStar.Classical.fsti(241,12-241,32); use=MiniParse.Spec.TEnum.fst(174,12-174,24)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(MiniParse.Spec.Int.bounded_u16 @x0))

;; def=MiniParse.Spec.Int.fst(101,12-101,43); use=MiniParse.Spec.TEnum.fst(174,12-174,24)
(Valid 
;; def=MiniParse.Spec.Int.fst(101,12-101,43); use=MiniParse.Spec.TEnum.fst(174,12-174,24)
(MiniParse.Spec.Int.forall_bounded_u16 @x0
(ApplyTT (ApplyTT (ApplyTT (ApplyTT MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred@tok
@x0)
@x1)
@x2)
@x3))
)
)

;; def=FStar.Classical.fsti(83,21-83,24); use=MiniParse.Spec.TEnum.fst(174,12-174,24)
(Valid 
;; def=FStar.Classical.fsti(83,21-83,24); use=MiniParse.Spec.TEnum.fst(174,12-174,24)
(MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred @x0
@x1
@x2
@x3
@x6)
)
)
 
;;no pats
:qid @query.2))
)

;; def=MiniParse.Spec.TEnum.fst(171,14-171,35); use=MiniParse.Spec.TEnum.fst(174,2-174,128)
(or label_1

;; def=MiniParse.Spec.TEnum.fst(171,14-171,35); use=MiniParse.Spec.TEnum.fst(174,2-174,128)
(Valid 
;; def=MiniParse.Spec.TEnum.fst(171,14-171,35); use=MiniParse.Spec.TEnum.fst(174,2-174,128)
(MiniParse.Spec.Combinators.synth_inverse @x1
(MiniParse.Spec.Int.bounded_u16 @x0)
@x3
@x2)
)
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_intro, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, eq2-interp, equation_MiniParse.Spec.Combinators.synth_inverse, equation_MiniParse.Spec.Int.bounded_u16, equation_MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_, equation_MiniParse.Spec.TEnum.synth_inverse_forall_bounded_u16_pred, equation_Prims.nat, equation_Prims.squash, int_inversion, refinement_interpretation_Tm_refine_2de20c066034c13bf76e9c0b94f4806c, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2
