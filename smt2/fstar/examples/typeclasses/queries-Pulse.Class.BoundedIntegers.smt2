
; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(set-option :global-decls false)
(set-option :smt.mbqi false)
(set-option :auto_config false)
(set-option :produce-unsat-cores true)
(set-option :model true)
(set-option :smt.case_split 3)
(set-option :smt.relevancy 2)
(set-option :smt.arith.solver 2)


(declare-sort FString)
(declare-fun FString_constr_id (FString) Int)

(declare-sort Term)
(declare-fun Term_constr_id (Term) Int)
(declare-sort Dummy_sort)
(declare-fun Dummy_value () Dummy_sort)
(declare-datatypes () ((Fuel 
(ZFuel) 
(SFuel (prec Fuel)))))
(declare-fun MaxIFuel () Fuel)
(declare-fun MaxFuel () Fuel)
(declare-fun PreType (Term) Term)
(declare-fun Valid (Term) Bool)
(declare-fun HasTypeFuel (Fuel Term Term) Bool)
(define-fun HasTypeZ ((x Term) (t Term)) Bool
(HasTypeFuel ZFuel x t))
(define-fun HasType ((x Term) (t Term)) Bool
(HasTypeFuel MaxIFuel x t))
(declare-fun IsTotFun (Term) Bool)

                ;;fuel irrelevance
(assert (forall ((f Fuel) (x Term) (t Term))
(! (= (HasTypeFuel (SFuel f) x t)
(HasTypeZ x t))
:pattern ((HasTypeFuel (SFuel f) x t)))))
(declare-fun NoHoist (Term Bool) Bool)
;;no-hoist
(assert (forall ((dummy Term) (b Bool))
(! (= (NoHoist dummy b)
b)
:pattern ((NoHoist dummy b)))))
(define-fun  IsTyped ((x Term)) Bool
(exists ((t Term)) (HasTypeZ x t)))
(declare-fun ApplyTF (Term Fuel) Term)
(declare-fun ApplyTT (Term Term) Term)
(declare-fun Prec (Term Term) Bool)
(assert (forall ((x Term) (y Term) (z Term))
(! (implies (and (Prec x y) (Prec y z))
(Prec x z))
                                   :pattern ((Prec x z) (Prec x y)))))
(assert (forall ((x Term) (y Term))
(implies (Prec x y)
(not (Prec y x)))))
(declare-fun Closure (Term) Term)
(declare-fun ConsTerm (Term Term) Term)
(declare-fun ConsFuel (Fuel Term) Term)
(declare-fun Tm_uvar (Int) Term)
(define-fun Reify ((x Term)) Term x)
(declare-fun Prims.precedes (Term Term Term Term) Term)
(declare-fun Range_const (Int) Term)
(declare-fun _mul (Int Int) Int)
(declare-fun _div (Int Int) Int)
(declare-fun _mod (Int Int) Int)
(declare-fun __uu__PartialApp () Term)
(assert (forall ((x Int) (y Int)) (! (= (_mul x y) (* x y)) :pattern ((_mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (_div x y) (div x y)) :pattern ((_div x y)))))
(assert (forall ((x Int) (y Int)) (! (= (_mod x y) (mod x y)) :pattern ((_mod x y)))))
(declare-fun _rmul (Real Real) Real)
(declare-fun _rdiv (Real Real) Real)
(assert (forall ((x Real) (y Real)) (! (= (_rmul x y) (* x y)) :pattern ((_rmul x y)))))
(assert (forall ((x Real) (y Real)) (! (= (_rdiv x y) (/ x y)) :pattern ((_rdiv x y)))))
(define-fun Unreachable () Bool false)
; <start constructor FString_const>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FString_const (Int) FString)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 0
(FString_constr_id (FString_const @u0)))
 

:pattern ((FString_const @u0))
:qid constructor_distinct_FString_const))
:named constructor_distinct_FString_const))
;;;;;;;;;;;;;;;;Projector
(declare-fun FString_const_proj_0 (FString) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (FString_const_proj_0 (FString_const @u0))
@u0)
 

:pattern ((FString_const @u0))
:qid projection_inverse_FString_const_proj_0))
:named projection_inverse_FString_const_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FString_const ((__@u0 FString)) Bool
 (and (= (FString_constr_id __@u0)
0)
(= __@u0
(FString_const (FString_const_proj_0 __@u0)))))

; </end constructor FString_const>


; <start constructor Tm_type>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_type () Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (= 2
(Term_constr_id Tm_type))
:named constructor_distinct_Tm_type))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_type ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
2)
(= __@x0
Tm_type)))

; </end constructor Tm_type>


; <start constructor Tm_arrow>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_arrow (Int) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 3
(Term_constr_id (Tm_arrow @u0)))
 

:pattern ((Tm_arrow @u0))
:qid constructor_distinct_Tm_arrow))
:named constructor_distinct_Tm_arrow))
;;;;;;;;;;;;;;;;Projector
(declare-fun Tm_arrow_id (Term) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (Tm_arrow_id (Tm_arrow @u0))
@u0)
 

:pattern ((Tm_arrow @u0))
:qid projection_inverse_Tm_arrow_id))
:named projection_inverse_Tm_arrow_id))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_arrow ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
3)
(= __@x0
(Tm_arrow (Tm_arrow_id __@x0)))))

; </end constructor Tm_arrow>


; <start constructor Tm_unit>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_unit () Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (= 6
(Term_constr_id Tm_unit))
:named constructor_distinct_Tm_unit))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_unit ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
6)
(= __@x0
Tm_unit)))

; </end constructor Tm_unit>


; <start constructor BoxInt>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxInt (Int) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 7
(Term_constr_id (BoxInt @u0)))
 

:pattern ((BoxInt @u0))
:qid constructor_distinct_BoxInt))
:named constructor_distinct_BoxInt))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxInt_proj_0 (Term) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (BoxInt_proj_0 (BoxInt @u0))
@u0)
 

:pattern ((BoxInt @u0))
:qid projection_inverse_BoxInt_proj_0))
:named projection_inverse_BoxInt_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxInt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
7)
(= __@x0
(BoxInt (BoxInt_proj_0 __@x0)))))

; </end constructor BoxInt>


; <start constructor BoxBool>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxBool (Bool) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Bool))
 (! (= 8
(Term_constr_id (BoxBool @u0)))
 

:pattern ((BoxBool @u0))
:qid constructor_distinct_BoxBool))
:named constructor_distinct_BoxBool))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxBool_proj_0 (Term) Bool)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Bool))
 (! (= (BoxBool_proj_0 (BoxBool @u0))
@u0)
 

:pattern ((BoxBool @u0))
:qid projection_inverse_BoxBool_proj_0))
:named projection_inverse_BoxBool_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxBool ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
8)
(= __@x0
(BoxBool (BoxBool_proj_0 __@x0)))))

; </end constructor BoxBool>


; <start constructor BoxString>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxString (FString) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 FString))
 (! (= 9
(Term_constr_id (BoxString @u0)))
 

:pattern ((BoxString @u0))
:qid constructor_distinct_BoxString))
:named constructor_distinct_BoxString))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxString_proj_0 (Term) FString)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 FString))
 (! (= (BoxString_proj_0 (BoxString @u0))
@u0)
 

:pattern ((BoxString @u0))
:qid projection_inverse_BoxString_proj_0))
:named projection_inverse_BoxString_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxString ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
9)
(= __@x0
(BoxString (BoxString_proj_0 __@x0)))))

; </end constructor BoxString>


; <start constructor BoxReal>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxReal (Real) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Real))
 (! (= 10
(Term_constr_id (BoxReal @u0)))
 

:pattern ((BoxReal @u0))
:qid constructor_distinct_BoxReal))
:named constructor_distinct_BoxReal))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxReal_proj_0 (Term) Real)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Real))
 (! (= (BoxReal_proj_0 (BoxReal @u0))
@u0)
 

:pattern ((BoxReal @u0))
:qid projection_inverse_BoxReal_proj_0))
:named projection_inverse_BoxReal_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxReal ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
10)
(= __@x0
(BoxReal (BoxReal_proj_0 __@x0)))))

; </end constructor BoxReal>

(declare-fun Prims.precedes@tok () Term)
(assert
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
(! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.precedes@tok
@x0)
@x1)
@x2)
@x3)
(Prims.precedes @x0 @x1 @x2 @x3))

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.precedes@tok
@x0)
@x1)
@x2)
@x3)))))

(declare-fun Prims.lex_t () Term)
(assert (forall ((t1 Term) (t2 Term) (e1 Term) (e2 Term))
(! (iff (Valid (Prims.precedes t1 t2 e1 e2))
(Valid (Prims.precedes Prims.lex_t Prims.lex_t e1 e2)))
:pattern (Prims.precedes t1 t2 e1 e2))))
(assert (forall ((t1 Term) (t2 Term))
(! (iff (Valid (Prims.precedes Prims.lex_t Prims.lex_t t1 t2)) 
(Prec t1 t2))
:pattern ((Prims.precedes Prims.lex_t Prims.lex_t t1 t2)))))
(assert (forall ((e Term) (t Term))
(! (implies (HasType e t)
(Valid t))
:pattern ((HasType e t)
(Valid t))
:qid __prelude_valid_intro)))


; Externals for module Prims


; <Start encoding val Prims.attribute>

(declare-fun Prims.attribute () Term)

; </end encoding val Prims.attribute>


; <Start encoding val Prims.cps>

(declare-fun Prims.cps () Term)

; </end encoding val Prims.cps>


; <Start encoding val Prims.tac_opaque>

(declare-fun Prims.tac_opaque () Term)

; </end encoding val Prims.tac_opaque>


; <Start encoding val Prims.unrefine>

(declare-fun Prims.unrefine () Term)

; </end encoding val Prims.unrefine>


; <Start encoding val Prims.do_not_unrefine>

(declare-fun Prims.do_not_unrefine () Term)

; </end encoding val Prims.do_not_unrefine>


; <Start encoding val Prims.hasEq>

(declare-fun Prims.hasEq (Term) Term)
(declare-fun Tm_arrow_ef9cb512a25ee351fa5536d617490497 () Term)
(declare-fun Prims.hasEq@tok () Term)

; </end encoding val Prims.hasEq>


; <Start encoding let eqtype>

(declare-fun Prims.eqtype () Term)
(declare-fun Tm_refine_414d0a9f578ab0048252f8c8f552b99f () Term)

; </end encoding let eqtype>


; <Start encoding val Prims.bool>

(declare-fun Prims.bool () Term)

; </end encoding val Prims.bool>


; <Start encoding type Prims.empty>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.empty () Term)

; <start constructor Prims.empty>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.empty ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
111)
(= __@x0
Prims.empty)))

; </end constructor Prims.empty>


; </end encoding type Prims.empty>


; <Start encoding type Prims.trivial>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.trivial () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.T () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.T
(declare-fun Prims.T@tok () Term)

; <start constructor Prims.trivial>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.trivial ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
116)
(= __@x0
Prims.trivial)))

; </end constructor Prims.trivial>


; <start constructor Prims.T>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.T ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
122)
(= __@x0
Prims.T)))

; </end constructor Prims.T>


; </end encoding type Prims.trivial>


; <Start encoding val Prims.uu___is_T>

(declare-fun Prims.uu___is_T (Term) Term)
(declare-fun Tm_arrow_053f01f066524059a49c5dc621e6494a () Term)
(declare-fun Prims.uu___is_T@tok () Term)

; </end encoding val Prims.uu___is_T>


; <Start encoding val Prims.unit>

(declare-fun Prims.unit () Term)

; </end encoding val Prims.unit>


; <Start encoding let squash>

(declare-fun Prims.squash (Term) Term)

(declare-fun Prims.squash@tok () Term)
(declare-fun Tm_refine_2de20c066034c13bf76e9c0b94f4806c (Term) Term)

; </end encoding let squash>


; <Start encoding let auto_squash>

(declare-fun Prims.auto_squash (Term) Term)

(declare-fun Prims.auto_squash@tok () Term)

; </end encoding let auto_squash>


; <Start encoding let logical>

(declare-fun Prims.logical () Term)

; </end encoding let logical>


; <Start encoding val Prims.smt_theory_symbol>

(declare-fun Prims.smt_theory_symbol () Term)

; </end encoding val Prims.smt_theory_symbol>


; <Start encoding let l_True>

(declare-fun Prims.l_True () Term)

; </end encoding let l_True>


; <Start encoding let l_False>

(declare-fun Prims.l_False () Term)

; </end encoding let l_False>


; <Start encoding type Prims.equals>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.equals (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.equals@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Refl (Term Term) Term)
;;;;;;;;;;;;;;;;Constructor base
(declare-fun Prims.Refl@base () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Refl
(declare-fun Prims.Refl@tok () Term)
(declare-fun Tm_arrow_8e00c6263684633abbc1d1a87608e391 () Term)

; <start constructor Prims.equals>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.equals ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
134)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(Prims.equals @x0
@x1
@x2))
 
;;no pats
:qid is-Prims.equals))))

; </end constructor Prims.equals>


; <start constructor Prims.Refl>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Refl ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
141)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.Refl @x0
@x1))
 
;;no pats
:qid is-Prims.Refl))))

; </end constructor Prims.Refl>


; </end encoding type Prims.equals>


; <Start encoding val Prims.uu___is_Refl>

(declare-fun Prims.uu___is_Refl (Term Term Term Term) Term)
(declare-fun Tm_arrow_2a4540f76c8969717ea911077d7b4d15 () Term)
(declare-fun Prims.uu___is_Refl@tok () Term)

; </end encoding val Prims.uu___is_Refl>


; <Start encoding let eq2>

(declare-fun Prims.eq2 (Term Term Term) Term)
(declare-fun Tm_arrow_1ec40cec1da281b45a559c74dd57f3b7 () Term)
(declare-fun Prims.eq2@tok () Term)

; </end encoding let eq2>


; <Start encoding let b2t>

(declare-fun Prims.b2t (Term) Term)

; </end encoding let b2t>


; <Start encoding type Prims.pair>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.pair (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.pair@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Pair (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Pair
(declare-fun Prims.Pair@tok () Term)
(declare-fun Tm_arrow_e2b0096073073582c70f249d40f91c5d () Term)

; <start constructor Prims.pair>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.pair ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
150)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.pair @x0
@x1))
 
;;no pats
:qid is-Prims.pair))))

; </end constructor Prims.pair>


; <start constructor Prims.Pair>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Pair ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
157)
(= __@x0
(Prims.Pair (Prims.Pair_p __@x0)
(Prims.Pair_q __@x0)
(Prims.Pair__1 __@x0)
(Prims.Pair__2 __@x0)))))

; </end constructor Prims.Pair>


; </end encoding type Prims.pair>


; <Start encoding val Prims.uu___is_Pair>

(declare-fun Prims.uu___is_Pair (Term Term Term) Term)
(declare-fun Tm_arrow_0a519c999e1325381ee4c9b1d93a06b2 () Term)
(declare-fun Prims.uu___is_Pair@tok () Term)

; </end encoding val Prims.uu___is_Pair>


; <Start encoding val Prims.__proj__Pair__item___1>

(declare-fun Prims.__proj__Pair__item___1 (Term Term Term) Term)
(declare-fun Tm_arrow_214b45775d1504fb2699ff0d156b6857 () Term)
(declare-fun Prims.__proj__Pair__item___1@tok () Term)

; </end encoding val Prims.__proj__Pair__item___1>


; <Start encoding val Prims.__proj__Pair__item___2>

(declare-fun Prims.__proj__Pair__item___2 (Term Term Term) Term)
(declare-fun Tm_arrow_1b97dbe8f5eb289f51cc2556690371e3 () Term)
(declare-fun Prims.__proj__Pair__item___2@tok () Term)

; </end encoding val Prims.__proj__Pair__item___2>


; <Start encoding let l_and>

(declare-fun Prims.l_and (Term Term) Term)
(declare-fun Tm_arrow_289ee2cc5874944bf725b9e3db8c0fd6 () Term)
(declare-fun Prims.l_and@tok () Term)

; </end encoding let l_and>


; <Start encoding type Prims.sum>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.sum (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.sum@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Left
(declare-fun Prims.Left@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Right
(declare-fun Prims.Right@tok () Term)
(declare-fun Tm_arrow_4ef073c03ed003774fe6ccb4064aeebd () Term)
(declare-fun Tm_arrow_c537ccd7fef2183d55f1a6960ee793b0 () Term)

; <start constructor Prims.sum>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.sum ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
169)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.sum @x0
@x1))
 
;;no pats
:qid is-Prims.sum))))

; </end constructor Prims.sum>


; <start constructor Prims.Left>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Left ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
176)
(= __@x0
(Prims.Left (Prims.Left_p __@x0)
(Prims.Left_q __@x0)
(Prims.Left_v __@x0)))))

; </end constructor Prims.Left>


; <start constructor Prims.Right>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Right ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
181)
(= __@x0
(Prims.Right (Prims.Right_p __@x0)
(Prims.Right_q __@x0)
(Prims.Right_v __@x0)))))

; </end constructor Prims.Right>


; </end encoding type Prims.sum>


; <Start encoding val Prims.uu___is_Left>

(declare-fun Prims.uu___is_Left (Term Term Term) Term)
(declare-fun Tm_arrow_3c254c463840bdea2ca63f23cf7c2f0c () Term)
(declare-fun Prims.uu___is_Left@tok () Term)

; </end encoding val Prims.uu___is_Left>


; <Start encoding val Prims.__proj__Left__item__v>

(declare-fun Tm_refine_6140be01a70b18051829f178aaf0270b (Term Term) Term)
(declare-fun Prims.__proj__Left__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_aaf070885513892396497eef726adce1 () Term)
(declare-fun Prims.__proj__Left__item__v@tok () Term)

; </end encoding val Prims.__proj__Left__item__v>


; <Start encoding val Prims.uu___is_Right>

(declare-fun Prims.uu___is_Right (Term Term Term) Term)

(declare-fun Prims.uu___is_Right@tok () Term)

; </end encoding val Prims.uu___is_Right>


; <Start encoding val Prims.__proj__Right__item__v>

(declare-fun Tm_refine_43ea5cf89e866ce271f97bd6ce102588 (Term Term) Term)
(declare-fun Prims.__proj__Right__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_4ae0e7dd85e55aec7e8190dea6e3997f () Term)
(declare-fun Prims.__proj__Right__item__v@tok () Term)

; </end encoding val Prims.__proj__Right__item__v>


; <Start encoding let l_or>

(declare-fun Prims.l_or (Term Term) Term)

(declare-fun Prims.l_or@tok () Term)

; </end encoding let l_or>


; <Start encoding let l_imp>

(declare-fun Prims.l_imp (Term Term) Term)

(declare-fun Prims.l_imp@tok () Term)
(declare-fun Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a (Term Term) Term)

; </end encoding let l_imp>


; <Start encoding let l_iff>

(declare-fun Prims.l_iff (Term Term) Term)

(declare-fun Prims.l_iff@tok () Term)

; </end encoding let l_iff>


; <Start encoding let l_not>

(declare-fun Prims.l_not (Term) Term)
(declare-fun Tm_arrow_8178e3b6934aa50ea45bb0ccea2d9711 () Term)
(declare-fun Prims.l_not@tok () Term)

; </end encoding let l_not>


; <Skipped let l_ITE/>


; <Skipped val Prims.precedes/>


; <Start encoding val Prims.string>

(declare-fun Prims.string () Term)

; </end encoding val Prims.string>


; <Start encoding val Prims.warn_on_use>

(declare-fun Prims.warn_on_use (Term) Term)
(declare-fun Tm_arrow_2863eb88d7490a9c3cf347c16ca04740 () Term)
(declare-fun Prims.warn_on_use@tok () Term)

; </end encoding val Prims.warn_on_use>


; <Start encoding val Prims.deprecated>

(declare-fun Prims.deprecated (Term) Term)

(declare-fun Prims.deprecated@tok () Term)

; </end encoding val Prims.deprecated>


; <Start encoding val Prims.has_type>

(declare-fun Prims.has_type (Term Term Term) Term)
(declare-fun Tm_arrow_b5d8ed0243b8c7c893f2b329de57c62b () Term)
(declare-fun Prims.has_type@tok () Term)

; </end encoding val Prims.has_type>


; <Start encoding let l_Forall>

(declare-fun Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da (Term) Term)
(declare-fun Prims.l_Forall (Term Term) Term)

(declare-fun Tm_arrow_977ec6901669a051ac66211b8e72666a () Term)
(declare-fun Prims.l_Forall@tok () Term)

(declare-fun Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f (Term Term) Term)

; </end encoding let l_Forall>


; <Skipped #push-options "--warn_error -288"/>


; <Start encoding let subtype_of>

(declare-fun Prims.subtype_of (Term Term) Term)
(declare-fun Tm_arrow_28becc0427b69ebf63ea956148504d97 () Term)
(declare-fun Prims.subtype_of@tok () Term)

; </end encoding let subtype_of>


; <Skipped #pop-options/>


; <Start encoding let prop>

(declare-fun Prims.prop () Term)
(declare-fun Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf () Term)

; </end encoding let prop>


; <Start encoding let pure_pre>

(declare-fun Prims.pure_pre () Term)

; </end encoding let pure_pre>


; <Start encoding let pure_post'>

(declare-fun Prims.pure_post_ (Term Term) Term)
(declare-fun Tm_arrow_e4cf09589736facd1137944a1f5a00a6 () Term)
(declare-fun Prims.pure_post_@tok () Term)
(declare-fun Tm_refine_8d65e998a07dd53ec478e27017d9dba5 (Term Term) Term)
(declare-fun Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 (Term Term) Term)

; </end encoding let pure_post'>


; <Start encoding let pure_post>

(declare-fun Prims.pure_post (Term) Term)

(declare-fun Prims.pure_post@tok () Term)

; </end encoding let pure_post>


; <Start encoding let pure_wp'>

(declare-fun Prims.pure_wp_ (Term) Term)

(declare-fun Prims.pure_wp_@tok () Term)
(declare-fun Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4 (Term) Term)

; </end encoding let pure_wp'>


; <Start encoding let pure_wp_monotonic0>

(declare-fun Prims.pure_wp_monotonic0 (Term Term) Term)
(declare-fun Tm_arrow_85436e2c1c64a4dd0159a737ef5b212e () Term)
(declare-fun Prims.pure_wp_monotonic0@tok () Term)

; </end encoding let pure_wp_monotonic0>


; <Start encoding let pure_wp_monotonic>

(declare-fun Prims.pure_wp_monotonic (Term Term) Term)

(declare-fun Prims.pure_wp_monotonic@tok () Term)

; </end encoding let pure_wp_monotonic>


; <Start encoding let pure_wp>

(declare-fun Prims.pure_wp (Term) Term)

(declare-fun Prims.pure_wp@tok () Term)
(declare-fun Tm_refine_15e0beb75f7033bad5fae236999feebe (Term) Term)

; </end encoding let pure_wp>


; <Start encoding val Prims.guard_free>

(declare-fun Prims.guard_free (Term) Term)

(declare-fun Prims.guard_free@tok () Term)

; </end encoding val Prims.guard_free>


; <Skipped let pure_return0/>


; <Skipped let pure_bind_wp0/>


; <Skipped let pure_if_then_else0/>


; <Skipped let pure_ite_wp0/>


; <Skipped let pure_stronger/>


; <Skipped let pure_close_wp0/>


; <Skipped let pure_trivial/>


; <Skipped new_effect { PURE ... }/>


; <Skipped effect Pure a pre post = Prims.PURE a/>


; <Skipped effect Admit a = Prims.PURE a/>


; <Skipped let pure_null_wp0/>


; <Skipped effect Tot a = Prims.PURE a/>


; <Start encoding let pure_assert_wp0>

(declare-fun Prims.pure_assert_wp0 (Term) Term)
(declare-fun Tm_arrow_14bcf5e7fc38d91827ecd9d25d3b3a67 () Term)
(declare-fun Prims.pure_assert_wp0@tok () Term)

; </end encoding let pure_assert_wp0>


; <Start encoding let pure_assume_wp0>

(declare-fun Prims.pure_assume_wp0 (Term) Term)

(declare-fun Prims.pure_assume_wp0@tok () Term)

; </end encoding let pure_assume_wp0>


; <Skipped new_effect { GHOST ... }/>


; <Skipped let purewp_id/>


; <Skipped sub_effect PURE ~> GHOST/>


; <Skipped effect Ghost a pre post = Prims.GHOST a/>


; <Skipped effect GTot a = Prims.GHOST a/>


; <Start encoding let op_Equals_Equals_Equals>

(declare-fun Prims.op_Equals_Equals_Equals (Term Term Term Term) Term)
(declare-fun Tm_arrow_7fcb145b23c2ac843afd9b126c4f71a9 () Term)
(declare-fun Prims.op_Equals_Equals_Equals@tok () Term)

; </end encoding let op_Equals_Equals_Equals>


; <Start encoding type Prims.dtuple2>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.dtuple2 (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.dtuple2@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Mkdtuple2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Mkdtuple2
(declare-fun Prims.Mkdtuple2@tok () Term)



(declare-fun Tm_arrow_22a50f5c5c9bb74bac4384fb8999be8b () Term)

; <start constructor Prims.dtuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.dtuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
258)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.dtuple2 @x0
@x1))
 
;;no pats
:qid is-Prims.dtuple2))))

; </end constructor Prims.dtuple2>


; <start constructor Prims.Mkdtuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Mkdtuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
267)
(= __@x0
(Prims.Mkdtuple2 (Prims.Mkdtuple2_a __@x0)
(Prims.Mkdtuple2_b __@x0)
(Prims.Mkdtuple2__1 __@x0)
(Prims.Mkdtuple2__2 __@x0)))))

; </end constructor Prims.Mkdtuple2>


; </end encoding type Prims.dtuple2>


; <Start encoding assume Prims.dtuple2__uu___haseq>



; </end encoding assume Prims.dtuple2__uu___haseq>


; <Start encoding val Prims.uu___is_Mkdtuple2>


(declare-fun Prims.uu___is_Mkdtuple2 (Term Term Term) Term)

(declare-fun Tm_arrow_e6f9f7cb1936ec43b52469e706dcadcc () Term)
(declare-fun Prims.uu___is_Mkdtuple2@tok () Term)

; </end encoding val Prims.uu___is_Mkdtuple2>


; <Skipped let uu___is_Mkdtuple2/>


; <Start encoding val Prims.__proj__Mkdtuple2__item___1>


(declare-fun Prims.__proj__Mkdtuple2__item___1 (Term Term Term) Term)

(declare-fun Tm_arrow_26c013ffba39d4f7eeb4bcc80d2d4e22 () Term)
(declare-fun Prims.__proj__Mkdtuple2__item___1@tok () Term)

; </end encoding val Prims.__proj__Mkdtuple2__item___1>


; <Skipped let __proj__Mkdtuple2__item___1/>


; <Start encoding val Prims.__proj__Mkdtuple2__item___2>


(declare-fun Prims.__proj__Mkdtuple2__item___2 (Term Term Term) Term)

(declare-fun Tm_arrow_870cc7701a0d9a8a2d6fb92427a97d66 () Term)
(declare-fun Prims.__proj__Mkdtuple2__item___2@tok () Term)

; </end encoding val Prims.__proj__Mkdtuple2__item___2>


; <Skipped let __proj__Mkdtuple2__item___2/>


; <Start encoding let l_Exists>


(declare-fun Prims.l_Exists (Term Term) Term)


(declare-fun Prims.l_Exists@tok () Term)


(declare-fun Tm_abs_6ba36691ee58dee85cd144324b083848 (Term Term) Term)

; </end encoding let l_Exists>


; <Start encoding val Prims.int>

(declare-fun Prims.int () Term)

; </end encoding val Prims.int>


; <Start encoding val Prims.op_AmpAmp>

(declare-fun Prims.op_AmpAmp (Term Term) Term)
(declare-fun Prims.op_AmpAmp@tok () Term)

; </end encoding val Prims.op_AmpAmp>


; <Start encoding val Prims.op_BarBar>

(declare-fun Prims.op_BarBar (Term Term) Term)
(declare-fun Prims.op_BarBar@tok () Term)

; </end encoding val Prims.op_BarBar>


; <Start encoding val Prims.op_Negation>

(declare-fun Prims.op_Negation (Term) Term)
(declare-fun Prims.op_Negation@tok () Term)

; </end encoding val Prims.op_Negation>


; <Start encoding val Prims.op_Multiply>

(declare-fun Prims.op_Multiply (Term Term) Term)
(declare-fun Prims.op_Multiply@tok () Term)

; </end encoding val Prims.op_Multiply>


; <Start encoding val Prims.op_Subtraction>

(declare-fun Prims.op_Subtraction (Term Term) Term)
(declare-fun Prims.op_Subtraction@tok () Term)

; </end encoding val Prims.op_Subtraction>


; <Start encoding val Prims.op_Addition>

(declare-fun Prims.op_Addition (Term Term) Term)
(declare-fun Prims.op_Addition@tok () Term)

; </end encoding val Prims.op_Addition>


; <Start encoding val Prims.op_Minus>

(declare-fun Prims.op_Minus (Term) Term)
(declare-fun Prims.op_Minus@tok () Term)

; </end encoding val Prims.op_Minus>


; <Start encoding val Prims.op_LessThanOrEqual>

(declare-fun Prims.op_LessThanOrEqual (Term Term) Term)
(declare-fun Prims.op_LessThanOrEqual@tok () Term)

; </end encoding val Prims.op_LessThanOrEqual>


; <Start encoding val Prims.op_GreaterThan>

(declare-fun Prims.op_GreaterThan (Term Term) Term)
(declare-fun Prims.op_GreaterThan@tok () Term)

; </end encoding val Prims.op_GreaterThan>


; <Start encoding val Prims.op_GreaterThanOrEqual>

(declare-fun Prims.op_GreaterThanOrEqual (Term Term) Term)
(declare-fun Prims.op_GreaterThanOrEqual@tok () Term)

; </end encoding val Prims.op_GreaterThanOrEqual>


; <Start encoding val Prims.op_LessThan>

(declare-fun Prims.op_LessThan (Term Term) Term)
(declare-fun Prims.op_LessThan@tok () Term)

; </end encoding val Prims.op_LessThan>


; <Start encoding val Prims.op_Equality>

(declare-fun Prims.op_Equality (Term Term Term) Term)
(declare-fun Prims.op_Equality@tok () Term)

; </end encoding val Prims.op_Equality>


; <Start encoding val Prims.op_disEquality>

(declare-fun Prims.op_disEquality (Term Term Term) Term)
(declare-fun Prims.op_disEquality@tok () Term)

; </end encoding val Prims.op_disEquality>


; <Start encoding val Prims.exn>

(declare-fun Prims.exn () Term)

; </end encoding val Prims.exn>


; <Start encoding val Prims.array>

(declare-fun Prims.array (Term) Term)

(declare-fun Prims.array@tok () Term)

; </end encoding val Prims.array>


; <Start encoding val Prims.strcat>

(declare-fun Prims.strcat (Term Term) Term)
(declare-fun Tm_arrow_b66cecec1d56111347abe61e89557dd1 () Term)
(declare-fun Prims.strcat@tok () Term)

; </end encoding val Prims.strcat>


; <Skipped let op_Hat/>


; <Start encoding type Prims.list>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.list (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.list@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Nil (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Nil_a (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Nil
(declare-fun Prims.Nil@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_hd (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_tl (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Cons
(declare-fun Prims.Cons@tok () Term)
(declare-fun Tm_arrow_3864bd5fbb999b4fe4487408df9b3401 () Term)
(declare-fun Tm_arrow_02c072760cbad0f5a4706f6cffab6c94 () Term)

; <start constructor Prims.list>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.list ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
318)
(exists ((@x0 Term))
 (! (= __@x0
(Prims.list @x0))
 
;;no pats
:qid is-Prims.list))))

; </end constructor Prims.list>


; <start constructor Prims.Nil>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Nil ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
325)
(= __@x0
(Prims.Nil (Prims.Nil_a __@x0)))))

; </end constructor Prims.Nil>


; <start constructor Prims.Cons>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Cons ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
330)
(= __@x0
(Prims.Cons (Prims.Cons_a __@x0)
(Prims.Cons_hd __@x0)
(Prims.Cons_tl __@x0)))))

; </end constructor Prims.Cons>


; </end encoding type Prims.list>


; <Start encoding assume Prims.list__uu___haseq>


; </end encoding assume Prims.list__uu___haseq>


; <Start encoding val Prims.uu___is_Nil>

(declare-fun Prims.uu___is_Nil (Term Term) Term)
(declare-fun Tm_arrow_606904b0fa72729a20285beb231f9f2e () Term)
(declare-fun Prims.uu___is_Nil@tok () Term)

; </end encoding val Prims.uu___is_Nil>


; <Skipped let uu___is_Nil/>


; <Start encoding val Prims.uu___is_Cons>

(declare-fun Prims.uu___is_Cons (Term Term) Term)

(declare-fun Prims.uu___is_Cons@tok () Term)

; </end encoding val Prims.uu___is_Cons>


; <Skipped let uu___is_Cons/>


; <Start encoding val Prims.__proj__Cons__item__hd>

(declare-fun Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 (Term) Term)
(declare-fun Prims.__proj__Cons__item__hd (Term Term) Term)

(declare-fun Tm_arrow_27c3547831737e5a63950f3d18bf3d22 () Term)
(declare-fun Prims.__proj__Cons__item__hd@tok () Term)

; </end encoding val Prims.__proj__Cons__item__hd>


; <Skipped let __proj__Cons__item__hd/>


; <Start encoding val Prims.__proj__Cons__item__tl>


(declare-fun Prims.__proj__Cons__item__tl (Term Term) Term)

(declare-fun Tm_arrow_4e740085106d54d8b48ffe3c6c20ef21 () Term)
(declare-fun Prims.__proj__Cons__item__tl@tok () Term)

; </end encoding val Prims.__proj__Cons__item__tl>


; <Skipped let __proj__Cons__item__tl/>


; <Skipped effect M a = a/>


; <Start encoding let returnM>

(declare-fun Prims.returnM (Term Term) Term)
(declare-fun Tm_arrow_99724436653747ac6f5a6a00c64ff8bc () Term)
(declare-fun Prims.returnM@tok () Term)

; </end encoding let returnM>


; <Skipped let as_requires/>


; <Skipped let as_ensures/>


; <Start encoding val Prims._assume>

(declare-fun Prims._assume (Term) Term)
(declare-fun Non_total_Tm_arrow_724d0dab46b8b51a1bb19d329f7fc4b2 () Term)
(declare-fun Prims._assume@tok () Term)

; </end encoding val Prims._assume>


; <Start encoding val Prims.admit>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Prims.admit (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Prims.admit@tok () Term)

; </end encoding val Prims.admit>


; <Start encoding val Prims.magic>

(declare-fun Prims.magic (Term Term) Term)
(declare-fun Tm_arrow_f5df98ce82fbcebbbdb844c958bee4fb () Term)
(declare-fun Prims.magic@tok () Term)

; </end encoding val Prims.magic>


; <Start encoding let unsafe_coerce>

(declare-fun Prims.unsafe_coerce (Term Term Term) Term)
(declare-fun Tm_arrow_443ab41008720460b7a09e280558a60f () Term)
(declare-fun Prims.unsafe_coerce@tok () Term)

; </end encoding let unsafe_coerce>


; <Start encoding val Prims.admitP>

(declare-fun Prims.admitP (Term) Term)

(declare-fun Prims.admitP@tok () Term)

; </end encoding val Prims.admitP>


; <Skipped val Prims._assert/>


; <Start encoding let _assert>

(declare-fun Prims._assert (Term) Term)
(declare-fun Non_total_Tm_arrow_bb2d1b4bdb07c87bf5990ad3e5fd8642 () Term)
(declare-fun Prims._assert@tok () Term)

; </end encoding let _assert>


; <Skipped val Prims.cut/>


; <Start encoding let cut>

(declare-fun Prims.cut (Term) Term)

(declare-fun Prims.cut@tok () Term)

; </end encoding let cut>


; <Start encoding let nat>

(declare-fun Prims.nat () Term)
(declare-fun Tm_refine_542f9d4f129664613f2483a6c88bc7c2 () Term)

; </end encoding let nat>


; <Start encoding let pos>

(declare-fun Prims.pos () Term)
(declare-fun Tm_refine_774ba3f728d91ead8ef40be66c9802e5 () Term)

; </end encoding let pos>


; <Start encoding let nonzero>

(declare-fun Prims.nonzero () Term)
(declare-fun Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f () Term)

; </end encoding let nonzero>


; <Start encoding val Prims.op_Modulus>

(declare-fun Prims.op_Modulus (Term Term) Term)
(declare-fun Prims.op_Modulus@tok () Term)

; </end encoding val Prims.op_Modulus>


; <Start encoding val Prims.op_Division>

(declare-fun Prims.op_Division (Term Term) Term)
(declare-fun Prims.op_Division@tok () Term)

; </end encoding val Prims.op_Division>


; <Start encoding let rec pow2>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Prims.pow2.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Prims.pow2.fuel_instrumented_token () Term)
(declare-fun Prims.pow2 (Term) Term)
(declare-fun Prims.pow2@tok () Term)
(declare-fun Tm_arrow_c331a0e032e021e1eaa359b3983de4f2 () Term)

; </end encoding let rec pow2>


; <Start encoding let min>

(declare-fun Prims.min (Term Term) Term)
(declare-fun Tm_arrow_47fc285d7b44e13bcb7e420cbfc55623 () Term)
(declare-fun Prims.min@tok () Term)

; </end encoding let min>


; <Start encoding let abs>

(declare-fun Prims.abs (Term) Term)
(declare-fun Tm_arrow_35447810753695c4fe25c93af1251992 () Term)
(declare-fun Prims.abs@tok () Term)

; </end encoding let abs>


; <Start encoding val Prims.string_of_bool>

(declare-fun Prims.string_of_bool (Term) Term)
(declare-fun Tm_arrow_e86b54405c2a58719f5e8112efd48c09 () Term)
(declare-fun Prims.string_of_bool@tok () Term)

; </end encoding val Prims.string_of_bool>


; <Start encoding val Prims.string_of_int>

(declare-fun Prims.string_of_int (Term) Term)
(declare-fun Tm_arrow_2bc066ec63734c94a3c008e1e72cae2b () Term)
(declare-fun Prims.string_of_int@tok () Term)

; </end encoding val Prims.string_of_int>


; <Start encoding let __cache_version_number__>

(declare-fun Prims.__cache_version_number__ () Term)

; </end encoding let __cache_version_number__>


; End Externals for module Prims


; Externals for module FStar.Pervasives.Native


; <Start encoding type FStar.Pervasives.Native.option>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.option (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.option@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.None (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.None_a (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.None
(declare-fun FStar.Pervasives.Native.None@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Some (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Some_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Some_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Some
(declare-fun FStar.Pervasives.Native.Some@tok () Term)
(declare-fun Tm_arrow_48b914114ec9f2f1caadf0f6848a9741 () Term)
(declare-fun Tm_arrow_b93a364b5144c2a5f3e9d1ea7b881752 () Term)

; <start constructor FStar.Pervasives.Native.option>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.option ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Pervasives.Native.option @x0))
 
;;no pats
:qid is-FStar.Pervasives.Native.option))))

; </end constructor FStar.Pervasives.Native.option>


; <start constructor FStar.Pervasives.Native.None>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.None ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
108)
(= __@x0
(FStar.Pervasives.Native.None (FStar.Pervasives.Native.None_a __@x0)))))

; </end constructor FStar.Pervasives.Native.None>


; <start constructor FStar.Pervasives.Native.Some>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Some ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
113)
(= __@x0
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.Some_a __@x0)
(FStar.Pervasives.Native.Some_v __@x0)))))

; </end constructor FStar.Pervasives.Native.Some>


; </end encoding type FStar.Pervasives.Native.option>


; <Start encoding assume FStar.Pervasives.Native.option__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.option__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_None>

(declare-fun FStar.Pervasives.Native.uu___is_None (Term Term) Term)
(declare-fun Tm_arrow_f1a97bcd6ba9b40d22609b756f183afa () Term)
(declare-fun FStar.Pervasives.Native.uu___is_None@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_None>


; <Skipped let uu___is_None/>


; <Start encoding val FStar.Pervasives.Native.uu___is_Some>

(declare-fun FStar.Pervasives.Native.uu___is_Some (Term Term) Term)

(declare-fun FStar.Pervasives.Native.uu___is_Some@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Some>


; <Skipped let uu___is_Some/>


; <Start encoding val FStar.Pervasives.Native.__proj__Some__item__v>

(declare-fun Tm_refine_4d5241eb6fe198666a8101195bbd4a2a (Term) Term)
(declare-fun FStar.Pervasives.Native.__proj__Some__item__v (Term Term) Term)

(declare-fun Tm_arrow_1b1398c011ff53e4194fc2ec00c7b411 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Some__item__v@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Some__item__v>


; <Skipped let __proj__Some__item__v/>


; <Start encoding type FStar.Pervasives.Native.tuple2>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple2 (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple2@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple2
(declare-fun FStar.Pervasives.Native.Mktuple2@tok () Term)
(declare-fun Tm_arrow_4054cc0a51327db54c2ed9ba3376a093 () Term)

; <start constructor FStar.Pervasives.Native.tuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
125)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple2 @x0
@x1))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple2))))

; </end constructor FStar.Pervasives.Native.tuple2>


; <start constructor FStar.Pervasives.Native.Mktuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
132)
(= __@x0
(FStar.Pervasives.Native.Mktuple2 (FStar.Pervasives.Native.Mktuple2__a __@x0)
(FStar.Pervasives.Native.Mktuple2__b __@x0)
(FStar.Pervasives.Native.Mktuple2__1 __@x0)
(FStar.Pervasives.Native.Mktuple2__2 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple2>


; </end encoding type FStar.Pervasives.Native.tuple2>


; <Start encoding assume FStar.Pervasives.Native.tuple2__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple2__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple2>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple2 (Term Term Term) Term)
(declare-fun Tm_arrow_eff71eeee4474e017e02350f86f54756 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple2@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple2>


; <Skipped let uu___is_Mktuple2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___1 (Term Term Term) Term)
(declare-fun Tm_arrow_b8cce376a4a678a51298a0f3945f25ce () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___1>


; <Skipped let __proj__Mktuple2__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___2 (Term Term Term) Term)
(declare-fun Tm_arrow_d952d001575ecb20c572af535c88dd2d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___2>


; <Skipped let __proj__Mktuple2__item___2/>


; <Start encoding let fst>

(declare-fun FStar.Pervasives.Native.fst (Term Term Term) Term)

(declare-fun FStar.Pervasives.Native.fst@tok () Term)

; </end encoding let fst>


; <Start encoding let snd>

(declare-fun FStar.Pervasives.Native.snd (Term Term Term) Term)

(declare-fun FStar.Pervasives.Native.snd@tok () Term)

; </end encoding let snd>


; <Start encoding type FStar.Pervasives.Native.tuple3>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple3@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple3 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__3 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple3
(declare-fun FStar.Pervasives.Native.Mktuple3@tok () Term)
(declare-fun Tm_arrow_1bedda193f13e939931cf5d46ad84216 () Term)

; <start constructor FStar.Pervasives.Native.tuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
146)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple3))))

; </end constructor FStar.Pervasives.Native.tuple3>


; <start constructor FStar.Pervasives.Native.Mktuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
153)
(= __@x0
(FStar.Pervasives.Native.Mktuple3 (FStar.Pervasives.Native.Mktuple3__a __@x0)
(FStar.Pervasives.Native.Mktuple3__b __@x0)
(FStar.Pervasives.Native.Mktuple3__c __@x0)
(FStar.Pervasives.Native.Mktuple3__1 __@x0)
(FStar.Pervasives.Native.Mktuple3__2 __@x0)
(FStar.Pervasives.Native.Mktuple3__3 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple3>


; </end encoding type FStar.Pervasives.Native.tuple3>


; <Start encoding assume FStar.Pervasives.Native.tuple3__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple3__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple3>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple3 (Term Term Term Term) Term)
(declare-fun Tm_arrow_f03c6dc5b30146aaca49ed4bf6f332a7 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple3@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple3>


; <Skipped let uu___is_Mktuple3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Term Term Term Term) Term)
(declare-fun Tm_arrow_592c45439d32a71e1933eacb9776c9ed () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___1>


; <Skipped let __proj__Mktuple3__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Term Term Term Term) Term)
(declare-fun Tm_arrow_9c9b0c5ac9b0fbfc367f406af296ecab () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___2>


; <Skipped let __proj__Mktuple3__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___3 (Term Term Term Term) Term)
(declare-fun Tm_arrow_08246a62c9aeca08c44c602ad80e95a4 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___3>


; <Skipped let __proj__Mktuple3__item___3/>


; <Start encoding type FStar.Pervasives.Native.tuple4>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple4 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple4@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple4 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__4 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple4
(declare-fun FStar.Pervasives.Native.Mktuple4@tok () Term)
(declare-fun Tm_arrow_cbe72a10167439fe1ecfaf4fec8fd23f () Term)

; <start constructor FStar.Pervasives.Native.tuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
165)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple4 @x0
@x1
@x2
@x3))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple4))))

; </end constructor FStar.Pervasives.Native.tuple4>


; <start constructor FStar.Pervasives.Native.Mktuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
172)
(= __@x0
(FStar.Pervasives.Native.Mktuple4 (FStar.Pervasives.Native.Mktuple4__a __@x0)
(FStar.Pervasives.Native.Mktuple4__b __@x0)
(FStar.Pervasives.Native.Mktuple4__c __@x0)
(FStar.Pervasives.Native.Mktuple4__d __@x0)
(FStar.Pervasives.Native.Mktuple4__1 __@x0)
(FStar.Pervasives.Native.Mktuple4__2 __@x0)
(FStar.Pervasives.Native.Mktuple4__3 __@x0)
(FStar.Pervasives.Native.Mktuple4__4 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple4>


; </end encoding type FStar.Pervasives.Native.tuple4>


; <Start encoding assume FStar.Pervasives.Native.tuple4__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple4__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple4>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple4 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_4319694c225efa92ce9fad6e9d81f761 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple4@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple4>


; <Skipped let uu___is_Mktuple4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___1 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_382d1e9129053162252ec57e86d46f82 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___1>


; <Skipped let __proj__Mktuple4__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___2 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_fffd25e5325d259efa0675ef649c6864 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___2>


; <Skipped let __proj__Mktuple4__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___3 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_57b4005e0833f7b396e349ed7cdd1bb2 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___3>


; <Skipped let __proj__Mktuple4__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___4 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9e6c1a63d63f8735645b9898955a2dca () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___4>


; <Skipped let __proj__Mktuple4__item___4/>


; <Start encoding type FStar.Pervasives.Native.tuple5>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple5 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple5@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple5 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__5 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple5
(declare-fun FStar.Pervasives.Native.Mktuple5@tok () Term)
(declare-fun Tm_arrow_dd8a078a1b97a81b5089dc3637cc2887 () Term)

; <start constructor FStar.Pervasives.Native.tuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
186)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple5 @x0
@x1
@x2
@x3
@x4))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple5))))

; </end constructor FStar.Pervasives.Native.tuple5>


; <start constructor FStar.Pervasives.Native.Mktuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
193)
(= __@x0
(FStar.Pervasives.Native.Mktuple5 (FStar.Pervasives.Native.Mktuple5__a __@x0)
(FStar.Pervasives.Native.Mktuple5__b __@x0)
(FStar.Pervasives.Native.Mktuple5__c __@x0)
(FStar.Pervasives.Native.Mktuple5__d __@x0)
(FStar.Pervasives.Native.Mktuple5__e __@x0)
(FStar.Pervasives.Native.Mktuple5__1 __@x0)
(FStar.Pervasives.Native.Mktuple5__2 __@x0)
(FStar.Pervasives.Native.Mktuple5__3 __@x0)
(FStar.Pervasives.Native.Mktuple5__4 __@x0)
(FStar.Pervasives.Native.Mktuple5__5 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple5>


; </end encoding type FStar.Pervasives.Native.tuple5>


; <Start encoding assume FStar.Pervasives.Native.tuple5__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple5__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple5>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple5 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_cfa2e2c8b8b41312889ff659c4faa5f9 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple5@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple5>


; <Skipped let uu___is_Mktuple5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___1 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7519f72fe101267af170e00c6ce694af () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___1>


; <Skipped let __proj__Mktuple5__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___2 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3e46329f224aa70981a337f98afbaa87 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___2>


; <Skipped let __proj__Mktuple5__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___3 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_55e6dc1b736536de45fedf844003f847 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___3>


; <Skipped let __proj__Mktuple5__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___4 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3a4e86c6aee1a39b4811bdbc12405398 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___4>


; <Skipped let __proj__Mktuple5__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___5 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1a78355922fdaba3f3848932dfc0a089 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___5>


; <Skipped let __proj__Mktuple5__item___5/>


; <Start encoding type FStar.Pervasives.Native.tuple6>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple6 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple6@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple6 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__6 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple6
(declare-fun FStar.Pervasives.Native.Mktuple6@tok () Term)
(declare-fun Tm_arrow_f277ffaa7e891207f9c6bff5b88ffd67 () Term)

; <start constructor FStar.Pervasives.Native.tuple6>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple6 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
209)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple6 @x0
@x1
@x2
@x3
@x4
@x5))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple6))))

; </end constructor FStar.Pervasives.Native.tuple6>


; <start constructor FStar.Pervasives.Native.Mktuple6>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple6 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
216)
(= __@x0
(FStar.Pervasives.Native.Mktuple6 (FStar.Pervasives.Native.Mktuple6__a __@x0)
(FStar.Pervasives.Native.Mktuple6__b __@x0)
(FStar.Pervasives.Native.Mktuple6__c __@x0)
(FStar.Pervasives.Native.Mktuple6__d __@x0)
(FStar.Pervasives.Native.Mktuple6__e __@x0)
(FStar.Pervasives.Native.Mktuple6__f __@x0)
(FStar.Pervasives.Native.Mktuple6__1 __@x0)
(FStar.Pervasives.Native.Mktuple6__2 __@x0)
(FStar.Pervasives.Native.Mktuple6__3 __@x0)
(FStar.Pervasives.Native.Mktuple6__4 __@x0)
(FStar.Pervasives.Native.Mktuple6__5 __@x0)
(FStar.Pervasives.Native.Mktuple6__6 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple6>


; </end encoding type FStar.Pervasives.Native.tuple6>


; <Start encoding assume FStar.Pervasives.Native.tuple6__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple6__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple6>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple6 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_286587a1b9d299ba75a076f54a6dad5f () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple6@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple6>


; <Skipped let uu___is_Mktuple6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___1 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5b1e145eeceab869b8e427e6927dbd63 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___1>


; <Skipped let __proj__Mktuple6__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___2 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3207475e225d584881d3e0a297482887 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___2>


; <Skipped let __proj__Mktuple6__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___3 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_43e491b3b537a523a4f10de18b1915f5 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___3>


; <Skipped let __proj__Mktuple6__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___4 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f5747d5b721642d7ecb757b043f20880 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___4>


; <Skipped let __proj__Mktuple6__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___5 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_d6501381a0206e157ecc43950bb31fea () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___5>


; <Skipped let __proj__Mktuple6__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___6 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9c342f41120d0c7aea115b09b58cefb2 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___6>


; <Skipped let __proj__Mktuple6__item___6/>


; <Start encoding type FStar.Pervasives.Native.tuple7>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple7 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple7@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__7 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple7
(declare-fun FStar.Pervasives.Native.Mktuple7@tok () Term)
(declare-fun Tm_arrow_37ee9ec407a0f7bb69bf1b308f74a230 () Term)

; <start constructor FStar.Pervasives.Native.tuple7>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple7 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
234)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple7))))

; </end constructor FStar.Pervasives.Native.tuple7>


; <start constructor FStar.Pervasives.Native.Mktuple7>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple7 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
241)
(= __@x0
(FStar.Pervasives.Native.Mktuple7 (FStar.Pervasives.Native.Mktuple7__a __@x0)
(FStar.Pervasives.Native.Mktuple7__b __@x0)
(FStar.Pervasives.Native.Mktuple7__c __@x0)
(FStar.Pervasives.Native.Mktuple7__d __@x0)
(FStar.Pervasives.Native.Mktuple7__e __@x0)
(FStar.Pervasives.Native.Mktuple7__f __@x0)
(FStar.Pervasives.Native.Mktuple7__g __@x0)
(FStar.Pervasives.Native.Mktuple7__1 __@x0)
(FStar.Pervasives.Native.Mktuple7__2 __@x0)
(FStar.Pervasives.Native.Mktuple7__3 __@x0)
(FStar.Pervasives.Native.Mktuple7__4 __@x0)
(FStar.Pervasives.Native.Mktuple7__5 __@x0)
(FStar.Pervasives.Native.Mktuple7__6 __@x0)
(FStar.Pervasives.Native.Mktuple7__7 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple7>


; </end encoding type FStar.Pervasives.Native.tuple7>


; <Start encoding assume FStar.Pervasives.Native.tuple7__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple7__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple7>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple7 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_612dde2fedb1440c5d790ba7f5015319 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple7@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple7>


; <Skipped let uu___is_Mktuple7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___1 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_01c4488a68699f466c59799f5c1173ff () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___1>


; <Skipped let __proj__Mktuple7__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___2 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f317591858699585c67fe4ba8664e34c () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___2>


; <Skipped let __proj__Mktuple7__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___3 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_44afce9d86f095aacc82b3ea2e0e223c () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___3>


; <Skipped let __proj__Mktuple7__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___4 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e857539d4cc5be0510cbcfb97cb64b35 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___4>


; <Skipped let __proj__Mktuple7__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___5 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a249d3d5ba06026b12d41e289bb88061 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___5>


; <Skipped let __proj__Mktuple7__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___6 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_bf614c740d11cac9b5f8eb20b24c7d00 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___6>


; <Skipped let __proj__Mktuple7__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___7 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e775fbf03b08091e48143165286522f7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___7>


; <Skipped let __proj__Mktuple7__item___7/>


; <Start encoding type FStar.Pervasives.Native.tuple8>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple8 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple8@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__8 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple8
(declare-fun FStar.Pervasives.Native.Mktuple8@tok () Term)
(declare-fun Tm_arrow_e922a339a0aa0f375ed7113049811583 () Term)

; <start constructor FStar.Pervasives.Native.tuple8>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple8 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
261)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple8))))

; </end constructor FStar.Pervasives.Native.tuple8>


; <start constructor FStar.Pervasives.Native.Mktuple8>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple8 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
268)
(= __@x0
(FStar.Pervasives.Native.Mktuple8 (FStar.Pervasives.Native.Mktuple8__a __@x0)
(FStar.Pervasives.Native.Mktuple8__b __@x0)
(FStar.Pervasives.Native.Mktuple8__c __@x0)
(FStar.Pervasives.Native.Mktuple8__d __@x0)
(FStar.Pervasives.Native.Mktuple8__e __@x0)
(FStar.Pervasives.Native.Mktuple8__f __@x0)
(FStar.Pervasives.Native.Mktuple8__g __@x0)
(FStar.Pervasives.Native.Mktuple8__h __@x0)
(FStar.Pervasives.Native.Mktuple8__1 __@x0)
(FStar.Pervasives.Native.Mktuple8__2 __@x0)
(FStar.Pervasives.Native.Mktuple8__3 __@x0)
(FStar.Pervasives.Native.Mktuple8__4 __@x0)
(FStar.Pervasives.Native.Mktuple8__5 __@x0)
(FStar.Pervasives.Native.Mktuple8__6 __@x0)
(FStar.Pervasives.Native.Mktuple8__7 __@x0)
(FStar.Pervasives.Native.Mktuple8__8 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple8>


; </end encoding type FStar.Pervasives.Native.tuple8>


; <Start encoding assume FStar.Pervasives.Native.tuple8__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple8__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple8>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple8 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ee31533e24c78558f4566668a6ec027c () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple8@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple8>


; <Skipped let uu___is_Mktuple8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___1 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c971649e117e4941e7317eff508d5ea7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___1>


; <Skipped let __proj__Mktuple8__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___2 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_97dd51e3888c1c543d8f6c73d1808548 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___2>


; <Skipped let __proj__Mktuple8__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___3 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3931d1873633dc65fed4e022ee3df3ca () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___3>


; <Skipped let __proj__Mktuple8__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___4 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5c791e62f9472e4c351c2befb2b7a3d8 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___4>


; <Skipped let __proj__Mktuple8__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___5 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7ef7cac898ca0ef25893959e91d8c6ce () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___5>


; <Skipped let __proj__Mktuple8__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___6 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_b0ae5f58a7fa002e0313b58bf5fc74cb () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___6>


; <Skipped let __proj__Mktuple8__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___7 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7fcd94f7549ca8acfadc26bc5b82f590 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___7>


; <Skipped let __proj__Mktuple8__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___8 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_feaaf61fa62fef18c5ee7c39e9f86573 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___8>


; <Skipped let __proj__Mktuple8__item___8/>


; <Start encoding type FStar.Pervasives.Native.tuple9>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple9 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple9@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__9 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple9
(declare-fun FStar.Pervasives.Native.Mktuple9@tok () Term)
(declare-fun Tm_arrow_0c6bc368a301d7de6e1939ebea91ee60 () Term)

; <start constructor FStar.Pervasives.Native.tuple9>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple9 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
290)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple9 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple9))))

; </end constructor FStar.Pervasives.Native.tuple9>


; <start constructor FStar.Pervasives.Native.Mktuple9>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple9 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
297)
(= __@x0
(FStar.Pervasives.Native.Mktuple9 (FStar.Pervasives.Native.Mktuple9__a __@x0)
(FStar.Pervasives.Native.Mktuple9__b __@x0)
(FStar.Pervasives.Native.Mktuple9__c __@x0)
(FStar.Pervasives.Native.Mktuple9__d __@x0)
(FStar.Pervasives.Native.Mktuple9__e __@x0)
(FStar.Pervasives.Native.Mktuple9__f __@x0)
(FStar.Pervasives.Native.Mktuple9__g __@x0)
(FStar.Pervasives.Native.Mktuple9__h __@x0)
(FStar.Pervasives.Native.Mktuple9__i __@x0)
(FStar.Pervasives.Native.Mktuple9__1 __@x0)
(FStar.Pervasives.Native.Mktuple9__2 __@x0)
(FStar.Pervasives.Native.Mktuple9__3 __@x0)
(FStar.Pervasives.Native.Mktuple9__4 __@x0)
(FStar.Pervasives.Native.Mktuple9__5 __@x0)
(FStar.Pervasives.Native.Mktuple9__6 __@x0)
(FStar.Pervasives.Native.Mktuple9__7 __@x0)
(FStar.Pervasives.Native.Mktuple9__8 __@x0)
(FStar.Pervasives.Native.Mktuple9__9 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple9>


; </end encoding type FStar.Pervasives.Native.tuple9>


; <Start encoding assume FStar.Pervasives.Native.tuple9__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple9__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple9>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple9 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9ac8f39c7b1df1e87db7c9bf5bc37a38 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple9@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple9>


; <Skipped let uu___is_Mktuple9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___1 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_270119cc1f13c9afeb25322d78efc328 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___1>


; <Skipped let __proj__Mktuple9__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___2 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3c368dee2c86a1af7bd7ea91baab7613 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___2>


; <Skipped let __proj__Mktuple9__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___3 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e9c745e2da3dec50930b0a7e01a11cc3 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___3>


; <Skipped let __proj__Mktuple9__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___4 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a82ff41c5c66cd37481c83584c94a54d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___4>


; <Skipped let __proj__Mktuple9__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___5 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1b3b4c5e68fdf7277f64bde93e6534de () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___5>


; <Skipped let __proj__Mktuple9__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___6 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_837f1324f6fa51bb8a0e45ee48e4e058 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___6>


; <Skipped let __proj__Mktuple9__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___7 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a7562220963e3431d35de76c3c9c87b9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___7>


; <Skipped let __proj__Mktuple9__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___8 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_861b810bc1c20bbd221cecbce824b695 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___8>


; <Skipped let __proj__Mktuple9__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___9 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9a54b18d8e08fdf0e20244b3f960c9dc () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___9>


; <Skipped let __proj__Mktuple9__item___9/>


; <Start encoding type FStar.Pervasives.Native.tuple10>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple10 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple10@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__10 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple10
(declare-fun FStar.Pervasives.Native.Mktuple10@tok () Term)
(declare-fun Tm_arrow_61d31241317018093b2245d256adbcb5 () Term)

; <start constructor FStar.Pervasives.Native.tuple10>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple10 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
321)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple10 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple10))))

; </end constructor FStar.Pervasives.Native.tuple10>


; <start constructor FStar.Pervasives.Native.Mktuple10>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple10 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
328)
(= __@x0
(FStar.Pervasives.Native.Mktuple10 (FStar.Pervasives.Native.Mktuple10__a __@x0)
(FStar.Pervasives.Native.Mktuple10__b __@x0)
(FStar.Pervasives.Native.Mktuple10__c __@x0)
(FStar.Pervasives.Native.Mktuple10__d __@x0)
(FStar.Pervasives.Native.Mktuple10__e __@x0)
(FStar.Pervasives.Native.Mktuple10__f __@x0)
(FStar.Pervasives.Native.Mktuple10__g __@x0)
(FStar.Pervasives.Native.Mktuple10__h __@x0)
(FStar.Pervasives.Native.Mktuple10__i __@x0)
(FStar.Pervasives.Native.Mktuple10__j __@x0)
(FStar.Pervasives.Native.Mktuple10__1 __@x0)
(FStar.Pervasives.Native.Mktuple10__2 __@x0)
(FStar.Pervasives.Native.Mktuple10__3 __@x0)
(FStar.Pervasives.Native.Mktuple10__4 __@x0)
(FStar.Pervasives.Native.Mktuple10__5 __@x0)
(FStar.Pervasives.Native.Mktuple10__6 __@x0)
(FStar.Pervasives.Native.Mktuple10__7 __@x0)
(FStar.Pervasives.Native.Mktuple10__8 __@x0)
(FStar.Pervasives.Native.Mktuple10__9 __@x0)
(FStar.Pervasives.Native.Mktuple10__10 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple10>


; </end encoding type FStar.Pervasives.Native.tuple10>


; <Start encoding assume FStar.Pervasives.Native.tuple10__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple10__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple10>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple10 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f27282a056f525d8710bf32204d252ec () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple10@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple10>


; <Skipped let uu___is_Mktuple10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___1 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c581e9177cd071a1b6e057fca49ea75b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___1>


; <Skipped let __proj__Mktuple10__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___2 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ae4b2db87d7c69a8380f4d5ae20f2149 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___2>


; <Skipped let __proj__Mktuple10__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___3 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a21274cb112dc6619b2bde244e6a0f9a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___3>


; <Skipped let __proj__Mktuple10__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___4 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9a051d5cacf4367d170d590ba8bb720d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___4>


; <Skipped let __proj__Mktuple10__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___5 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_bbd73769b626202d4de52d4d60cd3b75 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___5>


; <Skipped let __proj__Mktuple10__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___6 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7ceeded5a3852448c1a5406becbd990e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___6>


; <Skipped let __proj__Mktuple10__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___7 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c68947c71d484ad43cd50646c4e1daf4 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___7>


; <Skipped let __proj__Mktuple10__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___8 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e7b9ff90289491020fe84c6ab3bc60c6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___8>


; <Skipped let __proj__Mktuple10__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___9 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_6dbb3170f112f78092d1caee0b341678 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___9>


; <Skipped let __proj__Mktuple10__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___10 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_45598a99c0a7fcc1bf2258b9ad4256cf () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___10>


; <Skipped let __proj__Mktuple10__item___10/>


; <Start encoding type FStar.Pervasives.Native.tuple11>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple11 (Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple11@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__11 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple11
(declare-fun FStar.Pervasives.Native.Mktuple11@tok () Term)
(declare-fun Tm_arrow_bf9783a1a3bf19ab918f42acff1daa32 () Term)

; <start constructor FStar.Pervasives.Native.tuple11>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple11 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
354)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple11 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple11))))

; </end constructor FStar.Pervasives.Native.tuple11>


; <start constructor FStar.Pervasives.Native.Mktuple11>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple11 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
361)
(= __@x0
(FStar.Pervasives.Native.Mktuple11 (FStar.Pervasives.Native.Mktuple11__a __@x0)
(FStar.Pervasives.Native.Mktuple11__b __@x0)
(FStar.Pervasives.Native.Mktuple11__c __@x0)
(FStar.Pervasives.Native.Mktuple11__d __@x0)
(FStar.Pervasives.Native.Mktuple11__e __@x0)
(FStar.Pervasives.Native.Mktuple11__f __@x0)
(FStar.Pervasives.Native.Mktuple11__g __@x0)
(FStar.Pervasives.Native.Mktuple11__h __@x0)
(FStar.Pervasives.Native.Mktuple11__i __@x0)
(FStar.Pervasives.Native.Mktuple11__j __@x0)
(FStar.Pervasives.Native.Mktuple11__k __@x0)
(FStar.Pervasives.Native.Mktuple11__1 __@x0)
(FStar.Pervasives.Native.Mktuple11__2 __@x0)
(FStar.Pervasives.Native.Mktuple11__3 __@x0)
(FStar.Pervasives.Native.Mktuple11__4 __@x0)
(FStar.Pervasives.Native.Mktuple11__5 __@x0)
(FStar.Pervasives.Native.Mktuple11__6 __@x0)
(FStar.Pervasives.Native.Mktuple11__7 __@x0)
(FStar.Pervasives.Native.Mktuple11__8 __@x0)
(FStar.Pervasives.Native.Mktuple11__9 __@x0)
(FStar.Pervasives.Native.Mktuple11__10 __@x0)
(FStar.Pervasives.Native.Mktuple11__11 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple11>


; </end encoding type FStar.Pervasives.Native.tuple11>


; <Start encoding assume FStar.Pervasives.Native.tuple11__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple11__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple11>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple11 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_005819ee7a23a5c47189bae72b85d85c () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple11@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple11>


; <Skipped let uu___is_Mktuple11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_31968e334e9582d95281307f534992a9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___1>


; <Skipped let __proj__Mktuple11__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_6252dd9f4473dc54a3482810e8556404 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___2>


; <Skipped let __proj__Mktuple11__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ec3ce6b7406c091cd7d0961922bb5a02 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___3>


; <Skipped let __proj__Mktuple11__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_be7571e73b0e7fc24d03efe0e003c054 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___4>


; <Skipped let __proj__Mktuple11__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_97ae7d913e508c46c48c3b51553d4459 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___5>


; <Skipped let __proj__Mktuple11__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1dca311798936510e0ead61e14cf32a6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___6>


; <Skipped let __proj__Mktuple11__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_eec431ea31093a646681ef2ceb2e2986 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___7>


; <Skipped let __proj__Mktuple11__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_689b2f06e9fd83f7a84ce80a13d338c6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___8>


; <Skipped let __proj__Mktuple11__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_20210a3d9498f929cb7aa68d9e8b5ebf () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___9>


; <Skipped let __proj__Mktuple11__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_96812f2124d88760b2002bbe1502c3c9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___10>


; <Skipped let __proj__Mktuple11__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_abcfa2582f68905d460c5ef4a7642f2d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___11>


; <Skipped let __proj__Mktuple11__item___11/>


; <Start encoding type FStar.Pervasives.Native.tuple12>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple12 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple12@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__12 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple12
(declare-fun FStar.Pervasives.Native.Mktuple12@tok () Term)
(declare-fun Tm_arrow_4d5cd995d6f44a2ec39d0f193be0be65 () Term)

; <start constructor FStar.Pervasives.Native.tuple12>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple12 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
389)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple12 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple12))))

; </end constructor FStar.Pervasives.Native.tuple12>


; <start constructor FStar.Pervasives.Native.Mktuple12>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple12 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
396)
(= __@x0
(FStar.Pervasives.Native.Mktuple12 (FStar.Pervasives.Native.Mktuple12__a __@x0)
(FStar.Pervasives.Native.Mktuple12__b __@x0)
(FStar.Pervasives.Native.Mktuple12__c __@x0)
(FStar.Pervasives.Native.Mktuple12__d __@x0)
(FStar.Pervasives.Native.Mktuple12__e __@x0)
(FStar.Pervasives.Native.Mktuple12__f __@x0)
(FStar.Pervasives.Native.Mktuple12__g __@x0)
(FStar.Pervasives.Native.Mktuple12__h __@x0)
(FStar.Pervasives.Native.Mktuple12__i __@x0)
(FStar.Pervasives.Native.Mktuple12__j __@x0)
(FStar.Pervasives.Native.Mktuple12__k __@x0)
(FStar.Pervasives.Native.Mktuple12__l __@x0)
(FStar.Pervasives.Native.Mktuple12__1 __@x0)
(FStar.Pervasives.Native.Mktuple12__2 __@x0)
(FStar.Pervasives.Native.Mktuple12__3 __@x0)
(FStar.Pervasives.Native.Mktuple12__4 __@x0)
(FStar.Pervasives.Native.Mktuple12__5 __@x0)
(FStar.Pervasives.Native.Mktuple12__6 __@x0)
(FStar.Pervasives.Native.Mktuple12__7 __@x0)
(FStar.Pervasives.Native.Mktuple12__8 __@x0)
(FStar.Pervasives.Native.Mktuple12__9 __@x0)
(FStar.Pervasives.Native.Mktuple12__10 __@x0)
(FStar.Pervasives.Native.Mktuple12__11 __@x0)
(FStar.Pervasives.Native.Mktuple12__12 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple12>


; </end encoding type FStar.Pervasives.Native.tuple12>


; <Start encoding assume FStar.Pervasives.Native.tuple12__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple12__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple12>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple12 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5c9f47d9090f554c9826d2f65e388f20 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple12@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple12>


; <Skipped let uu___is_Mktuple12/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_618941d7cf5ddbaabe15df8579b4a387 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___1>


; <Skipped let __proj__Mktuple12__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_84e9e2280e9bcb3233e4f33f86d66ea6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___2>


; <Skipped let __proj__Mktuple12__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1fa79c5abf9f18607bd2e46a1a6967fa () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___3>


; <Skipped let __proj__Mktuple12__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_0f49c582489d782b08195e81221181dc () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___4>


; <Skipped let __proj__Mktuple12__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_29b7181ebb44f9e4a45f95c4f8478c6a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___5>


; <Skipped let __proj__Mktuple12__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3cc2863a7d7f23e3916fa1e43483cb90 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___6>


; <Skipped let __proj__Mktuple12__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c7deea49701ab64a73985bf522e46359 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___7>


; <Skipped let __proj__Mktuple12__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_380615e7761919086537a14273a02d22 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___8>


; <Skipped let __proj__Mktuple12__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_245250918a4432b31aea8152d056489a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___9>


; <Skipped let __proj__Mktuple12__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2a967c8402c441e6d8a9336a7568e4de () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___10>


; <Skipped let __proj__Mktuple12__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_543c3feac0cd9e04ecb6cfd74ced8964 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___11>


; <Skipped let __proj__Mktuple12__item___11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e91029e2320896c60e94f554727a0c41 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___12@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___12>


; <Skipped let __proj__Mktuple12__item___12/>


; <Start encoding type FStar.Pervasives.Native.tuple13>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple13@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__m (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__12 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__13 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple13
(declare-fun FStar.Pervasives.Native.Mktuple13@tok () Term)
(declare-fun Tm_arrow_6462785e86ca440ee74ed32e1053eae3 () Term)

; <start constructor FStar.Pervasives.Native.tuple13>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple13 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
426)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple13 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple13))))

; </end constructor FStar.Pervasives.Native.tuple13>


; <start constructor FStar.Pervasives.Native.Mktuple13>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple13 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
433)
(= __@x0
(FStar.Pervasives.Native.Mktuple13 (FStar.Pervasives.Native.Mktuple13__a __@x0)
(FStar.Pervasives.Native.Mktuple13__b __@x0)
(FStar.Pervasives.Native.Mktuple13__c __@x0)
(FStar.Pervasives.Native.Mktuple13__d __@x0)
(FStar.Pervasives.Native.Mktuple13__e __@x0)
(FStar.Pervasives.Native.Mktuple13__f __@x0)
(FStar.Pervasives.Native.Mktuple13__g __@x0)
(FStar.Pervasives.Native.Mktuple13__h __@x0)
(FStar.Pervasives.Native.Mktuple13__i __@x0)
(FStar.Pervasives.Native.Mktuple13__j __@x0)
(FStar.Pervasives.Native.Mktuple13__k __@x0)
(FStar.Pervasives.Native.Mktuple13__l __@x0)
(FStar.Pervasives.Native.Mktuple13__m __@x0)
(FStar.Pervasives.Native.Mktuple13__1 __@x0)
(FStar.Pervasives.Native.Mktuple13__2 __@x0)
(FStar.Pervasives.Native.Mktuple13__3 __@x0)
(FStar.Pervasives.Native.Mktuple13__4 __@x0)
(FStar.Pervasives.Native.Mktuple13__5 __@x0)
(FStar.Pervasives.Native.Mktuple13__6 __@x0)
(FStar.Pervasives.Native.Mktuple13__7 __@x0)
(FStar.Pervasives.Native.Mktuple13__8 __@x0)
(FStar.Pervasives.Native.Mktuple13__9 __@x0)
(FStar.Pervasives.Native.Mktuple13__10 __@x0)
(FStar.Pervasives.Native.Mktuple13__11 __@x0)
(FStar.Pervasives.Native.Mktuple13__12 __@x0)
(FStar.Pervasives.Native.Mktuple13__13 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple13>


; </end encoding type FStar.Pervasives.Native.tuple13>


; <Start encoding assume FStar.Pervasives.Native.tuple13__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple13__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple13>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_68c092e8b387730b412c4dcf592b12d3 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple13@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple13>


; <Skipped let uu___is_Mktuple13/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_82a3dc3a5dbad615d8d4a31db238e43f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___1>


; <Skipped let __proj__Mktuple13__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1da976aaa65f1c6b8b256dfc45c41306 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___2>


; <Skipped let __proj__Mktuple13__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ca5cf529c415deee29e0a34c0c5d1c9f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___3>


; <Skipped let __proj__Mktuple13__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_94f6c578541b6cb528ca9e7dd1dacc3b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___4>


; <Skipped let __proj__Mktuple13__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_211e172b7220adc186d8a02ff17e8780 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___5>


; <Skipped let __proj__Mktuple13__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9276a4f669d8497205e8d59f12da53ba () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___6>


; <Skipped let __proj__Mktuple13__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_8aa8f381a5ed57cbbae9dcd2405ce80f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___7>


; <Skipped let __proj__Mktuple13__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_51814106613688cf259d7cdba9c24d93 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___8>


; <Skipped let __proj__Mktuple13__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_05fec25e6f03f974bb2933a910642d7e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___9>


; <Skipped let __proj__Mktuple13__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3280ee04611a7985c9d107bb1a8a330a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___10>


; <Skipped let __proj__Mktuple13__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_86c868d5d5058e8e5ec1f4d0285c7e90 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___11>


; <Skipped let __proj__Mktuple13__item___11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7263c1a3c4475bb4e4b41a1be4bf22da () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___12@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___12>


; <Skipped let __proj__Mktuple13__item___12/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___13>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_338c65ae58844787891c6f47cf01c068 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___13@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___13>


; <Skipped let __proj__Mktuple13__item___13/>


; <Start encoding type FStar.Pervasives.Native.tuple14>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple14@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__m (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__n (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__12 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__13 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__14 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple14
(declare-fun FStar.Pervasives.Native.Mktuple14@tok () Term)
(declare-fun Tm_arrow_484e3bf88a886900f7e695d7333615e9 () Term)

; <start constructor FStar.Pervasives.Native.tuple14>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple14 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
465)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple14 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple14))))

; </end constructor FStar.Pervasives.Native.tuple14>


; <start constructor FStar.Pervasives.Native.Mktuple14>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple14 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
472)
(= __@x0
(FStar.Pervasives.Native.Mktuple14 (FStar.Pervasives.Native.Mktuple14__a __@x0)
(FStar.Pervasives.Native.Mktuple14__b __@x0)
(FStar.Pervasives.Native.Mktuple14__c __@x0)
(FStar.Pervasives.Native.Mktuple14__d __@x0)
(FStar.Pervasives.Native.Mktuple14__e __@x0)
(FStar.Pervasives.Native.Mktuple14__f __@x0)
(FStar.Pervasives.Native.Mktuple14__g __@x0)
(FStar.Pervasives.Native.Mktuple14__h __@x0)
(FStar.Pervasives.Native.Mktuple14__i __@x0)
(FStar.Pervasives.Native.Mktuple14__j __@x0)
(FStar.Pervasives.Native.Mktuple14__k __@x0)
(FStar.Pervasives.Native.Mktuple14__l __@x0)
(FStar.Pervasives.Native.Mktuple14__m __@x0)
(FStar.Pervasives.Native.Mktuple14__n __@x0)
(FStar.Pervasives.Native.Mktuple14__1 __@x0)
(FStar.Pervasives.Native.Mktuple14__2 __@x0)
(FStar.Pervasives.Native.Mktuple14__3 __@x0)
(FStar.Pervasives.Native.Mktuple14__4 __@x0)
(FStar.Pervasives.Native.Mktuple14__5 __@x0)
(FStar.Pervasives.Native.Mktuple14__6 __@x0)
(FStar.Pervasives.Native.Mktuple14__7 __@x0)
(FStar.Pervasives.Native.Mktuple14__8 __@x0)
(FStar.Pervasives.Native.Mktuple14__9 __@x0)
(FStar.Pervasives.Native.Mktuple14__10 __@x0)
(FStar.Pervasives.Native.Mktuple14__11 __@x0)
(FStar.Pervasives.Native.Mktuple14__12 __@x0)
(FStar.Pervasives.Native.Mktuple14__13 __@x0)
(FStar.Pervasives.Native.Mktuple14__14 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple14>


; </end encoding type FStar.Pervasives.Native.tuple14>


; <Start encoding assume FStar.Pervasives.Native.tuple14__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple14__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple14>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2de133cfaca100fc23d8bf4b3421db9a () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple14@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple14>


; <Skipped let uu___is_Mktuple14/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2e3216cab266e138debd68d0a503c177 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___1>


; <Skipped let __proj__Mktuple14__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_958b0270e487d0bf5fe9191b9efaa127 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___2>


; <Skipped let __proj__Mktuple14__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_08349f596f8c0acf60d1587bebe8c91b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___3>


; <Skipped let __proj__Mktuple14__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2b069168147ba0f67f117ad5b0ac078b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___4>


; <Skipped let __proj__Mktuple14__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1e38bb16245a24a197c44a262fee7bf1 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___5>


; <Skipped let __proj__Mktuple14__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7a148953a3884454d8a1dffddce086bb () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___6>


; <Skipped let __proj__Mktuple14__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_812eeb3fdab56dfea8e419236740acb0 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___7>


; <Skipped let __proj__Mktuple14__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9dc932ce7cdfd6fa57f6536787fcb65b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___8>


; <Skipped let __proj__Mktuple14__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2600722933f06bc55e28bb3fc2ce4a6a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___9>


; <Skipped let __proj__Mktuple14__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f51203e57fd66f9e9293b8962c57edfe () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___10>


; <Skipped let __proj__Mktuple14__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7c34e0c28edc5fc4ad24d0b749c0adb7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___11>


; <Skipped let __proj__Mktuple14__item___11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_8772cc50ea320af17b3f2371c273679a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___12@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___12>


; <Skipped let __proj__Mktuple14__item___12/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___13>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_039da0b9a8da1a651a1c570e55456614 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___13@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___13>


; <Skipped let __proj__Mktuple14__item___13/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___14>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_579ada2eb036c15c7306dac5b648153e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___14@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___14>


; <Skipped let __proj__Mktuple14__item___14/>


; End Externals for module FStar.Pervasives.Native


; Externals for interface FStar.Pervasives


; <Start encoding val FStar.Pervasives.remove_unused_type_parameters>

(declare-fun FStar.Pervasives.remove_unused_type_parameters (Term) Term)
(declare-fun Tm_arrow_555d62757eeaf90340982fcdf25f6704 () Term)
(declare-fun FStar.Pervasives.remove_unused_type_parameters@tok () Term)

; </end encoding val FStar.Pervasives.remove_unused_type_parameters>


; <Start encoding let pattern>

(declare-fun FStar.Pervasives.pattern () Term)

; </end encoding let pattern>


; <Start encoding val FStar.Pervasives.smt_pat>

(declare-fun FStar.Pervasives.smt_pat (Term Term) Term)
(declare-fun Tm_arrow_ce7b692455ad1649f97902066cf7c9aa () Term)
(declare-fun FStar.Pervasives.smt_pat@tok () Term)

; </end encoding val FStar.Pervasives.smt_pat>


; <Start encoding val FStar.Pervasives.smt_pat_or>

(declare-fun FStar.Pervasives.smt_pat_or (Term) Term)
(declare-fun Tm_arrow_cbfaca2770c8ef7d6393b664b7ea1a41 () Term)
(declare-fun FStar.Pervasives.smt_pat_or@tok () Term)

; </end encoding val FStar.Pervasives.smt_pat_or>


; <Start encoding let eqtype_u>

(declare-fun FStar.Pervasives.eqtype_u () Term)


; </end encoding let eqtype_u>


; <Skipped effect Lemma a pre post pats = Prims.Pure a/>


; <Start encoding val FStar.Pervasives.spinoff>

(declare-fun FStar.Pervasives.spinoff (Term) Term)

(declare-fun FStar.Pervasives.spinoff@tok () Term)

; </end encoding val FStar.Pervasives.spinoff>


; <Start encoding val FStar.Pervasives.spinoff_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.spinoff_eq (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.spinoff_eq@tok () Term)

; </end encoding val FStar.Pervasives.spinoff_eq>


; <Start encoding val FStar.Pervasives.spinoff_equiv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.spinoff_equiv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.spinoff_equiv@tok () Term)

; </end encoding val FStar.Pervasives.spinoff_equiv>


; <Start encoding val FStar.Pervasives.assert_spinoff>

(declare-fun FStar.Pervasives.assert_spinoff (Term) Term)

(declare-fun Tm_arrow_071538fd1c72fb82c7bb7b280daddf84 () Term)
(declare-fun FStar.Pervasives.assert_spinoff@tok () Term)


; </end encoding val FStar.Pervasives.assert_spinoff>


; <Start encoding let id>

(declare-fun FStar.Pervasives.id (Term Term) Term)

(declare-fun FStar.Pervasives.id@tok () Term)

; </end encoding let id>


; <Start encoding let trivial_pure_post>

(declare-fun FStar.Pervasives.trivial_pure_post (Term) Term)
(declare-fun Tm_arrow_53823f439377767fbcd3e27ebcdb971b () Term)
(declare-fun FStar.Pervasives.trivial_pure_post@tok () Term)

(declare-fun Tm_abs_5e34897418ce4950a4effcc8c159cf53 (Term) Term)

; </end encoding let trivial_pure_post>


; <Start encoding val FStar.Pervasives.ambient>

(declare-fun FStar.Pervasives.ambient (Term Term) Term)
(declare-fun Tm_arrow_9e007179360e2932d75ab29019e3d7fa () Term)
(declare-fun FStar.Pervasives.ambient@tok () Term)

; </end encoding val FStar.Pervasives.ambient>


; <Start encoding val FStar.Pervasives.intro_ambient>

(declare-fun FStar.Pervasives.intro_ambient (Term Term) Term)
(declare-fun Tm_arrow_6fc6334d56387f3d408122a4bd045e7e () Term)
(declare-fun FStar.Pervasives.intro_ambient@tok () Term)

; </end encoding val FStar.Pervasives.intro_ambient>


; <Start encoding val FStar.Pervasives.normalize_term>

(declare-fun FStar.Pervasives.normalize_term (Term Term) Term)

(declare-fun FStar.Pervasives.normalize_term@tok () Term)

; </end encoding val FStar.Pervasives.normalize_term>


; <Start encoding val FStar.Pervasives.normalize>

(declare-fun FStar.Pervasives.normalize (Term) Term)

(declare-fun FStar.Pervasives.normalize@tok () Term)

; </end encoding val FStar.Pervasives.normalize>


; <Start encoding val FStar.Pervasives.norm_step>

(declare-fun FStar.Pervasives.norm_step () Term)

; </end encoding val FStar.Pervasives.norm_step>


; <Start encoding val FStar.Pervasives.simplify>

(declare-fun FStar.Pervasives.simplify (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.simplify>


; <Start encoding val FStar.Pervasives.weak>

(declare-fun FStar.Pervasives.weak (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.weak>


; <Start encoding val FStar.Pervasives.hnf>

(declare-fun FStar.Pervasives.hnf (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.hnf>


; <Start encoding val FStar.Pervasives.primops>

(declare-fun FStar.Pervasives.primops (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.primops>


; <Start encoding val FStar.Pervasives.delta>

(declare-fun FStar.Pervasives.delta (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.delta>


; <Start encoding val FStar.Pervasives.norm_debug>

(declare-fun FStar.Pervasives.norm_debug (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.norm_debug>


; <Start encoding val FStar.Pervasives.zeta>

(declare-fun FStar.Pervasives.zeta (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.zeta>


; <Start encoding val FStar.Pervasives.zeta_full>

(declare-fun FStar.Pervasives.zeta_full (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.zeta_full>


; <Start encoding val FStar.Pervasives.iota>

(declare-fun FStar.Pervasives.iota (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.iota>


; <Start encoding val FStar.Pervasives.nbe>

(declare-fun FStar.Pervasives.nbe (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.nbe>


; <Start encoding val FStar.Pervasives.reify_>

(declare-fun FStar.Pervasives.reify_ (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.reify_>


; <Start encoding val FStar.Pervasives.delta_only>

(declare-fun FStar.Pervasives.delta_only (Term) Term)
(declare-fun Tm_arrow_f14a20345cd55ddda96b6c4cc49e05f1 () Term)
(declare-fun FStar.Pervasives.delta_only@tok () Term)

; </end encoding val FStar.Pervasives.delta_only>


; <Start encoding val FStar.Pervasives.delta_fully>

(declare-fun FStar.Pervasives.delta_fully (Term) Term)

(declare-fun FStar.Pervasives.delta_fully@tok () Term)

; </end encoding val FStar.Pervasives.delta_fully>


; <Start encoding val FStar.Pervasives.delta_attr>

(declare-fun FStar.Pervasives.delta_attr (Term) Term)

(declare-fun FStar.Pervasives.delta_attr@tok () Term)

; </end encoding val FStar.Pervasives.delta_attr>


; <Start encoding val FStar.Pervasives.delta_qualifier>

(declare-fun FStar.Pervasives.delta_qualifier (Term) Term)

(declare-fun FStar.Pervasives.delta_qualifier@tok () Term)

; </end encoding val FStar.Pervasives.delta_qualifier>


; <Start encoding val FStar.Pervasives.delta_namespace>

(declare-fun FStar.Pervasives.delta_namespace (Term) Term)

(declare-fun FStar.Pervasives.delta_namespace@tok () Term)

; </end encoding val FStar.Pervasives.delta_namespace>


; <Start encoding val FStar.Pervasives.unmeta>

(declare-fun FStar.Pervasives.unmeta (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unmeta>


; <Start encoding val FStar.Pervasives.unascribe>

(declare-fun FStar.Pervasives.unascribe (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unascribe>


; <Start encoding val FStar.Pervasives.norm>

(declare-fun FStar.Pervasives.norm (Term Term Term) Term)
(declare-fun Tm_arrow_7d92e7a4aa7eee4098b10c5f1b3d77ea () Term)
(declare-fun FStar.Pervasives.norm@tok () Term)

; </end encoding val FStar.Pervasives.norm>


; <Start encoding val FStar.Pervasives.assert_norm>

(declare-fun FStar.Pervasives.assert_norm (Term) Term)

(declare-fun Tm_arrow_ee24fcf624d074d3c637ee61e4a867fb () Term)
(declare-fun FStar.Pervasives.assert_norm@tok () Term)


; </end encoding val FStar.Pervasives.assert_norm>


; <Start encoding val FStar.Pervasives.normalize_term_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.normalize_term_spec (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.normalize_term_spec@tok () Term)

; </end encoding val FStar.Pervasives.normalize_term_spec>


; <Start encoding val FStar.Pervasives.normalize_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.normalize_spec (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.normalize_spec@tok () Term)

; </end encoding val FStar.Pervasives.normalize_spec>


; <Start encoding val FStar.Pervasives.norm_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.norm_spec (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.norm_spec@tok () Term)

; </end encoding val FStar.Pervasives.norm_spec>


; <Start encoding let reveal_opaque>

(declare-fun FStar.Pervasives.reveal_opaque (Term Term) Term)
(declare-fun Tm_refine_2be30877b98f57c6ef5847ce3a81c23c (Term Term Term) Term)
(declare-fun Tm_arrow_ba8e05da7828191e456b9d6196e5c486 (Term Term) Term)
(declare-fun Tm_arrow_a3d09fecedc35d104f95c5fde10a81ff () Term)
(declare-fun FStar.Pervasives.reveal_opaque@tok () Term)



; </end encoding let reveal_opaque>


; <Start encoding let pure_return>

(declare-fun FStar.Pervasives.pure_return (Term Term) Term)
(declare-fun Tm_arrow_0dff8d294aeaf0b1d7e9cad664c9a15f () Term)
(declare-fun FStar.Pervasives.pure_return@tok () Term)

(declare-fun Tm_abs_bc5117f6a06a581c69e04141781c86d0 (Term Term Term) Term)
(declare-fun Tm_arrow_c88a29758356586fc450d481d4b685f3 (Term) Term)
(declare-fun Tm_abs_bdac9a3f32789788b83138a3a4262d0d (Term Term) Term)

; </end encoding let pure_return>


; <Start encoding let pure_bind_wp>

(declare-fun Tm_arrow_c05bc9331677cc1a187ad7677301a601 (Term Term) Term)
(declare-fun FStar.Pervasives.pure_bind_wp (Term Term Term Term) Term)

(declare-fun Tm_arrow_f8eba41a4bcb9aca0e3c11224f695d1e () Term)
(declare-fun FStar.Pervasives.pure_bind_wp@tok () Term)


(declare-fun Tm_abs_d0f415a5361a9d7988d8e425dc193472 (Term Term Term) Term)

(declare-fun Tm_abs_72b65b71b828688dbb0ba657715a194c (Term Term Term Term) Term)

; </end encoding let pure_bind_wp>


; <Start encoding let pure_if_then_else>

(declare-fun FStar.Pervasives.pure_if_then_else (Term Term Term Term) Term)
(declare-fun Tm_arrow_5911c11ab85061b4a8acf6a6ff43aaea () Term)
(declare-fun FStar.Pervasives.pure_if_then_else@tok () Term)

(declare-fun Tm_abs_614d7ab3976dfea6b6428085a93bafcc (Term Term Term Term) Term)

; </end encoding let pure_if_then_else>


; <Start encoding let pure_ite_wp>

(declare-fun FStar.Pervasives.pure_ite_wp (Term Term) Term)
(declare-fun Tm_arrow_983cc9c1e881fffd3b37c61b327d54c8 () Term)
(declare-fun FStar.Pervasives.pure_ite_wp@tok () Term)

(declare-fun Tm_abs_ea1703a99385b474600aa7a3bdb045c5 (Term Term Term) Term)
(declare-fun Tm_arrow_b275e247a67e3e77d7c5997d864d1247 (Term) Term)
(declare-fun Tm_abs_f9993abe3e10fc5902262cf22e5f5e1c (Term Term Term) Term)

(declare-fun Tm_abs_a4d8a67e708eb0f8e41d6eefd90d8b3d (Term Term) Term)

; </end encoding let pure_ite_wp>


; <Start encoding let pure_close_wp>


(declare-fun FStar.Pervasives.pure_close_wp (Term Term Term) Term)

(declare-fun Tm_arrow_6424f17922e38fc8eb3b7ad8d9107d78 () Term)
(declare-fun FStar.Pervasives.pure_close_wp@tok () Term)




(declare-fun Tm_abs_bef01cdc202d648a37f7725a1e8579fa (Term Term Term) Term)

; </end encoding let pure_close_wp>


; <Start encoding let pure_null_wp>

(declare-fun FStar.Pervasives.pure_null_wp (Term) Term)
(declare-fun Tm_arrow_e02f472dad10492b4fdaf21971ae643f () Term)
(declare-fun FStar.Pervasives.pure_null_wp@tok () Term)



(declare-fun Tm_abs_c7a599bd05f6d553477b7b3a5a51d357 (Term) Term)

; </end encoding let pure_null_wp>


; <Start encoding let pure_assert_wp>

(declare-fun FStar.Pervasives.pure_assert_wp (Term) Term)

(declare-fun FStar.Pervasives.pure_assert_wp@tok () Term)

; </end encoding let pure_assert_wp>


; <Start encoding let pure_assume_wp>

(declare-fun FStar.Pervasives.pure_assume_wp (Term) Term)

(declare-fun FStar.Pervasives.pure_assume_wp@tok () Term)

; </end encoding let pure_assume_wp>


; <Skipped new_effect { DIV ... }/>


; <Skipped sub_effect PURE ~> DIV/>


; <Start encoding let div_hoare_to_wp>

(declare-fun FStar.Pervasives.div_hoare_to_wp (Term Term Term) Term)
(declare-fun Tm_arrow_e81e37f60b892c60a4b806bfecd6c240 () Term)
(declare-fun FStar.Pervasives.div_hoare_to_wp@tok () Term)




(declare-fun Tm_abs_69982e78bbdc9cbdfcc98c8c3ec276f1 (Term Term Term Term) Term)


(declare-fun Tm_abs_95829b03554cf2093d2bc29e28500b94 (Term Term Term) Term)

; </end encoding let div_hoare_to_wp>


; <Skipped effect Div a pre post = FStar.Pervasives.DIV a/>


; <Skipped effect Dv a = FStar.Pervasives.DIV a/>


; <Skipped effect EXT a = FStar.Pervasives.Dv a/>


; <Start encoding let st_pre_h>

(declare-fun FStar.Pervasives.st_pre_h (Term) Term)

(declare-fun FStar.Pervasives.st_pre_h@tok () Term)


; </end encoding let st_pre_h>


; <Start encoding let st_post_h'>

(declare-fun FStar.Pervasives.st_post_h_ (Term Term Term) Term)
(declare-fun Tm_arrow_659175ed40df3b798f91ffaee9e689bd () Term)
(declare-fun FStar.Pervasives.st_post_h_@tok () Term)

(declare-fun Tm_arrow_14435f7112db17792f8cd33f8f7ea859 (Term Term Term) Term)

; </end encoding let st_post_h'>


; <Start encoding let st_post_h>

(declare-fun FStar.Pervasives.st_post_h (Term Term) Term)

(declare-fun FStar.Pervasives.st_post_h@tok () Term)

; </end encoding let st_post_h>


; <Start encoding let st_wp_h>

(declare-fun FStar.Pervasives.st_wp_h (Term Term) Term)

(declare-fun FStar.Pervasives.st_wp_h@tok () Term)
(declare-fun Tm_arrow_c80b139653078194d2de90941effdc68 (Term Term) Term)

; </end encoding let st_wp_h>


; <Start encoding let st_return>

(declare-fun FStar.Pervasives.st_return (Term Term Term Term) Term)

(declare-fun Tm_arrow_6bfe4bf6faf1fb53a521d575cefc35ef () Term)
(declare-fun FStar.Pervasives.st_return@tok () Term)


; </end encoding let st_return>


; <Start encoding let st_bind_wp>

(declare-fun Tm_arrow_c6e0af8c2ccbdda79db5c09d07e87e35 (Term Term Term) Term)
(declare-fun FStar.Pervasives.st_bind_wp (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_0eca50df2f29485bdbf578799f16b4a6 () Term)
(declare-fun FStar.Pervasives.st_bind_wp@tok () Term)

(declare-fun Tm_arrow_eb9b1a038524b37579c152a3f169145e (Term Term) Term)
(declare-fun Tm_abs_0f3b5ee9eaa8de8cacad7d3dcacb4558 (Term Term Term Term) Term)

; </end encoding let st_bind_wp>


; <Start encoding let st_if_then_else>

(declare-fun FStar.Pervasives.st_if_then_else (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_6e48361e1a1c92df6ec1ff87e622ddad () Term)
(declare-fun FStar.Pervasives.st_if_then_else@tok () Term)

; </end encoding let st_if_then_else>


; <Start encoding let st_ite_wp>

(declare-fun FStar.Pervasives.st_ite_wp (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_eaad896c6afdcb7ade2e80b5a6a930af () Term)
(declare-fun FStar.Pervasives.st_ite_wp@tok () Term)

; </end encoding let st_ite_wp>


; <Start encoding let st_stronger>

(declare-fun FStar.Pervasives.st_stronger (Term Term Term Term) Term)
(declare-fun Tm_arrow_ae4d7f489de84317e0022bf89d45dd95 () Term)
(declare-fun FStar.Pervasives.st_stronger@tok () Term)

; </end encoding let st_stronger>


; <Start encoding let st_close_wp>


(declare-fun FStar.Pervasives.st_close_wp (Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_de6d3045642382698e9e38d41acfd7cc () Term)
(declare-fun FStar.Pervasives.st_close_wp@tok () Term)


; </end encoding let st_close_wp>


; <Start encoding let st_trivial>

(declare-fun FStar.Pervasives.st_trivial (Term Term Term) Term)
(declare-fun Tm_arrow_f145e04ff3c7033bdfc718f7f5bb1df0 () Term)
(declare-fun FStar.Pervasives.st_trivial@tok () Term)

(declare-fun Tm_abs_89b21c42be5bc00d63e29f63ae20d4e2 (Term Term) Term)

; </end encoding let st_trivial>


; <Skipped new_effect { STATE_h ... }/>


; <Start encoding type FStar.Pervasives.result>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.result (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.result@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.V (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.V_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.V_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.V
(declare-fun FStar.Pervasives.V@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.E (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.E_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.E_e (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.E
(declare-fun FStar.Pervasives.E@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Err (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Err_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Err_msg (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Err
(declare-fun FStar.Pervasives.Err@tok () Term)
(declare-fun Tm_arrow_30908143640041985b9200e2fb38a259 () Term)
(declare-fun Tm_arrow_f8bb10130fea772e0f786d78a188c381 () Term)
(declare-fun Tm_arrow_93661c87034b0b64c4714dafbe2b02e6 () Term)

; <start constructor FStar.Pervasives.result>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.result ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
263)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Pervasives.result @x0))
 
;;no pats
:qid is-FStar.Pervasives.result))))

; </end constructor FStar.Pervasives.result>


; <start constructor FStar.Pervasives.V>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.V ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
270)
(= __@x0
(FStar.Pervasives.V (FStar.Pervasives.V_a __@x0)
(FStar.Pervasives.V_v __@x0)))))

; </end constructor FStar.Pervasives.V>


; <start constructor FStar.Pervasives.E>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.E ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
275)
(= __@x0
(FStar.Pervasives.E (FStar.Pervasives.E_a __@x0)
(FStar.Pervasives.E_e __@x0)))))

; </end constructor FStar.Pervasives.E>


; <start constructor FStar.Pervasives.Err>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Err ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
280)
(= __@x0
(FStar.Pervasives.Err (FStar.Pervasives.Err_a __@x0)
(FStar.Pervasives.Err_msg __@x0)))))

; </end constructor FStar.Pervasives.Err>


; </end encoding type FStar.Pervasives.result>


; <Start encoding val FStar.Pervasives.uu___is_V>

(declare-fun FStar.Pervasives.uu___is_V (Term Term) Term)
(declare-fun Tm_arrow_5cd1d0722a6a986faf6f8e557186fe24 () Term)
(declare-fun FStar.Pervasives.uu___is_V@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_V>


; <Skipped let uu___is_V/>


; <Start encoding val FStar.Pervasives.__proj__V__item__v>

(declare-fun Tm_refine_9db520b26a7f39c5a01493a3f375290d (Term) Term)
(declare-fun FStar.Pervasives.__proj__V__item__v (Term Term) Term)

(declare-fun Tm_arrow_1ea119bf213c016916a7095486e28467 () Term)
(declare-fun FStar.Pervasives.__proj__V__item__v@tok () Term)

; </end encoding val FStar.Pervasives.__proj__V__item__v>


; <Skipped let __proj__V__item__v/>


; <Start encoding val FStar.Pervasives.uu___is_E>

(declare-fun FStar.Pervasives.uu___is_E (Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_E@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_E>


; <Skipped let uu___is_E/>


; <Start encoding val FStar.Pervasives.__proj__E__item__e>

(declare-fun Tm_refine_95e1e2ee29104754cc3740f5575fc6e5 (Term) Term)
(declare-fun FStar.Pervasives.__proj__E__item__e (Term Term) Term)

(declare-fun Tm_arrow_19e73c373dbf3f9945c6fcfce8a07661 () Term)
(declare-fun FStar.Pervasives.__proj__E__item__e@tok () Term)

; </end encoding val FStar.Pervasives.__proj__E__item__e>


; <Skipped let __proj__E__item__e/>


; <Start encoding val FStar.Pervasives.uu___is_Err>

(declare-fun FStar.Pervasives.uu___is_Err (Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_Err@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Err>


; <Skipped let uu___is_Err/>


; <Start encoding val FStar.Pervasives.__proj__Err__item__msg>

(declare-fun Tm_refine_22fb403854eba07427f92e79848f9d9f (Term) Term)
(declare-fun FStar.Pervasives.__proj__Err__item__msg (Term Term) Term)

(declare-fun Tm_arrow_f7e3debb858e412c9497460c5187d5cd () Term)
(declare-fun FStar.Pervasives.__proj__Err__item__msg@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Err__item__msg>


; <Skipped let __proj__Err__item__msg/>


; <Start encoding let ex_pre>

(declare-fun FStar.Pervasives.ex_pre () Term)

; </end encoding let ex_pre>


; <Start encoding let ex_post'>

(declare-fun FStar.Pervasives.ex_post_ (Term Term) Term)

(declare-fun FStar.Pervasives.ex_post_@tok () Term)
(declare-fun Tm_refine_a4dcdeeacbcb04d05a6720f786918fd6 (Term Term) Term)
(declare-fun Tm_arrow_68b66d987e8a7bdf825af8b370553e65 (Term Term) Term)

; </end encoding let ex_post'>


; <Start encoding let ex_post>

(declare-fun FStar.Pervasives.ex_post (Term) Term)

(declare-fun FStar.Pervasives.ex_post@tok () Term)

; </end encoding let ex_post>


; <Start encoding let ex_wp>

(declare-fun FStar.Pervasives.ex_wp (Term) Term)

(declare-fun FStar.Pervasives.ex_wp@tok () Term)
(declare-fun Tm_arrow_58168e52ae0908fefec42cac825ecc69 (Term) Term)

; </end encoding let ex_wp>


; <Start encoding let ex_return>

(declare-fun FStar.Pervasives.ex_return (Term Term Term) Term)
(declare-fun Tm_arrow_375264f6f19b4e37d33ffba9f6b1c7d2 () Term)
(declare-fun FStar.Pervasives.ex_return@tok () Term)

; </end encoding let ex_return>


; <Start encoding let ex_bind_wp>

(declare-fun Tm_arrow_3eb2992a529511f5b0ff2fef4e4594ad (Term Term) Term)
(declare-fun FStar.Pervasives.ex_bind_wp (Term Term Term Term Term) Term)

(declare-fun Tm_arrow_1da2056f1a2fe3dc8db7decf5cbd5885 () Term)
(declare-fun FStar.Pervasives.ex_bind_wp@tok () Term)

(declare-fun Tm_arrow_ca5db633696caf7e0cd44c11654eed8b (Term) Term)
(declare-fun Tm_abs_c1d9037a5cc10cc07ba9b6a7a58728db (Term Term Term Term) Term)

; </end encoding let ex_bind_wp>


; <Start encoding let ex_if_then_else>

(declare-fun FStar.Pervasives.ex_if_then_else (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_08bd7ce530cc6e8b4a3f8dadbd0806b0 () Term)
(declare-fun FStar.Pervasives.ex_if_then_else@tok () Term)

; </end encoding let ex_if_then_else>


; <Start encoding let ex_ite_wp>

(declare-fun FStar.Pervasives.ex_ite_wp (Term Term Term) Term)
(declare-fun Tm_arrow_c2a8c761b16a75376b24262cd8c50369 () Term)
(declare-fun FStar.Pervasives.ex_ite_wp@tok () Term)

; </end encoding let ex_ite_wp>


; <Start encoding let ex_stronger>

(declare-fun FStar.Pervasives.ex_stronger (Term Term Term) Term)
(declare-fun Tm_arrow_1376d97b5d43e7d77d56729e2a3e04af () Term)
(declare-fun FStar.Pervasives.ex_stronger@tok () Term)

; </end encoding let ex_stronger>


; <Start encoding let ex_close_wp>


(declare-fun FStar.Pervasives.ex_close_wp (Term Term Term Term) Term)

(declare-fun Tm_arrow_814af0adff92aa08c5b8b0951bcb1959 () Term)
(declare-fun FStar.Pervasives.ex_close_wp@tok () Term)


; </end encoding let ex_close_wp>


; <Start encoding let ex_trivial>

(declare-fun FStar.Pervasives.ex_trivial (Term Term) Term)
(declare-fun Tm_arrow_ee4a787765920b0cb4357a47a0d3ac5c () Term)
(declare-fun FStar.Pervasives.ex_trivial@tok () Term)

(declare-fun Tm_abs_5cc223716d095f4545f0dcc745acad5d (Term) Term)

; </end encoding let ex_trivial>


; <Skipped new_effect { EXN ... }/>


; <Skipped effect Exn a pre post = FStar.Pervasives.EXN a/>


; <Start encoding let lift_div_exn>

(declare-fun FStar.Pervasives.lift_div_exn (Term Term Term) Term)
(declare-fun Tm_arrow_8196682216f286f6fe3a7dffb3de7d02 () Term)
(declare-fun FStar.Pervasives.lift_div_exn@tok () Term)

(declare-fun Tm_abs_c2b605ddd5d1991642baf5762d2b1dc5 (Term Term) Term)

; </end encoding let lift_div_exn>


; <Skipped sub_effect DIV ~> EXN/>


; <Skipped effect Ex a = FStar.Pervasives.Exn a/>


; <Start encoding let all_pre_h>

(declare-fun FStar.Pervasives.all_pre_h (Term) Term)

(declare-fun FStar.Pervasives.all_pre_h@tok () Term)


; </end encoding let all_pre_h>


; <Start encoding let all_post_h'>

(declare-fun FStar.Pervasives.all_post_h_ (Term Term Term) Term)

(declare-fun FStar.Pervasives.all_post_h_@tok () Term)

(declare-fun Tm_arrow_fc269489cb2e24a10c7710a1f7f9d269 (Term Term Term) Term)

; </end encoding let all_post_h'>


; <Start encoding let all_post_h>

(declare-fun FStar.Pervasives.all_post_h (Term Term) Term)

(declare-fun FStar.Pervasives.all_post_h@tok () Term)

; </end encoding let all_post_h>


; <Start encoding let all_wp_h>

(declare-fun FStar.Pervasives.all_wp_h (Term Term) Term)

(declare-fun FStar.Pervasives.all_wp_h@tok () Term)
(declare-fun Tm_arrow_1cd90c71d90a216d9fb0ba0321a1d3b5 (Term Term) Term)

; </end encoding let all_wp_h>


; <Start encoding let all_return>

(declare-fun FStar.Pervasives.all_return (Term Term Term Term) Term)

(declare-fun Tm_arrow_3f61557667800fb54cc62e48a5201f9d () Term)
(declare-fun FStar.Pervasives.all_return@tok () Term)


; </end encoding let all_return>


; <Start encoding let all_bind_wp>

(declare-fun Tm_arrow_b567b509414635f00096b9b1c3e30b57 (Term Term Term) Term)
(declare-fun FStar.Pervasives.all_bind_wp (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_6ac18e25eb49f55ae0ce9c14679ecc22 () Term)
(declare-fun FStar.Pervasives.all_bind_wp@tok () Term)

(declare-fun Tm_arrow_59cac8a9b1ae3aa9511b8a867f8e934e (Term Term) Term)
(declare-fun Tm_abs_35ddc99cefc0079215f6f6ab3c58856d (Term Term Term Term Term) Term)

; </end encoding let all_bind_wp>


; <Start encoding let all_if_then_else>

(declare-fun FStar.Pervasives.all_if_then_else (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_491eee2c8dc4eab4d420326a8285d2c4 () Term)
(declare-fun FStar.Pervasives.all_if_then_else@tok () Term)

; </end encoding let all_if_then_else>


; <Start encoding let all_ite_wp>

(declare-fun FStar.Pervasives.all_ite_wp (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_20fdb4e6d0c32f949f55e39a059913a7 () Term)
(declare-fun FStar.Pervasives.all_ite_wp@tok () Term)

; </end encoding let all_ite_wp>


; <Start encoding let all_stronger>

(declare-fun FStar.Pervasives.all_stronger (Term Term Term Term) Term)
(declare-fun Tm_arrow_073b21d0ec8edf2dda32907b45ec5f68 () Term)
(declare-fun FStar.Pervasives.all_stronger@tok () Term)

; </end encoding let all_stronger>


; <Start encoding let all_close_wp>


(declare-fun FStar.Pervasives.all_close_wp (Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_803d195802308e8beadf04438d3a6508 () Term)
(declare-fun FStar.Pervasives.all_close_wp@tok () Term)


; </end encoding let all_close_wp>


; <Start encoding let all_trivial>

(declare-fun FStar.Pervasives.all_trivial (Term Term Term) Term)
(declare-fun Tm_arrow_957927b0d25001784693eee8b2182308 () Term)
(declare-fun FStar.Pervasives.all_trivial@tok () Term)

(declare-fun Tm_abs_22e463dbd987016e31d6bc67025a7cd9 (Term Term) Term)

; </end encoding let all_trivial>


; <Skipped new_effect { ALL_h ... }/>


; <Start encoding val FStar.Pervasives.inversion>

(declare-fun FStar.Pervasives.inversion (Term) Term)

(declare-fun FStar.Pervasives.inversion@tok () Term)

; </end encoding val FStar.Pervasives.inversion>


; <Start encoding val FStar.Pervasives.allow_inversion>

(declare-fun FStar.Pervasives.allow_inversion (Term) Term)
(declare-fun Tm_refine_363615bee79fae5066b7c8bd06c286d0 (Term) Term)
(declare-fun Tm_arrow_bcab9cce464ec0f76562bc48c17ba410 () Term)
(declare-fun FStar.Pervasives.allow_inversion@tok () Term)


; </end encoding val FStar.Pervasives.allow_inversion>


; <Start encoding val FStar.Pervasives.invertOption>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.invertOption (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.invertOption@tok () Term)

; </end encoding val FStar.Pervasives.invertOption>


; <Start encoding type FStar.Pervasives.either>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.either (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.either@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Inl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Inl
(declare-fun FStar.Pervasives.Inl@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Inr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Inr
(declare-fun FStar.Pervasives.Inr@tok () Term)
(declare-fun Tm_arrow_065da0adeba0c4ae0da1476ececee84c () Term)
(declare-fun Tm_arrow_c883938642e6d97d79c975d8d94b4aac () Term)

; <start constructor FStar.Pervasives.either>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.either ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
402)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(FStar.Pervasives.either @x0
@x1))
 
;;no pats
:qid is-FStar.Pervasives.either))))

; </end constructor FStar.Pervasives.either>


; <start constructor FStar.Pervasives.Inl>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Inl ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
409)
(= __@x0
(FStar.Pervasives.Inl (FStar.Pervasives.Inl_a __@x0)
(FStar.Pervasives.Inl_b __@x0)
(FStar.Pervasives.Inl_v __@x0)))))

; </end constructor FStar.Pervasives.Inl>


; <start constructor FStar.Pervasives.Inr>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Inr ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
414)
(= __@x0
(FStar.Pervasives.Inr (FStar.Pervasives.Inr_a __@x0)
(FStar.Pervasives.Inr_b __@x0)
(FStar.Pervasives.Inr_v __@x0)))))

; </end constructor FStar.Pervasives.Inr>


; </end encoding type FStar.Pervasives.either>


; <Start encoding assume FStar.Pervasives.either__uu___haseq>


; </end encoding assume FStar.Pervasives.either__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Inl>

(declare-fun FStar.Pervasives.uu___is_Inl (Term Term Term) Term)
(declare-fun Tm_arrow_af0c68f1e39d4d6020c0873b16730c7d () Term)
(declare-fun FStar.Pervasives.uu___is_Inl@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Inl>


; <Skipped let uu___is_Inl/>


; <Start encoding val FStar.Pervasives.__proj__Inl__item__v>

(declare-fun Tm_refine_85e0cc884f8457202f90cd77f23733ba (Term Term) Term)
(declare-fun FStar.Pervasives.__proj__Inl__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_a80e0750277867ba1a434ad3bba8702d () Term)
(declare-fun FStar.Pervasives.__proj__Inl__item__v@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Inl__item__v>


; <Skipped let __proj__Inl__item__v/>


; <Start encoding val FStar.Pervasives.uu___is_Inr>

(declare-fun FStar.Pervasives.uu___is_Inr (Term Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_Inr@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Inr>


; <Skipped let uu___is_Inr/>


; <Start encoding val FStar.Pervasives.__proj__Inr__item__v>

(declare-fun Tm_refine_8f1f5f564dae90240db429de2eb41517 (Term Term) Term)
(declare-fun FStar.Pervasives.__proj__Inr__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_df618db6b42762940f198036c8a56200 () Term)
(declare-fun FStar.Pervasives.__proj__Inr__item__v@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Inr__item__v>


; <Skipped let __proj__Inr__item__v/>


; <Start encoding let dfst>


(declare-fun FStar.Pervasives.dfst (Term Term Term) Term)


(declare-fun FStar.Pervasives.dfst@tok () Term)


; </end encoding let dfst>


; <Start encoding let dsnd>


(declare-fun FStar.Pervasives.dsnd (Term Term Term) Term)


(declare-fun FStar.Pervasives.dsnd@tok () Term)


; </end encoding let dsnd>


; <Start encoding type FStar.Pervasives.dtuple3>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple3@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple3 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__3 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Mkdtuple3
(declare-fun FStar.Pervasives.Mkdtuple3@tok () Term)

(declare-fun Tm_arrow_0b6559e6ff3addf84b0c2880affbb335 (Term Term) Term)




(declare-fun Tm_arrow_8423f67df62f9e824c55756f9e26058d () Term)

; <start constructor FStar.Pervasives.dtuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
450)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple3 @x0
@x1
@x2))
 
;;no pats
:qid is-FStar.Pervasives.dtuple3))))

; </end constructor FStar.Pervasives.dtuple3>


; <start constructor FStar.Pervasives.Mkdtuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
461)
(= __@x0
(FStar.Pervasives.Mkdtuple3 (FStar.Pervasives.Mkdtuple3_a __@x0)
(FStar.Pervasives.Mkdtuple3_b __@x0)
(FStar.Pervasives.Mkdtuple3_c __@x0)
(FStar.Pervasives.Mkdtuple3__1 __@x0)
(FStar.Pervasives.Mkdtuple3__2 __@x0)
(FStar.Pervasives.Mkdtuple3__3 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple3>


; </end encoding type FStar.Pervasives.dtuple3>


; <Start encoding assume FStar.Pervasives.dtuple3__uu___haseq>




; </end encoding assume FStar.Pervasives.dtuple3__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Mkdtuple3>



(declare-fun FStar.Pervasives.uu___is_Mkdtuple3 (Term Term Term Term) Term)


(declare-fun Tm_arrow_70452cb82cd0a282ca9a2dbeb54c1b04 () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple3@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Mkdtuple3>


; <Skipped let uu___is_Mkdtuple3/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple3__item___1>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___1 (Term Term Term Term) Term)


(declare-fun Tm_arrow_255f0cfe499b1d2e9836e157bce1dba3 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___1@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple3__item___1>


; <Skipped let __proj__Mkdtuple3__item___1/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple3__item___2>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___2 (Term Term Term Term) Term)


(declare-fun Tm_arrow_ea1ded11f7d194a26e812f407333a011 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___2@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple3__item___2>


; <Skipped let __proj__Mkdtuple3__item___2/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple3__item___3>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___3 (Term Term Term Term) Term)


(declare-fun Tm_arrow_1d7ad5cfa0fff643640e3f74466d283e () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___3@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple3__item___3>


; <Skipped let __proj__Mkdtuple3__item___3/>


; <Start encoding type FStar.Pervasives.dtuple4>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple4 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple4@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple4 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__4 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Mkdtuple4
(declare-fun FStar.Pervasives.Mkdtuple4@tok () Term)


(declare-fun Tm_arrow_af8eda99ba3685403be22a88669dcb35 (Term Term Term) Term)






(declare-fun Tm_arrow_cef44a6056754f192c2446237c4c1408 () Term)

; <start constructor FStar.Pervasives.dtuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
519)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple4 @x0
@x1
@x2
@x3))
 
;;no pats
:qid is-FStar.Pervasives.dtuple4))))

; </end constructor FStar.Pervasives.dtuple4>


; <start constructor FStar.Pervasives.Mkdtuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
532)
(= __@x0
(FStar.Pervasives.Mkdtuple4 (FStar.Pervasives.Mkdtuple4_a __@x0)
(FStar.Pervasives.Mkdtuple4_b __@x0)
(FStar.Pervasives.Mkdtuple4_c __@x0)
(FStar.Pervasives.Mkdtuple4_d __@x0)
(FStar.Pervasives.Mkdtuple4__1 __@x0)
(FStar.Pervasives.Mkdtuple4__2 __@x0)
(FStar.Pervasives.Mkdtuple4__3 __@x0)
(FStar.Pervasives.Mkdtuple4__4 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple4>


; </end encoding type FStar.Pervasives.dtuple4>


; <Start encoding assume FStar.Pervasives.dtuple4__uu___haseq>





; </end encoding assume FStar.Pervasives.dtuple4__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Mkdtuple4>




(declare-fun FStar.Pervasives.uu___is_Mkdtuple4 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_76a226dc2cea2ddd4e4258637fc95e5b () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple4@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Mkdtuple4>


; <Skipped let uu___is_Mkdtuple4/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___1>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___1 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_1da4d60ab69f411b912e76cc25e77965 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___1@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___1>


; <Skipped let __proj__Mkdtuple4__item___1/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___2>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___2 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_a86867091548f3d7d3ca1cb8b0458b9f () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___2@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___2>


; <Skipped let __proj__Mkdtuple4__item___2/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___3>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___3 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_ee72552fcc293405aa0e854ba26f27ac () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___3@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___3>


; <Skipped let __proj__Mkdtuple4__item___3/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___4>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___4 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_6c79def96aa5d5d9eb9555c48dd9ebb6 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___4@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___4>


; <Skipped let __proj__Mkdtuple4__item___4/>


; <Start encoding type FStar.Pervasives.dtuple5>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple5 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple5@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple5 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__5 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Mkdtuple5
(declare-fun FStar.Pervasives.Mkdtuple5@tok () Term)



(declare-fun Tm_arrow_e2051b23ee191036cd2c8f08b57577cc (Term Term Term Term) Term)








(declare-fun Tm_arrow_7c47a0b67fa3d6e69e51a1ade2982e74 () Term)

; <start constructor FStar.Pervasives.dtuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
626)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple5 @x0
@x1
@x2
@x3
@x4))
 
;;no pats
:qid is-FStar.Pervasives.dtuple5))))

; </end constructor FStar.Pervasives.dtuple5>


; <start constructor FStar.Pervasives.Mkdtuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
641)
(= __@x0
(FStar.Pervasives.Mkdtuple5 (FStar.Pervasives.Mkdtuple5_a __@x0)
(FStar.Pervasives.Mkdtuple5_b __@x0)
(FStar.Pervasives.Mkdtuple5_c __@x0)
(FStar.Pervasives.Mkdtuple5_d __@x0)
(FStar.Pervasives.Mkdtuple5_e __@x0)
(FStar.Pervasives.Mkdtuple5__1 __@x0)
(FStar.Pervasives.Mkdtuple5__2 __@x0)
(FStar.Pervasives.Mkdtuple5__3 __@x0)
(FStar.Pervasives.Mkdtuple5__4 __@x0)
(FStar.Pervasives.Mkdtuple5__5 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple5>


; </end encoding type FStar.Pervasives.dtuple5>


; <Start encoding assume FStar.Pervasives.dtuple5__uu___haseq>






; </end encoding assume FStar.Pervasives.dtuple5__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Mkdtuple5>





(declare-fun FStar.Pervasives.uu___is_Mkdtuple5 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_790317d9d2afaf2417875fd8f65cee9f () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple5@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Mkdtuple5>


; <Skipped let uu___is_Mkdtuple5/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___1>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___1 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_855676d3a54fc2cdf0dfa3ac2f15fdad () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___1@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___1>


; <Skipped let __proj__Mkdtuple5__item___1/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___2>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___2 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_3c181aa1af161d84af20412908ff5981 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___2@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___2>


; <Skipped let __proj__Mkdtuple5__item___2/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___3>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___3 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_cc152ea4c314cfd6854de94e70041031 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___3@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___3>


; <Skipped let __proj__Mkdtuple5__item___3/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___4>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___4 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_6a05465acf4f8d1b8f43fd30077a772a () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___4@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___4>


; <Skipped let __proj__Mkdtuple5__item___4/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___5>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___5 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_d5d61b48d54646c5c411627b3a20c98f () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___5@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___5>


; <Skipped let __proj__Mkdtuple5__item___5/>


; <Start encoding let ignore>

(declare-fun FStar.Pervasives.ignore (Term Term) Term)
(declare-fun Tm_arrow_962476a7eea46a6ffc9b658c6d8fbc71 () Term)
(declare-fun FStar.Pervasives.ignore@tok () Term)

; </end encoding let ignore>


; <Start encoding val FStar.Pervasives.false_elim>

(declare-fun Tm_refine_f1ecc6ab6882a651504f328937700647 () Term)
(declare-fun FStar.Pervasives.false_elim (Term Term) Term)

(declare-fun Tm_arrow_7636fbfab5cd88ba06f60c10ea8caef2 () Term)
(declare-fun FStar.Pervasives.false_elim@tok () Term)

; </end encoding val FStar.Pervasives.false_elim>


; <Start encoding type FStar.Pervasives.__internal_ocaml_attributes>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.__internal_ocaml_attributes () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingShow () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.PpxDerivingShow
(declare-fun FStar.Pervasives.PpxDerivingShow@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingShowConstant (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.PpxDerivingShowConstant__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.PpxDerivingShowConstant
(declare-fun FStar.Pervasives.PpxDerivingShowConstant@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingYoJson () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.PpxDerivingYoJson
(declare-fun FStar.Pervasives.PpxDerivingYoJson@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CInline () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CInline
(declare-fun FStar.Pervasives.CInline@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Substitute () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Substitute
(declare-fun FStar.Pervasives.Substitute@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Gc () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Gc
(declare-fun FStar.Pervasives.Gc@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Comment (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Comment__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Comment
(declare-fun FStar.Pervasives.Comment@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CPrologue (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CPrologue__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CPrologue
(declare-fun FStar.Pervasives.CPrologue@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CEpilogue (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CEpilogue__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CEpilogue
(declare-fun FStar.Pervasives.CEpilogue@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CConst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CConst__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CConst
(declare-fun FStar.Pervasives.CConst@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CCConv (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CCConv__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CCConv
(declare-fun FStar.Pervasives.CCConv@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CAbstractStruct () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CAbstractStruct
(declare-fun FStar.Pervasives.CAbstractStruct@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CIfDef () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CIfDef
(declare-fun FStar.Pervasives.CIfDef@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CMacro () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CMacro
(declare-fun FStar.Pervasives.CMacro@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CNoInline () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CNoInline
(declare-fun FStar.Pervasives.CNoInline@tok () Term)
(declare-fun Tm_arrow_a25c6dbdd7c43412e925069991c0ef48 () Term)






; <start constructor FStar.Pervasives.__internal_ocaml_attributes>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.__internal_ocaml_attributes ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
775)
(= __@x0
FStar.Pervasives.__internal_ocaml_attributes)))

; </end constructor FStar.Pervasives.__internal_ocaml_attributes>


; <start constructor FStar.Pervasives.PpxDerivingShow>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingShow ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
781)
(= __@x0
FStar.Pervasives.PpxDerivingShow)))

; </end constructor FStar.Pervasives.PpxDerivingShow>


; <start constructor FStar.Pervasives.PpxDerivingShowConstant>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingShowConstant ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
783)
(= __@x0
(FStar.Pervasives.PpxDerivingShowConstant (FStar.Pervasives.PpxDerivingShowConstant__0 __@x0)))))

; </end constructor FStar.Pervasives.PpxDerivingShowConstant>


; <start constructor FStar.Pervasives.PpxDerivingYoJson>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingYoJson ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
788)
(= __@x0
FStar.Pervasives.PpxDerivingYoJson)))

; </end constructor FStar.Pervasives.PpxDerivingYoJson>


; <start constructor FStar.Pervasives.CInline>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CInline ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
790)
(= __@x0
FStar.Pervasives.CInline)))

; </end constructor FStar.Pervasives.CInline>


; <start constructor FStar.Pervasives.Substitute>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Substitute ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
792)
(= __@x0
FStar.Pervasives.Substitute)))

; </end constructor FStar.Pervasives.Substitute>


; <start constructor FStar.Pervasives.Gc>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Gc ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
794)
(= __@x0
FStar.Pervasives.Gc)))

; </end constructor FStar.Pervasives.Gc>


; <start constructor FStar.Pervasives.Comment>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Comment ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
796)
(= __@x0
(FStar.Pervasives.Comment (FStar.Pervasives.Comment__0 __@x0)))))

; </end constructor FStar.Pervasives.Comment>


; <start constructor FStar.Pervasives.CPrologue>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CPrologue ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
801)
(= __@x0
(FStar.Pervasives.CPrologue (FStar.Pervasives.CPrologue__0 __@x0)))))

; </end constructor FStar.Pervasives.CPrologue>


; <start constructor FStar.Pervasives.CEpilogue>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CEpilogue ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
806)
(= __@x0
(FStar.Pervasives.CEpilogue (FStar.Pervasives.CEpilogue__0 __@x0)))))

; </end constructor FStar.Pervasives.CEpilogue>


; <start constructor FStar.Pervasives.CConst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CConst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
811)
(= __@x0
(FStar.Pervasives.CConst (FStar.Pervasives.CConst__0 __@x0)))))

; </end constructor FStar.Pervasives.CConst>


; <start constructor FStar.Pervasives.CCConv>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CCConv ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
816)
(= __@x0
(FStar.Pervasives.CCConv (FStar.Pervasives.CCConv__0 __@x0)))))

; </end constructor FStar.Pervasives.CCConv>


; <start constructor FStar.Pervasives.CAbstractStruct>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CAbstractStruct ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
821)
(= __@x0
FStar.Pervasives.CAbstractStruct)))

; </end constructor FStar.Pervasives.CAbstractStruct>


; <start constructor FStar.Pervasives.CIfDef>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CIfDef ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
823)
(= __@x0
FStar.Pervasives.CIfDef)))

; </end constructor FStar.Pervasives.CIfDef>


; <start constructor FStar.Pervasives.CMacro>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CMacro ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
825)
(= __@x0
FStar.Pervasives.CMacro)))

; </end constructor FStar.Pervasives.CMacro>


; <start constructor FStar.Pervasives.CNoInline>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CNoInline ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
827)
(= __@x0
FStar.Pervasives.CNoInline)))

; </end constructor FStar.Pervasives.CNoInline>


; </end encoding type FStar.Pervasives.__internal_ocaml_attributes>


; <Start encoding assume FStar.Pervasives.__internal_ocaml_attributes__uu___haseq>


; </end encoding assume FStar.Pervasives.__internal_ocaml_attributes__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_PpxDerivingShow>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShow (Term) Term)
(declare-fun Tm_arrow_89dc0c243f5e74d4fefc48cfe123db41 () Term)
(declare-fun FStar.Pervasives.uu___is_PpxDerivingShow@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_PpxDerivingShow>


; <Skipped let uu___is_PpxDerivingShow/>


; <Start encoding val FStar.Pervasives.uu___is_PpxDerivingShowConstant>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShowConstant (Term) Term)

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShowConstant@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_PpxDerivingShowConstant>


; <Skipped let uu___is_PpxDerivingShowConstant/>


; <Start encoding val FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0>

(declare-fun Tm_refine_564db2f0aa0878b4d96c60508be3dd36 () Term)
(declare-fun FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0 (Term) Term)

(declare-fun Tm_arrow_dbb84ef8131159481071b6d6a41b7f31 () Term)
(declare-fun FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0>


; <Skipped let __proj__PpxDerivingShowConstant__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_PpxDerivingYoJson>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingYoJson (Term) Term)

(declare-fun FStar.Pervasives.uu___is_PpxDerivingYoJson@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_PpxDerivingYoJson>


; <Skipped let uu___is_PpxDerivingYoJson/>


; <Start encoding val FStar.Pervasives.uu___is_CInline>

(declare-fun FStar.Pervasives.uu___is_CInline (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CInline@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CInline>


; <Skipped let uu___is_CInline/>


; <Start encoding val FStar.Pervasives.uu___is_Substitute>

(declare-fun FStar.Pervasives.uu___is_Substitute (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Substitute@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Substitute>


; <Skipped let uu___is_Substitute/>


; <Start encoding val FStar.Pervasives.uu___is_Gc>

(declare-fun FStar.Pervasives.uu___is_Gc (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Gc@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Gc>


; <Skipped let uu___is_Gc/>


; <Start encoding val FStar.Pervasives.uu___is_Comment>

(declare-fun FStar.Pervasives.uu___is_Comment (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Comment@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Comment>


; <Skipped let uu___is_Comment/>


; <Start encoding val FStar.Pervasives.__proj__Comment__item___0>

(declare-fun Tm_refine_c53089e2d20d1b0f5a267296ac8e45f0 () Term)
(declare-fun FStar.Pervasives.__proj__Comment__item___0 (Term) Term)

(declare-fun Tm_arrow_d4c2bbf4fb852b3f4b9961c7cbc2f3a2 () Term)
(declare-fun FStar.Pervasives.__proj__Comment__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Comment__item___0>


; <Skipped let __proj__Comment__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CPrologue>

(declare-fun FStar.Pervasives.uu___is_CPrologue (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CPrologue@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CPrologue>


; <Skipped let uu___is_CPrologue/>


; <Start encoding val FStar.Pervasives.__proj__CPrologue__item___0>

(declare-fun Tm_refine_ac46c1a2a06ce46a180e0eda48004c47 () Term)
(declare-fun FStar.Pervasives.__proj__CPrologue__item___0 (Term) Term)

(declare-fun Tm_arrow_929b9daa0a2a2e99e3571b146c52feaf () Term)
(declare-fun FStar.Pervasives.__proj__CPrologue__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CPrologue__item___0>


; <Skipped let __proj__CPrologue__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CEpilogue>

(declare-fun FStar.Pervasives.uu___is_CEpilogue (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CEpilogue@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CEpilogue>


; <Skipped let uu___is_CEpilogue/>


; <Start encoding val FStar.Pervasives.__proj__CEpilogue__item___0>

(declare-fun Tm_refine_47384bef739d1f0729fd782d351dc9a5 () Term)
(declare-fun FStar.Pervasives.__proj__CEpilogue__item___0 (Term) Term)

(declare-fun Tm_arrow_e37361b66babb46a30183ad1ff072689 () Term)
(declare-fun FStar.Pervasives.__proj__CEpilogue__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CEpilogue__item___0>


; <Skipped let __proj__CEpilogue__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CConst>

(declare-fun FStar.Pervasives.uu___is_CConst (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CConst@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CConst>


; <Skipped let uu___is_CConst/>


; <Start encoding val FStar.Pervasives.__proj__CConst__item___0>

(declare-fun Tm_refine_5036c6b2983454bc3afeffcba3f00f50 () Term)
(declare-fun FStar.Pervasives.__proj__CConst__item___0 (Term) Term)

(declare-fun Tm_arrow_2d0b7639551b88b0df758d7b36c8f77a () Term)
(declare-fun FStar.Pervasives.__proj__CConst__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CConst__item___0>


; <Skipped let __proj__CConst__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CCConv>

(declare-fun FStar.Pervasives.uu___is_CCConv (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CCConv@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CCConv>


; <Skipped let uu___is_CCConv/>


; <Start encoding val FStar.Pervasives.__proj__CCConv__item___0>

(declare-fun Tm_refine_2c4510f48649a66c3dca1fc9e3a2d320 () Term)
(declare-fun FStar.Pervasives.__proj__CCConv__item___0 (Term) Term)

(declare-fun Tm_arrow_b7e884ec94708f2b05c42d4d8834eac6 () Term)
(declare-fun FStar.Pervasives.__proj__CCConv__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CCConv__item___0>


; <Skipped let __proj__CCConv__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CAbstractStruct>

(declare-fun FStar.Pervasives.uu___is_CAbstractStruct (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CAbstractStruct@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CAbstractStruct>


; <Skipped let uu___is_CAbstractStruct/>


; <Start encoding val FStar.Pervasives.uu___is_CIfDef>

(declare-fun FStar.Pervasives.uu___is_CIfDef (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CIfDef@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CIfDef>


; <Skipped let uu___is_CIfDef/>


; <Start encoding val FStar.Pervasives.uu___is_CMacro>

(declare-fun FStar.Pervasives.uu___is_CMacro (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CMacro@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CMacro>


; <Skipped let uu___is_CMacro/>


; <Start encoding val FStar.Pervasives.uu___is_CNoInline>

(declare-fun FStar.Pervasives.uu___is_CNoInline (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CNoInline@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CNoInline>


; <Skipped let uu___is_CNoInline/>


; <Start encoding val FStar.Pervasives.inline_let>

(declare-fun FStar.Pervasives.inline_let (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.inline_let>


; <Start encoding val FStar.Pervasives.rename_let>

(declare-fun FStar.Pervasives.rename_let (Term) Term)

(declare-fun FStar.Pervasives.rename_let@tok () Term)

; </end encoding val FStar.Pervasives.rename_let>


; <Start encoding val FStar.Pervasives.plugin>

(declare-fun FStar.Pervasives.plugin (Term) Term)
(declare-fun Tm_arrow_f12575a0ee171a8be16a63e3359708f8 () Term)
(declare-fun FStar.Pervasives.plugin@tok () Term)

; </end encoding val FStar.Pervasives.plugin>


; <Start encoding val FStar.Pervasives.tcnorm>

(declare-fun FStar.Pervasives.tcnorm (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.tcnorm>


; <Start encoding val FStar.Pervasives.must_erase_for_extraction>

(declare-fun FStar.Pervasives.must_erase_for_extraction (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.must_erase_for_extraction>


; <Start encoding val FStar.Pervasives.dm4f_bind_range>

(declare-fun FStar.Pervasives.dm4f_bind_range (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.dm4f_bind_range>


; <Start encoding val FStar.Pervasives.expect_failure>

(declare-fun FStar.Pervasives.expect_failure (Term) Term)

(declare-fun FStar.Pervasives.expect_failure@tok () Term)

; </end encoding val FStar.Pervasives.expect_failure>


; <Start encoding val FStar.Pervasives.expect_lax_failure>

(declare-fun FStar.Pervasives.expect_lax_failure (Term) Term)

(declare-fun FStar.Pervasives.expect_lax_failure@tok () Term)

; </end encoding val FStar.Pervasives.expect_lax_failure>


; <Start encoding val FStar.Pervasives.tcdecltime>

(declare-fun FStar.Pervasives.tcdecltime (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.tcdecltime>


; <Start encoding val FStar.Pervasives.unifier_hint_injective>

(declare-fun FStar.Pervasives.unifier_hint_injective (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unifier_hint_injective>


; <Start encoding val FStar.Pervasives.strict_on_arguments>

(declare-fun FStar.Pervasives.strict_on_arguments (Term) Term)

(declare-fun FStar.Pervasives.strict_on_arguments@tok () Term)

; </end encoding val FStar.Pervasives.strict_on_arguments>


; <Start encoding val FStar.Pervasives.resolve_implicits>

(declare-fun FStar.Pervasives.resolve_implicits (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.resolve_implicits>


; <Start encoding val FStar.Pervasives.override_resolve_implicits_handler>

(declare-fun FStar.Pervasives.override_resolve_implicits_handler (Term Term Term) Term)
(declare-fun Tm_arrow_93e6548cfc250f7cc25301579d62a018 () Term)
(declare-fun FStar.Pervasives.override_resolve_implicits_handler@tok () Term)

; </end encoding val FStar.Pervasives.override_resolve_implicits_handler>


; <Start encoding val FStar.Pervasives.handle_smt_goals>

(declare-fun FStar.Pervasives.handle_smt_goals (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.handle_smt_goals>


; <Start encoding val FStar.Pervasives.erasable>

(declare-fun FStar.Pervasives.erasable (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.erasable>


; <Start encoding val FStar.Pervasives.commute_nested_matches>

(declare-fun FStar.Pervasives.commute_nested_matches (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.commute_nested_matches>


; <Start encoding val FStar.Pervasives.noextract_to>

(declare-fun FStar.Pervasives.noextract_to (Term) Term)

(declare-fun FStar.Pervasives.noextract_to@tok () Term)

; </end encoding val FStar.Pervasives.noextract_to>


; <Start encoding val FStar.Pervasives.normalize_for_extraction>

(declare-fun FStar.Pervasives.normalize_for_extraction (Term) Term)
(declare-fun Tm_arrow_5a371649389ebd695db0478470787cef () Term)
(declare-fun FStar.Pervasives.normalize_for_extraction@tok () Term)

; </end encoding val FStar.Pervasives.normalize_for_extraction>


; <Start encoding val FStar.Pervasives.ite_soundness_by>

(declare-fun FStar.Pervasives.ite_soundness_by (Term) Term)
(declare-fun Tm_arrow_0c55530a575bf8e94add46ffb548393c () Term)
(declare-fun FStar.Pervasives.ite_soundness_by@tok () Term)

; </end encoding val FStar.Pervasives.ite_soundness_by>


; <Start encoding val FStar.Pervasives.default_effect>

(declare-fun FStar.Pervasives.default_effect (Term) Term)

(declare-fun FStar.Pervasives.default_effect@tok () Term)

; </end encoding val FStar.Pervasives.default_effect>


; <Start encoding val FStar.Pervasives.top_level_effect>

(declare-fun FStar.Pervasives.top_level_effect (Term) Term)

(declare-fun FStar.Pervasives.top_level_effect@tok () Term)

; </end encoding val FStar.Pervasives.top_level_effect>


; <Start encoding val FStar.Pervasives.effect_param>

(declare-fun FStar.Pervasives.effect_param (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.effect_param>


; <Start encoding val FStar.Pervasives.bind_has_range_args>

(declare-fun FStar.Pervasives.bind_has_range_args (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.bind_has_range_args>


; <Start encoding val FStar.Pervasives.primitive_extraction>

(declare-fun FStar.Pervasives.primitive_extraction (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.primitive_extraction>


; <Start encoding val FStar.Pervasives.extract_as_impure_effect>

(declare-fun FStar.Pervasives.extract_as_impure_effect (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.extract_as_impure_effect>


; <Start encoding val FStar.Pervasives.strictly_positive>

(declare-fun FStar.Pervasives.strictly_positive (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.strictly_positive>


; <Start encoding val FStar.Pervasives.unused>

(declare-fun FStar.Pervasives.unused (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unused>


; <Start encoding val FStar.Pervasives.no_auto_projectors>

(declare-fun FStar.Pervasives.no_auto_projectors (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.no_auto_projectors>


; <Start encoding val FStar.Pervasives.no_auto_projectors_decls>

(declare-fun FStar.Pervasives.no_auto_projectors_decls (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.no_auto_projectors_decls>


; <Start encoding val FStar.Pervasives.no_subtyping>

(declare-fun FStar.Pervasives.no_subtyping (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.no_subtyping>


; <Start encoding val FStar.Pervasives.admit_termination>

(declare-fun FStar.Pervasives.admit_termination (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.admit_termination>


; <Start encoding val FStar.Pervasives.singleton>

(declare-fun FStar.Pervasives.singleton (Term Term) Term)
(declare-fun Tm_refine_2fbd657fe85bcb2423f9c7e5f9b3bcb5 (Term Term) Term)
(declare-fun Tm_arrow_9cdb4ebd85da757e86217b6fb07ef9fc () Term)
(declare-fun FStar.Pervasives.singleton@tok () Term)


; </end encoding val FStar.Pervasives.singleton>


; <Start encoding let eqtype_as_type>

(declare-fun FStar.Pervasives.eqtype_as_type (Term) Term)
(declare-fun Tm_arrow_7e9afc6da5407011473323ad80ff51bf () Term)
(declare-fun FStar.Pervasives.eqtype_as_type@tok () Term)

; </end encoding let eqtype_as_type>


; <Start encoding let coerce_eq>

(declare-fun Tm_refine_0dee8cb03258a67c2f7ec66427696212 (Term Term) Term)
(declare-fun FStar.Pervasives.coerce_eq (Term Term Term Term) Term)

(declare-fun Tm_arrow_f44173fb14fa6046eedce5f32cb8aae8 () Term)
(declare-fun FStar.Pervasives.coerce_eq@tok () Term)


; </end encoding let coerce_eq>


; <Start encoding val FStar.Pervasives.coercion>

(declare-fun FStar.Pervasives.coercion (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.coercion>


; <Start encoding val FStar.Pervasives.desugar_of_variant_record>

(declare-fun FStar.Pervasives.desugar_of_variant_record (Term) Term)

(declare-fun FStar.Pervasives.desugar_of_variant_record@tok () Term)

; </end encoding val FStar.Pervasives.desugar_of_variant_record>


; <Start encoding val FStar.Pervasives.defer_to>

(declare-fun FStar.Pervasives.defer_to (Term Term) Term)

(declare-fun FStar.Pervasives.defer_to@tok () Term)

; </end encoding val FStar.Pervasives.defer_to>


; End Externals for interface FStar.Pervasives


; Externals for module FStar.Mul


; <Start encoding let op_Star>

(declare-fun FStar.Mul.op_Star (Term Term) Term)

(declare-fun FStar.Mul.op_Star@tok () Term)

; </end encoding let op_Star>


; End Externals for module FStar.Mul


; Externals for interface FStar.Ghost


; <Start encoding val FStar.Ghost.erased>

(declare-fun FStar.Ghost.erased (Term) Term)

(declare-fun FStar.Ghost.erased@tok () Term)

; </end encoding val FStar.Ghost.erased>


; <Start encoding val FStar.Ghost.reveal>

(declare-fun FStar.Ghost.reveal (Term Term) Term)
(declare-fun Tm_ghost_arrow_e2f4c1991753137c5a80c115428d0cef () Term)
(declare-fun FStar.Ghost.reveal@tok () Term)

; </end encoding val FStar.Ghost.reveal>


; <Start encoding val FStar.Ghost.hide>

(declare-fun FStar.Ghost.hide (Term Term) Term)
(declare-fun Tm_arrow_643f1030585ddc96db34fbedd5533726 () Term)
(declare-fun FStar.Ghost.hide@tok () Term)

; </end encoding val FStar.Ghost.hide>


; <Start encoding val FStar.Ghost.hide_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Ghost.hide_reveal (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Ghost.hide_reveal@tok () Term)

; </end encoding val FStar.Ghost.hide_reveal>


; <Start encoding val FStar.Ghost.reveal_hide>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Ghost.reveal_hide (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Ghost.reveal_hide@tok () Term)

; </end encoding val FStar.Ghost.reveal_hide>


; <Start encoding let tot_to_gtot>

(declare-fun Tm_arrow_6980332764c4493a7b0df5c02f7aefbe (Term Term) Term)
(declare-fun FStar.Ghost.tot_to_gtot (Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_c9fd3b742fd348c1f0aa2b7131578f3e () Term)
(declare-fun FStar.Ghost.tot_to_gtot@tok () Term)


; </end encoding let tot_to_gtot>


; <Start encoding let return>

(declare-fun FStar.Ghost.return (Term Term) Term)

(declare-fun FStar.Ghost.return@tok () Term)

; </end encoding let return>


; <Start encoding let bind>

(declare-fun Tm_arrow_5716b68879f92aa07a25325dea2a598d (Term Term) Term)
(declare-fun FStar.Ghost.bind (Term Term Term Term) Term)

(declare-fun Tm_arrow_744e10832c82c923706888158b99b0fe () Term)
(declare-fun FStar.Ghost.bind@tok () Term)


; </end encoding let bind>


; <Start encoding let op_let_At>


(declare-fun FStar.Ghost.op_let_At (Term Term Term Term) Term)


(declare-fun FStar.Ghost.op_let_At@tok () Term)


; </end encoding let op_let_At>


; <Start encoding let elift1>


(declare-fun FStar.Ghost.elift1 (Term Term Term Term) Term)

(declare-fun Tm_refine_785b445c1ccb59eaa8c666ff5bddec28 (Term Term Term Term) Term)
(declare-fun Tm_arrow_da89250ece049a2244626f93975cd557 () Term)
(declare-fun FStar.Ghost.elift1@tok () Term)


; </end encoding let elift1>


; <Start encoding let elift2>

(declare-fun Tm_ghost_arrow_44164f5e759c8937bc211b53dca29861 (Term Term Term) Term)
(declare-fun FStar.Ghost.elift2 (Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_65079789b5ee069d4dcb71b5d5562419 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3bc5977a48f4c4aa4cd3ebcf331fe3f9 () Term)
(declare-fun FStar.Ghost.elift2@tok () Term)


; </end encoding let elift2>


; <Start encoding let elift3>

(declare-fun Tm_ghost_arrow_c3cf725ad58bf27e304b88d311d2ef4d (Term Term Term Term) Term)
(declare-fun FStar.Ghost.elift3 (Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_f701336f04214efabf1dc8fb653177ef (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_d597747eb30e55a029a57bb56ae3576b () Term)
(declare-fun FStar.Ghost.elift3@tok () Term)


; </end encoding let elift3>


; <Start encoding let push_refinement>


(declare-fun Tm_refine_4861ff30b18822886452f698558931e8 (Term Term) Term)
(declare-fun FStar.Ghost.push_refinement (Term Term Term) Term)


(declare-fun Tm_refine_36af295866c873249daf08f8d623a269 (Term Term Term) Term)
(declare-fun Tm_arrow_08d120582cc4dfdc7e90cb9038e8f6b8 () Term)
(declare-fun FStar.Ghost.push_refinement@tok () Term)





; </end encoding let push_refinement>


; <Start encoding let elift1_p>


(declare-fun Tm_refine_9f8cb5a84b67f50c9d5f87a914037545 (Term Term) Term)
(declare-fun Tm_ghost_arrow_8f538917cb02d75c44bfd86ed6834262 (Term Term Term) Term)

(declare-fun FStar.Ghost.elift1_p (Term Term Term Term Term) Term)





(declare-fun Tm_arrow_2f2f081c9c2a272e83f647cd86440766 () Term)
(declare-fun FStar.Ghost.elift1_p@tok () Term)


; </end encoding let elift1_p>


; <Start encoding let elift2_p>


(declare-fun Tm_refine_08698b4b6e166624b5bf789ac071b4cf (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_4f9eac2d0622ae1c34d05baa5f6854c6 (Term Term Term Term) Term)
(declare-fun Tm_refine_50e552dc638ed7dac9f2492d99576667 (Term Term Term Term) Term)
(declare-fun FStar.Ghost.elift2_p (Term Term Term Term Term Term Term) Term)





(declare-fun Tm_arrow_4243a3f87827ef2e8c38dd30c5e8518d () Term)
(declare-fun FStar.Ghost.elift2_p@tok () Term)


; </end encoding let elift2_p>


; <Start encoding let elift1_pq>



(declare-fun Tm_arrow_b9b0980b05721a41304c20e612f3108f (Term Term Term) Term)


(declare-fun Tm_ghost_arrow_3f0c334c27896d01c2e72f45e6fcb67c (Term Term Term Term) Term)

(declare-fun FStar.Ghost.elift1_pq (Term Term Term Term Term Term) Term)








(declare-fun Tm_arrow_b8eadba0211443ca5c59668f6aa4b6c9 () Term)
(declare-fun FStar.Ghost.elift1_pq@tok () Term)


; </end encoding let elift1_pq>


; <Start encoding let elift2_pq>



(declare-fun Tm_arrow_747965e95d1386c22f52f977256a903b (Term Term Term Term) Term)

(declare-fun Tm_refine_f9e3dab5c1ea39d2741639e0fe40e216 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_00838c3d276d7476d6679b97a2aa247c (Term Term Term Term Term) Term)

(declare-fun FStar.Ghost.elift2_pq (Term Term Term Term Term Term Term Term) Term)








(declare-fun Tm_arrow_b7e390954ec59dc663763c956d66957b () Term)
(declare-fun FStar.Ghost.elift2_pq@tok () Term)


; </end encoding let elift2_pq>


; End Externals for interface FStar.Ghost


; Externals for interface FStar.IndefiniteDescription


; <Start encoding val FStar.IndefiniteDescription.elim_squash>

(declare-fun FStar.IndefiniteDescription.elim_squash (Term Term) Term)
(declare-fun Tm_ghost_arrow_c6842219f247b61822e21d8f892190b3 () Term)
(declare-fun FStar.IndefiniteDescription.elim_squash@tok () Term)

; </end encoding val FStar.IndefiniteDescription.elim_squash>


; <Start encoding val FStar.IndefiniteDescription.indefinite_description_ghost>

(declare-fun Tm_arrow_81e65de2755319ee661cc1adc7d951e3 (Term) Term)
(declare-fun Tm_refine_4cc89ae73e7128e43010e5aba0ff060c (Term) Term)
(declare-fun FStar.IndefiniteDescription.indefinite_description_ghost (Term Term) Term)



(declare-fun Tm_ghost_arrow_feddccf07264e14202821ef1d50468a8 () Term)
(declare-fun FStar.IndefiniteDescription.indefinite_description_ghost@tok () Term)


; </end encoding val FStar.IndefiniteDescription.indefinite_description_ghost>


; <Start encoding val FStar.IndefiniteDescription.indefinite_description_tot>



(declare-fun FStar.IndefiniteDescription.indefinite_description_tot (Term Term) Term)



(declare-fun Tm_arrow_913328739865ec1d7344ba2324047e94 () Term)
(declare-fun FStar.IndefiniteDescription.indefinite_description_tot@tok () Term)


; </end encoding val FStar.IndefiniteDescription.indefinite_description_tot>


; <Start encoding val FStar.IndefiniteDescription.strong_excluded_middle>

(declare-fun FStar.IndefiniteDescription.strong_excluded_middle (Term) Term)
(declare-fun Tm_refine_2c7ecebd8a41d0890aab4251b61d6458 (Term) Term)
(declare-fun Tm_ghost_arrow_13b822d9f45311e725609e40f68f39a1 () Term)
(declare-fun FStar.IndefiniteDescription.strong_excluded_middle@tok () Term)


; </end encoding val FStar.IndefiniteDescription.strong_excluded_middle>


; <Start encoding val FStar.IndefiniteDescription.stronger_markovs_principle>

(declare-fun Tm_ghost_arrow_eaf0e881316979a10a835f9aef894ea3 () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle (Term) Term)

(declare-fun Tm_refine_ce62cc380d030e5cd8dfd1cf0ea19b01 (Term) Term)
(declare-fun Tm_ghost_arrow_0ecc4bb7783229ca7ca7edd38b0bab8d () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle@tok () Term)


; </end encoding val FStar.IndefiniteDescription.stronger_markovs_principle>


; <Start encoding val FStar.IndefiniteDescription.stronger_markovs_principle_prop>

(declare-fun Tm_arrow_1742ee5bbc9c9e74913cc041d85062b6 () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle_prop (Term) Term)

(declare-fun Tm_refine_e76bd1e3fcd1369d7232ec3854a8c984 (Term) Term)
(declare-fun Tm_ghost_arrow_c21c60a4b8d9409191eea9e22a1b37db () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle_prop@tok () Term)


; </end encoding val FStar.IndefiniteDescription.stronger_markovs_principle_prop>


; End Externals for interface FStar.IndefiniteDescription


; Externals for module FStar.StrongExcludedMiddle


; <Start encoding let strong_excluded_middle>

(declare-fun FStar.StrongExcludedMiddle.strong_excluded_middle (Term) Term)


(declare-fun FStar.StrongExcludedMiddle.strong_excluded_middle@tok () Term)


; </end encoding let strong_excluded_middle>


; End Externals for module FStar.StrongExcludedMiddle


; Externals for interface FStar.Classical.Sugar


; <Start encoding val FStar.Classical.Sugar.forall_elim>


(declare-fun Tm_refine_eee646ed2c0261b2e37307734e5990b8 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.forall_elim (Term Term Term Term) Term)


(declare-fun Tm_arrow_6fad81cdc8376c5921e448133045a0b5 () Term)
(declare-fun FStar.Classical.Sugar.forall_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.forall_elim>


; <Start encoding val FStar.Classical.Sugar.exists_elim>


(declare-fun Tm_refine_df2d65c00128265e81a98d1694fa32db (Term Term) Term)
(declare-fun Tm_arrow_757abf2ff34845ceba7272f2bf4c779d (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.exists_elim (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_8a831fa0f832c0a8df6d5207189d1bd6 () Term)
(declare-fun FStar.Classical.Sugar.exists_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.exists_elim>


; <Start encoding let implies_elim>

(declare-fun Tm_refine_913239c2cf9dc8a14e1f047e0206138d (Term Term) Term)
(declare-fun Tm_arrow_e5bf96e6b202d44baf035cb07df2da84 (Term) Term)
(declare-fun FStar.Classical.Sugar.implies_elim (Term Term Term Term) Term)


(declare-fun Tm_arrow_08b9f1333754078ddc08d25d2c8efab0 () Term)
(declare-fun FStar.Classical.Sugar.implies_elim@tok () Term)



; </end encoding let implies_elim>


; <Start encoding val FStar.Classical.Sugar.or_elim>

(declare-fun Tm_refine_953a6e4e702e848a7213bd619baaa22d (Term) Term)
(declare-fun Tm_arrow_0e4b9f46020ce2f098f1971a515a22d9 (Term) Term)
(declare-fun Tm_refine_044452ce08fa2077b813992baef379a7 (Term Term) Term)
(declare-fun Tm_arrow_9d84457d1c8d2a3cb1cecf47a390b833 (Term Term) Term)

(declare-fun Tm_arrow_3cd50b91a1a8ff7ae2a33f725c49ca25 (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.or_elim (Term Term Term Term Term Term) Term)






(declare-fun Tm_arrow_cd3704184434b709df08ad54743b9ddc () Term)
(declare-fun FStar.Classical.Sugar.or_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.or_elim>


; <Start encoding val FStar.Classical.Sugar.and_elim>

(declare-fun Tm_arrow_e617226e5c485cfca90836a8d37dc422 (Term) Term)
(declare-fun Tm_refine_0e6764ea7cf9747bf338120e46774802 (Term Term) Term)
(declare-fun Tm_arrow_9cf3fa74bead5ce84576f320b610d107 (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.and_elim (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_46e93521f3e2b84feb3b4c45d4b82427 () Term)
(declare-fun FStar.Classical.Sugar.and_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.and_elim>


; <Start encoding val FStar.Classical.Sugar.forall_intro>


(declare-fun Tm_arrow_e44b1a1960e76c65248b9976ee453bf1 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.forall_intro (Term Term Term) Term)



(declare-fun Tm_arrow_810fc5a930eab84e2e1c9bc10e65f526 () Term)
(declare-fun FStar.Classical.Sugar.forall_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.forall_intro>


; <Start encoding val FStar.Classical.Sugar.exists_intro>


(declare-fun Tm_arrow_1f559753133c819dcbab21eb87f04504 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.exists_intro (Term Term Term Term) Term)



(declare-fun Tm_arrow_98a6ce57193d862f12aa770d807de2d6 () Term)
(declare-fun FStar.Classical.Sugar.exists_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.exists_intro>


; <Start encoding val FStar.Classical.Sugar.implies_intro>


(declare-fun Tm_arrow_8cc28639983f141a2c2b513a3b9f2226 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.implies_intro (Term Term Term) Term)


(declare-fun Tm_refine_210741fcd012f6981d2132fb47059ae4 (Term Term) Term)
(declare-fun Tm_arrow_16ed35ee40b45e5834d942fa129fc7a5 () Term)
(declare-fun FStar.Classical.Sugar.implies_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.implies_intro>


; <Start encoding val FStar.Classical.Sugar.or_intro_left>




(declare-fun FStar.Classical.Sugar.or_intro_left (Term Term Term) Term)




(declare-fun Tm_arrow_ba201b0aaffa8c92349bb033309546c6 () Term)
(declare-fun FStar.Classical.Sugar.or_intro_left@tok () Term)


; </end encoding val FStar.Classical.Sugar.or_intro_left>


; <Start encoding val FStar.Classical.Sugar.or_intro_right>




(declare-fun Tm_arrow_c1f46761cba190a64ceda9e0b423d73a (Term Term) Term)
(declare-fun FStar.Classical.Sugar.or_intro_right (Term Term Term) Term)





(declare-fun Tm_arrow_820ce98d2bc904183444162411ef4873 () Term)
(declare-fun FStar.Classical.Sugar.or_intro_right@tok () Term)


; </end encoding val FStar.Classical.Sugar.or_intro_right>


; <Start encoding val FStar.Classical.Sugar.and_intro>




(declare-fun FStar.Classical.Sugar.and_intro (Term Term Term Term) Term)




(declare-fun Tm_arrow_74dd2a70fe5b8eefc42b899233f1e113 () Term)
(declare-fun FStar.Classical.Sugar.and_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.and_intro>


; End Externals for interface FStar.Classical.Sugar


; Externals for module FStar.List.Tot.Base


; <Skipped val FStar.List.Tot.Base.isEmpty/>


; <Start encoding let isEmpty>

(declare-fun FStar.List.Tot.Base.isEmpty (Term Term) Term)

(declare-fun FStar.List.Tot.Base.isEmpty@tok () Term)

; </end encoding let isEmpty>


; <Skipped val FStar.List.Tot.Base.hd/>


; <Start encoding let hd>


(declare-fun FStar.List.Tot.Base.hd (Term Term) Term)


(declare-fun FStar.List.Tot.Base.hd@tok () Term)


; </end encoding let hd>


; <Skipped val FStar.List.Tot.Base.tail/>


; <Start encoding let tail>


(declare-fun FStar.List.Tot.Base.tail (Term Term) Term)


(declare-fun FStar.List.Tot.Base.tail@tok () Term)


; </end encoding let tail>


; <Skipped val FStar.List.Tot.Base.tl/>


; <Start encoding let tl>


(declare-fun FStar.List.Tot.Base.tl (Term Term) Term)


(declare-fun FStar.List.Tot.Base.tl@tok () Term)


; </end encoding let tl>


; <Skipped val FStar.List.Tot.Base.last/>


; <Start encoding let rec last>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.last.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.last.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.last (Term Term) Term)
(declare-fun FStar.List.Tot.Base.last@tok () Term)





; </end encoding let rec last>


; <Skipped val FStar.List.Tot.Base.init/>


; <Start encoding let rec init>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.init.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.init.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.init (Term Term) Term)
(declare-fun FStar.List.Tot.Base.init@tok () Term)





; </end encoding let rec init>


; <Skipped val FStar.List.Tot.Base.length/>


; <Start encoding let rec length>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.length.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.length.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.length (Term Term) Term)
(declare-fun FStar.List.Tot.Base.length@tok () Term)
(declare-fun Tm_arrow_5adbd6bc13eabd8f92e79f380e1498f0 () Term)

; </end encoding let rec length>


; <Skipped val FStar.List.Tot.Base.nth/>


; <Start encoding let rec nth>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.nth.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.nth.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.nth (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.nth@tok () Term)
(declare-fun Tm_arrow_c96efec76dd44fb4c1c29ca8a004927d () Term)

; </end encoding let rec nth>


; <Skipped val FStar.List.Tot.Base.index/>


; <Start encoding let rec index>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.index.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.index.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.index (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.index@tok () Term)
(declare-fun Tm_refine_c86aba5c6243e6b7f9a4b0ad41b4e9a0 (Term Term) Term)


(declare-fun Tm_arrow_87330224a075c52374b0ca2b4b909772 () Term)

; </end encoding let rec index>


; <Skipped val FStar.List.Tot.Base.count/>


; <Start encoding let rec count>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.count.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.count.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.count (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.count@tok () Term)
(declare-fun Tm_arrow_d7494a533e0c3edea69ad484d93aa0e5 () Term)

; </end encoding let rec count>


; <Skipped val FStar.List.Tot.Base.rev_acc/>


; <Start encoding let rec rev_acc>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.rev_acc.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.rev_acc.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.rev_acc (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.rev_acc@tok () Term)
(declare-fun Tm_arrow_54e38bdd456bab4cdb32b5d540c2274c () Term)

; </end encoding let rec rev_acc>


; <Skipped val FStar.List.Tot.Base.rev/>


; <Start encoding let rev>

(declare-fun FStar.List.Tot.Base.rev (Term Term) Term)
(declare-fun Tm_arrow_f9ba16c6212a483d195bbb8ceec3eef1 () Term)
(declare-fun FStar.List.Tot.Base.rev@tok () Term)

; </end encoding let rev>


; <Skipped val FStar.List.Tot.Base.append/>


; <Start encoding let rec append>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.append.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.append.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.append (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.append@tok () Term)


; </end encoding let rec append>


; <Start encoding let op_At>

(declare-fun FStar.List.Tot.Base.op_At (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.op_At@tok () Term)

; </end encoding let op_At>


; <Skipped val FStar.List.Tot.Base.snoc/>


; <Start encoding let snoc>

(declare-fun FStar.List.Tot.Base.snoc (Term Term) Term)
(declare-fun Tm_arrow_07ff48a1c7b541b0963ce508064e29fb () Term)
(declare-fun FStar.List.Tot.Base.snoc@tok () Term)

; </end encoding let snoc>


; <Skipped val FStar.List.Tot.Base.flatten/>


; <Start encoding let rec flatten>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.flatten.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.flatten.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.flatten (Term Term) Term)
(declare-fun FStar.List.Tot.Base.flatten@tok () Term)
(declare-fun Tm_arrow_7e18fd6b36805c1f1c9a77e024fdec2e () Term)

; </end encoding let rec flatten>


; <Skipped val FStar.List.Tot.Base.map/>


; <Start encoding let rec map>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.map.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.map.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.map (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.map@tok () Term)



(declare-fun Tm_arrow_28431dcf5044bcdd56dbe625f9e3df4e () Term)

; </end encoding let rec map>


; <Skipped val FStar.List.Tot.Base.mapi_init/>


; <Start encoding let rec mapi_init>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.mapi_init.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.mapi_init.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.mapi_init (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.mapi_init@tok () Term)
(declare-fun Tm_arrow_010f318679809a99aeced42f5ba95505 (Term Term) Term)


(declare-fun Tm_arrow_9a89e146e4bb6b361bc4526b891ed1f1 () Term)

; </end encoding let rec mapi_init>


; <Skipped val FStar.List.Tot.Base.mapi/>


; <Start encoding let mapi>


(declare-fun FStar.List.Tot.Base.mapi (Term Term Term Term) Term)

(declare-fun Tm_arrow_b2a07f422fceebd0f3ee3abd5e4aeed2 () Term)
(declare-fun FStar.List.Tot.Base.mapi@tok () Term)


; </end encoding let mapi>


; <Skipped val FStar.List.Tot.Base.concatMap/>


; <Start encoding let rec concatMap>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.concatMap.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.concatMap.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.concatMap (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.concatMap@tok () Term)
(declare-fun Tm_arrow_121fa5bc200f7b3946a5e35040f266b9 (Term Term) Term)


(declare-fun Tm_arrow_c35dd4e5f8c08f94183bf93963fac92f () Term)

; </end encoding let rec concatMap>


; <Skipped val FStar.List.Tot.Base.fold_left/>


; <Start encoding let rec fold_left>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_left.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_left.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_left (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_left@tok () Term)
(declare-fun Tm_arrow_f0225aaf6b987d44876e7f498390aa39 (Term Term) Term)


(declare-fun Tm_arrow_230697841c1116c0d5f3958097856e6e () Term)

; </end encoding let rec fold_left>


; <Skipped val FStar.List.Tot.Base.fold_right/>


; <Start encoding let rec fold_right>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_right.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_right.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_right (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_right@tok () Term)
(declare-fun Tm_arrow_3c1d21b8f6dcc5e202b4ff1cafbaba81 (Term Term) Term)


(declare-fun Tm_arrow_105b39eeae3a464c82e64975ac399cdb () Term)

; </end encoding let rec fold_right>


; <Start encoding let rec fold_right_gtot>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_right_gtot (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_right_gtot@tok () Term)
(declare-fun Tm_ghost_arrow_d7e9834b8fd0407a723f5f3f4b012fdd (Term Term) Term)


(declare-fun Tm_ghost_arrow_fab043b8cdd2296e8d98a06066e4b2d2 () Term)

; </end encoding let rec fold_right_gtot>


; <Start encoding let map_gtot>


(declare-fun FStar.List.Tot.Base.map_gtot (Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_d0c7be07105bf8d5ad60b7f603c725f3 () Term)
(declare-fun FStar.List.Tot.Base.map_gtot@tok () Term)

(declare-fun Tm_ghost_arrow_21583233c98863da294c5e5d657cf78a (Term Term) Term)
(declare-fun Tm_abs_469cd3853c3ff3e8cd408b5521fdbd9d (Term Term Term) Term)

; </end encoding let map_gtot>


; <Skipped val FStar.List.Tot.Base.fold_left2/>


; <Start encoding let rec fold_left2>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_left2.fuel_instrumented (Fuel Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_left2.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_left2 (Term Term Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_left2@tok () Term)
(declare-fun Tm_arrow_40dd30796dd695d143ec6ed01d322177 (Term Term Term) Term)
(declare-fun Tm_refine_c16bc1b61f58b349bf6fc1c94dcaf83b (Term) Term)



(declare-fun Tm_arrow_3f28d1abbd43ddded682cbec516ea7bb () Term)


; </end encoding let rec fold_left2>


; <Start encoding let rec memP>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.memP.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.memP.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.memP (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.memP@tok () Term)
(declare-fun Tm_arrow_9a5de17321abf8ec257671c9a474c08a () Term)

; </end encoding let rec memP>


; <Skipped val FStar.List.Tot.Base.mem/>


; <Start encoding let rec mem>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.mem.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.mem.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.mem (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.mem@tok () Term)
(declare-fun Tm_arrow_8b16b79a9f8fab7cb6911016a8022992 () Term)

; </end encoding let rec mem>


; <Start encoding let contains>

(declare-fun FStar.List.Tot.Base.contains (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.contains@tok () Term)

; </end encoding let contains>


; <Skipped val FStar.List.Tot.Base.existsb/>


; <Start encoding let rec existsb>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.existsb.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.existsb.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.existsb (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.existsb@tok () Term)
(declare-fun Tm_arrow_84543425b818e2d10a976186b8e8c250 (Term) Term)


(declare-fun Tm_arrow_98dbecc64760e6a41f037a6881cd5df8 () Term)

; </end encoding let rec existsb>


; <Skipped val FStar.List.Tot.Base.find/>


; <Start encoding let rec find>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.find.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.find.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.find (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.find@tok () Term)

(declare-fun Tm_refine_3b1cb9ec3355fed185c658f53954b3fa (Term Term) Term)





(declare-fun Tm_arrow_286c509b12b9a2bb9bf1025c6fd97451 () Term)


; </end encoding let rec find>


; <Skipped val FStar.List.Tot.Base.filter/>


; <Start encoding let rec filter>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.filter.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.filter.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.filter (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.filter@tok () Term)



(declare-fun Tm_arrow_7c3df353a3c3ca9bc0a8454788aa9ad1 () Term)

; </end encoding let rec filter>


; <Start encoding let rec mem_filter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.mem_filter (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.mem_filter@tok () Term)

; </end encoding let rec mem_filter>


; <Start encoding let mem_filter_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.mem_filter_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.mem_filter_forall@tok () Term)


; </end encoding let mem_filter_forall>


; <Skipped val FStar.List.Tot.Base.for_all/>


; <Start encoding let rec for_all>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.for_all.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.for_all.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.for_all (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.for_all@tok () Term)





; </end encoding let rec for_all>


; <Start encoding let rec for_all_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.for_all_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.for_all_mem@tok () Term)

; </end encoding let rec for_all_mem>


; <Skipped val FStar.List.Tot.Base.collect/>


; <Start encoding let rec collect>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.collect.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.collect.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.collect (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.collect@tok () Term)





; </end encoding let rec collect>


; <Skipped val FStar.List.Tot.Base.tryFind/>


; <Start encoding let rec tryFind>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.tryFind.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.tryFind.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.tryFind (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.tryFind@tok () Term)



(declare-fun Tm_arrow_4ae6bca87a611585312b8b0d0d66fefe () Term)

; </end encoding let rec tryFind>


; <Skipped val FStar.List.Tot.Base.tryPick/>


; <Start encoding let rec tryPick>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.tryPick.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.tryPick.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.tryPick (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.tryPick@tok () Term)
(declare-fun Tm_arrow_4b0c7cc34485afa5854ebe5c95023d4c (Term Term) Term)


(declare-fun Tm_arrow_7fbbe8a710b97b9ed9c0d2dfb00b1641 () Term)

; </end encoding let rec tryPick>


; <Skipped val FStar.List.Tot.Base.choose/>


; <Start encoding let rec choose>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.choose.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.choose.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.choose (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.choose@tok () Term)



(declare-fun Tm_arrow_ee03a7411b6d8975b285ea6c772c4d89 () Term)

; </end encoding let rec choose>


; <Skipped val FStar.List.Tot.Base.partition/>


; <Start encoding let rec partition>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.partition.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.partition.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.partition (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.partition@tok () Term)



(declare-fun Tm_arrow_706f575815ce8a3bbd962da035d8aa14 () Term)

; </end encoding let rec partition>


; <Skipped val FStar.List.Tot.Base.subset/>


; <Start encoding let rec subset>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.subset.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.subset.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.subset (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.subset@tok () Term)
(declare-fun Tm_arrow_8d819a995fc33b4cb6aa699af88e8d32 () Term)

; </end encoding let rec subset>


; <Skipped val FStar.List.Tot.Base.noRepeats/>


; <Start encoding let rec noRepeats>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.noRepeats.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.noRepeats.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.noRepeats (Term Term) Term)
(declare-fun FStar.List.Tot.Base.noRepeats@tok () Term)
(declare-fun Tm_arrow_0dd285b24907a2f8b15dedffef61afa6 () Term)

; </end encoding let rec noRepeats>


; <Skipped val FStar.List.Tot.Base.no_repeats_p/>


; <Start encoding let rec no_repeats_p>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.no_repeats_p.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.no_repeats_p.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.no_repeats_p (Term Term) Term)
(declare-fun FStar.List.Tot.Base.no_repeats_p@tok () Term)
(declare-fun Tm_arrow_79c2442eab9e49d1108d2b7a240dc76e () Term)

; </end encoding let rec no_repeats_p>


; <Skipped val FStar.List.Tot.Base.assoc/>


; <Start encoding let rec assoc>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.assoc.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.assoc.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.assoc (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.assoc@tok () Term)
(declare-fun Tm_arrow_d77cf796c5b72d2c2316c0fcdad1dd79 () Term)

; </end encoding let rec assoc>


; <Skipped val FStar.List.Tot.Base.split/>


; <Start encoding let rec split>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.split.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.split.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.split (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.split@tok () Term)
(declare-fun Tm_arrow_1c3cb31b4ffa47bc6454f5b8a25e2407 () Term)

; </end encoding let rec split>


; <Start encoding let unzip>

(declare-fun FStar.List.Tot.Base.unzip (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.unzip@tok () Term)

; </end encoding let unzip>


; <Skipped val FStar.List.Tot.Base.unzip3/>


; <Start encoding let rec unzip3>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.unzip3.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.unzip3.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.unzip3 (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.unzip3@tok () Term)
(declare-fun Tm_arrow_d40be6b496fedb6f7a46205c5824b732 () Term)

; </end encoding let rec unzip3>


; <Start encoding let rec splitAt>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.splitAt.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.splitAt.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.splitAt (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.splitAt@tok () Term)
(declare-fun Tm_arrow_e36bd078e08c2ac2f1324fef6e0a4a22 () Term)

; </end encoding let rec splitAt>


; <Start encoding let rec lemma_splitAt_snd_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.lemma_splitAt_snd_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.lemma_splitAt_snd_length@tok () Term)

; </end encoding let rec lemma_splitAt_snd_length>


; <Skipped val FStar.List.Tot.Base.unsnoc/>


; <Start encoding let unsnoc>

(declare-fun Tm_refine_3f6b38b2852708f36615f9b4db0f9ff1 (Term) Term)
(declare-fun FStar.List.Tot.Base.unsnoc (Term Term) Term)

(declare-fun Tm_arrow_f4bc61622db0c39a751170734a140783 () Term)
(declare-fun FStar.List.Tot.Base.unsnoc@tok () Term)


; </end encoding let unsnoc>


; <Skipped val FStar.List.Tot.Base.split3/>


; <Start encoding let split3>


(declare-fun FStar.List.Tot.Base.split3 (Term Term Term) Term)

(declare-fun Tm_arrow_07dcb44faa0fb6172673970868e7ecff () Term)
(declare-fun FStar.List.Tot.Base.split3@tok () Term)


; </end encoding let split3>


; <Skipped val FStar.List.Tot.Base.partition_length/>


; <Start encoding let rec partition_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.partition_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.partition_length@tok () Term)

; </end encoding let rec partition_length>


; <Skipped val FStar.List.Tot.Base.bool_of_compare/>


; <Start encoding let bool_of_compare>

(declare-fun Tm_arrow_9877f854fbaabbcfda94f6c19b32ae3f (Term) Term)
(declare-fun FStar.List.Tot.Base.bool_of_compare (Term Term Term Term) Term)

(declare-fun Tm_arrow_a2f219461d35e20b7bc771538ca96429 () Term)
(declare-fun FStar.List.Tot.Base.bool_of_compare@tok () Term)


; </end encoding let bool_of_compare>


; <Skipped val FStar.List.Tot.Base.compare_of_bool/>


; <Start encoding let compare_of_bool>

(declare-fun Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e (Term) Term)
(declare-fun FStar.List.Tot.Base.compare_of_bool (Term Term Term Term) Term)

(declare-fun Tm_arrow_8b54d4820d055c327440d0d4811d3a33 () Term)
(declare-fun FStar.List.Tot.Base.compare_of_bool@tok () Term)


; </end encoding let compare_of_bool>


; <Start encoding let compare_of_bool_of_compare>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.compare_of_bool_of_compare (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.compare_of_bool_of_compare@tok () Term)

; </end encoding let compare_of_bool_of_compare>


; <Skipped val FStar.List.Tot.Base.sortWith/>


; <Start encoding let rec sortWith>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.sortWith.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.sortWith.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.sortWith (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.sortWith@tok () Term)



(declare-fun Tm_arrow_d29fb5884447b657cb725f9be68c5ba6 () Term)

; </end encoding let rec sortWith>


; <Start encoding let rec strict_suffix_of>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.strict_suffix_of (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.strict_suffix_of@tok () Term)
(declare-fun Tm_refine_da3062322c9bea8d5b2058386775b91a () Term)

(declare-fun Tm_arrow_1d91178a138c1826d6a199b1613394f1 () Term)


; </end encoding let rec strict_suffix_of>


; <Start encoding let strict_prefix_of>

(declare-fun FStar.List.Tot.Base.strict_prefix_of (Term) Term)

(declare-fun Tm_arrow_0dd65914dd84642f7849df5d67086aa0 (Term) Term)
(declare-fun Tm_arrow_25d975ae357f14f725a8d52a81f8be72 () Term)
(declare-fun FStar.List.Tot.Base.strict_prefix_of@tok () Term)



; </end encoding let strict_prefix_of>


; <Skipped val FStar.List.Tot.Base.list_unref/>


; <Start encoding let rec list_unref>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_unref.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_unref.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_unref (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_unref@tok () Term)






(declare-fun Tm_arrow_6b3a7706fc085133138f00ee506ef176 () Term)

; </end encoding let rec list_unref>


; <Skipped val FStar.List.Tot.Base.list_refb/>


; <Start encoding let rec list_refb>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_refb.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_refb.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_refb (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_refb@tok () Term)

(declare-fun Tm_refine_3dfaece5a1f8e27ecb1367ff50145048 (Term Term) Term)





(declare-fun Tm_refine_b3daba88e15ae8a9be9dd341522270b2 (Term Term Term Term) Term)

(declare-fun Tm_refine_1d1ddbacd892e41ad4ba585e87296d2e (Term Term Term) Term)










(declare-fun Tm_arrow_73c684a5823f2875fcceead4ce671ea8 () Term)







; </end encoding let rec list_refb>


; <Skipped val FStar.List.Tot.Base.list_ref/>


; <Start encoding let rec list_ref>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_ref.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_ref.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_ref (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_ref@tok () Term)

(declare-fun Tm_refine_751cc4d3e845537c495f9d7e1deb8aa9 (Term Term) Term)





(declare-fun Tm_refine_f61b92c00df29b87346e52dcf7670926 (Term Term Term Term) Term)

(declare-fun Tm_refine_16f0c42812e28aba7e30bc8c275306fb (Term Term Term) Term)










(declare-fun Tm_arrow_73f29356f974e35d230fb85375ad3965 () Term)







; </end encoding let rec list_ref>


; End Externals for module FStar.List.Tot.Base


; Externals for interface FStar.List.Tot.Properties


; <Start encoding let llist>

(declare-fun FStar.List.Tot.Properties.llist (Term Term) Term)
(declare-fun Tm_arrow_67c7b2626869cb316f118144000415b9 () Term)
(declare-fun FStar.List.Tot.Properties.llist@tok () Term)
(declare-fun Tm_refine_fbb3412f12fd58a91571022d7c9fa36d (Term Term) Term)

; </end encoding let llist>


; <Start encoding val FStar.List.Tot.Properties.mem_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_memP>


; <Start encoding val FStar.List.Tot.Properties.lemma_index_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_index_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_index_memP@tok () Term)
(declare-fun Tm_refine_bf2fa1226f2c9a0f6671df3e80ddcb8e (Term Term) Term)

; </end encoding val FStar.List.Tot.Properties.lemma_index_memP>


; <Start encoding val FStar.List.Tot.Properties.memP_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_empty@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_empty>


; <Start encoding val FStar.List.Tot.Properties.memP_existsb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_existsb (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_existsb@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_existsb>


; <Start encoding val FStar.List.Tot.Properties.memP_map_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_intro (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_map_intro>


; <Start encoding val FStar.List.Tot.Properties.memP_map_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_elim (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_elim@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_map_elim>


; <Start encoding val FStar.List.Tot.Properties.mem_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_empty@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_empty>


; <Start encoding val FStar.List.Tot.Properties.mem_existsb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_existsb (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_existsb@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_existsb>


; <Start encoding val FStar.List.Tot.Properties.mem_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_count (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_count@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_count>


; <Start encoding val FStar.List.Tot.Properties.rev_acc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_acc_length>


; <Start encoding val FStar.List.Tot.Properties.rev_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_length>


; <Start encoding val FStar.List.Tot.Properties.rev_acc_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_memP (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_acc_memP>


; <Start encoding val FStar.List.Tot.Properties.rev_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_memP>


; <Start encoding val FStar.List.Tot.Properties.rev_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_mem>


; <Start encoding val FStar.List.Tot.Properties.append_nil_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_nil_l (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_nil_l@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_nil_l>


; <Start encoding val FStar.List.Tot.Properties.append_l_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_l_nil (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_l_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_l_nil>


; <Start encoding val FStar.List.Tot.Properties.append_cons_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_cons_l (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_cons_l@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_cons_l>


; <Start encoding val FStar.List.Tot.Properties.append_l_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_l_cons (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_l_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_l_cons>


; <Start encoding val FStar.List.Tot.Properties.append_assoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_assoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_assoc@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_assoc>


; <Start encoding val FStar.List.Tot.Properties.append_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_length>


; <Start encoding val FStar.List.Tot.Properties.append_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_mem>


; <Start encoding val FStar.List.Tot.Properties.append_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_memP (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_memP>


; <Start encoding val FStar.List.Tot.Properties.append_mem_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_mem_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_mem_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_mem_forall>


; <Start encoding val FStar.List.Tot.Properties.append_memP_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_memP_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_memP_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_memP_forall>


; <Start encoding val FStar.List.Tot.Properties.append_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_count (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_count@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_count>


; <Start encoding val FStar.List.Tot.Properties.append_count_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_count_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_count_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_count_forall>


; <Start encoding val FStar.List.Tot.Properties.append_eq_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_eq_nil>


; <Start encoding val FStar.List.Tot.Properties.append_eq_singl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_singl (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_singl@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_eq_singl>


; <Start encoding val FStar.List.Tot.Properties.append_inv_head>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_head (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_head@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_inv_head>


; <Start encoding val FStar.List.Tot.Properties.append_inv_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_tail (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_tail@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_inv_tail>


; <Start encoding val FStar.List.Tot.Properties.append_length_inv_head>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_head (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_head@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_length_inv_head>


; <Start encoding val FStar.List.Tot.Properties.append_length_inv_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_tail (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_tail@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_length_inv_tail>


; <Start encoding val FStar.List.Tot.Properties.append_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_injective (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_injective@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_injective>


; <Start encoding val FStar.List.Tot.Properties.lemma_append_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_append_last (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_append_last@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_append_last>


; <Start encoding let rec rev'>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.rev_.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.rev_.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.rev_ (Term Term) Term)
(declare-fun FStar.List.Tot.Properties.rev_@tok () Term)


; </end encoding let rec rev'>


; <Start encoding let rev'T>

(declare-fun FStar.List.Tot.Properties.rev_T (Term) Term)
(declare-fun Tm_arrow_f34ce2ad5441b4bd300fa100b397737d (Term) Term)
(declare-fun Tm_arrow_42c6b27a859866d5307ff94c9f459cb1 () Term)
(declare-fun FStar.List.Tot.Properties.rev_T@tok () Term)


; </end encoding let rev'T>


; <Start encoding val FStar.List.Tot.Properties.rev_acc_rev'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_rev_ (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_rev_@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_acc_rev'>


; <Start encoding val FStar.List.Tot.Properties.rev_rev'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_rev_ (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_rev_@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_rev'>


; <Start encoding val FStar.List.Tot.Properties.rev'_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev'_append>


; <Start encoding val FStar.List.Tot.Properties.rev_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_append>


; <Start encoding val FStar.List.Tot.Properties.rev'_involutive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__involutive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__involutive@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev'_involutive>


; <Start encoding val FStar.List.Tot.Properties.rev_involutive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_involutive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_involutive@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_involutive>


; <Start encoding val FStar.List.Tot.Properties.lemma_snoc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_snoc_length>


; <Start encoding val FStar.List.Tot.Properties.rev'_list_ind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__list_ind (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__list_ind@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev'_list_ind>


; <Start encoding val FStar.List.Tot.Properties.rev_ind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_ind (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_ind@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_ind>


; <Start encoding val FStar.List.Tot.Properties.map_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_lemma@tok () Term)


; </end encoding val FStar.List.Tot.Properties.map_lemma>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_snoc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_snoc@tok () Term)
(declare-fun Tm_refine_e88aba6d4c79a5625ab4330932edf7ed (Term) Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_snoc>


; <Start encoding val FStar.List.Tot.Properties.lemma_snoc_unsnoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_unsnoc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_unsnoc@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_snoc_unsnoc>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_length>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_append>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_is_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_is_last (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_is_last@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_is_last>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_index@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_index>


; <Start encoding let rec split_using>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.split_using.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.split_using.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.split_using (Term Term Term) Term)
(declare-fun FStar.List.Tot.Properties.split_using@tok () Term)
(declare-fun Tm_refine_ca5b6dc4e0a851997703798a1ffc5f70 (Term Term) Term)


(declare-fun Tm_ghost_arrow_583c096a402961cd40d8b718fb07bacc () Term)

; </end encoding let rec split_using>


; <Start encoding val FStar.List.Tot.Properties.lemma_split_using>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_split_using (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_split_using@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_split_using>


; <Start encoding let rec index_of>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.index_of.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.index_of.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.index_of (Term Term Term) Term)
(declare-fun FStar.List.Tot.Properties.index_of@tok () Term)

(declare-fun Tm_refine_cd45ecc9daf74409c394004efbaa3338 (Term Term Term) Term)



(declare-fun Tm_ghost_arrow_d9cd5e48f458f8c211c59f9048af3929 () Term)


; </end encoding let rec index_of>


; <Start encoding val FStar.List.Tot.Properties.partition_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_mem>


; <Start encoding val FStar.List.Tot.Properties.partition_mem_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_mem_forall>


; <Start encoding val FStar.List.Tot.Properties.partition_mem_p_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_p_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_p_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_mem_p_forall>


; <Start encoding val FStar.List.Tot.Properties.partition_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_count (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_count@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_count>


; <Start encoding val FStar.List.Tot.Properties.partition_count_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_count_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_count_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_count_forall>


; <Start encoding val FStar.List.Tot.Properties.mem_subset>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_subset (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_subset@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_subset>


; <Start encoding val FStar.List.Tot.Properties.subset_reflexive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.subset_reflexive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.subset_reflexive@tok () Term)

; </end encoding val FStar.List.Tot.Properties.subset_reflexive>


; <Start encoding val FStar.List.Tot.Properties.sortWith_permutation>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_permutation (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_permutation@tok () Term)

; </end encoding val FStar.List.Tot.Properties.sortWith_permutation>


; <Start encoding let rec sorted>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.sorted.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.sorted.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.sorted (Term Term) Term)
(declare-fun FStar.List.Tot.Properties.sorted@tok () Term)

(declare-fun Tm_arrow_9cabe840930f95fd18f81c0a913ddb25 (Term) Term)
(declare-fun Tm_abs_4bfb53c1305d6fe7222f07cf49f467b6 (Term Term Fuel Term) Term)




(declare-fun Tm_arrow_af42ab660b7a2cfc6caea649532e5867 () Term)


; </end encoding let rec sorted>


; <Start encoding let total_order>


(declare-fun FStar.List.Tot.Properties.total_order (Term Term) Term)

(declare-fun Tm_arrow_92649d42e4d7df07b51f92b06355903e () Term)
(declare-fun FStar.List.Tot.Properties.total_order@tok () Term)


; </end encoding let total_order>


; <Start encoding val FStar.List.Tot.Properties.append_sorted>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_sorted (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_sorted@tok () Term)

(declare-fun Tm_refine_a928c26e721d07631e5f0d63f521a37e (Term Term) Term)


; </end encoding val FStar.List.Tot.Properties.append_sorted>


; <Start encoding val FStar.List.Tot.Properties.sortWith_sorted>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_sorted (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_sorted@tok () Term)

; </end encoding val FStar.List.Tot.Properties.sortWith_sorted>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_nil (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_nil>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_cons>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_append_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_elim@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_append_elim>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_append_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_append_intro>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_nil (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_nil>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_cons>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_elim@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_elim>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_intro>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_swap>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_swap (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_swap@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_swap>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_permut>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_permut (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_permut@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_permut>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_false_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_false_intro (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_false_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_false_intro>


; <Start encoding val FStar.List.Tot.Properties.assoc_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_nil>


; <Start encoding val FStar.List.Tot.Properties.assoc_cons_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_eq (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_eq@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_cons_eq>


; <Start encoding val FStar.List.Tot.Properties.assoc_cons_not_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_not_eq (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_not_eq@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_cons_not_eq>


; <Start encoding val FStar.List.Tot.Properties.assoc_append_elim_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_r (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_r@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_append_elim_r>


; <Start encoding val FStar.List.Tot.Properties.assoc_append_elim_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_l (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_l@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_append_elim_l>


; <Start encoding val FStar.List.Tot.Properties.assoc_memP_some>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_some (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_some@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_memP_some>


; <Start encoding val FStar.List.Tot.Properties.assoc_memP_none>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_none (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_none@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_memP_none>


; <Start encoding val FStar.List.Tot.Properties.assoc_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_mem>


; <Start encoding val FStar.List.Tot.Properties.fold_left_invar>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_invar (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_invar@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_invar>


; <Start encoding val FStar.List.Tot.Properties.fold_left_map>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_map (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_map@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_map>


; <Start encoding val FStar.List.Tot.Properties.map_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_append (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.map_append>


; <Start encoding val FStar.List.Tot.Properties.fold_left_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_append>


; <Start encoding val FStar.List.Tot.Properties.fold_left_monoid>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_monoid (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_monoid@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_monoid>


; <Start encoding val FStar.List.Tot.Properties.fold_left_append_monoid>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append_monoid (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append_monoid@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_append_monoid>


; <Start encoding val FStar.List.Tot.Properties.index_extensionality>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.index_extensionality (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.index_extensionality@tok () Term)

; </end encoding val FStar.List.Tot.Properties.index_extensionality>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_nil>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_cons>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_trans>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_trans (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_trans@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_trans>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_correct>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_correct (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_correct@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_correct>


; <Start encoding val FStar.List.Tot.Properties.map_strict_suffix_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_strict_suffix_of (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_strict_suffix_of@tok () Term)

; </end encoding val FStar.List.Tot.Properties.map_strict_suffix_of>


; <Start encoding val FStar.List.Tot.Properties.mem_strict_suffix_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_strict_suffix_of (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_strict_suffix_of@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_strict_suffix_of>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_exists_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_exists_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_exists_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_exists_append>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append>


; <Start encoding val FStar.List.Tot.Properties.precedes_tl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_tl (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_tl@tok () Term)

; </end encoding val FStar.List.Tot.Properties.precedes_tl>


; <Start encoding val FStar.List.Tot.Properties.precedes_append_cons_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_r (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_r@tok () Term)

; </end encoding val FStar.List.Tot.Properties.precedes_append_cons_r>


; <Start encoding val FStar.List.Tot.Properties.precedes_append_cons_prod_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_prod_r (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_prod_r@tok () Term)

; </end encoding val FStar.List.Tot.Properties.precedes_append_cons_prod_r>


; <Start encoding val FStar.List.Tot.Properties.memP_precedes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_precedes (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_precedes@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_precedes>


; <Start encoding val FStar.List.Tot.Properties.assoc_precedes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_precedes (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_precedes@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_precedes>


; <Start encoding val FStar.List.Tot.Properties.find_none>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.find_none (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.find_none@tok () Term)

; </end encoding val FStar.List.Tot.Properties.find_none>


; <Start encoding val FStar.List.Tot.Properties.append_init_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_init_last (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_init_last@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_init_last>


; <Start encoding val FStar.List.Tot.Properties.init_last_def>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.init_last_def (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.init_last_def@tok () Term)

; </end encoding val FStar.List.Tot.Properties.init_last_def>


; <Start encoding val FStar.List.Tot.Properties.init_last_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.init_last_inj (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.init_last_inj@tok () Term)

; </end encoding val FStar.List.Tot.Properties.init_last_inj>


; <Start encoding val FStar.List.Tot.Properties.for_all_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.for_all_append (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.for_all_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.for_all_append>


; End Externals for interface FStar.List.Tot.Properties


; Externals for module FStar.List.Tot


; End Externals for module FStar.List.Tot


; Externals for interface FStar.Seq.Base


; <Start encoding val FStar.Seq.Base.seq>

(declare-fun FStar.Seq.Base.seq (Term) Term)

(declare-fun FStar.Seq.Base.seq@tok () Term)

; </end encoding val FStar.Seq.Base.seq>


; <Start encoding val FStar.Seq.Base.length>

(declare-fun FStar.Seq.Base.length (Term Term) Term)
(declare-fun Tm_arrow_d2c01593e1ccf972aadc4bced72f8166 () Term)
(declare-fun FStar.Seq.Base.length@tok () Term)

; </end encoding val FStar.Seq.Base.length>


; <Start encoding val FStar.Seq.Base.seq_to_list>

(declare-fun FStar.Seq.Base.seq_to_list (Term Term) Term)
(declare-fun Tm_refine_c4e3a92f9bd1d01a07e4fb66c5de2e7e (Term Term) Term)
(declare-fun Tm_arrow_7d1aeb9cf9244f8c50e0ad901486a03b () Term)
(declare-fun FStar.Seq.Base.seq_to_list@tok () Term)


; </end encoding val FStar.Seq.Base.seq_to_list>


; <Start encoding val FStar.Seq.Base.seq_of_list>

(declare-fun FStar.Seq.Base.seq_of_list (Term Term) Term)
(declare-fun Tm_refine_d2d1ea66f2b3a92c2deb42edcbb784ce (Term Term) Term)
(declare-fun Tm_arrow_4966fa2986a35d9c0803c863a2768cbd () Term)
(declare-fun FStar.Seq.Base.seq_of_list@tok () Term)


; </end encoding val FStar.Seq.Base.seq_of_list>


; <Start encoding val FStar.Seq.Base.index>

(declare-fun Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 (Term Term) Term)
(declare-fun FStar.Seq.Base.index (Term Term Term) Term)

(declare-fun Tm_arrow_1910ef5262f2ee8e712b6609a232b1ea () Term)
(declare-fun FStar.Seq.Base.index@tok () Term)

; </end encoding val FStar.Seq.Base.index>


; <Start encoding val FStar.Seq.Base.create>

(declare-fun FStar.Seq.Base.create (Term Term Term) Term)
(declare-fun Tm_arrow_b5b3d4fcc48eb666a8878550e50df9fb () Term)
(declare-fun FStar.Seq.Base.create@tok () Term)

; </end encoding val FStar.Seq.Base.create>


; <Start encoding val FStar.Seq.Base.init_aux>

(declare-fun Tm_refine_c1424615841f28cac7fc34e92b7ff33c (Term) Term)

(declare-fun Tm_arrow_44bb45ed5c2534b346e0f58ea5033251 (Term Term) Term)
(declare-fun FStar.Seq.Base.init_aux (Term Term Term Term) Term)



(declare-fun Tm_arrow_da6bbab10714c064205223f9990745bd () Term)
(declare-fun FStar.Seq.Base.init_aux@tok () Term)

; </end encoding val FStar.Seq.Base.init_aux>


; <Start encoding val FStar.Seq.Base.init>



(declare-fun FStar.Seq.Base.init (Term Term Term) Term)


(declare-fun Tm_arrow_d638d84259a58eff38c91944355ac313 () Term)
(declare-fun FStar.Seq.Base.init@tok () Term)

; </end encoding val FStar.Seq.Base.init>


; <Start encoding val FStar.Seq.Base.init_aux_ghost>



(declare-fun Tm_ghost_arrow_b7c239afcc620812134a759b53cafcc7 (Term Term) Term)
(declare-fun FStar.Seq.Base.init_aux_ghost (Term Term Term Term) Term)



(declare-fun Tm_ghost_arrow_90c084cce85ad5fa9b6789a83ba7b9d5 () Term)
(declare-fun FStar.Seq.Base.init_aux_ghost@tok () Term)

; </end encoding val FStar.Seq.Base.init_aux_ghost>


; <Start encoding val FStar.Seq.Base.init_ghost>



(declare-fun FStar.Seq.Base.init_ghost (Term Term Term) Term)


(declare-fun Tm_ghost_arrow_dc3e2497ae3914facc1bb3cecddbafe4 () Term)
(declare-fun FStar.Seq.Base.init_ghost@tok () Term)

; </end encoding val FStar.Seq.Base.init_ghost>


; <Start encoding val FStar.Seq.Base.empty>

(declare-fun FStar.Seq.Base.empty (Term) Term)
(declare-fun Tm_refine_b913a3f691ca99086652e0a655e72f17 (Term) Term)
(declare-fun Tm_arrow_c39fb4e3e203a822394c714f70ec2d2c () Term)
(declare-fun FStar.Seq.Base.empty@tok () Term)


; </end encoding val FStar.Seq.Base.empty>


; <Start encoding let createEmpty>

(declare-fun FStar.Seq.Base.createEmpty (Term) Term)


(declare-fun FStar.Seq.Base.createEmpty@tok () Term)


; </end encoding let createEmpty>


; <Start encoding val FStar.Seq.Base.lemma_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_empty@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_empty>


; <Start encoding val FStar.Seq.Base.upd>


(declare-fun FStar.Seq.Base.upd (Term Term Term Term) Term)

(declare-fun Tm_arrow_12766e98f50c8b91e296bbc369061265 () Term)
(declare-fun FStar.Seq.Base.upd@tok () Term)

; </end encoding val FStar.Seq.Base.upd>


; <Start encoding val FStar.Seq.Base.append>

(declare-fun FStar.Seq.Base.append (Term Term Term) Term)
(declare-fun Tm_arrow_22c1b165cc91e8aafbceb8b36244be8e () Term)
(declare-fun FStar.Seq.Base.append@tok () Term)

; </end encoding val FStar.Seq.Base.append>


; <Start encoding let cons>

(declare-fun FStar.Seq.Base.cons (Term Term Term) Term)
(declare-fun Tm_arrow_62ad6018b578ef7ed3c0e74bdebff729 () Term)
(declare-fun FStar.Seq.Base.cons@tok () Term)

; </end encoding let cons>


; <Start encoding let op_At_Bar>

(declare-fun FStar.Seq.Base.op_At_Bar (Term Term Term) Term)

(declare-fun FStar.Seq.Base.op_At_Bar@tok () Term)

; </end encoding let op_At_Bar>


; <Start encoding val FStar.Seq.Base.slice>

(declare-fun Tm_refine_81407705a0828c2c1b1976675443f647 (Term Term Term) Term)
(declare-fun FStar.Seq.Base.slice (Term Term Term Term) Term)

(declare-fun Tm_arrow_f59809c98fadf275c00ce819f5868628 () Term)
(declare-fun FStar.Seq.Base.slice@tok () Term)

; </end encoding val FStar.Seq.Base.slice>


; <Start encoding val FStar.Seq.Base.lemma_seq_of_seq_to_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_seq_of_seq_to_list (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_seq_of_seq_to_list@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_seq_of_seq_to_list>


; <Start encoding val FStar.Seq.Base.lemma_seq_to_seq_of_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_seq_to_seq_of_list (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_seq_to_seq_of_list@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_seq_to_seq_of_list>


; <Start encoding val FStar.Seq.Base.lemma_seq_of_list_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_seq_of_list_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_seq_of_list_cons@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_seq_of_list_cons>


; <Start encoding val FStar.Seq.Base.lemma_seq_to_list_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_seq_to_list_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_seq_to_list_cons@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_seq_to_list_cons>


; <Start encoding val FStar.Seq.Base.lemma_create_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_create_len (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_create_len@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_create_len>


; <Start encoding val FStar.Seq.Base.lemma_init_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_len (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_len@tok () Term)



; </end encoding val FStar.Seq.Base.lemma_init_len>


; <Start encoding val FStar.Seq.Base.lemma_init_aux_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_aux_len (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_aux_len@tok () Term)




; </end encoding val FStar.Seq.Base.lemma_init_aux_len>


; <Start encoding val FStar.Seq.Base.lemma_init_ghost_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_len (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_len@tok () Term)



; </end encoding val FStar.Seq.Base.lemma_init_ghost_len>


; <Start encoding val FStar.Seq.Base.lemma_init_ghost_aux_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_aux_len (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_aux_len@tok () Term)




; </end encoding val FStar.Seq.Base.lemma_init_ghost_aux_len>


; <Start encoding val FStar.Seq.Base.lemma_len_upd>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_len_upd (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_len_upd@tok () Term)
(declare-fun Tm_refine_2ca062977a42c36634b89c1c4f193f79 (Term Term) Term)

; </end encoding val FStar.Seq.Base.lemma_len_upd>


; <Start encoding val FStar.Seq.Base.lemma_len_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_len_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_len_append@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_len_append>


; <Start encoding val FStar.Seq.Base.lemma_len_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_len_slice (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_len_slice@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_len_slice>


; <Start encoding val FStar.Seq.Base.lemma_index_create>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_create (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_create@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_index_create>


; <Start encoding val FStar.Seq.Base.lemma_index_upd1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd1@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_index_upd1>


; <Start encoding val FStar.Seq.Base.lemma_index_upd2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd2 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd2@tok () Term)

(declare-fun Tm_refine_df81b3f17797c6f405c1dbb191651292 (Term Term Term) Term)

; </end encoding val FStar.Seq.Base.lemma_index_upd2>


; <Start encoding val FStar.Seq.Base.lemma_index_app1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_app1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_app1@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_index_app1>


; <Start encoding val FStar.Seq.Base.lemma_index_app2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_app2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_app2@tok () Term)
(declare-fun Tm_refine_ac201cf927190d39c033967b63cb957b (Term Term Term) Term)

; </end encoding val FStar.Seq.Base.lemma_index_app2>


; <Start encoding val FStar.Seq.Base.lemma_index_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_slice (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_slice@tok () Term)
(declare-fun Tm_refine_d3d07693cd71377864ef84dc97d10ec1 (Term Term Term) Term)
(declare-fun Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8 (Term Term) Term)

; </end encoding val FStar.Seq.Base.lemma_index_slice>


; <Start encoding val FStar.Seq.Base.hasEq_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.hasEq_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.hasEq_lemma@tok () Term)

; </end encoding val FStar.Seq.Base.hasEq_lemma>


; <Start encoding val FStar.Seq.Base.equal>

(declare-fun FStar.Seq.Base.equal (Term Term Term) Term)
(declare-fun Tm_arrow_c2c0a5f39eee7a5a92db8bac6fe4fb3b () Term)
(declare-fun FStar.Seq.Base.equal@tok () Term)

; </end encoding val FStar.Seq.Base.equal>


; <Start encoding val FStar.Seq.Base.eq_i>

(declare-fun Tm_refine_4639d389381bee5cf8cf77b7a6585074 (Term Term) Term)
(declare-fun Tm_refine_b361ba8089a6e963921008d537e799a1 (Term Term) Term)
(declare-fun FStar.Seq.Base.eq_i (Term Term Term Term) Term)


(declare-fun Tm_refine_331c14d442c5ee89a4fce6ea305c920f (Term Term Term) Term)
(declare-fun Tm_refine_51f956555266662f5f0ed4aac81d10bc (Term Term Term Term) Term)
(declare-fun Tm_arrow_e5286e13b5c071949ebc5146fbef7d7f () Term)
(declare-fun FStar.Seq.Base.eq_i@tok () Term)



; </end encoding val FStar.Seq.Base.eq_i>


; <Start encoding val FStar.Seq.Base.eq>

(declare-fun FStar.Seq.Base.eq (Term Term Term) Term)
(declare-fun Tm_refine_1c0effbdef48f9b00a1efb7b571fbb69 (Term Term Term) Term)
(declare-fun Tm_arrow_70ef1e4b9388d8aa6e0d17c5aeed02a7 () Term)
(declare-fun FStar.Seq.Base.eq@tok () Term)


; </end encoding val FStar.Seq.Base.eq>


; <Start encoding val FStar.Seq.Base.lemma_eq_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_eq_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_eq_intro@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_eq_intro>


; <Start encoding val FStar.Seq.Base.lemma_eq_refl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_eq_refl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_eq_refl@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_eq_refl>


; <Start encoding val FStar.Seq.Base.lemma_eq_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_eq_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_eq_elim@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_eq_elim>


; <Start encoding val FStar.Seq.Base.append_assoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.append_assoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.append_assoc@tok () Term)

; </end encoding val FStar.Seq.Base.append_assoc>


; <Start encoding val FStar.Seq.Base.append_empty_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.append_empty_l (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.append_empty_l@tok () Term)

; </end encoding val FStar.Seq.Base.append_empty_l>


; <Start encoding val FStar.Seq.Base.append_empty_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.append_empty_r (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.append_empty_r@tok () Term)

; </end encoding val FStar.Seq.Base.append_empty_r>


; <Start encoding val FStar.Seq.Base.init_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_index@tok () Term)

; </end encoding val FStar.Seq.Base.init_index>


; <Start encoding val FStar.Seq.Base.init_index_>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_index_ (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_index_@tok () Term)



; </end encoding val FStar.Seq.Base.init_index_>


; <Start encoding val FStar.Seq.Base.init_ghost_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_ghost_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_ghost_index@tok () Term)

; </end encoding val FStar.Seq.Base.init_ghost_index>


; <Start encoding val FStar.Seq.Base.init_ghost_index_>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_ghost_index_ (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_ghost_index_@tok () Term)



; </end encoding val FStar.Seq.Base.init_ghost_index_>


; <Start encoding val FStar.Seq.Base.lemma_equal_instances_implies_equal_types>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_equal_instances_implies_equal_types (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_equal_instances_implies_equal_types@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_equal_instances_implies_equal_types>


; End Externals for interface FStar.Seq.Base


; Externals for interface FStar.Math.Lemmas


; <Start encoding val FStar.Math.Lemmas.euclidean_div_axiom>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.euclidean_div_axiom (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.euclidean_div_axiom@tok () Term)

; </end encoding val FStar.Math.Lemmas.euclidean_div_axiom>


; <Start encoding val FStar.Math.Lemmas.lemma_eucl_div_bound>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_eucl_div_bound (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_eucl_div_bound@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_eucl_div_bound>


; <Start encoding val FStar.Math.Lemmas.lemma_mult_le_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_le_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_le_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mult_le_left>


; <Start encoding val FStar.Math.Lemmas.lemma_mult_le_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_le_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_le_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mult_le_right>


; <Start encoding val FStar.Math.Lemmas.lemma_mult_lt_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mult_lt_left>


; <Start encoding val FStar.Math.Lemmas.lemma_mult_lt_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mult_lt_right>


; <Start encoding val FStar.Math.Lemmas.lemma_mult_lt_sqr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_sqr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_sqr@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mult_lt_sqr>


; <Start encoding val FStar.Math.Lemmas.swap_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.swap_mul (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.swap_mul@tok () Term)

; </end encoding val FStar.Math.Lemmas.swap_mul>


; <Start encoding val FStar.Math.Lemmas.lemma_cancel_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_cancel_mul (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_cancel_mul@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_cancel_mul>


; <Start encoding val FStar.Math.Lemmas.distributivity_add_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.distributivity_add_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.distributivity_add_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.distributivity_add_left>


; <Start encoding val FStar.Math.Lemmas.distributivity_add_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.distributivity_add_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.distributivity_add_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.distributivity_add_right>


; <Start encoding val FStar.Math.Lemmas.paren_mul_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.paren_mul_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.paren_mul_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.paren_mul_left>


; <Start encoding val FStar.Math.Lemmas.paren_mul_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.paren_mul_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.paren_mul_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.paren_mul_right>


; <Start encoding val FStar.Math.Lemmas.paren_add_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.paren_add_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.paren_add_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.paren_add_left>


; <Start encoding val FStar.Math.Lemmas.paren_add_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.paren_add_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.paren_add_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.paren_add_right>


; <Start encoding val FStar.Math.Lemmas.addition_is_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.addition_is_associative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.addition_is_associative@tok () Term)

; </end encoding val FStar.Math.Lemmas.addition_is_associative>


; <Start encoding val FStar.Math.Lemmas.subtraction_is_distributive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.subtraction_is_distributive (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.subtraction_is_distributive@tok () Term)

; </end encoding val FStar.Math.Lemmas.subtraction_is_distributive>


; <Start encoding val FStar.Math.Lemmas.swap_add_plus_minus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.swap_add_plus_minus (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.swap_add_plus_minus@tok () Term)

; </end encoding val FStar.Math.Lemmas.swap_add_plus_minus>


; <Start encoding val FStar.Math.Lemmas.neg_mul_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.neg_mul_left (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.neg_mul_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.neg_mul_left>


; <Start encoding val FStar.Math.Lemmas.neg_mul_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.neg_mul_right (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.neg_mul_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.neg_mul_right>


; <Start encoding val FStar.Math.Lemmas.swap_neg_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.swap_neg_mul (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.swap_neg_mul@tok () Term)

; </end encoding val FStar.Math.Lemmas.swap_neg_mul>


; <Start encoding val FStar.Math.Lemmas.distributivity_sub_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.distributivity_sub_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.distributivity_sub_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.distributivity_sub_left>


; <Start encoding val FStar.Math.Lemmas.distributivity_sub_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.distributivity_sub_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.distributivity_sub_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.distributivity_sub_right>


; <Start encoding val FStar.Math.Lemmas.mul_binds_tighter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_binds_tighter (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_binds_tighter@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_binds_tighter>


; <Start encoding val FStar.Math.Lemmas.lemma_abs_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_abs_mul (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_abs_mul@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_abs_mul>


; <Start encoding val FStar.Math.Lemmas.lemma_abs_bound>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_abs_bound (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_abs_bound@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_abs_bound>


; <Start encoding val FStar.Math.Lemmas.mul_ineq1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_ineq1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_ineq1@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_ineq1>


; <Start encoding val FStar.Math.Lemmas.add_zero_left_is_same>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.add_zero_left_is_same (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.add_zero_left_is_same@tok () Term)

; </end encoding val FStar.Math.Lemmas.add_zero_left_is_same>


; <Start encoding val FStar.Math.Lemmas.add_zero_right_is_same>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.add_zero_right_is_same (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.add_zero_right_is_same@tok () Term)

; </end encoding val FStar.Math.Lemmas.add_zero_right_is_same>


; <Start encoding val FStar.Math.Lemmas.mul_one_left_is_same>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_one_left_is_same (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_one_left_is_same@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_one_left_is_same>


; <Start encoding val FStar.Math.Lemmas.mul_one_right_is_same>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_one_right_is_same (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_one_right_is_same@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_one_right_is_same>


; <Start encoding val FStar.Math.Lemmas.mul_zero_left_is_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_zero_left_is_zero (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_zero_left_is_zero@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_zero_left_is_zero>


; <Start encoding val FStar.Math.Lemmas.mul_zero_right_is_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_zero_right_is_zero (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_zero_right_is_zero@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_zero_right_is_zero>


; <Start encoding val FStar.Math.Lemmas.nat_times_nat_is_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.nat_times_nat_is_nat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.nat_times_nat_is_nat@tok () Term)

; </end encoding val FStar.Math.Lemmas.nat_times_nat_is_nat>


; <Start encoding val FStar.Math.Lemmas.pos_times_pos_is_pos>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pos_times_pos_is_pos (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pos_times_pos_is_pos@tok () Term)

; </end encoding val FStar.Math.Lemmas.pos_times_pos_is_pos>


; <Start encoding val FStar.Math.Lemmas.nat_over_pos_is_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.nat_over_pos_is_nat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.nat_over_pos_is_nat@tok () Term)

; </end encoding val FStar.Math.Lemmas.nat_over_pos_is_nat>


; <Start encoding val FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma>


; <Start encoding val FStar.Math.Lemmas.int_times_int_equal_zero_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.int_times_int_equal_zero_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.int_times_int_equal_zero_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.int_times_int_equal_zero_lemma>


; <Start encoding val FStar.Math.Lemmas.pow2_double_sum>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_double_sum (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_double_sum@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_double_sum>


; <Start encoding val FStar.Math.Lemmas.pow2_double_mult>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_double_mult (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_double_mult@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_double_mult>


; <Start encoding val FStar.Math.Lemmas.pow2_lt_compat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_lt_compat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_lt_compat@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_lt_compat>


; <Start encoding val FStar.Math.Lemmas.pow2_le_compat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_le_compat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_le_compat@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_le_compat>


; <Start encoding val FStar.Math.Lemmas.pow2_plus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_plus (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_plus@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_plus>


; <Start encoding val FStar.Math.Lemmas.pow2_minus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_minus (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_minus@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_minus>


; <Start encoding val FStar.Math.Lemmas.multiply_fractions>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.multiply_fractions (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.multiply_fractions@tok () Term)

; </end encoding val FStar.Math.Lemmas.multiply_fractions>


; <Start encoding val FStar.Math.Lemmas.modulo_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_lemma>


; <Start encoding val FStar.Math.Lemmas.lemma_div_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_mod@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_mod>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_lt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_lt (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_lt@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_lt>


; <Start encoding val FStar.Math.Lemmas.lemma_div_lt_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt_nat (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt_nat@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_lt_nat>


; <Start encoding val FStar.Math.Lemmas.lemma_div_lt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_lt>


; <Start encoding val FStar.Math.Lemmas.bounded_multiple_is_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.bounded_multiple_is_zero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.bounded_multiple_is_zero@tok () Term)

; </end encoding val FStar.Math.Lemmas.bounded_multiple_is_zero>


; <Start encoding val FStar.Math.Lemmas.small_div>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_div (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_div@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_div>


; <Start encoding val FStar.Math.Lemmas.small_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_mod@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_mod>


; <Start encoding val FStar.Math.Lemmas.lt_multiple_is_equal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lt_multiple_is_equal (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lt_multiple_is_equal@tok () Term)

; </end encoding val FStar.Math.Lemmas.lt_multiple_is_equal>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_plus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_plus>


; <Start encoding val FStar.Math.Lemmas.lemma_div_plus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_plus (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_plus@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_plus>


; <Start encoding val FStar.Math.Lemmas.lemma_div_mod_plus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_mod_plus (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_mod_plus@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_mod_plus>


; <Start encoding val FStar.Math.Lemmas.add_div_mod_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.add_div_mod_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.add_div_mod_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.add_div_mod_1>


; <Start encoding val FStar.Math.Lemmas.sub_div_mod_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.sub_div_mod_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.sub_div_mod_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.sub_div_mod_1>


; <Start encoding val FStar.Math.Lemmas.cancel_mul_div>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.cancel_mul_div (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.cancel_mul_div@tok () Term)

; </end encoding val FStar.Math.Lemmas.cancel_mul_div>


; <Start encoding val FStar.Math.Lemmas.cancel_mul_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.cancel_mul_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.cancel_mul_mod@tok () Term)

; </end encoding val FStar.Math.Lemmas.cancel_mul_mod>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_add_distr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_add_distr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_add_distr@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_add_distr>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_sub_distr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_distr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_distr@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_sub_distr>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_sub_0>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_0 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_0@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_sub_0>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_sub_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_sub_1>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_mul_distr_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mul_distr_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mul_distr_l@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_mul_distr_l>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_mul_distr_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mul_distr_r (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mul_distr_r@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_mul_distr_r>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_injective (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_injective@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_injective>


; <Start encoding val FStar.Math.Lemmas.lemma_mul_sub_distr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_sub_distr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_sub_distr@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mul_sub_distr>


; <Start encoding val FStar.Math.Lemmas.lemma_div_exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_exact (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_exact@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_exact>


; <Start encoding val FStar.Math.Lemmas.div_exact_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.div_exact_r (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.div_exact_r@tok () Term)

; </end encoding val FStar.Math.Lemmas.div_exact_r>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_spec (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_spec@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_spec>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_spec2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_spec2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_spec2@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_spec2>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_plus_distr_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_distr_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_distr_l@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_plus_distr_l>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_plus_distr_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_distr_r (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_distr_r@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_plus_distr_r>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mod (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mod@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_mod>


; <Start encoding val FStar.Math.Lemmas.euclidean_division_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.euclidean_division_definition (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.euclidean_division_definition@tok () Term)

; </end encoding val FStar.Math.Lemmas.euclidean_division_definition>


; <Start encoding val FStar.Math.Lemmas.modulo_range_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_range_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_range_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_range_lemma>


; <Start encoding val FStar.Math.Lemmas.small_modulo_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_modulo_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_modulo_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_modulo_lemma_1>


; <Start encoding val FStar.Math.Lemmas.small_modulo_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_modulo_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_modulo_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_modulo_lemma_2>


; <Start encoding val FStar.Math.Lemmas.small_division_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_division_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_division_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_division_lemma_1>


; <Start encoding val FStar.Math.Lemmas.small_division_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_division_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_division_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_division_lemma_2>


; <Start encoding val FStar.Math.Lemmas.multiplication_order_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.multiplication_order_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.multiplication_order_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.multiplication_order_lemma>


; <Start encoding val FStar.Math.Lemmas.division_propriety>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_propriety (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_propriety@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_propriety>


; <Start encoding val FStar.Math.Lemmas.division_definition_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_definition_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_definition_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_definition_lemma_1>


; <Start encoding val FStar.Math.Lemmas.division_definition_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_definition_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_definition_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_definition_lemma_2>


; <Start encoding val FStar.Math.Lemmas.division_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_definition (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_definition@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_definition>


; <Start encoding val FStar.Math.Lemmas.multiple_division_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.multiple_division_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.multiple_division_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.multiple_division_lemma>


; <Start encoding val FStar.Math.Lemmas.multiple_modulo_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.multiple_modulo_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.multiple_modulo_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.multiple_modulo_lemma>


; <Start encoding val FStar.Math.Lemmas.division_addition_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_addition_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_addition_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_addition_lemma>


; <Start encoding val FStar.Math.Lemmas.modulo_distributivity>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_distributivity (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_distributivity@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_distributivity>


; <Start encoding val FStar.Math.Lemmas.lemma_div_le>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_le (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_le@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_le>


; <Start encoding val FStar.Math.Lemmas.division_sub_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_sub_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_sub_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_sub_lemma>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_plus_mul_distr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_mul_distr (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_mul_distr@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_plus_mul_distr>


; <Start encoding val FStar.Math.Lemmas.modulo_addition_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_addition_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_addition_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_addition_lemma>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_sub>


; <Start encoding val FStar.Math.Lemmas.mod_mult_exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mod_mult_exact (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mod_mult_exact@tok () Term)

; </end encoding val FStar.Math.Lemmas.mod_mult_exact>


; <Start encoding val FStar.Math.Lemmas.mod_mul_div_exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mod_mul_div_exact (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mod_mul_div_exact@tok () Term)

; </end encoding val FStar.Math.Lemmas.mod_mul_div_exact>


; <Start encoding val FStar.Math.Lemmas.mod_pow2_div2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mod_pow2_div2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mod_pow2_div2@tok () Term)

; </end encoding val FStar.Math.Lemmas.mod_pow2_div2>


; <Start encoding val FStar.Math.Lemmas.division_multiplication_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_multiplication_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_multiplication_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_multiplication_lemma>


; <Start encoding val FStar.Math.Lemmas.modulo_scale_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_scale_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_scale_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_scale_lemma>


; <Start encoding val FStar.Math.Lemmas.lemma_mul_pos_pos_is_pos>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_pos_pos_is_pos (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_pos_pos_is_pos@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mul_pos_pos_is_pos>


; <Start encoding val FStar.Math.Lemmas.lemma_mul_nat_pos_is_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_nat_pos_is_nat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_nat_pos_is_nat@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mul_nat_pos_is_nat>


; <Start encoding val FStar.Math.Lemmas.modulo_division_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_division_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_division_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_division_lemma>


; <Start encoding val FStar.Math.Lemmas.modulo_modulo_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_modulo_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_modulo_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_modulo_lemma>


; <Start encoding val FStar.Math.Lemmas.pow2_multiplication_division_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_division_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_division_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_multiplication_division_lemma_1>


; <Start encoding val FStar.Math.Lemmas.pow2_multiplication_division_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_division_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_division_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_multiplication_division_lemma_2>


; <Start encoding val FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1>


; <Start encoding val FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2>


; <Start encoding val FStar.Math.Lemmas.pow2_modulo_division_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_division_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_division_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_modulo_division_lemma_1>


; <Start encoding val FStar.Math.Lemmas.pow2_modulo_division_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_division_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_division_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_modulo_division_lemma_2>


; <Start encoding val FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1>


; <Start encoding val FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2>


; <Start encoding val FStar.Math.Lemmas.modulo_add>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_add (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_add@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_add>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_twice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_twice (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_twice@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_twice>


; <Start encoding val FStar.Math.Lemmas.modulo_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_sub (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_sub@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_sub>


; <Start encoding val FStar.Math.Lemmas.mod_add_both>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mod_add_both (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mod_add_both@tok () Term)

; </end encoding val FStar.Math.Lemmas.mod_add_both>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_plus_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_injective (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_injective@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_plus_injective>


; <Start encoding val FStar.Math.Lemmas.modulo_sub_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_sub_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_sub_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_sub_lemma>


; End Externals for interface FStar.Math.Lemmas


; Externals for interface FStar.BitVector


; <Start encoding let bv_t>

(declare-fun FStar.BitVector.bv_t (Term) Term)
(declare-fun Tm_arrow_9974df5c311cfcfa7100bc7bef095e1e () Term)
(declare-fun FStar.BitVector.bv_t@tok () Term)
(declare-fun Tm_refine_e2d5d62a90ceed8a6faf9d20615f4e1e (Term) Term)

; </end encoding let bv_t>


; <Start encoding let zero_vec>

(declare-fun FStar.BitVector.zero_vec (Term) Term)
(declare-fun Tm_arrow_b6d52a9c4babaef5c45b062eb8723782 () Term)
(declare-fun FStar.BitVector.zero_vec@tok () Term)

; </end encoding let zero_vec>


; <Start encoding let elem_vec>


(declare-fun FStar.BitVector.elem_vec (Term Term) Term)

(declare-fun Tm_arrow_6880b3a4da9e8c38f1dbaa400eb50d7d () Term)
(declare-fun FStar.BitVector.elem_vec@tok () Term)


; </end encoding let elem_vec>


; <Start encoding let ones_vec>

(declare-fun FStar.BitVector.ones_vec (Term) Term)

(declare-fun FStar.BitVector.ones_vec@tok () Term)

; </end encoding let ones_vec>


; <Start encoding let rec logand_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BitVector.logand_vec.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BitVector.logand_vec.fuel_instrumented_token () Term)
(declare-fun FStar.BitVector.logand_vec (Term Term Term) Term)
(declare-fun FStar.BitVector.logand_vec@tok () Term)
(declare-fun Tm_arrow_d5001f682a0789c7aa8e67d06058b034 () Term)

; </end encoding let rec logand_vec>


; <Start encoding val FStar.BitVector.logand_vec_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.logand_vec_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.logand_vec_definition@tok () Term)


; </end encoding val FStar.BitVector.logand_vec_definition>


; <Start encoding let rec logxor_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BitVector.logxor_vec.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BitVector.logxor_vec.fuel_instrumented_token () Term)
(declare-fun FStar.BitVector.logxor_vec (Term Term Term) Term)
(declare-fun FStar.BitVector.logxor_vec@tok () Term)


; </end encoding let rec logxor_vec>


; <Start encoding val FStar.BitVector.logxor_vec_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.logxor_vec_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.logxor_vec_definition@tok () Term)


; </end encoding val FStar.BitVector.logxor_vec_definition>


; <Start encoding let rec logor_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BitVector.logor_vec.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BitVector.logor_vec.fuel_instrumented_token () Term)
(declare-fun FStar.BitVector.logor_vec (Term Term Term) Term)
(declare-fun FStar.BitVector.logor_vec@tok () Term)


; </end encoding let rec logor_vec>


; <Start encoding val FStar.BitVector.logor_vec_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.logor_vec_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.logor_vec_definition@tok () Term)


; </end encoding val FStar.BitVector.logor_vec_definition>


; <Start encoding let rec lognot_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BitVector.lognot_vec.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BitVector.lognot_vec.fuel_instrumented_token () Term)
(declare-fun FStar.BitVector.lognot_vec (Term Term) Term)
(declare-fun FStar.BitVector.lognot_vec@tok () Term)
(declare-fun Tm_arrow_190e27813ba14c0d36577dc3d47778da () Term)

; </end encoding let rec lognot_vec>


; <Start encoding val FStar.BitVector.lognot_vec_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.lognot_vec_definition (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.lognot_vec_definition@tok () Term)


; </end encoding val FStar.BitVector.lognot_vec_definition>


; <Start encoding val FStar.BitVector.lemma_xor_bounded>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.lemma_xor_bounded (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.lemma_xor_bounded@tok () Term)

; </end encoding val FStar.BitVector.lemma_xor_bounded>


; <Start encoding let is_subset_vec>

(declare-fun FStar.BitVector.is_subset_vec (Term Term Term) Term)
(declare-fun Tm_arrow_b51a0c80adeae3f31b1215853bb34fe1 () Term)
(declare-fun FStar.BitVector.is_subset_vec@tok () Term)

; </end encoding let is_subset_vec>


; <Start encoding let is_superset_vec>

(declare-fun FStar.BitVector.is_superset_vec (Term Term Term) Term)

(declare-fun FStar.BitVector.is_superset_vec@tok () Term)

; </end encoding let is_superset_vec>


; <Start encoding val FStar.BitVector.lemma_slice_subset_vec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.lemma_slice_subset_vec (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.lemma_slice_subset_vec@tok () Term)

; </end encoding val FStar.BitVector.lemma_slice_subset_vec>


; <Start encoding val FStar.BitVector.lemma_slice_superset_vec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.lemma_slice_superset_vec (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.lemma_slice_superset_vec@tok () Term)

; </end encoding val FStar.BitVector.lemma_slice_superset_vec>


; <Start encoding let shift_left_vec>

(declare-fun FStar.BitVector.shift_left_vec (Term Term Term) Term)
(declare-fun Tm_arrow_ccbebd343bd3a7caba5f263c2ba5f3be () Term)
(declare-fun FStar.BitVector.shift_left_vec@tok () Term)

; </end encoding let shift_left_vec>


; <Start encoding val FStar.BitVector.shift_left_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_left_vec_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_left_vec_lemma_1@tok () Term)
(declare-fun Tm_refine_6ccf0869e6825997ab860bb25791c11f (Term Term) Term)

; </end encoding val FStar.BitVector.shift_left_vec_lemma_1>


; <Start encoding val FStar.BitVector.shift_left_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_left_vec_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_left_vec_lemma_2@tok () Term)
(declare-fun Tm_refine_e8e1ad4b2203cd724d5b8b2dba0a5826 (Term Term) Term)

; </end encoding val FStar.BitVector.shift_left_vec_lemma_2>


; <Start encoding let shift_right_vec>

(declare-fun FStar.BitVector.shift_right_vec (Term Term Term) Term)

(declare-fun FStar.BitVector.shift_right_vec@tok () Term)

; </end encoding let shift_right_vec>


; <Start encoding val FStar.BitVector.shift_right_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_right_vec_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_right_vec_lemma_1@tok () Term)
(declare-fun Tm_refine_34425c23b534b8a294f8f063dd9faa4b (Term Term) Term)

; </end encoding val FStar.BitVector.shift_right_vec_lemma_1>


; <Start encoding val FStar.BitVector.shift_right_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_right_vec_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_right_vec_lemma_2@tok () Term)
(declare-fun Tm_refine_c0ec47abc53a2509e744dad22ccf8191 (Term Term) Term)

; </end encoding val FStar.BitVector.shift_right_vec_lemma_2>


; <Start encoding let shift_arithmetic_right_vec>

(declare-fun FStar.BitVector.shift_arithmetic_right_vec (Term Term Term) Term)

(declare-fun FStar.BitVector.shift_arithmetic_right_vec@tok () Term)

; </end encoding let shift_arithmetic_right_vec>


; <Start encoding val FStar.BitVector.shift_arithmetic_right_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_arithmetic_right_vec_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_arithmetic_right_vec_lemma_1@tok () Term)


; </end encoding val FStar.BitVector.shift_arithmetic_right_vec_lemma_1>


; <Start encoding val FStar.BitVector.shift_arithmetic_right_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_arithmetic_right_vec_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_arithmetic_right_vec_lemma_2@tok () Term)


; </end encoding val FStar.BitVector.shift_arithmetic_right_vec_lemma_2>


; End Externals for interface FStar.BitVector


; Externals for interface FStar.UInt


; <Start encoding val FStar.UInt.pow2_values>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.pow2_values (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.pow2_values@tok () Term)

; </end encoding val FStar.UInt.pow2_values>


; <Start encoding let max_int>

(declare-fun FStar.UInt.max_int (Term) Term)
(declare-fun Tm_arrow_fc34ca66de2f262c06145b17fb7ed6cb () Term)
(declare-fun FStar.UInt.max_int@tok () Term)

; </end encoding let max_int>


; <Start encoding let min_int>

(declare-fun FStar.UInt.min_int (Term) Term)

(declare-fun FStar.UInt.min_int@tok () Term)

; </end encoding let min_int>


; <Start encoding let fits>

(declare-fun FStar.UInt.fits (Term Term) Term)
(declare-fun Tm_arrow_dea48782e508c14fa98dcf9716548804 () Term)
(declare-fun FStar.UInt.fits@tok () Term)

; </end encoding let fits>


; <Start encoding let size>

(declare-fun FStar.UInt.size (Term Term) Term)
(declare-fun Tm_arrow_f4ec8f8bfe492e31741a15356024bbaa () Term)
(declare-fun FStar.UInt.size@tok () Term)

; </end encoding let size>


; <Start encoding let uint_t>

(declare-fun FStar.UInt.uint_t (Term) Term)

(declare-fun FStar.UInt.uint_t@tok () Term)
(declare-fun Tm_refine_f13070840248fced9d9d60d77bdae3ec (Term) Term)

; </end encoding let uint_t>


; <Start encoding let zero>

(declare-fun FStar.UInt.zero (Term) Term)
(declare-fun Tm_arrow_f1dd811328ea3b27fc410fa0f52880f7 () Term)
(declare-fun FStar.UInt.zero@tok () Term)

; </end encoding let zero>


; <Start encoding let pow2_n>


(declare-fun FStar.UInt.pow2_n (Term Term) Term)

(declare-fun Tm_arrow_8d41edd1e7b665db26512e6c6d9ece64 () Term)
(declare-fun FStar.UInt.pow2_n@tok () Term)


; </end encoding let pow2_n>


; <Start encoding let one>

(declare-fun FStar.UInt.one (Term) Term)
(declare-fun Tm_arrow_89d370fa478cfd1f85a8759662ce0390 () Term)
(declare-fun FStar.UInt.one@tok () Term)

; </end encoding let one>


; <Start encoding let ones>

(declare-fun FStar.UInt.ones (Term) Term)

(declare-fun FStar.UInt.ones@tok () Term)

; </end encoding let ones>


; <Start encoding let incr>

(declare-fun FStar.UInt.incr (Term Term) Term)
(declare-fun Tm_refine_22e8629663f0cb1c9de86e57e73778e3 (Term) Term)
(declare-fun Tm_arrow_e8e04e4a1022a7343e76760b76915c9e () Term)
(declare-fun FStar.UInt.incr@tok () Term)


; </end encoding let incr>


; <Start encoding let decr>

(declare-fun FStar.UInt.decr (Term Term) Term)

(declare-fun Tm_arrow_2a167fb2d2f3f00bff7b73f048db0e83 () Term)
(declare-fun FStar.UInt.decr@tok () Term)


; </end encoding let decr>


; <Start encoding val FStar.UInt.incr_underspec>

(declare-fun FStar.UInt.incr_underspec (Term Term) Term)
(declare-fun Tm_refine_6a367e92d5b1ca10009a43bd430dd796 (Term Term) Term)
(declare-fun Tm_arrow_fb114bd2e9239af1296268eb30490ff7 () Term)
(declare-fun FStar.UInt.incr_underspec@tok () Term)


; </end encoding val FStar.UInt.incr_underspec>


; <Start encoding val FStar.UInt.decr_underspec>

(declare-fun FStar.UInt.decr_underspec (Term Term) Term)
(declare-fun Tm_refine_fa3c796c533e86dc9f3e3ffc647718f6 (Term Term) Term)
(declare-fun Tm_arrow_f1853f30408c6d0beb7795897a3ab5bc () Term)
(declare-fun FStar.UInt.decr_underspec@tok () Term)


; </end encoding val FStar.UInt.decr_underspec>


; <Start encoding let incr_mod>

(declare-fun FStar.UInt.incr_mod (Term Term) Term)
(declare-fun Tm_arrow_a565732dbe0b43ae2274b1f24341f11b () Term)
(declare-fun FStar.UInt.incr_mod@tok () Term)

; </end encoding let incr_mod>


; <Start encoding let decr_mod>

(declare-fun FStar.UInt.decr_mod (Term Term) Term)

(declare-fun FStar.UInt.decr_mod@tok () Term)

; </end encoding let decr_mod>


; <Start encoding let add>

(declare-fun FStar.UInt.add (Term Term Term) Term)

(declare-fun Tm_arrow_ea9f73d61c207ec4508af75e87c5ca13 () Term)
(declare-fun FStar.UInt.add@tok () Term)


; </end encoding let add>


; <Start encoding val FStar.UInt.add_underspec>

(declare-fun FStar.UInt.add_underspec (Term Term Term) Term)
(declare-fun Tm_refine_c7a9b50c1b5983f8171c03368a208e31 (Term Term Term) Term)
(declare-fun Tm_arrow_880847ba34dd402fb6567384684864a6 () Term)
(declare-fun FStar.UInt.add_underspec@tok () Term)


; </end encoding val FStar.UInt.add_underspec>


; <Start encoding let add_mod>

(declare-fun FStar.UInt.add_mod (Term Term Term) Term)
(declare-fun Tm_arrow_2f3c6a962eb1cbbfd959311c0f20b277 () Term)
(declare-fun FStar.UInt.add_mod@tok () Term)

; </end encoding let add_mod>


; <Start encoding let sub>

(declare-fun FStar.UInt.sub (Term Term Term) Term)

(declare-fun Tm_arrow_974b47e4388c1a4055fe210bb6a11687 () Term)
(declare-fun FStar.UInt.sub@tok () Term)


; </end encoding let sub>


; <Start encoding val FStar.UInt.sub_underspec>

(declare-fun FStar.UInt.sub_underspec (Term Term Term) Term)
(declare-fun Tm_refine_109ae46bb20ad559af297346ec64ae4e (Term Term Term) Term)
(declare-fun Tm_arrow_1479a03f646b965be1bfedb2ee360f95 () Term)
(declare-fun FStar.UInt.sub_underspec@tok () Term)


; </end encoding val FStar.UInt.sub_underspec>


; <Start encoding let sub_mod>

(declare-fun FStar.UInt.sub_mod (Term Term Term) Term)

(declare-fun FStar.UInt.sub_mod@tok () Term)

; </end encoding let sub_mod>


; <Start encoding let mul>

(declare-fun FStar.UInt.mul (Term Term Term) Term)

(declare-fun Tm_arrow_45e02637bbbba15e6760300e4a62b58d () Term)
(declare-fun FStar.UInt.mul@tok () Term)


; </end encoding let mul>


; <Start encoding val FStar.UInt.mul_underspec>

(declare-fun FStar.UInt.mul_underspec (Term Term Term) Term)
(declare-fun Tm_refine_ea207e5cce50229e615af011837e59a5 (Term Term Term) Term)
(declare-fun Tm_arrow_1f5fca1fff06689d84a49261819dc580 () Term)
(declare-fun FStar.UInt.mul_underspec@tok () Term)


; </end encoding val FStar.UInt.mul_underspec>


; <Start encoding let mul_mod>

(declare-fun FStar.UInt.mul_mod (Term Term Term) Term)

(declare-fun FStar.UInt.mul_mod@tok () Term)

; </end encoding let mul_mod>


; <Start encoding val FStar.UInt.lt_square_div_lt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lt_square_div_lt (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lt_square_div_lt@tok () Term)

; </end encoding val FStar.UInt.lt_square_div_lt>


; <Skipped #push-options "--fuel 0 --ifuel 0"/>


; <Start encoding let mul_div>

(declare-fun FStar.UInt.mul_div (Term Term Term) Term)

(declare-fun FStar.UInt.mul_div@tok () Term)

; </end encoding let mul_div>


; <Skipped #pop-options/>


; <Start encoding let div>

(declare-fun Tm_refine_0722e9115d2a1be8d90527397d01011c (Term) Term)
(declare-fun FStar.UInt.div (Term Term Term) Term)

(declare-fun Tm_refine_e49d79feeb1e96b29b0f01b06f8dac23 (Term Term Term) Term)
(declare-fun Tm_arrow_6ebc7a9e6ff34015952a4168421980bf () Term)
(declare-fun FStar.UInt.div@tok () Term)



; </end encoding let div>


; <Start encoding val FStar.UInt.div_underspec>


(declare-fun FStar.UInt.div_underspec (Term Term Term) Term)

(declare-fun Tm_refine_fafbb762e9b0100ba27aa174122ddaa3 (Term Term Term) Term)
(declare-fun Tm_arrow_ed1485a952a27dc4770fb0182ab26e79 () Term)
(declare-fun FStar.UInt.div_underspec@tok () Term)


; </end encoding val FStar.UInt.div_underspec>


; <Start encoding val FStar.UInt.div_size>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.div_size (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.div_size@tok () Term)

; </end encoding val FStar.UInt.div_size>


; <Start encoding let udiv>


(declare-fun FStar.UInt.udiv (Term Term Term) Term)


(declare-fun Tm_arrow_2b6a409bd2eeb88753b2b6fe89b0d0a9 () Term)
(declare-fun FStar.UInt.udiv@tok () Term)



; </end encoding let udiv>


; <Start encoding let mod>


(declare-fun FStar.UInt.mod (Term Term Term) Term)

(declare-fun Tm_arrow_6ae50616ce0b08fd950ce0be5e711193 () Term)
(declare-fun FStar.UInt.mod@tok () Term)


; </end encoding let mod>


; <Start encoding let eq>

(declare-fun FStar.UInt.eq (Term Term Term) Term)
(declare-fun Tm_arrow_ed25d9271888f66e143c5c59e11fb3a9 () Term)
(declare-fun FStar.UInt.eq@tok () Term)

; </end encoding let eq>


; <Start encoding let gt>

(declare-fun FStar.UInt.gt (Term Term Term) Term)

(declare-fun FStar.UInt.gt@tok () Term)

; </end encoding let gt>


; <Start encoding let gte>

(declare-fun FStar.UInt.gte (Term Term Term) Term)

(declare-fun FStar.UInt.gte@tok () Term)

; </end encoding let gte>


; <Start encoding let lt>

(declare-fun FStar.UInt.lt (Term Term Term) Term)

(declare-fun FStar.UInt.lt@tok () Term)

; </end encoding let lt>


; <Start encoding let lte>

(declare-fun FStar.UInt.lte (Term Term Term) Term)

(declare-fun FStar.UInt.lte@tok () Term)

; </end encoding let lte>


; <Start encoding let to_uint_t>

(declare-fun FStar.UInt.to_uint_t (Term Term) Term)
(declare-fun Tm_arrow_d5257ef463a03617bca88873b50f4e96 () Term)
(declare-fun FStar.UInt.to_uint_t@tok () Term)

; </end encoding let to_uint_t>


; <Start encoding let rec to_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.UInt.to_vec.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.UInt.to_vec.fuel_instrumented_token () Term)
(declare-fun FStar.UInt.to_vec (Term Term) Term)
(declare-fun FStar.UInt.to_vec@tok () Term)
(declare-fun Tm_arrow_50c9ac04c4da2f9a3a1512bf3cfd180e () Term)

; </end encoding let rec to_vec>


; <Start encoding let rec from_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.UInt.from_vec.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.UInt.from_vec.fuel_instrumented_token () Term)
(declare-fun FStar.UInt.from_vec (Term Term) Term)
(declare-fun FStar.UInt.from_vec@tok () Term)
(declare-fun Tm_arrow_3a21f80bb386ebae30b30ec5363d47ef () Term)

; </end encoding let rec from_vec>


; <Start encoding val FStar.UInt.to_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.to_vec_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.to_vec_lemma_1@tok () Term)

; </end encoding val FStar.UInt.to_vec_lemma_1>


; <Start encoding val FStar.UInt.to_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.to_vec_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.to_vec_lemma_2@tok () Term)

; </end encoding val FStar.UInt.to_vec_lemma_2>


; <Start encoding val FStar.UInt.inverse_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.inverse_aux (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.inverse_aux@tok () Term)


; </end encoding val FStar.UInt.inverse_aux>


; <Start encoding val FStar.UInt.inverse_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.inverse_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.inverse_vec_lemma@tok () Term)

; </end encoding val FStar.UInt.inverse_vec_lemma>


; <Start encoding val FStar.UInt.inverse_num_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.inverse_num_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.inverse_num_lemma@tok () Term)

; </end encoding val FStar.UInt.inverse_num_lemma>


; <Start encoding val FStar.UInt.from_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.from_vec_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.from_vec_lemma_1@tok () Term)

; </end encoding val FStar.UInt.from_vec_lemma_1>


; <Start encoding val FStar.UInt.from_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.from_vec_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.from_vec_lemma_2@tok () Term)

; </end encoding val FStar.UInt.from_vec_lemma_2>


; <Start encoding val FStar.UInt.from_vec_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.from_vec_aux (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.from_vec_aux@tok () Term)

; </end encoding val FStar.UInt.from_vec_aux>


; <Start encoding val FStar.UInt.seq_slice_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.seq_slice_lemma (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.seq_slice_lemma@tok () Term)

; </end encoding val FStar.UInt.seq_slice_lemma>


; <Start encoding val FStar.UInt.from_vec_propriety>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.from_vec_propriety (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.from_vec_propriety@tok () Term)

; </end encoding val FStar.UInt.from_vec_propriety>


; <Start encoding val FStar.UInt.append_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.append_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.append_lemma@tok () Term)

; </end encoding val FStar.UInt.append_lemma>


; <Start encoding val FStar.UInt.slice_left_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.slice_left_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.slice_left_lemma@tok () Term)

; </end encoding val FStar.UInt.slice_left_lemma>


; <Start encoding val FStar.UInt.slice_right_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.slice_right_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.slice_right_lemma@tok () Term)

; </end encoding val FStar.UInt.slice_right_lemma>


; <Start encoding val FStar.UInt.zero_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.zero_to_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.zero_to_vec_lemma@tok () Term)


; </end encoding val FStar.UInt.zero_to_vec_lemma>


; <Start encoding val FStar.UInt.zero_from_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.zero_from_vec_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.zero_from_vec_lemma@tok () Term)

; </end encoding val FStar.UInt.zero_from_vec_lemma>


; <Start encoding val FStar.UInt.one_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.one_to_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.one_to_vec_lemma@tok () Term)


; </end encoding val FStar.UInt.one_to_vec_lemma>


; <Start encoding val FStar.UInt.pow2_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.pow2_to_vec_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.pow2_to_vec_lemma@tok () Term)



; </end encoding val FStar.UInt.pow2_to_vec_lemma>


; <Start encoding val FStar.UInt.pow2_from_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.pow2_from_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.pow2_from_vec_lemma@tok () Term)


; </end encoding val FStar.UInt.pow2_from_vec_lemma>


; <Start encoding val FStar.UInt.ones_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.ones_to_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.ones_to_vec_lemma@tok () Term)


; </end encoding val FStar.UInt.ones_to_vec_lemma>


; <Start encoding val FStar.UInt.ones_from_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.ones_from_vec_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.ones_from_vec_lemma@tok () Term)

; </end encoding val FStar.UInt.ones_from_vec_lemma>


; <Start encoding let nth>


(declare-fun FStar.UInt.nth (Term Term Term) Term)

(declare-fun Tm_arrow_3fc70c4ae2acbd923fa94b8473fca72c () Term)
(declare-fun FStar.UInt.nth@tok () Term)


; </end encoding let nth>


; <Start encoding val FStar.UInt.nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.nth_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.nth_lemma@tok () Term)

; </end encoding val FStar.UInt.nth_lemma>


; <Start encoding val FStar.UInt.zero_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.zero_nth_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.zero_nth_lemma@tok () Term)


; </end encoding val FStar.UInt.zero_nth_lemma>


; <Start encoding val FStar.UInt.pow2_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.pow2_nth_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.pow2_nth_lemma@tok () Term)



; </end encoding val FStar.UInt.pow2_nth_lemma>


; <Start encoding val FStar.UInt.one_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.one_nth_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.one_nth_lemma@tok () Term)


; </end encoding val FStar.UInt.one_nth_lemma>


; <Start encoding val FStar.UInt.ones_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.ones_nth_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.ones_nth_lemma@tok () Term)


; </end encoding val FStar.UInt.ones_nth_lemma>


; <Start encoding let logand>

(declare-fun FStar.UInt.logand (Term Term Term) Term)
(declare-fun Tm_arrow_f4d897275479f32ec94ab14cea117895 () Term)
(declare-fun FStar.UInt.logand@tok () Term)

; </end encoding let logand>


; <Start encoding let logxor>

(declare-fun FStar.UInt.logxor (Term Term Term) Term)

(declare-fun FStar.UInt.logxor@tok () Term)

; </end encoding let logxor>


; <Start encoding let logor>

(declare-fun FStar.UInt.logor (Term Term Term) Term)

(declare-fun FStar.UInt.logor@tok () Term)

; </end encoding let logor>


; <Start encoding let lognot>

(declare-fun FStar.UInt.lognot (Term Term) Term)
(declare-fun Tm_arrow_7e93208f7d6c7796851172614443345f () Term)
(declare-fun FStar.UInt.lognot@tok () Term)

; </end encoding let lognot>


; <Start encoding val FStar.UInt.logand_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_definition@tok () Term)


; </end encoding val FStar.UInt.logand_definition>


; <Start encoding val FStar.UInt.logxor_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_definition@tok () Term)


; </end encoding val FStar.UInt.logxor_definition>


; <Start encoding val FStar.UInt.logor_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_definition@tok () Term)


; </end encoding val FStar.UInt.logor_definition>


; <Start encoding val FStar.UInt.lognot_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lognot_definition (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lognot_definition@tok () Term)


; </end encoding val FStar.UInt.lognot_definition>


; <Start encoding let minus>

(declare-fun FStar.UInt.minus (Term Term) Term)

(declare-fun FStar.UInt.minus@tok () Term)

; </end encoding let minus>


; <Start encoding val FStar.UInt.logand_commutative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_commutative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_commutative@tok () Term)

; </end encoding val FStar.UInt.logand_commutative>


; <Start encoding val FStar.UInt.logand_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_associative (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_associative@tok () Term)

; </end encoding val FStar.UInt.logand_associative>


; <Start encoding val FStar.UInt.logand_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_self@tok () Term)

; </end encoding val FStar.UInt.logand_self>


; <Start encoding val FStar.UInt.logand_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_lemma_1@tok () Term)

; </end encoding val FStar.UInt.logand_lemma_1>


; <Start encoding val FStar.UInt.logand_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_lemma_2@tok () Term)

; </end encoding val FStar.UInt.logand_lemma_2>


; <Start encoding val FStar.UInt.subset_vec_le_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.subset_vec_le_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.subset_vec_le_lemma@tok () Term)

; </end encoding val FStar.UInt.subset_vec_le_lemma>


; <Start encoding val FStar.UInt.logand_le>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_le (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_le@tok () Term)

; </end encoding val FStar.UInt.logand_le>


; <Start encoding val FStar.UInt.logxor_commutative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_commutative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_commutative@tok () Term)

; </end encoding val FStar.UInt.logxor_commutative>


; <Start encoding val FStar.UInt.logxor_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_associative (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_associative@tok () Term)

; </end encoding val FStar.UInt.logxor_associative>


; <Start encoding val FStar.UInt.logxor_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_self@tok () Term)

; </end encoding val FStar.UInt.logxor_self>


; <Start encoding val FStar.UInt.logxor_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_lemma_1@tok () Term)

; </end encoding val FStar.UInt.logxor_lemma_1>


; <Start encoding val FStar.UInt.logxor_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_lemma_2@tok () Term)

; </end encoding val FStar.UInt.logxor_lemma_2>


; <Start encoding let xor>

(declare-fun FStar.UInt.xor (Term Term) Term)
(declare-fun Tm_arrow_a41b9b98d4288401e09e5c3b51ccc4f5 () Term)
(declare-fun FStar.UInt.xor@tok () Term)

; </end encoding let xor>


; <Start encoding val FStar.UInt.xor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.xor_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.xor_lemma@tok () Term)

; </end encoding val FStar.UInt.xor_lemma>


; <Start encoding val FStar.UInt.logxor_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_inv (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_inv@tok () Term)

; </end encoding val FStar.UInt.logxor_inv>


; <Start encoding val FStar.UInt.logxor_neq_nonzero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_neq_nonzero (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_neq_nonzero@tok () Term)

; </end encoding val FStar.UInt.logxor_neq_nonzero>


; <Start encoding val FStar.UInt.logor_commutative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_commutative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_commutative@tok () Term)

; </end encoding val FStar.UInt.logor_commutative>


; <Start encoding val FStar.UInt.logor_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_associative (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_associative@tok () Term)

; </end encoding val FStar.UInt.logor_associative>


; <Start encoding val FStar.UInt.logor_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_self@tok () Term)

; </end encoding val FStar.UInt.logor_self>


; <Start encoding val FStar.UInt.logor_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_lemma_1@tok () Term)

; </end encoding val FStar.UInt.logor_lemma_1>


; <Start encoding val FStar.UInt.logor_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_lemma_2@tok () Term)

; </end encoding val FStar.UInt.logor_lemma_2>


; <Start encoding val FStar.UInt.superset_vec_ge_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.superset_vec_ge_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.superset_vec_ge_lemma@tok () Term)

; </end encoding val FStar.UInt.superset_vec_ge_lemma>


; <Start encoding val FStar.UInt.logor_ge>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_ge (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_ge@tok () Term)

; </end encoding val FStar.UInt.logor_ge>


; <Start encoding val FStar.UInt.lognot_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lognot_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lognot_self@tok () Term)

; </end encoding val FStar.UInt.lognot_self>


; <Start encoding val FStar.UInt.lognot_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lognot_lemma_1 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lognot_lemma_1@tok () Term)

; </end encoding val FStar.UInt.lognot_lemma_1>


; <Start encoding val FStar.UInt.index_to_vec_ones>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.index_to_vec_ones (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.index_to_vec_ones@tok () Term)
(declare-fun Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d (Term) Term)


; </end encoding val FStar.UInt.index_to_vec_ones>


; <Start encoding val FStar.UInt.logor_disjoint>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_disjoint (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_disjoint@tok () Term)

; </end encoding val FStar.UInt.logor_disjoint>


; <Start encoding val FStar.UInt.logand_mask>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_mask (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_mask@tok () Term)

; </end encoding val FStar.UInt.logand_mask>


; <Start encoding let shift_left>

(declare-fun FStar.UInt.shift_left (Term Term Term) Term)
(declare-fun Tm_arrow_88bed77db23726a0c4c74cf2019c096b () Term)
(declare-fun FStar.UInt.shift_left@tok () Term)

; </end encoding let shift_left>


; <Start encoding let shift_right>

(declare-fun FStar.UInt.shift_right (Term Term Term) Term)

(declare-fun FStar.UInt.shift_right@tok () Term)

; </end encoding let shift_right>


; <Start encoding val FStar.UInt.shift_left_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_lemma_1@tok () Term)


; </end encoding val FStar.UInt.shift_left_lemma_1>


; <Start encoding val FStar.UInt.shift_left_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_lemma_2@tok () Term)


; </end encoding val FStar.UInt.shift_left_lemma_2>


; <Start encoding val FStar.UInt.shift_right_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_lemma_1@tok () Term)


; </end encoding val FStar.UInt.shift_right_lemma_1>


; <Start encoding val FStar.UInt.shift_right_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_lemma_2@tok () Term)


; </end encoding val FStar.UInt.shift_right_lemma_2>


; <Start encoding val FStar.UInt.shift_left_logand_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_logand_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_logand_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_left_logand_lemma>


; <Start encoding val FStar.UInt.shift_right_logand_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_logand_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_logand_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_right_logand_lemma>


; <Start encoding val FStar.UInt.shift_left_logxor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_logxor_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_logxor_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_left_logxor_lemma>


; <Start encoding val FStar.UInt.shift_right_logxor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_logxor_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_logxor_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_right_logxor_lemma>


; <Start encoding val FStar.UInt.shift_left_logor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_logor_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_logor_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_left_logor_lemma>


; <Start encoding val FStar.UInt.shift_right_logor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_logor_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_logor_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_right_logor_lemma>


; <Start encoding val FStar.UInt.shift_left_value_aux_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_value_aux_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_value_aux_1@tok () Term)

; </end encoding val FStar.UInt.shift_left_value_aux_1>


; <Start encoding val FStar.UInt.shift_left_value_aux_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_value_aux_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_value_aux_2@tok () Term)

; </end encoding val FStar.UInt.shift_left_value_aux_2>


; <Start encoding val FStar.UInt.shift_left_value_aux_3>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_value_aux_3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_value_aux_3@tok () Term)

; </end encoding val FStar.UInt.shift_left_value_aux_3>


; <Start encoding val FStar.UInt.shift_left_value_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_value_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_value_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_left_value_lemma>


; <Start encoding val FStar.UInt.shift_right_value_aux_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_value_aux_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_value_aux_1@tok () Term)

; </end encoding val FStar.UInt.shift_right_value_aux_1>


; <Start encoding val FStar.UInt.shift_right_value_aux_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_value_aux_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_value_aux_2@tok () Term)

; </end encoding val FStar.UInt.shift_right_value_aux_2>


; <Start encoding val FStar.UInt.shift_right_value_aux_3>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_value_aux_3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_value_aux_3@tok () Term)

; </end encoding val FStar.UInt.shift_right_value_aux_3>


; <Start encoding val FStar.UInt.shift_right_value_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_value_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_value_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_right_value_lemma>


; <Start encoding let msb>

(declare-fun FStar.UInt.msb (Term Term) Term)
(declare-fun Tm_arrow_d4ac65fa6e48f26152e66f6f5f032db4 () Term)
(declare-fun FStar.UInt.msb@tok () Term)

; </end encoding let msb>


; <Start encoding val FStar.UInt.lemma_msb_pow2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_msb_pow2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_msb_pow2@tok () Term)

; </end encoding val FStar.UInt.lemma_msb_pow2>


; <Start encoding val FStar.UInt.lemma_minus_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_minus_zero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_minus_zero@tok () Term)

; </end encoding val FStar.UInt.lemma_minus_zero>


; <Start encoding val FStar.UInt.lemma_msb_gte>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_msb_gte (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_msb_gte@tok () Term)

; </end encoding val FStar.UInt.lemma_msb_gte>


; <Start encoding val FStar.UInt.lemma_uint_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_uint_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_uint_mod@tok () Term)

; </end encoding val FStar.UInt.lemma_uint_mod>


; <Start encoding val FStar.UInt.lemma_add_sub_cancel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_add_sub_cancel (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_add_sub_cancel@tok () Term)

; </end encoding val FStar.UInt.lemma_add_sub_cancel>


; <Start encoding val FStar.UInt.lemma_mod_sub_distr_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_mod_sub_distr_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_mod_sub_distr_l@tok () Term)

; </end encoding val FStar.UInt.lemma_mod_sub_distr_l>


; <Start encoding val FStar.UInt.lemma_sub_add_cancel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_sub_add_cancel (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_sub_add_cancel@tok () Term)

; </end encoding val FStar.UInt.lemma_sub_add_cancel>


; <Start encoding let zero_extend_vec>

(declare-fun FStar.UInt.zero_extend_vec (Term Term) Term)
(declare-fun Tm_arrow_dcb1e97275faab10b7eb1bdfcfbde371 () Term)
(declare-fun FStar.UInt.zero_extend_vec@tok () Term)

; </end encoding let zero_extend_vec>


; <Start encoding let one_extend_vec>

(declare-fun FStar.UInt.one_extend_vec (Term Term) Term)

(declare-fun FStar.UInt.one_extend_vec@tok () Term)

; </end encoding let one_extend_vec>


; <Start encoding let zero_extend>

(declare-fun FStar.UInt.zero_extend (Term Term) Term)
(declare-fun Tm_arrow_8a55f1e2e0fc60c6f44b88ae88621b5f () Term)
(declare-fun FStar.UInt.zero_extend@tok () Term)

; </end encoding let zero_extend>


; <Start encoding let one_extend>

(declare-fun FStar.UInt.one_extend (Term Term) Term)

(declare-fun FStar.UInt.one_extend@tok () Term)

; </end encoding let one_extend>


; <Start encoding val FStar.UInt.lemma_zero_extend>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_zero_extend (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_zero_extend@tok () Term)
(declare-fun Tm_refine_a2362280d81dbd526f1fa3f771e8faad (Term) Term)

; </end encoding val FStar.UInt.lemma_zero_extend>


; <Start encoding val FStar.UInt.lemma_one_extend>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_one_extend (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_one_extend@tok () Term)

; </end encoding val FStar.UInt.lemma_one_extend>


; <Start encoding val FStar.UInt.lemma_lognot_zero_ext>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_zero_ext (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_zero_ext@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_zero_ext>


; <Start encoding val FStar.UInt.lemma_lognot_one_ext>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_one_ext (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_one_ext@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_one_ext>


; <Start encoding val FStar.UInt.lemma_lognot_value_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_value_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_value_mod@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_value_mod>


; <Start encoding val FStar.UInt.lemma_lognot_value_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_value_zero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_value_zero@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_value_zero>


; <Start encoding val FStar.UInt.lemma_one_mod_pow2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_one_mod_pow2 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_one_mod_pow2@tok () Term)

; </end encoding val FStar.UInt.lemma_one_mod_pow2>


; <Start encoding val FStar.UInt.lemma_lognot_value_nonzero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_value_nonzero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_value_nonzero@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_value_nonzero>


; <Start encoding val FStar.UInt.lemma_lognot_value>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_value (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_value@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_value>


; <Start encoding val FStar.UInt.lemma_minus_eq_zero_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_minus_eq_zero_sub (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_minus_eq_zero_sub@tok () Term)

; </end encoding val FStar.UInt.lemma_minus_eq_zero_sub>


; End Externals for interface FStar.UInt


; Externals for interface FStar.UInt32


; <Start encoding let n>

(declare-fun FStar.UInt32.n (Dummy_sort) Term)

; </end encoding let n>


; <Skipped #set-options "--max_fuel 0 --max_ifuel 0"/>


; <Start encoding val FStar.UInt32.t>

(declare-fun FStar.UInt32.t (Dummy_sort) Term)

; </end encoding val FStar.UInt32.t>


; <Start encoding val FStar.UInt32.v>

(declare-fun FStar.UInt32.v (Term) Term)
(declare-fun Tm_arrow_33a06d9a3ec1c77524ab958d37ae1453 () Term)
(declare-fun FStar.UInt32.v@tok () Term)

; </end encoding val FStar.UInt32.v>


; <Start encoding val FStar.UInt32.uint_to_t>

(declare-fun FStar.UInt32.uint_to_t (Term) Term)
(declare-fun Tm_refine_0ea1fba779ad5718e28476faeef94d56 (Term) Term)
(declare-fun Tm_arrow_3d414099f2a2b7ef3e11b1fc75a28674 () Term)
(declare-fun FStar.UInt32.uint_to_t@tok () Term)


; </end encoding val FStar.UInt32.uint_to_t>


; <Start encoding val FStar.UInt32.uv_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt32.uv_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt32.uv_inv@tok () Term)

; </end encoding val FStar.UInt32.uv_inv>


; <Start encoding val FStar.UInt32.vu_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt32.vu_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt32.vu_inv@tok () Term)

; </end encoding val FStar.UInt32.vu_inv>


; <Start encoding val FStar.UInt32.v_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt32.v_inj (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt32.v_inj@tok () Term)

; </end encoding val FStar.UInt32.v_inj>


; <Start encoding val FStar.UInt32.zero>

(declare-fun FStar.UInt32.zero (Dummy_sort) Term)
(declare-fun Tm_refine_7cfa0141116db910fdee890408ebbaf1 () Term)


; </end encoding val FStar.UInt32.zero>


; <Start encoding val FStar.UInt32.one>

(declare-fun FStar.UInt32.one (Dummy_sort) Term)
(declare-fun Tm_refine_d94e5152d1c8429ac781cc5558c9a3e2 () Term)


; </end encoding val FStar.UInt32.one>


; <Start encoding val FStar.UInt32.add>

(declare-fun FStar.UInt32.add (Term Term) Term)
(declare-fun Tm_refine_709aff84c75b0fff77dcbf3b529649dd (Term Term) Term)
(declare-fun Tm_arrow_5558b72197031b1efc1a0f8298859a47 () Term)
(declare-fun FStar.UInt32.add@tok () Term)


; </end encoding val FStar.UInt32.add>


; <Start encoding val FStar.UInt32.add_underspec>

(declare-fun FStar.UInt32.add_underspec (Term Term) Term)
(declare-fun Tm_refine_57eacb083aaa8f3c6200eef2872d40a9 (Term Term) Term)
(declare-fun Tm_arrow_2aa4a786718187783c350fff98c0276d () Term)
(declare-fun FStar.UInt32.add_underspec@tok () Term)


; </end encoding val FStar.UInt32.add_underspec>


; <Start encoding val FStar.UInt32.add_mod>

(declare-fun FStar.UInt32.add_mod (Term Term) Term)
(declare-fun Tm_refine_edc8fb7e909853d860d4ab445ef31337 (Term Term) Term)
(declare-fun Tm_arrow_edbd649f4b12a343efa6ef46e7961890 () Term)
(declare-fun FStar.UInt32.add_mod@tok () Term)


; </end encoding val FStar.UInt32.add_mod>


; <Start encoding val FStar.UInt32.sub>

(declare-fun FStar.UInt32.sub (Term Term) Term)
(declare-fun Tm_refine_aa4b3d268075d84252df525db1f85524 (Term Term) Term)
(declare-fun Tm_arrow_ac932fe6124478fcfd5be99d334122e8 () Term)
(declare-fun FStar.UInt32.sub@tok () Term)


; </end encoding val FStar.UInt32.sub>


; <Start encoding val FStar.UInt32.sub_underspec>

(declare-fun FStar.UInt32.sub_underspec (Term Term) Term)
(declare-fun Tm_refine_01926286fa04b785df0ea0da544f2001 (Term Term) Term)
(declare-fun Tm_arrow_a0c271942b2fe7be43f6ae297698cd0b () Term)
(declare-fun FStar.UInt32.sub_underspec@tok () Term)


; </end encoding val FStar.UInt32.sub_underspec>


; <Start encoding val FStar.UInt32.sub_mod>

(declare-fun FStar.UInt32.sub_mod (Term Term) Term)
(declare-fun Tm_refine_ace23c600fbe87b65e5fc333816f74de (Term Term) Term)
(declare-fun Tm_arrow_4a8c4b67b5977a746f1eeda7c310346f () Term)
(declare-fun FStar.UInt32.sub_mod@tok () Term)


; </end encoding val FStar.UInt32.sub_mod>


; <Start encoding val FStar.UInt32.mul>

(declare-fun FStar.UInt32.mul (Term Term) Term)
(declare-fun Tm_refine_1ccfb21903aa30ace8832f7a4d067d9b (Term Term) Term)
(declare-fun Tm_arrow_f261941925861d12451675f7409141e5 () Term)
(declare-fun FStar.UInt32.mul@tok () Term)


; </end encoding val FStar.UInt32.mul>


; <Start encoding val FStar.UInt32.mul_underspec>

(declare-fun FStar.UInt32.mul_underspec (Term Term) Term)
(declare-fun Tm_refine_cb4ffd3222952e9ac95fc72e8f9913c6 (Term Term) Term)
(declare-fun Tm_arrow_54623a1c9ed03c94751f7d25d259da67 () Term)
(declare-fun FStar.UInt32.mul_underspec@tok () Term)


; </end encoding val FStar.UInt32.mul_underspec>


; <Start encoding val FStar.UInt32.mul_mod>

(declare-fun FStar.UInt32.mul_mod (Term Term) Term)
(declare-fun Tm_refine_8618df86656cf4c2bc98614452120307 (Term Term) Term)
(declare-fun Tm_arrow_b9ba4f3f3f0a1ea3202a99cc97238a0d () Term)
(declare-fun FStar.UInt32.mul_mod@tok () Term)


; </end encoding val FStar.UInt32.mul_mod>


; <Start encoding val FStar.UInt32.div>

(declare-fun Tm_refine_0941c9ff95557f2d53bc8f8179ab793e () Term)
(declare-fun FStar.UInt32.div (Term Term) Term)

(declare-fun Tm_refine_74d1ae07763cf2ce5f26906c9df0d2cc (Term Term) Term)
(declare-fun Tm_arrow_61dc5944349c0fd1e6ccd916a51fdfe8 () Term)
(declare-fun FStar.UInt32.div@tok () Term)


; </end encoding val FStar.UInt32.div>


; <Start encoding val FStar.UInt32.rem>


(declare-fun FStar.UInt32.rem (Term Term) Term)

(declare-fun Tm_refine_19ac6a052799e5086e9c3eb3a21d54a5 (Term Term) Term)
(declare-fun Tm_arrow_a00bbce6d7d4a1d495177d4f11116643 () Term)
(declare-fun FStar.UInt32.rem@tok () Term)


; </end encoding val FStar.UInt32.rem>


; <Start encoding val FStar.UInt32.logand>

(declare-fun FStar.UInt32.logand (Term Term) Term)
(declare-fun Tm_refine_7afd5b0ca8e77c7f6870883658e19d63 (Term Term) Term)
(declare-fun Tm_arrow_eff0426e7af51f8d330de4f569da9534 () Term)
(declare-fun FStar.UInt32.logand@tok () Term)


; </end encoding val FStar.UInt32.logand>


; <Start encoding val FStar.UInt32.logxor>

(declare-fun FStar.UInt32.logxor (Term Term) Term)
(declare-fun Tm_refine_2b25e5c3b25bc06167200cbfa5d36b3e (Term Term) Term)
(declare-fun Tm_arrow_07d2eb0ad8dc47fa48b862c24603f207 () Term)
(declare-fun FStar.UInt32.logxor@tok () Term)


; </end encoding val FStar.UInt32.logxor>


; <Start encoding val FStar.UInt32.logor>

(declare-fun FStar.UInt32.logor (Term Term) Term)
(declare-fun Tm_refine_39cb18a1d289e559096741772432b24f (Term Term) Term)
(declare-fun Tm_arrow_f4c0c09b0ba22212b54bc6a7fb947fac () Term)
(declare-fun FStar.UInt32.logor@tok () Term)


; </end encoding val FStar.UInt32.logor>


; <Start encoding val FStar.UInt32.lognot>

(declare-fun FStar.UInt32.lognot (Term) Term)
(declare-fun Tm_refine_d5743ca0a8d5f3ceec748bdcb132b14f (Term) Term)
(declare-fun Tm_arrow_b6548dae703a0f26a4185c51dee5464b () Term)
(declare-fun FStar.UInt32.lognot@tok () Term)


; </end encoding val FStar.UInt32.lognot>


; <Start encoding val FStar.UInt32.shift_right>

(declare-fun FStar.UInt32.shift_right (Term Term) Term)
(declare-fun Tm_refine_59202c8b625f4b04caf2081d6778d9e7 (Term Term) Term)
(declare-fun Tm_arrow_13c7acc70a3dd34a798f691f2cee4104 () Term)
(declare-fun FStar.UInt32.shift_right@tok () Term)


; </end encoding val FStar.UInt32.shift_right>


; <Start encoding val FStar.UInt32.shift_left>

(declare-fun FStar.UInt32.shift_left (Term Term) Term)
(declare-fun Tm_refine_c642c4de19ebed0b1a9b5f85d40989c0 (Term Term) Term)
(declare-fun Tm_arrow_0709d575329517627fac117b134f4462 () Term)
(declare-fun FStar.UInt32.shift_left@tok () Term)


; </end encoding val FStar.UInt32.shift_left>


; <Start encoding let eq>

(declare-fun FStar.UInt32.eq (Term Term) Term)
(declare-fun Tm_arrow_6de09abf9de7977da03ee416904d3039 () Term)
(declare-fun FStar.UInt32.eq@tok () Term)

; </end encoding let eq>


; <Start encoding let gt>

(declare-fun FStar.UInt32.gt (Term Term) Term)

(declare-fun FStar.UInt32.gt@tok () Term)

; </end encoding let gt>


; <Start encoding let gte>

(declare-fun FStar.UInt32.gte (Term Term) Term)

(declare-fun FStar.UInt32.gte@tok () Term)

; </end encoding let gte>


; <Start encoding let lt>

(declare-fun FStar.UInt32.lt (Term Term) Term)

(declare-fun FStar.UInt32.lt@tok () Term)

; </end encoding let lt>


; <Start encoding let lte>

(declare-fun FStar.UInt32.lte (Term Term) Term)

(declare-fun FStar.UInt32.lte@tok () Term)

; </end encoding let lte>


; <Start encoding let minus>

(declare-fun FStar.UInt32.minus (Term) Term)
(declare-fun Tm_arrow_c4b70260248a2080020c883b42aa875d () Term)
(declare-fun FStar.UInt32.minus@tok () Term)

; </end encoding let minus>


; <Start encoding let n_minus_one>

(declare-fun FStar.UInt32.n_minus_one (Dummy_sort) Term)

; </end encoding let n_minus_one>


; <Skipped #set-options "--z3rlimit 80 --initial_fuel 1 --max_fuel 1"/>


; <Start encoding let eq_mask>

(declare-fun FStar.UInt32.eq_mask (Term Term) Term)
(declare-fun Tm_refine_09d9a189c8c7a3bf3fc28db14e6689cd (Term Term) Term)
(declare-fun Tm_arrow_472ed8b8700983a2f5b417531368b430 () Term)
(declare-fun FStar.UInt32.eq_mask@tok () Term)


; </end encoding let eq_mask>


; <Start encoding val FStar.UInt32.lemma_sub_msbs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt32.lemma_sub_msbs (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt32.lemma_sub_msbs@tok () Term)

; </end encoding val FStar.UInt32.lemma_sub_msbs>


; <Start encoding let gte_mask>

(declare-fun FStar.UInt32.gte_mask (Term Term) Term)
(declare-fun Tm_refine_83df857506788e94d25c8be97271668a (Term Term) Term)
(declare-fun Tm_arrow_a9de8133430dc71a337d9373e485c8b4 () Term)
(declare-fun FStar.UInt32.gte_mask@tok () Term)


; </end encoding let gte_mask>


; <Skipped #reset-options/>


; <Start encoding let op_Plus_Hat>

(declare-fun FStar.UInt32.op_Plus_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Plus_Hat@tok () Term)


; </end encoding let op_Plus_Hat>


; <Start encoding let op_Plus_Question_Hat>

(declare-fun FStar.UInt32.op_Plus_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Plus_Question_Hat@tok () Term)


; </end encoding let op_Plus_Question_Hat>


; <Start encoding let op_Plus_Percent_Hat>

(declare-fun FStar.UInt32.op_Plus_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Plus_Percent_Hat@tok () Term)


; </end encoding let op_Plus_Percent_Hat>


; <Start encoding let op_Subtraction_Hat>

(declare-fun FStar.UInt32.op_Subtraction_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Subtraction_Hat@tok () Term)


; </end encoding let op_Subtraction_Hat>


; <Start encoding let op_Subtraction_Question_Hat>

(declare-fun FStar.UInt32.op_Subtraction_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Subtraction_Question_Hat@tok () Term)


; </end encoding let op_Subtraction_Question_Hat>


; <Start encoding let op_Subtraction_Percent_Hat>

(declare-fun FStar.UInt32.op_Subtraction_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Subtraction_Percent_Hat@tok () Term)


; </end encoding let op_Subtraction_Percent_Hat>


; <Start encoding let op_Star_Hat>

(declare-fun FStar.UInt32.op_Star_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Star_Hat@tok () Term)


; </end encoding let op_Star_Hat>


; <Start encoding let op_Star_Question_Hat>

(declare-fun FStar.UInt32.op_Star_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Star_Question_Hat@tok () Term)


; </end encoding let op_Star_Question_Hat>


; <Start encoding let op_Star_Percent_Hat>

(declare-fun FStar.UInt32.op_Star_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Star_Percent_Hat@tok () Term)


; </end encoding let op_Star_Percent_Hat>


; <Start encoding let op_Slash_Hat>


(declare-fun FStar.UInt32.op_Slash_Hat (Term Term) Term)



(declare-fun FStar.UInt32.op_Slash_Hat@tok () Term)



; </end encoding let op_Slash_Hat>


; <Start encoding let op_Percent_Hat>


(declare-fun FStar.UInt32.op_Percent_Hat (Term Term) Term)



(declare-fun FStar.UInt32.op_Percent_Hat@tok () Term)



; </end encoding let op_Percent_Hat>


; <Start encoding let op_Hat_Hat>

(declare-fun FStar.UInt32.op_Hat_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Hat_Hat@tok () Term)


; </end encoding let op_Hat_Hat>


; <Start encoding let op_Amp_Hat>

(declare-fun FStar.UInt32.op_Amp_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Amp_Hat@tok () Term)


; </end encoding let op_Amp_Hat>


; <Start encoding let op_Bar_Hat>

(declare-fun FStar.UInt32.op_Bar_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Bar_Hat@tok () Term)


; </end encoding let op_Bar_Hat>


; <Start encoding let op_Less_Less_Hat>

(declare-fun FStar.UInt32.op_Less_Less_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Less_Less_Hat@tok () Term)


; </end encoding let op_Less_Less_Hat>


; <Start encoding let op_Greater_Greater_Hat>

(declare-fun FStar.UInt32.op_Greater_Greater_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Greater_Greater_Hat@tok () Term)


; </end encoding let op_Greater_Greater_Hat>


; <Start encoding let op_Equals_Hat>

(declare-fun FStar.UInt32.op_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Equals_Hat@tok () Term)

; </end encoding let op_Equals_Hat>


; <Start encoding let op_Greater_Hat>

(declare-fun FStar.UInt32.op_Greater_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Greater_Hat@tok () Term)

; </end encoding let op_Greater_Hat>


; <Start encoding let op_Greater_Equals_Hat>

(declare-fun FStar.UInt32.op_Greater_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Greater_Equals_Hat@tok () Term)

; </end encoding let op_Greater_Equals_Hat>


; <Start encoding let op_Less_Hat>

(declare-fun FStar.UInt32.op_Less_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Less_Hat@tok () Term)

; </end encoding let op_Less_Hat>


; <Start encoding let op_Less_Equals_Hat>

(declare-fun FStar.UInt32.op_Less_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Less_Equals_Hat@tok () Term)

; </end encoding let op_Less_Equals_Hat>


; <Start encoding val FStar.UInt32.to_string>

(declare-fun FStar.UInt32.to_string (Term) Term)
(declare-fun Tm_arrow_bde0326394a5877aafa8a9dfb4adb318 () Term)
(declare-fun FStar.UInt32.to_string@tok () Term)

; </end encoding val FStar.UInt32.to_string>


; <Start encoding val FStar.UInt32.to_string_hex>

(declare-fun FStar.UInt32.to_string_hex (Term) Term)

(declare-fun FStar.UInt32.to_string_hex@tok () Term)

; </end encoding val FStar.UInt32.to_string_hex>


; <Start encoding val FStar.UInt32.to_string_hex_pad>

(declare-fun FStar.UInt32.to_string_hex_pad (Term) Term)

(declare-fun FStar.UInt32.to_string_hex_pad@tok () Term)

; </end encoding val FStar.UInt32.to_string_hex_pad>


; <Start encoding val FStar.UInt32.of_string>

(declare-fun FStar.UInt32.of_string (Term) Term)
(declare-fun Tm_arrow_564534749090ea8f842e229c3182e762 () Term)
(declare-fun FStar.UInt32.of_string@tok () Term)

; </end encoding val FStar.UInt32.of_string>


; <Skipped #set-options "--admit_smt_queries true"/>


; <Start encoding let __uint_to_t>

(declare-fun FStar.UInt32.__uint_to_t (Term) Term)
(declare-fun Tm_arrow_67ad727682511dd92ce30d8d55620a8e () Term)
(declare-fun FStar.UInt32.__uint_to_t@tok () Term)

; </end encoding let __uint_to_t>


; <Skipped #reset-options/>


; End Externals for interface FStar.UInt32


; Externals for interface FStar.UInt64


; <Start encoding let n>

(declare-fun FStar.UInt64.n (Dummy_sort) Term)

; </end encoding let n>


; <Skipped #set-options "--max_fuel 0 --max_ifuel 0"/>


; <Start encoding val FStar.UInt64.t>

(declare-fun FStar.UInt64.t (Dummy_sort) Term)

; </end encoding val FStar.UInt64.t>


; <Start encoding val FStar.UInt64.v>

(declare-fun FStar.UInt64.v (Term) Term)
(declare-fun Tm_arrow_b1dc77edd47f50a79ef19c45877be87f () Term)
(declare-fun FStar.UInt64.v@tok () Term)

; </end encoding val FStar.UInt64.v>


; <Start encoding val FStar.UInt64.uint_to_t>

(declare-fun FStar.UInt64.uint_to_t (Term) Term)
(declare-fun Tm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4 (Term) Term)
(declare-fun Tm_arrow_0a7b550d26d1f7783c7c5e1990842388 () Term)
(declare-fun FStar.UInt64.uint_to_t@tok () Term)


; </end encoding val FStar.UInt64.uint_to_t>


; <Start encoding val FStar.UInt64.uv_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt64.uv_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt64.uv_inv@tok () Term)

; </end encoding val FStar.UInt64.uv_inv>


; <Start encoding val FStar.UInt64.vu_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt64.vu_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt64.vu_inv@tok () Term)

; </end encoding val FStar.UInt64.vu_inv>


; <Start encoding val FStar.UInt64.v_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt64.v_inj (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt64.v_inj@tok () Term)

; </end encoding val FStar.UInt64.v_inj>


; <Start encoding val FStar.UInt64.zero>

(declare-fun FStar.UInt64.zero (Dummy_sort) Term)
(declare-fun Tm_refine_89584a9c9cf094f470969adafcc43f12 () Term)


; </end encoding val FStar.UInt64.zero>


; <Start encoding val FStar.UInt64.one>

(declare-fun FStar.UInt64.one (Dummy_sort) Term)
(declare-fun Tm_refine_248426d47c73436882d5ff4a2d4f3cf0 () Term)


; </end encoding val FStar.UInt64.one>


; <Start encoding val FStar.UInt64.add>

(declare-fun FStar.UInt64.add (Term Term) Term)
(declare-fun Tm_refine_bc552b2c624e2add758b3ac761c0c563 (Term Term) Term)
(declare-fun Tm_arrow_be2b56e86970b1435b564896876df5af () Term)
(declare-fun FStar.UInt64.add@tok () Term)


; </end encoding val FStar.UInt64.add>


; <Start encoding val FStar.UInt64.add_underspec>

(declare-fun FStar.UInt64.add_underspec (Term Term) Term)
(declare-fun Tm_refine_453fa410c3a31a8a972a89b516aee90f (Term Term) Term)
(declare-fun Tm_arrow_7f1e1876505bc4561e28a0354c79be94 () Term)
(declare-fun FStar.UInt64.add_underspec@tok () Term)


; </end encoding val FStar.UInt64.add_underspec>


; <Start encoding val FStar.UInt64.add_mod>

(declare-fun FStar.UInt64.add_mod (Term Term) Term)
(declare-fun Tm_refine_2d98f2f5de361516da3dbd9f556509e2 (Term Term) Term)
(declare-fun Tm_arrow_05395bb977e74723e0c89b35f3db81b1 () Term)
(declare-fun FStar.UInt64.add_mod@tok () Term)


; </end encoding val FStar.UInt64.add_mod>


; <Start encoding val FStar.UInt64.sub>

(declare-fun FStar.UInt64.sub (Term Term) Term)
(declare-fun Tm_refine_4db8ba22c4504a66577a2159dcc603cd (Term Term) Term)
(declare-fun Tm_arrow_a3c2957810330952c9cd0dc2ef7e5dc1 () Term)
(declare-fun FStar.UInt64.sub@tok () Term)


; </end encoding val FStar.UInt64.sub>


; <Start encoding val FStar.UInt64.sub_underspec>

(declare-fun FStar.UInt64.sub_underspec (Term Term) Term)
(declare-fun Tm_refine_dd3e2dd01aa446ac6616a71fc757406a (Term Term) Term)
(declare-fun Tm_arrow_87b0e65776a09c1fe9734c4195b4bf84 () Term)
(declare-fun FStar.UInt64.sub_underspec@tok () Term)


; </end encoding val FStar.UInt64.sub_underspec>


; <Start encoding val FStar.UInt64.sub_mod>

(declare-fun FStar.UInt64.sub_mod (Term Term) Term)
(declare-fun Tm_refine_cb95789552ffa46c14f21af13ceaad6b (Term Term) Term)
(declare-fun Tm_arrow_7f617113bda01094490f58e39564f398 () Term)
(declare-fun FStar.UInt64.sub_mod@tok () Term)


; </end encoding val FStar.UInt64.sub_mod>


; <Start encoding val FStar.UInt64.mul>

(declare-fun FStar.UInt64.mul (Term Term) Term)
(declare-fun Tm_refine_2ac8bed7a6398f84bccb91bd4fed7136 (Term Term) Term)
(declare-fun Tm_arrow_ea17845c6f4791bda61fffc74c40da51 () Term)
(declare-fun FStar.UInt64.mul@tok () Term)


; </end encoding val FStar.UInt64.mul>


; <Start encoding val FStar.UInt64.mul_underspec>

(declare-fun FStar.UInt64.mul_underspec (Term Term) Term)
(declare-fun Tm_refine_b936d941ba7bf51db4d781f9af09acd3 (Term Term) Term)
(declare-fun Tm_arrow_596709ad66a9eee3dc6ef040a813e08e () Term)
(declare-fun FStar.UInt64.mul_underspec@tok () Term)


; </end encoding val FStar.UInt64.mul_underspec>


; <Start encoding val FStar.UInt64.mul_mod>

(declare-fun FStar.UInt64.mul_mod (Term Term) Term)
(declare-fun Tm_refine_fce3a2e2e29645212301d89fcebc4e29 (Term Term) Term)
(declare-fun Tm_arrow_a58b92e22a54f064a91938f5890f3d26 () Term)
(declare-fun FStar.UInt64.mul_mod@tok () Term)


; </end encoding val FStar.UInt64.mul_mod>


; <Start encoding val FStar.UInt64.div>

(declare-fun Tm_refine_94d25b6e0041d543efd58300424ecc37 () Term)
(declare-fun FStar.UInt64.div (Term Term) Term)

(declare-fun Tm_refine_2905e4cd1a81244ae97dc5c62563e060 (Term Term) Term)
(declare-fun Tm_arrow_362fd430a2a36692a10db610ce347491 () Term)
(declare-fun FStar.UInt64.div@tok () Term)


; </end encoding val FStar.UInt64.div>


; <Start encoding val FStar.UInt64.rem>


(declare-fun FStar.UInt64.rem (Term Term) Term)

(declare-fun Tm_refine_06f2bf4950bb76094f7b7f43daea2409 (Term Term) Term)
(declare-fun Tm_arrow_53bf9c10f719f234f584267623ec2e33 () Term)
(declare-fun FStar.UInt64.rem@tok () Term)


; </end encoding val FStar.UInt64.rem>


; <Start encoding val FStar.UInt64.logand>

(declare-fun FStar.UInt64.logand (Term Term) Term)
(declare-fun Tm_refine_4a73301fbc41c8e432f23b6aef69a5eb (Term Term) Term)
(declare-fun Tm_arrow_cbca1d1a87f201e6ff2f61643983b2f3 () Term)
(declare-fun FStar.UInt64.logand@tok () Term)


; </end encoding val FStar.UInt64.logand>


; <Start encoding val FStar.UInt64.logxor>

(declare-fun FStar.UInt64.logxor (Term Term) Term)
(declare-fun Tm_refine_b87f471e80e3c2bc077d38b7026cfcf6 (Term Term) Term)
(declare-fun Tm_arrow_7a0892a26110d0c3bb8d5540c3f9134f () Term)
(declare-fun FStar.UInt64.logxor@tok () Term)


; </end encoding val FStar.UInt64.logxor>


; <Start encoding val FStar.UInt64.logor>

(declare-fun FStar.UInt64.logor (Term Term) Term)
(declare-fun Tm_refine_6913af387cf2f30da0961ac60666f00f (Term Term) Term)
(declare-fun Tm_arrow_88959be20cb195d8ed8c043810621aa5 () Term)
(declare-fun FStar.UInt64.logor@tok () Term)


; </end encoding val FStar.UInt64.logor>


; <Start encoding val FStar.UInt64.lognot>

(declare-fun FStar.UInt64.lognot (Term) Term)
(declare-fun Tm_refine_d294ad5c8783c9adf54e87f8b3d910d1 (Term) Term)
(declare-fun Tm_arrow_5830582bc087a4c4cac6e2d02503540d () Term)
(declare-fun FStar.UInt64.lognot@tok () Term)


; </end encoding val FStar.UInt64.lognot>


; <Start encoding val FStar.UInt64.shift_right>

(declare-fun FStar.UInt64.shift_right (Term Term) Term)
(declare-fun Tm_refine_0556f625b89f1ac99fd21e82e26fe9e0 (Term Term) Term)
(declare-fun Tm_arrow_54172cd4c03b90333401dcf08f131f18 () Term)
(declare-fun FStar.UInt64.shift_right@tok () Term)


; </end encoding val FStar.UInt64.shift_right>


; <Start encoding val FStar.UInt64.shift_left>

(declare-fun FStar.UInt64.shift_left (Term Term) Term)
(declare-fun Tm_refine_ebf0af240d826e12ec6c1570ad81631c (Term Term) Term)
(declare-fun Tm_arrow_f0e726dc2efef2bba1cad7b7437673ab () Term)
(declare-fun FStar.UInt64.shift_left@tok () Term)


; </end encoding val FStar.UInt64.shift_left>


; <Start encoding let eq>

(declare-fun FStar.UInt64.eq (Term Term) Term)
(declare-fun Tm_arrow_598288f3403164a95ff09472c7ec0bb4 () Term)
(declare-fun FStar.UInt64.eq@tok () Term)

; </end encoding let eq>


; <Start encoding let gt>

(declare-fun FStar.UInt64.gt (Term Term) Term)

(declare-fun FStar.UInt64.gt@tok () Term)

; </end encoding let gt>


; <Start encoding let gte>

(declare-fun FStar.UInt64.gte (Term Term) Term)

(declare-fun FStar.UInt64.gte@tok () Term)

; </end encoding let gte>


; <Start encoding let lt>

(declare-fun FStar.UInt64.lt (Term Term) Term)

(declare-fun FStar.UInt64.lt@tok () Term)

; </end encoding let lt>


; <Start encoding let lte>

(declare-fun FStar.UInt64.lte (Term Term) Term)

(declare-fun FStar.UInt64.lte@tok () Term)

; </end encoding let lte>


; <Start encoding let minus>

(declare-fun FStar.UInt64.minus (Term) Term)
(declare-fun Tm_arrow_1b7783661e16e9c2a9894c974bc97032 () Term)
(declare-fun FStar.UInt64.minus@tok () Term)

; </end encoding let minus>


; <Start encoding let n_minus_one>

(declare-fun FStar.UInt64.n_minus_one (Dummy_sort) Term)

; </end encoding let n_minus_one>


; <Skipped #set-options "--z3rlimit 80 --initial_fuel 1 --max_fuel 1"/>


; <Start encoding let eq_mask>

(declare-fun FStar.UInt64.eq_mask (Term Term) Term)
(declare-fun Tm_refine_30c561286d2c8600e271922aaab003cf (Term Term) Term)
(declare-fun Tm_arrow_dc89781bb433a3a499ce3ed25df276ee () Term)
(declare-fun FStar.UInt64.eq_mask@tok () Term)


; </end encoding let eq_mask>


; <Start encoding val FStar.UInt64.lemma_sub_msbs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt64.lemma_sub_msbs (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt64.lemma_sub_msbs@tok () Term)

; </end encoding val FStar.UInt64.lemma_sub_msbs>


; <Start encoding let gte_mask>

(declare-fun FStar.UInt64.gte_mask (Term Term) Term)
(declare-fun Tm_refine_1b1f0e3b5d9ef76ddc765c8d9e623234 (Term Term) Term)
(declare-fun Tm_arrow_7b13171caed18c0d7cf0b1d9315655c1 () Term)
(declare-fun FStar.UInt64.gte_mask@tok () Term)


; </end encoding let gte_mask>


; <Skipped #reset-options/>


; <Start encoding let op_Plus_Hat>

(declare-fun FStar.UInt64.op_Plus_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Plus_Hat@tok () Term)


; </end encoding let op_Plus_Hat>


; <Start encoding let op_Plus_Question_Hat>

(declare-fun FStar.UInt64.op_Plus_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Plus_Question_Hat@tok () Term)


; </end encoding let op_Plus_Question_Hat>


; <Start encoding let op_Plus_Percent_Hat>

(declare-fun FStar.UInt64.op_Plus_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Plus_Percent_Hat@tok () Term)


; </end encoding let op_Plus_Percent_Hat>


; <Start encoding let op_Subtraction_Hat>

(declare-fun FStar.UInt64.op_Subtraction_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Subtraction_Hat@tok () Term)


; </end encoding let op_Subtraction_Hat>


; <Start encoding let op_Subtraction_Question_Hat>

(declare-fun FStar.UInt64.op_Subtraction_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Subtraction_Question_Hat@tok () Term)


; </end encoding let op_Subtraction_Question_Hat>


; <Start encoding let op_Subtraction_Percent_Hat>

(declare-fun FStar.UInt64.op_Subtraction_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Subtraction_Percent_Hat@tok () Term)


; </end encoding let op_Subtraction_Percent_Hat>


; <Start encoding let op_Star_Hat>

(declare-fun FStar.UInt64.op_Star_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Star_Hat@tok () Term)


; </end encoding let op_Star_Hat>


; <Start encoding let op_Star_Question_Hat>

(declare-fun FStar.UInt64.op_Star_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Star_Question_Hat@tok () Term)


; </end encoding let op_Star_Question_Hat>


; <Start encoding let op_Star_Percent_Hat>

(declare-fun FStar.UInt64.op_Star_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Star_Percent_Hat@tok () Term)


; </end encoding let op_Star_Percent_Hat>


; <Start encoding let op_Slash_Hat>


(declare-fun FStar.UInt64.op_Slash_Hat (Term Term) Term)



(declare-fun FStar.UInt64.op_Slash_Hat@tok () Term)



; </end encoding let op_Slash_Hat>


; <Start encoding let op_Percent_Hat>


(declare-fun FStar.UInt64.op_Percent_Hat (Term Term) Term)



(declare-fun FStar.UInt64.op_Percent_Hat@tok () Term)



; </end encoding let op_Percent_Hat>


; <Start encoding let op_Hat_Hat>

(declare-fun FStar.UInt64.op_Hat_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Hat_Hat@tok () Term)


; </end encoding let op_Hat_Hat>


; <Start encoding let op_Amp_Hat>

(declare-fun FStar.UInt64.op_Amp_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Amp_Hat@tok () Term)


; </end encoding let op_Amp_Hat>


; <Start encoding let op_Bar_Hat>

(declare-fun FStar.UInt64.op_Bar_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Bar_Hat@tok () Term)


; </end encoding let op_Bar_Hat>


; <Start encoding let op_Less_Less_Hat>

(declare-fun FStar.UInt64.op_Less_Less_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Less_Less_Hat@tok () Term)


; </end encoding let op_Less_Less_Hat>


; <Start encoding let op_Greater_Greater_Hat>

(declare-fun FStar.UInt64.op_Greater_Greater_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Greater_Greater_Hat@tok () Term)


; </end encoding let op_Greater_Greater_Hat>


; <Start encoding let op_Equals_Hat>

(declare-fun FStar.UInt64.op_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt64.op_Equals_Hat@tok () Term)

; </end encoding let op_Equals_Hat>


; <Start encoding let op_Greater_Hat>

(declare-fun FStar.UInt64.op_Greater_Hat (Term Term) Term)

(declare-fun FStar.UInt64.op_Greater_Hat@tok () Term)

; </end encoding let op_Greater_Hat>


; <Start encoding let op_Greater_Equals_Hat>

(declare-fun FStar.UInt64.op_Greater_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt64.op_Greater_Equals_Hat@tok () Term)

; </end encoding let op_Greater_Equals_Hat>


; <Start encoding let op_Less_Hat>

(declare-fun FStar.UInt64.op_Less_Hat (Term Term) Term)

(declare-fun FStar.UInt64.op_Less_Hat@tok () Term)

; </end encoding let op_Less_Hat>


; <Start encoding let op_Less_Equals_Hat>

(declare-fun FStar.UInt64.op_Less_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt64.op_Less_Equals_Hat@tok () Term)

; </end encoding let op_Less_Equals_Hat>


; <Start encoding val FStar.UInt64.to_string>

(declare-fun FStar.UInt64.to_string (Term) Term)
(declare-fun Tm_arrow_9181e066d5f5e8abb661df26378ed002 () Term)
(declare-fun FStar.UInt64.to_string@tok () Term)

; </end encoding val FStar.UInt64.to_string>


; <Start encoding val FStar.UInt64.to_string_hex>

(declare-fun FStar.UInt64.to_string_hex (Term) Term)

(declare-fun FStar.UInt64.to_string_hex@tok () Term)

; </end encoding val FStar.UInt64.to_string_hex>


; <Start encoding val FStar.UInt64.to_string_hex_pad>

(declare-fun FStar.UInt64.to_string_hex_pad (Term) Term)

(declare-fun FStar.UInt64.to_string_hex_pad@tok () Term)

; </end encoding val FStar.UInt64.to_string_hex_pad>


; <Start encoding val FStar.UInt64.of_string>

(declare-fun FStar.UInt64.of_string (Term) Term)
(declare-fun Tm_arrow_d8ed8461d1bddbfa79f5d5b77e608759 () Term)
(declare-fun FStar.UInt64.of_string@tok () Term)

; </end encoding val FStar.UInt64.of_string>


; <Skipped #set-options "--admit_smt_queries true"/>


; <Start encoding let __uint_to_t>

(declare-fun FStar.UInt64.__uint_to_t (Term) Term)
(declare-fun Tm_arrow_583103ad9bf405c63f576183363ae2d9 () Term)
(declare-fun FStar.UInt64.__uint_to_t@tok () Term)

; </end encoding let __uint_to_t>


; <Skipped #reset-options/>


; End Externals for interface FStar.UInt64


; Externals for interface FStar.UInt16


; <Start encoding let n>

(declare-fun FStar.UInt16.n (Dummy_sort) Term)

; </end encoding let n>


; <Skipped #set-options "--max_fuel 0 --max_ifuel 0"/>


; <Start encoding val FStar.UInt16.t>

(declare-fun FStar.UInt16.t (Dummy_sort) Term)

; </end encoding val FStar.UInt16.t>


; <Start encoding val FStar.UInt16.v>

(declare-fun FStar.UInt16.v (Term) Term)
(declare-fun Tm_arrow_831b8138993a407ded8960bcff127b07 () Term)
(declare-fun FStar.UInt16.v@tok () Term)

; </end encoding val FStar.UInt16.v>


; <Start encoding val FStar.UInt16.uint_to_t>

(declare-fun FStar.UInt16.uint_to_t (Term) Term)
(declare-fun Tm_refine_f2a41cd0b7a1b87e64e4bdabfc823091 (Term) Term)
(declare-fun Tm_arrow_f4c24117357cf86f1b23d9cc39310530 () Term)
(declare-fun FStar.UInt16.uint_to_t@tok () Term)


; </end encoding val FStar.UInt16.uint_to_t>


; <Start encoding val FStar.UInt16.uv_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt16.uv_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt16.uv_inv@tok () Term)

; </end encoding val FStar.UInt16.uv_inv>


; <Start encoding val FStar.UInt16.vu_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt16.vu_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt16.vu_inv@tok () Term)

; </end encoding val FStar.UInt16.vu_inv>


; <Start encoding val FStar.UInt16.v_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt16.v_inj (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt16.v_inj@tok () Term)

; </end encoding val FStar.UInt16.v_inj>


; <Start encoding val FStar.UInt16.zero>

(declare-fun FStar.UInt16.zero (Dummy_sort) Term)
(declare-fun Tm_refine_954f2f8414e85457d28fe853c92eda2f () Term)


; </end encoding val FStar.UInt16.zero>


; <Start encoding val FStar.UInt16.one>

(declare-fun FStar.UInt16.one (Dummy_sort) Term)
(declare-fun Tm_refine_2808678106914fa614675fc00e2d12d2 () Term)


; </end encoding val FStar.UInt16.one>


; <Start encoding val FStar.UInt16.add>

(declare-fun FStar.UInt16.add (Term Term) Term)
(declare-fun Tm_refine_6fc1cfeb1ee6b248d1fef572cc963c99 (Term Term) Term)
(declare-fun Tm_arrow_f5504d213bba7b5885cb0987c01f2153 () Term)
(declare-fun FStar.UInt16.add@tok () Term)


; </end encoding val FStar.UInt16.add>


; <Start encoding val FStar.UInt16.add_underspec>

(declare-fun FStar.UInt16.add_underspec (Term Term) Term)
(declare-fun Tm_refine_34c091163f56732e02aa4746939ed3b3 (Term Term) Term)
(declare-fun Tm_arrow_fca12874fe31591238919898de90521f () Term)
(declare-fun FStar.UInt16.add_underspec@tok () Term)


; </end encoding val FStar.UInt16.add_underspec>


; <Start encoding val FStar.UInt16.add_mod>

(declare-fun FStar.UInt16.add_mod (Term Term) Term)
(declare-fun Tm_refine_a528e7088dc7771b5f67a6b9c65b45af (Term Term) Term)
(declare-fun Tm_arrow_e98be28bf728160b6eb326bbf51fc61a () Term)
(declare-fun FStar.UInt16.add_mod@tok () Term)


; </end encoding val FStar.UInt16.add_mod>


; <Start encoding val FStar.UInt16.sub>

(declare-fun FStar.UInt16.sub (Term Term) Term)
(declare-fun Tm_refine_b859c3bfdcf246597841540fb1ed998d (Term Term) Term)
(declare-fun Tm_arrow_413f6d7ea0554099e9c499578964c6cd () Term)
(declare-fun FStar.UInt16.sub@tok () Term)


; </end encoding val FStar.UInt16.sub>


; <Start encoding val FStar.UInt16.sub_underspec>

(declare-fun FStar.UInt16.sub_underspec (Term Term) Term)
(declare-fun Tm_refine_8fdd03b83187f4fea291f025e835855f (Term Term) Term)
(declare-fun Tm_arrow_d2d64a11e05eca67e5ebd6fbca18667e () Term)
(declare-fun FStar.UInt16.sub_underspec@tok () Term)


; </end encoding val FStar.UInt16.sub_underspec>


; <Start encoding val FStar.UInt16.sub_mod>

(declare-fun FStar.UInt16.sub_mod (Term Term) Term)
(declare-fun Tm_refine_129b0169b4e8bab9a8dfb4cbd0d62214 (Term Term) Term)
(declare-fun Tm_arrow_0cfa58c6ce7e51c3d1880814626c261d () Term)
(declare-fun FStar.UInt16.sub_mod@tok () Term)


; </end encoding val FStar.UInt16.sub_mod>


; <Start encoding val FStar.UInt16.mul>

(declare-fun FStar.UInt16.mul (Term Term) Term)
(declare-fun Tm_refine_0c3c281ec070e108a64d9e6643fa12b8 (Term Term) Term)
(declare-fun Tm_arrow_818a65cd860d9d90b9ff51d2de174014 () Term)
(declare-fun FStar.UInt16.mul@tok () Term)


; </end encoding val FStar.UInt16.mul>


; <Start encoding val FStar.UInt16.mul_underspec>

(declare-fun FStar.UInt16.mul_underspec (Term Term) Term)
(declare-fun Tm_refine_cb1b76b3df6f40838b504137c35a6e17 (Term Term) Term)
(declare-fun Tm_arrow_dfe74ad18d22be11665be6a37fdb27f6 () Term)
(declare-fun FStar.UInt16.mul_underspec@tok () Term)


; </end encoding val FStar.UInt16.mul_underspec>


; <Start encoding val FStar.UInt16.mul_mod>

(declare-fun FStar.UInt16.mul_mod (Term Term) Term)
(declare-fun Tm_refine_e24ce146e70bc5c453cecdd42c419aa1 (Term Term) Term)
(declare-fun Tm_arrow_fa5800654240cb69e060f3600acc0ab9 () Term)
(declare-fun FStar.UInt16.mul_mod@tok () Term)


; </end encoding val FStar.UInt16.mul_mod>


; <Start encoding val FStar.UInt16.div>

(declare-fun Tm_refine_3e34e2c4f5ba554ca9d5a94a7452f876 () Term)
(declare-fun FStar.UInt16.div (Term Term) Term)

(declare-fun Tm_refine_a2680f37a85ca38ef32ad76329ca6655 (Term Term) Term)
(declare-fun Tm_arrow_1d3ed7d1a36eb1c15be9167cdd26d975 () Term)
(declare-fun FStar.UInt16.div@tok () Term)


; </end encoding val FStar.UInt16.div>


; <Start encoding val FStar.UInt16.rem>


(declare-fun FStar.UInt16.rem (Term Term) Term)

(declare-fun Tm_refine_8d1743b5c6d2f2c9050076549cfeb5f4 (Term Term) Term)
(declare-fun Tm_arrow_a9b2f8e628351ca8191e5a2d74e12318 () Term)
(declare-fun FStar.UInt16.rem@tok () Term)


; </end encoding val FStar.UInt16.rem>


; <Start encoding val FStar.UInt16.logand>

(declare-fun FStar.UInt16.logand (Term Term) Term)
(declare-fun Tm_refine_7cf5fd844874f3049d3067fe68a85256 (Term Term) Term)
(declare-fun Tm_arrow_7aa270d906bd8fb45c247b75568c48db () Term)
(declare-fun FStar.UInt16.logand@tok () Term)


; </end encoding val FStar.UInt16.logand>


; <Start encoding val FStar.UInt16.logxor>

(declare-fun FStar.UInt16.logxor (Term Term) Term)
(declare-fun Tm_refine_e55be37d77d9b240b683ff3354ca439c (Term Term) Term)
(declare-fun Tm_arrow_22be9a4de1ee3eadb350cd60783b66ae () Term)
(declare-fun FStar.UInt16.logxor@tok () Term)


; </end encoding val FStar.UInt16.logxor>


; <Start encoding val FStar.UInt16.logor>

(declare-fun FStar.UInt16.logor (Term Term) Term)
(declare-fun Tm_refine_3881ab512ff2d0d86d43bf57b0c61e75 (Term Term) Term)
(declare-fun Tm_arrow_fa4847a4c38079a6033cc53f6f8391a5 () Term)
(declare-fun FStar.UInt16.logor@tok () Term)


; </end encoding val FStar.UInt16.logor>


; <Start encoding val FStar.UInt16.lognot>

(declare-fun FStar.UInt16.lognot (Term) Term)
(declare-fun Tm_refine_dfa8480cc0780e895037e28b8472b8df (Term) Term)
(declare-fun Tm_arrow_893e33c74d084e533ade4a873a1f755c () Term)
(declare-fun FStar.UInt16.lognot@tok () Term)


; </end encoding val FStar.UInt16.lognot>


; <Start encoding val FStar.UInt16.shift_right>

(declare-fun FStar.UInt16.shift_right (Term Term) Term)
(declare-fun Tm_refine_4ef8dd68ca64f7c4c1a8bac302cb51a6 (Term Term) Term)
(declare-fun Tm_arrow_a7706d3849bacf3a6eca4b133d095a70 () Term)
(declare-fun FStar.UInt16.shift_right@tok () Term)


; </end encoding val FStar.UInt16.shift_right>


; <Start encoding val FStar.UInt16.shift_left>

(declare-fun FStar.UInt16.shift_left (Term Term) Term)
(declare-fun Tm_refine_bb6b262bbc4fcaf78b2af3148bb763c6 (Term Term) Term)
(declare-fun Tm_arrow_5b62fe9416ecdac1c662be0b77ffd710 () Term)
(declare-fun FStar.UInt16.shift_left@tok () Term)


; </end encoding val FStar.UInt16.shift_left>


; <Start encoding let eq>

(declare-fun FStar.UInt16.eq (Term Term) Term)
(declare-fun Tm_arrow_ec095ea6bafa5e9866a85b27cff308e0 () Term)
(declare-fun FStar.UInt16.eq@tok () Term)

; </end encoding let eq>


; <Start encoding let gt>

(declare-fun FStar.UInt16.gt (Term Term) Term)

(declare-fun FStar.UInt16.gt@tok () Term)

; </end encoding let gt>


; <Start encoding let gte>

(declare-fun FStar.UInt16.gte (Term Term) Term)

(declare-fun FStar.UInt16.gte@tok () Term)

; </end encoding let gte>


; <Start encoding let lt>

(declare-fun FStar.UInt16.lt (Term Term) Term)

(declare-fun FStar.UInt16.lt@tok () Term)

; </end encoding let lt>


; <Start encoding let lte>

(declare-fun FStar.UInt16.lte (Term Term) Term)

(declare-fun FStar.UInt16.lte@tok () Term)

; </end encoding let lte>


; <Start encoding let minus>

(declare-fun FStar.UInt16.minus (Term) Term)
(declare-fun Tm_arrow_3f395de82a49d1518ea23b50c5f2f44e () Term)
(declare-fun FStar.UInt16.minus@tok () Term)

; </end encoding let minus>


; <Start encoding let n_minus_one>

(declare-fun FStar.UInt16.n_minus_one (Dummy_sort) Term)

; </end encoding let n_minus_one>


; <Skipped #set-options "--z3rlimit 80 --initial_fuel 1 --max_fuel 1"/>


; <Start encoding let eq_mask>

(declare-fun FStar.UInt16.eq_mask (Term Term) Term)
(declare-fun Tm_refine_4337d527bd8e18a624079c37cd404c59 (Term Term) Term)
(declare-fun Tm_arrow_3b501882da55605a5a3d3f43f32c45b9 () Term)
(declare-fun FStar.UInt16.eq_mask@tok () Term)


; </end encoding let eq_mask>


; <Start encoding val FStar.UInt16.lemma_sub_msbs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt16.lemma_sub_msbs (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt16.lemma_sub_msbs@tok () Term)

; </end encoding val FStar.UInt16.lemma_sub_msbs>


; <Start encoding let gte_mask>

(declare-fun FStar.UInt16.gte_mask (Term Term) Term)
(declare-fun Tm_refine_d8e117de3278723cbc3559698b2db64e (Term Term) Term)
(declare-fun Tm_arrow_01b6b3276c1f9c1f15edd31113793e3b () Term)
(declare-fun FStar.UInt16.gte_mask@tok () Term)


; </end encoding let gte_mask>


; <Skipped #reset-options/>


; <Start encoding let op_Plus_Hat>

(declare-fun FStar.UInt16.op_Plus_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Plus_Hat@tok () Term)


; </end encoding let op_Plus_Hat>


; <Start encoding let op_Plus_Question_Hat>

(declare-fun FStar.UInt16.op_Plus_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Plus_Question_Hat@tok () Term)


; </end encoding let op_Plus_Question_Hat>


; <Start encoding let op_Plus_Percent_Hat>

(declare-fun FStar.UInt16.op_Plus_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Plus_Percent_Hat@tok () Term)


; </end encoding let op_Plus_Percent_Hat>


; <Start encoding let op_Subtraction_Hat>

(declare-fun FStar.UInt16.op_Subtraction_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Subtraction_Hat@tok () Term)


; </end encoding let op_Subtraction_Hat>


; <Start encoding let op_Subtraction_Question_Hat>

(declare-fun FStar.UInt16.op_Subtraction_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Subtraction_Question_Hat@tok () Term)


; </end encoding let op_Subtraction_Question_Hat>


; <Start encoding let op_Subtraction_Percent_Hat>

(declare-fun FStar.UInt16.op_Subtraction_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Subtraction_Percent_Hat@tok () Term)


; </end encoding let op_Subtraction_Percent_Hat>


; <Start encoding let op_Star_Hat>

(declare-fun FStar.UInt16.op_Star_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Star_Hat@tok () Term)


; </end encoding let op_Star_Hat>


; <Start encoding let op_Star_Question_Hat>

(declare-fun FStar.UInt16.op_Star_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Star_Question_Hat@tok () Term)


; </end encoding let op_Star_Question_Hat>


; <Start encoding let op_Star_Percent_Hat>

(declare-fun FStar.UInt16.op_Star_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Star_Percent_Hat@tok () Term)


; </end encoding let op_Star_Percent_Hat>


; <Start encoding let op_Slash_Hat>


(declare-fun FStar.UInt16.op_Slash_Hat (Term Term) Term)



(declare-fun FStar.UInt16.op_Slash_Hat@tok () Term)



; </end encoding let op_Slash_Hat>


; <Start encoding let op_Percent_Hat>


(declare-fun FStar.UInt16.op_Percent_Hat (Term Term) Term)



(declare-fun FStar.UInt16.op_Percent_Hat@tok () Term)



; </end encoding let op_Percent_Hat>


; <Start encoding let op_Hat_Hat>

(declare-fun FStar.UInt16.op_Hat_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Hat_Hat@tok () Term)


; </end encoding let op_Hat_Hat>


; <Start encoding let op_Amp_Hat>

(declare-fun FStar.UInt16.op_Amp_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Amp_Hat@tok () Term)


; </end encoding let op_Amp_Hat>


; <Start encoding let op_Bar_Hat>

(declare-fun FStar.UInt16.op_Bar_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Bar_Hat@tok () Term)


; </end encoding let op_Bar_Hat>


; <Start encoding let op_Less_Less_Hat>

(declare-fun FStar.UInt16.op_Less_Less_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Less_Less_Hat@tok () Term)


; </end encoding let op_Less_Less_Hat>


; <Start encoding let op_Greater_Greater_Hat>

(declare-fun FStar.UInt16.op_Greater_Greater_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Greater_Greater_Hat@tok () Term)


; </end encoding let op_Greater_Greater_Hat>


; <Start encoding let op_Equals_Hat>

(declare-fun FStar.UInt16.op_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt16.op_Equals_Hat@tok () Term)

; </end encoding let op_Equals_Hat>


; <Start encoding let op_Greater_Hat>

(declare-fun FStar.UInt16.op_Greater_Hat (Term Term) Term)

(declare-fun FStar.UInt16.op_Greater_Hat@tok () Term)

; </end encoding let op_Greater_Hat>


; <Start encoding let op_Greater_Equals_Hat>

(declare-fun FStar.UInt16.op_Greater_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt16.op_Greater_Equals_Hat@tok () Term)

; </end encoding let op_Greater_Equals_Hat>


; <Start encoding let op_Less_Hat>

(declare-fun FStar.UInt16.op_Less_Hat (Term Term) Term)

(declare-fun FStar.UInt16.op_Less_Hat@tok () Term)

; </end encoding let op_Less_Hat>


; <Start encoding let op_Less_Equals_Hat>

(declare-fun FStar.UInt16.op_Less_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt16.op_Less_Equals_Hat@tok () Term)

; </end encoding let op_Less_Equals_Hat>


; <Start encoding val FStar.UInt16.to_string>

(declare-fun FStar.UInt16.to_string (Term) Term)
(declare-fun Tm_arrow_1567a0c3fa9c6a7b76db1de05c62a83e () Term)
(declare-fun FStar.UInt16.to_string@tok () Term)

; </end encoding val FStar.UInt16.to_string>


; <Start encoding val FStar.UInt16.to_string_hex>

(declare-fun FStar.UInt16.to_string_hex (Term) Term)

(declare-fun FStar.UInt16.to_string_hex@tok () Term)

; </end encoding val FStar.UInt16.to_string_hex>


; <Start encoding val FStar.UInt16.to_string_hex_pad>

(declare-fun FStar.UInt16.to_string_hex_pad (Term) Term)

(declare-fun FStar.UInt16.to_string_hex_pad@tok () Term)

; </end encoding val FStar.UInt16.to_string_hex_pad>


; <Start encoding val FStar.UInt16.of_string>

(declare-fun FStar.UInt16.of_string (Term) Term)
(declare-fun Tm_arrow_68a59188b2c9544b263522e5c6da7655 () Term)
(declare-fun FStar.UInt16.of_string@tok () Term)

; </end encoding val FStar.UInt16.of_string>


; <Skipped #set-options "--admit_smt_queries true"/>


; <Start encoding let __uint_to_t>

(declare-fun FStar.UInt16.__uint_to_t (Term) Term)
(declare-fun Tm_arrow_08c7c5e1e582fde525f5d9f6401fce2b () Term)
(declare-fun FStar.UInt16.__uint_to_t@tok () Term)

; </end encoding let __uint_to_t>


; <Skipped #reset-options/>


; End Externals for interface FStar.UInt16


; Externals for interface FStar.SizeT


; <Start encoding val FStar.SizeT.t>

(declare-fun FStar.SizeT.t (Dummy_sort) Term)

; </end encoding val FStar.SizeT.t>


; <Start encoding val FStar.SizeT.fits>

(declare-fun FStar.SizeT.fits (Term) Term)

(declare-fun FStar.SizeT.fits@tok () Term)

; </end encoding val FStar.SizeT.fits>


; <Start encoding val FStar.SizeT.fits_at_least_16>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.SizeT.fits_at_least_16 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.SizeT.fits_at_least_16@tok () Term)

; </end encoding val FStar.SizeT.fits_at_least_16>


; <Start encoding val FStar.SizeT.v>

(declare-fun FStar.SizeT.v (Term) Term)
(declare-fun Tm_refine_7df43cb9feb536df62477b7b30ce1682 () Term)
(declare-fun Tm_arrow_f4355d96dc8337ca1f3b7cf53f6ca8a9 () Term)
(declare-fun FStar.SizeT.v@tok () Term)


; </end encoding val FStar.SizeT.v>


; <Start encoding val FStar.SizeT.uint_to_t>

(declare-fun FStar.SizeT.uint_to_t (Term) Term)
(declare-fun Tm_refine_207024d2522be2ff59992eb07d6dc785 (Term) Term)
(declare-fun Tm_arrow_a520d1312bd9f940e7bf685b67ef0387 () Term)
(declare-fun FStar.SizeT.uint_to_t@tok () Term)


; </end encoding val FStar.SizeT.uint_to_t>


; <Start encoding val FStar.SizeT.size_v_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.SizeT.size_v_inj (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.SizeT.size_v_inj@tok () Term)

; </end encoding val FStar.SizeT.size_v_inj>


; <Start encoding val FStar.SizeT.size_uint_to_t_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.SizeT.size_uint_to_t_inj (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.SizeT.size_uint_to_t_inj@tok () Term)

; </end encoding val FStar.SizeT.size_uint_to_t_inj>


; <Start encoding val FStar.SizeT.fits_u32>

(declare-fun FStar.SizeT.fits_u32 (Dummy_sort) Term)

; </end encoding val FStar.SizeT.fits_u32>


; <Start encoding val FStar.SizeT.fits_u64>

(declare-fun FStar.SizeT.fits_u64 (Dummy_sort) Term)

; </end encoding val FStar.SizeT.fits_u64>


; <Start encoding val FStar.SizeT.fits_u64_implies_fits_32>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.SizeT.fits_u64_implies_fits_32 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.SizeT.fits_u64_implies_fits_32@tok () Term)

; </end encoding val FStar.SizeT.fits_u64_implies_fits_32>


; <Start encoding val FStar.SizeT.fits_u32_implies_fits>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.SizeT.fits_u32_implies_fits (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.SizeT.fits_u32_implies_fits@tok () Term)

; </end encoding val FStar.SizeT.fits_u32_implies_fits>


; <Start encoding val FStar.SizeT.fits_u64_implies_fits>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.SizeT.fits_u64_implies_fits (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.SizeT.fits_u64_implies_fits@tok () Term)

; </end encoding val FStar.SizeT.fits_u64_implies_fits>


; <Start encoding val FStar.SizeT.of_u32>

(declare-fun FStar.SizeT.of_u32 (Term) Term)
(declare-fun Tm_refine_f02df9e42867b29139e30a8d25d0803a (Term) Term)
(declare-fun Tm_arrow_d32ed4f62348d1e28d1f4d2b050c4d84 () Term)
(declare-fun FStar.SizeT.of_u32@tok () Term)


; </end encoding val FStar.SizeT.of_u32>


; <Start encoding val FStar.SizeT.of_u64>

(declare-fun FStar.SizeT.of_u64 (Term) Term)
(declare-fun Tm_refine_74ff83f8f790421a92b21d5238029333 (Term) Term)
(declare-fun Tm_arrow_0be20d2cd8ace162a878ab1733c5a347 () Term)
(declare-fun FStar.SizeT.of_u64@tok () Term)


; </end encoding val FStar.SizeT.of_u64>


; <Start encoding val FStar.SizeT.uint16_to_sizet>

(declare-fun FStar.SizeT.uint16_to_sizet (Term) Term)
(declare-fun Tm_refine_4006fdabf017e57b089f036ff201e6b2 (Term) Term)
(declare-fun Tm_arrow_4db338de8ddeeb8244e3a503ff79ddd3 () Term)
(declare-fun FStar.SizeT.uint16_to_sizet@tok () Term)


; </end encoding val FStar.SizeT.uint16_to_sizet>


; <Start encoding val FStar.SizeT.uint32_to_sizet>

(declare-fun FStar.SizeT.uint32_to_sizet (Term) Term)


(declare-fun FStar.SizeT.uint32_to_sizet@tok () Term)


; </end encoding val FStar.SizeT.uint32_to_sizet>


; <Start encoding val FStar.SizeT.uint64_to_sizet>

(declare-fun FStar.SizeT.uint64_to_sizet (Term) Term)


(declare-fun FStar.SizeT.uint64_to_sizet@tok () Term)


; </end encoding val FStar.SizeT.uint64_to_sizet>


; <Start encoding val FStar.SizeT.sizet_to_uint32>

(declare-fun FStar.SizeT.sizet_to_uint32 (Term) Term)
(declare-fun Tm_refine_5edb3a7b76241142e862fe5b5130ed01 (Term) Term)
(declare-fun Tm_arrow_0945aa00166668d70c541455d8254fea () Term)
(declare-fun FStar.SizeT.sizet_to_uint32@tok () Term)


; </end encoding val FStar.SizeT.sizet_to_uint32>


; <Start encoding val FStar.SizeT.sizet_to_uint64>

(declare-fun FStar.SizeT.sizet_to_uint64 (Term) Term)
(declare-fun Tm_refine_98f9acaa74739a647017ac1af335b10f (Term) Term)
(declare-fun Tm_arrow_6919b8499b3d7fabc81798e7e128b0b0 () Term)
(declare-fun FStar.SizeT.sizet_to_uint64@tok () Term)


; </end encoding val FStar.SizeT.sizet_to_uint64>


; <Start encoding val FStar.SizeT.fits_lte>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.SizeT.fits_lte (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.SizeT.fits_lte@tok () Term)

; </end encoding val FStar.SizeT.fits_lte>


; <Start encoding val FStar.SizeT.add>

(declare-fun FStar.SizeT.add (Term Term) Term)
(declare-fun Tm_refine_7345e45a081c530b535520410af62181 (Term Term) Term)
(declare-fun Tm_arrow_fbf454d709236e798330cc0e187a90e9 () Term)
(declare-fun FStar.SizeT.add@tok () Term)


; </end encoding val FStar.SizeT.add>


; <Start encoding val FStar.SizeT.sub>

(declare-fun FStar.SizeT.sub (Term Term) Term)
(declare-fun Tm_refine_d0e26b5396345241439382488d6d50cb (Term Term) Term)
(declare-fun Tm_arrow_c44917ba07567c002f032b362afaab3d () Term)
(declare-fun FStar.SizeT.sub@tok () Term)


; </end encoding val FStar.SizeT.sub>


; <Start encoding val FStar.SizeT.mul>

(declare-fun FStar.SizeT.mul (Term Term) Term)
(declare-fun Tm_refine_395b108767a76e52305ce4909b9f0dc0 (Term Term) Term)
(declare-fun Tm_arrow_370b1edb6331d2a49fa48f47146677f3 () Term)
(declare-fun FStar.SizeT.mul@tok () Term)


; </end encoding val FStar.SizeT.mul>


; <Start encoding val FStar.SizeT.div>

(declare-fun Tm_refine_839ce6d58012d733d9f3ff233d62acf0 () Term)
(declare-fun FStar.SizeT.div (Term Term) Term)

(declare-fun Tm_refine_2068df505bb96b7ae2ff626581c0168f (Term Term) Term)
(declare-fun Tm_arrow_11a00dfd7a00d7e92b236a877f026b94 () Term)
(declare-fun FStar.SizeT.div@tok () Term)


; </end encoding val FStar.SizeT.div>


; <Start encoding let mod_spec>


(declare-fun Tm_refine_aa6a9e30f1f8ec8644f9ecb60708ad80 () Term)
(declare-fun FStar.SizeT.mod_spec (Term Term) Term)



(declare-fun Tm_ghost_arrow_a3120b2b13eb1cd031e71acec7a5d62a () Term)
(declare-fun FStar.SizeT.mod_spec@tok () Term)




; </end encoding let mod_spec>


; <Start encoding val FStar.SizeT.rem>


(declare-fun FStar.SizeT.rem (Term Term) Term)

(declare-fun Tm_refine_ce32fa128b1462de9e092637c8c505fc (Term Term) Term)
(declare-fun Tm_arrow_a8f0de3c72b81c9d791aa7ddfedd5219 () Term)
(declare-fun FStar.SizeT.rem@tok () Term)


; </end encoding val FStar.SizeT.rem>


; <Start encoding val FStar.SizeT.gt>

(declare-fun FStar.SizeT.gt (Term Term) Term)
(declare-fun Tm_refine_88d8ea78852f4a1221620757d8432af9 (Term Term) Term)
(declare-fun Tm_arrow_4fb87aa2b11f10fff6bf118c542d6d95 () Term)
(declare-fun FStar.SizeT.gt@tok () Term)


; </end encoding val FStar.SizeT.gt>


; <Start encoding val FStar.SizeT.gte>

(declare-fun FStar.SizeT.gte (Term Term) Term)
(declare-fun Tm_refine_f448e14e94546108c9b377f649f2a36b (Term Term) Term)
(declare-fun Tm_arrow_970fb1ec688ca4c284ee8ac6ccdc6d45 () Term)
(declare-fun FStar.SizeT.gte@tok () Term)


; </end encoding val FStar.SizeT.gte>


; <Start encoding val FStar.SizeT.lt>

(declare-fun FStar.SizeT.lt (Term Term) Term)
(declare-fun Tm_refine_31989e8abdc6ba5299e22d3a8f67c3d3 (Term Term) Term)
(declare-fun Tm_arrow_3ba06e4c12d431bb8decb21d117369bf () Term)
(declare-fun FStar.SizeT.lt@tok () Term)


; </end encoding val FStar.SizeT.lt>


; <Start encoding val FStar.SizeT.lte>

(declare-fun FStar.SizeT.lte (Term Term) Term)
(declare-fun Tm_refine_2fa5cf54e8b3b6f52e5eb44bd038d58d (Term Term) Term)
(declare-fun Tm_arrow_8afa17d239047ff9e126b23943854cd0 () Term)
(declare-fun FStar.SizeT.lte@tok () Term)


; </end encoding val FStar.SizeT.lte>


; <Start encoding let op_Plus_Hat>

(declare-fun FStar.SizeT.op_Plus_Hat (Term Term) Term)


(declare-fun FStar.SizeT.op_Plus_Hat@tok () Term)


; </end encoding let op_Plus_Hat>


; <Start encoding let op_Subtraction_Hat>

(declare-fun FStar.SizeT.op_Subtraction_Hat (Term Term) Term)


(declare-fun FStar.SizeT.op_Subtraction_Hat@tok () Term)


; </end encoding let op_Subtraction_Hat>


; <Start encoding let op_Star_Hat>

(declare-fun FStar.SizeT.op_Star_Hat (Term Term) Term)


(declare-fun FStar.SizeT.op_Star_Hat@tok () Term)


; </end encoding let op_Star_Hat>


; <Start encoding let op_Percent_Hat>


(declare-fun FStar.SizeT.op_Percent_Hat (Term Term) Term)



(declare-fun FStar.SizeT.op_Percent_Hat@tok () Term)



; </end encoding let op_Percent_Hat>


; <Start encoding let op_Greater_Hat>

(declare-fun FStar.SizeT.op_Greater_Hat (Term Term) Term)


(declare-fun FStar.SizeT.op_Greater_Hat@tok () Term)


; </end encoding let op_Greater_Hat>


; <Start encoding let op_Greater_Equals_Hat>

(declare-fun FStar.SizeT.op_Greater_Equals_Hat (Term Term) Term)


(declare-fun FStar.SizeT.op_Greater_Equals_Hat@tok () Term)


; </end encoding let op_Greater_Equals_Hat>


; <Start encoding let op_Less_Hat>

(declare-fun FStar.SizeT.op_Less_Hat (Term Term) Term)


(declare-fun FStar.SizeT.op_Less_Hat@tok () Term)


; </end encoding let op_Less_Hat>


; <Start encoding let op_Less_Equals_Hat>

(declare-fun FStar.SizeT.op_Less_Equals_Hat (Term Term) Term)


(declare-fun FStar.SizeT.op_Less_Equals_Hat@tok () Term)


; </end encoding let op_Less_Equals_Hat>


; <Start encoding let __uint_to_t>

(declare-fun FStar.SizeT.__uint_to_t (Term) Term)
(declare-fun Tm_arrow_49041be28da67e297831819b0e141a0a () Term)
(declare-fun FStar.SizeT.__uint_to_t@tok () Term)

; </end encoding let __uint_to_t>


; End Externals for interface FStar.SizeT


; Externals for interface FStar.Sealed


; <Start encoding val FStar.Sealed.sealed>

(declare-fun FStar.Sealed.sealed (Term) Term)

(declare-fun FStar.Sealed.sealed@tok () Term)

; </end encoding val FStar.Sealed.sealed>


; <Start encoding val FStar.Sealed.sealed_singl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Sealed.sealed_singl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Sealed.sealed_singl@tok () Term)

; </end encoding val FStar.Sealed.sealed_singl>


; <Start encoding val FStar.Sealed.seal>

(declare-fun FStar.Sealed.seal (Term Term) Term)
(declare-fun Tm_arrow_202c0385508095b22536f7b176783182 () Term)
(declare-fun FStar.Sealed.seal@tok () Term)

; </end encoding val FStar.Sealed.seal>


; <Start encoding val FStar.Sealed.map_seal>


(declare-fun FStar.Sealed.map_seal (Term Term Term Term) Term)

(declare-fun Tm_arrow_8ae919a1b422d31df5f3a30011fa6e98 () Term)
(declare-fun FStar.Sealed.map_seal@tok () Term)

; </end encoding val FStar.Sealed.map_seal>


; <Start encoding val FStar.Sealed.bind_seal>

(declare-fun Tm_arrow_5dc851dfbcbc38067d4415ede8f88e9f (Term Term) Term)
(declare-fun FStar.Sealed.bind_seal (Term Term Term Term) Term)

(declare-fun Tm_arrow_4d90a5e6583ddd9ddbd451cbed0e9d01 () Term)
(declare-fun FStar.Sealed.bind_seal@tok () Term)

; </end encoding val FStar.Sealed.bind_seal>


; End Externals for interface FStar.Sealed


; Externals for interface FStar.Range


; <Start encoding val FStar.Range.__range>

(declare-fun FStar.Range.__range () Term)

; </end encoding val FStar.Range.__range>


; <Start encoding let range>

(declare-fun FStar.Range.range () Term)

; </end encoding let range>


; <Start encoding val FStar.Range.__range_0>

(declare-fun FStar.Range.__range_0 (Dummy_sort) Term)

; </end encoding val FStar.Range.__range_0>


; <Start encoding let range_0>

(declare-fun FStar.Range.range_0 (Dummy_sort) Term)

; </end encoding let range_0>


; <Start encoding val FStar.Range.__mk_range>

(declare-fun FStar.Range.__mk_range (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_692aa0ebe01353db00b5203de7da6785 () Term)
(declare-fun FStar.Range.__mk_range@tok () Term)

; </end encoding val FStar.Range.__mk_range>


; <Start encoding val FStar.Range.mk_range>

(declare-fun FStar.Range.mk_range (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2d3d853349c0a35c0e0c8d13086384ea () Term)
(declare-fun FStar.Range.mk_range@tok () Term)

; </end encoding val FStar.Range.mk_range>


; <Start encoding val FStar.Range.join_range>

(declare-fun FStar.Range.join_range (Term Term) Term)
(declare-fun Tm_arrow_6eaaa31f2d36a5c7cca7eb998962a7fa () Term)
(declare-fun FStar.Range.join_range@tok () Term)

; </end encoding val FStar.Range.join_range>


; <Start encoding let labeled>

(declare-fun FStar.Range.labeled (Term Term Term) Term)
(declare-fun Tm_arrow_ab5899212fc4c148181589be7fd78af1 () Term)
(declare-fun FStar.Range.labeled@tok () Term)

; </end encoding let labeled>


; <Start encoding val FStar.Range.explode>

(declare-fun FStar.Range.explode (Term) Term)
(declare-fun Tm_arrow_f9315f3207257087f0bf3975f13024e3 () Term)
(declare-fun FStar.Range.explode@tok () Term)

; </end encoding val FStar.Range.explode>


; End Externals for interface FStar.Range


; Externals for interface FStar.Stubs.Reflection.Types


; <Start encoding val FStar.Stubs.Reflection.Types.namedv>

(declare-fun FStar.Stubs.Reflection.Types.namedv () Term)

; </end encoding val FStar.Stubs.Reflection.Types.namedv>


; <Start encoding val FStar.Stubs.Reflection.Types.bv>

(declare-fun FStar.Stubs.Reflection.Types.bv () Term)

; </end encoding val FStar.Stubs.Reflection.Types.bv>


; <Start encoding val FStar.Stubs.Reflection.Types.binder>

(declare-fun FStar.Stubs.Reflection.Types.binder () Term)

; </end encoding val FStar.Stubs.Reflection.Types.binder>


; <Start encoding val FStar.Stubs.Reflection.Types.term>

(declare-fun FStar.Stubs.Reflection.Types.term () Term)

; </end encoding val FStar.Stubs.Reflection.Types.term>


; <Start encoding val FStar.Stubs.Reflection.Types.env>

(declare-fun FStar.Stubs.Reflection.Types.env () Term)

; </end encoding val FStar.Stubs.Reflection.Types.env>


; <Start encoding val FStar.Stubs.Reflection.Types.fv>

(declare-fun FStar.Stubs.Reflection.Types.fv () Term)

; </end encoding val FStar.Stubs.Reflection.Types.fv>


; <Start encoding val FStar.Stubs.Reflection.Types.comp>

(declare-fun FStar.Stubs.Reflection.Types.comp () Term)

; </end encoding val FStar.Stubs.Reflection.Types.comp>


; <Start encoding val FStar.Stubs.Reflection.Types.sigelt>

(declare-fun FStar.Stubs.Reflection.Types.sigelt () Term)

; </end encoding val FStar.Stubs.Reflection.Types.sigelt>


; <Start encoding val FStar.Stubs.Reflection.Types.ctx_uvar_and_subst>

(declare-fun FStar.Stubs.Reflection.Types.ctx_uvar_and_subst () Term)

; </end encoding val FStar.Stubs.Reflection.Types.ctx_uvar_and_subst>


; <Start encoding val FStar.Stubs.Reflection.Types.letbinding>

(declare-fun FStar.Stubs.Reflection.Types.letbinding () Term)

; </end encoding val FStar.Stubs.Reflection.Types.letbinding>


; <Start encoding val FStar.Stubs.Reflection.Types.ident>

(declare-fun FStar.Stubs.Reflection.Types.ident () Term)

; </end encoding val FStar.Stubs.Reflection.Types.ident>


; <Start encoding val FStar.Stubs.Reflection.Types.universe_uvar>

(declare-fun FStar.Stubs.Reflection.Types.universe_uvar () Term)

; </end encoding val FStar.Stubs.Reflection.Types.universe_uvar>


; <Start encoding val FStar.Stubs.Reflection.Types.universe>

(declare-fun FStar.Stubs.Reflection.Types.universe () Term)

; </end encoding val FStar.Stubs.Reflection.Types.universe>


; <Start encoding let name>

(declare-fun FStar.Stubs.Reflection.Types.name (Dummy_sort) Term)

; </end encoding let name>


; <Start encoding let univ_name>

(declare-fun FStar.Stubs.Reflection.Types.univ_name () Term)

; </end encoding let univ_name>


; <Start encoding let typ>

(declare-fun FStar.Stubs.Reflection.Types.typ () Term)

; </end encoding let typ>


; <Start encoding let binders>

(declare-fun FStar.Stubs.Reflection.Types.binders () Term)

; </end encoding let binders>


; <Start encoding let decls>

(declare-fun FStar.Stubs.Reflection.Types.decls () Term)

; </end encoding let decls>


; End Externals for interface FStar.Stubs.Reflection.Types


; Externals for interface FStar.Float


; <Start encoding val FStar.Float.float>

(declare-fun FStar.Float.float () Term)

; </end encoding val FStar.Float.float>


; <Start encoding let double>

(declare-fun FStar.Float.double () Term)

; </end encoding let double>


; End Externals for interface FStar.Float


; Externals for interface FStar.Char


; <Start encoding val FStar.Char.char>

(declare-fun FStar.Char.char (Dummy_sort) Term)

; </end encoding val FStar.Char.char>


; <Start encoding let char_code>

(declare-fun FStar.Char.char_code () Term)
(declare-fun Tm_refine_96af4a84eae6a9bae92bc908a1c3c24c () Term)

; </end encoding let char_code>


; <Start encoding val FStar.Char.u32_of_char>

(declare-fun FStar.Char.u32_of_char (Term) Term)
(declare-fun Tm_arrow_09ae08f23212b3776b47464ac075ff69 () Term)
(declare-fun FStar.Char.u32_of_char@tok () Term)

; </end encoding val FStar.Char.u32_of_char>


; <Start encoding val FStar.Char.char_of_u32>

(declare-fun FStar.Char.char_of_u32 (Term) Term)
(declare-fun Tm_arrow_6b2de8c9d183197e10fa8623c8ed0069 () Term)
(declare-fun FStar.Char.char_of_u32@tok () Term)

; </end encoding val FStar.Char.char_of_u32>


; <Start encoding val FStar.Char.char_of_u32_of_char>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Char.char_of_u32_of_char (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Char.char_of_u32_of_char@tok () Term)

; </end encoding val FStar.Char.char_of_u32_of_char>


; <Start encoding val FStar.Char.u32_of_char_of_u32>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Char.u32_of_char_of_u32 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Char.u32_of_char_of_u32@tok () Term)

; </end encoding val FStar.Char.u32_of_char_of_u32>


; <Start encoding let int_of_char>

(declare-fun FStar.Char.int_of_char (Term) Term)
(declare-fun Tm_arrow_edb4339633bae2b96af63b0dbac8e538 () Term)
(declare-fun FStar.Char.int_of_char@tok () Term)

; </end encoding let int_of_char>


; <Start encoding let char_of_int>

(declare-fun Tm_refine_41bb1fe33d2856748d537571528d32a1 () Term)
(declare-fun FStar.Char.char_of_int (Term) Term)

(declare-fun Tm_arrow_efb6c29a20da126570b0d74fa1074537 () Term)
(declare-fun FStar.Char.char_of_int@tok () Term)


; </end encoding let char_of_int>


; <Start encoding val FStar.Char.lowercase>

(declare-fun FStar.Char.lowercase (Term) Term)
(declare-fun Tm_arrow_410c308158a4312d1307cd758f94e691 () Term)
(declare-fun FStar.Char.lowercase@tok () Term)

; </end encoding val FStar.Char.lowercase>


; <Start encoding val FStar.Char.uppercase>

(declare-fun FStar.Char.uppercase (Term) Term)

(declare-fun FStar.Char.uppercase@tok () Term)

; </end encoding val FStar.Char.uppercase>


; <Skipped #set-options "--admit_smt_queries true"/>


; <Start encoding let __char_of_int>

(declare-fun FStar.Char.__char_of_int (Term) Term)
(declare-fun Tm_arrow_269aaec28d3e769b82922feb9fbb0224 () Term)
(declare-fun FStar.Char.__char_of_int@tok () Term)

; </end encoding let __char_of_int>


; <Skipped #reset-options/>


; End Externals for interface FStar.Char


; Externals for interface FStar.Pprint


; <Start encoding val FStar.Pprint.document>

(declare-fun FStar.Pprint.document () Term)

; </end encoding val FStar.Pprint.document>


; <Start encoding val FStar.Pprint.empty>

(declare-fun FStar.Pprint.empty (Dummy_sort) Term)

; </end encoding val FStar.Pprint.empty>


; <Start encoding val FStar.Pprint.doc_of_char>

(declare-fun FStar.Pprint.doc_of_char (Term) Term)
(declare-fun Tm_arrow_a4acb59fbf005290ad49955f91c28b03 () Term)
(declare-fun FStar.Pprint.doc_of_char@tok () Term)

; </end encoding val FStar.Pprint.doc_of_char>


; <Start encoding val FStar.Pprint.doc_of_string>

(declare-fun FStar.Pprint.doc_of_string (Term) Term)
(declare-fun Tm_arrow_997c5f5d4977b2f7fdf48b0cb622aac1 () Term)
(declare-fun FStar.Pprint.doc_of_string@tok () Term)

; </end encoding val FStar.Pprint.doc_of_string>


; <Start encoding val FStar.Pprint.doc_of_bool>

(declare-fun FStar.Pprint.doc_of_bool (Term) Term)
(declare-fun Tm_arrow_c297ae71bcb61f857565593f192b0ba9 () Term)
(declare-fun FStar.Pprint.doc_of_bool@tok () Term)

; </end encoding val FStar.Pprint.doc_of_bool>


; <Start encoding val FStar.Pprint.substring>

(declare-fun FStar.Pprint.substring (Term Term Term) Term)
(declare-fun Tm_arrow_57d4df6e3bb2ca47134bbb9d1fc71584 () Term)
(declare-fun FStar.Pprint.substring@tok () Term)

; </end encoding val FStar.Pprint.substring>


; <Start encoding val FStar.Pprint.fancystring>

(declare-fun FStar.Pprint.fancystring (Term Term) Term)
(declare-fun Tm_arrow_32174abe6c67513e28543abb3662b06a () Term)
(declare-fun FStar.Pprint.fancystring@tok () Term)

; </end encoding val FStar.Pprint.fancystring>


; <Start encoding val FStar.Pprint.fancysubstring>

(declare-fun FStar.Pprint.fancysubstring (Term Term Term Term) Term)
(declare-fun Tm_arrow_095d1e6b4118e7c85dbeb61c88636be5 () Term)
(declare-fun FStar.Pprint.fancysubstring@tok () Term)

; </end encoding val FStar.Pprint.fancysubstring>


; <Start encoding val FStar.Pprint.utf8string>

(declare-fun FStar.Pprint.utf8string (Term) Term)

(declare-fun FStar.Pprint.utf8string@tok () Term)

; </end encoding val FStar.Pprint.utf8string>


; <Start encoding val FStar.Pprint.hardline>

(declare-fun FStar.Pprint.hardline (Dummy_sort) Term)

; </end encoding val FStar.Pprint.hardline>


; <Start encoding val FStar.Pprint.blank>

(declare-fun FStar.Pprint.blank (Term) Term)
(declare-fun Tm_arrow_75ab32078fe02c79ad1d360245f44dfb () Term)
(declare-fun FStar.Pprint.blank@tok () Term)

; </end encoding val FStar.Pprint.blank>


; <Start encoding val FStar.Pprint.break_>

(declare-fun FStar.Pprint.break_ (Term) Term)

(declare-fun FStar.Pprint.break_@tok () Term)

; </end encoding val FStar.Pprint.break_>


; <Start encoding val FStar.Pprint.op_Hat_Hat>

(declare-fun FStar.Pprint.op_Hat_Hat (Term Term) Term)
(declare-fun Tm_arrow_19abf1e35346678de614defb45741110 () Term)
(declare-fun FStar.Pprint.op_Hat_Hat@tok () Term)

; </end encoding val FStar.Pprint.op_Hat_Hat>


; <Start encoding val FStar.Pprint.op_Hat_Slash_Hat>

(declare-fun FStar.Pprint.op_Hat_Slash_Hat (Term Term) Term)

(declare-fun FStar.Pprint.op_Hat_Slash_Hat@tok () Term)

; </end encoding val FStar.Pprint.op_Hat_Slash_Hat>


; <Start encoding val FStar.Pprint.nest>

(declare-fun FStar.Pprint.nest (Term Term) Term)
(declare-fun Tm_arrow_a087a683fcb5153393871c9b94d28ffc () Term)
(declare-fun FStar.Pprint.nest@tok () Term)

; </end encoding val FStar.Pprint.nest>


; <Start encoding val FStar.Pprint.group>

(declare-fun FStar.Pprint.group (Term) Term)
(declare-fun Tm_arrow_bbc0c5be3085d9d37fef1938353ffda9 () Term)
(declare-fun FStar.Pprint.group@tok () Term)

; </end encoding val FStar.Pprint.group>


; <Start encoding val FStar.Pprint.ifflat>

(declare-fun FStar.Pprint.ifflat (Term Term) Term)

(declare-fun FStar.Pprint.ifflat@tok () Term)

; </end encoding val FStar.Pprint.ifflat>


; <Start encoding val FStar.Pprint.lparen>

(declare-fun FStar.Pprint.lparen (Dummy_sort) Term)

; </end encoding val FStar.Pprint.lparen>


; <Start encoding val FStar.Pprint.rparen>

(declare-fun FStar.Pprint.rparen (Dummy_sort) Term)

; </end encoding val FStar.Pprint.rparen>


; <Start encoding val FStar.Pprint.langle>

(declare-fun FStar.Pprint.langle (Dummy_sort) Term)

; </end encoding val FStar.Pprint.langle>


; <Start encoding val FStar.Pprint.rangle>

(declare-fun FStar.Pprint.rangle (Dummy_sort) Term)

; </end encoding val FStar.Pprint.rangle>


; <Start encoding val FStar.Pprint.lbrace>

(declare-fun FStar.Pprint.lbrace (Dummy_sort) Term)

; </end encoding val FStar.Pprint.lbrace>


; <Start encoding val FStar.Pprint.rbrace>

(declare-fun FStar.Pprint.rbrace (Dummy_sort) Term)

; </end encoding val FStar.Pprint.rbrace>


; <Start encoding val FStar.Pprint.lbracket>

(declare-fun FStar.Pprint.lbracket (Dummy_sort) Term)

; </end encoding val FStar.Pprint.lbracket>


; <Start encoding val FStar.Pprint.rbracket>

(declare-fun FStar.Pprint.rbracket (Dummy_sort) Term)

; </end encoding val FStar.Pprint.rbracket>


; <Start encoding val FStar.Pprint.squote>

(declare-fun FStar.Pprint.squote (Dummy_sort) Term)

; </end encoding val FStar.Pprint.squote>


; <Start encoding val FStar.Pprint.dquote>

(declare-fun FStar.Pprint.dquote (Dummy_sort) Term)

; </end encoding val FStar.Pprint.dquote>


; <Start encoding val FStar.Pprint.bquote>

(declare-fun FStar.Pprint.bquote (Dummy_sort) Term)

; </end encoding val FStar.Pprint.bquote>


; <Start encoding val FStar.Pprint.semi>

(declare-fun FStar.Pprint.semi (Dummy_sort) Term)

; </end encoding val FStar.Pprint.semi>


; <Start encoding val FStar.Pprint.colon>

(declare-fun FStar.Pprint.colon (Dummy_sort) Term)

; </end encoding val FStar.Pprint.colon>


; <Start encoding val FStar.Pprint.comma>

(declare-fun FStar.Pprint.comma (Dummy_sort) Term)

; </end encoding val FStar.Pprint.comma>


; <Start encoding val FStar.Pprint.space>

(declare-fun FStar.Pprint.space (Dummy_sort) Term)

; </end encoding val FStar.Pprint.space>


; <Start encoding val FStar.Pprint.dot>

(declare-fun FStar.Pprint.dot (Dummy_sort) Term)

; </end encoding val FStar.Pprint.dot>


; <Start encoding val FStar.Pprint.sharp>

(declare-fun FStar.Pprint.sharp (Dummy_sort) Term)

; </end encoding val FStar.Pprint.sharp>


; <Start encoding val FStar.Pprint.slash>

(declare-fun FStar.Pprint.slash (Dummy_sort) Term)

; </end encoding val FStar.Pprint.slash>


; <Start encoding val FStar.Pprint.backslash>

(declare-fun FStar.Pprint.backslash (Dummy_sort) Term)

; </end encoding val FStar.Pprint.backslash>


; <Start encoding val FStar.Pprint.equals>

(declare-fun FStar.Pprint.equals (Dummy_sort) Term)

; </end encoding val FStar.Pprint.equals>


; <Start encoding val FStar.Pprint.qmark>

(declare-fun FStar.Pprint.qmark (Dummy_sort) Term)

; </end encoding val FStar.Pprint.qmark>


; <Start encoding val FStar.Pprint.tilde>

(declare-fun FStar.Pprint.tilde (Dummy_sort) Term)

; </end encoding val FStar.Pprint.tilde>


; <Start encoding val FStar.Pprint.at>

(declare-fun FStar.Pprint.at (Dummy_sort) Term)

; </end encoding val FStar.Pprint.at>


; <Start encoding val FStar.Pprint.percent>

(declare-fun FStar.Pprint.percent (Dummy_sort) Term)

; </end encoding val FStar.Pprint.percent>


; <Start encoding val FStar.Pprint.dollar>

(declare-fun FStar.Pprint.dollar (Dummy_sort) Term)

; </end encoding val FStar.Pprint.dollar>


; <Start encoding val FStar.Pprint.caret>

(declare-fun FStar.Pprint.caret (Dummy_sort) Term)

; </end encoding val FStar.Pprint.caret>


; <Start encoding val FStar.Pprint.ampersand>

(declare-fun FStar.Pprint.ampersand (Dummy_sort) Term)

; </end encoding val FStar.Pprint.ampersand>


; <Start encoding val FStar.Pprint.star>

(declare-fun FStar.Pprint.star (Dummy_sort) Term)

; </end encoding val FStar.Pprint.star>


; <Start encoding val FStar.Pprint.plus>

(declare-fun FStar.Pprint.plus (Dummy_sort) Term)

; </end encoding val FStar.Pprint.plus>


; <Start encoding val FStar.Pprint.minus>

(declare-fun FStar.Pprint.minus (Dummy_sort) Term)

; </end encoding val FStar.Pprint.minus>


; <Start encoding val FStar.Pprint.underscore>

(declare-fun FStar.Pprint.underscore (Dummy_sort) Term)

; </end encoding val FStar.Pprint.underscore>


; <Start encoding val FStar.Pprint.bang>

(declare-fun FStar.Pprint.bang (Dummy_sort) Term)

; </end encoding val FStar.Pprint.bang>


; <Start encoding val FStar.Pprint.bar>

(declare-fun FStar.Pprint.bar (Dummy_sort) Term)

; </end encoding val FStar.Pprint.bar>


; <Start encoding val FStar.Pprint.rarrow>

(declare-fun FStar.Pprint.rarrow (Dummy_sort) Term)

; </end encoding val FStar.Pprint.rarrow>


; <Start encoding val FStar.Pprint.long_left_arrow>

(declare-fun FStar.Pprint.long_left_arrow (Dummy_sort) Term)

; </end encoding val FStar.Pprint.long_left_arrow>


; <Start encoding val FStar.Pprint.larrow>

(declare-fun FStar.Pprint.larrow (Dummy_sort) Term)

; </end encoding val FStar.Pprint.larrow>


; <Start encoding val FStar.Pprint.precede>

(declare-fun FStar.Pprint.precede (Term Term) Term)

(declare-fun FStar.Pprint.precede@tok () Term)

; </end encoding val FStar.Pprint.precede>


; <Start encoding val FStar.Pprint.terminate>

(declare-fun FStar.Pprint.terminate (Term Term) Term)

(declare-fun FStar.Pprint.terminate@tok () Term)

; </end encoding val FStar.Pprint.terminate>


; <Start encoding val FStar.Pprint.enclose>

(declare-fun FStar.Pprint.enclose (Term Term Term) Term)
(declare-fun Tm_arrow_f04dd2286d7e3e9f9bc2795066272a5d () Term)
(declare-fun FStar.Pprint.enclose@tok () Term)

; </end encoding val FStar.Pprint.enclose>


; <Start encoding val FStar.Pprint.squotes>

(declare-fun FStar.Pprint.squotes (Term) Term)

(declare-fun FStar.Pprint.squotes@tok () Term)

; </end encoding val FStar.Pprint.squotes>


; <Start encoding val FStar.Pprint.dquotes>

(declare-fun FStar.Pprint.dquotes (Term) Term)

(declare-fun FStar.Pprint.dquotes@tok () Term)

; </end encoding val FStar.Pprint.dquotes>


; <Start encoding val FStar.Pprint.bquotes>

(declare-fun FStar.Pprint.bquotes (Term) Term)

(declare-fun FStar.Pprint.bquotes@tok () Term)

; </end encoding val FStar.Pprint.bquotes>


; <Start encoding val FStar.Pprint.braces>

(declare-fun FStar.Pprint.braces (Term) Term)

(declare-fun FStar.Pprint.braces@tok () Term)

; </end encoding val FStar.Pprint.braces>


; <Start encoding val FStar.Pprint.parens>

(declare-fun FStar.Pprint.parens (Term) Term)

(declare-fun FStar.Pprint.parens@tok () Term)

; </end encoding val FStar.Pprint.parens>


; <Start encoding val FStar.Pprint.angles>

(declare-fun FStar.Pprint.angles (Term) Term)

(declare-fun FStar.Pprint.angles@tok () Term)

; </end encoding val FStar.Pprint.angles>


; <Start encoding val FStar.Pprint.brackets>

(declare-fun FStar.Pprint.brackets (Term) Term)

(declare-fun FStar.Pprint.brackets@tok () Term)

; </end encoding val FStar.Pprint.brackets>


; <Start encoding val FStar.Pprint.twice>

(declare-fun FStar.Pprint.twice (Term) Term)

(declare-fun FStar.Pprint.twice@tok () Term)

; </end encoding val FStar.Pprint.twice>


; <Start encoding val FStar.Pprint.repeat>

(declare-fun FStar.Pprint.repeat (Term Term) Term)

(declare-fun FStar.Pprint.repeat@tok () Term)

; </end encoding val FStar.Pprint.repeat>


; <Start encoding val FStar.Pprint.concat>

(declare-fun FStar.Pprint.concat (Term) Term)
(declare-fun Tm_arrow_0cbe92f45919c1d7e0f9e026093c317f () Term)
(declare-fun FStar.Pprint.concat@tok () Term)

; </end encoding val FStar.Pprint.concat>


; <Start encoding val FStar.Pprint.separate>

(declare-fun FStar.Pprint.separate (Term Term) Term)
(declare-fun Tm_arrow_eb90f8920e90546abfd27f57e97c7422 () Term)
(declare-fun FStar.Pprint.separate@tok () Term)

; </end encoding val FStar.Pprint.separate>


; <Start encoding val FStar.Pprint.concat_map>

(declare-fun Tm_arrow_ba485b08fe7f6ea3427f366967eb61bb (Term) Term)
(declare-fun FStar.Pprint.concat_map (Term Term Term) Term)

(declare-fun Tm_arrow_9027965ae68389afcb8ffd313ed8431e () Term)
(declare-fun FStar.Pprint.concat_map@tok () Term)

; </end encoding val FStar.Pprint.concat_map>


; <Start encoding val FStar.Pprint.separate_map>


(declare-fun FStar.Pprint.separate_map (Term Term Term Term) Term)

(declare-fun Tm_arrow_afa71873ada30b88e86746ba0816c698 () Term)
(declare-fun FStar.Pprint.separate_map@tok () Term)

; </end encoding val FStar.Pprint.separate_map>


; <Start encoding val FStar.Pprint.separate2>

(declare-fun FStar.Pprint.separate2 (Term Term Term) Term)
(declare-fun Tm_arrow_8d6af16eebdcd806abb4f18d1fad7f62 () Term)
(declare-fun FStar.Pprint.separate2@tok () Term)

; </end encoding val FStar.Pprint.separate2>


; <Start encoding val FStar.Pprint.optional>


(declare-fun FStar.Pprint.optional (Term Term Term) Term)

(declare-fun Tm_arrow_f99776764fec33728f01eff9910545c0 () Term)
(declare-fun FStar.Pprint.optional@tok () Term)

; </end encoding val FStar.Pprint.optional>


; <Start encoding val FStar.Pprint.lines>

(declare-fun FStar.Pprint.lines (Term) Term)
(declare-fun Tm_arrow_800f7873155a13cf11bfde311d66b27a () Term)
(declare-fun FStar.Pprint.lines@tok () Term)

; </end encoding val FStar.Pprint.lines>


; <Start encoding val FStar.Pprint.arbitrary_string>

(declare-fun FStar.Pprint.arbitrary_string (Term) Term)

(declare-fun FStar.Pprint.arbitrary_string@tok () Term)

; </end encoding val FStar.Pprint.arbitrary_string>


; <Start encoding val FStar.Pprint.words>

(declare-fun FStar.Pprint.words (Term) Term)

(declare-fun FStar.Pprint.words@tok () Term)

; </end encoding val FStar.Pprint.words>


; <Start encoding val FStar.Pprint.split>

(declare-fun Tm_arrow_fc1554671c39653ed371206100dcafd3 () Term)
(declare-fun FStar.Pprint.split (Term Term) Term)

(declare-fun Tm_arrow_89c390c93eb8654101fd8617085f3c1d () Term)
(declare-fun FStar.Pprint.split@tok () Term)

; </end encoding val FStar.Pprint.split>


; <Start encoding val FStar.Pprint.flow>

(declare-fun FStar.Pprint.flow (Term Term) Term)

(declare-fun FStar.Pprint.flow@tok () Term)

; </end encoding val FStar.Pprint.flow>


; <Start encoding val FStar.Pprint.flow_map>


(declare-fun FStar.Pprint.flow_map (Term Term Term Term) Term)


(declare-fun FStar.Pprint.flow_map@tok () Term)

; </end encoding val FStar.Pprint.flow_map>


; <Start encoding val FStar.Pprint.url>

(declare-fun FStar.Pprint.url (Term) Term)

(declare-fun FStar.Pprint.url@tok () Term)

; </end encoding val FStar.Pprint.url>


; <Start encoding val FStar.Pprint.align>

(declare-fun FStar.Pprint.align (Term) Term)

(declare-fun FStar.Pprint.align@tok () Term)

; </end encoding val FStar.Pprint.align>


; <Start encoding val FStar.Pprint.hang>

(declare-fun FStar.Pprint.hang (Term Term) Term)

(declare-fun FStar.Pprint.hang@tok () Term)

; </end encoding val FStar.Pprint.hang>


; <Start encoding val FStar.Pprint.prefix>

(declare-fun FStar.Pprint.prefix (Term Term Term Term) Term)
(declare-fun Tm_arrow_8515fd4d138effa981387c8407102abb () Term)
(declare-fun FStar.Pprint.prefix@tok () Term)

; </end encoding val FStar.Pprint.prefix>


; <Start encoding val FStar.Pprint.jump>

(declare-fun FStar.Pprint.jump (Term Term Term) Term)
(declare-fun Tm_arrow_e0d9f0929460140427c016e9e80b19b9 () Term)
(declare-fun FStar.Pprint.jump@tok () Term)

; </end encoding val FStar.Pprint.jump>


; <Start encoding val FStar.Pprint.infix>

(declare-fun FStar.Pprint.infix (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_b075afedf9e7cab5a543fb6eb3bed20f () Term)
(declare-fun FStar.Pprint.infix@tok () Term)

; </end encoding val FStar.Pprint.infix>


; <Start encoding val FStar.Pprint.surround>

(declare-fun FStar.Pprint.surround (Term Term Term Term Term) Term)

(declare-fun FStar.Pprint.surround@tok () Term)

; </end encoding val FStar.Pprint.surround>


; <Start encoding val FStar.Pprint.soft_surround>

(declare-fun FStar.Pprint.soft_surround (Term Term Term Term Term) Term)

(declare-fun FStar.Pprint.soft_surround@tok () Term)

; </end encoding val FStar.Pprint.soft_surround>


; <Start encoding val FStar.Pprint.surround_separate>

(declare-fun FStar.Pprint.surround_separate (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5438415d36bec335d2df2e0f427a0374 () Term)
(declare-fun FStar.Pprint.surround_separate@tok () Term)

; </end encoding val FStar.Pprint.surround_separate>


; <Start encoding val FStar.Pprint.surround_separate_map>


(declare-fun FStar.Pprint.surround_separate_map (Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_424c593564ee6d82472d4c43a6d0feee () Term)
(declare-fun FStar.Pprint.surround_separate_map@tok () Term)

; </end encoding val FStar.Pprint.surround_separate_map>


; <Start encoding val FStar.Pprint.pretty_string>

(declare-fun FStar.Pprint.pretty_string (Term Term Term) Term)
(declare-fun Tm_arrow_eaf070b7b90e17b9d3a7caa0761705b8 () Term)
(declare-fun FStar.Pprint.pretty_string@tok () Term)

; </end encoding val FStar.Pprint.pretty_string>


; <Start encoding val FStar.Pprint.render>

(declare-fun FStar.Pprint.render (Term) Term)
(declare-fun Tm_arrow_672e94f64f75b66d98089d9b8a8bdd46 () Term)
(declare-fun FStar.Pprint.render@tok () Term)

; </end encoding val FStar.Pprint.render>


; End Externals for interface FStar.Pprint


; Externals for interface FStar.Issue


; <Start encoding val FStar.Issue.issue>

(declare-fun FStar.Issue.issue () Term)

; </end encoding val FStar.Issue.issue>


; <Start encoding let issue_level_string>

(declare-fun FStar.Issue.issue_level_string () Term)
(declare-fun Tm_refine_aa8eedc0ecb86da30f7a24511f57030f () Term)

; </end encoding let issue_level_string>


; <Start encoding val FStar.Issue.message_of_issue>

(declare-fun FStar.Issue.message_of_issue (Term) Term)
(declare-fun Tm_arrow_93ee704a450339197db22b6850c14119 () Term)
(declare-fun FStar.Issue.message_of_issue@tok () Term)

; </end encoding val FStar.Issue.message_of_issue>


; <Start encoding val FStar.Issue.level_of_issue>

(declare-fun FStar.Issue.level_of_issue (Term) Term)
(declare-fun Tm_arrow_baa5bfeaffb7436a922fcee810b3f6e5 () Term)
(declare-fun FStar.Issue.level_of_issue@tok () Term)

; </end encoding val FStar.Issue.level_of_issue>


; <Start encoding val FStar.Issue.number_of_issue>

(declare-fun FStar.Issue.number_of_issue (Term) Term)
(declare-fun Tm_arrow_78394d1c43ffc2ecdd350b139696c115 () Term)
(declare-fun FStar.Issue.number_of_issue@tok () Term)

; </end encoding val FStar.Issue.number_of_issue>


; <Start encoding val FStar.Issue.range_of_issue>

(declare-fun FStar.Issue.range_of_issue (Term) Term)
(declare-fun Tm_arrow_72e8882c08b4ea92dd32d41519ff957b () Term)
(declare-fun FStar.Issue.range_of_issue@tok () Term)

; </end encoding val FStar.Issue.range_of_issue>


; <Start encoding val FStar.Issue.context_of_issue>

(declare-fun FStar.Issue.context_of_issue (Term) Term)
(declare-fun Tm_arrow_546b620b9af82be043f5b40b81574a85 () Term)
(declare-fun FStar.Issue.context_of_issue@tok () Term)

; </end encoding val FStar.Issue.context_of_issue>


; <Start encoding val FStar.Issue.render_issue>

(declare-fun FStar.Issue.render_issue (Term) Term)
(declare-fun Tm_arrow_ac5151aeda0379e1d6b8d444cd3f0526 () Term)
(declare-fun FStar.Issue.render_issue@tok () Term)

; </end encoding val FStar.Issue.render_issue>


; <Start encoding val FStar.Issue.mk_issue_doc>

(declare-fun FStar.Issue.mk_issue_doc (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_4a4df377687a551395a6d537c2452cc1 () Term)
(declare-fun FStar.Issue.mk_issue_doc@tok () Term)

; </end encoding val FStar.Issue.mk_issue_doc>


; <Start encoding let mk_issue>

(declare-fun FStar.Issue.mk_issue (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a1628df8c9319e78aab0e01f400423ed () Term)
(declare-fun FStar.Issue.mk_issue@tok () Term)

; </end encoding let mk_issue>


; End Externals for interface FStar.Issue


; Externals for interface FStar.Stubs.TypeChecker.Core


; <Start encoding type FStar.Stubs.TypeChecker.Core.tot_or_ghost>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.TypeChecker.Core.tot_or_ghost () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.TypeChecker.Core.E_Total () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.TypeChecker.Core.E_Total
(declare-fun FStar.Stubs.TypeChecker.Core.E_Total@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.TypeChecker.Core.E_Ghost () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.TypeChecker.Core.E_Ghost
(declare-fun FStar.Stubs.TypeChecker.Core.E_Ghost@tok () Term)

; <start constructor FStar.Stubs.TypeChecker.Core.tot_or_ghost>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.TypeChecker.Core.tot_or_ghost ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(= __@x0
FStar.Stubs.TypeChecker.Core.tot_or_ghost)))

; </end constructor FStar.Stubs.TypeChecker.Core.tot_or_ghost>


; <start constructor FStar.Stubs.TypeChecker.Core.E_Total>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.TypeChecker.Core.E_Total ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
107)
(= __@x0
FStar.Stubs.TypeChecker.Core.E_Total)))

; </end constructor FStar.Stubs.TypeChecker.Core.E_Total>


; <start constructor FStar.Stubs.TypeChecker.Core.E_Ghost>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.TypeChecker.Core.E_Ghost ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
109)
(= __@x0
FStar.Stubs.TypeChecker.Core.E_Ghost)))

; </end constructor FStar.Stubs.TypeChecker.Core.E_Ghost>


; </end encoding type FStar.Stubs.TypeChecker.Core.tot_or_ghost>


; <Start encoding assume FStar.Stubs.TypeChecker.Core.tot_or_ghost__uu___haseq>


; </end encoding assume FStar.Stubs.TypeChecker.Core.tot_or_ghost__uu___haseq>


; <Start encoding val FStar.Stubs.TypeChecker.Core.uu___is_E_Total>

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_E_Total (Term) Term)
(declare-fun Tm_arrow_28feb685f85e27d6180cee53571913aa () Term)
(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_E_Total@tok () Term)

; </end encoding val FStar.Stubs.TypeChecker.Core.uu___is_E_Total>


; <Skipped let uu___is_E_Total/>


; <Start encoding val FStar.Stubs.TypeChecker.Core.uu___is_E_Ghost>

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_E_Ghost (Term) Term)

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_E_Ghost@tok () Term)

; </end encoding val FStar.Stubs.TypeChecker.Core.uu___is_E_Ghost>


; <Skipped let uu___is_E_Ghost/>


; <Start encoding type FStar.Stubs.TypeChecker.Core.unfold_side>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.TypeChecker.Core.unfold_side () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.TypeChecker.Core.Left () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.TypeChecker.Core.Left
(declare-fun FStar.Stubs.TypeChecker.Core.Left@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.TypeChecker.Core.Right () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.TypeChecker.Core.Right
(declare-fun FStar.Stubs.TypeChecker.Core.Right@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.TypeChecker.Core.Both () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.TypeChecker.Core.Both
(declare-fun FStar.Stubs.TypeChecker.Core.Both@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.TypeChecker.Core.Neither () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.TypeChecker.Core.Neither
(declare-fun FStar.Stubs.TypeChecker.Core.Neither@tok () Term)

; <start constructor FStar.Stubs.TypeChecker.Core.unfold_side>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.TypeChecker.Core.unfold_side ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
114)
(= __@x0
FStar.Stubs.TypeChecker.Core.unfold_side)))

; </end constructor FStar.Stubs.TypeChecker.Core.unfold_side>


; <start constructor FStar.Stubs.TypeChecker.Core.Left>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.TypeChecker.Core.Left ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
120)
(= __@x0
FStar.Stubs.TypeChecker.Core.Left)))

; </end constructor FStar.Stubs.TypeChecker.Core.Left>


; <start constructor FStar.Stubs.TypeChecker.Core.Right>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.TypeChecker.Core.Right ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
122)
(= __@x0
FStar.Stubs.TypeChecker.Core.Right)))

; </end constructor FStar.Stubs.TypeChecker.Core.Right>


; <start constructor FStar.Stubs.TypeChecker.Core.Both>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.TypeChecker.Core.Both ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
124)
(= __@x0
FStar.Stubs.TypeChecker.Core.Both)))

; </end constructor FStar.Stubs.TypeChecker.Core.Both>


; <start constructor FStar.Stubs.TypeChecker.Core.Neither>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.TypeChecker.Core.Neither ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
126)
(= __@x0
FStar.Stubs.TypeChecker.Core.Neither)))

; </end constructor FStar.Stubs.TypeChecker.Core.Neither>


; </end encoding type FStar.Stubs.TypeChecker.Core.unfold_side>


; <Start encoding assume FStar.Stubs.TypeChecker.Core.unfold_side__uu___haseq>


; </end encoding assume FStar.Stubs.TypeChecker.Core.unfold_side__uu___haseq>


; <Start encoding val FStar.Stubs.TypeChecker.Core.uu___is_Left>

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_Left (Term) Term)
(declare-fun Tm_arrow_8ad3479bac3300a48f898c294856a452 () Term)
(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_Left@tok () Term)

; </end encoding val FStar.Stubs.TypeChecker.Core.uu___is_Left>


; <Skipped let uu___is_Left/>


; <Start encoding val FStar.Stubs.TypeChecker.Core.uu___is_Right>

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_Right (Term) Term)

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_Right@tok () Term)

; </end encoding val FStar.Stubs.TypeChecker.Core.uu___is_Right>


; <Skipped let uu___is_Right/>


; <Start encoding val FStar.Stubs.TypeChecker.Core.uu___is_Both>

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_Both (Term) Term)

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_Both@tok () Term)

; </end encoding val FStar.Stubs.TypeChecker.Core.uu___is_Both>


; <Skipped let uu___is_Both/>


; <Start encoding val FStar.Stubs.TypeChecker.Core.uu___is_Neither>

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_Neither (Term) Term)

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_Neither@tok () Term)

; </end encoding val FStar.Stubs.TypeChecker.Core.uu___is_Neither>


; <Skipped let uu___is_Neither/>


; End Externals for interface FStar.Stubs.TypeChecker.Core


; Externals for interface FStar.Stubs.Errors.Msg


; <Start encoding let error_message>

(declare-fun FStar.Stubs.Errors.Msg.error_message () Term)

; </end encoding let error_message>


; <Start encoding val FStar.Stubs.Errors.Msg.text>

(declare-fun FStar.Stubs.Errors.Msg.text (Term) Term)

(declare-fun FStar.Stubs.Errors.Msg.text@tok () Term)

; </end encoding val FStar.Stubs.Errors.Msg.text>


; <Start encoding val FStar.Stubs.Errors.Msg.sublist>

(declare-fun FStar.Stubs.Errors.Msg.sublist (Term Term) Term)

(declare-fun FStar.Stubs.Errors.Msg.sublist@tok () Term)

; </end encoding val FStar.Stubs.Errors.Msg.sublist>


; <Start encoding val FStar.Stubs.Errors.Msg.bulleted>

(declare-fun FStar.Stubs.Errors.Msg.bulleted (Term) Term)

(declare-fun FStar.Stubs.Errors.Msg.bulleted@tok () Term)

; </end encoding val FStar.Stubs.Errors.Msg.bulleted>


; <Start encoding val FStar.Stubs.Errors.Msg.mkmsg>

(declare-fun FStar.Stubs.Errors.Msg.mkmsg (Term) Term)
(declare-fun Tm_arrow_742ceb0b6d43128379fa1800142a023c () Term)
(declare-fun FStar.Stubs.Errors.Msg.mkmsg@tok () Term)

; </end encoding val FStar.Stubs.Errors.Msg.mkmsg>


; <Start encoding val FStar.Stubs.Errors.Msg.subdoc>

(declare-fun FStar.Stubs.Errors.Msg.subdoc (Term) Term)

(declare-fun FStar.Stubs.Errors.Msg.subdoc@tok () Term)

; </end encoding val FStar.Stubs.Errors.Msg.subdoc>


; <Start encoding val FStar.Stubs.Errors.Msg.renderdoc>

(declare-fun FStar.Stubs.Errors.Msg.renderdoc (Term) Term)

(declare-fun FStar.Stubs.Errors.Msg.renderdoc@tok () Term)

; </end encoding val FStar.Stubs.Errors.Msg.renderdoc>


; <Start encoding val FStar.Stubs.Errors.Msg.backtrace_doc>

(declare-fun FStar.Stubs.Errors.Msg.backtrace_doc (Term) Term)
(declare-fun Tm_arrow_4b1e31e13fd2dbfa31c2cce1a0d2083d () Term)
(declare-fun FStar.Stubs.Errors.Msg.backtrace_doc@tok () Term)

; </end encoding val FStar.Stubs.Errors.Msg.backtrace_doc>


; <Start encoding val FStar.Stubs.Errors.Msg.rendermsg>

(declare-fun FStar.Stubs.Errors.Msg.rendermsg (Term) Term)
(declare-fun Tm_arrow_0f8aa7390110b002d33168ab1d29eb5e () Term)
(declare-fun FStar.Stubs.Errors.Msg.rendermsg@tok () Term)

; </end encoding val FStar.Stubs.Errors.Msg.rendermsg>


; End Externals for interface FStar.Stubs.Errors.Msg


; Externals for interface FStar.Stubs.Tactics.Common


; <Start encoding datacon FStar.Stubs.Tactics.Common.NotAListLiteral for type Prims.exn>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Common.NotAListLiteral () Term)
;;;;;;;;;;;;;;;;Constructor base
(declare-fun FStar.Stubs.Tactics.Common.NotAListLiteral@base () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Common.NotAListLiteral
(declare-fun FStar.Stubs.Tactics.Common.NotAListLiteral@tok () Term)

; <start constructor FStar.Stubs.Tactics.Common.NotAListLiteral>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Common.NotAListLiteral ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
102)
(= __@x0
FStar.Stubs.Tactics.Common.NotAListLiteral)))

; </end constructor FStar.Stubs.Tactics.Common.NotAListLiteral>


; </end encoding datacon FStar.Stubs.Tactics.Common.NotAListLiteral for type Prims.exn>


; <Start encoding val FStar.Stubs.Tactics.Common.uu___is_NotAListLiteral>

(declare-fun FStar.Stubs.Tactics.Common.uu___is_NotAListLiteral (Term) Term)
(declare-fun Tm_arrow_81ab3356926b82578fcb92e97b412345 () Term)
(declare-fun FStar.Stubs.Tactics.Common.uu___is_NotAListLiteral@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Common.uu___is_NotAListLiteral>


; <Skipped let uu___is_NotAListLiteral/>


; <Start encoding datacon FStar.Stubs.Tactics.Common.TacticFailure for type Prims.exn>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Common.TacticFailure (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Tactics.Common.TacticFailure_uu___ (Term) Term)
;;;;;;;;;;;;;;;;Constructor base
(declare-fun FStar.Stubs.Tactics.Common.TacticFailure@base (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Common.TacticFailure
(declare-fun FStar.Stubs.Tactics.Common.TacticFailure@tok () Term)
(declare-fun Tm_arrow_10aa3b654b3fa877084793298bd2c1fc () Term)

; <start constructor FStar.Stubs.Tactics.Common.TacticFailure>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Common.TacticFailure ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
106)
(= __@x0
(FStar.Stubs.Tactics.Common.TacticFailure (FStar.Stubs.Tactics.Common.TacticFailure_uu___ __@x0)))))

; </end constructor FStar.Stubs.Tactics.Common.TacticFailure>


; </end encoding datacon FStar.Stubs.Tactics.Common.TacticFailure for type Prims.exn>


; <Start encoding val FStar.Stubs.Tactics.Common.uu___is_TacticFailure>

(declare-fun FStar.Stubs.Tactics.Common.uu___is_TacticFailure (Term) Term)

(declare-fun FStar.Stubs.Tactics.Common.uu___is_TacticFailure@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Common.uu___is_TacticFailure>


; <Skipped let uu___is_TacticFailure/>


; <Start encoding val FStar.Stubs.Tactics.Common.__proj__TacticFailure__item__uu___>

(declare-fun Tm_refine_30f8904aa237d24acf9aace65cbaa40d () Term)
(declare-fun FStar.Stubs.Tactics.Common.__proj__TacticFailure__item__uu___ (Term) Term)

(declare-fun Tm_arrow_7eb6bd8f5fc49d52c2c9c8f2dd3c567a () Term)
(declare-fun FStar.Stubs.Tactics.Common.__proj__TacticFailure__item__uu___@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Common.__proj__TacticFailure__item__uu___>


; <Skipped let __proj__TacticFailure__item__uu___/>


; <Start encoding datacon FStar.Stubs.Tactics.Common.SKIP for type Prims.exn>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Common.SKIP () Term)
;;;;;;;;;;;;;;;;Constructor base
(declare-fun FStar.Stubs.Tactics.Common.SKIP@base () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Common.SKIP
(declare-fun FStar.Stubs.Tactics.Common.SKIP@tok () Term)

; <start constructor FStar.Stubs.Tactics.Common.SKIP>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Common.SKIP ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
117)
(= __@x0
FStar.Stubs.Tactics.Common.SKIP)))

; </end constructor FStar.Stubs.Tactics.Common.SKIP>


; </end encoding datacon FStar.Stubs.Tactics.Common.SKIP for type Prims.exn>


; <Start encoding val FStar.Stubs.Tactics.Common.uu___is_SKIP>

(declare-fun FStar.Stubs.Tactics.Common.uu___is_SKIP (Term) Term)

(declare-fun FStar.Stubs.Tactics.Common.uu___is_SKIP@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Common.uu___is_SKIP>


; <Skipped let uu___is_SKIP/>


; End Externals for interface FStar.Stubs.Tactics.Common


; Externals for interface FStar.Stubs.Tactics.Types


; <Start encoding val FStar.Stubs.Tactics.Types.goal>

(declare-fun FStar.Stubs.Tactics.Types.goal () Term)

; </end encoding val FStar.Stubs.Tactics.Types.goal>


; <Start encoding val FStar.Stubs.Tactics.Types.proofstate>

(declare-fun FStar.Stubs.Tactics.Types.proofstate () Term)

; </end encoding val FStar.Stubs.Tactics.Types.proofstate>


; <Start encoding val FStar.Stubs.Tactics.Types.goals_of>

(declare-fun FStar.Stubs.Tactics.Types.goals_of (Term) Term)
(declare-fun Tm_arrow_fdfe159a02c2f6afefc6bf5885e11604 () Term)
(declare-fun FStar.Stubs.Tactics.Types.goals_of@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.goals_of>


; <Start encoding val FStar.Stubs.Tactics.Types.smt_goals_of>

(declare-fun FStar.Stubs.Tactics.Types.smt_goals_of (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.smt_goals_of@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.smt_goals_of>


; <Start encoding val FStar.Stubs.Tactics.Types.goal_env>

(declare-fun FStar.Stubs.Tactics.Types.goal_env (Term) Term)
(declare-fun Tm_arrow_31141c9dd83193809f05a8c783c41d68 () Term)
(declare-fun FStar.Stubs.Tactics.Types.goal_env@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.goal_env>


; <Start encoding val FStar.Stubs.Tactics.Types.goal_type>

(declare-fun FStar.Stubs.Tactics.Types.goal_type (Term) Term)
(declare-fun Tm_arrow_09c0f5bd92f653a857ae8e8f78bcd3dc () Term)
(declare-fun FStar.Stubs.Tactics.Types.goal_type@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.goal_type>


; <Start encoding val FStar.Stubs.Tactics.Types.goal_witness>

(declare-fun FStar.Stubs.Tactics.Types.goal_witness (Term) Term)
(declare-fun Tm_arrow_6cd27210e27c05ff825968bc6bf2188a () Term)
(declare-fun FStar.Stubs.Tactics.Types.goal_witness@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.goal_witness>


; <Start encoding val FStar.Stubs.Tactics.Types.is_guard>

(declare-fun FStar.Stubs.Tactics.Types.is_guard (Term) Term)
(declare-fun Tm_arrow_b9f4ed4f47608d8a57b28b62e7620cd6 () Term)
(declare-fun FStar.Stubs.Tactics.Types.is_guard@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.is_guard>


; <Start encoding val FStar.Stubs.Tactics.Types.get_label>

(declare-fun FStar.Stubs.Tactics.Types.get_label (Term) Term)
(declare-fun Tm_arrow_6f90bcff42642c2f6126e1856dbbb24e () Term)
(declare-fun FStar.Stubs.Tactics.Types.get_label@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.get_label>


; <Start encoding val FStar.Stubs.Tactics.Types.set_label>

(declare-fun FStar.Stubs.Tactics.Types.set_label (Term Term) Term)
(declare-fun Tm_arrow_8bcd15f0cfa61565564f083268fce719 () Term)
(declare-fun FStar.Stubs.Tactics.Types.set_label@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.set_label>


; <Start encoding val FStar.Stubs.Tactics.Types.incr_depth>

(declare-fun FStar.Stubs.Tactics.Types.incr_depth (Term) Term)
(declare-fun Tm_arrow_4baa9e22a8426ddb7c829d77e2a29c7f () Term)
(declare-fun FStar.Stubs.Tactics.Types.incr_depth@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.incr_depth>


; <Start encoding val FStar.Stubs.Tactics.Types.decr_depth>

(declare-fun FStar.Stubs.Tactics.Types.decr_depth (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.decr_depth@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.decr_depth>


; <Start encoding val FStar.Stubs.Tactics.Types.tracepoint>

(declare-fun FStar.Stubs.Tactics.Types.tracepoint (Term) Term)
(declare-fun Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f () Term)
(declare-fun Tm_arrow_c0fb9ba582b3414d839b2e294db9292c () Term)
(declare-fun FStar.Stubs.Tactics.Types.tracepoint@tok () Term)


; </end encoding val FStar.Stubs.Tactics.Types.tracepoint>


; <Start encoding val FStar.Stubs.Tactics.Types.set_proofstate_range>

(declare-fun FStar.Stubs.Tactics.Types.set_proofstate_range (Term Term) Term)
(declare-fun Tm_arrow_37afb34f073ac2915b6c2d174d9265a7 () Term)
(declare-fun FStar.Stubs.Tactics.Types.set_proofstate_range@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.set_proofstate_range>


; <Start encoding type FStar.Stubs.Tactics.Types.direction>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.direction () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.TopDown () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.TopDown
(declare-fun FStar.Stubs.Tactics.Types.TopDown@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.BottomUp () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.BottomUp
(declare-fun FStar.Stubs.Tactics.Types.BottomUp@tok () Term)

; <start constructor FStar.Stubs.Tactics.Types.direction>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.direction ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
133)
(= __@x0
FStar.Stubs.Tactics.Types.direction)))

; </end constructor FStar.Stubs.Tactics.Types.direction>


; <start constructor FStar.Stubs.Tactics.Types.TopDown>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.TopDown ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
139)
(= __@x0
FStar.Stubs.Tactics.Types.TopDown)))

; </end constructor FStar.Stubs.Tactics.Types.TopDown>


; <start constructor FStar.Stubs.Tactics.Types.BottomUp>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.BottomUp ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
141)
(= __@x0
FStar.Stubs.Tactics.Types.BottomUp)))

; </end constructor FStar.Stubs.Tactics.Types.BottomUp>


; </end encoding type FStar.Stubs.Tactics.Types.direction>


; <Start encoding assume FStar.Stubs.Tactics.Types.direction__uu___haseq>


; </end encoding assume FStar.Stubs.Tactics.Types.direction__uu___haseq>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_TopDown>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_TopDown (Term) Term)
(declare-fun Tm_arrow_9035aafb0268cd6540e6eeb00e64f81e () Term)
(declare-fun FStar.Stubs.Tactics.Types.uu___is_TopDown@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_TopDown>


; <Skipped let uu___is_TopDown/>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_BottomUp>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_BottomUp (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.uu___is_BottomUp@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_BottomUp>


; <Skipped let uu___is_BottomUp/>


; <Start encoding type FStar.Stubs.Tactics.Types.ctrl_flag>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.ctrl_flag () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.Continue () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.Continue
(declare-fun FStar.Stubs.Tactics.Types.Continue@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.Skip () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.Skip
(declare-fun FStar.Stubs.Tactics.Types.Skip@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.Abort () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.Abort
(declare-fun FStar.Stubs.Tactics.Types.Abort@tok () Term)

; <start constructor FStar.Stubs.Tactics.Types.ctrl_flag>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.ctrl_flag ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
146)
(= __@x0
FStar.Stubs.Tactics.Types.ctrl_flag)))

; </end constructor FStar.Stubs.Tactics.Types.ctrl_flag>


; <start constructor FStar.Stubs.Tactics.Types.Continue>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.Continue ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
152)
(= __@x0
FStar.Stubs.Tactics.Types.Continue)))

; </end constructor FStar.Stubs.Tactics.Types.Continue>


; <start constructor FStar.Stubs.Tactics.Types.Skip>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.Skip ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
154)
(= __@x0
FStar.Stubs.Tactics.Types.Skip)))

; </end constructor FStar.Stubs.Tactics.Types.Skip>


; <start constructor FStar.Stubs.Tactics.Types.Abort>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.Abort ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
156)
(= __@x0
FStar.Stubs.Tactics.Types.Abort)))

; </end constructor FStar.Stubs.Tactics.Types.Abort>


; </end encoding type FStar.Stubs.Tactics.Types.ctrl_flag>


; <Start encoding assume FStar.Stubs.Tactics.Types.ctrl_flag__uu___haseq>


; </end encoding assume FStar.Stubs.Tactics.Types.ctrl_flag__uu___haseq>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_Continue>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Continue (Term) Term)
(declare-fun Tm_arrow_e3dfe006e0bb26f56aa3f73f9ed8eb62 () Term)
(declare-fun FStar.Stubs.Tactics.Types.uu___is_Continue@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_Continue>


; <Skipped let uu___is_Continue/>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_Skip>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Skip (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Skip@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_Skip>


; <Skipped let uu___is_Skip/>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_Abort>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Abort (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Abort@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_Abort>


; <Skipped let uu___is_Abort/>


; <Start encoding type FStar.Stubs.Tactics.Types.guard_policy>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.guard_policy () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.Goal () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.Goal
(declare-fun FStar.Stubs.Tactics.Types.Goal@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.SMT () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.SMT
(declare-fun FStar.Stubs.Tactics.Types.SMT@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.SMTSync () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.SMTSync
(declare-fun FStar.Stubs.Tactics.Types.SMTSync@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.Force () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.Force
(declare-fun FStar.Stubs.Tactics.Types.Force@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.ForceSMT () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.ForceSMT
(declare-fun FStar.Stubs.Tactics.Types.ForceSMT@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.Drop () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.Drop
(declare-fun FStar.Stubs.Tactics.Types.Drop@tok () Term)

; <start constructor FStar.Stubs.Tactics.Types.guard_policy>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.guard_policy ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
163)
(= __@x0
FStar.Stubs.Tactics.Types.guard_policy)))

; </end constructor FStar.Stubs.Tactics.Types.guard_policy>


; <start constructor FStar.Stubs.Tactics.Types.Goal>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.Goal ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
169)
(= __@x0
FStar.Stubs.Tactics.Types.Goal)))

; </end constructor FStar.Stubs.Tactics.Types.Goal>


; <start constructor FStar.Stubs.Tactics.Types.SMT>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.SMT ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
171)
(= __@x0
FStar.Stubs.Tactics.Types.SMT)))

; </end constructor FStar.Stubs.Tactics.Types.SMT>


; <start constructor FStar.Stubs.Tactics.Types.SMTSync>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.SMTSync ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
173)
(= __@x0
FStar.Stubs.Tactics.Types.SMTSync)))

; </end constructor FStar.Stubs.Tactics.Types.SMTSync>


; <start constructor FStar.Stubs.Tactics.Types.Force>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.Force ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
175)
(= __@x0
FStar.Stubs.Tactics.Types.Force)))

; </end constructor FStar.Stubs.Tactics.Types.Force>


; <start constructor FStar.Stubs.Tactics.Types.ForceSMT>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.ForceSMT ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
177)
(= __@x0
FStar.Stubs.Tactics.Types.ForceSMT)))

; </end constructor FStar.Stubs.Tactics.Types.ForceSMT>


; <start constructor FStar.Stubs.Tactics.Types.Drop>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.Drop ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
179)
(= __@x0
FStar.Stubs.Tactics.Types.Drop)))

; </end constructor FStar.Stubs.Tactics.Types.Drop>


; </end encoding type FStar.Stubs.Tactics.Types.guard_policy>


; <Start encoding assume FStar.Stubs.Tactics.Types.guard_policy__uu___haseq>


; </end encoding assume FStar.Stubs.Tactics.Types.guard_policy__uu___haseq>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_Goal>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Goal (Term) Term)
(declare-fun Tm_arrow_6ed889b98ff192e7f7ad79278b84f018 () Term)
(declare-fun FStar.Stubs.Tactics.Types.uu___is_Goal@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_Goal>


; <Skipped let uu___is_Goal/>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_SMT>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_SMT (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.uu___is_SMT@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_SMT>


; <Skipped let uu___is_SMT/>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_SMTSync>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_SMTSync (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.uu___is_SMTSync@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_SMTSync>


; <Skipped let uu___is_SMTSync/>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_Force>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Force (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Force@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_Force>


; <Skipped let uu___is_Force/>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_ForceSMT>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_ForceSMT (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.uu___is_ForceSMT@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_ForceSMT>


; <Skipped let uu___is_ForceSMT/>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_Drop>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Drop (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Drop@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_Drop>


; <Skipped let uu___is_Drop/>


; <Start encoding val FStar.Stubs.Tactics.Types.non_informative_token>

(declare-fun FStar.Stubs.Tactics.Types.non_informative_token (Term Term) Term)
(declare-fun Tm_arrow_db2142966eaa849f2844e5e64560e291 () Term)
(declare-fun FStar.Stubs.Tactics.Types.non_informative_token@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.non_informative_token>


; <Start encoding val FStar.Stubs.Tactics.Types.subtyping_token>

(declare-fun FStar.Stubs.Tactics.Types.subtyping_token (Term Term Term) Term)
(declare-fun Tm_arrow_39f91d5aec75d4006e489b79c2d6c16c () Term)
(declare-fun FStar.Stubs.Tactics.Types.subtyping_token@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.subtyping_token>


; <Start encoding val FStar.Stubs.Tactics.Types.equiv_token>

(declare-fun FStar.Stubs.Tactics.Types.equiv_token (Term Term Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.equiv_token@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.equiv_token>


; <Start encoding val FStar.Stubs.Tactics.Types.typing_token>

(declare-fun FStar.Stubs.Tactics.Types.typing_token (Term Term Term) Term)
(declare-fun Tm_arrow_b82abfd864fd916809031a4e19332165 () Term)
(declare-fun FStar.Stubs.Tactics.Types.typing_token@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.typing_token>


; <Start encoding let issues>

(declare-fun FStar.Stubs.Tactics.Types.issues () Term)

; </end encoding let issues>


; <Start encoding val FStar.Stubs.Tactics.Types.tref>

(declare-fun FStar.Stubs.Tactics.Types.tref (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.tref@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.tref>


; End Externals for interface FStar.Stubs.Tactics.Types


; Externals for interface FStar.Stubs.Tactics.Result


; <Start encoding type FStar.Stubs.Tactics.Result.__result>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Result.__result (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Stubs.Tactics.Result.__result@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Result.Success (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Tactics.Result.Success_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Tactics.Result.Success_v (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Tactics.Result.Success_ps (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Result.Success
(declare-fun FStar.Stubs.Tactics.Result.Success@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Result.Failed (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Tactics.Result.Failed_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Tactics.Result.Failed_exn (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Tactics.Result.Failed_ps (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Result.Failed
(declare-fun FStar.Stubs.Tactics.Result.Failed@tok () Term)
(declare-fun Tm_arrow_b4f72aad67a83b7651f6cbeabda293bd () Term)
(declare-fun Tm_arrow_ed23e62103a6322a76c850acc838838e () Term)

; <start constructor FStar.Stubs.Tactics.Result.__result>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Result.__result ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Stubs.Tactics.Result.__result @x0))
 
;;no pats
:qid is-FStar.Stubs.Tactics.Result.__result))))

; </end constructor FStar.Stubs.Tactics.Result.__result>


; <start constructor FStar.Stubs.Tactics.Result.Success>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Result.Success ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
108)
(= __@x0
(FStar.Stubs.Tactics.Result.Success (FStar.Stubs.Tactics.Result.Success_a __@x0)
(FStar.Stubs.Tactics.Result.Success_v __@x0)
(FStar.Stubs.Tactics.Result.Success_ps __@x0)))))

; </end constructor FStar.Stubs.Tactics.Result.Success>


; <start constructor FStar.Stubs.Tactics.Result.Failed>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Result.Failed ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
113)
(= __@x0
(FStar.Stubs.Tactics.Result.Failed (FStar.Stubs.Tactics.Result.Failed_a __@x0)
(FStar.Stubs.Tactics.Result.Failed_exn __@x0)
(FStar.Stubs.Tactics.Result.Failed_ps __@x0)))))

; </end constructor FStar.Stubs.Tactics.Result.Failed>


; </end encoding type FStar.Stubs.Tactics.Result.__result>


; <Start encoding val FStar.Stubs.Tactics.Result.uu___is_Success>

(declare-fun FStar.Stubs.Tactics.Result.uu___is_Success (Term Term) Term)
(declare-fun Tm_arrow_6645d4122074ac8044bb1b5f135eaee8 () Term)
(declare-fun FStar.Stubs.Tactics.Result.uu___is_Success@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Result.uu___is_Success>


; <Skipped let uu___is_Success/>


; <Start encoding val FStar.Stubs.Tactics.Result.__proj__Success__item__v>

(declare-fun Tm_refine_b4c1e6949a3a57698645ab5be039dc6f (Term) Term)
(declare-fun FStar.Stubs.Tactics.Result.__proj__Success__item__v (Term Term) Term)

(declare-fun Tm_arrow_a778adeae3b2f20803ce4aae6d3d3c6d () Term)
(declare-fun FStar.Stubs.Tactics.Result.__proj__Success__item__v@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Result.__proj__Success__item__v>


; <Skipped let __proj__Success__item__v/>


; <Start encoding val FStar.Stubs.Tactics.Result.__proj__Success__item__ps>


(declare-fun FStar.Stubs.Tactics.Result.__proj__Success__item__ps (Term Term) Term)

(declare-fun Tm_arrow_a7938cd808916b4560d42e6706c15631 () Term)
(declare-fun FStar.Stubs.Tactics.Result.__proj__Success__item__ps@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Result.__proj__Success__item__ps>


; <Skipped let __proj__Success__item__ps/>


; <Start encoding val FStar.Stubs.Tactics.Result.uu___is_Failed>

(declare-fun FStar.Stubs.Tactics.Result.uu___is_Failed (Term Term) Term)

(declare-fun FStar.Stubs.Tactics.Result.uu___is_Failed@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Result.uu___is_Failed>


; <Skipped let uu___is_Failed/>


; <Start encoding val FStar.Stubs.Tactics.Result.__proj__Failed__item__exn>

(declare-fun Tm_refine_3e8cae0c9d54f7b2657be55ddd0643d7 (Term) Term)
(declare-fun FStar.Stubs.Tactics.Result.__proj__Failed__item__exn (Term Term) Term)

(declare-fun Tm_arrow_343463ac2c43a023370797ff20c81cf5 () Term)
(declare-fun FStar.Stubs.Tactics.Result.__proj__Failed__item__exn@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Result.__proj__Failed__item__exn>


; <Skipped let __proj__Failed__item__exn/>


; <Start encoding val FStar.Stubs.Tactics.Result.__proj__Failed__item__ps>


(declare-fun FStar.Stubs.Tactics.Result.__proj__Failed__item__ps (Term Term) Term)

(declare-fun Tm_arrow_2747a76e1f36cdc1944263efc5937cdb () Term)
(declare-fun FStar.Stubs.Tactics.Result.__proj__Failed__item__ps@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Result.__proj__Failed__item__ps>


; <Skipped let __proj__Failed__item__ps/>


; End Externals for interface FStar.Stubs.Tactics.Result


; Externals for module FStar.Monotonic.Pure


; <Start encoding let is_monotonic>

(declare-fun FStar.Monotonic.Pure.is_monotonic (Term Term) Term)

(declare-fun FStar.Monotonic.Pure.is_monotonic@tok () Term)

; </end encoding let is_monotonic>


; <Start encoding let elim_pure_wp_monotonicity>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Pure.elim_pure_wp_monotonicity (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Pure.elim_pure_wp_monotonicity@tok () Term)

; </end encoding let elim_pure_wp_monotonicity>


; <Start encoding let elim_pure_wp_monotonicity_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Pure.elim_pure_wp_monotonicity_forall (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Pure.elim_pure_wp_monotonicity_forall@tok () Term)

; </end encoding let elim_pure_wp_monotonicity_forall>


; <Start encoding let intro_pure_wp_monotonicity>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Pure.intro_pure_wp_monotonicity (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Pure.intro_pure_wp_monotonicity@tok () Term)

; </end encoding let intro_pure_wp_monotonicity>


; <Start encoding let as_pure_wp>

(declare-fun FStar.Monotonic.Pure.as_pure_wp (Term Term) Term)
(declare-fun Tm_refine_5578b11cc349512589a3d2a8bfe37c29 (Term Term) Term)
(declare-fun Tm_arrow_169997680175178f95069b947929b45b () Term)
(declare-fun FStar.Monotonic.Pure.as_pure_wp@tok () Term)


; </end encoding let as_pure_wp>


; <Start encoding let elim_pure>



(declare-fun Tm_arrow_61bb9550f39772f18eaab129c43c3788 (Term) Term)
(declare-fun Tm_abs_6ffc06f5d789cf42c73d4f163a977cc0 (Term Term) Term)
(declare-fun Tm_refine_9d7e1da4c8ccc98f1562bffecfa030b6 (Term Term) Term)



(declare-fun Tm_abs_735bfa0400a12573ed48312f042e45e7 (Term) Term)
(declare-fun Tm_arrow_c4804ca26ade2f3859400eebcb37ddbd (Term Term) Term)
(declare-fun FStar.Monotonic.Pure.elim_pure (Term Term Term Term) Term)











(declare-fun Tm_arrow_08f6df717f4cfecbf9659e86cd16d49b () Term)
(declare-fun FStar.Monotonic.Pure.elim_pure@tok () Term)












; </end encoding let elim_pure>


; End Externals for module FStar.Monotonic.Pure


; Externals for interface FStar.Tactics.Effect


; <Start encoding let tac_wp_t0>

(declare-fun FStar.Tactics.Effect.tac_wp_t0 (Term) Term)

(declare-fun FStar.Tactics.Effect.tac_wp_t0@tok () Term)
(declare-fun Tm_arrow_79c32bf125dc2af78993da96357547a4 (Term) Term)
(declare-fun Tm_arrow_6b294f3db0bcad9bb190c1392ab01385 (Term) Term)

; </end encoding let tac_wp_t0>


; <Start encoding let tac_wp_monotonic>

(declare-fun FStar.Tactics.Effect.tac_wp_monotonic (Term Term) Term)
(declare-fun Tm_arrow_586e511512340cebc0763f51dd24e52e () Term)
(declare-fun FStar.Tactics.Effect.tac_wp_monotonic@tok () Term)



; </end encoding let tac_wp_monotonic>


; <Start encoding let tac_wp_t>

(declare-fun FStar.Tactics.Effect.tac_wp_t (Term) Term)

(declare-fun FStar.Tactics.Effect.tac_wp_t@tok () Term)


(declare-fun Tm_refine_afae78805025dbab8b8be62e7a11c687 (Term) Term)

; </end encoding let tac_wp_t>


; <Start encoding let tac_repr>

(declare-fun FStar.Tactics.Effect.tac_repr (Term Term) Term)
(declare-fun Tm_arrow_3f33249eca490ba8c990fff289934593 () Term)
(declare-fun FStar.Tactics.Effect.tac_repr@tok () Term)
(declare-fun Non_total_Tm_arrow_ef31cf121fb3836b1822f35578f3a2c7 (Term Term) Term)

; </end encoding let tac_repr>


; <Start encoding let tac_return_wp>

(declare-fun FStar.Tactics.Effect.tac_return_wp (Term Term) Term)
(declare-fun Tm_arrow_d45e4c1a61d444b0cb436be42fdd8fff () Term)
(declare-fun FStar.Tactics.Effect.tac_return_wp@tok () Term)



(declare-fun Tm_abs_62c5eb272101ce5d3f5f190695a8c978 (Term Term) Term)

; </end encoding let tac_return_wp>


; <Start encoding let tac_return>

(declare-fun FStar.Tactics.Effect.tac_return (Term Term) Term)




(declare-fun Tm_arrow_57311ad25591b2a0d4e7a881591571c4 () Term)
(declare-fun FStar.Tactics.Effect.tac_return@tok () Term)




;;;;;;;;;;;;;;;;Imprecise function encoding
(declare-fun Tm_abs_FStar.Tactics.Effect_144 (Term Term) Term)

; </end encoding let tac_return>


; <Start encoding let tac_bind_wp>

(declare-fun Tm_arrow_615c284bf702a1fbef85424e39380642 (Term Term) Term)
(declare-fun FStar.Tactics.Effect.tac_bind_wp (Term Term Term Term) Term)

(declare-fun Tm_arrow_8fd6de47bf2be2d2417a26df2df3e1fa () Term)
(declare-fun FStar.Tactics.Effect.tac_bind_wp@tok () Term)



(declare-fun Tm_abs_79f810e0804f4454fdd99bc6bd3319e9 (Term Term Term Term) Term)


(declare-fun Tm_abs_18350866457823edafacef426e439b94 (Term Term Term Term) Term)

; </end encoding let tac_bind_wp>


; <Start encoding let tac_wp_compact>

(declare-fun FStar.Tactics.Effect.tac_wp_compact (Term Term) Term)
(declare-fun Tm_arrow_d630ba03ac64e20998a0b33887db7f1d () Term)
(declare-fun FStar.Tactics.Effect.tac_wp_compact@tok () Term)
(declare-fun Tm_arrow_1a36c778c34fcf235893cf9fa8e22d86 (Term) Term)



(declare-fun Tm_abs_0ba06e1220483cb697e09fd9eb53fda1 (Term Term Term) Term)

(declare-fun Tm_arrow_03e2759b21e31a5318d40a743e5bbb54 (Term) Term)
(declare-fun Tm_abs_817a13da54c634f81e0b2bf0c6db2fd9 (Term Term Term Term) Term)


(declare-fun Tm_arrow_c4594856dbe7e5b386d54cadda720877 (Term) Term)
(declare-fun Tm_abs_bee6b44d62d7b15a7c1a999c08dbdaa1 (Term Term) Term)

; </end encoding let tac_wp_compact>


; <Start encoding val FStar.Tactics.Effect.tac_bind_interleave_begin>

(declare-fun FStar.Tactics.Effect.tac_bind_interleave_begin (Dummy_sort) Term)

; </end encoding val FStar.Tactics.Effect.tac_bind_interleave_begin>


; <Skipped #push-options "--admit_smt_queries true"/>


; <Start encoding let tac_bind>


(declare-fun Tm_arrow_73ffef9431728db285f9b23266829750 (Term Term Term) Term)
(declare-fun FStar.Tactics.Effect.tac_bind (Term Term Term Term Term Term Term Term) Term)












(declare-fun Tm_abs_38525ace133de22e8b3b3636397a13cd (Term Term Term Term Term Term) Term)





(declare-fun Tm_abs_afd910fd71261e3939048d0e1004fda1 (Term Term Term Term) Term)
(declare-fun Tm_arrow_cbc1739ca78054f7e441cea306012951 () Term)
(declare-fun FStar.Tactics.Effect.tac_bind@tok () Term)




















;;;;;;;;;;;;;;;;Imprecise function encoding
(declare-fun Tm_abs_FStar.Tactics.Effect_239 (Term Term Term Term Term Term) Term)

; </end encoding let tac_bind>


; <Skipped #pop-options/>


; <Start encoding val FStar.Tactics.Effect.tac_bind_interleave_end>

(declare-fun FStar.Tactics.Effect.tac_bind_interleave_end (Dummy_sort) Term)

; </end encoding val FStar.Tactics.Effect.tac_bind_interleave_end>


; <Start encoding let tac_if_then_else_wp>

(declare-fun FStar.Tactics.Effect.tac_if_then_else_wp (Term Term Term Term) Term)
(declare-fun Tm_arrow_0d888f0d0310e06a23a044b7487ca9a3 () Term)
(declare-fun FStar.Tactics.Effect.tac_if_then_else_wp@tok () Term)


(declare-fun Tm_arrow_2bfa429e0c444d45072542e413efc1c1 (Term) Term)
(declare-fun Tm_abs_86d5c2428199615bc3f8f5172ed82af4 (Term Term Term Term) Term)

; </end encoding let tac_if_then_else_wp>


; <Start encoding let tac_if_then_else>

(declare-fun FStar.Tactics.Effect.tac_if_then_else (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_36fb4b5a399369ef643849e96611ebec () Term)
(declare-fun FStar.Tactics.Effect.tac_if_then_else@tok () Term)








(declare-fun Tm_abs_2fda180fbbce3bc00549b67fc601e0be (Term Term Term Term Term Term) Term)



(declare-fun Tm_abs_6ed68232224ac13a4995196b297d1f2b (Term Term Term Term) Term)

; </end encoding let tac_if_then_else>


; <Start encoding let tac_subcomp>


(declare-fun FStar.Tactics.Effect.tac_subcomp (Term Term Term Term) Term)
(declare-fun Tm_refine_9688035851d5c5523a806a1df19cb706 (Term Term) Term)

(declare-fun Tm_arrow_dc8ee65b5b33b14f497b382af4ab7512 () Term)
(declare-fun FStar.Tactics.Effect.tac_subcomp@tok () Term)


; </end encoding let tac_subcomp>


; <Start encoding let tac_close>



(declare-fun FStar.Tactics.Effect.tac_close (Term Term Term Term) Term)


(declare-fun Tm_arrow_ddae682ca2e9bd4cfa6e582c3cbda6bf () Term)
(declare-fun FStar.Tactics.Effect.tac_close@tok () Term)




(declare-fun Tm_abs_bd152fc5c12cc6aa125ccf543aa53813 (Term Term Term Term) Term)


(declare-fun Tm_abs_4a490b6642ec805995acda79bfbd79eb (Term Term Term) Term)

; </end encoding let tac_close>


; <Skipped layered_effect { TAC ... }/>


; <Skipped effect TacH a pre post = FStar.Tactics.Effect.TAC a/>


; <Skipped effect Tac a = FStar.Tactics.Effect.TacH a/>


; <Skipped effect TacS a = FStar.Tactics.Effect.TacH a/>


; <Skipped effect TacF a = FStar.Tactics.Effect.TacH a/>


; <Start encoding let lift_div_tac_wp>

(declare-fun FStar.Tactics.Effect.lift_div_tac_wp (Term Term) Term)
(declare-fun Tm_arrow_756b2c443a872ea2d839224a3f915862 () Term)
(declare-fun FStar.Tactics.Effect.lift_div_tac_wp@tok () Term)


(declare-fun Tm_abs_d19ed2c1cbcc251803f55dea9449b934 (Term Term Term) Term)

(declare-fun Tm_arrow_298f7ec24f68dbe551035ce3db5b5bdd (Term) Term)
(declare-fun Tm_abs_9c642aa783aefa5494cf2caad21c4825 (Term Term) Term)

; </end encoding let lift_div_tac_wp>


; <Start encoding let lift_div_tac>

(declare-fun Non_total_Tm_arrow_da9712c41bd4800828fa87c1bc605521 (Term Term) Term)
(declare-fun FStar.Tactics.Effect.lift_div_tac (Term Term Term) Term)







(declare-fun Tm_arrow_69a366f788903d83a59a723310249405 () Term)
(declare-fun FStar.Tactics.Effect.lift_div_tac@tok () Term)







;;;;;;;;;;;;;;;;Imprecise function encoding
(declare-fun Tm_abs_FStar.Tactics.Effect_326 (Term Term) Term)

; </end encoding let lift_div_tac>


; <Skipped sub_effect DIV ~> TAC/>


; <Start encoding let get>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Effect.get (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Effect.get@tok () Term)

; </end encoding let get>


; <Start encoding let raise>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Effect.raise (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Effect.raise@tok () Term)

; </end encoding let raise>


; <Start encoding val FStar.Tactics.Effect.with_tactic>

(declare-fun Non_total_Tm_arrow_0df358455d9ffa69782d20c171a72c48 () Term)
(declare-fun FStar.Tactics.Effect.with_tactic (Term Term) Term)

(declare-fun Tm_arrow_0f1a7b132563c41331d8b63d877642f4 () Term)
(declare-fun FStar.Tactics.Effect.with_tactic@tok () Term)

; </end encoding val FStar.Tactics.Effect.with_tactic>


; <Start encoding val FStar.Tactics.Effect.rewrite_with_tactic>


(declare-fun FStar.Tactics.Effect.rewrite_with_tactic (Term Term Term) Term)

(declare-fun Tm_arrow_f63ee5eb2c336987d9ae8086208589c0 () Term)
(declare-fun FStar.Tactics.Effect.rewrite_with_tactic@tok () Term)

; </end encoding val FStar.Tactics.Effect.rewrite_with_tactic>


; <Start encoding val FStar.Tactics.Effect.synth_by_tactic>


(declare-fun FStar.Tactics.Effect.synth_by_tactic (Term Term) Term)

(declare-fun Tm_arrow_8f10558f8b36216eec81f2c618b5024b () Term)
(declare-fun FStar.Tactics.Effect.synth_by_tactic@tok () Term)

; </end encoding val FStar.Tactics.Effect.synth_by_tactic>


; <Start encoding val FStar.Tactics.Effect.assert_by_tactic>


(declare-fun FStar.Tactics.Effect.assert_by_tactic (Term Term) Term)


(declare-fun Tm_arrow_62294304586082aabc8d32a2cb34b258 () Term)
(declare-fun FStar.Tactics.Effect.assert_by_tactic@tok () Term)


; </end encoding val FStar.Tactics.Effect.assert_by_tactic>


; <Start encoding val FStar.Tactics.Effect.by_tactic_seman>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Effect.by_tactic_seman (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Effect.by_tactic_seman@tok () Term)

; </end encoding val FStar.Tactics.Effect.by_tactic_seman>


; <Start encoding let assume_safe>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Effect.assume_safe (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Effect.assume_safe@tok () Term)

; </end encoding let assume_safe>


; <Start encoding let tac>

(declare-fun FStar.Tactics.Effect.tac (Term Term) Term)

(declare-fun FStar.Tactics.Effect.tac@tok () Term)
(declare-fun Non_total_Tm_arrow_d7d295746bb03506a91beb076c0c54c2 (Term Term) Term)

; </end encoding let tac>


; <Start encoding let tactic>

(declare-fun FStar.Tactics.Effect.tactic (Term) Term)

(declare-fun FStar.Tactics.Effect.tactic@tok () Term)

; </end encoding let tactic>


; <Start encoding val FStar.Tactics.Effect.preprocess_with>

(declare-fun Non_total_Tm_arrow_489c5cd52ce0bd6c500497b6a9d25763 () Term)
(declare-fun FStar.Tactics.Effect.preprocess_with (Term) Term)

(declare-fun Tm_arrow_11f5dabe45aec598b26a74d4ae177cec () Term)
(declare-fun FStar.Tactics.Effect.preprocess_with@tok () Term)

; </end encoding val FStar.Tactics.Effect.preprocess_with>


; <Start encoding val FStar.Tactics.Effect.postprocess_with>


(declare-fun FStar.Tactics.Effect.postprocess_with (Term) Term)

(declare-fun Tm_arrow_71902d217cf156a1346c71f86a0ea184 () Term)
(declare-fun FStar.Tactics.Effect.postprocess_with@tok () Term)

; </end encoding val FStar.Tactics.Effect.postprocess_with>


; <Start encoding val FStar.Tactics.Effect.postprocess_for_extraction_with>


(declare-fun FStar.Tactics.Effect.postprocess_for_extraction_with (Term) Term)


(declare-fun FStar.Tactics.Effect.postprocess_for_extraction_with@tok () Term)

; </end encoding val FStar.Tactics.Effect.postprocess_for_extraction_with>


; <Skipped #set-options "--no_tactics"/>


; <Start encoding val FStar.Tactics.Effect.unfold_with_tactic>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Effect.unfold_with_tactic (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Effect.unfold_with_tactic@tok () Term)

; </end encoding val FStar.Tactics.Effect.unfold_with_tactic>


; <Start encoding val FStar.Tactics.Effect.unfold_rewrite_with_tactic>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Effect.unfold_rewrite_with_tactic (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Effect.unfold_rewrite_with_tactic@tok () Term)

; </end encoding val FStar.Tactics.Effect.unfold_rewrite_with_tactic>


; End Externals for interface FStar.Tactics.Effect


; Externals for interface FStar.Tactics.Typeclasses


; <Start encoding val FStar.Tactics.Typeclasses.tcclass>

(declare-fun FStar.Tactics.Typeclasses.tcclass (Dummy_sort) Term)

; </end encoding val FStar.Tactics.Typeclasses.tcclass>


; <Start encoding val FStar.Tactics.Typeclasses.tcinstance>

(declare-fun FStar.Tactics.Typeclasses.tcinstance (Dummy_sort) Term)

; </end encoding val FStar.Tactics.Typeclasses.tcinstance>


; <Start encoding val FStar.Tactics.Typeclasses.fundeps>

(declare-fun FStar.Tactics.Typeclasses.fundeps (Term) Term)

(declare-fun FStar.Tactics.Typeclasses.fundeps@tok () Term)

; </end encoding val FStar.Tactics.Typeclasses.fundeps>


; <Start encoding val FStar.Tactics.Typeclasses.no_method>

(declare-fun FStar.Tactics.Typeclasses.no_method (Dummy_sort) Term)

; </end encoding val FStar.Tactics.Typeclasses.no_method>


; <Start encoding val FStar.Tactics.Typeclasses.tcresolve>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Typeclasses.tcresolve (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Typeclasses.tcresolve@tok () Term)

; </end encoding val FStar.Tactics.Typeclasses.tcresolve>


; <Start encoding val FStar.Tactics.Typeclasses.mk_class>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Typeclasses.mk_class (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Typeclasses.mk_class@tok () Term)

; </end encoding val FStar.Tactics.Typeclasses.mk_class>


; <Start encoding let solve>

(declare-fun FStar.Tactics.Typeclasses.solve (Term Term) Term)

(declare-fun FStar.Tactics.Typeclasses.solve@tok () Term)

; </end encoding let solve>


; End Externals for interface FStar.Tactics.Typeclasses

(push) ;; push{1

; Internals for Pulse.Class.BoundedIntegers


; encoding sigelt let fits_t


; <Start encoding let fits_t>

;;;;;;;;;;;;;;;;_: Prims.int -> Prims.prop
(declare-fun Tm_arrow_3a9c22ddc54716caa0276c05e792d97e () Term)
(declare-fun Pulse.Class.BoundedIntegers.fits_t (Term) Term)

;;;;;;;;;;;;;;;;fits: (_: Prims.int -> Prims.prop) -> Type
(declare-fun Tm_arrow_d8631b63cc0f3f8d0a4a4d89512ec57f () Term)
(declare-fun Pulse.Class.BoundedIntegers.fits_t@tok () Term)

(declare-fun Tm_refine_2c9509c4fdf356ea8b390762a509ebbb (Term) Term)

; </end encoding let fits_t>

(push) ;; push{2

; tc_inductive

;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.__cache_version_number__; Namespace Prims
(assert (! (HasType Prims.__cache_version_number__
Prims.int)
:named function_token_typing_Prims.__cache_version_number__))
;;;;;;;;;;;;;;;;Range_const typing
;;; Fact-ids: Name FStar.Range.range; Namespace FStar.Range
(assert (! (HasTypeZ (Range_const 1)
FStar.Range.range)
:named typing_range_const))
;;;;;;;;;;;;;;;;Constructor base
;;; Fact-ids: Name FStar.Stubs.Tactics.Common.NotAListLiteral; Namespace FStar.Stubs.Tactics.Common
(assert (! (implies (is-FStar.Stubs.Tactics.Common.NotAListLiteral FStar.Stubs.Tactics.Common.NotAListLiteral)
(= FStar.Stubs.Tactics.Common.NotAListLiteral
FStar.Stubs.Tactics.Common.NotAListLiteral@base))
:named constructor_base_FStar.Stubs.Tactics.Common.NotAListLiteral))
;;;;;;;;;;;;;;;;Constructor base
;;; Fact-ids: Name FStar.Stubs.Tactics.Common.SKIP; Namespace FStar.Stubs.Tactics.Common
(assert (! (implies (is-FStar.Stubs.Tactics.Common.SKIP FStar.Stubs.Tactics.Common.SKIP)
(= FStar.Stubs.Tactics.Common.SKIP
FStar.Stubs.Tactics.Common.SKIP@base))
:named constructor_base_FStar.Stubs.Tactics.Common.SKIP))
;;;;;;;;;;;;;;;;well-founded ordering on nat (alt)
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Prims.int)
(HasTypeFuel @u0
@x2
Prims.int)
(> (BoxInt_proj_0 @x1)
0)
(>= (BoxInt_proj_0 @x2)
0)
(< (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x1)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
@x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.int) (HasTypeFuel @u0
@x2
Prims.int) (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
@x1)))
:qid well-founded-ordering-on-nat))
:named well-founded-ordering-on-nat))
;;;;;;;;;;;;;;;;unit typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Tm_unit
Prims.unit)
:named unit_typing))
;;;;;;;;;;;;;;;;unit inversion
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.unit)
(= @x1
Tm_unit))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.unit))
:qid unit_inversion))
:named unit_inversion))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.fits_t; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(5,4-5,10); use=Pulse.Class.BoundedIntegers.fst(5,4-5,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_arrow_3a9c22ddc54716caa0276c05e792d97e)
(HasType (Pulse.Class.BoundedIntegers.fits_t @x0)
Tm_type))
 

:pattern ((Pulse.Class.BoundedIntegers.fits_t @x0))
:qid typing_Pulse.Class.BoundedIntegers.fits_t))

:named typing_Pulse.Class.BoundedIntegers.fits_t))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Prims.unit
Prims.eqtype)
:named typing_Prims.unit))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.subtype_of @x0
@x1)
Prims.logical))
 

:pattern ((Prims.subtype_of @x0
@x1))
:qid typing_Prims.subtype_of))

:named typing_Prims.subtype_of))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,5-117,11); use=Prims.fst(117,5-117,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.squash @x0)
Tm_type))
 

:pattern ((Prims.squash @x0))
:qid typing_Prims.squash))

:named typing_Prims.squash))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Prims.prop
Tm_type)
:named typing_Prims.prop))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (HasType Prims.logical
Tm_type)
:named typing_Prims.logical))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_and; Namespace Prims
(assert (! 
;; def=Prims.fst(188,5-188,10); use=Prims.fst(188,5-188,10)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.logical)
(HasType @x1
Prims.logical))
(HasType (Prims.l_and @x0
@x1)
Prims.logical))
 

:pattern ((Prims.l_and @x0
@x1))
:qid typing_Prims.l_and))

:named typing_Prims.l_and))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (HasType Prims.int
Prims.eqtype)
:named typing_Prims.int))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.hasEq; Namespace Prims
(assert (! 
;; def=Prims.fst(69,5-69,10); use=Prims.fst(69,5-69,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.hasEq @x0)
Tm_type))
 

:pattern ((Prims.hasEq @x0))
:qid typing_Prims.hasEq))

:named typing_Prims.hasEq))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Prims.eqtype
Tm_type)
:named typing_Prims.eqtype))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (HasType Prims.bool
Prims.eqtype)
:named typing_Prims.bool))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.pair@tok
@x0)
@x1)
(Prims.pair @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.pair@tok
@x0)
@x1))

:pattern ((Prims.pair @x0
@x1))
:qid token_correspondence_Prims.pair@tok))

:named token_correspondence_Prims.pair@tok))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x5
@x6))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(Prims.Pair @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(Prims.Pair @x1
@x2
@x3
@x4)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x5
@x6)))
:qid subterm_ordering_Prims.Pair))

:named subterm_ordering_Prims.Pair))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (HasType Tm_refine_f1ecc6ab6882a651504f328937700647
Tm_type)
:named refinement_kinding_Tm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! (HasType Tm_refine_da3062322c9bea8d5b2058386775b91a
Tm_type)
:named refinement_kinding_Tm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Tactics.Types.tracepoint; Namespace FStar.Stubs.Tactics.Types
(assert (! (HasType Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f
Tm_type)
:named refinement_kinding_Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (HasType Tm_refine_774ba3f728d91ead8ef40be66c9802e5
Tm_type)
:named refinement_kinding_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf
Tm_type)
:named refinement_kinding_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Tm_refine_542f9d4f129664613f2483a6c88bc7c2
Tm_type)
:named refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Tm_refine_414d0a9f578ab0048252f8c8f552b99f
Tm_type)
:named refinement_kinding_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,32-117,42); use=Prims.fst(117,32-117,42)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))

:named refinement_kinding_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.fits_t; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(5,32-5,48); use=Pulse.Class.BoundedIntegers.fst(5,32-5,48)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_2c9509c4fdf356ea8b390762a509ebbb @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_2c9509c4fdf356ea8b390762a509ebbb @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_2c9509c4fdf356ea8b390762a509ebbb))

:named refinement_kinding_Tm_refine_2c9509c4fdf356ea8b390762a509ebbb))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (HasType Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f
Tm_type)
:named refinement_kinding_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(772,26-772,42); use=FStar.Pervasives.fsti(772,26-772,42)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_f1ecc6ab6882a651504f328937700647)
false)
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_f1ecc6ab6882a651504f328937700647))
:qid refinement_interpretation_Tm_refine_f1ecc6ab6882a651504f328937700647))

:named refinement_interpretation_Tm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(533,7-533,12); use=FStar.List.Tot.Base.fst(533,7-533,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_da3062322c9bea8d5b2058386775b91a)
(HasTypeFuel @u0
@x1
Tm_type))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_da3062322c9bea8d5b2058386775b91a))
:qid refinement_interpretation_Tm_refine_da3062322c9bea8d5b2058386775b91a))

:named refinement_interpretation_Tm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Tactics.Types.tracepoint; Namespace FStar.Stubs.Tactics.Types
(assert (! 
;; def=FStar.Stubs.Tactics.Types.fsti(44,31-44,48); use=FStar.Stubs.Tactics.Types.fsti(44,31-44,48)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f)
(and (HasTypeFuel @u0
@x1
Prims.bool)

;; def=FStar.Stubs.Tactics.Types.fsti(44,38-44,47); use=FStar.Stubs.Tactics.Types.fsti(44,38-44,47)
(= @x1
(BoxBool true))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f))
:qid refinement_interpretation_Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f))

:named refinement_interpretation_Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! 
;; def=Prims.fst(683,11-683,24); use=Prims.fst(683,11-683,24)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_774ba3f728d91ead8ef40be66c9802e5)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(683,18-683,23); use=Prims.fst(683,18-683,23)
(> (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
:qid refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))

:named refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! 
;; def=Prims.fst(304,12-304,41); use=Prims.fst(304,12-304,41)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf)
(and (HasTypeFuel @u0
@x1
Tm_type)

;; def=Prims.fst(304,21-304,40); use=Prims.fst(304,21-304,40)
(Valid 
;; def=Prims.fst(304,21-304,40); use=Prims.fst(304,21-304,40)
(Prims.subtype_of @x1
Prims.unit)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
:qid refinement_interpretation_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))

:named refinement_interpretation_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! 
;; def=Prims.fst(680,11-680,25); use=Prims.fst(680,11-680,25)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_542f9d4f129664613f2483a6c88bc7c2)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(680,18-680,24); use=Prims.fst(680,18-680,24)
(>= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
:qid refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))

:named refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! 
;; def=Prims.fst(73,14-73,31); use=Prims.fst(73,14-73,31)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_414d0a9f578ab0048252f8c8f552b99f)
(and (HasTypeFuel @u0
@x1
Tm_type)

;; def=Prims.fst(73,23-73,30); use=Prims.fst(73,23-73,30)
(Valid 
;; def=Prims.fst(73,23-73,30); use=Prims.fst(73,23-73,30)
(Prims.hasEq @x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
:qid refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))

:named refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,32-117,42); use=Prims.fst(117,32-117,42)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(117,13-117,14); use=Prims.fst(117,40-117,41)
(Valid 
;; def=Prims.fst(117,13-117,14); use=Prims.fst(117,40-117,41)
@x2
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x2)))
:qid refinement_interpretation_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))

:named refinement_interpretation_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.fits_t; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(5,32-5,48); use=Pulse.Class.BoundedIntegers.fst(5,32-5,48)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_2c9509c4fdf356ea8b390762a509ebbb @x2))
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Pulse.Class.BoundedIntegers.fst(5,40-5,46); use=Pulse.Class.BoundedIntegers.fst(5,40-5,46)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(5,40-5,46); use=Pulse.Class.BoundedIntegers.fst(5,40-5,46)
(ApplyTT @x2
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_2c9509c4fdf356ea8b390762a509ebbb @x2)))
:qid refinement_interpretation_Tm_refine_2c9509c4fdf356ea8b390762a509ebbb))

:named refinement_interpretation_Tm_refine_2c9509c4fdf356ea8b390762a509ebbb))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! 
;; def=Prims.fst(686,15-686,29); use=Prims.fst(686,15-686,29)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(686,22-686,28); use=Prims.fst(686,22-686,28)
(not (= @x1
(BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
:qid refinement_interpretation_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))

:named refinement_interpretation_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Pair_q (Prims.Pair @x0
@x1
@x2
@x3))
@x1)
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Pair_q))

:named projection_inverse_Prims.Pair_q))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Pair_p (Prims.Pair @x0
@x1
@x2
@x3))
@x0)
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Pair_p))

:named projection_inverse_Prims.Pair_p))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Pair__2 (Prims.Pair @x0
@x1
@x2
@x3))
@x3)
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Pair__2))

:named projection_inverse_Prims.Pair__2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Pair__1 (Prims.Pair @x0
@x1
@x2
@x3))
@x2)
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Pair__1))

:named projection_inverse_Prims.Pair__1))
;;; Fact-ids: Name Prims.op_Subtraction; Namespace Prims
(assert (! 
;; def=Prims.fst(546,4-546,18); use=Prims.fst(546,4-546,18)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_Subtraction @x0
@x1)
(BoxInt (- (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_Subtraction @x0
@x1))
:qid primitive_Prims.op_Subtraction))

:named primitive_Prims.op_Subtraction))
;;; Fact-ids: Name Prims.op_Modulus; Namespace Prims
(assert (! 
;; def=Prims.fst(697,4-697,14); use=Prims.fst(697,4-697,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (not (= (BoxInt_proj_0 @x1)
0))
(= (Prims.op_Modulus @x0
@x1)
(BoxInt (mod (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1)))))
 

:pattern ((Prims.op_Modulus @x0
@x1))
:qid primitive_Prims.op_Modulus))

:named primitive_Prims.op_Modulus))
;;; Fact-ids: Name Prims.op_LessThanOrEqual; Namespace Prims
(assert (! 
;; def=Prims.fst(564,4-564,22); use=Prims.fst(564,4-564,22)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_LessThanOrEqual @x0
@x1)
(BoxBool (<= (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_LessThanOrEqual @x0
@x1))
:qid primitive_Prims.op_LessThanOrEqual))

:named primitive_Prims.op_LessThanOrEqual))
;;; Fact-ids: Name Prims.op_LessThan; Namespace Prims
(assert (! 
;; def=Prims.fst(582,4-582,15); use=Prims.fst(582,4-582,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_LessThan @x0
@x1)
(BoxBool (< (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_LessThan @x0
@x1))
:qid primitive_Prims.op_LessThan))

:named primitive_Prims.op_LessThan))
;;; Fact-ids: Name Prims.op_GreaterThan; Namespace Prims
(assert (! 
;; def=Prims.fst(570,4-570,18); use=Prims.fst(570,4-570,18)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_GreaterThan @x0
@x1)
(BoxBool (> (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_GreaterThan @x0
@x1))
:qid primitive_Prims.op_GreaterThan))

:named primitive_Prims.op_GreaterThan))
;;; Fact-ids: Name Prims.op_Addition; Namespace Prims
(assert (! 
;; def=Prims.fst(552,4-552,15); use=Prims.fst(552,4-552,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_Addition @x0
@x1)
(BoxInt (+ (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_Addition @x0
@x1))
:qid primitive_Prims.op_Addition))

:named primitive_Prims.op_Addition))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! (is-Tm_arrow (PreType Prims.pair@tok))
:named pre_kinding_Prims.pair@tok))
;;;;;;;;;;;;;;;;/\ interpretation
;;; Fact-ids: Name Prims.l_and; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (and (Valid @x0)
(Valid @x1))
(Valid (Prims.l_and @x0
@x1)))
 

:pattern ((Prims.l_and @x0
@x1))
:qid l_and-interp))
:named l_and-interp))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_7e9afc6da5407011473323ad80ff51bf
;;; Fact-ids: Name FStar.Pervasives.eqtype_as_type; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_7e9afc6da5407011473323ad80ff51bf
Tm_type)
:named kinding_Tm_arrow_7e9afc6da5407011473323ad80ff51bf))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_3a9c22ddc54716caa0276c05e792d97e
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.fits_t; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_arrow_3a9c22ddc54716caa0276c05e792d97e
Tm_type)
:named kinding_Tm_arrow_3a9c22ddc54716caa0276c05e792d97e))
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! (and (IsTotFun Prims.pair@tok)

;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Prims.pair@tok
@x0))
 

:pattern ((ApplyTT Prims.pair@tok
@x0))
:qid kinding_Prims.pair@tok))


;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.pair @x0
@x1)
Tm_type))
 

:pattern ((Prims.pair @x0
@x1))
:qid kinding_Prims.pair@tok.1))
)
:named kinding_Prims.pair@tok))
;;;;;;;;;;;;;;;;int typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Int))
 (! (HasType (BoxInt @u0)
Prims.int)
 

:pattern ((BoxInt @u0))
:qid int_typing))
:named int_typing))
;;;;;;;;;;;;;;;;int inversion
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.int)
(is-BoxInt @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.int))
:qid int_inversion))
:named int_inversion))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f1ecc6ab6882a651504f328937700647
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (iff (Valid (Prims.hasEq Tm_refine_f1ecc6ab6882a651504f328937700647))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;haseq for Tm_refine_da3062322c9bea8d5b2058386775b91a
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! (iff (Valid (Prims.hasEq Tm_refine_da3062322c9bea8d5b2058386775b91a))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f
;;; Fact-ids: Name FStar.Stubs.Tactics.Types.tracepoint; Namespace FStar.Stubs.Tactics.Types
(assert (! (iff (Valid (Prims.hasEq Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f))
(Valid (Prims.hasEq Prims.bool)))
:named haseqTm_refine_b8e45d9d9da45ba5c9bad7262617aa9f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_774ba3f728d91ead8ef40be66c9802e5
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;haseq for Tm_refine_542f9d4f129664613f2483a6c88bc7c2
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;haseq for Tm_refine_414d0a9f578ab0048252f8c8f552b99f
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2de20c066034c13bf76e9c0b94f4806c
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,32-117,42); use=Prims.fst(117,32-117,42)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0))))
:qid haseqTm_refine_2de20c066034c13bf76e9c0b94f4806c))

:named haseqTm_refine_2de20c066034c13bf76e9c0b94f4806c))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2c9509c4fdf356ea8b390762a509ebbb
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.fits_t; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(5,32-5,48); use=Pulse.Class.BoundedIntegers.fst(5,32-5,48)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_2c9509c4fdf356ea8b390762a509ebbb @x0)))
(Valid (Prims.hasEq Prims.int)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_2c9509c4fdf356ea8b390762a509ebbb @x0))))
:qid haseqTm_refine_2c9509c4fdf356ea8b390762a509ebbb))

:named haseqTm_refine_2c9509c4fdf356ea8b390762a509ebbb))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Prims.unit
Prims.eqtype)
:named function_token_typing_Prims.unit))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Prims.prop
Tm_type)
:named function_token_typing_Prims.prop))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (HasType Prims.logical
Tm_type)
:named function_token_typing_Prims.logical))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (HasType Prims.int
Prims.eqtype)
:named function_token_typing_Prims.int))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Prims.eqtype
Tm_type)
:named function_token_typing_Prims.eqtype))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (HasType Prims.bool
Prims.eqtype)
:named function_token_typing_Prims.bool))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Prims.pair @x2
@x3))
(and (is-Prims.Pair @x1)
(= @x2
(Prims.Pair_p @x1))
(= @x3
(Prims.Pair_q @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(Prims.pair @x2
@x3)))
:qid fuel_guarded_inversion_Prims.pair))

:named fuel_guarded_inversion_Prims.pair))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! (= 151
(Term_constr_id Prims.pair@tok))
:named fresh_token_Prims.pair@tok))
;;;;;;;;;;;;;;;;Equation for Pulse.Class.BoundedIntegers.fits_t
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.fits_t; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(5,4-5,10); use=Pulse.Class.BoundedIntegers.fst(5,4-5,10)
(forall ((@x0 Term))
 (! (= (Pulse.Class.BoundedIntegers.fits_t @x0)
(Tm_refine_2c9509c4fdf356ea8b390762a509ebbb @x0))
 

:pattern ((Pulse.Class.BoundedIntegers.fits_t @x0))
:qid equation_Pulse.Class.BoundedIntegers.fits_t))

:named equation_Pulse.Class.BoundedIntegers.fits_t))
;;;;;;;;;;;;;;;;Equation for Prims.subtype_of
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (Prims.subtype_of @x0
@x1))

;; def=Prims.fst(291,31-291,60); use=Prims.fst(291,31-291,60)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x0)
(HasType @x2
@x1))
 
;;no pats
:qid equation_Prims.subtype_of.1))
)
 

:pattern ((Prims.subtype_of @x0
@x1))
:qid equation_Prims.subtype_of))

:named equation_Prims.subtype_of))
;;;;;;;;;;;;;;;;Equation for Prims.squash
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,5-117,11); use=Prims.fst(117,5-117,11)
(forall ((@x0 Term))
 (! (= (Prims.squash @x0)
(Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0))
 

:pattern ((Prims.squash @x0))
:qid equation_Prims.squash))

:named equation_Prims.squash))
;;;;;;;;;;;;;;;;Equation for Prims.prop
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (= Prims.prop
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf)
:named equation_Prims.prop))
;;;;;;;;;;;;;;;;Equation for Prims.logical
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (= Prims.logical
Tm_type)
:named equation_Prims.logical))
;;;;;;;;;;;;;;;;Equation for Prims.l_and
;;; Fact-ids: Name Prims.l_and; Namespace Prims
(assert (! 
;; def=Prims.fst(188,5-188,10); use=Prims.fst(188,5-188,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.l_and @x0
@x1)
(Prims.squash (Prims.pair @x0
@x1)))
 

:pattern ((Prims.l_and @x0
@x1))
:qid equation_Prims.l_and))

:named equation_Prims.l_and))
;;;;;;;;;;;;;;;;Equation for Prims.eqtype
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (= Prims.eqtype
Tm_refine_414d0a9f578ab0048252f8c8f552b99f)
:named equation_Prims.eqtype))
;;;;;;;;;;;;;;;;Prop-typing for Prims.subtype_of
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(Valid (Prims.subtype_of (Prims.subtype_of @x0
@x1)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Prims.subtype_of @x0
@x1)
Prims.unit))
:qid defn_equation_Prims.subtype_of))

:named defn_equation_Prims.subtype_of))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x1)
(HasTypeFuel @u0
@x4
@x2))
(HasTypeFuel @u0
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x1
@x2)))
:qid data_typing_intro_Prims.Pair@tok))

:named data_typing_intro_Prims.Pair@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x5
@x6))
(and (HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x6
Tm_type)
(HasTypeFuel @u0
@x3
@x5)
(HasTypeFuel @u0
@x4
@x6)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x5
@x6)))
:qid data_elim_Prims.Pair))

:named data_elim_Prims.Pair))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (= 125
(Term_constr_id Prims.unit))
:named constructor_distinct_Prims.unit))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= 150
(Term_constr_id (Prims.pair @x0
@x1)))
 

:pattern ((Prims.pair @x0
@x1))
:qid constructor_distinct_Prims.pair))

:named constructor_distinct_Prims.pair))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (= 303
(Term_constr_id Prims.int))
:named constructor_distinct_Prims.int))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (= 107
(Term_constr_id Prims.bool))
:named constructor_distinct_Prims.bool))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 157
(Term_constr_id (Prims.Pair @x0
@x1
@x2
@x3)))
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid constructor_distinct_Prims.Pair))

:named constructor_distinct_Prims.Pair))
;;;;;;;;;;;;;;;;bool typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (forall ((@u0 Bool))
 (! (HasType (BoxBool @u0)
Prims.bool)
 

:pattern ((BoxBool @u0))
:qid bool_typing))
:named bool_typing))
;;;;;;;;;;;;;;;;bool inversion
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.bool)
(is-BoxBool @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.bool))
:qid bool_inversion))
:named bool_inversion))
;;;;;;;;;;;;;;;;b2t typing
;;; Fact-ids: Name Prims.b2t; Namespace Prims
(assert (! 
;; def=Prims.fst(180,5-180,8); use=Prims.fst(180,5-180,8)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.bool)
(HasType (Prims.b2t @x0)
Tm_type))
 

:pattern ((Prims.b2t @x0))
:qid b2t_typing))

:named b2t_typing))
;;;;;;;;;;;;;;;;b2t def
;;; Fact-ids: Name Prims.b2t; Namespace Prims
(assert (! 
;; def=Prims.fst(180,5-180,8); use=Prims.fst(180,5-180,8)
(forall ((@x0 Term))
 (! (= (Valid (Prims.b2t @x0))
(BoxBool_proj_0 @x0))
 

:pattern ((Prims.b2t @x0))
:qid b2t_def))

:named b2t_def))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.fits_t; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(5,17-5,28); use=Pulse.Class.BoundedIntegers.fst(5,17-5,28)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_3a9c22ddc54716caa0276c05e792d97e)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_3a9c22ddc54716caa0276c05e792d97e))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_3a9c22ddc54716caa0276c05e792d97e))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_3a9c22ddc54716caa0276c05e792d97e))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_3a9c22ddc54716caa0276c05e792d97e
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.fits_t; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(5,17-5,28); use=Pulse.Class.BoundedIntegers.fst(5,17-5,28)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_3a9c22ddc54716caa0276c05e792d97e)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(5,17-5,28); use=Pulse.Class.BoundedIntegers.fst(5,17-5,28)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.int)
(HasType (ApplyTT @x0
@x1)
Prims.prop))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_3a9c22ddc54716caa0276c05e792d97e.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_3a9c22ddc54716caa0276c05e792d97e))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_3a9c22ddc54716caa0276c05e792d97e))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_3a9c22ddc54716caa0276c05e792d97e))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! 
;; def=Prims.fst(96,5-96,9); use=Prims.fst(96,5-96,9)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.unit)
(= Prims.unit
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.unit))
:qid Prims_pretyping_f8666440faa91836cc5a13998af863fc))

:named Prims_pretyping_f8666440faa91836cc5a13998af863fc))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! 
;; def=Prims.fst(80,5-80,9); use=Prims.fst(80,5-80,9)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.bool)
(= Prims.bool
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.bool))
:qid Prims_pretyping_f537159ed795b314b4e58c260361ae86))

:named Prims_pretyping_f537159ed795b314b4e58c260361ae86))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u1
@x0
(Prims.pair @x2
@x3))
(= (Prims.pair @x2
@x3)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(Prims.pair @x2
@x3)))
:qid Prims_pretyping_b7882067459c08225ce8e64864e7b31f))

:named Prims_pretyping_b7882067459c08225ce8e64864e7b31f))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! 
;; def=Prims.fst(514,5-514,8); use=Prims.fst(514,5-514,8)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.int)
(= Prims.int
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.int))
:qid Prims_pretyping_ae567c2fb75be05905677af440075565))

:named Prims_pretyping_ae567c2fb75be05905677af440075565))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.eqtype_as_type; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(1212,29-1212,43); use=FStar.Pervasives.fsti(1212,29-1212,43)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_7e9afc6da5407011473323ad80ff51bf)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_7e9afc6da5407011473323ad80ff51bf))
:qid FStar.Pervasives_pre_typing_Tm_arrow_7e9afc6da5407011473323ad80ff51bf))

:named FStar.Pervasives_pre_typing_Tm_arrow_7e9afc6da5407011473323ad80ff51bf))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_7e9afc6da5407011473323ad80ff51bf
;;; Fact-ids: Name FStar.Pervasives.eqtype_as_type; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(1212,29-1212,43); use=FStar.Pervasives.fsti(1212,29-1212,43)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_7e9afc6da5407011473323ad80ff51bf)
(and 
;; def=FStar.Pervasives.fsti(1212,29-1212,43); use=FStar.Pervasives.fsti(1212,29-1212,43)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.eqtype)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid FStar.Pervasives_interpretation_Tm_arrow_7e9afc6da5407011473323ad80ff51bf.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_7e9afc6da5407011473323ad80ff51bf))
:qid FStar.Pervasives_interpretation_Tm_arrow_7e9afc6da5407011473323ad80ff51bf))

:named FStar.Pervasives_interpretation_Tm_arrow_7e9afc6da5407011473323ad80ff51bf))
(push) ;; push{3

; Starting query at Pulse.Class.BoundedIntegers.fst(7,0-21,1)

(declare-fun Pulse.Class.BoundedIntegers.bounded_int (Term) Term)

(declare-fun Pulse.Class.BoundedIntegers.bounded_int@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,6-7,17)
(forall ((@x0 Term))
 (! (= (ApplyTT Pulse.Class.BoundedIntegers.bounded_int@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_int @x0))
 

:pattern ((ApplyTT Pulse.Class.BoundedIntegers.bounded_int@tok
@x0))
:qid token_correspondence_Pulse.Class.BoundedIntegers.bounded_int))

:named token_correspondence_Pulse.Class.BoundedIntegers.bounded_int))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,6-7,17)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType Pulse.Class.BoundedIntegers.bounded_int@tok
Tm_arrow_7e9afc6da5407011473323ad80ff51bf))

;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,6-7,17)
(forall ((@x1 Term))
 (! (= (ApplyTT Pulse.Class.BoundedIntegers.bounded_int@tok
@x1)
(Pulse.Class.BoundedIntegers.bounded_int @x1))
 

:pattern ((Pulse.Class.BoundedIntegers.bounded_int @x1))
:qid function_token_typing_Pulse.Class.BoundedIntegers.bounded_int.1))
)
 

:pattern ((ApplyTT @x0
Pulse.Class.BoundedIntegers.bounded_int@tok))
:qid function_token_typing_Pulse.Class.BoundedIntegers.bounded_int))

:named function_token_typing_Pulse.Class.BoundedIntegers.bounded_int))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,6-7,17)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.eqtype)
(HasType (Pulse.Class.BoundedIntegers.bounded_int @x0)
Tm_type))
 

:pattern ((Pulse.Class.BoundedIntegers.bounded_int @x0))
:qid typing_Pulse.Class.BoundedIntegers.bounded_int))

:named typing_Pulse.Class.BoundedIntegers.bounded_int))
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

;;;;;;;;;;;;;;;;_: t -> Prims.GTot Prims.int
(declare-fun Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b (Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-9,21); use=Pulse.Class.BoundedIntegers.fst(9,8-9,21)
(forall ((@x0 Term))
 (! (HasType (Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b @x0)
Tm_type)
 

:pattern ((HasType (Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b @x0)
Tm_type))
:qid kinding_Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b))

:named kinding_Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-9,21); use=Pulse.Class.BoundedIntegers.fst(9,8-9,21)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b @x2)))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-9,21); use=Pulse.Class.BoundedIntegers.fst(9,8-9,21)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b @x1))

;; def=Pulse.Class.BoundedIntegers.fst(7,19-9,21); use=Pulse.Class.BoundedIntegers.fst(9,8-9,21)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x1)
(HasType (ApplyTT @x0
@x2)
Prims.int))
 

:pattern ((ApplyTT @x0
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b.1))
)
 

:pattern ((HasTypeZ @x0
(Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b @x1)))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b))
;;;;;;;;;;;;;;;;_: fits_t fits -> Prims.GTot t
(declare-fun Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced (Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-10,19); use=Pulse.Class.BoundedIntegers.fst(10,8-10,29)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced @x0
@x1)
Tm_type))
:qid kinding_Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced))

:named kinding_Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-10,19); use=Pulse.Class.BoundedIntegers.fst(10,8-10,29)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced @x2
@x3)))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-10,19); use=Pulse.Class.BoundedIntegers.fst(10,8-10,29)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced @x1
@x2))

;; def=Pulse.Class.BoundedIntegers.fst(7,19-10,19); use=Pulse.Class.BoundedIntegers.fst(10,8-10,29)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Pulse.Class.BoundedIntegers.fits_t @x2))
(HasType (ApplyTT @x0
@x3)
@x1))
 

:pattern ((ApplyTT @x0
@x3))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced.1))
)
 

:pattern ((HasTypeZ @x0
(Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced @x1
@x2)))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced))
(declare-fun Tm_refine_cface579e84edab1d51e059d64561695 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(11,32-11,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_cface579e84edab1d51e059d64561695 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_cface579e84edab1d51e059d64561695 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_cface579e84edab1d51e059d64561695))

:named refinement_kinding_Tm_refine_cface579e84edab1d51e059d64561695))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(11,32-11,33)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_cface579e84edab1d51e059d64561695 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=Pulse.Class.BoundedIntegers.fst(11,80-11,96); use=Pulse.Class.BoundedIntegers.fst(11,80-11,96)
(= (ApplyTT @x3
@x1)
(Prims.op_Addition (ApplyTT @x3
@x4)
(ApplyTT @x3
@x5)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_cface579e84edab1d51e059d64561695 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_cface579e84edab1d51e059d64561695))

:named refinement_interpretation_Tm_refine_cface579e84edab1d51e059d64561695))
;;;;;;;;;;;;;;;;haseq for Tm_refine_cface579e84edab1d51e059d64561695
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(11,32-11,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_cface579e84edab1d51e059d64561695 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_cface579e84edab1d51e059d64561695 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_cface579e84edab1d51e059d64561695))

:named haseqTm_refine_cface579e84edab1d51e059d64561695))
;;;;;;;;;;;;;;;;x: t -> y: t -> Prims.Pure t
(declare-fun Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6 (Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(11,15-11,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6 @x0
@x1
@x2)
Tm_type))
:qid kinding_Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6))

:named kinding_Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(11,15-11,33)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6 @x2
@x3
@x4))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6 @x2
@x3
@x4)))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(11,15-11,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6 @x1
@x2
@x3))
(and 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(11,15-11,33)
(forall ((@x4 Term) (@x5 Term))
 (! (implies (and 
;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(11,44-11,60)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(11,44-11,60)
(ApplyTT @x3
(Prims.op_Addition (ApplyTT @x2
@x4)
(ApplyTT @x2
@x5)))
)

(HasType @x4
@x1)
(HasType @x5
@x1))
(HasType (ApplyTT (ApplyTT @x0
@x4)
@x5)
(Tm_refine_cface579e84edab1d51e059d64561695 @x1
@x2
@x4
@x5)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x4)
@x5))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6.1))

(IsTotFun @x0)

;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(11,15-11,33)
(forall ((@x4 Term))
 (! (implies (HasType @x4
@x1)
(IsTotFun (ApplyTT @x0
@x4)))
 

:pattern ((ApplyTT @x0
@x4))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6.2))
))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6 @x1
@x2
@x3)))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6))
(declare-fun Tm_refine_55c811e0087f59b5e8e300fbcbbb9dbc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(12,41-12,42)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_55c811e0087f59b5e8e300fbcbbb9dbc @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_55c811e0087f59b5e8e300fbcbbb9dbc @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_55c811e0087f59b5e8e300fbcbbb9dbc))

:named refinement_kinding_Tm_refine_55c811e0087f59b5e8e300fbcbbb9dbc))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(12,41-12,42)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_55c811e0087f59b5e8e300fbcbbb9dbc @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=Pulse.Class.BoundedIntegers.fst(12,89-12,105); use=Pulse.Class.BoundedIntegers.fst(12,89-12,105)
(= (ApplyTT @x3
@x1)
(Prims.op_Subtraction (ApplyTT @x3
@x4)
(ApplyTT @x3
@x5)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_55c811e0087f59b5e8e300fbcbbb9dbc @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_55c811e0087f59b5e8e300fbcbbb9dbc))

:named refinement_interpretation_Tm_refine_55c811e0087f59b5e8e300fbcbbb9dbc))
;;;;;;;;;;;;;;;;haseq for Tm_refine_55c811e0087f59b5e8e300fbcbbb9dbc
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(12,41-12,42)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_55c811e0087f59b5e8e300fbcbbb9dbc @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_55c811e0087f59b5e8e300fbcbbb9dbc @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_55c811e0087f59b5e8e300fbcbbb9dbc))

:named haseqTm_refine_55c811e0087f59b5e8e300fbcbbb9dbc))
;;;;;;;;;;;;;;;;x: t -> y: t -> Prims.Pure t
(declare-fun Tm_arrow_2577039e9f1dfe1304fb604a23098ae5 (Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_2577039e9f1dfe1304fb604a23098ae5
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(12,24-12,42)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_arrow_2577039e9f1dfe1304fb604a23098ae5 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_arrow_2577039e9f1dfe1304fb604a23098ae5 @x0
@x1
@x2)
Tm_type))
:qid kinding_Tm_arrow_2577039e9f1dfe1304fb604a23098ae5))

:named kinding_Tm_arrow_2577039e9f1dfe1304fb604a23098ae5))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(12,24-12,42)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_2577039e9f1dfe1304fb604a23098ae5 @x2
@x3
@x4))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_2577039e9f1dfe1304fb604a23098ae5 @x2
@x3
@x4)))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_2577039e9f1dfe1304fb604a23098ae5))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_2577039e9f1dfe1304fb604a23098ae5))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_2577039e9f1dfe1304fb604a23098ae5
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(12,24-12,42)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_2577039e9f1dfe1304fb604a23098ae5 @x1
@x2
@x3))
(and 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(12,24-12,42)
(forall ((@x4 Term) (@x5 Term))
 (! (implies (and 
;; def=Pulse.Class.BoundedIntegers.fst(12,53-12,69); use=Pulse.Class.BoundedIntegers.fst(12,53-12,69)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(12,53-12,69); use=Pulse.Class.BoundedIntegers.fst(12,53-12,69)
(ApplyTT @x3
(Prims.op_Subtraction (ApplyTT @x2
@x4)
(ApplyTT @x2
@x5)))
)

(HasType @x4
@x1)
(HasType @x5
@x1))
(HasType (ApplyTT (ApplyTT @x0
@x4)
@x5)
(Tm_refine_55c811e0087f59b5e8e300fbcbbb9dbc @x1
@x2
@x4
@x5)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x4)
@x5))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_2577039e9f1dfe1304fb604a23098ae5.1))

(IsTotFun @x0)

;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(12,24-12,42)
(forall ((@x4 Term))
 (! (implies (HasType @x4
@x1)
(IsTotFun (ApplyTT @x0
@x4)))
 

:pattern ((ApplyTT @x0
@x4))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_2577039e9f1dfe1304fb604a23098ae5.2))
))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_2577039e9f1dfe1304fb604a23098ae5 @x1
@x2
@x3)))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_2577039e9f1dfe1304fb604a23098ae5))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_2577039e9f1dfe1304fb604a23098ae5))
(declare-fun Tm_refine_2cdd0b779b7e65376ec1ec73cce4cdb4 (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(13,27-13,52); use=Pulse.Class.BoundedIntegers.fst(13,27-13,52)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_2cdd0b779b7e65376ec1ec73cce4cdb4 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_2cdd0b779b7e65376ec1ec73cce4cdb4 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_2cdd0b779b7e65376ec1ec73cce4cdb4))

:named refinement_kinding_Tm_refine_2cdd0b779b7e65376ec1ec73cce4cdb4))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(13,27-13,52); use=Pulse.Class.BoundedIntegers.fst(13,27-13,52)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_2cdd0b779b7e65376ec1ec73cce4cdb4 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.bool)

;; def=Pulse.Class.BoundedIntegers.fst(13,36-13,51); use=Pulse.Class.BoundedIntegers.fst(13,36-13,51)
(= @x1
(Prims.op_LessThan (ApplyTT @x2
@x3)
(ApplyTT @x2
@x4)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_2cdd0b779b7e65376ec1ec73cce4cdb4 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_2cdd0b779b7e65376ec1ec73cce4cdb4))

:named refinement_interpretation_Tm_refine_2cdd0b779b7e65376ec1ec73cce4cdb4))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2cdd0b779b7e65376ec1ec73cce4cdb4
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(13,27-13,52); use=Pulse.Class.BoundedIntegers.fst(13,27-13,52)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_2cdd0b779b7e65376ec1ec73cce4cdb4 @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.bool)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_2cdd0b779b7e65376ec1ec73cce4cdb4 @x0
@x1
@x2))))
:qid haseqTm_refine_2cdd0b779b7e65376ec1ec73cce4cdb4))

:named haseqTm_refine_2cdd0b779b7e65376ec1ec73cce4cdb4))
;;;;;;;;;;;;;;;;x: t -> y: t -> b: Prims.bool{b = (v x < v y)}
(declare-fun Tm_arrow_4e9e5a602a12a0a4955a27552da74126 (Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_4e9e5a602a12a0a4955a27552da74126
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-13,52); use=Pulse.Class.BoundedIntegers.fst(13,15-13,52)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_4e9e5a602a12a0a4955a27552da74126 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_4e9e5a602a12a0a4955a27552da74126 @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_4e9e5a602a12a0a4955a27552da74126))

:named kinding_Tm_arrow_4e9e5a602a12a0a4955a27552da74126))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-13,52); use=Pulse.Class.BoundedIntegers.fst(13,15-13,52)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_4e9e5a602a12a0a4955a27552da74126 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_4e9e5a602a12a0a4955a27552da74126 @x2
@x3)))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_4e9e5a602a12a0a4955a27552da74126))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_4e9e5a602a12a0a4955a27552da74126))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_4e9e5a602a12a0a4955a27552da74126
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-13,52); use=Pulse.Class.BoundedIntegers.fst(13,15-13,52)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_4e9e5a602a12a0a4955a27552da74126 @x1
@x2))
(and 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-13,52); use=Pulse.Class.BoundedIntegers.fst(13,15-13,52)
(forall ((@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x3
@x2)
(HasType @x4
@x2))
(HasType (ApplyTT (ApplyTT @x0
@x3)
@x4)
(Tm_refine_2cdd0b779b7e65376ec1ec73cce4cdb4 @x1
@x3
@x4)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x3)
@x4))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_4e9e5a602a12a0a4955a27552da74126.1))

(IsTotFun @x0)

;; def=Pulse.Class.BoundedIntegers.fst(7,19-13,52); use=Pulse.Class.BoundedIntegers.fst(13,15-13,52)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)
(IsTotFun (ApplyTT @x0
@x3)))
 

:pattern ((ApplyTT @x0
@x3))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_4e9e5a602a12a0a4955a27552da74126.2))
))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_4e9e5a602a12a0a4955a27552da74126 @x1
@x2)))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_4e9e5a602a12a0a4955a27552da74126))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_4e9e5a602a12a0a4955a27552da74126))
(declare-fun Tm_refine_55034eb0b7285efc4cb3be441d0a887c (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,28-14,54); use=Pulse.Class.BoundedIntegers.fst(14,28-14,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_55034eb0b7285efc4cb3be441d0a887c @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_55034eb0b7285efc4cb3be441d0a887c @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_55034eb0b7285efc4cb3be441d0a887c))

:named refinement_kinding_Tm_refine_55034eb0b7285efc4cb3be441d0a887c))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,28-14,54); use=Pulse.Class.BoundedIntegers.fst(14,28-14,54)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_55034eb0b7285efc4cb3be441d0a887c @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.bool)

;; def=Pulse.Class.BoundedIntegers.fst(14,37-14,53); use=Pulse.Class.BoundedIntegers.fst(14,37-14,53)
(= @x1
(Prims.op_LessThanOrEqual (ApplyTT @x2
@x3)
(ApplyTT @x2
@x4)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_55034eb0b7285efc4cb3be441d0a887c @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_55034eb0b7285efc4cb3be441d0a887c))

:named refinement_interpretation_Tm_refine_55034eb0b7285efc4cb3be441d0a887c))
;;;;;;;;;;;;;;;;haseq for Tm_refine_55034eb0b7285efc4cb3be441d0a887c
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,28-14,54); use=Pulse.Class.BoundedIntegers.fst(14,28-14,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_55034eb0b7285efc4cb3be441d0a887c @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.bool)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_55034eb0b7285efc4cb3be441d0a887c @x0
@x1
@x2))))
:qid haseqTm_refine_55034eb0b7285efc4cb3be441d0a887c))

:named haseqTm_refine_55034eb0b7285efc4cb3be441d0a887c))
;;;;;;;;;;;;;;;;x: t -> y: t -> b: Prims.bool{b = (v x <= v y)}
(declare-fun Tm_arrow_635d2d314f62d2a47af45bf39ae8a382 (Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_635d2d314f62d2a47af45bf39ae8a382
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-14,54); use=Pulse.Class.BoundedIntegers.fst(14,16-14,54)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_635d2d314f62d2a47af45bf39ae8a382 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_635d2d314f62d2a47af45bf39ae8a382 @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_635d2d314f62d2a47af45bf39ae8a382))

:named kinding_Tm_arrow_635d2d314f62d2a47af45bf39ae8a382))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-14,54); use=Pulse.Class.BoundedIntegers.fst(14,16-14,54)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_635d2d314f62d2a47af45bf39ae8a382 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_635d2d314f62d2a47af45bf39ae8a382 @x2
@x3)))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_635d2d314f62d2a47af45bf39ae8a382))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_635d2d314f62d2a47af45bf39ae8a382))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_635d2d314f62d2a47af45bf39ae8a382
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-14,54); use=Pulse.Class.BoundedIntegers.fst(14,16-14,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_635d2d314f62d2a47af45bf39ae8a382 @x1
@x2))
(and 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-14,54); use=Pulse.Class.BoundedIntegers.fst(14,16-14,54)
(forall ((@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x3
@x2)
(HasType @x4
@x2))
(HasType (ApplyTT (ApplyTT @x0
@x3)
@x4)
(Tm_refine_55034eb0b7285efc4cb3be441d0a887c @x1
@x3
@x4)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x3)
@x4))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_635d2d314f62d2a47af45bf39ae8a382.1))

(IsTotFun @x0)

;; def=Pulse.Class.BoundedIntegers.fst(7,19-14,54); use=Pulse.Class.BoundedIntegers.fst(14,16-14,54)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)
(IsTotFun (ApplyTT @x0
@x3)))
 

:pattern ((ApplyTT @x0
@x3))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_635d2d314f62d2a47af45bf39ae8a382.2))
))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_635d2d314f62d2a47af45bf39ae8a382 @x1
@x2)))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_635d2d314f62d2a47af45bf39ae8a382))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_635d2d314f62d2a47af45bf39ae8a382))
(declare-fun Tm_refine_a294b8994119cf8a575f0a71df6575a3 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Pulse.Class.BoundedIntegers.fst(15,15-15,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_a294b8994119cf8a575f0a71df6575a3 @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_a294b8994119cf8a575f0a71df6575a3 @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_a294b8994119cf8a575f0a71df6575a3))

:named refinement_kinding_Tm_refine_a294b8994119cf8a575f0a71df6575a3))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Pulse.Class.BoundedIntegers.fst(15,15-15,33)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_a294b8994119cf8a575f0a71df6575a3 @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Pulse.Class.BoundedIntegers.fst(15,27-15,31)
(> (BoxInt_proj_0 (ApplyTT @x3
@x4))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Pulse.Class.BoundedIntegers.fst(15,55-15,71); use=Pulse.Class.BoundedIntegers.fst(15,27-15,31)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(15,55-15,71); use=Pulse.Class.BoundedIntegers.fst(15,27-15,31)
(ApplyTT @x5
(Prims.op_Modulus (ApplyTT @x3
@x6)
(ApplyTT @x3
@x4)))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_a294b8994119cf8a575f0a71df6575a3 @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_a294b8994119cf8a575f0a71df6575a3))

:named refinement_interpretation_Tm_refine_a294b8994119cf8a575f0a71df6575a3))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a294b8994119cf8a575f0a71df6575a3
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Pulse.Class.BoundedIntegers.fst(15,15-15,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_a294b8994119cf8a575f0a71df6575a3 @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_a294b8994119cf8a575f0a71df6575a3 @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_a294b8994119cf8a575f0a71df6575a3))

:named haseqTm_refine_a294b8994119cf8a575f0a71df6575a3))

; Encoding query formula : forall (t: Prims.eqtype)
;   (fits: (_: Prims.int -> Prims.prop))
;   (v: (_: t -> Prims.GTot Prims.int))
;   (u1692: (_: Pulse.Class.BoundedIntegers.fits_t fits -> Prims.GTot t))
;   (op_Plus: (x: t -> y: t -> Prims.Pure t))
;   (op_Subtraction: (x: t -> y: t -> Prims.Pure t))
;   (op_Less: (x: t -> y: t -> b: Prims.bool{b = (v x < v y)}))
;   (op_Less_Equals: (x: t -> y: t -> b: Prims.bool{b = (v x <= v y)})).
;   (*  - Subtyping check failed
;   - Expected type Type0 got type Type0
; *)
;   forall (x: t) (y: t).
;     (v y > 0 ==>
;       (forall (any_result: Prims.int).
;           v x == any_result ==> (forall (any_result: Prims.int). v y == any_result ==> v y <> 0))) /\
;     (forall (any_result: Prims.logical).
;         (v y > 0) /\ fits (v x % v y) == any_result ==>
;         (forall (_: t).
;             v y > 0 ==>
;             (forall (any_result: Prims.int).
;                 v x == any_result ==>
;                 (forall (any_result: Prims.int). v y == any_result ==> v y <> 0))) /\
;         (forall (z: _: t{v y > 0 /\ fits (v x % v y)}).
;             (*  - Could not prove post-condition
; *)
;             forall (any_result: Prims.int).
;               v z == any_result ==>
;               (forall (any_result: Prims.int).
;                   v x == any_result ==>
;                   (forall (any_result: Prims.int). v y == any_result ==> v y <> 0))))


; Context: While encoding a query
; While typechecking the top-level declaration `type Pulse.Class.BoundedIntegers.bounded_int`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_arrow_3a9c22ddc54716caa0276c05e792d97e)
(HasType @x2
(Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b @x0))
(HasType @x3
(Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced @x0
@x1))
(HasType @x4
(Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6 @x0
@x2
@x1))
(HasType @x5
(Tm_arrow_2577039e9f1dfe1304fb604a23098ae5 @x0
@x2
@x1))
(HasType @x6
(Tm_arrow_4e9e5a602a12a0a4955a27552da74126 @x2
@x0))
(HasType @x7
(Tm_arrow_635d2d314f62d2a47af45bf39ae8a382 @x2
@x0)))

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,0-21,1)
(forall ((@x8 Term) (@x9 Term))
 (! (implies (and (HasType @x8
@x0)
(HasType @x9
@x0))

;; def=Prims.fst(459,77-459,89); use=Pulse.Class.BoundedIntegers.fst(15,15-15,33)
(and (implies 
;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Pulse.Class.BoundedIntegers.fst(15,15-15,33)
(> (BoxInt_proj_0 (ApplyTT @x2
@x9))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,15-15,33)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.int)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,15-15,33)
(= (ApplyTT @x2
@x8)
@x10)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,15-15,33)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.int)

;; def=Prims.fst(697,23-697,30); use=Pulse.Class.BoundedIntegers.fst(15,15-15,33)
(= (ApplyTT @x2
@x9)
@x11)
)

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(15,67-15,70)
(or label_1

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(15,15-15,33)
(not (= (ApplyTT @x2
@x9)
(BoxInt 0)))
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,15-15,33)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.logical)

;; def=Prims.fst(439,23-439,26); use=Pulse.Class.BoundedIntegers.fst(15,15-15,33)
(= (Prims.l_and (Prims.b2t (Prims.op_GreaterThan (ApplyTT @x2
@x9)
(BoxInt 0)))
(ApplyTT @x1
(Prims.op_Modulus (ApplyTT @x2
@x8)
(ApplyTT @x2
@x9))))
@x10)
)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,15-15,33)
(and 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,15-15,33)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
@x0)

;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Pulse.Class.BoundedIntegers.fst(15,15-15,33)
(> (BoxInt_proj_0 (ApplyTT @x2
@x9))
(BoxInt_proj_0 (BoxInt 0)))
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,15-15,33)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.int)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,15-15,33)
(= (ApplyTT @x2
@x8)
@x12)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,15-15,33)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
Prims.int)

;; def=Prims.fst(697,23-697,30); use=Pulse.Class.BoundedIntegers.fst(15,15-15,33)
(= (ApplyTT @x2
@x9)
@x13)
)

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(15,27-15,31)
(or label_2

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(15,15-15,33)
(not (= (ApplyTT @x2
@x9)
(BoxInt 0)))
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))


;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,15-15,33)
(forall ((@x11 Term))
 (! (implies (HasType @x11
(Tm_refine_a294b8994119cf8a575f0a71df6575a3 @x0
@x2
@x9
@x1
@x8))

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,15-15,33)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.int)

;; def=Prims.fst(175,35-175,36); use=Pulse.Class.BoundedIntegers.fst(15,15-15,33)
(= (ApplyTT @x2
@x11)
@x12)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,15-15,33)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
Prims.int)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,15-15,33)
(= (ApplyTT @x2
@x8)
@x13)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,15-15,33)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
Prims.int)

;; def=Prims.fst(697,23-697,30); use=Pulse.Class.BoundedIntegers.fst(15,15-15,33)
(= (ApplyTT @x2
@x9)
@x14)
)

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(15,104-15,107)
(or label_3

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(15,15-15,33)
(not (= (ApplyTT @x2
@x9)
(BoxInt 0)))
)
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Pulse.Class.BoundedIntegers.bounded_int, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_a294b8994119cf8a575f0a71df6575a3

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 3}pop
(pop) ;; 2}pop

; encoding sigelt type Pulse.Class.BoundedIntegers.bounded_int


; <Start encoding type Pulse.Class.BoundedIntegers.bounded_int>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Pulse.Class.BoundedIntegers.bounded_int (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Pulse.Class.BoundedIntegers.bounded_int@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Pulse.Class.BoundedIntegers.Mkbounded_int (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Pulse.Class.BoundedIntegers.Mkbounded_int_t (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Pulse.Class.BoundedIntegers.Mkbounded_int_fits (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Pulse.Class.BoundedIntegers.Mkbounded_int_v (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Pulse.Class.BoundedIntegers.Mkbounded_int_u (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Pulse.Class.BoundedIntegers.Mkbounded_int_op_Plus (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Pulse.Class.BoundedIntegers.Mkbounded_int_op_Subtraction (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Pulse.Class.BoundedIntegers.Mkbounded_int_op_Less (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Pulse.Class.BoundedIntegers.Mkbounded_int_op_Less_Equals (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Pulse.Class.BoundedIntegers.Mkbounded_int_op_Percent (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Pulse.Class.BoundedIntegers.Mkbounded_int_properties (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Pulse.Class.BoundedIntegers.Mkbounded_int
(declare-fun Pulse.Class.BoundedIntegers.Mkbounded_int@tok () Term)

;;;;;;;;;;;;;;;;_: t -> Prims.GTot Prims.int
(declare-fun Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b (Term) Term)
;;;;;;;;;;;;;;;;_: fits_t fits -> Prims.GTot t
(declare-fun Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced (Term Term) Term)
(declare-fun Tm_refine_cface579e84edab1d51e059d64561695 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;x: t -> y: t -> Prims.Pure t
(declare-fun Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6 (Term Term Term) Term)
(declare-fun Tm_refine_55c811e0087f59b5e8e300fbcbbb9dbc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;x: t -> y: t -> Prims.Pure t
(declare-fun Tm_arrow_2577039e9f1dfe1304fb604a23098ae5 (Term Term Term) Term)
(declare-fun Tm_refine_2cdd0b779b7e65376ec1ec73cce4cdb4 (Term Term Term) Term)
;;;;;;;;;;;;;;;;x: t -> y: t -> b: Prims.bool{b = (v x < v y)}
(declare-fun Tm_arrow_4e9e5a602a12a0a4955a27552da74126 (Term Term) Term)
(declare-fun Tm_refine_55034eb0b7285efc4cb3be441d0a887c (Term Term Term) Term)
;;;;;;;;;;;;;;;;x: t -> y: t -> b: Prims.bool{b = (v x <= v y)}
(declare-fun Tm_arrow_635d2d314f62d2a47af45bf39ae8a382 (Term Term) Term)
(declare-fun Tm_refine_2313fefa4022d1e569b84fd19f1ddcdc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;x: t -> y: t -> Prims.Pure t
(declare-fun Tm_arrow_6fd19fbb85c4ddcccfac4c41196f752b (Term Term Term) Term)
(declare-fun Tm_refine_9b6814fd42e45bedf339f7a6d66952ad (Term Term Term) Term)














;;;;;;;;;;;;;;;;fits: (_: Prims.int -> Prims.prop) ->     v: (_: t -> Prims.GTot Prims.int) ->     u2378: (_: fits_t fits -> Prims.GTot t) ->     op_Plus: (x: t -> y: t -> Prims.Pure t) ->     op_Subtraction: (x: t -> y: t -> Prims.Pure t) ->     op_Less: (x: t -> y: t -> b: Prims.bool{b = (v x < v y)}) ->     op_Less_Equals: (x: t -> y: t -> b: Prims.bool{b = (v x <= v y)}) ->     op_Percent: (x: t -> y: t -> Prims.Pure t) ->     [@@@ FStar.Tactics.Typeclasses.no_method]properties:       Prims.squash (forall (x: t). {:pattern v x} fits (v x))   -> bounded_int t
(declare-fun Tm_arrow_c7b9c17106c0183c5d40f9c7b0882c7f () Term)

; <start constructor Pulse.Class.BoundedIntegers.bounded_int>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Pulse.Class.BoundedIntegers.bounded_int ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
134)
(exists ((@x0 Term))
 (! (= __@x0
(Pulse.Class.BoundedIntegers.bounded_int @x0))
 
;;no pats
:qid is-Pulse.Class.BoundedIntegers.bounded_int))))

; </end constructor Pulse.Class.BoundedIntegers.bounded_int>


; <start constructor Pulse.Class.BoundedIntegers.Mkbounded_int>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Pulse.Class.BoundedIntegers.Mkbounded_int ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
163)
(= __@x0
(Pulse.Class.BoundedIntegers.Mkbounded_int (Pulse.Class.BoundedIntegers.Mkbounded_int_t __@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int_fits __@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int_v __@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int_u __@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int_op_Plus __@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int_op_Subtraction __@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int_op_Less __@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int_op_Less_Equals __@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int_op_Percent __@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int_properties __@x0)))))

; </end constructor Pulse.Class.BoundedIntegers.Mkbounded_int>


; </end encoding type Pulse.Class.BoundedIntegers.bounded_int>


; encoding sigelt val Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits


; <Start encoding val Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits>

(declare-fun Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits (Term Term) Term)

;;;;;;;;;;;;;;;;projectee: bounded_int t -> _: Prims.int -> Prims.prop
(declare-fun Tm_arrow_f8bbfc6262761df269444e7163a237f0 () Term)
(declare-fun Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok () Term)


; </end encoding val Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits>


; encoding sigelt let __proj__Mkbounded_int__item__fits


; <Skipped let __proj__Mkbounded_int__item__fits/>


; encoding sigelt val Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v


; <Start encoding val Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v>

(declare-fun Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v (Term Term) Term)

;;;;;;;;;;;;;;;;projectee: bounded_int t -> _: t -> Prims.GTot Prims.int
(declare-fun Tm_arrow_6982fcc1f9494d992b4152197a452220 () Term)
(declare-fun Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok () Term)


; </end encoding val Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v>


; encoding sigelt let __proj__Mkbounded_int__item__v


; <Skipped let __proj__Mkbounded_int__item__v/>


; encoding sigelt val Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__u


; <Start encoding val Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__u>

(declare-fun Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__u (Term Term) Term)
;;;;;;;;;;;;;;;;_: fits_t projectee.fits -> Prims.GTot t
(declare-fun Tm_ghost_arrow_9341a32557186a9994e613a1d72015b0 (Term Term) Term)
;;;;;;;;;;;;;;;;projectee: bounded_int t -> _: fits_t projectee.fits -> Prims.GTot t
(declare-fun Tm_arrow_163bc4052c41cf86359e00c9723ece97 () Term)
(declare-fun Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__u@tok () Term)


; </end encoding val Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__u>


; encoding sigelt let __proj__Mkbounded_int__item__u


; <Skipped let __proj__Mkbounded_int__item__u/>


; encoding sigelt val Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Plus


; <Start encoding val Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Plus>

(declare-fun Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Plus (Term Term) Term)


(declare-fun Tm_refine_6dedd225cf3741394cc9aa30ee7b03dc (Term Term Term Term) Term)


;;;;;;;;;;;;;;;;x: t -> y: t -> Prims.Pure t
(declare-fun Tm_arrow_8b1e0318a7ff91f7d75b2cbb67ce6ff3 (Term Term) Term)
;;;;;;;;;;;;;;;;projectee: bounded_int t -> x: t -> y: t -> Prims.Pure t
(declare-fun Tm_arrow_ed998e8c0a38120a062591c3b8818fce () Term)
(declare-fun Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Plus@tok () Term)









; </end encoding val Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Plus>


; encoding sigelt let __proj__Mkbounded_int__item__op_Plus


; <Skipped let __proj__Mkbounded_int__item__op_Plus/>


; encoding sigelt val Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Subtraction


; <Start encoding val Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Subtraction>

(declare-fun Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Subtraction (Term Term) Term)



(declare-fun Tm_refine_bdfaeeb7a763850f1f8b0187dc1c53d5 (Term Term Term Term) Term)



;;;;;;;;;;;;;;;;x: t -> y: t -> Prims.Pure t
(declare-fun Tm_arrow_49ca370e1d50847ad3a2c4ae2cb4a8d0 (Term Term) Term)
;;;;;;;;;;;;;;;;projectee: bounded_int t -> x: t -> y: t -> Prims.Pure t
(declare-fun Tm_arrow_66a37b15f4a3e904e8cc7c03e2af4c81 () Term)
(declare-fun Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Subtraction@tok () Term)









; </end encoding val Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Subtraction>


; encoding sigelt let __proj__Mkbounded_int__item__op_Subtraction


; <Skipped let __proj__Mkbounded_int__item__op_Subtraction/>


; encoding sigelt val Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Less


; <Start encoding val Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Less>

(declare-fun Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Less (Term Term) Term)


(declare-fun Tm_refine_2338f56bb8e624a59dffd87bb6ec6289 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;x: t -> y: t -> b: Prims.bool{b = (projectee.v x < projectee.v y)}
(declare-fun Tm_arrow_26d638b5425dd220cbadd99248d8fbc3 (Term Term) Term)
;;;;;;;;;;;;;;;;projectee: bounded_int t -> x: t -> y: t -> b: Prims.bool{b = (projectee.v x < projectee.v y)}
(declare-fun Tm_arrow_40216159dcef692183a335d5bd39f9b2 () Term)
(declare-fun Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Less@tok () Term)





; </end encoding val Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Less>


; encoding sigelt let __proj__Mkbounded_int__item__op_Less


; <Skipped let __proj__Mkbounded_int__item__op_Less/>


; encoding sigelt val Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Less_Equals


; <Start encoding val Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Less_Equals>

(declare-fun Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Less_Equals (Term Term) Term)


(declare-fun Tm_refine_dfab8e194ee74e7784430917cf0712da (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;x: t -> y: t -> b: Prims.bool{b = (projectee.v x <= projectee.v y)}
(declare-fun Tm_arrow_11f962f1155d5910a8ee633fbbe8c363 (Term Term) Term)
;;;;;;;;;;;;;;;;projectee: bounded_int t -> x: t -> y: t -> b: Prims.bool{b = (projectee.v x <= projectee.v y)}
(declare-fun Tm_arrow_460d7fc271bd6612ab427504c51684ce () Term)
(declare-fun Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Less_Equals@tok () Term)





; </end encoding val Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Less_Equals>


; encoding sigelt let __proj__Mkbounded_int__item__op_Less_Equals


; <Skipped let __proj__Mkbounded_int__item__op_Less_Equals/>

;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.__cache_version_number__; Namespace Prims
(assert (! (HasType Prims.__cache_version_number__
Prims.int)
:named function_token_typing_Prims.__cache_version_number__))
;;;;;;;;;;;;;;;;Range_const typing
;;; Fact-ids: Name FStar.Range.range; Namespace FStar.Range
(assert (! (HasTypeZ (Range_const 1)
FStar.Range.range)
:named typing_range_const))
;;;;;;;;;;;;;;;;Constructor base
;;; Fact-ids: Name FStar.Stubs.Tactics.Common.NotAListLiteral; Namespace FStar.Stubs.Tactics.Common
(assert (! (implies (is-FStar.Stubs.Tactics.Common.NotAListLiteral FStar.Stubs.Tactics.Common.NotAListLiteral)
(= FStar.Stubs.Tactics.Common.NotAListLiteral
FStar.Stubs.Tactics.Common.NotAListLiteral@base))
:named constructor_base_FStar.Stubs.Tactics.Common.NotAListLiteral))
;;;;;;;;;;;;;;;;Constructor base
;;; Fact-ids: Name FStar.Stubs.Tactics.Common.SKIP; Namespace FStar.Stubs.Tactics.Common
(assert (! (implies (is-FStar.Stubs.Tactics.Common.SKIP FStar.Stubs.Tactics.Common.SKIP)
(= FStar.Stubs.Tactics.Common.SKIP
FStar.Stubs.Tactics.Common.SKIP@base))
:named constructor_base_FStar.Stubs.Tactics.Common.SKIP))
;;;;;;;;;;;;;;;;well-founded ordering on nat (alt)
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Prims.int)
(HasTypeFuel @u0
@x2
Prims.int)
(> (BoxInt_proj_0 @x1)
0)
(>= (BoxInt_proj_0 @x2)
0)
(< (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x1)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
@x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.int) (HasTypeFuel @u0
@x2
Prims.int) (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
@x1)))
:qid well-founded-ordering-on-nat))
:named well-founded-ordering-on-nat))
;;;;;;;;;;;;;;;;unit typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Tm_unit
Prims.unit)
:named unit_typing))
;;;;;;;;;;;;;;;;unit inversion
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.unit)
(= @x1
Tm_unit))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.unit))
:qid unit_inversion))
:named unit_inversion))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.fits_t; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(5,4-5,10); use=Pulse.Class.BoundedIntegers.fst(5,4-5,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_arrow_3a9c22ddc54716caa0276c05e792d97e)
(HasType (Pulse.Class.BoundedIntegers.fits_t @x0)
Tm_type))
 

:pattern ((Pulse.Class.BoundedIntegers.fits_t @x0))
:qid typing_Pulse.Class.BoundedIntegers.fits_t))

:named typing_Pulse.Class.BoundedIntegers.fits_t))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(9,4-9,5); use=Pulse.Class.BoundedIntegers.fst(9,4-9,5)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(Pulse.Class.BoundedIntegers.bounded_int @x0)))
(HasType (Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v @x0
@x1)
(Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b @x0)))
 

:pattern ((Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v @x0
@x1))
:qid typing_Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v))

:named typing_Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(8,4-8,8); use=Pulse.Class.BoundedIntegers.fst(8,4-8,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(Pulse.Class.BoundedIntegers.bounded_int @x0)))
(HasType (Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits @x0
@x1)
Tm_arrow_3a9c22ddc54716caa0276c05e792d97e))
 

:pattern ((Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits @x0
@x1))
:qid typing_Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits))

:named typing_Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Prims.unit
Prims.eqtype)
:named typing_Prims.unit))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.subtype_of @x0
@x1)
Prims.logical))
 

:pattern ((Prims.subtype_of @x0
@x1))
:qid typing_Prims.subtype_of))

:named typing_Prims.subtype_of))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,5-117,11); use=Prims.fst(117,5-117,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.squash @x0)
Tm_type))
 

:pattern ((Prims.squash @x0))
:qid typing_Prims.squash))

:named typing_Prims.squash))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Prims.prop
Tm_type)
:named typing_Prims.prop))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (HasType Prims.logical
Tm_type)
:named typing_Prims.logical))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_and; Namespace Prims
(assert (! 
;; def=Prims.fst(188,5-188,10); use=Prims.fst(188,5-188,10)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.logical)
(HasType @x1
Prims.logical))
(HasType (Prims.l_and @x0
@x1)
Prims.logical))
 

:pattern ((Prims.l_and @x0
@x1))
:qid typing_Prims.l_and))

:named typing_Prims.l_and))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (HasType Prims.int
Prims.eqtype)
:named typing_Prims.int))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.hasEq; Namespace Prims
(assert (! 
;; def=Prims.fst(69,5-69,10); use=Prims.fst(69,5-69,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.hasEq @x0)
Tm_type))
 

:pattern ((Prims.hasEq @x0))
:qid typing_Prims.hasEq))

:named typing_Prims.hasEq))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Prims.eqtype
Tm_type)
:named typing_Prims.eqtype))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (HasType Prims.bool
Prims.eqtype)
:named typing_Prims.bool))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,6-7,17)
(forall ((@x0 Term))
 (! (= (ApplyTT Pulse.Class.BoundedIntegers.bounded_int@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_int @x0))
 

:pattern ((ApplyTT Pulse.Class.BoundedIntegers.bounded_int@tok
@x0))

:pattern ((Pulse.Class.BoundedIntegers.bounded_int @x0))
:qid token_correspondence_Pulse.Class.BoundedIntegers.bounded_int@tok))

:named token_correspondence_Pulse.Class.BoundedIntegers.bounded_int@tok))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(9,4-9,5); use=Pulse.Class.BoundedIntegers.fst(9,4-9,5)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1)
(Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1))
:qid token_correspondence_Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v))

:named token_correspondence_Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(8,4-8,8); use=Pulse.Class.BoundedIntegers.fst(8,4-8,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
@x0)
@x1)
(Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
@x0)
@x1))
:qid token_correspondence_Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits))

:named token_correspondence_Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.pair@tok
@x0)
@x1)
(Prims.pair @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.pair@tok
@x0)
@x1))

:pattern ((Prims.pair @x0
@x1))
:qid token_correspondence_Prims.pair@tok))

:named token_correspondence_Prims.pair@tok))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,6-7,17)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
(Pulse.Class.BoundedIntegers.bounded_int @x11))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(Pulse.Class.BoundedIntegers.Mkbounded_int @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(Pulse.Class.BoundedIntegers.Mkbounded_int @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(Pulse.Class.BoundedIntegers.Mkbounded_int @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x5
(Pulse.Class.BoundedIntegers.Mkbounded_int @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x6
(Pulse.Class.BoundedIntegers.Mkbounded_int @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x7
(Pulse.Class.BoundedIntegers.Mkbounded_int @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x8
(Pulse.Class.BoundedIntegers.Mkbounded_int @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x9
(Pulse.Class.BoundedIntegers.Mkbounded_int @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x10
(Pulse.Class.BoundedIntegers.Mkbounded_int @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
(Pulse.Class.BoundedIntegers.bounded_int @x11)))
:qid subterm_ordering_Pulse.Class.BoundedIntegers.Mkbounded_int))

:named subterm_ordering_Pulse.Class.BoundedIntegers.Mkbounded_int))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x5
@x6))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(Prims.Pair @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(Prims.Pair @x1
@x2
@x3
@x4)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x5
@x6)))
:qid subterm_ordering_Prims.Pair))

:named subterm_ordering_Prims.Pair))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (HasType Tm_refine_f1ecc6ab6882a651504f328937700647
Tm_type)
:named refinement_kinding_Tm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! (HasType Tm_refine_da3062322c9bea8d5b2058386775b91a
Tm_type)
:named refinement_kinding_Tm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(11,32-11,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_cface579e84edab1d51e059d64561695 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_cface579e84edab1d51e059d64561695 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_cface579e84edab1d51e059d64561695))

:named refinement_kinding_Tm_refine_cface579e84edab1d51e059d64561695))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Tactics.Types.tracepoint; Namespace FStar.Stubs.Tactics.Types
(assert (! (HasType Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f
Tm_type)
:named refinement_kinding_Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(17,23-19,5); use=Pulse.Class.BoundedIntegers.fst(17,23-19,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_9b6814fd42e45bedf339f7a6d66952ad @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_9b6814fd42e45bedf339f7a6d66952ad @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_9b6814fd42e45bedf339f7a6d66952ad))

:named refinement_kinding_Tm_refine_9b6814fd42e45bedf339f7a6d66952ad))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (HasType Tm_refine_774ba3f728d91ead8ef40be66c9802e5
Tm_type)
:named refinement_kinding_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf
Tm_type)
:named refinement_kinding_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(12,41-12,42)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_55c811e0087f59b5e8e300fbcbbb9dbc @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_55c811e0087f59b5e8e300fbcbbb9dbc @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_55c811e0087f59b5e8e300fbcbbb9dbc))

:named refinement_kinding_Tm_refine_55c811e0087f59b5e8e300fbcbbb9dbc))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,28-14,54); use=Pulse.Class.BoundedIntegers.fst(14,28-14,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_55034eb0b7285efc4cb3be441d0a887c @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_55034eb0b7285efc4cb3be441d0a887c @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_55034eb0b7285efc4cb3be441d0a887c))

:named refinement_kinding_Tm_refine_55034eb0b7285efc4cb3be441d0a887c))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Tm_refine_542f9d4f129664613f2483a6c88bc7c2
Tm_type)
:named refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Tm_refine_414d0a9f578ab0048252f8c8f552b99f
Tm_type)
:named refinement_kinding_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,32-117,42); use=Prims.fst(117,32-117,42)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))

:named refinement_kinding_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(13,27-13,52); use=Pulse.Class.BoundedIntegers.fst(13,27-13,52)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_2cdd0b779b7e65376ec1ec73cce4cdb4 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_2cdd0b779b7e65376ec1ec73cce4cdb4 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_2cdd0b779b7e65376ec1ec73cce4cdb4))

:named refinement_kinding_Tm_refine_2cdd0b779b7e65376ec1ec73cce4cdb4))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.fits_t; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(5,32-5,48); use=Pulse.Class.BoundedIntegers.fst(5,32-5,48)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_2c9509c4fdf356ea8b390762a509ebbb @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_2c9509c4fdf356ea8b390762a509ebbb @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_2c9509c4fdf356ea8b390762a509ebbb))

:named refinement_kinding_Tm_refine_2c9509c4fdf356ea8b390762a509ebbb))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(15,32-15,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_2313fefa4022d1e569b84fd19f1ddcdc @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_2313fefa4022d1e569b84fd19f1ddcdc @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_2313fefa4022d1e569b84fd19f1ddcdc))

:named refinement_kinding_Tm_refine_2313fefa4022d1e569b84fd19f1ddcdc))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (HasType Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f
Tm_type)
:named refinement_kinding_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(772,26-772,42); use=FStar.Pervasives.fsti(772,26-772,42)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_f1ecc6ab6882a651504f328937700647)
false)
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_f1ecc6ab6882a651504f328937700647))
:qid refinement_interpretation_Tm_refine_f1ecc6ab6882a651504f328937700647))

:named refinement_interpretation_Tm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(533,7-533,12); use=FStar.List.Tot.Base.fst(533,7-533,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_da3062322c9bea8d5b2058386775b91a)
(HasTypeFuel @u0
@x1
Tm_type))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_da3062322c9bea8d5b2058386775b91a))
:qid refinement_interpretation_Tm_refine_da3062322c9bea8d5b2058386775b91a))

:named refinement_interpretation_Tm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(11,32-11,33)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_cface579e84edab1d51e059d64561695 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=Pulse.Class.BoundedIntegers.fst(11,80-11,96); use=Pulse.Class.BoundedIntegers.fst(11,80-11,96)
(= (ApplyTT @x3
@x1)
(Prims.op_Addition (ApplyTT @x3
@x4)
(ApplyTT @x3
@x5)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_cface579e84edab1d51e059d64561695 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_cface579e84edab1d51e059d64561695))

:named refinement_interpretation_Tm_refine_cface579e84edab1d51e059d64561695))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Tactics.Types.tracepoint; Namespace FStar.Stubs.Tactics.Types
(assert (! 
;; def=FStar.Stubs.Tactics.Types.fsti(44,31-44,48); use=FStar.Stubs.Tactics.Types.fsti(44,31-44,48)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f)
(and (HasTypeFuel @u0
@x1
Prims.bool)

;; def=FStar.Stubs.Tactics.Types.fsti(44,38-44,47); use=FStar.Stubs.Tactics.Types.fsti(44,38-44,47)
(= @x1
(BoxBool true))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f))
:qid refinement_interpretation_Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f))

:named refinement_interpretation_Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(17,23-19,5); use=Pulse.Class.BoundedIntegers.fst(17,23-19,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_9b6814fd42e45bedf339f7a6d66952ad @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Pulse.Class.BoundedIntegers.fst(17,23-19,5); use=Pulse.Class.BoundedIntegers.fst(17,23-19,5)
(forall ((@x5 Term))
 (! (implies (HasType @x5
@x2)

;; def=Pulse.Class.BoundedIntegers.fst(18,36-18,46); use=Pulse.Class.BoundedIntegers.fst(18,36-18,46)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(18,36-18,46); use=Pulse.Class.BoundedIntegers.fst(18,36-18,46)
(ApplyTT @x3
(ApplyTT @x4
@x5))
)
)
 

:pattern ((ApplyTT @x4
@x5))
:qid refinement_interpretation_Tm_refine_9b6814fd42e45bedf339f7a6d66952ad.1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_9b6814fd42e45bedf339f7a6d66952ad @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_9b6814fd42e45bedf339f7a6d66952ad))

:named refinement_interpretation_Tm_refine_9b6814fd42e45bedf339f7a6d66952ad))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! 
;; def=Prims.fst(683,11-683,24); use=Prims.fst(683,11-683,24)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_774ba3f728d91ead8ef40be66c9802e5)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(683,18-683,23); use=Prims.fst(683,18-683,23)
(> (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
:qid refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))

:named refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! 
;; def=Prims.fst(304,12-304,41); use=Prims.fst(304,12-304,41)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf)
(and (HasTypeFuel @u0
@x1
Tm_type)

;; def=Prims.fst(304,21-304,40); use=Prims.fst(304,21-304,40)
(Valid 
;; def=Prims.fst(304,21-304,40); use=Prims.fst(304,21-304,40)
(Prims.subtype_of @x1
Prims.unit)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
:qid refinement_interpretation_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))

:named refinement_interpretation_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(12,41-12,42)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_55c811e0087f59b5e8e300fbcbbb9dbc @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=Pulse.Class.BoundedIntegers.fst(12,89-12,105); use=Pulse.Class.BoundedIntegers.fst(12,89-12,105)
(= (ApplyTT @x3
@x1)
(Prims.op_Subtraction (ApplyTT @x3
@x4)
(ApplyTT @x3
@x5)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_55c811e0087f59b5e8e300fbcbbb9dbc @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_55c811e0087f59b5e8e300fbcbbb9dbc))

:named refinement_interpretation_Tm_refine_55c811e0087f59b5e8e300fbcbbb9dbc))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,28-14,54); use=Pulse.Class.BoundedIntegers.fst(14,28-14,54)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_55034eb0b7285efc4cb3be441d0a887c @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.bool)

;; def=Pulse.Class.BoundedIntegers.fst(14,37-14,53); use=Pulse.Class.BoundedIntegers.fst(14,37-14,53)
(= @x1
(Prims.op_LessThanOrEqual (ApplyTT @x2
@x3)
(ApplyTT @x2
@x4)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_55034eb0b7285efc4cb3be441d0a887c @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_55034eb0b7285efc4cb3be441d0a887c))

:named refinement_interpretation_Tm_refine_55034eb0b7285efc4cb3be441d0a887c))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! 
;; def=Prims.fst(680,11-680,25); use=Prims.fst(680,11-680,25)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_542f9d4f129664613f2483a6c88bc7c2)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(680,18-680,24); use=Prims.fst(680,18-680,24)
(>= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
:qid refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))

:named refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! 
;; def=Prims.fst(73,14-73,31); use=Prims.fst(73,14-73,31)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_414d0a9f578ab0048252f8c8f552b99f)
(and (HasTypeFuel @u0
@x1
Tm_type)

;; def=Prims.fst(73,23-73,30); use=Prims.fst(73,23-73,30)
(Valid 
;; def=Prims.fst(73,23-73,30); use=Prims.fst(73,23-73,30)
(Prims.hasEq @x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
:qid refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))

:named refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,32-117,42); use=Prims.fst(117,32-117,42)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(117,13-117,14); use=Prims.fst(117,40-117,41)
(Valid 
;; def=Prims.fst(117,13-117,14); use=Prims.fst(117,40-117,41)
@x2
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x2)))
:qid refinement_interpretation_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))

:named refinement_interpretation_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(13,27-13,52); use=Pulse.Class.BoundedIntegers.fst(13,27-13,52)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_2cdd0b779b7e65376ec1ec73cce4cdb4 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.bool)

;; def=Pulse.Class.BoundedIntegers.fst(13,36-13,51); use=Pulse.Class.BoundedIntegers.fst(13,36-13,51)
(= @x1
(Prims.op_LessThan (ApplyTT @x2
@x3)
(ApplyTT @x2
@x4)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_2cdd0b779b7e65376ec1ec73cce4cdb4 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_2cdd0b779b7e65376ec1ec73cce4cdb4))

:named refinement_interpretation_Tm_refine_2cdd0b779b7e65376ec1ec73cce4cdb4))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.fits_t; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(5,32-5,48); use=Pulse.Class.BoundedIntegers.fst(5,32-5,48)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_2c9509c4fdf356ea8b390762a509ebbb @x2))
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Pulse.Class.BoundedIntegers.fst(5,40-5,46); use=Pulse.Class.BoundedIntegers.fst(5,40-5,46)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(5,40-5,46); use=Pulse.Class.BoundedIntegers.fst(5,40-5,46)
(ApplyTT @x2
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_2c9509c4fdf356ea8b390762a509ebbb @x2)))
:qid refinement_interpretation_Tm_refine_2c9509c4fdf356ea8b390762a509ebbb))

:named refinement_interpretation_Tm_refine_2c9509c4fdf356ea8b390762a509ebbb))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(15,32-15,33)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_2313fefa4022d1e569b84fd19f1ddcdc @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=Pulse.Class.BoundedIntegers.fst(15,91-15,107); use=Pulse.Class.BoundedIntegers.fst(15,91-15,107)
(= (ApplyTT @x3
@x1)
(Prims.op_Modulus (ApplyTT @x3
@x4)
(ApplyTT @x3
@x5)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_2313fefa4022d1e569b84fd19f1ddcdc @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_2313fefa4022d1e569b84fd19f1ddcdc))

:named refinement_interpretation_Tm_refine_2313fefa4022d1e569b84fd19f1ddcdc))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! 
;; def=Prims.fst(686,15-686,29); use=Prims.fst(686,15-686,29)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(686,22-686,28); use=Prims.fst(686,22-686,28)
(not (= @x1
(BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
:qid refinement_interpretation_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))

:named refinement_interpretation_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,6-7,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= (Pulse.Class.BoundedIntegers.Mkbounded_int_v (Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
@x2)
 

:pattern ((Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
:qid projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_v))

:named projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_v))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,6-7,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= (Pulse.Class.BoundedIntegers.Mkbounded_int_u (Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
@x3)
 

:pattern ((Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
:qid projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_u))

:named projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_u))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,6-7,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= (Pulse.Class.BoundedIntegers.Mkbounded_int_t (Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
@x0)
 

:pattern ((Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
:qid projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_t))

:named projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_t))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,6-7,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= (Pulse.Class.BoundedIntegers.Mkbounded_int_properties (Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
@x9)
 

:pattern ((Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
:qid projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_properties))

:named projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_properties))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,6-7,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= (Pulse.Class.BoundedIntegers.Mkbounded_int_op_Subtraction (Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
@x5)
 

:pattern ((Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
:qid projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_op_Subtraction))

:named projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_op_Subtraction))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,6-7,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= (Pulse.Class.BoundedIntegers.Mkbounded_int_op_Plus (Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
@x4)
 

:pattern ((Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
:qid projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_op_Plus))

:named projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_op_Plus))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,6-7,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= (Pulse.Class.BoundedIntegers.Mkbounded_int_op_Percent (Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
@x8)
 

:pattern ((Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
:qid projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_op_Percent))

:named projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_op_Percent))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,6-7,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= (Pulse.Class.BoundedIntegers.Mkbounded_int_op_Less_Equals (Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
@x7)
 

:pattern ((Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
:qid projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_op_Less_Equals))

:named projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_op_Less_Equals))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,6-7,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= (Pulse.Class.BoundedIntegers.Mkbounded_int_op_Less (Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
@x6)
 

:pattern ((Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
:qid projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_op_Less))

:named projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_op_Less))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,6-7,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= (Pulse.Class.BoundedIntegers.Mkbounded_int_fits (Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
@x1)
 

:pattern ((Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
:qid projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_fits))

:named projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_fits))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Pair_q (Prims.Pair @x0
@x1
@x2
@x3))
@x1)
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Pair_q))

:named projection_inverse_Prims.Pair_q))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Pair_p (Prims.Pair @x0
@x1
@x2
@x3))
@x0)
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Pair_p))

:named projection_inverse_Prims.Pair_p))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Pair__2 (Prims.Pair @x0
@x1
@x2
@x3))
@x3)
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Pair__2))

:named projection_inverse_Prims.Pair__2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Pair__1 (Prims.Pair @x0
@x1
@x2
@x3))
@x2)
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Pair__1))

:named projection_inverse_Prims.Pair__1))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(9,4-9,5); use=Pulse.Class.BoundedIntegers.fst(9,4-9,5)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v @x0
@x1)
(Pulse.Class.BoundedIntegers.Mkbounded_int_v @x1))
 

:pattern ((Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v @x0
@x1))
:qid proj_equation_Pulse.Class.BoundedIntegers.Mkbounded_int_v))

:named proj_equation_Pulse.Class.BoundedIntegers.Mkbounded_int_v))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(8,4-8,8); use=Pulse.Class.BoundedIntegers.fst(8,4-8,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits @x0
@x1)
(Pulse.Class.BoundedIntegers.Mkbounded_int_fits @x1))
 

:pattern ((Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits @x0
@x1))
:qid proj_equation_Pulse.Class.BoundedIntegers.Mkbounded_int_fits))

:named proj_equation_Pulse.Class.BoundedIntegers.Mkbounded_int_fits))
;;; Fact-ids: Name Prims.op_Subtraction; Namespace Prims
(assert (! 
;; def=Prims.fst(546,4-546,18); use=Prims.fst(546,4-546,18)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_Subtraction @x0
@x1)
(BoxInt (- (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_Subtraction @x0
@x1))
:qid primitive_Prims.op_Subtraction))

:named primitive_Prims.op_Subtraction))
;;; Fact-ids: Name Prims.op_Modulus; Namespace Prims
(assert (! 
;; def=Prims.fst(697,4-697,14); use=Prims.fst(697,4-697,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (not (= (BoxInt_proj_0 @x1)
0))
(= (Prims.op_Modulus @x0
@x1)
(BoxInt (mod (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1)))))
 

:pattern ((Prims.op_Modulus @x0
@x1))
:qid primitive_Prims.op_Modulus))

:named primitive_Prims.op_Modulus))
;;; Fact-ids: Name Prims.op_LessThanOrEqual; Namespace Prims
(assert (! 
;; def=Prims.fst(564,4-564,22); use=Prims.fst(564,4-564,22)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_LessThanOrEqual @x0
@x1)
(BoxBool (<= (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_LessThanOrEqual @x0
@x1))
:qid primitive_Prims.op_LessThanOrEqual))

:named primitive_Prims.op_LessThanOrEqual))
;;; Fact-ids: Name Prims.op_LessThan; Namespace Prims
(assert (! 
;; def=Prims.fst(582,4-582,15); use=Prims.fst(582,4-582,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_LessThan @x0
@x1)
(BoxBool (< (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_LessThan @x0
@x1))
:qid primitive_Prims.op_LessThan))

:named primitive_Prims.op_LessThan))
;;; Fact-ids: Name Prims.op_GreaterThan; Namespace Prims
(assert (! 
;; def=Prims.fst(570,4-570,18); use=Prims.fst(570,4-570,18)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_GreaterThan @x0
@x1)
(BoxBool (> (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_GreaterThan @x0
@x1))
:qid primitive_Prims.op_GreaterThan))

:named primitive_Prims.op_GreaterThan))
;;; Fact-ids: Name Prims.op_Addition; Namespace Prims
(assert (! 
;; def=Prims.fst(552,4-552,15); use=Prims.fst(552,4-552,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_Addition @x0
@x1)
(BoxInt (+ (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_Addition @x0
@x1))
:qid primitive_Prims.op_Addition))

:named primitive_Prims.op_Addition))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! (is-Tm_arrow (PreType Pulse.Class.BoundedIntegers.bounded_int@tok))
:named pre_kinding_Pulse.Class.BoundedIntegers.bounded_int@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! (is-Tm_arrow (PreType Prims.pair@tok))
:named pre_kinding_Prims.pair@tok))
;;;;;;;;;;;;;;;;/\ interpretation
;;; Fact-ids: Name Prims.l_and; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (and (Valid @x0)
(Valid @x1))
(Valid (Prims.l_and @x0
@x1)))
 

:pattern ((Prims.l_and @x0
@x1))
:qid l_and-interp))
:named l_and-interp))
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-10,19); use=Pulse.Class.BoundedIntegers.fst(10,8-10,29)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced @x0
@x1)
Tm_type))
:qid kinding_Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced))

:named kinding_Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced))
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-9,21); use=Pulse.Class.BoundedIntegers.fst(9,8-9,21)
(forall ((@x0 Term))
 (! (HasType (Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b @x0)
Tm_type)
 

:pattern ((HasType (Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b @x0)
Tm_type))
:qid kinding_Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b))

:named kinding_Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_f8bbfc6262761df269444e7163a237f0
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_arrow_f8bbfc6262761df269444e7163a237f0
Tm_type)
:named kinding_Tm_arrow_f8bbfc6262761df269444e7163a237f0))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(11,15-11,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6 @x0
@x1
@x2)
Tm_type))
:qid kinding_Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6))

:named kinding_Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_6fd19fbb85c4ddcccfac4c41196f752b
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(15,15-15,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_arrow_6fd19fbb85c4ddcccfac4c41196f752b @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_arrow_6fd19fbb85c4ddcccfac4c41196f752b @x0
@x1
@x2)
Tm_type))
:qid kinding_Tm_arrow_6fd19fbb85c4ddcccfac4c41196f752b))

:named kinding_Tm_arrow_6fd19fbb85c4ddcccfac4c41196f752b))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_6982fcc1f9494d992b4152197a452220
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_arrow_6982fcc1f9494d992b4152197a452220
Tm_type)
:named kinding_Tm_arrow_6982fcc1f9494d992b4152197a452220))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_635d2d314f62d2a47af45bf39ae8a382
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-14,54); use=Pulse.Class.BoundedIntegers.fst(14,16-14,54)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_635d2d314f62d2a47af45bf39ae8a382 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_635d2d314f62d2a47af45bf39ae8a382 @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_635d2d314f62d2a47af45bf39ae8a382))

:named kinding_Tm_arrow_635d2d314f62d2a47af45bf39ae8a382))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_4e9e5a602a12a0a4955a27552da74126
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-13,52); use=Pulse.Class.BoundedIntegers.fst(13,15-13,52)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_4e9e5a602a12a0a4955a27552da74126 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_4e9e5a602a12a0a4955a27552da74126 @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_4e9e5a602a12a0a4955a27552da74126))

:named kinding_Tm_arrow_4e9e5a602a12a0a4955a27552da74126))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_3a9c22ddc54716caa0276c05e792d97e
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.fits_t; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_arrow_3a9c22ddc54716caa0276c05e792d97e
Tm_type)
:named kinding_Tm_arrow_3a9c22ddc54716caa0276c05e792d97e))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_2577039e9f1dfe1304fb604a23098ae5
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(12,24-12,42)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_arrow_2577039e9f1dfe1304fb604a23098ae5 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_arrow_2577039e9f1dfe1304fb604a23098ae5 @x0
@x1
@x2)
Tm_type))
:qid kinding_Tm_arrow_2577039e9f1dfe1304fb604a23098ae5))

:named kinding_Tm_arrow_2577039e9f1dfe1304fb604a23098ae5))
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! (and (IsTotFun Pulse.Class.BoundedIntegers.bounded_int@tok)

;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,6-7,17)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.eqtype)
(HasType (Pulse.Class.BoundedIntegers.bounded_int @x0)
Tm_type))
 

:pattern ((Pulse.Class.BoundedIntegers.bounded_int @x0))
:qid kinding_Pulse.Class.BoundedIntegers.bounded_int@tok))
)
:named kinding_Pulse.Class.BoundedIntegers.bounded_int@tok))
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! (and (IsTotFun Prims.pair@tok)

;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Prims.pair@tok
@x0))
 

:pattern ((ApplyTT Prims.pair@tok
@x0))
:qid kinding_Prims.pair@tok))


;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.pair @x0
@x1)
Tm_type))
 

:pattern ((Prims.pair @x0
@x1))
:qid kinding_Prims.pair@tok.1))
)
:named kinding_Prims.pair@tok))
;;;;;;;;;;;;;;;;int typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Int))
 (! (HasType (BoxInt @u0)
Prims.int)
 

:pattern ((BoxInt @u0))
:qid int_typing))
:named int_typing))
;;;;;;;;;;;;;;;;int inversion
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.int)
(is-BoxInt @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.int))
:qid int_inversion))
:named int_inversion))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f1ecc6ab6882a651504f328937700647
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (iff (Valid (Prims.hasEq Tm_refine_f1ecc6ab6882a651504f328937700647))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;haseq for Tm_refine_da3062322c9bea8d5b2058386775b91a
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! (iff (Valid (Prims.hasEq Tm_refine_da3062322c9bea8d5b2058386775b91a))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_cface579e84edab1d51e059d64561695
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(11,32-11,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_cface579e84edab1d51e059d64561695 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_cface579e84edab1d51e059d64561695 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_cface579e84edab1d51e059d64561695))

:named haseqTm_refine_cface579e84edab1d51e059d64561695))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f
;;; Fact-ids: Name FStar.Stubs.Tactics.Types.tracepoint; Namespace FStar.Stubs.Tactics.Types
(assert (! (iff (Valid (Prims.hasEq Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f))
(Valid (Prims.hasEq Prims.bool)))
:named haseqTm_refine_b8e45d9d9da45ba5c9bad7262617aa9f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_9b6814fd42e45bedf339f7a6d66952ad
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(17,23-19,5); use=Pulse.Class.BoundedIntegers.fst(17,23-19,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_9b6814fd42e45bedf339f7a6d66952ad @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_9b6814fd42e45bedf339f7a6d66952ad @x0
@x1
@x2))))
:qid haseqTm_refine_9b6814fd42e45bedf339f7a6d66952ad))

:named haseqTm_refine_9b6814fd42e45bedf339f7a6d66952ad))
;;;;;;;;;;;;;;;;haseq for Tm_refine_774ba3f728d91ead8ef40be66c9802e5
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;haseq for Tm_refine_55c811e0087f59b5e8e300fbcbbb9dbc
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(12,41-12,42)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_55c811e0087f59b5e8e300fbcbbb9dbc @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_55c811e0087f59b5e8e300fbcbbb9dbc @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_55c811e0087f59b5e8e300fbcbbb9dbc))

:named haseqTm_refine_55c811e0087f59b5e8e300fbcbbb9dbc))
;;;;;;;;;;;;;;;;haseq for Tm_refine_55034eb0b7285efc4cb3be441d0a887c
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,28-14,54); use=Pulse.Class.BoundedIntegers.fst(14,28-14,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_55034eb0b7285efc4cb3be441d0a887c @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.bool)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_55034eb0b7285efc4cb3be441d0a887c @x0
@x1
@x2))))
:qid haseqTm_refine_55034eb0b7285efc4cb3be441d0a887c))

:named haseqTm_refine_55034eb0b7285efc4cb3be441d0a887c))
;;;;;;;;;;;;;;;;haseq for Tm_refine_542f9d4f129664613f2483a6c88bc7c2
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;haseq for Tm_refine_414d0a9f578ab0048252f8c8f552b99f
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2de20c066034c13bf76e9c0b94f4806c
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,32-117,42); use=Prims.fst(117,32-117,42)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0))))
:qid haseqTm_refine_2de20c066034c13bf76e9c0b94f4806c))

:named haseqTm_refine_2de20c066034c13bf76e9c0b94f4806c))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2cdd0b779b7e65376ec1ec73cce4cdb4
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(13,27-13,52); use=Pulse.Class.BoundedIntegers.fst(13,27-13,52)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_2cdd0b779b7e65376ec1ec73cce4cdb4 @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.bool)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_2cdd0b779b7e65376ec1ec73cce4cdb4 @x0
@x1
@x2))))
:qid haseqTm_refine_2cdd0b779b7e65376ec1ec73cce4cdb4))

:named haseqTm_refine_2cdd0b779b7e65376ec1ec73cce4cdb4))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2c9509c4fdf356ea8b390762a509ebbb
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.fits_t; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(5,32-5,48); use=Pulse.Class.BoundedIntegers.fst(5,32-5,48)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_2c9509c4fdf356ea8b390762a509ebbb @x0)))
(Valid (Prims.hasEq Prims.int)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_2c9509c4fdf356ea8b390762a509ebbb @x0))))
:qid haseqTm_refine_2c9509c4fdf356ea8b390762a509ebbb))

:named haseqTm_refine_2c9509c4fdf356ea8b390762a509ebbb))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2313fefa4022d1e569b84fd19f1ddcdc
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(15,32-15,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_2313fefa4022d1e569b84fd19f1ddcdc @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_2313fefa4022d1e569b84fd19f1ddcdc @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_2313fefa4022d1e569b84fd19f1ddcdc))

:named haseqTm_refine_2313fefa4022d1e569b84fd19f1ddcdc))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(9,4-9,5); use=Pulse.Class.BoundedIntegers.fst(9,4-9,5)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Tm_arrow_6982fcc1f9494d992b4152197a452220))

;; def=Pulse.Class.BoundedIntegers.fst(9,4-9,5); use=Pulse.Class.BoundedIntegers.fst(9,4-9,5)
(forall ((@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x1)
@x2)
(Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v @x1
@x2))
 

:pattern ((Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v @x1
@x2))
:qid function_token_typing_Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v.1))
)
 

:pattern ((ApplyTT @x0
Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok))
:qid function_token_typing_Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v))

:named function_token_typing_Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(8,4-8,8); use=Pulse.Class.BoundedIntegers.fst(8,4-8,8)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
Tm_arrow_f8bbfc6262761df269444e7163a237f0))

;; def=Pulse.Class.BoundedIntegers.fst(8,4-8,8); use=Pulse.Class.BoundedIntegers.fst(8,4-8,8)
(forall ((@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
@x1)
@x2)
(Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits @x1
@x2))
 

:pattern ((Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits @x1
@x2))
:qid function_token_typing_Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits.1))
)
 

:pattern ((ApplyTT @x0
Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok))
:qid function_token_typing_Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits))

:named function_token_typing_Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Prims.unit
Prims.eqtype)
:named function_token_typing_Prims.unit))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Prims.prop
Tm_type)
:named function_token_typing_Prims.prop))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (HasType Prims.logical
Tm_type)
:named function_token_typing_Prims.logical))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (HasType Prims.int
Prims.eqtype)
:named function_token_typing_Prims.int))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Prims.eqtype
Tm_type)
:named function_token_typing_Prims.eqtype))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (HasType Prims.bool
Prims.eqtype)
:named function_token_typing_Prims.bool))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,6-7,17)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Pulse.Class.BoundedIntegers.bounded_int @x2))
(and (is-Pulse.Class.BoundedIntegers.Mkbounded_int @x1)
(= @x2
(Pulse.Class.BoundedIntegers.Mkbounded_int_t @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(Pulse.Class.BoundedIntegers.bounded_int @x2)))
:qid fuel_guarded_inversion_Pulse.Class.BoundedIntegers.bounded_int))

:named fuel_guarded_inversion_Pulse.Class.BoundedIntegers.bounded_int))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Prims.pair @x2
@x3))
(and (is-Prims.Pair @x1)
(= @x2
(Prims.Pair_p @x1))
(= @x3
(Prims.Pair_q @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(Prims.pair @x2
@x3)))
:qid fuel_guarded_inversion_Prims.pair))

:named fuel_guarded_inversion_Prims.pair))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! (= 135
(Term_constr_id Pulse.Class.BoundedIntegers.bounded_int@tok))
:named fresh_token_Pulse.Class.BoundedIntegers.bounded_int@tok))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! (= 151
(Term_constr_id Prims.pair@tok))
:named fresh_token_Prims.pair@tok))
;;;;;;;;;;;;;;;;Equation for Pulse.Class.BoundedIntegers.fits_t
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.fits_t; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(5,4-5,10); use=Pulse.Class.BoundedIntegers.fst(5,4-5,10)
(forall ((@x0 Term))
 (! (= (Pulse.Class.BoundedIntegers.fits_t @x0)
(Tm_refine_2c9509c4fdf356ea8b390762a509ebbb @x0))
 

:pattern ((Pulse.Class.BoundedIntegers.fits_t @x0))
:qid equation_Pulse.Class.BoundedIntegers.fits_t))

:named equation_Pulse.Class.BoundedIntegers.fits_t))
;;;;;;;;;;;;;;;;Equation for Prims.subtype_of
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (Prims.subtype_of @x0
@x1))

;; def=Prims.fst(291,31-291,60); use=Prims.fst(291,31-291,60)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x0)
(HasType @x2
@x1))
 
;;no pats
:qid equation_Prims.subtype_of.1))
)
 

:pattern ((Prims.subtype_of @x0
@x1))
:qid equation_Prims.subtype_of))

:named equation_Prims.subtype_of))
;;;;;;;;;;;;;;;;Equation for Prims.squash
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,5-117,11); use=Prims.fst(117,5-117,11)
(forall ((@x0 Term))
 (! (= (Prims.squash @x0)
(Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0))
 

:pattern ((Prims.squash @x0))
:qid equation_Prims.squash))

:named equation_Prims.squash))
;;;;;;;;;;;;;;;;Equation for Prims.prop
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (= Prims.prop
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf)
:named equation_Prims.prop))
;;;;;;;;;;;;;;;;Equation for Prims.logical
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (= Prims.logical
Tm_type)
:named equation_Prims.logical))
;;;;;;;;;;;;;;;;Equation for Prims.l_and
;;; Fact-ids: Name Prims.l_and; Namespace Prims
(assert (! 
;; def=Prims.fst(188,5-188,10); use=Prims.fst(188,5-188,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.l_and @x0
@x1)
(Prims.squash (Prims.pair @x0
@x1)))
 

:pattern ((Prims.l_and @x0
@x1))
:qid equation_Prims.l_and))

:named equation_Prims.l_and))
;;;;;;;;;;;;;;;;Equation for Prims.eqtype
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (= Prims.eqtype
Tm_refine_414d0a9f578ab0048252f8c8f552b99f)
:named equation_Prims.eqtype))
;;;;;;;;;;;;;;;;Prop-typing for Prims.subtype_of
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(Valid (Prims.subtype_of (Prims.subtype_of @x0
@x1)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Prims.subtype_of @x0
@x1)
Prims.unit))
:qid defn_equation_Prims.subtype_of))

:named defn_equation_Prims.subtype_of))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,6-7,17)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Prims.eqtype)
(HasTypeFuel @u0
@x2
Tm_arrow_3a9c22ddc54716caa0276c05e792d97e)
(HasTypeFuel @u0
@x3
(Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b @x1))
(HasTypeFuel @u0
@x4
(Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced @x1
@x2))
(HasTypeFuel @u0
@x5
(Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6 @x1
@x3
@x2))
(HasTypeFuel @u0
@x6
(Tm_arrow_2577039e9f1dfe1304fb604a23098ae5 @x1
@x3
@x2))
(HasTypeFuel @u0
@x7
(Tm_arrow_4e9e5a602a12a0a4955a27552da74126 @x3
@x1))
(HasTypeFuel @u0
@x8
(Tm_arrow_635d2d314f62d2a47af45bf39ae8a382 @x3
@x1))
(HasTypeFuel @u0
@x9
(Tm_arrow_6fd19fbb85c4ddcccfac4c41196f752b @x1
@x2
@x3))
(HasTypeFuel @u0
@x10
(Tm_refine_9b6814fd42e45bedf339f7a6d66952ad @x1
@x2
@x3)))
(HasTypeFuel @u0
(Pulse.Class.BoundedIntegers.Mkbounded_int @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
(Pulse.Class.BoundedIntegers.bounded_int @x1)))
 

:pattern ((HasTypeFuel @u0
(Pulse.Class.BoundedIntegers.Mkbounded_int @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
(Pulse.Class.BoundedIntegers.bounded_int @x1)))
:qid data_typing_intro_Pulse.Class.BoundedIntegers.Mkbounded_int@tok))

:named data_typing_intro_Pulse.Class.BoundedIntegers.Mkbounded_int@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x1)
(HasTypeFuel @u0
@x4
@x2))
(HasTypeFuel @u0
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x1
@x2)))
:qid data_typing_intro_Prims.Pair@tok))

:named data_typing_intro_Prims.Pair@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,6-7,17)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
(Pulse.Class.BoundedIntegers.bounded_int @x11))
(and (HasTypeFuel @u0
@x11
Prims.eqtype)
(HasTypeFuel @u0
@x2
Tm_arrow_3a9c22ddc54716caa0276c05e792d97e)
(HasTypeFuel @u0
@x3
(Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b @x11))
(HasTypeFuel @u0
@x4
(Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced @x11
@x2))
(HasTypeFuel @u0
@x5
(Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6 @x11
@x3
@x2))
(HasTypeFuel @u0
@x6
(Tm_arrow_2577039e9f1dfe1304fb604a23098ae5 @x11
@x3
@x2))
(HasTypeFuel @u0
@x7
(Tm_arrow_4e9e5a602a12a0a4955a27552da74126 @x3
@x11))
(HasTypeFuel @u0
@x8
(Tm_arrow_635d2d314f62d2a47af45bf39ae8a382 @x3
@x11))
(HasTypeFuel @u0
@x9
(Tm_arrow_6fd19fbb85c4ddcccfac4c41196f752b @x11
@x2
@x3))
(HasTypeFuel @u0
@x10
(Tm_refine_9b6814fd42e45bedf339f7a6d66952ad @x11
@x2
@x3))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
(Pulse.Class.BoundedIntegers.bounded_int @x11)))
:qid data_elim_Pulse.Class.BoundedIntegers.Mkbounded_int))

:named data_elim_Pulse.Class.BoundedIntegers.Mkbounded_int))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x5
@x6))
(and (HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x6
Tm_type)
(HasTypeFuel @u0
@x3
@x5)
(HasTypeFuel @u0
@x4
@x6)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x5
@x6)))
:qid data_elim_Prims.Pair))

:named data_elim_Prims.Pair))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,6-7,17)
(forall ((@x0 Term))
 (! (= 134
(Term_constr_id (Pulse.Class.BoundedIntegers.bounded_int @x0)))
 

:pattern ((Pulse.Class.BoundedIntegers.bounded_int @x0))
:qid constructor_distinct_Pulse.Class.BoundedIntegers.bounded_int))

:named constructor_distinct_Pulse.Class.BoundedIntegers.bounded_int))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,6-7,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= 163
(Term_constr_id (Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)))
 

:pattern ((Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
:qid constructor_distinct_Pulse.Class.BoundedIntegers.Mkbounded_int))

:named constructor_distinct_Pulse.Class.BoundedIntegers.Mkbounded_int))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (= 125
(Term_constr_id Prims.unit))
:named constructor_distinct_Prims.unit))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= 150
(Term_constr_id (Prims.pair @x0
@x1)))
 

:pattern ((Prims.pair @x0
@x1))
:qid constructor_distinct_Prims.pair))

:named constructor_distinct_Prims.pair))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (= 303
(Term_constr_id Prims.int))
:named constructor_distinct_Prims.int))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (= 107
(Term_constr_id Prims.bool))
:named constructor_distinct_Prims.bool))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 157
(Term_constr_id (Prims.Pair @x0
@x1
@x2
@x3)))
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid constructor_distinct_Prims.Pair))

:named constructor_distinct_Prims.Pair))
;;;;;;;;;;;;;;;;bool typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (forall ((@u0 Bool))
 (! (HasType (BoxBool @u0)
Prims.bool)
 

:pattern ((BoxBool @u0))
:qid bool_typing))
:named bool_typing))
;;;;;;;;;;;;;;;;bool inversion
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.bool)
(is-BoxBool @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.bool))
:qid bool_inversion))
:named bool_inversion))
;;;;;;;;;;;;;;;;b2t typing
;;; Fact-ids: Name Prims.b2t; Namespace Prims
(assert (! 
;; def=Prims.fst(180,5-180,8); use=Prims.fst(180,5-180,8)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.bool)
(HasType (Prims.b2t @x0)
Tm_type))
 

:pattern ((Prims.b2t @x0))
:qid b2t_typing))

:named b2t_typing))
;;;;;;;;;;;;;;;;b2t def
;;; Fact-ids: Name Prims.b2t; Namespace Prims
(assert (! 
;; def=Prims.fst(180,5-180,8); use=Prims.fst(180,5-180,8)
(forall ((@x0 Term))
 (! (= (Valid (Prims.b2t @x0))
(BoxBool_proj_0 @x0))
 

:pattern ((Prims.b2t @x0))
:qid b2t_def))

:named b2t_def))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,6-7,17)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(Pulse.Class.BoundedIntegers.bounded_int @x2))
(= (Pulse.Class.BoundedIntegers.bounded_int @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(Pulse.Class.BoundedIntegers.bounded_int @x2)))
:qid Pulse.Class.BoundedIntegers_pretyping_d7aef4d734e4f287f5ed4ea6749f9ebf))

:named Pulse.Class.BoundedIntegers_pretyping_d7aef4d734e4f287f5ed4ea6749f9ebf))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-10,19); use=Pulse.Class.BoundedIntegers.fst(10,8-10,29)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced @x2
@x3)))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-9,21); use=Pulse.Class.BoundedIntegers.fst(9,8-9,21)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b @x2)))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-8,21); use=Pulse.Class.BoundedIntegers.fst(7,6-8,21)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_f8bbfc6262761df269444e7163a237f0)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_f8bbfc6262761df269444e7163a237f0))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_f8bbfc6262761df269444e7163a237f0))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_f8bbfc6262761df269444e7163a237f0))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(11,15-11,33)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6 @x2
@x3
@x4))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6 @x2
@x3
@x4)))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(15,15-15,33)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_6fd19fbb85c4ddcccfac4c41196f752b @x2
@x3
@x4))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_6fd19fbb85c4ddcccfac4c41196f752b @x2
@x3
@x4)))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_6fd19fbb85c4ddcccfac4c41196f752b))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_6fd19fbb85c4ddcccfac4c41196f752b))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-9,21); use=Pulse.Class.BoundedIntegers.fst(7,6-9,21)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_6982fcc1f9494d992b4152197a452220)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_6982fcc1f9494d992b4152197a452220))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_6982fcc1f9494d992b4152197a452220))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_6982fcc1f9494d992b4152197a452220))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-14,54); use=Pulse.Class.BoundedIntegers.fst(14,16-14,54)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_635d2d314f62d2a47af45bf39ae8a382 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_635d2d314f62d2a47af45bf39ae8a382 @x2
@x3)))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_635d2d314f62d2a47af45bf39ae8a382))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_635d2d314f62d2a47af45bf39ae8a382))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-13,52); use=Pulse.Class.BoundedIntegers.fst(13,15-13,52)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_4e9e5a602a12a0a4955a27552da74126 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_4e9e5a602a12a0a4955a27552da74126 @x2
@x3)))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_4e9e5a602a12a0a4955a27552da74126))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_4e9e5a602a12a0a4955a27552da74126))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.fits_t; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(5,17-5,28); use=Pulse.Class.BoundedIntegers.fst(5,17-5,28)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_3a9c22ddc54716caa0276c05e792d97e)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_3a9c22ddc54716caa0276c05e792d97e))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_3a9c22ddc54716caa0276c05e792d97e))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_3a9c22ddc54716caa0276c05e792d97e))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(12,24-12,42)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_2577039e9f1dfe1304fb604a23098ae5 @x2
@x3
@x4))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_2577039e9f1dfe1304fb604a23098ae5 @x2
@x3
@x4)))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_2577039e9f1dfe1304fb604a23098ae5))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_2577039e9f1dfe1304fb604a23098ae5))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-10,19); use=Pulse.Class.BoundedIntegers.fst(10,8-10,29)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced @x1
@x2))

;; def=Pulse.Class.BoundedIntegers.fst(7,19-10,19); use=Pulse.Class.BoundedIntegers.fst(10,8-10,29)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Pulse.Class.BoundedIntegers.fits_t @x2))
(HasType (ApplyTT @x0
@x3)
@x1))
 

:pattern ((ApplyTT @x0
@x3))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced.1))
)
 

:pattern ((HasTypeZ @x0
(Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced @x1
@x2)))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-9,21); use=Pulse.Class.BoundedIntegers.fst(9,8-9,21)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b @x1))

;; def=Pulse.Class.BoundedIntegers.fst(7,19-9,21); use=Pulse.Class.BoundedIntegers.fst(9,8-9,21)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x1)
(HasType (ApplyTT @x0
@x2)
Prims.int))
 

:pattern ((ApplyTT @x0
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b.1))
)
 

:pattern ((HasTypeZ @x0
(Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b @x1)))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_f8bbfc6262761df269444e7163a237f0
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-8,21); use=Pulse.Class.BoundedIntegers.fst(7,6-8,21)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_f8bbfc6262761df269444e7163a237f0)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-8,21); use=Pulse.Class.BoundedIntegers.fst(7,6-8,21)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
(Pulse.Class.BoundedIntegers.bounded_int @x1)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
Tm_arrow_3a9c22ddc54716caa0276c05e792d97e))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_f8bbfc6262761df269444e7163a237f0.1))

(IsTotFun @x0)

;; def=Pulse.Class.BoundedIntegers.fst(7,6-8,21); use=Pulse.Class.BoundedIntegers.fst(7,6-8,21)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.eqtype)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_f8bbfc6262761df269444e7163a237f0.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_f8bbfc6262761df269444e7163a237f0))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_f8bbfc6262761df269444e7163a237f0))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_f8bbfc6262761df269444e7163a237f0))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(11,15-11,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6 @x1
@x2
@x3))
(and 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(11,15-11,33)
(forall ((@x4 Term) (@x5 Term))
 (! (implies (and 
;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(11,44-11,60)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(11,44-11,60)
(ApplyTT @x3
(Prims.op_Addition (ApplyTT @x2
@x4)
(ApplyTT @x2
@x5)))
)

(HasType @x4
@x1)
(HasType @x5
@x1))
(HasType (ApplyTT (ApplyTT @x0
@x4)
@x5)
(Tm_refine_cface579e84edab1d51e059d64561695 @x1
@x2
@x4
@x5)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x4)
@x5))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6.1))

(IsTotFun @x0)

;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(11,15-11,33)
(forall ((@x4 Term))
 (! (implies (HasType @x4
@x1)
(IsTotFun (ApplyTT @x0
@x4)))
 

:pattern ((ApplyTT @x0
@x4))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6.2))
))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6 @x1
@x2
@x3)))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_6fd19fbb85c4ddcccfac4c41196f752b
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(15,15-15,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_6fd19fbb85c4ddcccfac4c41196f752b @x1
@x2
@x3))
(and 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(15,15-15,33)
(forall ((@x4 Term) (@x5 Term))
 (! (implies (and 
;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Pulse.Class.BoundedIntegers.fst(15,44-15,51)
(> (BoxInt_proj_0 (ApplyTT @x3
@x5))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Pulse.Class.BoundedIntegers.fst(15,55-15,71); use=Pulse.Class.BoundedIntegers.fst(15,55-15,71)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(15,55-15,71); use=Pulse.Class.BoundedIntegers.fst(15,55-15,71)
(ApplyTT @x2
(Prims.op_Modulus (ApplyTT @x3
@x4)
(ApplyTT @x3
@x5)))
)

(HasType @x4
@x1)
(HasType @x5
@x1))
(HasType (ApplyTT (ApplyTT @x0
@x4)
@x5)
(Tm_refine_2313fefa4022d1e569b84fd19f1ddcdc @x1
@x3
@x4
@x5)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x4)
@x5))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_6fd19fbb85c4ddcccfac4c41196f752b.1))

(IsTotFun @x0)

;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(15,15-15,33)
(forall ((@x4 Term))
 (! (implies (HasType @x4
@x1)
(IsTotFun (ApplyTT @x0
@x4)))
 

:pattern ((ApplyTT @x0
@x4))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_6fd19fbb85c4ddcccfac4c41196f752b.2))
))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_6fd19fbb85c4ddcccfac4c41196f752b @x1
@x2
@x3)))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_6fd19fbb85c4ddcccfac4c41196f752b))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_6fd19fbb85c4ddcccfac4c41196f752b))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_6982fcc1f9494d992b4152197a452220
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-9,21); use=Pulse.Class.BoundedIntegers.fst(7,6-9,21)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_6982fcc1f9494d992b4152197a452220)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-9,21); use=Pulse.Class.BoundedIntegers.fst(7,6-9,21)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
(Pulse.Class.BoundedIntegers.bounded_int @x1)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b @x1)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_6982fcc1f9494d992b4152197a452220.1))

(IsTotFun @x0)

;; def=Pulse.Class.BoundedIntegers.fst(7,6-9,21); use=Pulse.Class.BoundedIntegers.fst(7,6-9,21)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.eqtype)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_6982fcc1f9494d992b4152197a452220.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_6982fcc1f9494d992b4152197a452220))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_6982fcc1f9494d992b4152197a452220))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_6982fcc1f9494d992b4152197a452220))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_635d2d314f62d2a47af45bf39ae8a382
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-14,54); use=Pulse.Class.BoundedIntegers.fst(14,16-14,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_635d2d314f62d2a47af45bf39ae8a382 @x1
@x2))
(and 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-14,54); use=Pulse.Class.BoundedIntegers.fst(14,16-14,54)
(forall ((@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x3
@x2)
(HasType @x4
@x2))
(HasType (ApplyTT (ApplyTT @x0
@x3)
@x4)
(Tm_refine_55034eb0b7285efc4cb3be441d0a887c @x1
@x3
@x4)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x3)
@x4))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_635d2d314f62d2a47af45bf39ae8a382.1))

(IsTotFun @x0)

;; def=Pulse.Class.BoundedIntegers.fst(7,19-14,54); use=Pulse.Class.BoundedIntegers.fst(14,16-14,54)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)
(IsTotFun (ApplyTT @x0
@x3)))
 

:pattern ((ApplyTT @x0
@x3))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_635d2d314f62d2a47af45bf39ae8a382.2))
))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_635d2d314f62d2a47af45bf39ae8a382 @x1
@x2)))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_635d2d314f62d2a47af45bf39ae8a382))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_635d2d314f62d2a47af45bf39ae8a382))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_4e9e5a602a12a0a4955a27552da74126
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-13,52); use=Pulse.Class.BoundedIntegers.fst(13,15-13,52)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_4e9e5a602a12a0a4955a27552da74126 @x1
@x2))
(and 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-13,52); use=Pulse.Class.BoundedIntegers.fst(13,15-13,52)
(forall ((@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x3
@x2)
(HasType @x4
@x2))
(HasType (ApplyTT (ApplyTT @x0
@x3)
@x4)
(Tm_refine_2cdd0b779b7e65376ec1ec73cce4cdb4 @x1
@x3
@x4)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x3)
@x4))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_4e9e5a602a12a0a4955a27552da74126.1))

(IsTotFun @x0)

;; def=Pulse.Class.BoundedIntegers.fst(7,19-13,52); use=Pulse.Class.BoundedIntegers.fst(13,15-13,52)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)
(IsTotFun (ApplyTT @x0
@x3)))
 

:pattern ((ApplyTT @x0
@x3))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_4e9e5a602a12a0a4955a27552da74126.2))
))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_4e9e5a602a12a0a4955a27552da74126 @x1
@x2)))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_4e9e5a602a12a0a4955a27552da74126))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_4e9e5a602a12a0a4955a27552da74126))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_3a9c22ddc54716caa0276c05e792d97e
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.fits_t; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(5,17-5,28); use=Pulse.Class.BoundedIntegers.fst(5,17-5,28)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_3a9c22ddc54716caa0276c05e792d97e)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(5,17-5,28); use=Pulse.Class.BoundedIntegers.fst(5,17-5,28)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.int)
(HasType (ApplyTT @x0
@x1)
Prims.prop))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_3a9c22ddc54716caa0276c05e792d97e.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_3a9c22ddc54716caa0276c05e792d97e))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_3a9c22ddc54716caa0276c05e792d97e))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_3a9c22ddc54716caa0276c05e792d97e))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_2577039e9f1dfe1304fb604a23098ae5
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(12,24-12,42)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_2577039e9f1dfe1304fb604a23098ae5 @x1
@x2
@x3))
(and 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(12,24-12,42)
(forall ((@x4 Term) (@x5 Term))
 (! (implies (and 
;; def=Pulse.Class.BoundedIntegers.fst(12,53-12,69); use=Pulse.Class.BoundedIntegers.fst(12,53-12,69)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(12,53-12,69); use=Pulse.Class.BoundedIntegers.fst(12,53-12,69)
(ApplyTT @x3
(Prims.op_Subtraction (ApplyTT @x2
@x4)
(ApplyTT @x2
@x5)))
)

(HasType @x4
@x1)
(HasType @x5
@x1))
(HasType (ApplyTT (ApplyTT @x0
@x4)
@x5)
(Tm_refine_55c811e0087f59b5e8e300fbcbbb9dbc @x1
@x2
@x4
@x5)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x4)
@x5))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_2577039e9f1dfe1304fb604a23098ae5.1))

(IsTotFun @x0)

;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(12,24-12,42)
(forall ((@x4 Term))
 (! (implies (HasType @x4
@x1)
(IsTotFun (ApplyTT @x0
@x4)))
 

:pattern ((ApplyTT @x0
@x4))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_2577039e9f1dfe1304fb604a23098ae5.2))
))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_2577039e9f1dfe1304fb604a23098ae5 @x1
@x2
@x3)))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_2577039e9f1dfe1304fb604a23098ae5))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_2577039e9f1dfe1304fb604a23098ae5))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! 
;; def=Prims.fst(96,5-96,9); use=Prims.fst(96,5-96,9)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.unit)
(= Prims.unit
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.unit))
:qid Prims_pretyping_f8666440faa91836cc5a13998af863fc))

:named Prims_pretyping_f8666440faa91836cc5a13998af863fc))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! 
;; def=Prims.fst(80,5-80,9); use=Prims.fst(80,5-80,9)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.bool)
(= Prims.bool
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.bool))
:qid Prims_pretyping_f537159ed795b314b4e58c260361ae86))

:named Prims_pretyping_f537159ed795b314b4e58c260361ae86))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u1
@x0
(Prims.pair @x2
@x3))
(= (Prims.pair @x2
@x3)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(Prims.pair @x2
@x3)))
:qid Prims_pretyping_b7882067459c08225ce8e64864e7b31f))

:named Prims_pretyping_b7882067459c08225ce8e64864e7b31f))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! 
;; def=Prims.fst(514,5-514,8); use=Prims.fst(514,5-514,8)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.int)
(= Prims.int
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.int))
:qid Prims_pretyping_ae567c2fb75be05905677af440075565))

:named Prims_pretyping_ae567c2fb75be05905677af440075565))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Plus; Namespace Pulse.Class.BoundedIntegers
(assert (! (Valid (ApplyTT __uu__PartialApp
Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok))
:named @kick_partial_app_9df30ae76cb4438b8229fe74965fdf0b))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Plus; Namespace Pulse.Class.BoundedIntegers
(assert (! (Valid (ApplyTT __uu__PartialApp
Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok))
:named @kick_partial_app_5c2caa75894e087d4e2f394c35b94a4e))
(push) ;; push{2

; Starting query at Pulse.Class.BoundedIntegers.fst(15,6-15,7)

(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)












(declare-fun Tm_refine_362849aac9a21015707b98540ff7ba05 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_362849aac9a21015707b98540ff7ba05 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_362849aac9a21015707b98540ff7ba05 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_362849aac9a21015707b98540ff7ba05))

:named refinement_kinding_Tm_refine_362849aac9a21015707b98540ff7ba05))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_362849aac9a21015707b98540ff7ba05 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(> (BoxInt_proj_0 (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x2)
@x3)
@x4))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Pulse.Class.BoundedIntegers.fst(15,55-15,71); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(15,55-15,71); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
@x2)
@x3)
(Prims.op_Modulus (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x2)
@x3)
@x5)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x2)
@x3)
@x4)))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_362849aac9a21015707b98540ff7ba05 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_362849aac9a21015707b98540ff7ba05))

:named refinement_interpretation_Tm_refine_362849aac9a21015707b98540ff7ba05))
;;;;;;;;;;;;;;;;haseq for Tm_refine_362849aac9a21015707b98540ff7ba05
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_362849aac9a21015707b98540ff7ba05 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_362849aac9a21015707b98540ff7ba05 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_362849aac9a21015707b98540ff7ba05))

:named haseqTm_refine_362849aac9a21015707b98540ff7ba05))









; Encoding query formula : forall (t: Prims.eqtype) (projectee: Pulse.Class.BoundedIntegers.bounded_int t).
;   (*  - Subtyping check failed
;   - Expected type Type0 got type Type0
; *)
;   forall (x: t) (y: t).
;     (projectee.v y > 0 ==>
;       (forall (any_result: Prims.int).
;           projectee.v x == any_result ==>
;           (forall (any_result: Prims.int). projectee.v y == any_result ==> projectee.v y <> 0))) /\
;     (forall (any_result: Prims.logical).
;         (projectee.v y > 0) /\ projectee.fits (projectee.v x % projectee.v y) == any_result ==>
;         (forall (_: t).
;             projectee.v y > 0 ==>
;             (forall (any_result: Prims.int).
;                 projectee.v x == any_result ==>
;                 (forall (any_result: Prims.int). projectee.v y == any_result ==> projectee.v y <> 0)
;             )) /\
;         (forall (z: _: t{projectee.v y > 0 /\ projectee.fits (projectee.v x % projectee.v y)}).
;             (*  - Could not prove post-condition
; *)
;             forall (any_result: Prims.int).
;               projectee.v z == any_result ==>
;               (forall (any_result: Prims.int).
;                   projectee.v x == any_result ==>
;                   (forall (any_result: Prims.int).
;                       projectee.v y == any_result ==> projectee.v y <> 0))))


; Context: While encoding a query
; While typechecking the top-level declaration `val Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Percent`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(Pulse.Class.BoundedIntegers.bounded_int @x0)))

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
@x0)
(HasType @x3
@x0))

;; def=Prims.fst(459,77-459,89); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(and (implies 
;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(> (BoxInt_proj_0 (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1)
@x3))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.int)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1)
@x2)
@x4)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.int)

;; def=Prims.fst(697,23-697,30); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1)
@x3)
@x5)
)

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(15,67-15,70)
(or label_1

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(not (= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1)
@x3)
(BoxInt 0)))
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.logical)

;; def=Prims.fst(439,23-439,26); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (Prims.l_and (Prims.b2t (Prims.op_GreaterThan (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1)
@x3)
(BoxInt 0)))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
@x0)
@x1)
(Prims.op_Modulus (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1)
@x2)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1)
@x3))))
@x4)
)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(and 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
@x0)

;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(> (BoxInt_proj_0 (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1)
@x3))
(BoxInt_proj_0 (BoxInt 0)))
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.int)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1)
@x2)
@x6)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.int)

;; def=Prims.fst(697,23-697,30); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1)
@x3)
@x7)
)

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(15,27-15,31)
(or label_2

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(not (= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1)
@x3)
(BoxInt 0)))
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))


;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x5 Term))
 (! (implies (HasType @x5
(Tm_refine_362849aac9a21015707b98540ff7ba05 @x0
@x1
@x3
@x2))

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.int)

;; def=Prims.fst(175,35-175,36); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1)
@x5)
@x6)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.int)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1)
@x2)
@x7)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.int)

;; def=Prims.fst(697,23-697,30); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1)
@x3)
@x8)
)

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(15,104-15,107)
(or label_3

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(not (= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1)
@x3)
(BoxInt 0)))
)
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Percent, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_362849aac9a21015707b98540ff7ba05

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt val Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Percent


; <Start encoding val Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Percent>

(declare-fun Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Percent (Term Term) Term)



(declare-fun Tm_refine_6695dc943e5caf38f27f32f98d3615a3 (Term Term Term Term) Term)




;;;;;;;;;;;;;;;;x: t -> y: t -> Prims.Pure t
(declare-fun Tm_arrow_aeb5b89a963986ef5126111de828089a (Term Term) Term)
;;;;;;;;;;;;;;;;projectee: bounded_int t -> x: t -> y: t -> Prims.Pure t
(declare-fun Tm_arrow_00067c623bd6f04e4d1cf3d7ef7ec2bd () Term)
(declare-fun Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Percent@tok () Term)










; </end encoding val Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Percent>

(push) ;; push{2

; Starting query at Pulse.Class.BoundedIntegers.fst(15,6-15,7)

(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)












(declare-fun Tm_refine_362849aac9a21015707b98540ff7ba05 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_362849aac9a21015707b98540ff7ba05 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_362849aac9a21015707b98540ff7ba05 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_362849aac9a21015707b98540ff7ba05))

:named refinement_kinding_Tm_refine_362849aac9a21015707b98540ff7ba05))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_362849aac9a21015707b98540ff7ba05 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(> (BoxInt_proj_0 (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x2)
@x3)
@x4))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Pulse.Class.BoundedIntegers.fst(15,55-15,71); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(15,55-15,71); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
@x2)
@x3)
(Prims.op_Modulus (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x2)
@x3)
@x5)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x2)
@x3)
@x4)))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_362849aac9a21015707b98540ff7ba05 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_362849aac9a21015707b98540ff7ba05))

:named refinement_interpretation_Tm_refine_362849aac9a21015707b98540ff7ba05))
;;;;;;;;;;;;;;;;haseq for Tm_refine_362849aac9a21015707b98540ff7ba05
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_362849aac9a21015707b98540ff7ba05 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_362849aac9a21015707b98540ff7ba05 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_362849aac9a21015707b98540ff7ba05))

:named haseqTm_refine_362849aac9a21015707b98540ff7ba05))








































(declare-fun Tm_refine_a5b51daf4272a3f77a353fced33c772f (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (HasType (Tm_refine_a5b51daf4272a3f77a353fced33c772f @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11)
Tm_type)
 

:pattern ((HasType (Tm_refine_a5b51daf4272a3f77a353fced33c772f @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11)
Tm_type))
:qid refinement_kinding_Tm_refine_a5b51daf4272a3f77a353fced33c772f))

:named refinement_kinding_Tm_refine_a5b51daf4272a3f77a353fced33c772f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_a5b51daf4272a3f77a353fced33c772f @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(> (BoxInt_proj_0 (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x2)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
@x12))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Pulse.Class.BoundedIntegers.fst(15,55-15,71); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(15,55-15,71); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
@x2)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
(Prims.op_Modulus (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x2)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
@x13)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x2)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
@x12)))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_a5b51daf4272a3f77a353fced33c772f @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13)))
:qid refinement_interpretation_Tm_refine_a5b51daf4272a3f77a353fced33c772f))

:named refinement_interpretation_Tm_refine_a5b51daf4272a3f77a353fced33c772f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a5b51daf4272a3f77a353fced33c772f
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_a5b51daf4272a3f77a353fced33c772f @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_a5b51daf4272a3f77a353fced33c772f @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))))
:qid haseqTm_refine_a5b51daf4272a3f77a353fced33c772f))

:named haseqTm_refine_a5b51daf4272a3f77a353fced33c772f))












; Encoding query formula : forall (t: Prims.eqtype) (projectee: Pulse.Class.BoundedIntegers.bounded_int t).
;   (forall (proj_ret: Pulse.Class.BoundedIntegers.bounded_int t).
;       (*  - Subtyping check failed
;   - Expected type Type0 got type Type0
; *)
;       forall (x: t) (y: t).
;         (proj_ret.v y > 0 ==>
;           (forall (any_result: Prims.int).
;               proj_ret.v x == any_result ==>
;               (forall (any_result: Prims.int). proj_ret.v y == any_result ==> proj_ret.v y <> 0))) /\
;         (forall (any_result: Prims.logical).
;             (proj_ret.v y > 0) /\ proj_ret.fits (proj_ret.v x % proj_ret.v y) == any_result ==>
;             (forall (_: t).
;                 proj_ret.v y > 0 ==>
;                 (forall (any_result: Prims.int).
;                     proj_ret.v x == any_result ==>
;                     (forall (any_result: Prims.int).
;                         proj_ret.v y == any_result ==> proj_ret.v y <> 0))) /\
;             (forall (z: _: t{proj_ret.v y > 0 /\ proj_ret.fits (proj_ret.v x % proj_ret.v y)}).
;                 (*  - Could not prove post-condition
; *)
;                 forall (any_result: Prims.int).
;                   proj_ret.v z == any_result ==>
;                   (forall (any_result: Prims.int).
;                       proj_ret.v x == any_result ==>
;                       (forall (any_result: Prims.int).
;                           proj_ret.v y == any_result ==> proj_ret.v y <> 0))))) /\
;   (forall (b: (_: Prims.int -> Prims.prop))
;       (b: (_: t -> Prims.GTot Prims.int))
;       (b: (_: Pulse.Class.BoundedIntegers.fits_t b -> Prims.GTot t))
;       (b: (x: t -> y: t -> Prims.Pure t))
;       (b: (x: t -> y: t -> Prims.Pure t))
;       (b: (x: t -> y: t -> b: Prims.bool{b = (b x < b y)}))
;       (b: (x: t -> y: t -> b: Prims.bool{b = (b x <= b y)}))
;       (b: (x: t -> y: t -> Prims.Pure t))
;       (b: Prims.squash (forall (x: t). {:pattern b x} b (b x))).
;       projectee == Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b ==>
;       (forall (x: t) (y: t).
;           ((Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b).v y > 0 ==>
;             (forall (b: Prims.squash (forall (x: t). {:pattern b x} b (b x)))
;                 (any_result: Pulse.Class.BoundedIntegers.bounded_int t).
;                 Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b == any_result ==>
;                 (forall (b: Prims.squash (forall (x: t). {:pattern b x} b (b x)))
;                     (any_result: Pulse.Class.BoundedIntegers.bounded_int t).
;                     Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b == any_result ==>
;                     (forall (any_result: Prims.int).
;                         (Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b).v x ==
;                         any_result ==>
;                         (forall (b: Prims.squash (forall (x: t). {:pattern b x} b (b x)))
;                             (any_result: Pulse.Class.BoundedIntegers.bounded_int t).
;                             Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b ==
;                             any_result ==>
;                             (forall (any_result: Prims.int).
;                                 (Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b).v y ==
;                                 any_result ==>
;                                 (Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b).v y <>
;                                 0)))))) /\
;           (forall (any_result: Prims.logical).
;               ((Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b).v y > 0) /\
;               (Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b).fits ((Pulse.Class.BoundedIntegers.Mkbounded_int
;                       b b b b b b b b b)
;                     .v x %
;                   (Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b).v y) ==
;               any_result ==>
;               (forall (_: t).
;                   (Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b).v y > 0 ==>
;                   (forall (b: Prims.squash (forall (x: t). {:pattern b x} b (b x)))
;                       (any_result: Pulse.Class.BoundedIntegers.bounded_int t).
;                       Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b == any_result ==>
;                       (forall (b: Prims.squash (forall (x: t). {:pattern b x} b (b x)))
;                           (any_result: Pulse.Class.BoundedIntegers.bounded_int t).
;                           Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b == any_result ==>
;                           (forall (any_result: Prims.int).
;                               (Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b).v x ==
;                               any_result ==>
;                               (forall (b: Prims.squash (forall (x: t). {:pattern b x} b (b x)))
;                                   (any_result: Pulse.Class.BoundedIntegers.bounded_int t).
;                                   Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b ==
;                                   any_result ==>
;                                   (forall (any_result: Prims.int).
;                                       (Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b)
;                                         .v y ==
;                                       any_result ==>
;                                       (Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b)
;                                         .v y <>
;                                       0)))))) /\
;               (forall (z:
;                   _:
;                   t
;                     { (Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b).v y > 0 /\
;                       (Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b).fits ((Pulse.Class.BoundedIntegers.Mkbounded_int
;                               b b b b b b b b b)
;                             .v x %
;                           (Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b).v y) }).
;                   (*  - Could not prove post-condition
; *)
;                   forall (b: Prims.squash (forall (x: t). {:pattern b x} b (b x)))
;                     (any_result: Pulse.Class.BoundedIntegers.bounded_int t).
;                     Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b == any_result ==>
;                     (forall (any_result: Prims.int).
;                         (Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b).v z ==
;                         any_result ==>
;                         (forall (b: Prims.squash (forall (x: t). {:pattern b x} b (b x)))
;                             (any_result: Pulse.Class.BoundedIntegers.bounded_int t).
;                             Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b ==
;                             any_result ==>
;                             (forall (any_result: Prims.int).
;                                 (Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b).v x ==
;                                 any_result ==>
;                                 (forall (b: Prims.squash (forall (x: t). {:pattern b x} b (b x)))
;                                     (any_result: Pulse.Class.BoundedIntegers.bounded_int t).
;                                     Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b ==
;                                     any_result ==>
;                                     (forall (any_result: Prims.int).
;                                         (Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b
;                                         )
;                                           .v y ==
;                                         any_result ==>
;                                         (Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b
;                                         )
;                                           .v y <>
;                                         0)))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__Mkbounded_int__item__op_Percent`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(Pulse.Class.BoundedIntegers.bounded_int @x0)))

;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(and (forall ((@x2 Term))
 (! (implies (HasType @x2
(Pulse.Class.BoundedIntegers.bounded_int @x0))

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x3
@x0)
(HasType @x4
@x0))

;; def=Prims.fst(459,77-459,89); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(and (implies 
;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(> (BoxInt_proj_0 (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x2)
@x4))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.int)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x2)
@x3)
@x5)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.int)

;; def=Prims.fst(697,23-697,30); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x2)
@x4)
@x6)
)

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(15,67-15,70)
(or label_1

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(not (= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x2)
@x4)
(BoxInt 0)))
)
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.logical)

;; def=Prims.fst(439,23-439,26); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (Prims.l_and (Prims.b2t (Prims.op_GreaterThan (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x2)
@x4)
(BoxInt 0)))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
@x0)
@x2)
(Prims.op_Modulus (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x2)
@x3)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x2)
@x4))))
@x5)
)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(and 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
@x0)

;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(> (BoxInt_proj_0 (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x2)
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.int)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x2)
@x3)
@x7)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.int)

;; def=Prims.fst(697,23-697,30); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x2)
@x4)
@x8)
)

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(15,27-15,31)
(or label_2

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(not (= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x2)
@x4)
(BoxInt 0)))
)
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))


;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x6 Term))
 (! (implies (HasType @x6
(Tm_refine_362849aac9a21015707b98540ff7ba05 @x0
@x2
@x4
@x3))

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.int)

;; def=Prims.fst(175,35-175,36); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x2)
@x6)
@x7)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.int)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x2)
@x3)
@x8)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.int)

;; def=Prims.fst(697,23-697,30); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x2)
@x4)
@x9)
)

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(15,104-15,107)
(or label_3

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(not (= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x2)
@x4)
(BoxInt 0)))
)
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
)
 
;;no pats
:qid @query.5))
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))

;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Tm_arrow_3a9c22ddc54716caa0276c05e792d97e)

;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b @x0))

;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x4 Term))
 (! (implies (HasType @x4
(Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced @x0
@x2))

;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x5 Term))
 (! (implies (HasType @x5
(Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6 @x0
@x3
@x2))

;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x6 Term))
 (! (implies (HasType @x6
(Tm_arrow_2577039e9f1dfe1304fb604a23098ae5 @x0
@x3
@x2))

;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x7 Term))
 (! (implies (HasType @x7
(Tm_arrow_4e9e5a602a12a0a4955a27552da74126 @x3
@x0))

;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x8 Term))
 (! (implies (HasType @x8
(Tm_arrow_635d2d314f62d2a47af45bf39ae8a382 @x3
@x0))

;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x9 Term))
 (! (implies (HasType @x9
(Tm_arrow_6fd19fbb85c4ddcccfac4c41196f752b @x0
@x2
@x3))

;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(Tm_refine_9b6814fd42e45bedf339f7a6d66952ad @x0
@x2
@x3))

;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= @x1
(Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x11 Term) (@x12 Term))
 (! (implies (and (HasType @x11
@x0)
(HasType @x12
@x0))

;; def=Prims.fst(459,77-459,89); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(and (implies 
;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(> (BoxInt_proj_0 (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
@x12))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x13 Term))
 (! (implies (HasType @x13
(Tm_refine_9b6814fd42e45bedf339f7a6d66952ad @x0
@x2
@x3))

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
(Pulse.Class.BoundedIntegers.bounded_int @x0))

;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
@x14)
)

;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x15 Term))
 (! (implies (HasType @x15
(Tm_refine_9b6814fd42e45bedf339f7a6d66952ad @x0
@x2
@x3))

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
(Pulse.Class.BoundedIntegers.bounded_int @x0))

;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
@x16)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Prims.int)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
@x11)
@x17)
)

;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x18 Term))
 (! (implies (HasType @x18
(Tm_refine_9b6814fd42e45bedf339f7a6d66952ad @x0
@x2
@x3))

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x19 Term))
 (! (implies (and (HasType @x19
(Pulse.Class.BoundedIntegers.bounded_int @x0))

;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
@x19)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x20 Term))
 (! (implies (and (HasType @x20
Prims.int)

;; def=Prims.fst(697,23-697,30); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
@x12)
@x20)
)

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(15,67-15,70)
(or label_4

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(not (= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
@x12)
(BoxInt 0)))
)
)
 
;;no pats
:qid @query.30))
)
 
;;no pats
:qid @query.29))
)
 
;;no pats
:qid @query.28))
)
 
;;no pats
:qid @query.27))
)
 
;;no pats
:qid @query.26))
)
 
;;no pats
:qid @query.25))
)
 
;;no pats
:qid @query.24))
)
 
;;no pats
:qid @query.23))
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
Prims.logical)

;; def=Prims.fst(439,23-439,26); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (Prims.l_and (Prims.b2t (Prims.op_GreaterThan (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
@x12)
(BoxInt 0)))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
(Prims.op_Modulus (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
@x11)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
@x12))))
@x13)
)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(and 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
@x0)

;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(> (BoxInt_proj_0 (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
@x12))
(BoxInt_proj_0 (BoxInt 0)))
)

;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x15 Term))
 (! (implies (HasType @x15
(Tm_refine_9b6814fd42e45bedf339f7a6d66952ad @x0
@x2
@x3))

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
(Pulse.Class.BoundedIntegers.bounded_int @x0))

;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
@x16)
)

;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x17 Term))
 (! (implies (HasType @x17
(Tm_refine_9b6814fd42e45bedf339f7a6d66952ad @x0
@x2
@x3))

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(Pulse.Class.BoundedIntegers.bounded_int @x0))

;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
@x18)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x19 Term))
 (! (implies (and (HasType @x19
Prims.int)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
@x11)
@x19)
)

;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x20 Term))
 (! (implies (HasType @x20
(Tm_refine_9b6814fd42e45bedf339f7a6d66952ad @x0
@x2
@x3))

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x21 Term))
 (! (implies (and (HasType @x21
(Pulse.Class.BoundedIntegers.bounded_int @x0))

;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
@x21)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
Prims.int)

;; def=Prims.fst(697,23-697,30); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
@x12)
@x22)
)

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(15,27-15,31)
(or label_5

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(not (= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
@x12)
(BoxInt 0)))
)
)
 
;;no pats
:qid @query.40))
)
 
;;no pats
:qid @query.39))
)
 
;;no pats
:qid @query.38))
)
 
;;no pats
:qid @query.37))
)
 
;;no pats
:qid @query.36))
)
 
;;no pats
:qid @query.35))
)
 
;;no pats
:qid @query.34))
)
 
;;no pats
:qid @query.33))
)
 
;;no pats
:qid @query.32))


;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x14 Term))
 (! (implies (HasType @x14
(Tm_refine_a5b51daf4272a3f77a353fced33c772f @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x12
@x11))

;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x15 Term))
 (! (implies (HasType @x15
(Tm_refine_9b6814fd42e45bedf339f7a6d66952ad @x0
@x2
@x3))

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
(Pulse.Class.BoundedIntegers.bounded_int @x0))

;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
@x16)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Prims.int)

;; def=Prims.fst(175,35-175,36); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
@x14)
@x17)
)

;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x18 Term))
 (! (implies (HasType @x18
(Tm_refine_9b6814fd42e45bedf339f7a6d66952ad @x0
@x2
@x3))

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x19 Term))
 (! (implies (and (HasType @x19
(Pulse.Class.BoundedIntegers.bounded_int @x0))

;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
@x19)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x20 Term))
 (! (implies (and (HasType @x20
Prims.int)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
@x11)
@x20)
)

;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x21 Term))
 (! (implies (HasType @x21
(Tm_refine_9b6814fd42e45bedf339f7a6d66952ad @x0
@x2
@x3))

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
(Pulse.Class.BoundedIntegers.bounded_int @x0))

;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
@x22)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x23 Term))
 (! (implies (and (HasType @x23
Prims.int)

;; def=Prims.fst(697,23-697,30); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
@x12)
@x23)
)

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(15,104-15,107)
(or label_6

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(not (= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
@x12)
(BoxInt 0)))
)
)
 
;;no pats
:qid @query.50))
)
 
;;no pats
:qid @query.49))
)
 
;;no pats
:qid @query.48))
)
 
;;no pats
:qid @query.47))
)
 
;;no pats
:qid @query.46))
)
 
;;no pats
:qid @query.45))
)
 
;;no pats
:qid @query.44))
)
 
;;no pats
:qid @query.43))
)
 
;;no pats
:qid @query.42))
)
 
;;no pats
:qid @query.41))
)
)
 
;;no pats
:qid @query.31))
)
)
 
;;no pats
:qid @query.22))
)
 
;;no pats
:qid @query.21))
)
 
;;no pats
:qid @query.20))
)
 
;;no pats
:qid @query.19))
)
 
;;no pats
:qid @query.18))
)
 
;;no pats
:qid @query.17))
)
 
;;no pats
:qid @query.16))
)
 
;;no pats
:qid @query.15))
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Percent, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, fuel_guarded_inversion_Pulse.Class.BoundedIntegers.bounded_int, refinement_interpretation_Tm_refine_362849aac9a21015707b98540ff7ba05, refinement_interpretation_Tm_refine_a5b51daf4272a3f77a353fced33c772f

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__Mkbounded_int__item__op_Percent


; <Skipped let __proj__Mkbounded_int__item__op_Percent/>


; encoding sigelt val Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__properties


; <Start encoding val Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__properties>

(declare-fun Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__properties (Term Term) Term)



(declare-fun Tm_refine_4598d099ec98da7d42626ca81351eaf3 (Term Term) Term)
;;;;;;;;;;;;;;;;projectee: bounded_int t   -> Prims.squash (forall (x: t). {:pattern projectee.v x} projectee.fits (projectee.v x))
(declare-fun Tm_arrow_82b4f1da3c4f2b10811f51007b336585 () Term)
(declare-fun Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__properties@tok () Term)





; </end encoding val Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__properties>


; encoding sigelt let __proj__Mkbounded_int__item__properties


; <Skipped let __proj__Mkbounded_int__item__properties/>


; encoding sigelt let fits


; <Start encoding let fits>

(declare-fun Pulse.Class.BoundedIntegers.fits (Term) Term)

;;;;;;;;;;;;;;;;{| projectee: bounded_int t |} -> _: Prims.int -> Prims.prop
(declare-fun Tm_arrow_6364954a39281bc3fb895daff7b4187f (Term) Term)
;;;;;;;;;;;;;;;;{| projectee: bounded_int t |} -> _: Prims.int -> Prims.prop
(declare-fun Tm_arrow_f878efc3fc7d12ae462719c6239b3758 () Term)
(declare-fun Pulse.Class.BoundedIntegers.fits@tok () Term)




(declare-fun Tm_abs_d2b36eee66dd8372042cd1c49358f9dc (Term) Term)

; </end encoding let fits>


; encoding sigelt let v


; <Start encoding let v>

(declare-fun Pulse.Class.BoundedIntegers.v (Term) Term)

;;;;;;;;;;;;;;;;{| projectee: bounded_int t |} -> _: t -> Prims.GTot Prims.int
(declare-fun Tm_arrow_4d67790b66356a618f544f985a991be4 (Term) Term)
;;;;;;;;;;;;;;;;{| projectee: bounded_int t |} -> _: t -> Prims.GTot Prims.int
(declare-fun Tm_arrow_7d8d23eda5c5e68a1e9c4bbd2796099d () Term)
(declare-fun Pulse.Class.BoundedIntegers.v@tok () Term)




(declare-fun Tm_abs_faa1351076bca4f1d410c09beaffa289 (Term) Term)

; </end encoding let v>


; encoding sigelt let u


; <Start encoding let u>

(declare-fun Pulse.Class.BoundedIntegers.u (Term) Term)

;;;;;;;;;;;;;;;;{| projectee: bounded_int t |} -> _: fits_t projectee.fits -> Prims.GTot t
(declare-fun Tm_arrow_3b43b8471ab95806a832ed211d989753 (Term) Term)
;;;;;;;;;;;;;;;;{| projectee: bounded_int t |} -> _: fits_t projectee.fits -> Prims.GTot t
(declare-fun Tm_arrow_040749e7f3314accccc12be1c8789783 () Term)
(declare-fun Pulse.Class.BoundedIntegers.u@tok () Term)




(declare-fun Tm_abs_9db473fcaa00e4efba274e066bd6fcdf (Term) Term)

; </end encoding let u>


; encoding sigelt let op_Plus


; <Start encoding let op_Plus>

(declare-fun Pulse.Class.BoundedIntegers.op_Plus (Term) Term)







;;;;;;;;;;;;;;;;y: t -> Prims.Pure t
(declare-fun Tm_arrow_7f16be166d35c07189008553888da040 (Term Term Term) Term)
;;;;;;;;;;;;;;;;x: t -> y: t -> Prims.Pure t
(declare-fun Tm_arrow_b276a8e58b51f46069008a6b915f1fce (Term Term) Term)
;;;;;;;;;;;;;;;;{| projectee: bounded_int t |} -> x: t -> y: t -> Prims.Pure t
(declare-fun Tm_arrow_25c16b6f4aecd86a3b9e544381a99ebd (Term) Term)
;;;;;;;;;;;;;;;;{| projectee: bounded_int t |} -> x: t -> y: t -> Prims.Pure t
(declare-fun Tm_arrow_1093670c4147ebd8baef4abaaaf7e174 () Term)
(declare-fun Pulse.Class.BoundedIntegers.op_Plus@tok () Term)




















(declare-fun Tm_abs_505c9b700f5dda804797fc6511aa37e2 (Term) Term)

; </end encoding let op_Plus>


; encoding sigelt let op_Subtraction


; <Start encoding let op_Subtraction>

(declare-fun Pulse.Class.BoundedIntegers.op_Subtraction (Term) Term)







;;;;;;;;;;;;;;;;y: t -> Prims.Pure t
(declare-fun Tm_arrow_4c3ef3377f300bdc525e5755e4908c81 (Term Term Term) Term)
;;;;;;;;;;;;;;;;x: t -> y: t -> Prims.Pure t
(declare-fun Tm_arrow_a22948daab71287afbfc89555527cfad (Term Term) Term)
;;;;;;;;;;;;;;;;{| projectee: bounded_int t |} -> x: t -> y: t -> Prims.Pure t
(declare-fun Tm_arrow_3df63716551c3b4016aa88ee678f4bf3 (Term) Term)
;;;;;;;;;;;;;;;;{| projectee: bounded_int t |} -> x: t -> y: t -> Prims.Pure t
(declare-fun Tm_arrow_0467a8a9929d74c8a7210fc0761e6a8c () Term)
(declare-fun Pulse.Class.BoundedIntegers.op_Subtraction@tok () Term)




















(declare-fun Tm_abs_247f3cb36b17b51f48b81868489fffc3 (Term) Term)

; </end encoding let op_Subtraction>


; encoding sigelt let op_Less


; <Start encoding let op_Less>

(declare-fun Pulse.Class.BoundedIntegers.op_Less (Term) Term)



;;;;;;;;;;;;;;;;y: t -> b: Prims.bool{b = (projectee.v x < projectee.v y)}
(declare-fun Tm_arrow_21e98d2d10448ac8275ee113995424d9 (Term Term Term) Term)
;;;;;;;;;;;;;;;;x: t -> y: t -> b: Prims.bool{b = (projectee.v x < projectee.v y)}
(declare-fun Tm_arrow_6cf634b0269516239f2d812c0194efd0 (Term Term) Term)
;;;;;;;;;;;;;;;;{| projectee: bounded_int t |} -> x: t -> y: t -> b: Prims.bool{b = (projectee.v x < projectee.v y)}
(declare-fun Tm_arrow_6e88da7f43cb121e9cadcec043378ab3 (Term) Term)
;;;;;;;;;;;;;;;;{| projectee: bounded_int t |} -> x: t -> y: t -> b: Prims.bool{b = (projectee.v x < projectee.v y)}
(declare-fun Tm_arrow_7275a7110336f1195ffb2026ecd4a1f5 () Term)
(declare-fun Pulse.Class.BoundedIntegers.op_Less@tok () Term)












(declare-fun Tm_abs_e6649eba6390f90be22ea1a9dce6d496 (Term) Term)

; </end encoding let op_Less>


; encoding sigelt let op_Less_Equals


; <Start encoding let op_Less_Equals>

(declare-fun Pulse.Class.BoundedIntegers.op_Less_Equals (Term) Term)



;;;;;;;;;;;;;;;;y: t -> b: Prims.bool{b = (projectee.v x <= projectee.v y)}
(declare-fun Tm_arrow_355db2a4711944bdacb66bc19cf69021 (Term Term Term) Term)
;;;;;;;;;;;;;;;;x: t -> y: t -> b: Prims.bool{b = (projectee.v x <= projectee.v y)}
(declare-fun Tm_arrow_622da040fcc8b0824aead41372ce6406 (Term Term) Term)
;;;;;;;;;;;;;;;;{| projectee: bounded_int t |} -> x: t -> y: t   -> b: Prims.bool{b = (projectee.v x <= projectee.v y)}
(declare-fun Tm_arrow_3a0cfb40943194e56861a1b3602a14cc (Term) Term)
;;;;;;;;;;;;;;;;{| projectee: bounded_int t |} -> x: t -> y: t   -> b: Prims.bool{b = (projectee.v x <= projectee.v y)}
(declare-fun Tm_arrow_a417aca3e316b41c5604d18fc54b36aa () Term)
(declare-fun Pulse.Class.BoundedIntegers.op_Less_Equals@tok () Term)












(declare-fun Tm_abs_f4d32f3d705308e5f1a270cda9a29727 (Term) Term)

; </end encoding let op_Less_Equals>

(push) ;; push{2

; Starting query at Pulse.Class.BoundedIntegers.fst(15,6-15,7)

(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)












(declare-fun Tm_refine_362849aac9a21015707b98540ff7ba05 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_362849aac9a21015707b98540ff7ba05 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_362849aac9a21015707b98540ff7ba05 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_362849aac9a21015707b98540ff7ba05))

:named refinement_kinding_Tm_refine_362849aac9a21015707b98540ff7ba05))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_362849aac9a21015707b98540ff7ba05 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(> (BoxInt_proj_0 (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x2)
@x3)
@x4))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Pulse.Class.BoundedIntegers.fst(15,55-15,71); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(15,55-15,71); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
@x2)
@x3)
(Prims.op_Modulus (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x2)
@x3)
@x5)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x2)
@x3)
@x4)))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_362849aac9a21015707b98540ff7ba05 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_362849aac9a21015707b98540ff7ba05))

:named refinement_interpretation_Tm_refine_362849aac9a21015707b98540ff7ba05))
;;;;;;;;;;;;;;;;haseq for Tm_refine_362849aac9a21015707b98540ff7ba05
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_362849aac9a21015707b98540ff7ba05 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_362849aac9a21015707b98540ff7ba05 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_362849aac9a21015707b98540ff7ba05))

:named haseqTm_refine_362849aac9a21015707b98540ff7ba05))








































(declare-fun Tm_refine_a5b51daf4272a3f77a353fced33c772f (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (HasType (Tm_refine_a5b51daf4272a3f77a353fced33c772f @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11)
Tm_type)
 

:pattern ((HasType (Tm_refine_a5b51daf4272a3f77a353fced33c772f @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11)
Tm_type))
:qid refinement_kinding_Tm_refine_a5b51daf4272a3f77a353fced33c772f))

:named refinement_kinding_Tm_refine_a5b51daf4272a3f77a353fced33c772f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_a5b51daf4272a3f77a353fced33c772f @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(> (BoxInt_proj_0 (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x2)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
@x12))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Pulse.Class.BoundedIntegers.fst(15,55-15,71); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(15,55-15,71); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
@x2)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
(Prims.op_Modulus (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x2)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
@x13)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x2)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
@x12)))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_a5b51daf4272a3f77a353fced33c772f @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13)))
:qid refinement_interpretation_Tm_refine_a5b51daf4272a3f77a353fced33c772f))

:named refinement_interpretation_Tm_refine_a5b51daf4272a3f77a353fced33c772f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a5b51daf4272a3f77a353fced33c772f
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_a5b51daf4272a3f77a353fced33c772f @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_a5b51daf4272a3f77a353fced33c772f @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))))
:qid haseqTm_refine_a5b51daf4272a3f77a353fced33c772f))

:named haseqTm_refine_a5b51daf4272a3f77a353fced33c772f))












; Encoding query formula : forall (t: Prims.eqtype) (projectee: Pulse.Class.BoundedIntegers.bounded_int t).
;   (forall (proj_ret: Pulse.Class.BoundedIntegers.bounded_int t).
;       (*  - Subtyping check failed
;   - Expected type Type0 got type Type0
; *)
;       forall (x: t) (y: t).
;         (proj_ret.v y > 0 ==>
;           (forall (any_result: Prims.int).
;               proj_ret.v x == any_result ==>
;               (forall (any_result: Prims.int). proj_ret.v y == any_result ==> proj_ret.v y <> 0))) /\
;         (forall (any_result: Prims.logical).
;             (proj_ret.v y > 0) /\ proj_ret.fits (proj_ret.v x % proj_ret.v y) == any_result ==>
;             (forall (_: t).
;                 proj_ret.v y > 0 ==>
;                 (forall (any_result: Prims.int).
;                     proj_ret.v x == any_result ==>
;                     (forall (any_result: Prims.int).
;                         proj_ret.v y == any_result ==> proj_ret.v y <> 0))) /\
;             (forall (z: _: t{proj_ret.v y > 0 /\ proj_ret.fits (proj_ret.v x % proj_ret.v y)}).
;                 (*  - Could not prove post-condition
; *)
;                 forall (any_result: Prims.int).
;                   proj_ret.v z == any_result ==>
;                   (forall (any_result: Prims.int).
;                       proj_ret.v x == any_result ==>
;                       (forall (any_result: Prims.int).
;                           proj_ret.v y == any_result ==> proj_ret.v y <> 0))))) /\
;   (forall (b: (_: Prims.int -> Prims.prop))
;       (b: (_: t -> Prims.GTot Prims.int))
;       (b: (_: Pulse.Class.BoundedIntegers.fits_t b -> Prims.GTot t))
;       (b: (x: t -> y: t -> Prims.Pure t))
;       (b: (x: t -> y: t -> Prims.Pure t))
;       (b: (x: t -> y: t -> b: Prims.bool{b = (b x < b y)}))
;       (b: (x: t -> y: t -> b: Prims.bool{b = (b x <= b y)}))
;       (b: (x: t -> y: t -> Prims.Pure t))
;       (b: Prims.squash (forall (x: t). {:pattern b x} b (b x))).
;       projectee == Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b ==>
;       (forall (x: t) (y: t).
;           ((Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b).v y > 0 ==>
;             (forall (b: Prims.squash (forall (x: t). {:pattern b x} b (b x)))
;                 (any_result: Pulse.Class.BoundedIntegers.bounded_int t).
;                 Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b == any_result ==>
;                 (forall (b: Prims.squash (forall (x: t). {:pattern b x} b (b x)))
;                     (any_result: Pulse.Class.BoundedIntegers.bounded_int t).
;                     Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b == any_result ==>
;                     (forall (any_result: Prims.int).
;                         (Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b).v x ==
;                         any_result ==>
;                         (forall (b: Prims.squash (forall (x: t). {:pattern b x} b (b x)))
;                             (any_result: Pulse.Class.BoundedIntegers.bounded_int t).
;                             Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b ==
;                             any_result ==>
;                             (forall (any_result: Prims.int).
;                                 (Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b).v y ==
;                                 any_result ==>
;                                 (Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b).v y <>
;                                 0)))))) /\
;           (forall (any_result: Prims.logical).
;               ((Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b).v y > 0) /\
;               (Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b).fits ((Pulse.Class.BoundedIntegers.Mkbounded_int
;                       b b b b b b b b b)
;                     .v x %
;                   (Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b).v y) ==
;               any_result ==>
;               (forall (_: t).
;                   (Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b).v y > 0 ==>
;                   (forall (b: Prims.squash (forall (x: t). {:pattern b x} b (b x)))
;                       (any_result: Pulse.Class.BoundedIntegers.bounded_int t).
;                       Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b == any_result ==>
;                       (forall (b: Prims.squash (forall (x: t). {:pattern b x} b (b x)))
;                           (any_result: Pulse.Class.BoundedIntegers.bounded_int t).
;                           Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b == any_result ==>
;                           (forall (any_result: Prims.int).
;                               (Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b).v x ==
;                               any_result ==>
;                               (forall (b: Prims.squash (forall (x: t). {:pattern b x} b (b x)))
;                                   (any_result: Pulse.Class.BoundedIntegers.bounded_int t).
;                                   Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b ==
;                                   any_result ==>
;                                   (forall (any_result: Prims.int).
;                                       (Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b)
;                                         .v y ==
;                                       any_result ==>
;                                       (Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b)
;                                         .v y <>
;                                       0)))))) /\
;               (forall (z:
;                   _:
;                   t
;                     { (Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b).v y > 0 /\
;                       (Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b).fits ((Pulse.Class.BoundedIntegers.Mkbounded_int
;                               b b b b b b b b b)
;                             .v x %
;                           (Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b).v y) }).
;                   (*  - Could not prove post-condition
; *)
;                   forall (b: Prims.squash (forall (x: t). {:pattern b x} b (b x)))
;                     (any_result: Pulse.Class.BoundedIntegers.bounded_int t).
;                     Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b == any_result ==>
;                     (forall (any_result: Prims.int).
;                         (Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b).v z ==
;                         any_result ==>
;                         (forall (b: Prims.squash (forall (x: t). {:pattern b x} b (b x)))
;                             (any_result: Pulse.Class.BoundedIntegers.bounded_int t).
;                             Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b ==
;                             any_result ==>
;                             (forall (any_result: Prims.int).
;                                 (Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b).v x ==
;                                 any_result ==>
;                                 (forall (b: Prims.squash (forall (x: t). {:pattern b x} b (b x)))
;                                     (any_result: Pulse.Class.BoundedIntegers.bounded_int t).
;                                     Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b ==
;                                     any_result ==>
;                                     (forall (any_result: Prims.int).
;                                         (Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b
;                                         )
;                                           .v y ==
;                                         any_result ==>
;                                         (Pulse.Class.BoundedIntegers.Mkbounded_int b b b b b b b b b
;                                         )
;                                           .v y <>
;                                         0)))))))))


; Context: While encoding a query
; While typechecking the (spliced) top-level declaration `let op_Percent`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(Pulse.Class.BoundedIntegers.bounded_int @x0)))

;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(and (forall ((@x2 Term))
 (! (implies (HasType @x2
(Pulse.Class.BoundedIntegers.bounded_int @x0))

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x3
@x0)
(HasType @x4
@x0))

;; def=Prims.fst(459,77-459,89); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(and (implies 
;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(> (BoxInt_proj_0 (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x2)
@x4))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.int)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x2)
@x3)
@x5)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.int)

;; def=Prims.fst(697,23-697,30); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x2)
@x4)
@x6)
)

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(15,67-15,70)
(or label_1

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(not (= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x2)
@x4)
(BoxInt 0)))
)
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.logical)

;; def=Prims.fst(439,23-439,26); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (Prims.l_and (Prims.b2t (Prims.op_GreaterThan (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x2)
@x4)
(BoxInt 0)))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
@x0)
@x2)
(Prims.op_Modulus (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x2)
@x3)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x2)
@x4))))
@x5)
)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(and 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
@x0)

;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(> (BoxInt_proj_0 (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x2)
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.int)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x2)
@x3)
@x7)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.int)

;; def=Prims.fst(697,23-697,30); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x2)
@x4)
@x8)
)

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(15,27-15,31)
(or label_2

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(not (= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x2)
@x4)
(BoxInt 0)))
)
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))


;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x6 Term))
 (! (implies (HasType @x6
(Tm_refine_362849aac9a21015707b98540ff7ba05 @x0
@x2
@x4
@x3))

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.int)

;; def=Prims.fst(175,35-175,36); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x2)
@x6)
@x7)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.int)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x2)
@x3)
@x8)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.int)

;; def=Prims.fst(697,23-697,30); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x2)
@x4)
@x9)
)

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(15,104-15,107)
(or label_3

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(not (= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x2)
@x4)
(BoxInt 0)))
)
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
)
 
;;no pats
:qid @query.5))
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))

;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Tm_arrow_3a9c22ddc54716caa0276c05e792d97e)

;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b @x0))

;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x4 Term))
 (! (implies (HasType @x4
(Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced @x0
@x2))

;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x5 Term))
 (! (implies (HasType @x5
(Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6 @x0
@x3
@x2))

;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x6 Term))
 (! (implies (HasType @x6
(Tm_arrow_2577039e9f1dfe1304fb604a23098ae5 @x0
@x3
@x2))

;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x7 Term))
 (! (implies (HasType @x7
(Tm_arrow_4e9e5a602a12a0a4955a27552da74126 @x3
@x0))

;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x8 Term))
 (! (implies (HasType @x8
(Tm_arrow_635d2d314f62d2a47af45bf39ae8a382 @x3
@x0))

;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x9 Term))
 (! (implies (HasType @x9
(Tm_arrow_6fd19fbb85c4ddcccfac4c41196f752b @x0
@x2
@x3))

;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(Tm_refine_9b6814fd42e45bedf339f7a6d66952ad @x0
@x2
@x3))

;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= @x1
(Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x11 Term) (@x12 Term))
 (! (implies (and (HasType @x11
@x0)
(HasType @x12
@x0))

;; def=Prims.fst(459,77-459,89); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(and (implies 
;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(> (BoxInt_proj_0 (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
@x12))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x13 Term))
 (! (implies (HasType @x13
(Tm_refine_9b6814fd42e45bedf339f7a6d66952ad @x0
@x2
@x3))

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
(Pulse.Class.BoundedIntegers.bounded_int @x0))

;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
@x14)
)

;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x15 Term))
 (! (implies (HasType @x15
(Tm_refine_9b6814fd42e45bedf339f7a6d66952ad @x0
@x2
@x3))

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
(Pulse.Class.BoundedIntegers.bounded_int @x0))

;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
@x16)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Prims.int)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
@x11)
@x17)
)

;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x18 Term))
 (! (implies (HasType @x18
(Tm_refine_9b6814fd42e45bedf339f7a6d66952ad @x0
@x2
@x3))

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x19 Term))
 (! (implies (and (HasType @x19
(Pulse.Class.BoundedIntegers.bounded_int @x0))

;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
@x19)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x20 Term))
 (! (implies (and (HasType @x20
Prims.int)

;; def=Prims.fst(697,23-697,30); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
@x12)
@x20)
)

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(15,67-15,70)
(or label_4

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(not (= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
@x12)
(BoxInt 0)))
)
)
 
;;no pats
:qid @query.30))
)
 
;;no pats
:qid @query.29))
)
 
;;no pats
:qid @query.28))
)
 
;;no pats
:qid @query.27))
)
 
;;no pats
:qid @query.26))
)
 
;;no pats
:qid @query.25))
)
 
;;no pats
:qid @query.24))
)
 
;;no pats
:qid @query.23))
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
Prims.logical)

;; def=Prims.fst(439,23-439,26); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (Prims.l_and (Prims.b2t (Prims.op_GreaterThan (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
@x12)
(BoxInt 0)))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
(Prims.op_Modulus (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
@x11)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
@x12))))
@x13)
)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(and 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
@x0)

;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(> (BoxInt_proj_0 (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
@x12))
(BoxInt_proj_0 (BoxInt 0)))
)

;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x15 Term))
 (! (implies (HasType @x15
(Tm_refine_9b6814fd42e45bedf339f7a6d66952ad @x0
@x2
@x3))

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
(Pulse.Class.BoundedIntegers.bounded_int @x0))

;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
@x16)
)

;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x17 Term))
 (! (implies (HasType @x17
(Tm_refine_9b6814fd42e45bedf339f7a6d66952ad @x0
@x2
@x3))

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(Pulse.Class.BoundedIntegers.bounded_int @x0))

;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
@x18)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x19 Term))
 (! (implies (and (HasType @x19
Prims.int)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
@x11)
@x19)
)

;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x20 Term))
 (! (implies (HasType @x20
(Tm_refine_9b6814fd42e45bedf339f7a6d66952ad @x0
@x2
@x3))

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x21 Term))
 (! (implies (and (HasType @x21
(Pulse.Class.BoundedIntegers.bounded_int @x0))

;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
@x21)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
Prims.int)

;; def=Prims.fst(697,23-697,30); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
@x12)
@x22)
)

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(15,27-15,31)
(or label_5

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(not (= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
@x12)
(BoxInt 0)))
)
)
 
;;no pats
:qid @query.40))
)
 
;;no pats
:qid @query.39))
)
 
;;no pats
:qid @query.38))
)
 
;;no pats
:qid @query.37))
)
 
;;no pats
:qid @query.36))
)
 
;;no pats
:qid @query.35))
)
 
;;no pats
:qid @query.34))
)
 
;;no pats
:qid @query.33))
)
 
;;no pats
:qid @query.32))


;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x14 Term))
 (! (implies (HasType @x14
(Tm_refine_a5b51daf4272a3f77a353fced33c772f @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x12
@x11))

;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x15 Term))
 (! (implies (HasType @x15
(Tm_refine_9b6814fd42e45bedf339f7a6d66952ad @x0
@x2
@x3))

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
(Pulse.Class.BoundedIntegers.bounded_int @x0))

;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
@x16)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Prims.int)

;; def=Prims.fst(175,35-175,36); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
@x14)
@x17)
)

;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x18 Term))
 (! (implies (HasType @x18
(Tm_refine_9b6814fd42e45bedf339f7a6d66952ad @x0
@x2
@x3))

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x19 Term))
 (! (implies (and (HasType @x19
(Pulse.Class.BoundedIntegers.bounded_int @x0))

;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
@x19)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x20 Term))
 (! (implies (and (HasType @x20
Prims.int)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
@x11)
@x20)
)

;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x21 Term))
 (! (implies (HasType @x21
(Tm_refine_9b6814fd42e45bedf339f7a6d66952ad @x0
@x2
@x3))

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
(Pulse.Class.BoundedIntegers.bounded_int @x0))

;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
@x22)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x23 Term))
 (! (implies (and (HasType @x23
Prims.int)

;; def=Prims.fst(697,23-697,30); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
@x12)
@x23)
)

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(15,104-15,107)
(or label_6

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(not (= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_int @x0
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
@x12)
(BoxInt 0)))
)
)
 
;;no pats
:qid @query.50))
)
 
;;no pats
:qid @query.49))
)
 
;;no pats
:qid @query.48))
)
 
;;no pats
:qid @query.47))
)
 
;;no pats
:qid @query.46))
)
 
;;no pats
:qid @query.45))
)
 
;;no pats
:qid @query.44))
)
 
;;no pats
:qid @query.43))
)
 
;;no pats
:qid @query.42))
)
 
;;no pats
:qid @query.41))
)
)
 
;;no pats
:qid @query.31))
)
)
 
;;no pats
:qid @query.22))
)
 
;;no pats
:qid @query.21))
)
 
;;no pats
:qid @query.20))
)
 
;;no pats
:qid @query.19))
)
 
;;no pats
:qid @query.18))
)
 
;;no pats
:qid @query.17))
)
 
;;no pats
:qid @query.16))
)
 
;;no pats
:qid @query.15))
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Pulse.Class.BoundedIntegers.op_Percent, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, fuel_guarded_inversion_Pulse.Class.BoundedIntegers.bounded_int, refinement_interpretation_Tm_refine_362849aac9a21015707b98540ff7ba05, refinement_interpretation_Tm_refine_a5b51daf4272a3f77a353fced33c772f

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let op_Percent


; <Start encoding let op_Percent>

(declare-fun Pulse.Class.BoundedIntegers.op_Percent (Term) Term)








;;;;;;;;;;;;;;;;y: t -> Prims.Pure t
(declare-fun Tm_arrow_7b8c17b32d64669804431281c6ca7d47 (Term Term Term) Term)
;;;;;;;;;;;;;;;;x: t -> y: t -> Prims.Pure t
(declare-fun Tm_arrow_020905df371fdfc0950da0cf4bd7128b (Term Term) Term)
;;;;;;;;;;;;;;;;{| projectee: bounded_int t |} -> x: t -> y: t -> Prims.Pure t
(declare-fun Tm_arrow_3755f463c5b8e90f706d9a1911e07b57 (Term) Term)
;;;;;;;;;;;;;;;;{| projectee: bounded_int t |} -> x: t -> y: t -> Prims.Pure t
(declare-fun Tm_arrow_c8c19e0f89f5518d4dfd900e13f61bf3 () Term)
(declare-fun Pulse.Class.BoundedIntegers.op_Percent@tok () Term)






















(declare-fun Tm_abs_638c2b0f106355f5884ec0cc8cc19772 (Term) Term)

; </end encoding let op_Percent>

;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (HasType Prims.T@tok
Prims.trivial)
:named typing_tok_Prims.T@tok))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,4-315,14); use=Prims.fst(315,4-315,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.pure_post_ @x0
@x1)
Tm_type))
 

:pattern ((Prims.pure_post_ @x0
@x1))
:qid typing_Prims.pure_post_))

:named typing_Prims.pure_post_))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pure_post; Namespace Prims
(assert (! 
;; def=Prims.fst(316,4-316,13); use=Prims.fst(316,4-316,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.pure_post @x0)
Tm_type))
 

:pattern ((Prims.pure_post @x0))
:qid typing_Prims.pure_post))

:named typing_Prims.pure_post))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (HasType Prims.l_True
Prims.logical)
:named typing_Prims.l_True))
;;;;;;;;;;;;;;;;True interpretation
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (Valid Prims.l_True)
:named true_interp))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Prims.fst(315,31-315,40)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))

:named refinement_kinding_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Prims.fst(315,31-315,40)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x2
@x3))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=Prims.fst(315,18-315,21); use=Prims.fst(315,36-315,39)
(Valid 
;; def=Prims.fst(315,18-315,21); use=Prims.fst(315,36-315,39)
@x3
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))

:named refinement_interpretation_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))

:named kinding_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (HasType Prims.trivial
Tm_type)
:named kinding_Prims.trivial@tok))
;;;;;;;;;;;;;;;;haseq for Tm_refine_8d65e998a07dd53ec478e27017d9dba5
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Prims.fst(315,31-315,40)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1))))
:qid haseqTm_refine_8d65e998a07dd53ec478e27017d9dba5))

:named haseqTm_refine_8d65e998a07dd53ec478e27017d9dba5))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (HasType Prims.l_True
Prims.logical)
:named function_token_typing_Prims.l_True))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! 
;; def=Prims.fst(91,5-91,12); use=Prims.fst(91,5-91,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.trivial)
(is-Prims.T @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.trivial))
:qid fuel_guarded_inversion_Prims.trivial))

:named fuel_guarded_inversion_Prims.trivial))
;;;;;;;;;;;;;;;;Equation for Prims.pure_post'
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,4-315,14); use=Prims.fst(315,4-315,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.pure_post_ @x0
@x1)
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x1
@x0))
 

:pattern ((Prims.pure_post_ @x0
@x1))
:qid equation_Prims.pure_post_))

:named equation_Prims.pure_post_))
;;;;;;;;;;;;;;;;Equation for Prims.pure_post
;;; Fact-ids: Name Prims.pure_post; Namespace Prims
(assert (! 
;; def=Prims.fst(316,4-316,13); use=Prims.fst(316,4-316,13)
(forall ((@x0 Term))
 (! (= (Prims.pure_post @x0)
(Prims.pure_post_ @x0
Prims.l_True))
 

:pattern ((Prims.pure_post @x0))
:qid equation_Prims.pure_post))

:named equation_Prims.pure_post))
;;;;;;;;;;;;;;;;Equation for Prims.l_True
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (= Prims.l_True
(Prims.squash Prims.trivial))
:named equation_Prims.l_True))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (= Prims.T@tok
Prims.T)
:named equality_tok_Prims.T@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! 
;; def=Prims.fst(91,17-91,18); use=Prims.fst(91,17-91,18)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
Prims.T
Prims.trivial)
 

:pattern ((HasTypeFuel @u0
Prims.T
Prims.trivial))
:qid data_typing_intro_Prims.T@tok))

:named data_typing_intro_Prims.T@tok))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (= 116
(Term_constr_id Prims.trivial))
:named constructor_distinct_Prims.trivial))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (= 122
(Term_constr_id Prims.T))
:named constructor_distinct_Prims.T))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! 
;; def=Prims.fst(91,5-91,12); use=Prims.fst(91,5-91,12)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.trivial)
(= Prims.trivial
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.trivial))
:qid Prims_pretyping_e8ffb7d227a1bbf69407a8d2ad2c4c83))

:named Prims_pretyping_e8ffb7d227a1bbf69407a8d2ad2c4c83))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x2
@x3)))
:qid Prims_pre_typing_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))

:named Prims_pre_typing_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x1
@x2))
(and 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x2
@x1))
(HasType (ApplyTT @x0
@x3)
Tm_type))
 

:pattern ((ApplyTT @x0
@x3))
:qid Prims_interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x1
@x2)))
:qid Prims_interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))

:named Prims_interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))
(push) ;; push{2

; Starting query at Pulse.Class.BoundedIntegers.fst(25,0-35,1)

(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (x: Prims.int) (y: Prims.int).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.int).
;     y > 0 /\ (forall (pure_result: Prims.int). pure_result == x % y ==> p pure_result) ==>
;     y <> 0 /\
;     (forall (any_result: Prims.int).
;         y == any_result ==>
;         (forall (any_result: Prims.int).
;             any_result == x % y ==>
;             (forall (return_val: Prims.int). return_val == any_result ==> p return_val)))


; Context: While encoding a query
; While checking for top-level effects
; While typechecking the top-level declaration `let bounded_int_int`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.int)
(HasType @x1
Prims.int))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.pure_post Prims.int))

;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Pulse.Class.BoundedIntegers.fst(33,24-33,44)
(> (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))


;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(33,24-33,44)
(forall ((@x3 Term))
 (! (implies (and (or label_1
(HasType @x3
Prims.int))

;; def=Pulse.Class.BoundedIntegers.fst(15,91-15,107); use=Pulse.Class.BoundedIntegers.fst(33,24-33,44)
(or label_2

;; def=Pulse.Class.BoundedIntegers.fst(15,91-15,107); use=Pulse.Class.BoundedIntegers.fst(33,24-33,44)
(= @x3
(Prims.op_Modulus @x0
@x1))
)
)

;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(33,24-33,44)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(33,24-33,44)
(ApplyTT @x2
@x3)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(33,24-33,44)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(33,24-33,44)
(ApplyTT @x2
@x3)
)
)
:qid @query.2))
)

;; def=Prims.fst(459,77-459,89); use=Pulse.Class.BoundedIntegers.fst(33,24-33,44)
(and 
;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(33,43-33,44)
(or label_3

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(33,43-33,44)
(not (= @x1
(BoxInt 0)))
)


;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(33,24-33,44)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.int)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(33,24-33,44)
(= @x1
@x3)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(33,24-33,44)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.int)

;; def=Pulse.Class.BoundedIntegers.fst(33,24-33,44); use=Pulse.Class.BoundedIntegers.fst(33,24-33,44)
(= @x4
(Prims.op_Modulus @x0
@x1))
)

;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.int)

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x5
@x4)
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x2
@x5)
)
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Pulse.Class.BoundedIntegers.bounded_int_int, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let bounded_int_int


; <Start encoding let bounded_int_int>

(declare-fun Pulse.Class.BoundedIntegers.bounded_int_int (Dummy_sort) Term)

(declare-fun Tm_abs_e55f1efb8e787e6fd29c4794771ae0d5 () Term)

(declare-fun Tm_abs_f8b7175ad4f28c0bc3c11371abe1d18d () Term)


(declare-fun Tm_abs_d5877b1288b93e8d3523f2652f6bfc84 () Term)
(declare-fun Tm_abs_8154ab71284c4a913019d0826babcbe6 () Term)

(declare-fun Tm_refine_0b3b8d7bbce0f3a90c3e185383d0b53a (Term Term) Term)
;;;;;;;;;;;;;;;;x: Prims.int -> y: Prims.int -> b: Prims.bool{b = (FStar.Pervasives.id x < FStar.Pervasives.id y)}
(declare-fun Tm_arrow_199c2f3d92478fe1730905d60819f94b () Term)
(declare-fun Tm_abs_d68e5199f008f106619036deee889e9a () Term)


(declare-fun Tm_refine_7d5d464f1bd9167923b3673db6d066b9 (Term Term) Term)
;;;;;;;;;;;;;;;;x: Prims.int -> y: Prims.int -> b: Prims.bool{b = (FStar.Pervasives.id x <= FStar.Pervasives.id y)}
(declare-fun Tm_arrow_4e06c0d9f21510c76cc9a4373093e200 () Term)
(declare-fun Tm_abs_9526f9b86538a09423bf79a8b2d28a7b () Term)
(declare-fun Tm_abs_3ac41043f5916fda181399393c3d8ba1 () Term)

; </end encoding let bounded_int_int>


; encoding sigelt type Pulse.Class.BoundedIntegers.bounded_unsigned


; <Start encoding type Pulse.Class.BoundedIntegers.bounded_unsigned>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Pulse.Class.BoundedIntegers.bounded_unsigned (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Pulse.Class.BoundedIntegers.bounded_unsigned@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Pulse.Class.BoundedIntegers.Mkbounded_unsigned (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Pulse.Class.BoundedIntegers.Mkbounded_unsigned_t (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Pulse.Class.BoundedIntegers.Mkbounded_unsigned_base (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Pulse.Class.BoundedIntegers.Mkbounded_unsigned_max_bound (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Pulse.Class.BoundedIntegers.Mkbounded_unsigned_static_max_bound (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Pulse.Class.BoundedIntegers.Mkbounded_unsigned_properties (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Pulse.Class.BoundedIntegers.Mkbounded_unsigned
(declare-fun Pulse.Class.BoundedIntegers.Mkbounded_unsigned@tok () Term)
(declare-fun Tm_refine_b485cfaa52da58e164a9cfc59d88e25f (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;[@@@ FStar.Tactics.Typeclasses.no_method]base: bounded_int t ->     max_bound: t ->     [@@@ FStar.Tactics.Typeclasses.no_method]static_max_bound: Prims.bool ->     [@@@ FStar.Tactics.Typeclasses.no_method]properties:       Prims.squash ((forall (x: t). v x >= 0 /\ (static_max_bound ==> v x <= v max_bound)) /\           (forall (x: Prims.nat). x <= v max_bound ==> fits x))   -> bounded_unsigned t
(declare-fun Tm_arrow_84918848398a7a1e094d5fc01239ccfa () Term)

; <start constructor Pulse.Class.BoundedIntegers.bounded_unsigned>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Pulse.Class.BoundedIntegers.bounded_unsigned ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
487)
(exists ((@x0 Term))
 (! (= __@x0
(Pulse.Class.BoundedIntegers.bounded_unsigned @x0))
 
;;no pats
:qid is-Pulse.Class.BoundedIntegers.bounded_unsigned))))

; </end constructor Pulse.Class.BoundedIntegers.bounded_unsigned>


; <start constructor Pulse.Class.BoundedIntegers.Mkbounded_unsigned>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Pulse.Class.BoundedIntegers.Mkbounded_unsigned ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
495)
(= __@x0
(Pulse.Class.BoundedIntegers.Mkbounded_unsigned (Pulse.Class.BoundedIntegers.Mkbounded_unsigned_t __@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_unsigned_base __@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_unsigned_max_bound __@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_unsigned_static_max_bound __@x0)
(Pulse.Class.BoundedIntegers.Mkbounded_unsigned_properties __@x0)))))

; </end constructor Pulse.Class.BoundedIntegers.Mkbounded_unsigned>













; </end encoding type Pulse.Class.BoundedIntegers.bounded_unsigned>


; encoding sigelt val Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__base


; <Start encoding val Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__base>

(declare-fun Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__base (Term Term) Term)
;;;;;;;;;;;;;;;;projectee: bounded_unsigned t -> bounded_int t
(declare-fun Tm_arrow_a10ba1ec19a8dd36fc6eb2c4fe402c44 () Term)
(declare-fun Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__base@tok () Term)

; </end encoding val Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__base>


; encoding sigelt let __proj__Mkbounded_unsigned__item__base


; <Skipped let __proj__Mkbounded_unsigned__item__base/>


; encoding sigelt val Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__max_bound


; <Start encoding val Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__max_bound>

(declare-fun Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__max_bound (Term Term) Term)
;;;;;;;;;;;;;;;;projectee: bounded_unsigned t -> t
(declare-fun Tm_arrow_e44b40bc25deb5c43fa8ee87d65211a6 () Term)
(declare-fun Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__max_bound@tok () Term)

; </end encoding val Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__max_bound>


; encoding sigelt let __proj__Mkbounded_unsigned__item__max_bound


; <Skipped let __proj__Mkbounded_unsigned__item__max_bound/>


; encoding sigelt val Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__static_max_bound


; <Start encoding val Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__static_max_bound>

(declare-fun Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__static_max_bound (Term Term) Term)
;;;;;;;;;;;;;;;;projectee: bounded_unsigned t -> Prims.bool
(declare-fun Tm_arrow_f8678c3edb964106ffd1038cb9dbf166 () Term)
(declare-fun Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__static_max_bound@tok () Term)

; </end encoding val Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__static_max_bound>


; encoding sigelt let __proj__Mkbounded_unsigned__item__static_max_bound


; <Skipped let __proj__Mkbounded_unsigned__item__static_max_bound/>


; encoding sigelt val Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__properties


; <Start encoding val Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__properties>

(declare-fun Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__properties (Term Term) Term)







(declare-fun Tm_refine_18882148e37d449bdb5b34bd0efbc794 (Term Term) Term)
;;;;;;;;;;;;;;;;projectee: bounded_unsigned t   -> Prims.squash ((forall (x: t).             v x >= 0 /\ (projectee.static_max_bound ==> v x <= v projectee.max_bound)) /\         (forall (x: Prims.nat). x <= v projectee.max_bound ==> fits x))
(declare-fun Tm_arrow_3142dc8a0f6dec2dfc43841e090b7f93 () Term)
(declare-fun Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__properties@tok () Term)









; </end encoding val Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__properties>


; encoding sigelt let __proj__Mkbounded_unsigned__item__properties


; <Skipped let __proj__Mkbounded_unsigned__item__properties/>


; encoding sigelt let max_bound


; <Start encoding let max_bound>

(declare-fun Pulse.Class.BoundedIntegers.max_bound (Term) Term)
;;;;;;;;;;;;;;;;{| projectee: bounded_unsigned t |} -> t
(declare-fun Tm_arrow_d74e06376e6603442136cf647afb67dd (Term) Term)
;;;;;;;;;;;;;;;;{| projectee: bounded_unsigned t |} -> t
(declare-fun Tm_arrow_3c4a7be83107ac264d86a592e40ff1ba () Term)
(declare-fun Pulse.Class.BoundedIntegers.max_bound@tok () Term)


(declare-fun Tm_abs_ed0b4d808e3623f25f893f01478211b1 (Term) Term)

; </end encoding let max_bound>


; encoding sigelt let bounded_from_bounded_unsigned


; <Start encoding let bounded_from_bounded_unsigned>

(declare-fun Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned (Term Term) Term)

(declare-fun Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned@tok () Term)

; </end encoding let bounded_from_bounded_unsigned>

;;;;;;;;;;;;;;;;typing_Tm_abs_faa1351076bca4f1d410c09beaffa289
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.v; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(9,4-9,5); use=Pulse.Class.BoundedIntegers.fst(9,4-9,5)
(forall ((@x0 Term))
 (! (HasType (Tm_abs_faa1351076bca4f1d410c09beaffa289 @x0)
(Tm_arrow_4d67790b66356a618f544f985a991be4 @x0))
 

:pattern ((Tm_abs_faa1351076bca4f1d410c09beaffa289 @x0))
:qid typing_Tm_abs_faa1351076bca4f1d410c09beaffa289))

:named typing_Tm_abs_faa1351076bca4f1d410c09beaffa289))
;;;;;;;;;;;;;;;;typing_Tm_abs_f8b7175ad4f28c0bc3c11371abe1d18d
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_int; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_abs_f8b7175ad4f28c0bc3c11371abe1d18d
Tm_arrow_35447810753695c4fe25c93af1251992)
:named typing_Tm_abs_f8b7175ad4f28c0bc3c11371abe1d18d))
;;;;;;;;;;;;;;;;typing_Tm_abs_f4d32f3d705308e5f1a270cda9a29727
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Less_Equals; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,6-14,8); use=Pulse.Class.BoundedIntegers.fst(14,6-14,8)
(forall ((@x0 Term))
 (! (HasType (Tm_abs_f4d32f3d705308e5f1a270cda9a29727 @x0)
(Tm_arrow_3a0cfb40943194e56861a1b3602a14cc @x0))
 

:pattern ((Tm_abs_f4d32f3d705308e5f1a270cda9a29727 @x0))
:qid typing_Tm_abs_f4d32f3d705308e5f1a270cda9a29727))

:named typing_Tm_abs_f4d32f3d705308e5f1a270cda9a29727))
;;;;;;;;;;;;;;;;typing_Tm_abs_ed0b4d808e3623f25f893f01478211b1
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.max_bound; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(41,2-41,11); use=Pulse.Class.BoundedIntegers.fst(41,2-41,11)
(forall ((@x0 Term))
 (! (HasType (Tm_abs_ed0b4d808e3623f25f893f01478211b1 @x0)
(Tm_arrow_d74e06376e6603442136cf647afb67dd @x0))
 

:pattern ((Tm_abs_ed0b4d808e3623f25f893f01478211b1 @x0))
:qid typing_Tm_abs_ed0b4d808e3623f25f893f01478211b1))

:named typing_Tm_abs_ed0b4d808e3623f25f893f01478211b1))
;;;;;;;;;;;;;;;;typing_Tm_abs_e55f1efb8e787e6fd29c4794771ae0d5
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_int; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_abs_e55f1efb8e787e6fd29c4794771ae0d5
Tm_arrow_3a9c22ddc54716caa0276c05e792d97e)
:named typing_Tm_abs_e55f1efb8e787e6fd29c4794771ae0d5))
;;;;;;;;;;;;;;;;typing_Tm_abs_d68e5199f008f106619036deee889e9a
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_int; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_abs_d68e5199f008f106619036deee889e9a
Tm_arrow_199c2f3d92478fe1730905d60819f94b)
:named typing_Tm_abs_d68e5199f008f106619036deee889e9a))
;;;;;;;;;;;;;;;;typing_Tm_abs_d2b36eee66dd8372042cd1c49358f9dc
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.fits; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(8,4-8,8); use=Pulse.Class.BoundedIntegers.fst(8,4-8,8)
(forall ((@x0 Term))
 (! (HasType (Tm_abs_d2b36eee66dd8372042cd1c49358f9dc @x0)
(Tm_arrow_6364954a39281bc3fb895daff7b4187f @x0))
 

:pattern ((Tm_abs_d2b36eee66dd8372042cd1c49358f9dc @x0))
:qid typing_Tm_abs_d2b36eee66dd8372042cd1c49358f9dc))

:named typing_Tm_abs_d2b36eee66dd8372042cd1c49358f9dc))
;;;;;;;;;;;;;;;;typing_Tm_abs_9526f9b86538a09423bf79a8b2d28a7b
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_int; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_abs_9526f9b86538a09423bf79a8b2d28a7b
Tm_arrow_4e06c0d9f21510c76cc9a4373093e200)
:named typing_Tm_abs_9526f9b86538a09423bf79a8b2d28a7b))
;;;;;;;;;;;;;;;;typing_Tm_abs_505c9b700f5dda804797fc6511aa37e2
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Plus; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(11,6-11,7); use=Pulse.Class.BoundedIntegers.fst(11,6-11,7)
(forall ((@x0 Term))
 (! (HasType (Tm_abs_505c9b700f5dda804797fc6511aa37e2 @x0)
(Tm_arrow_25c16b6f4aecd86a3b9e544381a99ebd @x0))
 

:pattern ((Tm_abs_505c9b700f5dda804797fc6511aa37e2 @x0))
:qid typing_Tm_abs_505c9b700f5dda804797fc6511aa37e2))

:named typing_Tm_abs_505c9b700f5dda804797fc6511aa37e2))
;;;;;;;;;;;;;;;;typing_Tm_abs_247f3cb36b17b51f48b81868489fffc3
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Subtraction; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(12,4-12,18); use=Pulse.Class.BoundedIntegers.fst(12,4-12,18)
(forall ((@x0 Term))
 (! (HasType (Tm_abs_247f3cb36b17b51f48b81868489fffc3 @x0)
(Tm_arrow_3df63716551c3b4016aa88ee678f4bf3 @x0))
 

:pattern ((Tm_abs_247f3cb36b17b51f48b81868489fffc3 @x0))
:qid typing_Tm_abs_247f3cb36b17b51f48b81868489fffc3))

:named typing_Tm_abs_247f3cb36b17b51f48b81868489fffc3))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.v; Namespace Pulse.Class.BoundedIntegers
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.eqtype)
(HasType (Pulse.Class.BoundedIntegers.v @x0)
(Tm_arrow_4d67790b66356a618f544f985a991be4 @x0)))
 

:pattern ((Pulse.Class.BoundedIntegers.v @x0))
:qid typing_Pulse.Class.BoundedIntegers.v))
:named typing_Pulse.Class.BoundedIntegers.v))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Subtraction; Namespace Pulse.Class.BoundedIntegers
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.eqtype)
(HasType (Pulse.Class.BoundedIntegers.op_Subtraction @x0)
(Tm_arrow_3df63716551c3b4016aa88ee678f4bf3 @x0)))
 

:pattern ((Pulse.Class.BoundedIntegers.op_Subtraction @x0))
:qid typing_Pulse.Class.BoundedIntegers.op_Subtraction))
:named typing_Pulse.Class.BoundedIntegers.op_Subtraction))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Plus; Namespace Pulse.Class.BoundedIntegers
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.eqtype)
(HasType (Pulse.Class.BoundedIntegers.op_Plus @x0)
(Tm_arrow_25c16b6f4aecd86a3b9e544381a99ebd @x0)))
 

:pattern ((Pulse.Class.BoundedIntegers.op_Plus @x0))
:qid typing_Pulse.Class.BoundedIntegers.op_Plus))
:named typing_Pulse.Class.BoundedIntegers.op_Plus))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Less_Equals; Namespace Pulse.Class.BoundedIntegers
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.eqtype)
(HasType (Pulse.Class.BoundedIntegers.op_Less_Equals @x0)
(Tm_arrow_3a0cfb40943194e56861a1b3602a14cc @x0)))
 

:pattern ((Pulse.Class.BoundedIntegers.op_Less_Equals @x0))
:qid typing_Pulse.Class.BoundedIntegers.op_Less_Equals))
:named typing_Pulse.Class.BoundedIntegers.op_Less_Equals))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.max_bound; Namespace Pulse.Class.BoundedIntegers
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.eqtype)
(HasType (Pulse.Class.BoundedIntegers.max_bound @x0)
(Tm_arrow_d74e06376e6603442136cf647afb67dd @x0)))
 

:pattern ((Pulse.Class.BoundedIntegers.max_bound @x0))
:qid typing_Pulse.Class.BoundedIntegers.max_bound))
:named typing_Pulse.Class.BoundedIntegers.max_bound))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.fits; Namespace Pulse.Class.BoundedIntegers
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.eqtype)
(HasType (Pulse.Class.BoundedIntegers.fits @x0)
(Tm_arrow_6364954a39281bc3fb895daff7b4187f @x0)))
 

:pattern ((Pulse.Class.BoundedIntegers.fits @x0))
:qid typing_Pulse.Class.BoundedIntegers.fits))
:named typing_Pulse.Class.BoundedIntegers.fits))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(25,9-25,24); use=Pulse.Class.BoundedIntegers.fst(25,9-25,24)
(forall ((@u0 Dummy_sort))
 (! (HasType (Pulse.Class.BoundedIntegers.bounded_int_int @u0)
(Pulse.Class.BoundedIntegers.bounded_int Prims.int))
 

:pattern ((Pulse.Class.BoundedIntegers.bounded_int_int @u0))
:qid typing_Pulse.Class.BoundedIntegers.bounded_int_int))

:named typing_Pulse.Class.BoundedIntegers.bounded_int_int))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(52,9-52,38); use=Pulse.Class.BoundedIntegers.fst(52,9-52,38)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(Pulse.Class.BoundedIntegers.bounded_unsigned @x0)))
(HasType (Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1)
(Pulse.Class.BoundedIntegers.bounded_int @x0)))
 

:pattern ((Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
:qid typing_Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned))

:named typing_Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__static_max_bound; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(43,2-43,18); use=Pulse.Class.BoundedIntegers.fst(43,2-43,18)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(Pulse.Class.BoundedIntegers.bounded_unsigned @x0)))
(HasType (Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__static_max_bound @x0
@x1)
Prims.bool))
 

:pattern ((Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__static_max_bound @x0
@x1))
:qid typing_Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__static_max_bound))

:named typing_Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__static_max_bound))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__base; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(40,2-40,6); use=Pulse.Class.BoundedIntegers.fst(40,2-40,6)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(Pulse.Class.BoundedIntegers.bounded_unsigned @x0)))
(HasType (Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__base @x0
@x1)
(Pulse.Class.BoundedIntegers.bounded_int @x0)))
 

:pattern ((Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__base @x0
@x1))
:qid typing_Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__base))

:named typing_Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__base))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (HasType Prims.pos
Tm_type)
:named typing_Prims.pos))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Prims.nat
Tm_type)
:named typing_Prims.nat))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.guard_free; Namespace Prims
(assert (! 
;; def=Prims.fst(346,5-346,15); use=Prims.fst(346,5-346,15)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.guard_free @x0)
Tm_type))
 

:pattern ((Prims.guard_free @x0))
:qid typing_Prims.guard_free))

:named typing_Prims.guard_free))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.SizeT.fits; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(12,4-12,8); use=FStar.SizeT.fsti(12,4-12,8)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.nat)
(HasType (FStar.SizeT.fits @x0)
Prims.prop))
 

:pattern ((FStar.SizeT.fits @x0))
:qid typing_FStar.SizeT.fits))

:named typing_FStar.SizeT.fits))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.id; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(130,4-130,6); use=FStar.Pervasives.fsti(130,4-130,6)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0))
(HasType (FStar.Pervasives.id @x0
@x1)
@x0))
 

:pattern ((FStar.Pervasives.id @x0
@x1))
:qid typing_FStar.Pervasives.id))

:named typing_FStar.Pervasives.id))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Pervasives.Native.option @x0)))
(HasType (FStar.Pervasives.Native.uu___is_Some @x0
@x1)
Prims.bool))
 

:pattern ((FStar.Pervasives.Native.uu___is_Some @x0
@x1))
:qid typing_FStar.Pervasives.Native.uu___is_Some))

:named typing_FStar.Pervasives.Native.uu___is_Some))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_None; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Pervasives.Native.option @x0)))
(HasType (FStar.Pervasives.Native.uu___is_None @x0
@x1)
Prims.bool))
 

:pattern ((FStar.Pervasives.Native.uu___is_None @x0
@x1))
:qid typing_FStar.Pervasives.Native.uu___is_None))

:named typing_FStar.Pervasives.Native.uu___is_None))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Some__item__v; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,11-33,12); use=FStar.Pervasives.Native.fst(33,11-33,12)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x0)))
(HasType (FStar.Pervasives.Native.__proj__Some__item__v @x0
@x1)
@x0))
 

:pattern ((FStar.Pervasives.Native.__proj__Some__item__v @x0
@x1))
:qid typing_FStar.Pervasives.Native.__proj__Some__item__v))

:named typing_FStar.Pervasives.Native.__proj__Some__item__v))
;;;;;;;;;;;;;;;;tot_fun_Tm_abs_d5877b1288b93e8d3523f2652f6bfc84
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_int; Namespace Pulse.Class.BoundedIntegers
(assert (! (and (IsTotFun Tm_abs_d5877b1288b93e8d3523f2652f6bfc84)

;; def=Pulse.Class.BoundedIntegers.fst(29,24-29,45); use=Pulse.Class.BoundedIntegers.fst(29,24-29,45)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Tm_abs_d5877b1288b93e8d3523f2652f6bfc84
@x0))
 

:pattern ((ApplyTT Tm_abs_d5877b1288b93e8d3523f2652f6bfc84
@x0))
:qid tot_fun_Tm_abs_d5877b1288b93e8d3523f2652f6bfc84))
)
:named tot_fun_Tm_abs_d5877b1288b93e8d3523f2652f6bfc84))
;;;;;;;;;;;;;;;;tot_fun_Tm_abs_8154ab71284c4a913019d0826babcbe6
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_int; Namespace Pulse.Class.BoundedIntegers
(assert (! (and (IsTotFun Tm_abs_8154ab71284c4a913019d0826babcbe6)

;; def=Pulse.Class.BoundedIntegers.fst(30,33-30,57); use=Pulse.Class.BoundedIntegers.fst(30,33-30,57)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Tm_abs_8154ab71284c4a913019d0826babcbe6
@x0))
 

:pattern ((ApplyTT Tm_abs_8154ab71284c4a913019d0826babcbe6
@x0))
:qid tot_fun_Tm_abs_8154ab71284c4a913019d0826babcbe6))
)
:named tot_fun_Tm_abs_8154ab71284c4a913019d0826babcbe6))
;;;;;;;;;;;;;;;;tot_fun_Tm_abs_3ac41043f5916fda181399393c3d8ba1
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_int; Namespace Pulse.Class.BoundedIntegers
(assert (! (and (IsTotFun Tm_abs_3ac41043f5916fda181399393c3d8ba1)

;; def=Pulse.Class.BoundedIntegers.fst(33,24-33,44); use=Pulse.Class.BoundedIntegers.fst(33,24-33,44)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Tm_abs_3ac41043f5916fda181399393c3d8ba1
@x0))
 

:pattern ((ApplyTT Tm_abs_3ac41043f5916fda181399393c3d8ba1
@x0))
:qid tot_fun_Tm_abs_3ac41043f5916fda181399393c3d8ba1))
)
:named tot_fun_Tm_abs_3ac41043f5916fda181399393c3d8ba1))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.v; Namespace Pulse.Class.BoundedIntegers
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.v @x0))
 

:pattern ((ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0))
:qid token_correspondence_Pulse.Class.BoundedIntegers.v))
:named token_correspondence_Pulse.Class.BoundedIntegers.v))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Subtraction; Namespace Pulse.Class.BoundedIntegers
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Pulse.Class.BoundedIntegers.op_Subtraction@tok
@x0)
(Pulse.Class.BoundedIntegers.op_Subtraction @x0))
 

:pattern ((ApplyTT Pulse.Class.BoundedIntegers.op_Subtraction@tok
@x0))
:qid token_correspondence_Pulse.Class.BoundedIntegers.op_Subtraction))
:named token_correspondence_Pulse.Class.BoundedIntegers.op_Subtraction))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Plus; Namespace Pulse.Class.BoundedIntegers
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Pulse.Class.BoundedIntegers.op_Plus@tok
@x0)
(Pulse.Class.BoundedIntegers.op_Plus @x0))
 

:pattern ((ApplyTT Pulse.Class.BoundedIntegers.op_Plus@tok
@x0))
:qid token_correspondence_Pulse.Class.BoundedIntegers.op_Plus))
:named token_correspondence_Pulse.Class.BoundedIntegers.op_Plus))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Less_Equals; Namespace Pulse.Class.BoundedIntegers
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
@x0)
(Pulse.Class.BoundedIntegers.op_Less_Equals @x0))
 

:pattern ((ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
@x0))
:qid token_correspondence_Pulse.Class.BoundedIntegers.op_Less_Equals))
:named token_correspondence_Pulse.Class.BoundedIntegers.op_Less_Equals))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.max_bound; Namespace Pulse.Class.BoundedIntegers
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Pulse.Class.BoundedIntegers.max_bound@tok
@x0)
(Pulse.Class.BoundedIntegers.max_bound @x0))
 

:pattern ((ApplyTT Pulse.Class.BoundedIntegers.max_bound@tok
@x0))
:qid token_correspondence_Pulse.Class.BoundedIntegers.max_bound))
:named token_correspondence_Pulse.Class.BoundedIntegers.max_bound))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.fits; Namespace Pulse.Class.BoundedIntegers
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Pulse.Class.BoundedIntegers.fits@tok
@x0)
(Pulse.Class.BoundedIntegers.fits @x0))
 

:pattern ((ApplyTT Pulse.Class.BoundedIntegers.fits@tok
@x0))
:qid token_correspondence_Pulse.Class.BoundedIntegers.fits))
:named token_correspondence_Pulse.Class.BoundedIntegers.fits))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_unsigned; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_unsigned; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(38,6-38,22); use=Pulse.Class.BoundedIntegers.fst(38,6-38,22)
(forall ((@x0 Term))
 (! (= (ApplyTT Pulse.Class.BoundedIntegers.bounded_unsigned@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_unsigned @x0))
 

:pattern ((ApplyTT Pulse.Class.BoundedIntegers.bounded_unsigned@tok
@x0))

:pattern ((Pulse.Class.BoundedIntegers.bounded_unsigned @x0))
:qid token_correspondence_Pulse.Class.BoundedIntegers.bounded_unsigned@tok))

:named token_correspondence_Pulse.Class.BoundedIntegers.bounded_unsigned@tok))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name Prims.pow2; Namespace Prims
(assert (! 
;; def=Prims.fst(708,8-708,12); use=Prims.fst(708,8-708,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasType @x1
Prims.nat)
(HasType (Prims.pow2.fuel_instrumented @u0
@x1)
Prims.pos))
 

:pattern ((Prims.pow2.fuel_instrumented @u0
@x1))
:qid token_correspondence_Prims.pow2.fuel_instrumented))

:named token_correspondence_Prims.pow2.fuel_instrumented))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.id; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(130,4-130,6); use=FStar.Pervasives.fsti(130,4-130,6)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT FStar.Pervasives.id@tok
@x0)
@x1)
(FStar.Pervasives.id @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.id@tok
@x0)
@x1))
:qid token_correspondence_FStar.Pervasives.id))

:named token_correspondence_FStar.Pervasives.id))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@x0 Term))
 (! (= (ApplyTT FStar.Pervasives.Native.option@tok
@x0)
(FStar.Pervasives.Native.option @x0))
 

:pattern ((ApplyTT FStar.Pervasives.Native.option@tok
@x0))

:pattern ((FStar.Pervasives.Native.option @x0))
:qid token_correspondence_FStar.Pervasives.Native.option@tok))

:named token_correspondence_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_unsigned; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_unsigned; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(38,6-38,22); use=Pulse.Class.BoundedIntegers.fst(38,6-38,22)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Pulse.Class.BoundedIntegers.Mkbounded_unsigned @x1
@x2
@x3
@x4
@x5)
(Pulse.Class.BoundedIntegers.bounded_unsigned @x6))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(Pulse.Class.BoundedIntegers.Mkbounded_unsigned @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(Pulse.Class.BoundedIntegers.Mkbounded_unsigned @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(Pulse.Class.BoundedIntegers.Mkbounded_unsigned @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x5
(Pulse.Class.BoundedIntegers.Mkbounded_unsigned @x1
@x2
@x3
@x4
@x5)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Pulse.Class.BoundedIntegers.Mkbounded_unsigned @x1
@x2
@x3
@x4
@x5)
(Pulse.Class.BoundedIntegers.bounded_unsigned @x6)))
:qid subterm_ordering_Pulse.Class.BoundedIntegers.Mkbounded_unsigned))

:named subterm_ordering_Pulse.Class.BoundedIntegers.Mkbounded_unsigned))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Pervasives.Native.Some @x1
@x2))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3)))
:qid subterm_ordering_FStar.Pervasives.Native.Some))

:named subterm_ordering_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Less_Equals; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,28-14,54); use=Pulse.Class.BoundedIntegers.fst(14,28-14,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_dfab8e194ee74e7784430917cf0712da @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_dfab8e194ee74e7784430917cf0712da @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_dfab8e194ee74e7784430917cf0712da))

:named refinement_kinding_Tm_refine_dfab8e194ee74e7784430917cf0712da))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Subtraction; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(7,19-7,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_bdfaeeb7a763850f1f8b0187dc1c53d5 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_bdfaeeb7a763850f1f8b0187dc1c53d5 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_bdfaeeb7a763850f1f8b0187dc1c53d5))

:named refinement_kinding_Tm_refine_bdfaeeb7a763850f1f8b0187dc1c53d5))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_unsigned; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_unsigned; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(45,21-48,3); use=Pulse.Class.BoundedIntegers.fst(45,21-48,3)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_b485cfaa52da58e164a9cfc59d88e25f @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_b485cfaa52da58e164a9cfc59d88e25f @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_b485cfaa52da58e164a9cfc59d88e25f))

:named refinement_kinding_Tm_refine_b485cfaa52da58e164a9cfc59d88e25f))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.SizeT.mod_spec; Namespace FStar.SizeT
(assert (! (HasType Tm_refine_aa6a9e30f1f8ec8644f9ecb60708ad80
Tm_type)
:named refinement_kinding_Tm_refine_aa6a9e30f1f8ec8644f9ecb60708ad80))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.SizeT.v; Namespace FStar.SizeT
(assert (! (HasType Tm_refine_7df43cb9feb536df62477b7b30ce1682
Tm_type)
:named refinement_kinding_Tm_refine_7df43cb9feb536df62477b7b30ce1682))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,28-14,54); use=Pulse.Class.BoundedIntegers.fst(26,4-34,19)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_7d5d464f1bd9167923b3673db6d066b9 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_7d5d464f1bd9167923b3673db6d066b9 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_7d5d464f1bd9167923b3673db6d066b9))

:named refinement_kinding_Tm_refine_7d5d464f1bd9167923b3673db6d066b9))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Plus; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(7,19-7,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_6dedd225cf3741394cc9aa30ee7b03dc @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_6dedd225cf3741394cc9aa30ee7b03dc @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_6dedd225cf3741394cc9aa30ee7b03dc))

:named refinement_kinding_Tm_refine_6dedd225cf3741394cc9aa30ee7b03dc))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Some__item__v; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a))

:named refinement_kinding_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Char.char_of_int; Namespace FStar.Char
(assert (! (HasType Tm_refine_41bb1fe33d2856748d537571528d32a1
Tm_type)
:named refinement_kinding_Tm_refine_41bb1fe33d2856748d537571528d32a1))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(13,27-13,52); use=Pulse.Class.BoundedIntegers.fst(26,4-34,19)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_0b3b8d7bbce0f3a90c3e185383d0b53a @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_0b3b8d7bbce0f3a90c3e185383d0b53a @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_0b3b8d7bbce0f3a90c3e185383d0b53a))

:named refinement_kinding_Tm_refine_0b3b8d7bbce0f3a90c3e185383d0b53a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Less_Equals; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,28-14,54); use=Pulse.Class.BoundedIntegers.fst(14,28-14,54)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_dfab8e194ee74e7784430917cf0712da @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
Prims.bool)

;; def=Pulse.Class.BoundedIntegers.fst(14,37-14,53); use=Pulse.Class.BoundedIntegers.fst(14,37-14,53)
(= @x1
(Prims.op_LessThanOrEqual (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x2)
@x3)
@x4)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x2)
@x3)
@x5)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_dfab8e194ee74e7784430917cf0712da @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_dfab8e194ee74e7784430917cf0712da))

:named refinement_interpretation_Tm_refine_dfab8e194ee74e7784430917cf0712da))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Subtraction; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(7,19-7,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_bdfaeeb7a763850f1f8b0187dc1c53d5 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=Pulse.Class.BoundedIntegers.fst(12,89-12,105); use=Pulse.Class.BoundedIntegers.fst(12,89-12,105)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x2)
@x3)
@x1)
(Prims.op_Subtraction (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x2)
@x3)
@x4)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x2)
@x3)
@x5)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_bdfaeeb7a763850f1f8b0187dc1c53d5 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_bdfaeeb7a763850f1f8b0187dc1c53d5))

:named refinement_interpretation_Tm_refine_bdfaeeb7a763850f1f8b0187dc1c53d5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_unsigned; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_unsigned; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(45,21-48,3); use=Pulse.Class.BoundedIntegers.fst(45,21-48,3)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_b485cfaa52da58e164a9cfc59d88e25f @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Pulse.Class.BoundedIntegers.fst(46,4-46,73); use=Pulse.Class.BoundedIntegers.fst(46,4-46,73)
(forall ((@x6 Term))
 (! (implies (HasType @x6
@x2)

;; def=Pulse.Class.BoundedIntegers.fst(46,19-46,72); use=Pulse.Class.BoundedIntegers.fst(46,19-46,72)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(46,19-46,27); use=Pulse.Class.BoundedIntegers.fst(46,19-46,27)
(>= (BoxInt_proj_0 (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x2)
@x3)
@x6))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Pulse.Class.BoundedIntegers.fst(46,31-46,72); use=Pulse.Class.BoundedIntegers.fst(46,31-46,72)
(implies 
;; def=Pulse.Class.BoundedIntegers.fst(43,2-43,18); use=Pulse.Class.BoundedIntegers.fst(46,32-46,48)
(BoxBool_proj_0 @x4)


;; def=Pulse.Class.BoundedIntegers.fst(46,53-46,71); use=Pulse.Class.BoundedIntegers.fst(46,53-46,71)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x2)
@x3)
@x6))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x2)
@x3)
@x5)))
)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_b485cfaa52da58e164a9cfc59d88e25f.1))


;; def=Pulse.Class.BoundedIntegers.fst(47,4-47,52); use=Pulse.Class.BoundedIntegers.fst(47,4-47,52)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.nat)

;; def=Pulse.Class.BoundedIntegers.fst(47,21-47,37); use=Pulse.Class.BoundedIntegers.fst(47,21-47,37)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
@x6)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x2)
@x3)
@x5)))
)

;; def=Pulse.Class.BoundedIntegers.fst(47,42-47,51); use=Pulse.Class.BoundedIntegers.fst(47,42-47,51)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(47,42-47,51); use=Pulse.Class.BoundedIntegers.fst(47,42-47,51)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.fits@tok
@x2)
@x3)
@x6)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_b485cfaa52da58e164a9cfc59d88e25f.2))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_b485cfaa52da58e164a9cfc59d88e25f @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_b485cfaa52da58e164a9cfc59d88e25f))

:named refinement_interpretation_Tm_refine_b485cfaa52da58e164a9cfc59d88e25f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.SizeT.mod_spec; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(130,29-130,54); use=FStar.SizeT.fsti(130,29-130,54)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_aa6a9e30f1f8ec8644f9ecb60708ad80)
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=FStar.SizeT.fsti(130,36-130,42); use=FStar.SizeT.fsti(130,36-130,42)
(Valid 
;; def=FStar.SizeT.fsti(130,36-130,42); use=FStar.SizeT.fsti(130,36-130,42)
(FStar.SizeT.fits @x1)
)


;; def=FStar.SizeT.fsti(130,46-130,52); use=FStar.SizeT.fsti(130,46-130,52)
(not (= @x1
(BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_aa6a9e30f1f8ec8644f9ecb60708ad80))
:qid refinement_interpretation_Tm_refine_aa6a9e30f1f8ec8644f9ecb60708ad80))

:named refinement_interpretation_Tm_refine_aa6a9e30f1f8ec8644f9ecb60708ad80))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.SizeT.v; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(24,20-24,23); use=FStar.SizeT.fsti(24,20-24,23)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_7df43cb9feb536df62477b7b30ce1682)
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=FStar.SizeT.fsti(26,21-26,27); use=FStar.SizeT.fsti(26,21-26,27)
(Valid 
;; def=FStar.SizeT.fsti(26,21-26,27); use=FStar.SizeT.fsti(26,21-26,27)
(FStar.SizeT.fits @x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_7df43cb9feb536df62477b7b30ce1682))
:qid refinement_interpretation_Tm_refine_7df43cb9feb536df62477b7b30ce1682))

:named refinement_interpretation_Tm_refine_7df43cb9feb536df62477b7b30ce1682))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,28-14,54); use=Pulse.Class.BoundedIntegers.fst(26,4-34,19)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_7d5d464f1bd9167923b3673db6d066b9 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.bool)

;; def=Pulse.Class.BoundedIntegers.fst(14,37-14,53); use=Pulse.Class.BoundedIntegers.fst(26,4-34,19)
(= @x1
(Prims.op_LessThanOrEqual (ApplyTT (ApplyTT FStar.Pervasives.id@tok
Prims.int)
@x2)
(ApplyTT (ApplyTT FStar.Pervasives.id@tok
Prims.int)
@x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_7d5d464f1bd9167923b3673db6d066b9 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_7d5d464f1bd9167923b3673db6d066b9))

:named refinement_interpretation_Tm_refine_7d5d464f1bd9167923b3673db6d066b9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Plus; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(7,19-7,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_6dedd225cf3741394cc9aa30ee7b03dc @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=Pulse.Class.BoundedIntegers.fst(11,80-11,96); use=Pulse.Class.BoundedIntegers.fst(11,80-11,96)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x2)
@x3)
@x1)
(Prims.op_Addition (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x2)
@x3)
@x4)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x2)
@x3)
@x5)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_6dedd225cf3741394cc9aa30ee7b03dc @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_6dedd225cf3741394cc9aa30ee7b03dc))

:named refinement_interpretation_Tm_refine_6dedd225cf3741394cc9aa30ee7b03dc))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Some__item__v; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x2))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.option @x2))

;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x2
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x2)))
:qid refinement_interpretation_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a))

:named refinement_interpretation_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Char.char_of_int; Namespace FStar.Char
(assert (! 
;; def=FStar.Char.fsti(57,16-57,70); use=FStar.Char.fsti(57,16-57,70)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_41bb1fe33d2856748d537571528d32a1)
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=FStar.Char.fsti(57,24-57,68); use=FStar.Char.fsti(57,24-57,68)
(or 
;; def=FStar.Char.fsti(57,24-57,34); use=FStar.Char.fsti(57,24-57,34)
(< (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 55295)))


;; def=FStar.Char.fsti(57,38-57,68); use=FStar.Char.fsti(57,38-57,68)
(and 
;; def=FStar.Char.fsti(57,39-57,50); use=FStar.Char.fsti(57,39-57,50)
(>= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 57344)))


;; def=FStar.Char.fsti(57,54-57,67); use=FStar.Char.fsti(57,54-57,67)
(<= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 1114111)))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_41bb1fe33d2856748d537571528d32a1))
:qid refinement_interpretation_Tm_refine_41bb1fe33d2856748d537571528d32a1))

:named refinement_interpretation_Tm_refine_41bb1fe33d2856748d537571528d32a1))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(13,27-13,52); use=Pulse.Class.BoundedIntegers.fst(26,4-34,19)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_0b3b8d7bbce0f3a90c3e185383d0b53a @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.bool)

;; def=Pulse.Class.BoundedIntegers.fst(13,36-13,51); use=Pulse.Class.BoundedIntegers.fst(26,4-34,19)
(= @x1
(Prims.op_LessThan (ApplyTT (ApplyTT FStar.Pervasives.id@tok
Prims.int)
@x2)
(ApplyTT (ApplyTT FStar.Pervasives.id@tok
Prims.int)
@x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_0b3b8d7bbce0f3a90c3e185383d0b53a @x2
@x3)))
:qid refinement_interpretation_Tm_refine_0b3b8d7bbce0f3a90c3e185383d0b53a))

:named refinement_interpretation_Tm_refine_0b3b8d7bbce0f3a90c3e185383d0b53a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_unsigned; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_unsigned; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(38,6-38,22); use=Pulse.Class.BoundedIntegers.fst(38,6-38,22)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (Pulse.Class.BoundedIntegers.Mkbounded_unsigned_t (Pulse.Class.BoundedIntegers.Mkbounded_unsigned @x0
@x1
@x2
@x3
@x4))
@x0)
 

:pattern ((Pulse.Class.BoundedIntegers.Mkbounded_unsigned @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_unsigned_t))

:named projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_unsigned_t))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_unsigned; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_unsigned; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(38,6-38,22); use=Pulse.Class.BoundedIntegers.fst(38,6-38,22)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (Pulse.Class.BoundedIntegers.Mkbounded_unsigned_static_max_bound (Pulse.Class.BoundedIntegers.Mkbounded_unsigned @x0
@x1
@x2
@x3
@x4))
@x3)
 

:pattern ((Pulse.Class.BoundedIntegers.Mkbounded_unsigned @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_unsigned_static_max_bound))

:named projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_unsigned_static_max_bound))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_unsigned; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_unsigned; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(38,6-38,22); use=Pulse.Class.BoundedIntegers.fst(38,6-38,22)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (Pulse.Class.BoundedIntegers.Mkbounded_unsigned_properties (Pulse.Class.BoundedIntegers.Mkbounded_unsigned @x0
@x1
@x2
@x3
@x4))
@x4)
 

:pattern ((Pulse.Class.BoundedIntegers.Mkbounded_unsigned @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_unsigned_properties))

:named projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_unsigned_properties))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_unsigned; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_unsigned; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(38,6-38,22); use=Pulse.Class.BoundedIntegers.fst(38,6-38,22)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (Pulse.Class.BoundedIntegers.Mkbounded_unsigned_max_bound (Pulse.Class.BoundedIntegers.Mkbounded_unsigned @x0
@x1
@x2
@x3
@x4))
@x2)
 

:pattern ((Pulse.Class.BoundedIntegers.Mkbounded_unsigned @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_unsigned_max_bound))

:named projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_unsigned_max_bound))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_unsigned; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_unsigned; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(38,6-38,22); use=Pulse.Class.BoundedIntegers.fst(38,6-38,22)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (Pulse.Class.BoundedIntegers.Mkbounded_unsigned_base (Pulse.Class.BoundedIntegers.Mkbounded_unsigned @x0
@x1
@x2
@x3
@x4))
@x1)
 

:pattern ((Pulse.Class.BoundedIntegers.Mkbounded_unsigned @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_unsigned_base))

:named projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_unsigned_base))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.Some_v (FStar.Pervasives.Native.Some @x0
@x1))
@x1)
 

:pattern ((FStar.Pervasives.Native.Some @x0
@x1))
:qid projection_inverse_FStar.Pervasives.Native.Some_v))

:named projection_inverse_FStar.Pervasives.Native.Some_v))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.Some_a (FStar.Pervasives.Native.Some @x0
@x1))
@x0)
 

:pattern ((FStar.Pervasives.Native.Some @x0
@x1))
:qid projection_inverse_FStar.Pervasives.Native.Some_a))

:named projection_inverse_FStar.Pervasives.Native.Some_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@x0 Term))
 (! (= (FStar.Pervasives.Native.None_a (FStar.Pervasives.Native.None @x0))
@x0)
 

:pattern ((FStar.Pervasives.Native.None @x0))
:qid projection_inverse_FStar.Pervasives.Native.None_a))

:named projection_inverse_FStar.Pervasives.Native.None_a))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__static_max_bound; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(43,2-43,18); use=Pulse.Class.BoundedIntegers.fst(43,2-43,18)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__static_max_bound @x0
@x1)
(Pulse.Class.BoundedIntegers.Mkbounded_unsigned_static_max_bound @x1))
 

:pattern ((Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__static_max_bound @x0
@x1))
:qid proj_equation_Pulse.Class.BoundedIntegers.Mkbounded_unsigned_static_max_bound))

:named proj_equation_Pulse.Class.BoundedIntegers.Mkbounded_unsigned_static_max_bound))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__base; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(40,2-40,6); use=Pulse.Class.BoundedIntegers.fst(40,2-40,6)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__base @x0
@x1)
(Pulse.Class.BoundedIntegers.Mkbounded_unsigned_base @x1))
 

:pattern ((Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__base @x0
@x1))
:qid proj_equation_Pulse.Class.BoundedIntegers.Mkbounded_unsigned_base))

:named proj_equation_Pulse.Class.BoundedIntegers.Mkbounded_unsigned_base))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Some__item__v; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,11-33,12); use=FStar.Pervasives.Native.fst(33,11-33,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.__proj__Some__item__v @x0
@x1)
(FStar.Pervasives.Native.Some_v @x1))
 

:pattern ((FStar.Pervasives.Native.__proj__Some__item__v @x0
@x1))
:qid proj_equation_FStar.Pervasives.Native.Some_v))

:named proj_equation_FStar.Pervasives.Native.Some_v))
;;; Fact-ids: Name Prims.op_Multiply; Namespace Prims
(assert (! 
;; def=Prims.fst(540,4-540,15); use=Prims.fst(540,4-540,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_Multiply @x0
@x1)
(BoxInt (* (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_Multiply @x0
@x1))
:qid primitive_Prims.op_Multiply))

:named primitive_Prims.op_Multiply))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_unsigned; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_unsigned; Namespace Pulse.Class.BoundedIntegers
(assert (! (is-Tm_arrow (PreType Pulse.Class.BoundedIntegers.bounded_unsigned@tok))
:named pre_kinding_Pulse.Class.BoundedIntegers.bounded_unsigned@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (is-Tm_arrow (PreType FStar.Pervasives.Native.option@tok))
:named pre_kinding_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;Lemma: FStar.UInt.pow2_values
;;; Fact-ids: Name FStar.UInt.pow2_values; Namespace FStar.UInt
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.nat)
(let ((@lb1 @x0))
(ite (= @lb1
(BoxInt 0))

;; def=FStar.UInt.fsti(28,11-28,14); use=FStar.UInt.fsti(28,11-28,14)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 1))

(ite (= @lb1
(BoxInt 1))

;; def=FStar.UInt.fsti(29,11-29,14); use=FStar.UInt.fsti(29,11-29,14)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 2))

(ite (= @lb1
(BoxInt 8))

;; def=FStar.UInt.fsti(30,11-30,16); use=FStar.UInt.fsti(30,11-30,16)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 256))

(ite (= @lb1
(BoxInt 16))

;; def=FStar.UInt.fsti(31,11-31,18); use=FStar.UInt.fsti(31,11-31,18)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 65536))

(ite (= @lb1
(BoxInt 31))

;; def=FStar.UInt.fsti(32,11-32,23); use=FStar.UInt.fsti(32,11-32,23)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 2147483648))

(ite (= @lb1
(BoxInt 32))

;; def=FStar.UInt.fsti(33,11-33,23); use=FStar.UInt.fsti(33,11-33,23)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 4294967296))

(ite (= @lb1
(BoxInt 63))

;; def=FStar.UInt.fsti(34,11-34,32); use=FStar.UInt.fsti(34,11-34,32)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 9223372036854775808))

(ite (= @lb1
(BoxInt 64))

;; def=FStar.UInt.fsti(35,11-35,33); use=FStar.UInt.fsti(35,11-35,33)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 18446744073709551616))

(implies (= @lb1
(BoxInt 128))

;; def=FStar.UInt.fsti(36,12-36,49); use=FStar.UInt.fsti(36,12-36,49)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 340282366920938463463374607431768211456))
)))))))))))
 

:pattern ((Prims.pow2.fuel_instrumented ZFuel
@x0))
:qid lemma_FStar.UInt.pow2_values))
:named lemma_FStar.UInt.pow2_values))
;;;;;;;;;;;;;;;;Lemma: FStar.SizeT.fits_lte
;;; Fact-ids: Name FStar.SizeT.fits_lte; Namespace FStar.SizeT
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Prims.nat)

;; def=FStar.SizeT.fsti(105,13-105,19); use=FStar.SizeT.fsti(105,13-105,19)
(<= (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))


;; def=FStar.SizeT.fsti(105,23-105,29); use=FStar.SizeT.fsti(105,23-105,29)
(Valid 
;; def=FStar.SizeT.fsti(105,23-105,29); use=FStar.SizeT.fsti(105,23-105,29)
(FStar.SizeT.fits @x1)
)
)

;; def=FStar.SizeT.fsti(106,11-106,19); use=FStar.SizeT.fsti(106,11-106,19)
(Valid 
;; def=FStar.SizeT.fsti(106,11-106,19); use=FStar.SizeT.fsti(106,11-106,19)
(FStar.SizeT.fits @x0)
)
)
 

:pattern ((FStar.SizeT.fits @x0) (FStar.SizeT.fits @x1))
:qid lemma_FStar.SizeT.fits_lte))
:named lemma_FStar.SizeT.fits_lte))
;;;;;;;;;;;;;;;;Lemma: FStar.SizeT.fits_at_least_16
;;; Fact-ids: Name FStar.SizeT.fits_at_least_16; Namespace FStar.SizeT
(assert (! (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Prims.nat)

;; def=FStar.SizeT.fsti(19,14-19,25); use=FStar.SizeT.fsti(19,14-19,25)
(< (BoxInt_proj_0 @x0)
(BoxInt_proj_0 (Prims.pow2.fuel_instrumented ZFuel
(BoxInt 16))))
)

;; def=FStar.SizeT.fsti(20,13-20,19); use=FStar.SizeT.fsti(20,13-20,19)
(Valid 
;; def=FStar.SizeT.fsti(20,13-20,19); use=FStar.SizeT.fsti(20,13-20,19)
(FStar.SizeT.fits @x0)
)
)
 

:pattern ((FStar.SizeT.fits @x0))
:qid lemma_FStar.SizeT.fits_at_least_16))
:named lemma_FStar.SizeT.fits_at_least_16))
;;;;;;;;;;;;;;;;Lemma: FStar.Pervasives.invertOption
;;; Fact-ids: Name FStar.Pervasives.invertOption; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)

;; def=FStar.Pervasives.fsti(727,37-727,79); use=FStar.Pervasives.fsti(727,37-727,79)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.Pervasives.Native.option @x0))

;; def=FStar.Pervasives.fsti(727,60-727,78); use=FStar.Pervasives.fsti(727,60-727,78)
(or 
;; def=FStar.Pervasives.fsti(727,60-727,67); use=FStar.Pervasives.fsti(727,60-727,67)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None @x0
@x1))


;; def=FStar.Pervasives.fsti(727,71-727,78); use=FStar.Pervasives.fsti(727,71-727,78)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x0
@x1))
)
)
 
;;no pats
:qid lemma_FStar.Pervasives.invertOption.1))
)
 

:pattern ((FStar.Pervasives.Native.option @x0))
:qid lemma_FStar.Pervasives.invertOption))
:named lemma_FStar.Pervasives.invertOption))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_f878efc3fc7d12ae462719c6239b3758
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.fits; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_arrow_f878efc3fc7d12ae462719c6239b3758
Tm_type)
:named kinding_Tm_arrow_f878efc3fc7d12ae462719c6239b3758))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_d74e06376e6603442136cf647afb67dd
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.max_bound; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(38,6-38,22); use=Pulse.Class.BoundedIntegers.fst(38,24-41,11)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_d74e06376e6603442136cf647afb67dd @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_d74e06376e6603442136cf647afb67dd @x0)
Tm_type))
:qid kinding_Tm_arrow_d74e06376e6603442136cf647afb67dd))

:named kinding_Tm_arrow_d74e06376e6603442136cf647afb67dd))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_b276a8e58b51f46069008a6b915f1fce
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Plus; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-7,20)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_b276a8e58b51f46069008a6b915f1fce @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_b276a8e58b51f46069008a6b915f1fce @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_b276a8e58b51f46069008a6b915f1fce))

:named kinding_Tm_arrow_b276a8e58b51f46069008a6b915f1fce))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_a417aca3e316b41c5604d18fc54b36aa
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Less_Equals; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_arrow_a417aca3e316b41c5604d18fc54b36aa
Tm_type)
:named kinding_Tm_arrow_a417aca3e316b41c5604d18fc54b36aa))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_a22948daab71287afbfc89555527cfad
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Subtraction; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-7,20)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_a22948daab71287afbfc89555527cfad @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_a22948daab71287afbfc89555527cfad @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_a22948daab71287afbfc89555527cfad))

:named kinding_Tm_arrow_a22948daab71287afbfc89555527cfad))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_99724436653747ac6f5a6a00c64ff8bc
;;; Fact-ids: Name Prims.returnM; Namespace Prims
(assert (! (HasType Tm_arrow_99724436653747ac6f5a6a00c64ff8bc
Tm_type)
:named kinding_Tm_arrow_99724436653747ac6f5a6a00c64ff8bc))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_7f16be166d35c07189008553888da040
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Plus; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-7,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_arrow_7f16be166d35c07189008553888da040 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_arrow_7f16be166d35c07189008553888da040 @x0
@x1
@x2)
Tm_type))
:qid kinding_Tm_arrow_7f16be166d35c07189008553888da040))

:named kinding_Tm_arrow_7f16be166d35c07189008553888da040))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_7d8d23eda5c5e68a1e9c4bbd2796099d
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.v; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_arrow_7d8d23eda5c5e68a1e9c4bbd2796099d
Tm_type)
:named kinding_Tm_arrow_7d8d23eda5c5e68a1e9c4bbd2796099d))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_6364954a39281bc3fb895daff7b4187f
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.fits; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-8,21); use=Pulse.Class.BoundedIntegers.fst(8,4-8,8)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_6364954a39281bc3fb895daff7b4187f @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_6364954a39281bc3fb895daff7b4187f @x0)
Tm_type))
:qid kinding_Tm_arrow_6364954a39281bc3fb895daff7b4187f))

:named kinding_Tm_arrow_6364954a39281bc3fb895daff7b4187f))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_622da040fcc8b0824aead41372ce6406
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Less_Equals; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-14,8)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_622da040fcc8b0824aead41372ce6406 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_622da040fcc8b0824aead41372ce6406 @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_622da040fcc8b0824aead41372ce6406))

:named kinding_Tm_arrow_622da040fcc8b0824aead41372ce6406))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_4e06c0d9f21510c76cc9a4373093e200
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_int; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_arrow_4e06c0d9f21510c76cc9a4373093e200
Tm_type)
:named kinding_Tm_arrow_4e06c0d9f21510c76cc9a4373093e200))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_4d67790b66356a618f544f985a991be4
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.v; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,19-9,5)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_4d67790b66356a618f544f985a991be4 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_4d67790b66356a618f544f985a991be4 @x0)
Tm_type))
:qid kinding_Tm_arrow_4d67790b66356a618f544f985a991be4))

:named kinding_Tm_arrow_4d67790b66356a618f544f985a991be4))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_4c3ef3377f300bdc525e5755e4908c81
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Subtraction; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-7,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_arrow_4c3ef3377f300bdc525e5755e4908c81 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_arrow_4c3ef3377f300bdc525e5755e4908c81 @x0
@x1
@x2)
Tm_type))
:qid kinding_Tm_arrow_4c3ef3377f300bdc525e5755e4908c81))

:named kinding_Tm_arrow_4c3ef3377f300bdc525e5755e4908c81))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_3df63716551c3b4016aa88ee678f4bf3
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Subtraction; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,19-12,18)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_3df63716551c3b4016aa88ee678f4bf3 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_3df63716551c3b4016aa88ee678f4bf3 @x0)
Tm_type))
:qid kinding_Tm_arrow_3df63716551c3b4016aa88ee678f4bf3))

:named kinding_Tm_arrow_3df63716551c3b4016aa88ee678f4bf3))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_3c4a7be83107ac264d86a592e40ff1ba
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.max_bound; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_arrow_3c4a7be83107ac264d86a592e40ff1ba
Tm_type)
:named kinding_Tm_arrow_3c4a7be83107ac264d86a592e40ff1ba))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_3a0cfb40943194e56861a1b3602a14cc
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Less_Equals; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,19-14,8)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_3a0cfb40943194e56861a1b3602a14cc @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_3a0cfb40943194e56861a1b3602a14cc @x0)
Tm_type))
:qid kinding_Tm_arrow_3a0cfb40943194e56861a1b3602a14cc))

:named kinding_Tm_arrow_3a0cfb40943194e56861a1b3602a14cc))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_355db2a4711944bdacb66bc19cf69021
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Less_Equals; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-14,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_arrow_355db2a4711944bdacb66bc19cf69021 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_arrow_355db2a4711944bdacb66bc19cf69021 @x0
@x1
@x2)
Tm_type))
:qid kinding_Tm_arrow_355db2a4711944bdacb66bc19cf69021))

:named kinding_Tm_arrow_355db2a4711944bdacb66bc19cf69021))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_35447810753695c4fe25c93af1251992
;;; Fact-ids: Name Prims.abs; Namespace Prims
(assert (! (HasType Tm_arrow_35447810753695c4fe25c93af1251992
Tm_type)
:named kinding_Tm_arrow_35447810753695c4fe25c93af1251992))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_25c16b6f4aecd86a3b9e544381a99ebd
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Plus; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,19-11,7)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_25c16b6f4aecd86a3b9e544381a99ebd @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_25c16b6f4aecd86a3b9e544381a99ebd @x0)
Tm_type))
:qid kinding_Tm_arrow_25c16b6f4aecd86a3b9e544381a99ebd))

:named kinding_Tm_arrow_25c16b6f4aecd86a3b9e544381a99ebd))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_199c2f3d92478fe1730905d60819f94b
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_int; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_arrow_199c2f3d92478fe1730905d60819f94b
Tm_type)
:named kinding_Tm_arrow_199c2f3d92478fe1730905d60819f94b))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_1093670c4147ebd8baef4abaaaf7e174
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Plus; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_arrow_1093670c4147ebd8baef4abaaaf7e174
Tm_type)
:named kinding_Tm_arrow_1093670c4147ebd8baef4abaaaf7e174))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_0467a8a9929d74c8a7210fc0761e6a8c
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Subtraction; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_arrow_0467a8a9929d74c8a7210fc0761e6a8c
Tm_type)
:named kinding_Tm_arrow_0467a8a9929d74c8a7210fc0761e6a8c))
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_unsigned; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_unsigned; Namespace Pulse.Class.BoundedIntegers
(assert (! (and (IsTotFun Pulse.Class.BoundedIntegers.bounded_unsigned@tok)

;; def=Pulse.Class.BoundedIntegers.fst(38,6-38,22); use=Pulse.Class.BoundedIntegers.fst(38,6-38,22)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.eqtype)
(HasType (Pulse.Class.BoundedIntegers.bounded_unsigned @x0)
Tm_type))
 

:pattern ((Pulse.Class.BoundedIntegers.bounded_unsigned @x0))
:qid kinding_Pulse.Class.BoundedIntegers.bounded_unsigned@tok))
)
:named kinding_Pulse.Class.BoundedIntegers.bounded_unsigned@tok))
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (and (IsTotFun FStar.Pervasives.Native.option@tok)

;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Pervasives.Native.option @x0)
Tm_type))
 

:pattern ((FStar.Pervasives.Native.option @x0))
:qid kinding_FStar.Pervasives.Native.option@tok))
)
:named kinding_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_faa1351076bca4f1d410c09beaffa289
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.v; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(9,4-9,5); use=Pulse.Class.BoundedIntegers.fst(9,4-9,5)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (Tm_abs_faa1351076bca4f1d410c09beaffa289 @x1)
@x0)
(let ((@lb2 @x0))
(Pulse.Class.BoundedIntegers.Mkbounded_int_v @lb2)))
 

:pattern ((ApplyTT (Tm_abs_faa1351076bca4f1d410c09beaffa289 @x1)
@x0))
:qid interpretation_Tm_abs_faa1351076bca4f1d410c09beaffa289))

:named interpretation_Tm_abs_faa1351076bca4f1d410c09beaffa289))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_f8b7175ad4f28c0bc3c11371abe1d18d
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=FStar.Pervasives.fsti(130,31-130,32); use=Pulse.Class.BoundedIntegers.fst(27,8-27,10)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_f8b7175ad4f28c0bc3c11371abe1d18d
@x0)
@x0)
 

:pattern ((ApplyTT Tm_abs_f8b7175ad4f28c0bc3c11371abe1d18d
@x0))
:qid interpretation_Tm_abs_f8b7175ad4f28c0bc3c11371abe1d18d))

:named interpretation_Tm_abs_f8b7175ad4f28c0bc3c11371abe1d18d))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_f4d32f3d705308e5f1a270cda9a29727
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Less_Equals; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,6-14,8); use=Pulse.Class.BoundedIntegers.fst(14,6-14,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (Tm_abs_f4d32f3d705308e5f1a270cda9a29727 @x1)
@x0)
(let ((@lb2 @x0))
(Pulse.Class.BoundedIntegers.Mkbounded_int_op_Less_Equals @lb2)))
 

:pattern ((ApplyTT (Tm_abs_f4d32f3d705308e5f1a270cda9a29727 @x1)
@x0))
:qid interpretation_Tm_abs_f4d32f3d705308e5f1a270cda9a29727))

:named interpretation_Tm_abs_f4d32f3d705308e5f1a270cda9a29727))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_ed0b4d808e3623f25f893f01478211b1
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.max_bound; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(41,2-41,11); use=Pulse.Class.BoundedIntegers.fst(41,2-41,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (Tm_abs_ed0b4d808e3623f25f893f01478211b1 @x1)
@x0)
(let ((@lb2 @x0))
(Pulse.Class.BoundedIntegers.Mkbounded_unsigned_max_bound @lb2)))
 

:pattern ((ApplyTT (Tm_abs_ed0b4d808e3623f25f893f01478211b1 @x1)
@x0))
:qid interpretation_Tm_abs_ed0b4d808e3623f25f893f01478211b1))

:named interpretation_Tm_abs_ed0b4d808e3623f25f893f01478211b1))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_e55f1efb8e787e6fd29c4794771ae0d5
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(26,21-26,25); use=Pulse.Class.BoundedIntegers.fst(26,21-26,25)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_e55f1efb8e787e6fd29c4794771ae0d5
@x0)
Prims.l_True)
 

:pattern ((ApplyTT Tm_abs_e55f1efb8e787e6fd29c4794771ae0d5
@x0))
:qid interpretation_Tm_abs_e55f1efb8e787e6fd29c4794771ae0d5))

:named interpretation_Tm_abs_e55f1efb8e787e6fd29c4794771ae0d5))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_d68e5199f008f106619036deee889e9a
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(31,24-31,45); use=Pulse.Class.BoundedIntegers.fst(31,24-31,45)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_d68e5199f008f106619036deee889e9a
@x0)
@x1)
(Prims.op_LessThan @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_d68e5199f008f106619036deee889e9a
@x0)
@x1))
:qid interpretation_Tm_abs_d68e5199f008f106619036deee889e9a))

:named interpretation_Tm_abs_d68e5199f008f106619036deee889e9a))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_d5877b1288b93e8d3523f2652f6bfc84
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(29,24-29,45); use=Pulse.Class.BoundedIntegers.fst(29,24-29,45)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_d5877b1288b93e8d3523f2652f6bfc84
@x0)
@x1)
(Prims.op_Addition @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_d5877b1288b93e8d3523f2652f6bfc84
@x0)
@x1))
:qid interpretation_Tm_abs_d5877b1288b93e8d3523f2652f6bfc84))

:named interpretation_Tm_abs_d5877b1288b93e8d3523f2652f6bfc84))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_d2b36eee66dd8372042cd1c49358f9dc
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.fits; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(8,4-8,8); use=Pulse.Class.BoundedIntegers.fst(8,4-8,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (Tm_abs_d2b36eee66dd8372042cd1c49358f9dc @x1)
@x0)
(let ((@lb2 @x0))
(Pulse.Class.BoundedIntegers.Mkbounded_int_fits @lb2)))
 

:pattern ((ApplyTT (Tm_abs_d2b36eee66dd8372042cd1c49358f9dc @x1)
@x0))
:qid interpretation_Tm_abs_d2b36eee66dd8372042cd1c49358f9dc))

:named interpretation_Tm_abs_d2b36eee66dd8372042cd1c49358f9dc))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_9526f9b86538a09423bf79a8b2d28a7b
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(32,25-32,53); use=Pulse.Class.BoundedIntegers.fst(32,25-32,53)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_9526f9b86538a09423bf79a8b2d28a7b
@x0)
@x1)
(Prims.op_LessThanOrEqual @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_9526f9b86538a09423bf79a8b2d28a7b
@x0)
@x1))
:qid interpretation_Tm_abs_9526f9b86538a09423bf79a8b2d28a7b))

:named interpretation_Tm_abs_9526f9b86538a09423bf79a8b2d28a7b))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_8154ab71284c4a913019d0826babcbe6
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(30,33-30,57); use=Pulse.Class.BoundedIntegers.fst(30,33-30,57)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_8154ab71284c4a913019d0826babcbe6
@x0)
@x1)
(Prims.op_Subtraction @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_8154ab71284c4a913019d0826babcbe6
@x0)
@x1))
:qid interpretation_Tm_abs_8154ab71284c4a913019d0826babcbe6))

:named interpretation_Tm_abs_8154ab71284c4a913019d0826babcbe6))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_505c9b700f5dda804797fc6511aa37e2
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Plus; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(11,6-11,7); use=Pulse.Class.BoundedIntegers.fst(11,6-11,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (Tm_abs_505c9b700f5dda804797fc6511aa37e2 @x1)
@x0)
(let ((@lb2 @x0))
(Pulse.Class.BoundedIntegers.Mkbounded_int_op_Plus @lb2)))
 

:pattern ((ApplyTT (Tm_abs_505c9b700f5dda804797fc6511aa37e2 @x1)
@x0))
:qid interpretation_Tm_abs_505c9b700f5dda804797fc6511aa37e2))

:named interpretation_Tm_abs_505c9b700f5dda804797fc6511aa37e2))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_3ac41043f5916fda181399393c3d8ba1
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(33,24-33,44); use=Pulse.Class.BoundedIntegers.fst(33,24-33,44)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_3ac41043f5916fda181399393c3d8ba1
@x0)
@x1)
(Prims.op_Modulus @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_3ac41043f5916fda181399393c3d8ba1
@x0)
@x1))
:qid interpretation_Tm_abs_3ac41043f5916fda181399393c3d8ba1))

:named interpretation_Tm_abs_3ac41043f5916fda181399393c3d8ba1))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_247f3cb36b17b51f48b81868489fffc3
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Subtraction; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(12,4-12,18); use=Pulse.Class.BoundedIntegers.fst(12,4-12,18)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (Tm_abs_247f3cb36b17b51f48b81868489fffc3 @x1)
@x0)
(let ((@lb2 @x0))
(Pulse.Class.BoundedIntegers.Mkbounded_int_op_Subtraction @lb2)))
 

:pattern ((ApplyTT (Tm_abs_247f3cb36b17b51f48b81868489fffc3 @x1)
@x0))
:qid interpretation_Tm_abs_247f3cb36b17b51f48b81868489fffc3))

:named interpretation_Tm_abs_247f3cb36b17b51f48b81868489fffc3))
;;;;;;;;;;;;;;;;haseq for Tm_refine_dfab8e194ee74e7784430917cf0712da
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Less_Equals; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,28-14,54); use=Pulse.Class.BoundedIntegers.fst(14,28-14,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_dfab8e194ee74e7784430917cf0712da @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq Prims.bool)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_dfab8e194ee74e7784430917cf0712da @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_dfab8e194ee74e7784430917cf0712da))

:named haseqTm_refine_dfab8e194ee74e7784430917cf0712da))
;;;;;;;;;;;;;;;;haseq for Tm_refine_bdfaeeb7a763850f1f8b0187dc1c53d5
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Subtraction; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(7,19-7,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_bdfaeeb7a763850f1f8b0187dc1c53d5 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_bdfaeeb7a763850f1f8b0187dc1c53d5 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_bdfaeeb7a763850f1f8b0187dc1c53d5))

:named haseqTm_refine_bdfaeeb7a763850f1f8b0187dc1c53d5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b485cfaa52da58e164a9cfc59d88e25f
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_unsigned; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_unsigned; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(45,21-48,3); use=Pulse.Class.BoundedIntegers.fst(45,21-48,3)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_b485cfaa52da58e164a9cfc59d88e25f @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_b485cfaa52da58e164a9cfc59d88e25f @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_b485cfaa52da58e164a9cfc59d88e25f))

:named haseqTm_refine_b485cfaa52da58e164a9cfc59d88e25f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_aa6a9e30f1f8ec8644f9ecb60708ad80
;;; Fact-ids: Name FStar.SizeT.mod_spec; Namespace FStar.SizeT
(assert (! (iff (Valid (Prims.hasEq Tm_refine_aa6a9e30f1f8ec8644f9ecb60708ad80))
(Valid (Prims.hasEq Prims.nat)))
:named haseqTm_refine_aa6a9e30f1f8ec8644f9ecb60708ad80))
;;;;;;;;;;;;;;;;haseq for Tm_refine_7df43cb9feb536df62477b7b30ce1682
;;; Fact-ids: Name FStar.SizeT.v; Namespace FStar.SizeT
(assert (! (iff (Valid (Prims.hasEq Tm_refine_7df43cb9feb536df62477b7b30ce1682))
(Valid (Prims.hasEq Prims.nat)))
:named haseqTm_refine_7df43cb9feb536df62477b7b30ce1682))
;;;;;;;;;;;;;;;;haseq for Tm_refine_7d5d464f1bd9167923b3673db6d066b9
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,28-14,54); use=Pulse.Class.BoundedIntegers.fst(26,4-34,19)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_7d5d464f1bd9167923b3673db6d066b9 @x0
@x1)))
(Valid (Prims.hasEq Prims.bool)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_7d5d464f1bd9167923b3673db6d066b9 @x0
@x1))))
:qid haseqTm_refine_7d5d464f1bd9167923b3673db6d066b9))

:named haseqTm_refine_7d5d464f1bd9167923b3673db6d066b9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_6dedd225cf3741394cc9aa30ee7b03dc
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Plus; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(7,19-7,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_6dedd225cf3741394cc9aa30ee7b03dc @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_6dedd225cf3741394cc9aa30ee7b03dc @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_6dedd225cf3741394cc9aa30ee7b03dc))

:named haseqTm_refine_6dedd225cf3741394cc9aa30ee7b03dc))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4d5241eb6fe198666a8101195bbd4a2a
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Some__item__v; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x0)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.option @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x0))))
:qid haseqTm_refine_4d5241eb6fe198666a8101195bbd4a2a))

:named haseqTm_refine_4d5241eb6fe198666a8101195bbd4a2a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_41bb1fe33d2856748d537571528d32a1
;;; Fact-ids: Name FStar.Char.char_of_int; Namespace FStar.Char
(assert (! (iff (Valid (Prims.hasEq Tm_refine_41bb1fe33d2856748d537571528d32a1))
(Valid (Prims.hasEq Prims.nat)))
:named haseqTm_refine_41bb1fe33d2856748d537571528d32a1))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0b3b8d7bbce0f3a90c3e185383d0b53a
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(13,27-13,52); use=Pulse.Class.BoundedIntegers.fst(26,4-34,19)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_0b3b8d7bbce0f3a90c3e185383d0b53a @x0
@x1)))
(Valid (Prims.hasEq Prims.bool)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_0b3b8d7bbce0f3a90c3e185383d0b53a @x0
@x1))))
:qid haseqTm_refine_0b3b8d7bbce0f3a90c3e185383d0b53a))

:named haseqTm_refine_0b3b8d7bbce0f3a90c3e185383d0b53a))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.v; Namespace Pulse.Class.BoundedIntegers
(assert (! (forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType Pulse.Class.BoundedIntegers.v@tok
Tm_arrow_7d8d23eda5c5e68a1e9c4bbd2796099d))
(forall ((@x1 Term))
 (! (= (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x1)
(Pulse.Class.BoundedIntegers.v @x1))
 

:pattern ((Pulse.Class.BoundedIntegers.v @x1))
:qid function_token_typing_Pulse.Class.BoundedIntegers.v.1)))
 

:pattern ((ApplyTT @x0
Pulse.Class.BoundedIntegers.v@tok))
:qid function_token_typing_Pulse.Class.BoundedIntegers.v))
:named function_token_typing_Pulse.Class.BoundedIntegers.v))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Subtraction; Namespace Pulse.Class.BoundedIntegers
(assert (! (forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType Pulse.Class.BoundedIntegers.op_Subtraction@tok
Tm_arrow_0467a8a9929d74c8a7210fc0761e6a8c))
(forall ((@x1 Term))
 (! (= (ApplyTT Pulse.Class.BoundedIntegers.op_Subtraction@tok
@x1)
(Pulse.Class.BoundedIntegers.op_Subtraction @x1))
 

:pattern ((Pulse.Class.BoundedIntegers.op_Subtraction @x1))
:qid function_token_typing_Pulse.Class.BoundedIntegers.op_Subtraction.1)))
 

:pattern ((ApplyTT @x0
Pulse.Class.BoundedIntegers.op_Subtraction@tok))
:qid function_token_typing_Pulse.Class.BoundedIntegers.op_Subtraction))
:named function_token_typing_Pulse.Class.BoundedIntegers.op_Subtraction))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Plus; Namespace Pulse.Class.BoundedIntegers
(assert (! (forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType Pulse.Class.BoundedIntegers.op_Plus@tok
Tm_arrow_1093670c4147ebd8baef4abaaaf7e174))
(forall ((@x1 Term))
 (! (= (ApplyTT Pulse.Class.BoundedIntegers.op_Plus@tok
@x1)
(Pulse.Class.BoundedIntegers.op_Plus @x1))
 

:pattern ((Pulse.Class.BoundedIntegers.op_Plus @x1))
:qid function_token_typing_Pulse.Class.BoundedIntegers.op_Plus.1)))
 

:pattern ((ApplyTT @x0
Pulse.Class.BoundedIntegers.op_Plus@tok))
:qid function_token_typing_Pulse.Class.BoundedIntegers.op_Plus))
:named function_token_typing_Pulse.Class.BoundedIntegers.op_Plus))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Less_Equals; Namespace Pulse.Class.BoundedIntegers
(assert (! (forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType Pulse.Class.BoundedIntegers.op_Less_Equals@tok
Tm_arrow_a417aca3e316b41c5604d18fc54b36aa))
(forall ((@x1 Term))
 (! (= (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
@x1)
(Pulse.Class.BoundedIntegers.op_Less_Equals @x1))
 

:pattern ((Pulse.Class.BoundedIntegers.op_Less_Equals @x1))
:qid function_token_typing_Pulse.Class.BoundedIntegers.op_Less_Equals.1)))
 

:pattern ((ApplyTT @x0
Pulse.Class.BoundedIntegers.op_Less_Equals@tok))
:qid function_token_typing_Pulse.Class.BoundedIntegers.op_Less_Equals))
:named function_token_typing_Pulse.Class.BoundedIntegers.op_Less_Equals))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.max_bound; Namespace Pulse.Class.BoundedIntegers
(assert (! (forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType Pulse.Class.BoundedIntegers.max_bound@tok
Tm_arrow_3c4a7be83107ac264d86a592e40ff1ba))
(forall ((@x1 Term))
 (! (= (ApplyTT Pulse.Class.BoundedIntegers.max_bound@tok
@x1)
(Pulse.Class.BoundedIntegers.max_bound @x1))
 

:pattern ((Pulse.Class.BoundedIntegers.max_bound @x1))
:qid function_token_typing_Pulse.Class.BoundedIntegers.max_bound.1)))
 

:pattern ((ApplyTT @x0
Pulse.Class.BoundedIntegers.max_bound@tok))
:qid function_token_typing_Pulse.Class.BoundedIntegers.max_bound))
:named function_token_typing_Pulse.Class.BoundedIntegers.max_bound))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.fits; Namespace Pulse.Class.BoundedIntegers
(assert (! (forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType Pulse.Class.BoundedIntegers.fits@tok
Tm_arrow_f878efc3fc7d12ae462719c6239b3758))
(forall ((@x1 Term))
 (! (= (ApplyTT Pulse.Class.BoundedIntegers.fits@tok
@x1)
(Pulse.Class.BoundedIntegers.fits @x1))
 

:pattern ((Pulse.Class.BoundedIntegers.fits @x1))
:qid function_token_typing_Pulse.Class.BoundedIntegers.fits.1)))
 

:pattern ((ApplyTT @x0
Pulse.Class.BoundedIntegers.fits@tok))
:qid function_token_typing_Pulse.Class.BoundedIntegers.fits))
:named function_token_typing_Pulse.Class.BoundedIntegers.fits))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (HasType Prims.pos
Tm_type)
:named function_token_typing_Prims.pos))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Prims.nat
Tm_type)
:named function_token_typing_Prims.nat))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.id; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(130,4-130,6); use=FStar.Pervasives.fsti(130,4-130,6)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType FStar.Pervasives.id@tok
Tm_arrow_99724436653747ac6f5a6a00c64ff8bc))

;; def=FStar.Pervasives.fsti(130,4-130,6); use=FStar.Pervasives.fsti(130,4-130,6)
(forall ((@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT FStar.Pervasives.id@tok
@x1)
@x2)
(FStar.Pervasives.id @x1
@x2))
 

:pattern ((FStar.Pervasives.id @x1
@x2))
:qid function_token_typing_FStar.Pervasives.id.1))
)
 

:pattern ((ApplyTT @x0
FStar.Pervasives.id@tok))
:qid function_token_typing_FStar.Pervasives.id))

:named function_token_typing_FStar.Pervasives.id))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_unsigned; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_unsigned; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(38,6-38,22); use=Pulse.Class.BoundedIntegers.fst(38,6-38,22)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Pulse.Class.BoundedIntegers.bounded_unsigned @x2))
(and (is-Pulse.Class.BoundedIntegers.Mkbounded_unsigned @x1)
(= @x2
(Pulse.Class.BoundedIntegers.Mkbounded_unsigned_t @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(Pulse.Class.BoundedIntegers.bounded_unsigned @x2)))
:qid fuel_guarded_inversion_Pulse.Class.BoundedIntegers.bounded_unsigned))

:named fuel_guarded_inversion_Pulse.Class.BoundedIntegers.bounded_unsigned))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(FStar.Pervasives.Native.option @x2))
(or (and (is-FStar.Pervasives.Native.None @x1)
(= @x2
(FStar.Pervasives.Native.None_a @x1)))
(and (is-FStar.Pervasives.Native.Some @x1)
(= @x2
(FStar.Pervasives.Native.Some_a @x1)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(FStar.Pervasives.Native.option @x2)))
:qid fuel_guarded_inversion_FStar.Pervasives.Native.option))

:named fuel_guarded_inversion_FStar.Pervasives.Native.option))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_unsigned; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_unsigned; Namespace Pulse.Class.BoundedIntegers
(assert (! (= 488
(Term_constr_id Pulse.Class.BoundedIntegers.bounded_unsigned@tok))
:named fresh_token_Pulse.Class.BoundedIntegers.bounded_unsigned@tok))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (= 102
(Term_constr_id FStar.Pervasives.Native.option@tok))
:named fresh_token_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: Prims.pow2
;;; Fact-ids: Name Prims.pow2; Namespace Prims
(assert (! 
;; def=Prims.fst(708,8-708,12); use=Prims.fst(708,8-708,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasType @x1
Prims.nat)
(= (Prims.pow2.fuel_instrumented (SFuel @u0)
@x1)
(let ((@lb2 @x1))
(ite (= @lb2
(BoxInt 0))
(BoxInt 1)
(Prims.op_Multiply (BoxInt 2)
(Prims.pow2.fuel_instrumented @u0
(Prims.op_Subtraction @x1
(BoxInt 1))))))))
 :weight 0


:pattern ((Prims.pow2.fuel_instrumented (SFuel @u0)
@x1))
:qid equation_with_fuel_Prims.pow2.fuel_instrumented))

:named equation_with_fuel_Prims.pow2.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for Pulse.Class.BoundedIntegers.v
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.v; Namespace Pulse.Class.BoundedIntegers
(assert (! (forall ((@x0 Term))
 (! (= (Pulse.Class.BoundedIntegers.v @x0)
(Tm_abs_faa1351076bca4f1d410c09beaffa289 @x0))
 

:pattern ((Pulse.Class.BoundedIntegers.v @x0))
:qid equation_Pulse.Class.BoundedIntegers.v))
:named equation_Pulse.Class.BoundedIntegers.v))
;;;;;;;;;;;;;;;;Equation for Pulse.Class.BoundedIntegers.op_Subtraction
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Subtraction; Namespace Pulse.Class.BoundedIntegers
(assert (! (forall ((@x0 Term))
 (! (= (Pulse.Class.BoundedIntegers.op_Subtraction @x0)
(Tm_abs_247f3cb36b17b51f48b81868489fffc3 @x0))
 

:pattern ((Pulse.Class.BoundedIntegers.op_Subtraction @x0))
:qid equation_Pulse.Class.BoundedIntegers.op_Subtraction))
:named equation_Pulse.Class.BoundedIntegers.op_Subtraction))
;;;;;;;;;;;;;;;;Equation for Pulse.Class.BoundedIntegers.op_Plus
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Plus; Namespace Pulse.Class.BoundedIntegers
(assert (! (forall ((@x0 Term))
 (! (= (Pulse.Class.BoundedIntegers.op_Plus @x0)
(Tm_abs_505c9b700f5dda804797fc6511aa37e2 @x0))
 

:pattern ((Pulse.Class.BoundedIntegers.op_Plus @x0))
:qid equation_Pulse.Class.BoundedIntegers.op_Plus))
:named equation_Pulse.Class.BoundedIntegers.op_Plus))
;;;;;;;;;;;;;;;;Equation for Pulse.Class.BoundedIntegers.op_Less_Equals
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Less_Equals; Namespace Pulse.Class.BoundedIntegers
(assert (! (forall ((@x0 Term))
 (! (= (Pulse.Class.BoundedIntegers.op_Less_Equals @x0)
(Tm_abs_f4d32f3d705308e5f1a270cda9a29727 @x0))
 

:pattern ((Pulse.Class.BoundedIntegers.op_Less_Equals @x0))
:qid equation_Pulse.Class.BoundedIntegers.op_Less_Equals))
:named equation_Pulse.Class.BoundedIntegers.op_Less_Equals))
;;;;;;;;;;;;;;;;Equation for Pulse.Class.BoundedIntegers.max_bound
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.max_bound; Namespace Pulse.Class.BoundedIntegers
(assert (! (forall ((@x0 Term))
 (! (= (Pulse.Class.BoundedIntegers.max_bound @x0)
(Tm_abs_ed0b4d808e3623f25f893f01478211b1 @x0))
 

:pattern ((Pulse.Class.BoundedIntegers.max_bound @x0))
:qid equation_Pulse.Class.BoundedIntegers.max_bound))
:named equation_Pulse.Class.BoundedIntegers.max_bound))
;;;;;;;;;;;;;;;;Equation for Pulse.Class.BoundedIntegers.fits
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.fits; Namespace Pulse.Class.BoundedIntegers
(assert (! (forall ((@x0 Term))
 (! (= (Pulse.Class.BoundedIntegers.fits @x0)
(Tm_abs_d2b36eee66dd8372042cd1c49358f9dc @x0))
 

:pattern ((Pulse.Class.BoundedIntegers.fits @x0))
:qid equation_Pulse.Class.BoundedIntegers.fits))
:named equation_Pulse.Class.BoundedIntegers.fits))
;;;;;;;;;;;;;;;;Equation for Pulse.Class.BoundedIntegers.bounded_int_int
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(25,9-25,24); use=Pulse.Class.BoundedIntegers.fst(25,9-25,24)
(forall ((@u0 Dummy_sort))
 (! (= 
;; def=Pulse.Class.BoundedIntegers.fst(25,9-25,24); use=Pulse.Class.BoundedIntegers.fst(25,9-25,24)
(Pulse.Class.BoundedIntegers.bounded_int_int @u0)

(Pulse.Class.BoundedIntegers.Mkbounded_int Prims.int
Tm_abs_e55f1efb8e787e6fd29c4794771ae0d5
Tm_abs_f8b7175ad4f28c0bc3c11371abe1d18d
Tm_abs_f8b7175ad4f28c0bc3c11371abe1d18d
Tm_abs_d5877b1288b93e8d3523f2652f6bfc84
Tm_abs_8154ab71284c4a913019d0826babcbe6
Tm_abs_d68e5199f008f106619036deee889e9a
Tm_abs_9526f9b86538a09423bf79a8b2d28a7b
Tm_abs_3ac41043f5916fda181399393c3d8ba1
Tm_unit))
 

:pattern (
;; def=Pulse.Class.BoundedIntegers.fst(25,9-25,24); use=Pulse.Class.BoundedIntegers.fst(25,9-25,24)
(Pulse.Class.BoundedIntegers.bounded_int_int @u0)
)
:qid equation_Pulse.Class.BoundedIntegers.bounded_int_int))

:named equation_Pulse.Class.BoundedIntegers.bounded_int_int))
;;;;;;;;;;;;;;;;Equation for Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(52,9-52,38); use=Pulse.Class.BoundedIntegers.fst(52,9-52,38)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1)
(Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__base @x0
@x1))
 

:pattern ((Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
:qid equation_Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned))

:named equation_Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned))
;;;;;;;;;;;;;;;;Equation for Prims.pos
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (= Prims.pos
Tm_refine_774ba3f728d91ead8ef40be66c9802e5)
:named equation_Prims.pos))
;;;;;;;;;;;;;;;;Equation for Prims.nat
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (= Prims.nat
Tm_refine_542f9d4f129664613f2483a6c88bc7c2)
:named equation_Prims.nat))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.id
;;; Fact-ids: Name FStar.Pervasives.id; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(130,4-130,6); use=FStar.Pervasives.fsti(130,4-130,6)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.id @x0
@x1)
@x1)
 

:pattern ((FStar.Pervasives.id @x0
@x1))
:qid equation_FStar.Pervasives.id))

:named equation_FStar.Pervasives.id))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.uu___is_Some @x0
@x1)
(BoxBool (is-FStar.Pervasives.Native.Some @x1)))
 

:pattern ((FStar.Pervasives.Native.uu___is_Some @x0
@x1))
:qid disc_equation_FStar.Pervasives.Native.Some))

:named disc_equation_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_None; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.uu___is_None @x0
@x1)
(BoxBool (is-FStar.Pervasives.Native.None @x1)))
 

:pattern ((FStar.Pervasives.Native.uu___is_None @x0
@x1))
:qid disc_equation_FStar.Pervasives.Native.None))

:named disc_equation_FStar.Pervasives.Native.None))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_unsigned; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_unsigned; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(38,6-38,22); use=Pulse.Class.BoundedIntegers.fst(38,6-38,22)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Prims.eqtype)
(HasTypeFuel @u0
@x2
(Pulse.Class.BoundedIntegers.bounded_int @x1))
(HasTypeFuel @u0
@x3
@x1)
(HasTypeFuel @u0
@x4
Prims.bool)
(HasTypeFuel @u0
@x5
(Tm_refine_b485cfaa52da58e164a9cfc59d88e25f @x1
@x2
@x4
@x3)))
(HasTypeFuel @u0
(Pulse.Class.BoundedIntegers.Mkbounded_unsigned @x1
@x2
@x3
@x4
@x5)
(Pulse.Class.BoundedIntegers.bounded_unsigned @x1)))
 

:pattern ((HasTypeFuel @u0
(Pulse.Class.BoundedIntegers.Mkbounded_unsigned @x1
@x2
@x3
@x4
@x5)
(Pulse.Class.BoundedIntegers.bounded_unsigned @x1)))
:qid data_typing_intro_Pulse.Class.BoundedIntegers.Mkbounded_unsigned@tok))

:named data_typing_intro_Pulse.Class.BoundedIntegers.Mkbounded_unsigned@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
@x1))
(HasTypeFuel @u0
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x1)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x1)))
:qid data_typing_intro_FStar.Pervasives.Native.Some@tok))

:named data_typing_intro_FStar.Pervasives.Native.Some@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x1)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x1)))
:qid data_typing_intro_FStar.Pervasives.Native.None@tok))

:named data_typing_intro_FStar.Pervasives.Native.None@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_unsigned; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_unsigned; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(38,6-38,22); use=Pulse.Class.BoundedIntegers.fst(38,6-38,22)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Pulse.Class.BoundedIntegers.Mkbounded_unsigned @x1
@x2
@x3
@x4
@x5)
(Pulse.Class.BoundedIntegers.bounded_unsigned @x6))
(and (HasTypeFuel @u0
@x6
Prims.eqtype)
(HasTypeFuel @u0
@x2
(Pulse.Class.BoundedIntegers.bounded_int @x6))
(HasTypeFuel @u0
@x3
@x6)
(HasTypeFuel @u0
@x4
Prims.bool)
(HasTypeFuel @u0
@x5
(Tm_refine_b485cfaa52da58e164a9cfc59d88e25f @x6
@x2
@x4
@x3))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Pulse.Class.BoundedIntegers.Mkbounded_unsigned @x1
@x2
@x3
@x4
@x5)
(Pulse.Class.BoundedIntegers.bounded_unsigned @x6)))
:qid data_elim_Pulse.Class.BoundedIntegers.Mkbounded_unsigned))

:named data_elim_Pulse.Class.BoundedIntegers.Mkbounded_unsigned))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3))
(and (HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x2
@x3)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3)))
:qid data_elim_FStar.Pervasives.Native.Some))

:named data_elim_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x2))
(HasTypeFuel @u0
@x2
Tm_type))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x2)))
:qid data_elim_FStar.Pervasives.Native.None))

:named data_elim_FStar.Pervasives.Native.None))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_unsigned; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_unsigned; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(38,6-38,22); use=Pulse.Class.BoundedIntegers.fst(38,6-38,22)
(forall ((@x0 Term))
 (! (= 487
(Term_constr_id (Pulse.Class.BoundedIntegers.bounded_unsigned @x0)))
 

:pattern ((Pulse.Class.BoundedIntegers.bounded_unsigned @x0))
:qid constructor_distinct_Pulse.Class.BoundedIntegers.bounded_unsigned))

:named constructor_distinct_Pulse.Class.BoundedIntegers.bounded_unsigned))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_unsigned; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_unsigned; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(38,6-38,22); use=Pulse.Class.BoundedIntegers.fst(38,6-38,22)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= 495
(Term_constr_id (Pulse.Class.BoundedIntegers.Mkbounded_unsigned @x0
@x1
@x2
@x3
@x4)))
 

:pattern ((Pulse.Class.BoundedIntegers.Mkbounded_unsigned @x0
@x1
@x2
@x3
@x4))
:qid constructor_distinct_Pulse.Class.BoundedIntegers.Mkbounded_unsigned))

:named constructor_distinct_Pulse.Class.BoundedIntegers.Mkbounded_unsigned))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@x0 Term))
 (! (= 101
(Term_constr_id (FStar.Pervasives.Native.option @x0)))
 

:pattern ((FStar.Pervasives.Native.option @x0))
:qid constructor_distinct_FStar.Pervasives.Native.option))

:named constructor_distinct_FStar.Pervasives.Native.option))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= 113
(Term_constr_id (FStar.Pervasives.Native.Some @x0
@x1)))
 

:pattern ((FStar.Pervasives.Native.Some @x0
@x1))
:qid constructor_distinct_FStar.Pervasives.Native.Some))

:named constructor_distinct_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@x0 Term))
 (! (= 108
(Term_constr_id (FStar.Pervasives.Native.None @x0)))
 

:pattern ((FStar.Pervasives.Native.None @x0))
:qid constructor_distinct_FStar.Pervasives.Native.None))

:named constructor_distinct_FStar.Pervasives.Native.None))
;;;;;;;;;;;;;;;;Assumption: FStar.Pervasives.Native.option__uu___haseq
;;; Fact-ids: Name FStar.Pervasives.Native.option__uu___haseq; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_type)
(Valid (Prims.hasEq @x0)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.option @x0))))
 

:pattern ((Prims.hasEq (FStar.Pervasives.Native.option @x0)))
:qid assumption_FStar.Pervasives.Native.option__uu___haseq))
:named assumption_FStar.Pervasives.Native.option__uu___haseq))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_unsigned; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_unsigned; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(38,6-38,22); use=Pulse.Class.BoundedIntegers.fst(38,6-38,22)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(Pulse.Class.BoundedIntegers.bounded_unsigned @x2))
(= (Pulse.Class.BoundedIntegers.bounded_unsigned @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(Pulse.Class.BoundedIntegers.bounded_unsigned @x2)))
:qid Pulse.Class.BoundedIntegers_pretyping_42336c56d009bbedbf53cd43c1986dfe))

:named Pulse.Class.BoundedIntegers_pretyping_42336c56d009bbedbf53cd43c1986dfe))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.fits; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-8,21); use=Pulse.Class.BoundedIntegers.fst(8,4-8,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_f878efc3fc7d12ae462719c6239b3758)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_f878efc3fc7d12ae462719c6239b3758))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_f878efc3fc7d12ae462719c6239b3758))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_f878efc3fc7d12ae462719c6239b3758))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.max_bound; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(38,6-38,22); use=Pulse.Class.BoundedIntegers.fst(38,24-41,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_d74e06376e6603442136cf647afb67dd @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_d74e06376e6603442136cf647afb67dd @x2)))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_d74e06376e6603442136cf647afb67dd))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_d74e06376e6603442136cf647afb67dd))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Plus; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-7,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_b276a8e58b51f46069008a6b915f1fce @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_b276a8e58b51f46069008a6b915f1fce @x2
@x3)))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_b276a8e58b51f46069008a6b915f1fce))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_b276a8e58b51f46069008a6b915f1fce))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Less_Equals; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,27); use=Pulse.Class.BoundedIntegers.fst(7,19-14,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_a417aca3e316b41c5604d18fc54b36aa)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_a417aca3e316b41c5604d18fc54b36aa))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_a417aca3e316b41c5604d18fc54b36aa))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_a417aca3e316b41c5604d18fc54b36aa))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Subtraction; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-7,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_a22948daab71287afbfc89555527cfad @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_a22948daab71287afbfc89555527cfad @x2
@x3)))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_a22948daab71287afbfc89555527cfad))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_a22948daab71287afbfc89555527cfad))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Plus; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-7,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_7f16be166d35c07189008553888da040 @x2
@x3
@x4))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_7f16be166d35c07189008553888da040 @x2
@x3
@x4)))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_7f16be166d35c07189008553888da040))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_7f16be166d35c07189008553888da040))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.v; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,27); use=Pulse.Class.BoundedIntegers.fst(7,19-9,5)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_7d8d23eda5c5e68a1e9c4bbd2796099d)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_7d8d23eda5c5e68a1e9c4bbd2796099d))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_7d8d23eda5c5e68a1e9c4bbd2796099d))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_7d8d23eda5c5e68a1e9c4bbd2796099d))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.fits; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-8,21); use=Pulse.Class.BoundedIntegers.fst(8,4-8,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_6364954a39281bc3fb895daff7b4187f @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_6364954a39281bc3fb895daff7b4187f @x2)))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_6364954a39281bc3fb895daff7b4187f))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_6364954a39281bc3fb895daff7b4187f))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Less_Equals; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-14,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_622da040fcc8b0824aead41372ce6406 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_622da040fcc8b0824aead41372ce6406 @x2
@x3)))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_622da040fcc8b0824aead41372ce6406))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_622da040fcc8b0824aead41372ce6406))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Prims.fst(552,17-552,20); use=Pulse.Class.BoundedIntegers.fst(26,4-34,19)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_4e06c0d9f21510c76cc9a4373093e200)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_4e06c0d9f21510c76cc9a4373093e200))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_4e06c0d9f21510c76cc9a4373093e200))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_4e06c0d9f21510c76cc9a4373093e200))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.v; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,19-9,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_4d67790b66356a618f544f985a991be4 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_4d67790b66356a618f544f985a991be4 @x2)))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_4d67790b66356a618f544f985a991be4))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_4d67790b66356a618f544f985a991be4))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Subtraction; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-7,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_4c3ef3377f300bdc525e5755e4908c81 @x2
@x3
@x4))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_4c3ef3377f300bdc525e5755e4908c81 @x2
@x3
@x4)))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_4c3ef3377f300bdc525e5755e4908c81))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_4c3ef3377f300bdc525e5755e4908c81))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Subtraction; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,19-12,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_3df63716551c3b4016aa88ee678f4bf3 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_3df63716551c3b4016aa88ee678f4bf3 @x2)))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_3df63716551c3b4016aa88ee678f4bf3))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_3df63716551c3b4016aa88ee678f4bf3))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.max_bound; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(38,6-38,32); use=Pulse.Class.BoundedIntegers.fst(38,24-41,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_3c4a7be83107ac264d86a592e40ff1ba)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_3c4a7be83107ac264d86a592e40ff1ba))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_3c4a7be83107ac264d86a592e40ff1ba))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_3c4a7be83107ac264d86a592e40ff1ba))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Less_Equals; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,19-14,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_3a0cfb40943194e56861a1b3602a14cc @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_3a0cfb40943194e56861a1b3602a14cc @x2)))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_3a0cfb40943194e56861a1b3602a14cc))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_3a0cfb40943194e56861a1b3602a14cc))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Less_Equals; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-14,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_355db2a4711944bdacb66bc19cf69021 @x2
@x3
@x4))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_355db2a4711944bdacb66bc19cf69021 @x2
@x3
@x4)))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_355db2a4711944bdacb66bc19cf69021))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_355db2a4711944bdacb66bc19cf69021))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Plus; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,19-11,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_25c16b6f4aecd86a3b9e544381a99ebd @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_25c16b6f4aecd86a3b9e544381a99ebd @x2)))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_25c16b6f4aecd86a3b9e544381a99ebd))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_25c16b6f4aecd86a3b9e544381a99ebd))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Prims.fst(552,17-552,20); use=Pulse.Class.BoundedIntegers.fst(26,4-34,19)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_199c2f3d92478fe1730905d60819f94b)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_199c2f3d92478fe1730905d60819f94b))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_199c2f3d92478fe1730905d60819f94b))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_199c2f3d92478fe1730905d60819f94b))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Plus; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,27); use=Pulse.Class.BoundedIntegers.fst(7,19-11,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_1093670c4147ebd8baef4abaaaf7e174)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_1093670c4147ebd8baef4abaaaf7e174))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_1093670c4147ebd8baef4abaaaf7e174))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_1093670c4147ebd8baef4abaaaf7e174))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Subtraction; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,27); use=Pulse.Class.BoundedIntegers.fst(7,19-12,18)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_0467a8a9929d74c8a7210fc0761e6a8c)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_0467a8a9929d74c8a7210fc0761e6a8c))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_0467a8a9929d74c8a7210fc0761e6a8c))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_0467a8a9929d74c8a7210fc0761e6a8c))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_f878efc3fc7d12ae462719c6239b3758
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.fits; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-8,21); use=Pulse.Class.BoundedIntegers.fst(8,4-8,8)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_f878efc3fc7d12ae462719c6239b3758)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-8,21); use=Pulse.Class.BoundedIntegers.fst(8,4-8,8)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.eqtype)
(HasType (ApplyTT @x0
@x1)
(Tm_arrow_6364954a39281bc3fb895daff7b4187f @x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_f878efc3fc7d12ae462719c6239b3758.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_f878efc3fc7d12ae462719c6239b3758))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_f878efc3fc7d12ae462719c6239b3758))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_f878efc3fc7d12ae462719c6239b3758))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_d74e06376e6603442136cf647afb67dd
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.max_bound; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(38,6-38,22); use=Pulse.Class.BoundedIntegers.fst(38,24-41,11)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_d74e06376e6603442136cf647afb67dd @x1))
(and 
;; def=Pulse.Class.BoundedIntegers.fst(38,6-38,22); use=Pulse.Class.BoundedIntegers.fst(38,24-41,11)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(Pulse.Class.BoundedIntegers.bounded_unsigned @x1))
(HasType (ApplyTT @x0
@x2)
@x1))
 

:pattern ((ApplyTT @x0
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_d74e06376e6603442136cf647afb67dd.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_d74e06376e6603442136cf647afb67dd @x1)))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_d74e06376e6603442136cf647afb67dd))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_d74e06376e6603442136cf647afb67dd))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_b276a8e58b51f46069008a6b915f1fce
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Plus; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-7,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_b276a8e58b51f46069008a6b915f1fce @x1
@x2))
(and 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-7,20)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)
(HasType (ApplyTT @x0
@x3)
(Tm_arrow_7f16be166d35c07189008553888da040 @x3
@x1
@x2)))
 

:pattern ((ApplyTT @x0
@x3))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_b276a8e58b51f46069008a6b915f1fce.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_b276a8e58b51f46069008a6b915f1fce @x1
@x2)))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_b276a8e58b51f46069008a6b915f1fce))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_b276a8e58b51f46069008a6b915f1fce))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_a417aca3e316b41c5604d18fc54b36aa
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Less_Equals; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,27); use=Pulse.Class.BoundedIntegers.fst(7,19-14,8)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_a417aca3e316b41c5604d18fc54b36aa)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,27); use=Pulse.Class.BoundedIntegers.fst(7,19-14,8)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.eqtype)
(HasType (ApplyTT @x0
@x1)
(Tm_arrow_3a0cfb40943194e56861a1b3602a14cc @x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_a417aca3e316b41c5604d18fc54b36aa.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_a417aca3e316b41c5604d18fc54b36aa))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_a417aca3e316b41c5604d18fc54b36aa))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_a417aca3e316b41c5604d18fc54b36aa))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_a22948daab71287afbfc89555527cfad
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Subtraction; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-7,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_a22948daab71287afbfc89555527cfad @x1
@x2))
(and 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-7,20)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)
(HasType (ApplyTT @x0
@x3)
(Tm_arrow_4c3ef3377f300bdc525e5755e4908c81 @x3
@x1
@x2)))
 

:pattern ((ApplyTT @x0
@x3))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_a22948daab71287afbfc89555527cfad.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_a22948daab71287afbfc89555527cfad @x1
@x2)))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_a22948daab71287afbfc89555527cfad))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_a22948daab71287afbfc89555527cfad))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_7f16be166d35c07189008553888da040
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Plus; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-7,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_7f16be166d35c07189008553888da040 @x1
@x2
@x3))
(and 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-7,20)
(forall ((@x4 Term))
 (! (implies (and 
;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(11,6-11,7)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(11,6-11,7)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
@x3)
@x2)
(Prims.op_Addition (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x3)
@x2)
@x1)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x3)
@x2)
@x4)))
)

(HasType @x4
@x3))
(HasType (ApplyTT @x0
@x4)
(Tm_refine_6dedd225cf3741394cc9aa30ee7b03dc @x3
@x2
@x1
@x4)))
 

:pattern ((ApplyTT @x0
@x4))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_7f16be166d35c07189008553888da040.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_7f16be166d35c07189008553888da040 @x1
@x2
@x3)))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_7f16be166d35c07189008553888da040))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_7f16be166d35c07189008553888da040))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_7d8d23eda5c5e68a1e9c4bbd2796099d
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.v; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,27); use=Pulse.Class.BoundedIntegers.fst(7,19-9,5)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_7d8d23eda5c5e68a1e9c4bbd2796099d)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,27); use=Pulse.Class.BoundedIntegers.fst(7,19-9,5)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.eqtype)
(HasType (ApplyTT @x0
@x1)
(Tm_arrow_4d67790b66356a618f544f985a991be4 @x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_7d8d23eda5c5e68a1e9c4bbd2796099d.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_7d8d23eda5c5e68a1e9c4bbd2796099d))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_7d8d23eda5c5e68a1e9c4bbd2796099d))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_7d8d23eda5c5e68a1e9c4bbd2796099d))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_6364954a39281bc3fb895daff7b4187f
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.fits; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-8,21); use=Pulse.Class.BoundedIntegers.fst(8,4-8,8)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_6364954a39281bc3fb895daff7b4187f @x1))
(and 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-8,21); use=Pulse.Class.BoundedIntegers.fst(8,4-8,8)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(Pulse.Class.BoundedIntegers.bounded_int @x1))
(HasType (ApplyTT @x0
@x2)
Tm_arrow_3a9c22ddc54716caa0276c05e792d97e))
 

:pattern ((ApplyTT @x0
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_6364954a39281bc3fb895daff7b4187f.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_6364954a39281bc3fb895daff7b4187f @x1)))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_6364954a39281bc3fb895daff7b4187f))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_6364954a39281bc3fb895daff7b4187f))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_622da040fcc8b0824aead41372ce6406
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Less_Equals; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-14,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_622da040fcc8b0824aead41372ce6406 @x1
@x2))
(and 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-14,8)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)
(HasType (ApplyTT @x0
@x3)
(Tm_arrow_355db2a4711944bdacb66bc19cf69021 @x3
@x1
@x2)))
 

:pattern ((ApplyTT @x0
@x3))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_622da040fcc8b0824aead41372ce6406.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_622da040fcc8b0824aead41372ce6406 @x1
@x2)))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_622da040fcc8b0824aead41372ce6406))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_622da040fcc8b0824aead41372ce6406))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_4e06c0d9f21510c76cc9a4373093e200
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Prims.fst(552,17-552,20); use=Pulse.Class.BoundedIntegers.fst(26,4-34,19)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_4e06c0d9f21510c76cc9a4373093e200)
(and 
;; def=Prims.fst(552,17-552,20); use=Pulse.Class.BoundedIntegers.fst(26,4-34,19)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.int)
(HasType @x2
Prims.int))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Tm_refine_7d5d464f1bd9167923b3673db6d066b9 @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_4e06c0d9f21510c76cc9a4373093e200.1))

(IsTotFun @x0)

;; def=Prims.fst(552,17-552,20); use=Pulse.Class.BoundedIntegers.fst(26,4-34,19)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.int)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_4e06c0d9f21510c76cc9a4373093e200.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_4e06c0d9f21510c76cc9a4373093e200))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_4e06c0d9f21510c76cc9a4373093e200))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_4e06c0d9f21510c76cc9a4373093e200))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_4d67790b66356a618f544f985a991be4
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.v; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,19-9,5)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_4d67790b66356a618f544f985a991be4 @x1))
(and 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,19-9,5)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(Pulse.Class.BoundedIntegers.bounded_int @x1))
(HasType (ApplyTT @x0
@x2)
(Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b @x1)))
 

:pattern ((ApplyTT @x0
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_4d67790b66356a618f544f985a991be4.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_4d67790b66356a618f544f985a991be4 @x1)))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_4d67790b66356a618f544f985a991be4))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_4d67790b66356a618f544f985a991be4))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_4c3ef3377f300bdc525e5755e4908c81
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Subtraction; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-7,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_4c3ef3377f300bdc525e5755e4908c81 @x1
@x2
@x3))
(and 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-7,20)
(forall ((@x4 Term))
 (! (implies (and 
;; def=Pulse.Class.BoundedIntegers.fst(12,53-12,69); use=Pulse.Class.BoundedIntegers.fst(12,4-12,18)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(12,53-12,69); use=Pulse.Class.BoundedIntegers.fst(12,4-12,18)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
@x3)
@x2)
(Prims.op_Subtraction (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x3)
@x2)
@x1)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x3)
@x2)
@x4)))
)

(HasType @x4
@x3))
(HasType (ApplyTT @x0
@x4)
(Tm_refine_bdfaeeb7a763850f1f8b0187dc1c53d5 @x3
@x2
@x1
@x4)))
 

:pattern ((ApplyTT @x0
@x4))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_4c3ef3377f300bdc525e5755e4908c81.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_4c3ef3377f300bdc525e5755e4908c81 @x1
@x2
@x3)))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_4c3ef3377f300bdc525e5755e4908c81))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_4c3ef3377f300bdc525e5755e4908c81))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_3df63716551c3b4016aa88ee678f4bf3
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Subtraction; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,19-12,18)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_3df63716551c3b4016aa88ee678f4bf3 @x1))
(and 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,19-12,18)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(Pulse.Class.BoundedIntegers.bounded_int @x1))
(HasType (ApplyTT @x0
@x2)
(Tm_arrow_a22948daab71287afbfc89555527cfad @x2
@x1)))
 

:pattern ((ApplyTT @x0
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_3df63716551c3b4016aa88ee678f4bf3.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_3df63716551c3b4016aa88ee678f4bf3 @x1)))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_3df63716551c3b4016aa88ee678f4bf3))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_3df63716551c3b4016aa88ee678f4bf3))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_3c4a7be83107ac264d86a592e40ff1ba
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.max_bound; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(38,6-38,32); use=Pulse.Class.BoundedIntegers.fst(38,24-41,11)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_3c4a7be83107ac264d86a592e40ff1ba)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(38,6-38,32); use=Pulse.Class.BoundedIntegers.fst(38,24-41,11)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.eqtype)
(HasType (ApplyTT @x0
@x1)
(Tm_arrow_d74e06376e6603442136cf647afb67dd @x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_3c4a7be83107ac264d86a592e40ff1ba.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_3c4a7be83107ac264d86a592e40ff1ba))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_3c4a7be83107ac264d86a592e40ff1ba))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_3c4a7be83107ac264d86a592e40ff1ba))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_3a0cfb40943194e56861a1b3602a14cc
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Less_Equals; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,19-14,8)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_3a0cfb40943194e56861a1b3602a14cc @x1))
(and 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,19-14,8)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(Pulse.Class.BoundedIntegers.bounded_int @x1))
(HasType (ApplyTT @x0
@x2)
(Tm_arrow_622da040fcc8b0824aead41372ce6406 @x2
@x1)))
 

:pattern ((ApplyTT @x0
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_3a0cfb40943194e56861a1b3602a14cc.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_3a0cfb40943194e56861a1b3602a14cc @x1)))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_3a0cfb40943194e56861a1b3602a14cc))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_3a0cfb40943194e56861a1b3602a14cc))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_355db2a4711944bdacb66bc19cf69021
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Less_Equals; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-14,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_355db2a4711944bdacb66bc19cf69021 @x1
@x2
@x3))
(and 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-14,8)
(forall ((@x4 Term))
 (! (implies (HasType @x4
@x3)
(HasType (ApplyTT @x0
@x4)
(Tm_refine_dfab8e194ee74e7784430917cf0712da @x3
@x2
@x1
@x4)))
 

:pattern ((ApplyTT @x0
@x4))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_355db2a4711944bdacb66bc19cf69021.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_355db2a4711944bdacb66bc19cf69021 @x1
@x2
@x3)))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_355db2a4711944bdacb66bc19cf69021))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_355db2a4711944bdacb66bc19cf69021))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_25c16b6f4aecd86a3b9e544381a99ebd
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Plus; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,19-11,7)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_25c16b6f4aecd86a3b9e544381a99ebd @x1))
(and 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,19-11,7)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(Pulse.Class.BoundedIntegers.bounded_int @x1))
(HasType (ApplyTT @x0
@x2)
(Tm_arrow_b276a8e58b51f46069008a6b915f1fce @x2
@x1)))
 

:pattern ((ApplyTT @x0
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_25c16b6f4aecd86a3b9e544381a99ebd.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_25c16b6f4aecd86a3b9e544381a99ebd @x1)))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_25c16b6f4aecd86a3b9e544381a99ebd))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_25c16b6f4aecd86a3b9e544381a99ebd))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_199c2f3d92478fe1730905d60819f94b
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Prims.fst(552,17-552,20); use=Pulse.Class.BoundedIntegers.fst(26,4-34,19)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_199c2f3d92478fe1730905d60819f94b)
(and 
;; def=Prims.fst(552,17-552,20); use=Pulse.Class.BoundedIntegers.fst(26,4-34,19)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.int)
(HasType @x2
Prims.int))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Tm_refine_0b3b8d7bbce0f3a90c3e185383d0b53a @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_199c2f3d92478fe1730905d60819f94b.1))

(IsTotFun @x0)

;; def=Prims.fst(552,17-552,20); use=Pulse.Class.BoundedIntegers.fst(26,4-34,19)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.int)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_199c2f3d92478fe1730905d60819f94b.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_199c2f3d92478fe1730905d60819f94b))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_199c2f3d92478fe1730905d60819f94b))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_199c2f3d92478fe1730905d60819f94b))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_1093670c4147ebd8baef4abaaaf7e174
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Plus; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,27); use=Pulse.Class.BoundedIntegers.fst(7,19-11,7)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_1093670c4147ebd8baef4abaaaf7e174)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,27); use=Pulse.Class.BoundedIntegers.fst(7,19-11,7)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.eqtype)
(HasType (ApplyTT @x0
@x1)
(Tm_arrow_25c16b6f4aecd86a3b9e544381a99ebd @x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_1093670c4147ebd8baef4abaaaf7e174.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_1093670c4147ebd8baef4abaaaf7e174))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_1093670c4147ebd8baef4abaaaf7e174))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_1093670c4147ebd8baef4abaaaf7e174))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_0467a8a9929d74c8a7210fc0761e6a8c
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Subtraction; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,27); use=Pulse.Class.BoundedIntegers.fst(7,19-12,18)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_0467a8a9929d74c8a7210fc0761e6a8c)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,27); use=Pulse.Class.BoundedIntegers.fst(7,19-12,18)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.eqtype)
(HasType (ApplyTT @x0
@x1)
(Tm_arrow_3df63716551c3b4016aa88ee678f4bf3 @x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_0467a8a9929d74c8a7210fc0761e6a8c.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_0467a8a9929d74c8a7210fc0761e6a8c))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_0467a8a9929d74c8a7210fc0761e6a8c))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_0467a8a9929d74c8a7210fc0761e6a8c))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.returnM; Namespace Prims
(assert (! 
;; def=Prims.fst(625,13-625,20); use=Prims.fst(625,16-625,34)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_99724436653747ac6f5a6a00c64ff8bc)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_99724436653747ac6f5a6a00c64ff8bc))
:qid Prims_pre_typing_Tm_arrow_99724436653747ac6f5a6a00c64ff8bc))

:named Prims_pre_typing_Tm_arrow_99724436653747ac6f5a6a00c64ff8bc))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.abs; Namespace Prims
(assert (! 
;; def=Prims.fst(717,12-717,26); use=Prims.fst(717,12-717,26)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_35447810753695c4fe25c93af1251992)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_35447810753695c4fe25c93af1251992))
:qid Prims_pre_typing_Tm_arrow_35447810753695c4fe25c93af1251992))

:named Prims_pre_typing_Tm_arrow_35447810753695c4fe25c93af1251992))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_99724436653747ac6f5a6a00c64ff8bc
;;; Fact-ids: Name Prims.returnM; Namespace Prims
(assert (! 
;; def=Prims.fst(625,13-625,20); use=Prims.fst(625,16-625,34)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_99724436653747ac6f5a6a00c64ff8bc)
(and 
;; def=Prims.fst(625,13-625,20); use=Prims.fst(625,16-625,34)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
@x1))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x1))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Prims_interpretation_Tm_arrow_99724436653747ac6f5a6a00c64ff8bc.1))

(IsTotFun @x0)

;; def=Prims.fst(625,13-625,20); use=Prims.fst(625,16-625,34)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Tm_type)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Prims_interpretation_Tm_arrow_99724436653747ac6f5a6a00c64ff8bc.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_99724436653747ac6f5a6a00c64ff8bc))
:qid Prims_interpretation_Tm_arrow_99724436653747ac6f5a6a00c64ff8bc))

:named Prims_interpretation_Tm_arrow_99724436653747ac6f5a6a00c64ff8bc))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_35447810753695c4fe25c93af1251992
;;; Fact-ids: Name Prims.abs; Namespace Prims
(assert (! 
;; def=Prims.fst(717,12-717,26); use=Prims.fst(717,12-717,26)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_35447810753695c4fe25c93af1251992)
(and 
;; def=Prims.fst(717,12-717,26); use=Prims.fst(717,12-717,26)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.int)
(HasType (ApplyTT @x0
@x1)
Prims.int))
 

:pattern ((ApplyTT @x0
@x1))
:qid Prims_interpretation_Tm_arrow_35447810753695c4fe25c93af1251992.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_35447810753695c4fe25c93af1251992))
:qid Prims_interpretation_Tm_arrow_35447810753695c4fe25c93af1251992))

:named Prims_interpretation_Tm_arrow_35447810753695c4fe25c93af1251992))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.option @x2))
(= (FStar.Pervasives.Native.option @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.option @x2)))
:qid FStar.Pervasives.Native_pretyping_b53dbd183c526bc5d0f20d7b966ae125))

:named FStar.Pervasives.Native_pretyping_b53dbd183c526bc5d0f20d7b966ae125))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_unsigned; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_unsigned; Namespace Pulse.Class.BoundedIntegers
(assert (! (Valid (ApplyTT __uu__PartialApp
Pulse.Class.BoundedIntegers.fits@tok))
:named @kick_partial_app_dce650fa212bdf2b4611c94a888120e8))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_unsigned; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_unsigned; Namespace Pulse.Class.BoundedIntegers
(assert (! (Valid (ApplyTT __uu__PartialApp
Pulse.Class.BoundedIntegers.v@tok))
:named @kick_partial_app_5b3013c400d2f11de5b03482a2612ea2))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_unsigned; Namespace Pulse.Class.BoundedIntegers; Name Pulse.Class.BoundedIntegers.Mkbounded_unsigned; Namespace Pulse.Class.BoundedIntegers
(assert (! (Valid (ApplyTT __uu__PartialApp
Pulse.Class.BoundedIntegers.op_Less_Equals@tok))
:named @kick_partial_app_498b2873374f85bcbcc7227c22c65e92))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_int; Namespace Pulse.Class.BoundedIntegers
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.Pervasives.id@tok))
:named @kick_partial_app_29541797e1b72166e54799481de9392d))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name Prims.pow2; Namespace Prims
(assert (! 
;; def=Prims.fst(708,8-708,12); use=Prims.fst(708,8-708,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (= (Prims.pow2.fuel_instrumented (SFuel @u0)
@x1)
(Prims.pow2.fuel_instrumented ZFuel
@x1))
 

:pattern ((Prims.pow2.fuel_instrumented (SFuel @u0)
@x1))
:qid @fuel_irrelevance_Prims.pow2.fuel_instrumented))

:named @fuel_irrelevance_Prims.pow2.fuel_instrumented))
(push) ;; push{2

; Starting query at Pulse.Class.BoundedIntegers.fst(56,4-72,5)

(declare-fun label_20 () Bool)
(declare-fun label_19 () Bool)
(declare-fun label_18 () Bool)
(declare-fun label_17 () Bool)
(declare-fun label_16 () Bool)
(declare-fun label_15 () Bool)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)











;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: 
(assert (! (Valid (ApplyTT __uu__PartialApp
Pulse.Class.BoundedIntegers.op_Plus@tok))
:named @kick_partial_app_26b0487154eb4f19f9efc5cc4a7bd106))
(declare-fun Tm_refine_ea6593cb53d4a70393ca1e1b5ea6a679 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(55,4-55,57); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_ea6593cb53d4a70393ca1e1b5ea6a679 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_ea6593cb53d4a70393ca1e1b5ea6a679 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_ea6593cb53d4a70393ca1e1b5ea6a679))

:named refinement_kinding_Tm_refine_ea6593cb53d4a70393ca1e1b5ea6a679))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(55,4-55,57); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_ea6593cb53d4a70393ca1e1b5ea6a679 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.option @x2))

;; def=Pulse.Class.BoundedIntegers.fst(55,17-55,55); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(implies 
;; def=Pulse.Class.BoundedIntegers.fst(55,17-55,24); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x2
@x1))


;; def=Pulse.Class.BoundedIntegers.fst(55,29-55,55); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x2)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x2
@x3))
(FStar.Pervasives.Native.__proj__Some__item__v @x2
@x1))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Plus@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x2)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x2
@x3))
@x4))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x2)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x2
@x3))
@x5)))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_ea6593cb53d4a70393ca1e1b5ea6a679 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_ea6593cb53d4a70393ca1e1b5ea6a679))

:named refinement_interpretation_Tm_refine_ea6593cb53d4a70393ca1e1b5ea6a679))
;;;;;;;;;;;;;;;;haseq for Tm_refine_ea6593cb53d4a70393ca1e1b5ea6a679
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(55,4-55,57); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_ea6593cb53d4a70393ca1e1b5ea6a679 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.option @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_ea6593cb53d4a70393ca1e1b5ea6a679 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_ea6593cb53d4a70393ca1e1b5ea6a679))

:named haseqTm_refine_ea6593cb53d4a70393ca1e1b5ea6a679))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: 
(assert (! (Valid (ApplyTT __uu__PartialApp
Pulse.Class.BoundedIntegers.max_bound@tok))
:named @kick_partial_app_a497af650cabeb45e19e12e5ace365ec))















;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: 
(assert (! (Valid (ApplyTT __uu__PartialApp
Pulse.Class.BoundedIntegers.op_Subtraction@tok))
:named @kick_partial_app_6eecc02fce329c36f4e524ea1499ff10))

(declare-fun Tm_refine_d1ea46b957224f088cf16c7c5c4bb132 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,28-14,54); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_d1ea46b957224f088cf16c7c5c4bb132 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_d1ea46b957224f088cf16c7c5c4bb132 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_d1ea46b957224f088cf16c7c5c4bb132))

:named refinement_kinding_Tm_refine_d1ea46b957224f088cf16c7c5c4bb132))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,28-14,54); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_d1ea46b957224f088cf16c7c5c4bb132 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
Prims.bool)

;; def=Pulse.Class.BoundedIntegers.fst(14,37-14,53); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(= @x1
(Prims.op_LessThanOrEqual (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x2)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x2
@x3))
@x4)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x2)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x2
@x3))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Subtraction@tok
@x2)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x2
@x3))
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.max_bound@tok
@x2)
@x3))
@x5))))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_d1ea46b957224f088cf16c7c5c4bb132 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_d1ea46b957224f088cf16c7c5c4bb132))

:named refinement_interpretation_Tm_refine_d1ea46b957224f088cf16c7c5c4bb132))
;;;;;;;;;;;;;;;;haseq for Tm_refine_d1ea46b957224f088cf16c7c5c4bb132
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,28-14,54); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_d1ea46b957224f088cf16c7c5c4bb132 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq Prims.bool)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_d1ea46b957224f088cf16c7c5c4bb132 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_d1ea46b957224f088cf16c7c5c4bb132))

:named haseqTm_refine_d1ea46b957224f088cf16c7c5c4bb132))





























































































































































































; Encoding query formula : forall (t: Prims.eqtype) (c: Pulse.Class.BoundedIntegers.bounded_unsigned t) (x: t) (y: t).
;   (forall (o: FStar.Pervasives.Native.option t).
;       Some? o ==>
;       Some? o /\
;       (forall (any_result: FStar.Pervasives.Native.option t).
;           o == any_result ==>
;           (forall (any_result: t).
;               o.v == any_result ==>
;               (forall (any_result: Prims.int).
;                   Pulse.Class.BoundedIntegers.v o.v == any_result ==>
;                   (forall (any_result: Prims.int).
;                       Pulse.Class.BoundedIntegers.v x == any_result ==>
;                       (forall (any_result: Prims.int).
;                           Pulse.Class.BoundedIntegers.v y == any_result ==>
;                           Pulse.Class.BoundedIntegers.bounded_int_int.fits (Pulse.Class.BoundedIntegers.bounded_int_int
;                                 .v (Pulse.Class.BoundedIntegers.v x) +
;                               Pulse.Class.BoundedIntegers.bounded_int_int.v (Pulse.Class.BoundedIntegers.v
;                                     y)))))))) /\
;   (forall (k:
;       Prims.pure_post (o:
;           FStar.Pervasives.Native.option t
;             { Some? o ==>
;               Pulse.Class.BoundedIntegers.v o.v ==
;               Pulse.Class.BoundedIntegers.v x + Pulse.Class.BoundedIntegers.v y })).
;       (forall (x:
;           o:
;           FStar.Pervasives.Native.option t
;             { Some? o ==>
;               Pulse.Class.BoundedIntegers.v o.v ==
;               Pulse.Class.BoundedIntegers.v x + Pulse.Class.BoundedIntegers.v y }).
;           {:pattern Prims.guard_free (k x)}
;           Prims.auto_squash (k x)) ==>
;       (c.static_max_bound == true ==>
;         x <= Pulse.Class.BoundedIntegers.max_bound /\
;         (forall (pure_result: Prims.unit).
;             x <= Pulse.Class.BoundedIntegers.max_bound ==>
;             (forall (o: FStar.Pervasives.Native.option t).
;                 Some? o ==>
;                 Some? o /\
;                 (forall (any_result: FStar.Pervasives.Native.option t).
;                     o == any_result ==>
;                     (forall (any_result: t).
;                         o.v == any_result ==>
;                         (forall (any_result: Prims.int).
;                             Pulse.Class.BoundedIntegers.v o.v == any_result ==>
;                             (forall (any_result: Prims.int).
;                                 Pulse.Class.BoundedIntegers.v x == any_result ==>
;                                 (forall (any_result: Prims.int).
;                                     Pulse.Class.BoundedIntegers.v y == any_result ==>
;                                     Pulse.Class.BoundedIntegers.bounded_int_int.fits (Pulse.Class.BoundedIntegers.bounded_int_int
;                                           .v (Pulse.Class.BoundedIntegers.v x) +
;                                         Pulse.Class.BoundedIntegers.bounded_int_int.v (Pulse.Class.BoundedIntegers.v
;                                               y)))))))) /\
;             (Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned t c).fits ((Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned
;                     t
;                     c)
;                   .v Pulse.Class.BoundedIntegers.max_bound -
;                 (Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned t c).v x) /\
;             (forall (pure_result: t).
;                 (Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned t c).v pure_result ==
;                 (Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned t c).v Pulse.Class.BoundedIntegers.max_bound
;                  -
;                 (Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned t c).v x ==>
;                 Pulse.Class.BoundedIntegers.max_bound - x == pure_result ==>
;                 (forall (any_result:
;                     b:
;                     Prims.bool
;                       { b =
;                         ((Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned t c).v y <=
;                         (Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned t c).v (Pulse.Class.BoundedIntegers.max_bound -
;                             x)) }).
;                     y <= Pulse.Class.BoundedIntegers.max_bound - x == any_result ==>
;                     (forall (k:
;                         Prims.pure_post (o:
;                             FStar.Pervasives.Native.option t
;                               { Some? o ==>
;                                 Pulse.Class.BoundedIntegers.v o.v ==
;                                 Pulse.Class.BoundedIntegers.v x + Pulse.Class.BoundedIntegers.v y }))
;                       .
;                         (forall (x:
;                             o:
;                             FStar.Pervasives.Native.option t
;                               { Some? o ==>
;                                 Pulse.Class.BoundedIntegers.v o.v ==
;                                 Pulse.Class.BoundedIntegers.v x + Pulse.Class.BoundedIntegers.v y })
;                           .
;                             {:pattern Prims.guard_free (k x)}
;                             Prims.auto_squash (k x)) ==>
;                         (y <= Pulse.Class.BoundedIntegers.max_bound - x == true ==>
;                           (Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned t c).fits ((Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned
;                                   t
;                                   c)
;                                 .v x +
;                               (Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned t c).v y) /\
;                           (forall (pure_result: t).
;                               (Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned t c).v pure_result
;                                ==
;                               (Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned t c).v x +
;                               (Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned t c).v y ==>
;                               x + y == pure_result ==>
;                               (forall (any_result: FStar.Pervasives.Native.option t).
;                                   FStar.Pervasives.Native.Some (x + y) == any_result ==>
;                                   Some? (FStar.Pervasives.Native.Some (x + y)) ==>
;                                   Pulse.Class.BoundedIntegers.v (FStar.Pervasives.Native.Some
;                                       (x + y))
;                                       .v ==
;                                   Pulse.Class.BoundedIntegers.v x + Pulse.Class.BoundedIntegers.v y)
;                           )) /\
;                         (~(y <= Pulse.Class.BoundedIntegers.max_bound - x = true) ==>
;                           (forall (b: Prims.bool).
;                               y <= Pulse.Class.BoundedIntegers.max_bound - x == b ==>
;                               Some? FStar.Pervasives.Native.None ==>
;                               Pulse.Class.BoundedIntegers.v (FStar.Pervasives.Native.None).v ==
;                               Pulse.Class.BoundedIntegers.v x + Pulse.Class.BoundedIntegers.v y)))))
;         )) /\
;       (~(c.static_max_bound = true) ==>
;         (forall (b: Prims.bool).
;             c.static_max_bound == b ==>
;             (forall (o: FStar.Pervasives.Native.option t).
;                 Some? o ==>
;                 Some? o /\
;                 (forall (any_result: FStar.Pervasives.Native.option t).
;                     o == any_result ==>
;                     (forall (any_result: t).
;                         o.v == any_result ==>
;                         (forall (any_result: Prims.int).
;                             Pulse.Class.BoundedIntegers.v o.v == any_result ==>
;                             (forall (any_result: Prims.int).
;                                 Pulse.Class.BoundedIntegers.v x == any_result ==>
;                                 (forall (any_result: Prims.int).
;                                     Pulse.Class.BoundedIntegers.v y == any_result ==>
;                                     Pulse.Class.BoundedIntegers.bounded_int_int.fits (Pulse.Class.BoundedIntegers.bounded_int_int
;                                           .v (Pulse.Class.BoundedIntegers.v x) +
;                                         Pulse.Class.BoundedIntegers.bounded_int_int.v (Pulse.Class.BoundedIntegers.v
;                                               y)))))))) /\
;             (forall (k:
;                 Prims.pure_post (o:
;                     FStar.Pervasives.Native.option t
;                       { Some? o ==>
;                         Pulse.Class.BoundedIntegers.v o.v ==
;                         Pulse.Class.BoundedIntegers.v x + Pulse.Class.BoundedIntegers.v y })).
;                 (forall (x:
;                     o:
;                     FStar.Pervasives.Native.option t
;                       { Some? o ==>
;                         Pulse.Class.BoundedIntegers.v o.v ==
;                         Pulse.Class.BoundedIntegers.v x + Pulse.Class.BoundedIntegers.v y }).
;                     {:pattern Prims.guard_free (k x)}
;                     Prims.auto_squash (k x)) ==>
;                 (x <= Pulse.Class.BoundedIntegers.max_bound == true ==>
;                   (forall (any_result: Prims.int).
;                       Pulse.Class.BoundedIntegers.v Pulse.Class.BoundedIntegers.max_bound ==
;                       any_result ==>
;                       (forall (any_result: Prims.int).
;                           Pulse.Class.BoundedIntegers.v x == any_result ==>
;                           Pulse.Class.BoundedIntegers.bounded_int_int.fits (Pulse.Class.BoundedIntegers.bounded_int_int
;                                 .v (Pulse.Class.BoundedIntegers.v Pulse.Class.BoundedIntegers.max_bound
;                                   ) -
;                               Pulse.Class.BoundedIntegers.bounded_int_int.v (Pulse.Class.BoundedIntegers.v
;                                     x)) /\
;                           (forall (pure_result: Prims.int).
;                               Pulse.Class.BoundedIntegers.bounded_int_int.v pure_result ==
;                               Pulse.Class.BoundedIntegers.bounded_int_int.v (Pulse.Class.BoundedIntegers.v
;                                     Pulse.Class.BoundedIntegers.max_bound) -
;                               Pulse.Class.BoundedIntegers.bounded_int_int.v (Pulse.Class.BoundedIntegers.v
;                                     x) ==>
;                               Pulse.Class.BoundedIntegers.v Pulse.Class.BoundedIntegers.max_bound -
;                               Pulse.Class.BoundedIntegers.v x ==
;                               pure_result ==>
;                               (forall (any_result: Prims.prop).
;                                   Pulse.Class.BoundedIntegers.fits (Pulse.Class.BoundedIntegers.v Pulse.Class.BoundedIntegers.max_bound
;                                        -
;                                       Pulse.Class.BoundedIntegers.v x) ==
;                                   any_result ==>
;                                   (forall (return_val: Prims.prop).
;                                       return_val ==
;                                       Pulse.Class.BoundedIntegers.fits (Pulse.Class.BoundedIntegers.v
;                                             Pulse.Class.BoundedIntegers.max_bound -
;                                           Pulse.Class.BoundedIntegers.v x) ==>
;                                       Pulse.Class.BoundedIntegers.fits (Pulse.Class.BoundedIntegers.v
;                                             Pulse.Class.BoundedIntegers.max_bound -
;                                           Pulse.Class.BoundedIntegers.v x) ==
;                                       return_val ==>
;                                       Pulse.Class.BoundedIntegers.fits (Pulse.Class.BoundedIntegers.v
;                                             Pulse.Class.BoundedIntegers.max_bound -
;                                           Pulse.Class.BoundedIntegers.v x) /\
;                                       (forall (pure_result: Prims.unit).
;                                           Pulse.Class.BoundedIntegers.fits (Pulse.Class.BoundedIntegers.v
;                                                 Pulse.Class.BoundedIntegers.max_bound -
;                                               Pulse.Class.BoundedIntegers.v x) ==>
;                                           (forall (o: FStar.Pervasives.Native.option t).
;                                               Some? o ==>
;                                               Some? o /\
;                                               (forall (any_result: FStar.Pervasives.Native.option t)
;                                                 .
;                                                   o == any_result ==>
;                                                   (forall (any_result: t).
;                                                       o.v == any_result ==>
;                                                       (forall (any_result: Prims.int).
;                                                           Pulse.Class.BoundedIntegers.v o.v ==
;                                                           any_result ==>
;                                                           (forall (any_result: Prims.int).
;                                                               Pulse.Class.BoundedIntegers.v x ==
;                                                               any_result ==>
;                                                               (forall (any_result: Prims.int).
;                                                                   Pulse.Class.BoundedIntegers.v y ==
;                                                                   any_result ==>
;                                                                   Pulse.Class.BoundedIntegers.bounded_int_int
;                                                                     .fits (Pulse.Class.BoundedIntegers.bounded_int_int
;                                                                         .v (Pulse.Class.BoundedIntegers.v
;                                                                             x) +
;                                                                       Pulse.Class.BoundedIntegers.bounded_int_int
;                                                                         .v (Pulse.Class.BoundedIntegers.v
;                                                                             y)))))))) /\
;                                           (Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned
;                                               t
;                                               c)
;                                             .fits ((Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned
;                                                   t
;                                                   c)
;                                                 .v Pulse.Class.BoundedIntegers.max_bound -
;                                               (Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned
;                                                   t
;                                                   c)
;                                                 .v x) /\
;                                           (forall (pure_result: t).
;                                               (Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned
;                                                   t
;                                                   c)
;                                                 .v pure_result ==
;                                               (Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned
;                                                   t
;                                                   c)
;                                                 .v Pulse.Class.BoundedIntegers.max_bound -
;                                               (Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned
;                                                   t
;                                                   c)
;                                                 .v x ==>
;                                               Pulse.Class.BoundedIntegers.max_bound - x ==
;                                               pure_result ==>
;                                               (forall (any_result:
;                                                   b:
;                                                   Prims.bool
;                                                     { b =
;                                                       ((Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned
;                                                           t
;                                                           c)
;                                                         .v y <=
;                                                       (Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned
;                                                           t
;                                                           c)
;                                                         .v (Pulse.Class.BoundedIntegers.max_bound -
;                                                           x)) }).
;                                                   y <= Pulse.Class.BoundedIntegers.max_bound - x ==
;                                                   any_result ==>
;                                                   (forall (k:
;                                                       Prims.pure_post (o:
;                                                           FStar.Pervasives.Native.option t
;                                                             { Some? o ==>
;                                                               Pulse.Class.BoundedIntegers.v o.v ==
;                                                               Pulse.Class.BoundedIntegers.v x +
;                                                               Pulse.Class.BoundedIntegers.v y })).
;                                                       (forall (x:
;                                                           o:
;                                                           FStar.Pervasives.Native.option t
;                                                             { Some? o ==>
;                                                               Pulse.Class.BoundedIntegers.v o.v ==
;                                                               Pulse.Class.BoundedIntegers.v x +
;                                                               Pulse.Class.BoundedIntegers.v y }).
;                                                           {:pattern Prims.guard_free (k x)}
;                                                           Prims.auto_squash (k x)) ==>
;                                                       (y <=
;                                                         Pulse.Class.BoundedIntegers.max_bound - x ==
;                                                         true ==>
;                                                         (Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned
;                                                             t
;                                                             c)
;                                                           .fits ((Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned
;                                                                 t
;                                                                 c)
;                                                               .v x +
;                                                             (Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned
;                                                                 t
;                                                                 c)
;                                                               .v y) /\
;                                                         (forall (pure_result: t).
;                                                             (Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned
;                                                                 t
;                                                                 c)
;                                                               .v pure_result ==
;                                                             (Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned
;                                                                 t
;                                                                 c)
;                                                               .v x +
;                                                             (Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned
;                                                                 t
;                                                                 c)
;                                                               .v y ==>
;                                                             x + y == pure_result ==>
;                                                             (forall (any_result:
;                                                                 FStar.Pervasives.Native.option t).
;                                                                 FStar.Pervasives.Native.Some (x + y) ==
;                                                                 any_result ==>
;                                                                 Some? (FStar.Pervasives.Native.Some
;                                                                     (x + y)) ==>
;                                                                 Pulse.Class.BoundedIntegers.v (FStar.Pervasives.Native.Some
;                                                                     (x + y))
;                                                                     .v ==
;                                                                 Pulse.Class.BoundedIntegers.v x +
;                                                                 Pulse.Class.BoundedIntegers.v y))) /\
;                                                       (~(y <=
;                                                           Pulse.Class.BoundedIntegers.max_bound - x =
;                                                           true) ==>
;                                                         (forall (b: Prims.bool).
;                                                             y <=
;                                                             Pulse.Class.BoundedIntegers.max_bound -
;                                                             x ==
;                                                             b ==>
;                                                             Some? FStar.Pervasives.Native.None ==>
;                                                             Pulse.Class.BoundedIntegers.v (FStar.Pervasives.Native.None
;                                                               )
;                                                                 .v ==
;                                                             Pulse.Class.BoundedIntegers.v x +
;                                                             Pulse.Class.BoundedIntegers.v y)))))))))
;                       ))) /\
;                 (~(x <= Pulse.Class.BoundedIntegers.max_bound = true) ==>
;                   (forall (b: Prims.bool).
;                       x <= Pulse.Class.BoundedIntegers.max_bound == b ==>
;                       Some? FStar.Pervasives.Native.None ==>
;                       Pulse.Class.BoundedIntegers.v (FStar.Pervasives.Native.None).v ==
;                       Pulse.Class.BoundedIntegers.v x + Pulse.Class.BoundedIntegers.v y))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let safe_add`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(Pulse.Class.BoundedIntegers.bounded_unsigned @x0))
(HasType @x2
@x0)
(HasType @x3
@x0))
(and 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(FStar.Pervasives.Native.option @x0))

;; def=Pulse.Class.BoundedIntegers.fst(55,17-55,24); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x0
@x4))
)

;; def=Prims.fst(459,77-459,89); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(and 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=Pulse.Class.BoundedIntegers.fst(55,40-55,41)
(or label_1

;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x0
@x4))
)


;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(FStar.Pervasives.Native.option @x0))

;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(= @x4
@x5)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
@x0)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(= (FStar.Pervasives.Native.__proj__Some__item__v @x0
@x4)
@x6)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.int)

;; def=Prims.fst(175,35-175,36); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(FStar.Pervasives.Native.__proj__Some__item__v @x0
@x4))
@x7)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.int)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)
@x8)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.int)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)
@x9)
)

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(55,4-55,57)
(or label_2

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(Prims.op_Addition (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3))))
)
)
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
)
)
 
;;no pats
:qid @query.1))

(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post (Tm_refine_ea6593cb53d4a70393ca1e1b5ea6a679 @x0
@x1
@x2
@x3)))

;; def=Prims.fst(402,27-402,88); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(forall ((@x5 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(Valid 
;; def=Prims.fst(402,84-402,87); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(ApplyTT @x4
@x5)
)

 

:pattern ((ApplyTT @x4
@x5))
:qid @query.8))
)

;; def=Prims.fst(389,2-389,39); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(and (implies 
;; def=Pulse.Class.BoundedIntegers.fst(56,7-56,25); use=Pulse.Class.BoundedIntegers.fst(56,7-56,25)
(= (Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__static_max_bound @x0
@x1)
(BoxBool true))


;; def=Prims.fst(441,29-441,97); use=Pulse.Class.BoundedIntegers.fst(58,6-58,12)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(58,13-58,30); use=Pulse.Class.BoundedIntegers.fst(58,6-58,12)
(or label_3

;; def=Pulse.Class.BoundedIntegers.fst(58,13-58,30); use=Pulse.Class.BoundedIntegers.fst(58,6-58,12)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.max_bound@tok
@x0)
@x1)))
)


;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(58,6-58,12)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)

;; def=Pulse.Class.BoundedIntegers.fst(58,13-58,30); use=Pulse.Class.BoundedIntegers.fst(58,6-58,12)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.max_bound@tok
@x0)
@x1)))
)

;; def=Prims.fst(459,77-459,89); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(and 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(59,6-61,15)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(FStar.Pervasives.Native.option @x0))

;; def=Pulse.Class.BoundedIntegers.fst(55,17-55,24); use=Pulse.Class.BoundedIntegers.fst(59,6-61,15)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x0
@x6))
)

;; def=Prims.fst(459,77-459,89); use=Pulse.Class.BoundedIntegers.fst(59,6-61,15)
(and 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=Pulse.Class.BoundedIntegers.fst(55,40-55,41)
(or label_4

;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=Pulse.Class.BoundedIntegers.fst(59,6-61,15)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x0
@x6))
)


;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(59,6-61,15)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(FStar.Pervasives.Native.option @x0))

;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=Pulse.Class.BoundedIntegers.fst(59,6-61,15)
(= @x6
@x7)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(59,6-61,15)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
@x0)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(59,6-61,15)
(= (FStar.Pervasives.Native.__proj__Some__item__v @x0
@x6)
@x8)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(59,6-61,15)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.int)

;; def=Prims.fst(175,35-175,36); use=Pulse.Class.BoundedIntegers.fst(59,6-61,15)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(FStar.Pervasives.Native.__proj__Some__item__v @x0
@x6))
@x9)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(59,6-61,15)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.int)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(59,6-61,15)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)
@x10)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(59,6-61,15)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.int)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(59,6-61,15)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)
@x11)
)

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(55,4-55,57)
(or label_5

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(59,6-61,15)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(59,6-61,15)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(Prims.op_Addition (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3))))
)
)
)
 
;;no pats
:qid @query.15))
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.10))


;; def=Pulse.Class.BoundedIntegers.fst(12,53-12,69); use=Pulse.Class.BoundedIntegers.fst(59,25-59,26)
(or label_6

;; def=Pulse.Class.BoundedIntegers.fst(12,53-12,69); use=Pulse.Class.BoundedIntegers.fst(59,25-59,26)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(12,53-12,69); use=Pulse.Class.BoundedIntegers.fst(59,25-59,26)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(Prims.op_Subtraction (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.max_bound@tok
@x0)
@x1))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)))
)
)


;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(59,25-59,26)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
@x0)

;; def=Pulse.Class.BoundedIntegers.fst(12,89-12,105); use=Pulse.Class.BoundedIntegers.fst(59,25-59,26)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x6)
(Prims.op_Subtraction (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.max_bound@tok
@x0)
@x1))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)))


;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Subtraction@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.max_bound@tok
@x0)
@x1))
@x2)
@x6)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(Tm_refine_d1ea46b957224f088cf16c7c5c4bb132 @x0
@x1
@x3
@x2))

;; def=Pulse.Class.BoundedIntegers.fst(59,9-59,29); use=Pulse.Class.BoundedIntegers.fst(59,9-59,29)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Subtraction@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.max_bound@tok
@x0)
@x1))
@x2))
@x7)
)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Prims.pure_post (Tm_refine_ea6593cb53d4a70393ca1e1b5ea6a679 @x0
@x1
@x2
@x3)))

;; def=Prims.fst(402,27-402,88); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(forall ((@x9 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(Valid 
;; def=Prims.fst(402,84-402,87); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(ApplyTT @x8
@x9)
)

 

:pattern ((ApplyTT @x8
@x9))
:qid @query.19))
)

;; def=Prims.fst(389,2-389,39); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(and (implies 
;; def=Pulse.Class.BoundedIntegers.fst(59,9-59,29); use=Pulse.Class.BoundedIntegers.fst(59,9-59,29)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Subtraction@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.max_bound@tok
@x0)
@x1))
@x2))
(BoxBool true))


;; def=Prims.fst(441,29-441,97); use=Pulse.Class.BoundedIntegers.fst(60,19-60,20)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(60,19-60,20)
(or label_7

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(60,19-60,20)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(60,19-60,20)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(Prims.op_Addition (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)))
)
)


;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(60,19-60,20)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
@x0)

;; def=Pulse.Class.BoundedIntegers.fst(11,80-11,96); use=Pulse.Class.BoundedIntegers.fst(60,19-60,20)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x9)
(Prims.op_Addition (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)))


;; def=FStar.Pervasives.Native.fst(33,11-33,12); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Plus@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)
@x3)
@x9)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(FStar.Pervasives.Native.option @x0))

;; def=Pulse.Class.BoundedIntegers.fst(55,4-60,23); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(= (FStar.Pervasives.Native.Some @x0
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Plus@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)
@x3))
@x10)


;; def=Pulse.Class.BoundedIntegers.fst(55,17-55,24); use=Pulse.Class.BoundedIntegers.fst(60,11-60,23)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x0
(FStar.Pervasives.Native.Some @x0
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Plus@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)
@x3))))
)

;; def=Pulse.Class.BoundedIntegers.fst(55,29-55,55); use=Pulse.Class.BoundedIntegers.fst(60,11-60,23)
(or label_8

;; def=Pulse.Class.BoundedIntegers.fst(55,29-55,55); use=Pulse.Class.BoundedIntegers.fst(60,11-60,23)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(FStar.Pervasives.Native.__proj__Some__item__v @x0
(FStar.Pervasives.Native.Some @x0
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Plus@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)
@x3))))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Plus@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)))
)
)
 
;;no pats
:qid @query.21))
)
 
;;no pats
:qid @query.20))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(not 
;; def=Pulse.Class.BoundedIntegers.fst(59,9-59,29); use=Pulse.Class.BoundedIntegers.fst(59,9-59,29)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Subtraction@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.max_bound@tok
@x0)
@x1))
@x2))
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.bool)

;; def=Pulse.Class.BoundedIntegers.fst(59,9-61,15); use=Pulse.Class.BoundedIntegers.fst(59,9-61,15)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Subtraction@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.max_bound@tok
@x0)
@x1))
@x2))
@x9)


;; def=Pulse.Class.BoundedIntegers.fst(55,17-55,24); use=Pulse.Class.BoundedIntegers.fst(61,11-61,15)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x0
(FStar.Pervasives.Native.None @x0)))
)

;; def=Pulse.Class.BoundedIntegers.fst(55,29-55,55); use=Pulse.Class.BoundedIntegers.fst(61,11-61,15)
(or label_9

;; def=Pulse.Class.BoundedIntegers.fst(55,29-55,55); use=Pulse.Class.BoundedIntegers.fst(61,11-61,15)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(FStar.Pervasives.Native.__proj__Some__item__v @x0
(FStar.Pervasives.Native.None @x0)))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Plus@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)))
)
)
 
;;no pats
:qid @query.22))
))
)
 
;;no pats
:qid @query.18)))
 
;;no pats
:qid @query.17))
)
 
;;no pats
:qid @query.16))
)
)
 
;;no pats
:qid @query.9))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(not 
;; def=Pulse.Class.BoundedIntegers.fst(56,7-56,25); use=Pulse.Class.BoundedIntegers.fst(56,7-56,25)
(= (Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__static_max_bound @x0
@x1)
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.bool)

;; def=Pulse.Class.BoundedIntegers.fst(56,7-72,5); use=Pulse.Class.BoundedIntegers.fst(56,7-72,5)
(= (Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__static_max_bound @x0
@x1)
@x5)
)

;; def=Prims.fst(459,77-459,89); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(and 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(63,9-72,5)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(FStar.Pervasives.Native.option @x0))

;; def=Pulse.Class.BoundedIntegers.fst(55,17-55,24); use=Pulse.Class.BoundedIntegers.fst(63,9-72,5)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x0
@x6))
)

;; def=Prims.fst(459,77-459,89); use=Pulse.Class.BoundedIntegers.fst(63,9-72,5)
(and 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=Pulse.Class.BoundedIntegers.fst(55,40-55,41)
(or label_10

;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=Pulse.Class.BoundedIntegers.fst(63,9-72,5)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x0
@x6))
)


;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(63,9-72,5)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(FStar.Pervasives.Native.option @x0))

;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=Pulse.Class.BoundedIntegers.fst(63,9-72,5)
(= @x6
@x7)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(63,9-72,5)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
@x0)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(63,9-72,5)
(= (FStar.Pervasives.Native.__proj__Some__item__v @x0
@x6)
@x8)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(63,9-72,5)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.int)

;; def=Prims.fst(175,35-175,36); use=Pulse.Class.BoundedIntegers.fst(63,9-72,5)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(FStar.Pervasives.Native.__proj__Some__item__v @x0
@x6))
@x9)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(63,9-72,5)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.int)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(63,9-72,5)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)
@x10)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(63,9-72,5)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.int)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(63,9-72,5)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)
@x11)
)

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(55,4-55,57)
(or label_11

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(63,9-72,5)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(63,9-72,5)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(Prims.op_Addition (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3))))
)
)
)
 
;;no pats
:qid @query.29))
)
 
;;no pats
:qid @query.28))
)
 
;;no pats
:qid @query.27))
)
 
;;no pats
:qid @query.26))
)
 
;;no pats
:qid @query.25))
)
)
 
;;no pats
:qid @query.24))

(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Prims.pure_post (Tm_refine_ea6593cb53d4a70393ca1e1b5ea6a679 @x0
@x1
@x2
@x3)))

;; def=Prims.fst(402,27-402,88); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(forall ((@x7 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(Valid 
;; def=Prims.fst(402,84-402,87); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(ApplyTT @x6
@x7)
)

 

:pattern ((ApplyTT @x6
@x7))
:qid @query.31))
)

;; def=Prims.fst(389,2-389,39); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(and (implies 
;; def=Pulse.Class.BoundedIntegers.fst(64,9-64,23); use=Pulse.Class.BoundedIntegers.fst(64,9-64,23)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.max_bound@tok
@x0)
@x1))
(BoxBool true))


;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.int)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.max_bound@tok
@x0)
@x1))
@x7)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.int)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)
@x8)
)

;; def=Prims.fst(441,29-441,97); use=Pulse.Class.BoundedIntegers.fst(66,42-66,43)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(12,53-12,69); use=Pulse.Class.BoundedIntegers.fst(66,42-66,43)
(or label_12

;; def=Pulse.Class.BoundedIntegers.fst(12,53-12,69); use=Pulse.Class.BoundedIntegers.fst(66,42-66,43)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(12,53-12,69); use=Pulse.Class.BoundedIntegers.fst(66,42-66,43)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(Prims.op_Subtraction (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.max_bound@tok
@x0)
@x1)))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2))))
)
)


;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(66,42-66,43)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.int)

;; def=Pulse.Class.BoundedIntegers.fst(12,89-12,105); use=Pulse.Class.BoundedIntegers.fst(66,42-66,43)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
@x9)
(Prims.op_Subtraction (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.max_bound@tok
@x0)
@x1)))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2))))


;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Subtraction@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.max_bound@tok
@x0)
@x1)))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2))
@x9)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.prop)

;; def=Pulse.Class.BoundedIntegers.fst(8,17-66,49); use=Pulse.Class.BoundedIntegers.fst(66,15-66,49)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.fits@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Subtraction@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.max_bound@tok
@x0)
@x1)))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)))
@x10)
)

;; def=Prims.fst(356,2-356,58); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.prop)

;; def=Prims.fst(356,26-356,41); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(= @x11
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.fits@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Subtraction@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.max_bound@tok
@x0)
@x1)))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2))))


;; def=Prims.fst(672,13-672,14); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.fits@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Subtraction@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.max_bound@tok
@x0)
@x1)))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)))
@x11)
)

;; def=Prims.fst(441,29-441,97); use=Pulse.Class.BoundedIntegers.fst(66,8-66,14)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(66,15-66,49); use=Pulse.Class.BoundedIntegers.fst(66,8-66,14)
(or label_13

;; def=Pulse.Class.BoundedIntegers.fst(66,15-66,49); use=Pulse.Class.BoundedIntegers.fst(66,8-66,14)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(66,15-66,49); use=Pulse.Class.BoundedIntegers.fst(66,8-66,14)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.fits@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Subtraction@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.max_bound@tok
@x0)
@x1)))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)))
)
)


;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(66,8-66,14)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.unit)

;; def=Pulse.Class.BoundedIntegers.fst(66,15-66,49); use=Pulse.Class.BoundedIntegers.fst(66,8-66,14)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(66,15-66,49); use=Pulse.Class.BoundedIntegers.fst(66,8-66,14)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.fits@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Subtraction@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.max_bound@tok
@x0)
@x1)))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)))
)
)

;; def=Prims.fst(459,77-459,89); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(and 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(67,8-69,17)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(FStar.Pervasives.Native.option @x0))

;; def=Pulse.Class.BoundedIntegers.fst(55,17-55,24); use=Pulse.Class.BoundedIntegers.fst(67,8-69,17)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x0
@x13))
)

;; def=Prims.fst(459,77-459,89); use=Pulse.Class.BoundedIntegers.fst(67,8-69,17)
(and 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=Pulse.Class.BoundedIntegers.fst(55,40-55,41)
(or label_14

;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=Pulse.Class.BoundedIntegers.fst(67,8-69,17)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x0
@x13))
)


;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(67,8-69,17)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
(FStar.Pervasives.Native.option @x0))

;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=Pulse.Class.BoundedIntegers.fst(67,8-69,17)
(= @x13
@x14)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(67,8-69,17)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
@x0)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(67,8-69,17)
(= (FStar.Pervasives.Native.__proj__Some__item__v @x0
@x13)
@x15)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(67,8-69,17)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
Prims.int)

;; def=Prims.fst(175,35-175,36); use=Pulse.Class.BoundedIntegers.fst(67,8-69,17)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(FStar.Pervasives.Native.__proj__Some__item__v @x0
@x13))
@x16)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(67,8-69,17)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Prims.int)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(67,8-69,17)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)
@x17)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(67,8-69,17)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
Prims.int)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(67,8-69,17)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)
@x18)
)

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(55,4-55,57)
(or label_15

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(67,8-69,17)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(67,8-69,17)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(Prims.op_Addition (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3))))
)
)
)
 
;;no pats
:qid @query.43))
)
 
;;no pats
:qid @query.42))
)
 
;;no pats
:qid @query.41))
)
 
;;no pats
:qid @query.40))
)
 
;;no pats
:qid @query.39))
)
)
 
;;no pats
:qid @query.38))


;; def=Pulse.Class.BoundedIntegers.fst(12,53-12,69); use=Pulse.Class.BoundedIntegers.fst(67,27-67,28)
(or label_16

;; def=Pulse.Class.BoundedIntegers.fst(12,53-12,69); use=Pulse.Class.BoundedIntegers.fst(67,27-67,28)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(12,53-12,69); use=Pulse.Class.BoundedIntegers.fst(67,27-67,28)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(Prims.op_Subtraction (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.max_bound@tok
@x0)
@x1))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)))
)
)


;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(67,27-67,28)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
@x0)

;; def=Pulse.Class.BoundedIntegers.fst(12,89-12,105); use=Pulse.Class.BoundedIntegers.fst(67,27-67,28)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x13)
(Prims.op_Subtraction (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.max_bound@tok
@x0)
@x1))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)))


;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Subtraction@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.max_bound@tok
@x0)
@x1))
@x2)
@x13)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
(Tm_refine_d1ea46b957224f088cf16c7c5c4bb132 @x0
@x1
@x3
@x2))

;; def=Pulse.Class.BoundedIntegers.fst(67,11-67,31); use=Pulse.Class.BoundedIntegers.fst(67,11-67,31)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Subtraction@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.max_bound@tok
@x0)
@x1))
@x2))
@x14)
)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
(Prims.pure_post (Tm_refine_ea6593cb53d4a70393ca1e1b5ea6a679 @x0
@x1
@x2
@x3)))

;; def=Prims.fst(402,27-402,88); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(forall ((@x16 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(Valid 
;; def=Prims.fst(402,84-402,87); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(ApplyTT @x15
@x16)
)

 

:pattern ((ApplyTT @x15
@x16))
:qid @query.47))
)

;; def=Prims.fst(389,2-389,39); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(and (implies 
;; def=Pulse.Class.BoundedIntegers.fst(67,11-67,31); use=Pulse.Class.BoundedIntegers.fst(67,11-67,31)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Subtraction@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.max_bound@tok
@x0)
@x1))
@x2))
(BoxBool true))


;; def=Prims.fst(441,29-441,97); use=Pulse.Class.BoundedIntegers.fst(68,21-68,22)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(68,21-68,22)
(or label_17

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(68,21-68,22)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(68,21-68,22)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(Prims.op_Addition (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)))
)
)


;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(68,21-68,22)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
@x0)

;; def=Pulse.Class.BoundedIntegers.fst(11,80-11,96); use=Pulse.Class.BoundedIntegers.fst(68,21-68,22)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x16)
(Prims.op_Addition (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)))


;; def=FStar.Pervasives.Native.fst(33,11-33,12); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Plus@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)
@x3)
@x16)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
(FStar.Pervasives.Native.option @x0))

;; def=Pulse.Class.BoundedIntegers.fst(55,4-68,25); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(= (FStar.Pervasives.Native.Some @x0
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Plus@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)
@x3))
@x17)


;; def=Pulse.Class.BoundedIntegers.fst(55,17-55,24); use=Pulse.Class.BoundedIntegers.fst(68,13-68,25)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x0
(FStar.Pervasives.Native.Some @x0
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Plus@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)
@x3))))
)

;; def=Pulse.Class.BoundedIntegers.fst(55,29-55,55); use=Pulse.Class.BoundedIntegers.fst(68,13-68,25)
(or label_18

;; def=Pulse.Class.BoundedIntegers.fst(55,29-55,55); use=Pulse.Class.BoundedIntegers.fst(68,13-68,25)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(FStar.Pervasives.Native.__proj__Some__item__v @x0
(FStar.Pervasives.Native.Some @x0
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Plus@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)
@x3))))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Plus@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)))
)
)
 
;;no pats
:qid @query.49))
)
 
;;no pats
:qid @query.48))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(not 
;; def=Pulse.Class.BoundedIntegers.fst(67,11-67,31); use=Pulse.Class.BoundedIntegers.fst(67,11-67,31)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Subtraction@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.max_bound@tok
@x0)
@x1))
@x2))
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
Prims.bool)

;; def=Pulse.Class.BoundedIntegers.fst(67,11-69,17); use=Pulse.Class.BoundedIntegers.fst(67,11-69,17)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Subtraction@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.max_bound@tok
@x0)
@x1))
@x2))
@x16)


;; def=Pulse.Class.BoundedIntegers.fst(55,17-55,24); use=Pulse.Class.BoundedIntegers.fst(69,13-69,17)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x0
(FStar.Pervasives.Native.None @x0)))
)

;; def=Pulse.Class.BoundedIntegers.fst(55,29-55,55); use=Pulse.Class.BoundedIntegers.fst(69,13-69,17)
(or label_19

;; def=Pulse.Class.BoundedIntegers.fst(55,29-55,55); use=Pulse.Class.BoundedIntegers.fst(69,13-69,17)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(FStar.Pervasives.Native.__proj__Some__item__v @x0
(FStar.Pervasives.Native.None @x0)))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Plus@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)))
)
)
 
;;no pats
:qid @query.50))
))
)
 
;;no pats
:qid @query.46)))
 
;;no pats
:qid @query.45))
)
 
;;no pats
:qid @query.44))
)
)
 
;;no pats
:qid @query.37))
)
)
 
;;no pats
:qid @query.36))
)
 
;;no pats
:qid @query.35))
)
 
;;no pats
:qid @query.34))
)
)
 
;;no pats
:qid @query.33))
)
 
;;no pats
:qid @query.32))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(not 
;; def=Pulse.Class.BoundedIntegers.fst(64,9-64,23); use=Pulse.Class.BoundedIntegers.fst(64,9-64,23)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.max_bound@tok
@x0)
@x1))
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(56,4-72,5)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.bool)

;; def=Pulse.Class.BoundedIntegers.fst(64,9-71,15); use=Pulse.Class.BoundedIntegers.fst(64,9-71,15)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.max_bound@tok
@x0)
@x1))
@x7)


;; def=Pulse.Class.BoundedIntegers.fst(55,17-55,24); use=Pulse.Class.BoundedIntegers.fst(71,11-71,15)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x0
(FStar.Pervasives.Native.None @x0)))
)

;; def=Pulse.Class.BoundedIntegers.fst(55,29-55,55); use=Pulse.Class.BoundedIntegers.fst(71,11-71,15)
(or label_20

;; def=Pulse.Class.BoundedIntegers.fst(55,29-55,55); use=Pulse.Class.BoundedIntegers.fst(71,11-71,15)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(FStar.Pervasives.Native.__proj__Some__item__v @x0
(FStar.Pervasives.Native.None @x0)))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Plus@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)))
)
)
 
;;no pats
:qid @query.51))
))
)
 
;;no pats
:qid @query.30)))
)
 
;;no pats
:qid @query.23))
))
)
 
;;no pats
:qid @query.7))))
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_20")
(eval label_20)
(echo "label_19")
(eval label_19)
(echo "label_18")
(eval label_18)
(echo "label_17")
(eval label_17)
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Pulse.Class.BoundedIntegers.safe_add, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, Prims_pretyping_ae567c2fb75be05905677af440075565, Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_3c4a7be83107ac264d86a592e40ff1ba, Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_635d2d314f62d2a47af45bf39ae8a382, Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_d74e06376e6603442136cf647afb67dd, bool_inversion, constructor_distinct_FStar.Pervasives.Native.None, data_elim_Pulse.Class.BoundedIntegers.Mkbounded_int, data_elim_Pulse.Class.BoundedIntegers.Mkbounded_unsigned, disc_equation_FStar.Pervasives.Native.Some, equation_Prims.nat, equation_Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned, equation_Pulse.Class.BoundedIntegers.bounded_int_int, equation_Pulse.Class.BoundedIntegers.fits, equation_Pulse.Class.BoundedIntegers.max_bound, equation_Pulse.Class.BoundedIntegers.op_Less_Equals, equation_Pulse.Class.BoundedIntegers.op_Plus, equation_Pulse.Class.BoundedIntegers.v, fuel_guarded_inversion_Pulse.Class.BoundedIntegers.bounded_int, fuel_guarded_inversion_Pulse.Class.BoundedIntegers.bounded_unsigned, function_token_typing_Prims.__cache_version_number__, function_token_typing_Pulse.Class.BoundedIntegers.max_bound, int_typing, interpretation_Tm_abs_505c9b700f5dda804797fc6511aa37e2, interpretation_Tm_abs_9526f9b86538a09423bf79a8b2d28a7b, interpretation_Tm_abs_d2b36eee66dd8372042cd1c49358f9dc, interpretation_Tm_abs_d5877b1288b93e8d3523f2652f6bfc84, interpretation_Tm_abs_e55f1efb8e787e6fd29c4794771ae0d5, interpretation_Tm_abs_ed0b4d808e3623f25f893f01478211b1, interpretation_Tm_abs_f4d32f3d705308e5f1a270cda9a29727, interpretation_Tm_abs_f8b7175ad4f28c0bc3c11371abe1d18d, interpretation_Tm_abs_faa1351076bca4f1d410c09beaffa289, primitive_Prims.op_Addition, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Subtraction, proj_equation_FStar.Pervasives.Native.Some_v, proj_equation_Pulse.Class.BoundedIntegers.Mkbounded_int_fits, proj_equation_Pulse.Class.BoundedIntegers.Mkbounded_int_v, proj_equation_Pulse.Class.BoundedIntegers.Mkbounded_unsigned_base, proj_equation_Pulse.Class.BoundedIntegers.Mkbounded_unsigned_static_max_bound, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Some_v, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_fits, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_op_Less_Equals, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_op_Plus, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_v, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_55034eb0b7285efc4cb3be441d0a887c, refinement_interpretation_Tm_refine_b485cfaa52da58e164a9cfc59d88e25f, refinement_interpretation_Tm_refine_d1ea46b957224f088cf16c7c5c4bb132, token_correspondence_Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits, token_correspondence_Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v, token_correspondence_Pulse.Class.BoundedIntegers.fits, token_correspondence_Pulse.Class.BoundedIntegers.max_bound, token_correspondence_Pulse.Class.BoundedIntegers.op_Less_Equals, token_correspondence_Pulse.Class.BoundedIntegers.op_Plus, token_correspondence_Pulse.Class.BoundedIntegers.v, true_interp, typing_Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let safe_add


; <Start encoding let safe_add>

(declare-fun Pulse.Class.BoundedIntegers.safe_add (Term Term Term Term) Term)



(declare-fun Tm_refine_ea6593cb53d4a70393ca1e1b5ea6a679 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;{| c: bounded_unsigned t |} -> x: t -> y: t   -> o: FStar.Pervasives.Native.option t {Some? o ==> v o.v == v x + v y}
(declare-fun Tm_arrow_32d8aae44f9335f10d315598ee23f4ef () Term)
(declare-fun Pulse.Class.BoundedIntegers.safe_add@tok () Term)














; </end encoding let safe_add>

;;;;;;;;;;;;;;;;typing_Tm_abs_638c2b0f106355f5884ec0cc8cc19772
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Percent; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(15,6-15,7); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x0 Term))
 (! (HasType (Tm_abs_638c2b0f106355f5884ec0cc8cc19772 @x0)
(Tm_arrow_3755f463c5b8e90f706d9a1911e07b57 @x0))
 

:pattern ((Tm_abs_638c2b0f106355f5884ec0cc8cc19772 @x0))
:qid typing_Tm_abs_638c2b0f106355f5884ec0cc8cc19772))

:named typing_Tm_abs_638c2b0f106355f5884ec0cc8cc19772))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Percent; Namespace Pulse.Class.BoundedIntegers
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.eqtype)
(HasType (Pulse.Class.BoundedIntegers.op_Percent @x0)
(Tm_arrow_3755f463c5b8e90f706d9a1911e07b57 @x0)))
 

:pattern ((Pulse.Class.BoundedIntegers.op_Percent @x0))
:qid typing_Pulse.Class.BoundedIntegers.op_Percent))
:named typing_Pulse.Class.BoundedIntegers.op_Percent))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Percent; Namespace Pulse.Class.BoundedIntegers
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Pulse.Class.BoundedIntegers.op_Percent@tok
@x0)
(Pulse.Class.BoundedIntegers.op_Percent @x0))
 

:pattern ((ApplyTT Pulse.Class.BoundedIntegers.op_Percent@tok
@x0))
:qid token_correspondence_Pulse.Class.BoundedIntegers.op_Percent))
:named token_correspondence_Pulse.Class.BoundedIntegers.op_Percent))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Percent; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(7,19-7,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_6695dc943e5caf38f27f32f98d3615a3 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_6695dc943e5caf38f27f32f98d3615a3 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_6695dc943e5caf38f27f32f98d3615a3))

:named refinement_kinding_Tm_refine_6695dc943e5caf38f27f32f98d3615a3))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Percent; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(7,19-7,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_6695dc943e5caf38f27f32f98d3615a3 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=Pulse.Class.BoundedIntegers.fst(15,91-15,107); use=Pulse.Class.BoundedIntegers.fst(15,91-15,107)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x2)
@x3)
@x1)
(Prims.op_Modulus (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x2)
@x3)
@x4)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x2)
@x3)
@x5)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_6695dc943e5caf38f27f32f98d3615a3 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_6695dc943e5caf38f27f32f98d3615a3))

:named refinement_interpretation_Tm_refine_6695dc943e5caf38f27f32f98d3615a3))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_c8c19e0f89f5518d4dfd900e13f61bf3
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Percent; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_arrow_c8c19e0f89f5518d4dfd900e13f61bf3
Tm_type)
:named kinding_Tm_arrow_c8c19e0f89f5518d4dfd900e13f61bf3))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_7b8c17b32d64669804431281c6ca7d47
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Percent; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-7,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_arrow_7b8c17b32d64669804431281c6ca7d47 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_arrow_7b8c17b32d64669804431281c6ca7d47 @x0
@x1
@x2)
Tm_type))
:qid kinding_Tm_arrow_7b8c17b32d64669804431281c6ca7d47))

:named kinding_Tm_arrow_7b8c17b32d64669804431281c6ca7d47))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_3755f463c5b8e90f706d9a1911e07b57
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Percent; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,19-15,7)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_3755f463c5b8e90f706d9a1911e07b57 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_3755f463c5b8e90f706d9a1911e07b57 @x0)
Tm_type))
:qid kinding_Tm_arrow_3755f463c5b8e90f706d9a1911e07b57))

:named kinding_Tm_arrow_3755f463c5b8e90f706d9a1911e07b57))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_020905df371fdfc0950da0cf4bd7128b
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Percent; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-7,20)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_020905df371fdfc0950da0cf4bd7128b @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_020905df371fdfc0950da0cf4bd7128b @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_020905df371fdfc0950da0cf4bd7128b))

:named kinding_Tm_arrow_020905df371fdfc0950da0cf4bd7128b))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_638c2b0f106355f5884ec0cc8cc19772
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Percent; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(15,6-15,7); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (Tm_abs_638c2b0f106355f5884ec0cc8cc19772 @x1)
@x0)
(let ((@lb2 @x0))
(Pulse.Class.BoundedIntegers.Mkbounded_int_op_Percent @lb2)))
 

:pattern ((ApplyTT (Tm_abs_638c2b0f106355f5884ec0cc8cc19772 @x1)
@x0))
:qid interpretation_Tm_abs_638c2b0f106355f5884ec0cc8cc19772))

:named interpretation_Tm_abs_638c2b0f106355f5884ec0cc8cc19772))
;;;;;;;;;;;;;;;;haseq for Tm_refine_6695dc943e5caf38f27f32f98d3615a3
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Percent; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,19-7,20); use=Pulse.Class.BoundedIntegers.fst(7,19-7,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_6695dc943e5caf38f27f32f98d3615a3 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_6695dc943e5caf38f27f32f98d3615a3 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_6695dc943e5caf38f27f32f98d3615a3))

:named haseqTm_refine_6695dc943e5caf38f27f32f98d3615a3))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Percent; Namespace Pulse.Class.BoundedIntegers
(assert (! (forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType Pulse.Class.BoundedIntegers.op_Percent@tok
Tm_arrow_c8c19e0f89f5518d4dfd900e13f61bf3))
(forall ((@x1 Term))
 (! (= (ApplyTT Pulse.Class.BoundedIntegers.op_Percent@tok
@x1)
(Pulse.Class.BoundedIntegers.op_Percent @x1))
 

:pattern ((Pulse.Class.BoundedIntegers.op_Percent @x1))
:qid function_token_typing_Pulse.Class.BoundedIntegers.op_Percent.1)))
 

:pattern ((ApplyTT @x0
Pulse.Class.BoundedIntegers.op_Percent@tok))
:qid function_token_typing_Pulse.Class.BoundedIntegers.op_Percent))
:named function_token_typing_Pulse.Class.BoundedIntegers.op_Percent))
;;;;;;;;;;;;;;;;Equation for Pulse.Class.BoundedIntegers.op_Percent
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Percent; Namespace Pulse.Class.BoundedIntegers
(assert (! (forall ((@x0 Term))
 (! (= (Pulse.Class.BoundedIntegers.op_Percent @x0)
(Tm_abs_638c2b0f106355f5884ec0cc8cc19772 @x0))
 

:pattern ((Pulse.Class.BoundedIntegers.op_Percent @x0))
:qid equation_Pulse.Class.BoundedIntegers.op_Percent))
:named equation_Pulse.Class.BoundedIntegers.op_Percent))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Percent; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,27); use=Pulse.Class.BoundedIntegers.fst(7,19-15,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_c8c19e0f89f5518d4dfd900e13f61bf3)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_c8c19e0f89f5518d4dfd900e13f61bf3))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_c8c19e0f89f5518d4dfd900e13f61bf3))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_c8c19e0f89f5518d4dfd900e13f61bf3))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Percent; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-7,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_7b8c17b32d64669804431281c6ca7d47 @x2
@x3
@x4))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_7b8c17b32d64669804431281c6ca7d47 @x2
@x3
@x4)))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_7b8c17b32d64669804431281c6ca7d47))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_7b8c17b32d64669804431281c6ca7d47))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Percent; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,19-15,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_3755f463c5b8e90f706d9a1911e07b57 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_3755f463c5b8e90f706d9a1911e07b57 @x2)))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_3755f463c5b8e90f706d9a1911e07b57))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_3755f463c5b8e90f706d9a1911e07b57))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Percent; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-7,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_020905df371fdfc0950da0cf4bd7128b @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_020905df371fdfc0950da0cf4bd7128b @x2
@x3)))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_020905df371fdfc0950da0cf4bd7128b))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_020905df371fdfc0950da0cf4bd7128b))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_c8c19e0f89f5518d4dfd900e13f61bf3
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Percent; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,27); use=Pulse.Class.BoundedIntegers.fst(7,19-15,7)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_c8c19e0f89f5518d4dfd900e13f61bf3)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,27); use=Pulse.Class.BoundedIntegers.fst(7,19-15,7)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.eqtype)
(HasType (ApplyTT @x0
@x1)
(Tm_arrow_3755f463c5b8e90f706d9a1911e07b57 @x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_c8c19e0f89f5518d4dfd900e13f61bf3.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_c8c19e0f89f5518d4dfd900e13f61bf3))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_c8c19e0f89f5518d4dfd900e13f61bf3))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_c8c19e0f89f5518d4dfd900e13f61bf3))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_7b8c17b32d64669804431281c6ca7d47
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Percent; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-7,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_7b8c17b32d64669804431281c6ca7d47 @x1
@x2
@x3))
(and 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-7,20)
(forall ((@x4 Term))
 (! (implies (and 
;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(> (BoxInt_proj_0 (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x3)
@x2)
@x4))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Pulse.Class.BoundedIntegers.fst(15,55-15,71); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(15,55-15,71); use=Pulse.Class.BoundedIntegers.fst(15,6-15,7)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
@x3)
@x2)
(Prims.op_Modulus (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x3)
@x2)
@x1)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x3)
@x2)
@x4)))
)

(HasType @x4
@x3))
(HasType (ApplyTT @x0
@x4)
(Tm_refine_6695dc943e5caf38f27f32f98d3615a3 @x3
@x2
@x1
@x4)))
 

:pattern ((ApplyTT @x0
@x4))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_7b8c17b32d64669804431281c6ca7d47.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_7b8c17b32d64669804431281c6ca7d47 @x1
@x2
@x3)))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_7b8c17b32d64669804431281c6ca7d47))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_7b8c17b32d64669804431281c6ca7d47))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_3755f463c5b8e90f706d9a1911e07b57
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Percent; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,19-15,7)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_3755f463c5b8e90f706d9a1911e07b57 @x1))
(and 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,19-15,7)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(Pulse.Class.BoundedIntegers.bounded_int @x1))
(HasType (ApplyTT @x0
@x2)
(Tm_arrow_020905df371fdfc0950da0cf4bd7128b @x2
@x1)))
 

:pattern ((ApplyTT @x0
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_3755f463c5b8e90f706d9a1911e07b57.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_3755f463c5b8e90f706d9a1911e07b57 @x1)))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_3755f463c5b8e90f706d9a1911e07b57))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_3755f463c5b8e90f706d9a1911e07b57))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_020905df371fdfc0950da0cf4bd7128b
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Percent; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-7,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_020905df371fdfc0950da0cf4bd7128b @x1
@x2))
(and 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-7,20)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)
(HasType (ApplyTT @x0
@x3)
(Tm_arrow_7b8c17b32d64669804431281c6ca7d47 @x3
@x1
@x2)))
 

:pattern ((ApplyTT @x0
@x3))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_020905df371fdfc0950da0cf4bd7128b.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_020905df371fdfc0950da0cf4bd7128b @x1
@x2)))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_020905df371fdfc0950da0cf4bd7128b))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_020905df371fdfc0950da0cf4bd7128b))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.safe_add; Namespace Pulse.Class.BoundedIntegers
(assert (! (Valid (ApplyTT __uu__PartialApp
Pulse.Class.BoundedIntegers.max_bound@tok))
:named @kick_partial_app_a497af650cabeb45e19e12e5ace365ec))
(push) ;; push{2

; Starting query at Pulse.Class.BoundedIntegers.fst(78,4-87,5)

(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

(declare-fun Tm_refine_6899b8080c98ed4e56f0466a4759f847 (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_6899b8080c98ed4e56f0466a4759f847 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_6899b8080c98ed4e56f0466a4759f847 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_6899b8080c98ed4e56f0466a4759f847))

:named refinement_kinding_Tm_refine_6899b8080c98ed4e56f0466a4759f847))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_6899b8080c98ed4e56f0466a4759f847 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.option @x2))

;; def=Pulse.Class.BoundedIntegers.fst(76,19-76,26); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(> (BoxInt_proj_0 (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x2)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x2
@x3))
@x4))
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_6899b8080c98ed4e56f0466a4759f847 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_6899b8080c98ed4e56f0466a4759f847))

:named refinement_interpretation_Tm_refine_6899b8080c98ed4e56f0466a4759f847))
;;;;;;;;;;;;;;;;haseq for Tm_refine_6899b8080c98ed4e56f0466a4759f847
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_6899b8080c98ed4e56f0466a4759f847 @x0
@x1
@x2)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.option @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_6899b8080c98ed4e56f0466a4759f847 @x0
@x1
@x2))))
:qid haseqTm_refine_6899b8080c98ed4e56f0466a4759f847))

:named haseqTm_refine_6899b8080c98ed4e56f0466a4759f847))

















;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: 
(assert (! (Valid (ApplyTT __uu__PartialApp
Pulse.Class.BoundedIntegers.op_Percent@tok))
:named @kick_partial_app_4c3d3b770181ea1271314b4eb1a535bf))
































































; Encoding query formula : forall (t: Prims.eqtype) (c: Pulse.Class.BoundedIntegers.bounded_unsigned t) (x: t) (y: t).
;   (forall (o: _: FStar.Pervasives.Native.option t {Pulse.Class.BoundedIntegers.v y > 0}).
;       (*  - Could not prove post-condition
; *)
;       Some? o ==>
;       (Pulse.Class.BoundedIntegers.v y > 0 ==> Some? o) /\
;       (forall (any_result:
;           _: FStar.Pervasives.Native.option t {Pulse.Class.BoundedIntegers.v y > 0}).
;           o == any_result ==>
;           (forall (any_result: t).
;               o.v == any_result ==>
;               (forall (any_result: Prims.int).
;                   Pulse.Class.BoundedIntegers.v o.v == any_result ==>
;                   (forall (any_result: Prims.int).
;                       Pulse.Class.BoundedIntegers.v x == any_result ==>
;                       (forall (any_result: Prims.int).
;                           Pulse.Class.BoundedIntegers.v y == any_result ==>
;                           Pulse.Class.BoundedIntegers.bounded_int_int.v (Pulse.Class.BoundedIntegers.v
;                                 y) >
;                           0 /\
;                           Pulse.Class.BoundedIntegers.bounded_int_int.fits (Pulse.Class.BoundedIntegers.bounded_int_int
;                                 .v (Pulse.Class.BoundedIntegers.v x) %
;                               Pulse.Class.BoundedIntegers.bounded_int_int.v (Pulse.Class.BoundedIntegers.v
;                                     y)))))))) /\
;   (forall (p: Prims.pure_post (FStar.Pervasives.Native.option t)).
;       Pulse.Class.BoundedIntegers.v y > 0 /\
;       (forall (pure_result: FStar.Pervasives.Native.option t).
;           (Some? pure_result ==>
;             Pulse.Class.BoundedIntegers.v pure_result.v ==
;             Pulse.Class.BoundedIntegers.v x % Pulse.Class.BoundedIntegers.v y) ==>
;           p pure_result) ==>
;       (forall (k: Prims.pure_post (FStar.Pervasives.Native.option t)).
;           (forall (x: FStar.Pervasives.Native.option t). {:pattern Prims.guard_free (k x)}
;               (x ==
;                 (match c.static_max_bound with
;                   | true -> FStar.Pervasives.Native.Some (x % y)
;                   | _ ->
;                     (match y <= Pulse.Class.BoundedIntegers.max_bound with
;                       | true -> FStar.Pervasives.Native.Some (x % y)
;                       | _ -> FStar.Pervasives.Native.None)
;                     <:
;                     FStar.Pervasives.Native.option t) ==>
;                 (forall (return_val: FStar.Pervasives.Native.option t).
;                     return_val == x ==> p return_val)) ==>
;               k x) ==>
;           (c.static_max_bound == true ==>
;             (Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned t c).v y > 0 /\
;             (Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned t c).fits ((Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned
;                     t
;                     c)
;                   .v x %
;                 (Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned t c).v y) /\
;             (forall (pure_result: t).
;                 (Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned t c).v pure_result ==
;                 (Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned t c).v x %
;                 (Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned t c).v y ==>
;                 x % y == pure_result ==>
;                 (forall (any_result: FStar.Pervasives.Native.option t). k any_result))) /\
;           (~(c.static_max_bound = true) ==>
;             (forall (b: Prims.bool).
;                 c.static_max_bound == b ==>
;                 (forall (k: Prims.pure_post (FStar.Pervasives.Native.option t)).
;                     (forall (x: FStar.Pervasives.Native.option t). {:pattern Prims.guard_free (k x)}
;                         k x ==> k x) ==>
;                     (y <= Pulse.Class.BoundedIntegers.max_bound == true ==>
;                       (forall (any_result: Prims.int).
;                           Pulse.Class.BoundedIntegers.v x == any_result ==>
;                           (forall (any_result: Prims.int).
;                               Pulse.Class.BoundedIntegers.v y == any_result ==>
;                               Pulse.Class.BoundedIntegers.bounded_int_int.v (Pulse.Class.BoundedIntegers.v
;                                     y) >
;                               0 /\
;                               Pulse.Class.BoundedIntegers.bounded_int_int.fits (Pulse.Class.BoundedIntegers.bounded_int_int
;                                     .v (Pulse.Class.BoundedIntegers.v x) %
;                                   Pulse.Class.BoundedIntegers.bounded_int_int.v (Pulse.Class.BoundedIntegers.v
;                                         y)) /\
;                               (forall (pure_result: Prims.int).
;                                   Pulse.Class.BoundedIntegers.bounded_int_int.v pure_result ==
;                                   Pulse.Class.BoundedIntegers.bounded_int_int.v (Pulse.Class.BoundedIntegers.v
;                                         x) %
;                                   Pulse.Class.BoundedIntegers.bounded_int_int.v (Pulse.Class.BoundedIntegers.v
;                                         y) ==>
;                                   Pulse.Class.BoundedIntegers.v x % Pulse.Class.BoundedIntegers.v y ==
;                                   pure_result ==>
;                                   (forall (any_result: Prims.prop).
;                                       Pulse.Class.BoundedIntegers.fits (Pulse.Class.BoundedIntegers.v
;                                             x %
;                                           Pulse.Class.BoundedIntegers.v y) ==
;                                       any_result ==>
;                                       (forall (return_val: Prims.prop).
;                                           return_val ==
;                                           Pulse.Class.BoundedIntegers.fits (Pulse.Class.BoundedIntegers.v
;                                                 x %
;                                               Pulse.Class.BoundedIntegers.v y) ==>
;                                           Pulse.Class.BoundedIntegers.fits (Pulse.Class.BoundedIntegers.v
;                                                 x %
;                                               Pulse.Class.BoundedIntegers.v y) ==
;                                           return_val ==>
;                                           Pulse.Class.BoundedIntegers.fits (Pulse.Class.BoundedIntegers.v
;                                                 x %
;                                               Pulse.Class.BoundedIntegers.v y) /\
;                                           (forall (pure_result: Prims.unit).
;                                               Pulse.Class.BoundedIntegers.fits (Pulse.Class.BoundedIntegers.v
;                                                     x %
;                                                   Pulse.Class.BoundedIntegers.v y) ==>
;                                               (Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned
;                                                   t
;                                                   c)
;                                                 .v y >
;                                               0 /\
;                                               (Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned
;                                                   t
;                                                   c)
;                                                 .fits ((Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned
;                                                       t
;                                                       c)
;                                                     .v x %
;                                                   (Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned
;                                                       t
;                                                       c)
;                                                     .v y) /\
;                                               (forall (pure_result: t).
;                                                   (Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned
;                                                       t
;                                                       c)
;                                                     .v pure_result ==
;                                                   (Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned
;                                                       t
;                                                       c)
;                                                     .v x %
;                                                   (Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned
;                                                       t
;                                                       c)
;                                                     .v y ==>
;                                                   x % y == pure_result ==>
;                                                   (forall (any_result:
;                                                       FStar.Pervasives.Native.option t).
;                                                       k any_result))))))))) /\
;                     (~(y <= Pulse.Class.BoundedIntegers.max_bound = true) ==>
;                       (forall (b: Prims.bool).
;                           y <= Pulse.Class.BoundedIntegers.max_bound == b ==>
;                           (forall (any_result: FStar.Pervasives.Native.option t). k any_result))))))
;       ))


; Context: While encoding a query
; While typechecking the top-level declaration `let safe_mod`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(Pulse.Class.BoundedIntegers.bounded_unsigned @x0))
(HasType @x2
@x0)
(HasType @x3
@x0))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(and 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Tm_refine_6899b8080c98ed4e56f0466a4759f847 @x0
@x1
@x3))

;; def=Pulse.Class.BoundedIntegers.fst(77,27-77,34); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x0
@x4))
)

;; def=Prims.fst(459,77-459,89); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(and (implies 
;; def=Pulse.Class.BoundedIntegers.fst(76,19-76,26); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(> (BoxInt_proj_0 (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3))
(BoxInt_proj_0 (BoxInt 0)))


;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=Pulse.Class.BoundedIntegers.fst(77,50-77,51)
(or label_1

;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x0
@x4))
)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Tm_refine_6899b8080c98ed4e56f0466a4759f847 @x0
@x1
@x3))

;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(= @x4
@x5)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
@x0)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(= (FStar.Pervasives.Native.__proj__Some__item__v @x0
@x4)
@x6)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.int)

;; def=Prims.fst(175,35-175,36); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(FStar.Pervasives.Native.__proj__Some__item__v @x0
@x4))
@x7)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.int)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)
@x8)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.int)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)
@x9)
)

;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,71); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Pulse.Class.BoundedIntegers.fst(77,27-77,65)
(or label_2

;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(> (BoxInt_proj_0 (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Pulse.Class.BoundedIntegers.fst(15,55-15,71); use=Pulse.Class.BoundedIntegers.fst(77,27-77,65)
(or label_3

;; def=Pulse.Class.BoundedIntegers.fst(15,55-15,71); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(15,55-15,71); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(Prims.op_Modulus (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3))))
)
)
)
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
)
)
 
;;no pats
:qid @query.1))


;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post (FStar.Pervasives.Native.option @x0)))

;; def=Pulse.Class.BoundedIntegers.fst(76,19-76,26); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(> (BoxInt_proj_0 (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(forall ((@x5 Term))
 (! (implies (and (or label_4
(HasType @x5
(FStar.Pervasives.Native.option @x0)))
(implies 
;; def=Pulse.Class.BoundedIntegers.fst(77,27-77,34); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x0
@x5))


;; def=Pulse.Class.BoundedIntegers.fst(77,39-77,65); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(or label_5

;; def=Pulse.Class.BoundedIntegers.fst(77,39-77,65); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(FStar.Pervasives.Native.__proj__Some__item__v @x0
@x5))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Percent@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)))
)
))

;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(ApplyTT @x4
@x5)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(ApplyTT @x4
@x5)
)
)
:qid @query.8))
)

;; def=Prims.fst(402,2-402,97); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Prims.pure_post (FStar.Pervasives.Native.option @x0)))

;; def=Prims.fst(402,2-402,97); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(forall ((@x6 Term))
 (! (implies (implies 
;; def=Pulse.Class.BoundedIntegers.fst(75,9-87,5); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(= @x6
(let ((@lb7 (Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__static_max_bound @x0
@x1)))
(ite (= @lb7
(BoxBool true))
(FStar.Pervasives.Native.Some @x0
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Percent@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)
@x3))
(let ((@lb8 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.max_bound@tok
@x0)
@x1))))
(ite (= @lb8
(BoxBool true))
(FStar.Pervasives.Native.Some @x0
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Percent@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)
@x3))
(FStar.Pervasives.Native.None @x0))))))


;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(FStar.Pervasives.Native.option @x0))

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x7
@x6)
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x4
@x7)
)
)
 
;;no pats
:qid @query.11))
)

;; def=Prims.fst(402,84-402,87); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(Valid 
;; def=Prims.fst(402,84-402,87); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(ApplyTT @x5
@x6)
)
)
 :weight 0


:pattern ((ApplyTT @x5
@x6))
:qid @query.10))
)

;; def=Prims.fst(389,2-389,39); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(and (implies 
;; def=Pulse.Class.BoundedIntegers.fst(78,7-78,25); use=Pulse.Class.BoundedIntegers.fst(78,7-78,25)
(= (Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__static_max_bound @x0
@x1)
(BoxBool true))


;; def=Prims.fst(441,29-441,97); use=Pulse.Class.BoundedIntegers.fst(79,17-79,18)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Pulse.Class.BoundedIntegers.fst(79,17-79,18)
(or label_6

;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Pulse.Class.BoundedIntegers.fst(79,17-79,18)
(> (BoxInt_proj_0 (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Pulse.Class.BoundedIntegers.fst(15,55-15,71); use=Pulse.Class.BoundedIntegers.fst(79,17-79,18)
(or label_7

;; def=Pulse.Class.BoundedIntegers.fst(15,55-15,71); use=Pulse.Class.BoundedIntegers.fst(79,17-79,18)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(15,55-15,71); use=Pulse.Class.BoundedIntegers.fst(79,17-79,18)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(Prims.op_Modulus (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)))
)
)


;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(79,17-79,18)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
@x0)

;; def=Pulse.Class.BoundedIntegers.fst(15,91-15,107); use=Pulse.Class.BoundedIntegers.fst(79,17-79,18)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x6)
(Prims.op_Modulus (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)))


;; def=FStar.Pervasives.Native.fst(33,11-33,12); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Percent@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)
@x3)
@x6)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(forall ((@x7 Term))
 (! (implies (HasType @x7
(FStar.Pervasives.Native.option @x0))

;; def=Prims.fst(451,90-451,102); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(ApplyTT @x5
@x7)
)
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(not 
;; def=Pulse.Class.BoundedIntegers.fst(78,7-78,25); use=Pulse.Class.BoundedIntegers.fst(78,7-78,25)
(= (Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__static_max_bound @x0
@x1)
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.bool)

;; def=Pulse.Class.BoundedIntegers.fst(78,7-87,5); use=Pulse.Class.BoundedIntegers.fst(78,7-87,5)
(= (Pulse.Class.BoundedIntegers.__proj__Mkbounded_unsigned__item__static_max_bound @x0
@x1)
@x6)
)

;; def=Prims.fst(402,2-402,97); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(Prims.pure_post (FStar.Pervasives.Native.option @x0)))

;; def=Prims.fst(402,2-402,97); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(forall ((@x8 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(Valid 
;; def=Prims.fst(402,73-402,79); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(ApplyTT @x5
@x8)
)


;; def=Prims.fst(402,84-402,87); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(Valid 
;; def=Prims.fst(402,84-402,87); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(ApplyTT @x7
@x8)
)
)
 :weight 0


:pattern ((ApplyTT @x7
@x8))
:qid @query.16))
)

;; def=Prims.fst(389,2-389,39); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(and (implies 
;; def=Pulse.Class.BoundedIntegers.fst(81,9-81,23); use=Pulse.Class.BoundedIntegers.fst(81,9-81,23)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.max_bound@tok
@x0)
@x1))
(BoxBool true))


;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.int)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)
@x8)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.int)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)
@x9)
)

;; def=Prims.fst(441,29-441,97); use=Pulse.Class.BoundedIntegers.fst(83,29-83,30)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Pulse.Class.BoundedIntegers.fst(83,29-83,30)
(or label_8

;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Pulse.Class.BoundedIntegers.fst(83,29-83,30)
(> (BoxInt_proj_0 (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Pulse.Class.BoundedIntegers.fst(15,55-15,71); use=Pulse.Class.BoundedIntegers.fst(83,29-83,30)
(or label_9

;; def=Pulse.Class.BoundedIntegers.fst(15,55-15,71); use=Pulse.Class.BoundedIntegers.fst(83,29-83,30)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(15,55-15,71); use=Pulse.Class.BoundedIntegers.fst(83,29-83,30)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(Prims.op_Modulus (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3))))
)
)


;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(83,29-83,30)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.int)

;; def=Pulse.Class.BoundedIntegers.fst(15,91-15,107); use=Pulse.Class.BoundedIntegers.fst(83,29-83,30)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
@x10)
(Prims.op_Modulus (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3))))


;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Percent@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3))
@x10)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.prop)

;; def=Pulse.Class.BoundedIntegers.fst(8,17-83,36); use=Pulse.Class.BoundedIntegers.fst(83,15-83,36)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.fits@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Percent@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)))
@x11)
)

;; def=Prims.fst(356,2-356,58); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.prop)

;; def=Prims.fst(356,26-356,41); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(= @x12
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.fits@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Percent@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3))))


;; def=Prims.fst(672,13-672,14); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.fits@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Percent@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)))
@x12)
)

;; def=Prims.fst(441,29-441,97); use=Pulse.Class.BoundedIntegers.fst(83,8-83,14)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(83,15-83,36); use=Pulse.Class.BoundedIntegers.fst(83,8-83,14)
(or label_10

;; def=Pulse.Class.BoundedIntegers.fst(83,15-83,36); use=Pulse.Class.BoundedIntegers.fst(83,8-83,14)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(83,15-83,36); use=Pulse.Class.BoundedIntegers.fst(83,8-83,14)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.fits@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Percent@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)))
)
)


;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(83,8-83,14)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
Prims.unit)

;; def=Pulse.Class.BoundedIntegers.fst(83,15-83,36); use=Pulse.Class.BoundedIntegers.fst(83,8-83,14)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(83,15-83,36); use=Pulse.Class.BoundedIntegers.fst(83,8-83,14)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.fits@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Percent@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)))
)
)

;; def=Prims.fst(441,29-441,97); use=Pulse.Class.BoundedIntegers.fst(84,16-84,17)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Pulse.Class.BoundedIntegers.fst(84,16-84,17)
(or label_11

;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Pulse.Class.BoundedIntegers.fst(84,16-84,17)
(> (BoxInt_proj_0 (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Pulse.Class.BoundedIntegers.fst(15,55-15,71); use=Pulse.Class.BoundedIntegers.fst(84,16-84,17)
(or label_12

;; def=Pulse.Class.BoundedIntegers.fst(15,55-15,71); use=Pulse.Class.BoundedIntegers.fst(84,16-84,17)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(15,55-15,71); use=Pulse.Class.BoundedIntegers.fst(84,16-84,17)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
(Prims.op_Modulus (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)))
)
)


;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(84,16-84,17)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
@x0)

;; def=Pulse.Class.BoundedIntegers.fst(15,91-15,107); use=Pulse.Class.BoundedIntegers.fst(84,16-84,17)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x14)
(Prims.op_Modulus (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)))


;; def=FStar.Pervasives.Native.fst(33,11-33,12); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Percent@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x2)
@x3)
@x14)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(forall ((@x15 Term))
 (! (implies (HasType @x15
(FStar.Pervasives.Native.option @x0))

;; def=Prims.fst(451,90-451,102); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(ApplyTT @x7
@x15)
)
)
 
;;no pats
:qid @query.24))
)
 
;;no pats
:qid @query.23))
)
)
 
;;no pats
:qid @query.22))
)
)
 
;;no pats
:qid @query.21))
)
 
;;no pats
:qid @query.20))
)
 
;;no pats
:qid @query.19))
)
)
 
;;no pats
:qid @query.18))
)
 
;;no pats
:qid @query.17))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(not 
;; def=Pulse.Class.BoundedIntegers.fst(81,9-81,23); use=Pulse.Class.BoundedIntegers.fst(81,9-81,23)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.max_bound@tok
@x0)
@x1))
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.bool)

;; def=Pulse.Class.BoundedIntegers.fst(81,9-86,15); use=Pulse.Class.BoundedIntegers.fst(81,9-86,15)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
@x0)
(Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned @x0
@x1))
@x3)
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.max_bound@tok
@x0)
@x1))
@x8)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(forall ((@x9 Term))
 (! (implies (HasType @x9
(FStar.Pervasives.Native.option @x0))

;; def=Prims.fst(451,90-451,102); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Pulse.Class.BoundedIntegers.fst(78,4-87,5)
(ApplyTT @x7
@x9)
)
)
 
;;no pats
:qid @query.26))
)
 
;;no pats
:qid @query.25))
))
)
 
;;no pats
:qid @query.15))
)
 
;;no pats
:qid @query.14))
))
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Pulse.Class.BoundedIntegers.safe_mod, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, Prims_pretyping_ae567c2fb75be05905677af440075565, Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_635d2d314f62d2a47af45bf39ae8a382, bool_inversion, constructor_distinct_FStar.Pervasives.Native.None, data_elim_Pulse.Class.BoundedIntegers.Mkbounded_int, data_elim_Pulse.Class.BoundedIntegers.Mkbounded_unsigned, disc_equation_FStar.Pervasives.Native.Some, equation_Prims.nat, equation_Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned, equation_Pulse.Class.BoundedIntegers.bounded_int_int, equation_Pulse.Class.BoundedIntegers.fits, equation_Pulse.Class.BoundedIntegers.max_bound, equation_Pulse.Class.BoundedIntegers.op_Less_Equals, equation_Pulse.Class.BoundedIntegers.op_Percent, equation_Pulse.Class.BoundedIntegers.v, fuel_guarded_inversion_Pulse.Class.BoundedIntegers.bounded_int, fuel_guarded_inversion_Pulse.Class.BoundedIntegers.bounded_unsigned, function_token_typing_Prims.__cache_version_number__, int_typing, interpretation_Tm_abs_3ac41043f5916fda181399393c3d8ba1, interpretation_Tm_abs_638c2b0f106355f5884ec0cc8cc19772, interpretation_Tm_abs_9526f9b86538a09423bf79a8b2d28a7b, interpretation_Tm_abs_d2b36eee66dd8372042cd1c49358f9dc, interpretation_Tm_abs_e55f1efb8e787e6fd29c4794771ae0d5, interpretation_Tm_abs_ed0b4d808e3623f25f893f01478211b1, interpretation_Tm_abs_f4d32f3d705308e5f1a270cda9a29727, interpretation_Tm_abs_f8b7175ad4f28c0bc3c11371abe1d18d, interpretation_Tm_abs_faa1351076bca4f1d410c09beaffa289, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, proj_equation_FStar.Pervasives.Native.Some_v, proj_equation_Pulse.Class.BoundedIntegers.Mkbounded_int_fits, proj_equation_Pulse.Class.BoundedIntegers.Mkbounded_int_v, proj_equation_Pulse.Class.BoundedIntegers.Mkbounded_unsigned_base, proj_equation_Pulse.Class.BoundedIntegers.Mkbounded_unsigned_static_max_bound, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Some_v, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_fits, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_op_Less_Equals, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_op_Percent, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_v, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_55034eb0b7285efc4cb3be441d0a887c, refinement_interpretation_Tm_refine_6899b8080c98ed4e56f0466a4759f847, refinement_interpretation_Tm_refine_b485cfaa52da58e164a9cfc59d88e25f, token_correspondence_Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits, token_correspondence_Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v, token_correspondence_Pulse.Class.BoundedIntegers.fits, token_correspondence_Pulse.Class.BoundedIntegers.max_bound, token_correspondence_Pulse.Class.BoundedIntegers.op_Less_Equals, token_correspondence_Pulse.Class.BoundedIntegers.op_Percent, token_correspondence_Pulse.Class.BoundedIntegers.v, true_interp, typing_Pulse.Class.BoundedIntegers.bounded_from_bounded_unsigned

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let safe_mod


; <Start encoding let safe_mod>


(declare-fun Pulse.Class.BoundedIntegers.safe_mod (Term Term Term Term) Term)



(declare-fun Tm_refine_9a8af0d0ae127ab66a0b8632a0bfb3e2 (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;{| c: bounded_unsigned t |} -> x: t -> y: t -> Prims.Pure (FStar.Pervasives.Native.option t)
(declare-fun Tm_arrow_f26eac485564b04775d67e140ac91be4 () Term)
(declare-fun Pulse.Class.BoundedIntegers.safe_mod@tok () Term)










; </end encoding let safe_mod>


; encoding sigelt let ok


; <Start encoding let ok>


(declare-fun Pulse.Class.BoundedIntegers.ok (Term Term Term Term Term) Term)

;;;;;;;;;;;;;;;;{| c: bounded_int t |} -> op: (_: Prims.int -> _: Prims.int -> Prims.int) -> x: t -> y: t   -> Prims.prop
(declare-fun Tm_arrow_d2d7056480db62a05d0d4efb5d8f3ff2 () Term)
(declare-fun Pulse.Class.BoundedIntegers.ok@tok () Term)





; </end encoding let ok>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.ok; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(89,4-89,6); use=Pulse.Class.BoundedIntegers.fst(89,4-89,6)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(Pulse.Class.BoundedIntegers.bounded_int @x0))
(HasType @x2
Tm_arrow_47fc285d7b44e13bcb7e420cbfc55623)
(HasType @x3
@x0)
(HasType @x4
@x0))
(HasType (Pulse.Class.BoundedIntegers.ok @x0
@x1
@x2
@x3
@x4)
Prims.prop))
 

:pattern ((Pulse.Class.BoundedIntegers.ok @x0
@x1
@x2
@x3
@x4))
:qid typing_Pulse.Class.BoundedIntegers.ok))

:named typing_Pulse.Class.BoundedIntegers.ok))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_47fc285d7b44e13bcb7e420cbfc55623
;;; Fact-ids: Name Prims.min; Namespace Prims
(assert (! (HasType Tm_arrow_47fc285d7b44e13bcb7e420cbfc55623
Tm_type)
:named kinding_Tm_arrow_47fc285d7b44e13bcb7e420cbfc55623))
;;;;;;;;;;;;;;;;Equation for Pulse.Class.BoundedIntegers.ok
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.ok; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(89,4-89,6); use=Pulse.Class.BoundedIntegers.fst(89,4-89,6)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (Pulse.Class.BoundedIntegers.ok @x0
@x1
@x2
@x3
@x4)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
@x0)
@x1)
(ApplyTT (ApplyTT @x2
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
@x1)
@x3))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
@x0)
@x1)
@x4))))
 

:pattern ((Pulse.Class.BoundedIntegers.ok @x0
@x1
@x2
@x3
@x4))
:qid equation_Pulse.Class.BoundedIntegers.ok))

:named equation_Pulse.Class.BoundedIntegers.ok))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.min; Namespace Prims
(assert (! 
;; def=Prims.fst(564,24-564,34); use=Prims.fst(714,8-714,30)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_47fc285d7b44e13bcb7e420cbfc55623)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_47fc285d7b44e13bcb7e420cbfc55623))
:qid Prims_pre_typing_Tm_arrow_47fc285d7b44e13bcb7e420cbfc55623))

:named Prims_pre_typing_Tm_arrow_47fc285d7b44e13bcb7e420cbfc55623))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_47fc285d7b44e13bcb7e420cbfc55623
;;; Fact-ids: Name Prims.min; Namespace Prims
(assert (! 
;; def=Prims.fst(564,24-564,34); use=Prims.fst(714,8-714,30)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_47fc285d7b44e13bcb7e420cbfc55623)
(and 
;; def=Prims.fst(564,24-564,34); use=Prims.fst(714,8-714,30)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.int)
(HasType @x2
Prims.int))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
Prims.int))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Prims_interpretation_Tm_arrow_47fc285d7b44e13bcb7e420cbfc55623.1))

(IsTotFun @x0)

;; def=Prims.fst(564,24-564,34); use=Prims.fst(714,8-714,30)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.int)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Prims_interpretation_Tm_arrow_47fc285d7b44e13bcb7e420cbfc55623.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_47fc285d7b44e13bcb7e420cbfc55623))
:qid Prims_interpretation_Tm_arrow_47fc285d7b44e13bcb7e420cbfc55623))

:named Prims_interpretation_Tm_arrow_47fc285d7b44e13bcb7e420cbfc55623))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.safe_add; Namespace Pulse.Class.BoundedIntegers
(assert (! (Valid (ApplyTT __uu__PartialApp
Pulse.Class.BoundedIntegers.op_Plus@tok))
:named @kick_partial_app_26b0487154eb4f19f9efc5cc4a7bd106))
(push) ;; push{2

; Starting query at Pulse.Class.BoundedIntegers.fst(92,69-92,74)

(declare-fun label_1 () Bool)

(declare-fun Tm_refine_b7ef005063e3ab26180eab67f6d7bbae (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(92,46-92,66); use=Pulse.Class.BoundedIntegers.fst(92,46-92,66)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_b7ef005063e3ab26180eab67f6d7bbae @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_b7ef005063e3ab26180eab67f6d7bbae @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_b7ef005063e3ab26180eab67f6d7bbae))

:named refinement_kinding_Tm_refine_b7ef005063e3ab26180eab67f6d7bbae))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(92,46-92,66); use=Pulse.Class.BoundedIntegers.fst(92,46-92,66)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_b7ef005063e3ab26180eab67f6d7bbae @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=Pulse.Class.BoundedIntegers.fst(92,53-92,63); use=Pulse.Class.BoundedIntegers.fst(92,53-92,63)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(92,53-92,63); use=Pulse.Class.BoundedIntegers.fst(92,53-92,63)
(Pulse.Class.BoundedIntegers.ok @x2
@x3
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Plus@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
@x4
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_b7ef005063e3ab26180eab67f6d7bbae @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_b7ef005063e3ab26180eab67f6d7bbae))

:named refinement_interpretation_Tm_refine_b7ef005063e3ab26180eab67f6d7bbae))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b7ef005063e3ab26180eab67f6d7bbae
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(92,46-92,66); use=Pulse.Class.BoundedIntegers.fst(92,46-92,66)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_b7ef005063e3ab26180eab67f6d7bbae @x0
@x1
@x2)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_b7ef005063e3ab26180eab67f6d7bbae @x0
@x1
@x2))))
:qid haseqTm_refine_b7ef005063e3ab26180eab67f6d7bbae))

:named haseqTm_refine_b7ef005063e3ab26180eab67f6d7bbae))




; Encoding query formula : forall (t: Prims.eqtype)
;   (_: Pulse.Class.BoundedIntegers.bounded_int t)
;   (x: t)
;   (y: t{Pulse.Class.BoundedIntegers.ok Pulse.Class.BoundedIntegers.op_Plus x y}).
;   (*  - Could not prove post-condition
; *) Prims.auto_squash (_.fits (_.v x + _.v y))


; Context: While encoding a query
; While typechecking the top-level declaration `let add`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(Pulse.Class.BoundedIntegers.bounded_int @x0))
(HasType @x2
@x0)
(HasType @x3
(Tm_refine_b7ef005063e3ab26180eab67f6d7bbae @x0
@x1
@x2)))

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(92,71-92,72)
(or label_1

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(92,71-92,72)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(92,71-92,72)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
@x0)
@x1)
(Prims.op_Addition (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1)
@x2)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1)
@x3)))
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Pulse.Class.BoundedIntegers.add, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, Prims_pretyping_ae567c2fb75be05905677af440075565, equation_Pulse.Class.BoundedIntegers.bounded_int_int, equation_Pulse.Class.BoundedIntegers.ok, equation_Pulse.Class.BoundedIntegers.op_Plus, equation_Pulse.Class.BoundedIntegers.v, fuel_guarded_inversion_Pulse.Class.BoundedIntegers.bounded_int, function_token_typing_Prims.__cache_version_number__, interpretation_Tm_abs_505c9b700f5dda804797fc6511aa37e2, interpretation_Tm_abs_d5877b1288b93e8d3523f2652f6bfc84, interpretation_Tm_abs_faa1351076bca4f1d410c09beaffa289, proj_equation_Pulse.Class.BoundedIntegers.Mkbounded_int_v, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_op_Plus, refinement_interpretation_Tm_refine_b7ef005063e3ab26180eab67f6d7bbae, token_correspondence_Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v, token_correspondence_Pulse.Class.BoundedIntegers.op_Plus, token_correspondence_Pulse.Class.BoundedIntegers.v

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at Pulse.Class.BoundedIntegers.fst(92,0-92,74)

(declare-fun label_1 () Bool)




; Encoding query formula : forall (t: Prims.eqtype) (_: Pulse.Class.BoundedIntegers.bounded_int t) (x: t).
;   (*  - Subtyping check failed
;   - Expected type Type0 got type Type0
; *)
;   forall (y: t).
;     (*  - Subtyping check failed
;   - Expected type _: Prims.int -> _: Prims.int -> Prims.int
;     got type x: Prims.int -> y: Prims.int -> Prims.Pure Prims.int
; *)
;     forall (x: Prims.int) (y: Prims.int).
;       Prims.auto_squash (Pulse.Class.BoundedIntegers.bounded_int_int.fits (Pulse.Class.BoundedIntegers.bounded_int_int
;                 .v x +
;               Pulse.Class.BoundedIntegers.bounded_int_int.v y))


; Context: While encoding a query
; While checking for top-level effects
; While typechecking the top-level declaration `let add`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(Pulse.Class.BoundedIntegers.bounded_int @x0))
(HasType @x2
@x0))

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(92,69-92,74)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x0)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(92,69-92,74)
(forall ((@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x4
Prims.int)
(HasType @x5
Prims.int))

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(92,57-92,58)
(or label_1

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(92,69-92,74)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(92,69-92,74)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(Prims.op_Addition (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
@x4)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
@x5)))
)
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Pulse.Class.BoundedIntegers.add, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @query, equation_Pulse.Class.BoundedIntegers.bounded_int_int, interpretation_Tm_abs_e55f1efb8e787e6fd29c4794771ae0d5, primitive_Prims.op_Addition, proj_equation_Pulse.Class.BoundedIntegers.Mkbounded_int_fits, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_fits, token_correspondence_Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits, true_interp

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let add


; <Start encoding let add>


(declare-fun Tm_refine_b7ef005063e3ab26180eab67f6d7bbae (Term Term Term) Term)
(declare-fun Pulse.Class.BoundedIntegers.add (Term Term Term Term) Term)


;;;;;;;;;;;;;;;;{| _: bounded_int t |} -> x: t -> y: t{ok op_Plus x y} -> t
(declare-fun Tm_arrow_4d0a4c3c4bcdbc94535a36bb1ea7ad18 () Term)
(declare-fun Pulse.Class.BoundedIntegers.add@tok () Term)




; </end encoding let add>

(push) ;; push{2

; Starting query at Pulse.Class.BoundedIntegers.fst(94,95-94,104)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)



(declare-fun Tm_refine_20dc8ad32903119db4097dbede2f6f9d (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(94,53-94,92); use=Pulse.Class.BoundedIntegers.fst(94,53-94,92)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_20dc8ad32903119db4097dbede2f6f9d @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_20dc8ad32903119db4097dbede2f6f9d @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_20dc8ad32903119db4097dbede2f6f9d))

:named refinement_kinding_Tm_refine_20dc8ad32903119db4097dbede2f6f9d))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(94,53-94,92); use=Pulse.Class.BoundedIntegers.fst(94,53-94,92)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_20dc8ad32903119db4097dbede2f6f9d @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=Pulse.Class.BoundedIntegers.fst(94,60-94,70); use=Pulse.Class.BoundedIntegers.fst(94,60-94,70)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(94,60-94,70); use=Pulse.Class.BoundedIntegers.fst(94,60-94,70)
(Pulse.Class.BoundedIntegers.ok @x2
@x3
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Plus@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
@x4
@x5)
)


;; def=Pulse.Class.BoundedIntegers.fst(94,74-94,90); use=Pulse.Class.BoundedIntegers.fst(94,74-94,90)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(94,74-94,90); use=Pulse.Class.BoundedIntegers.fst(94,74-94,90)
(Pulse.Class.BoundedIntegers.ok @x2
@x3
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Plus@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
@x1
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Plus@tok
@x2)
@x3)
@x4)
@x5))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_20dc8ad32903119db4097dbede2f6f9d @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_20dc8ad32903119db4097dbede2f6f9d))

:named refinement_interpretation_Tm_refine_20dc8ad32903119db4097dbede2f6f9d))
;;;;;;;;;;;;;;;;haseq for Tm_refine_20dc8ad32903119db4097dbede2f6f9d
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(94,53-94,92); use=Pulse.Class.BoundedIntegers.fst(94,53-94,92)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_20dc8ad32903119db4097dbede2f6f9d @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_20dc8ad32903119db4097dbede2f6f9d @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_20dc8ad32903119db4097dbede2f6f9d))

:named haseqTm_refine_20dc8ad32903119db4097dbede2f6f9d))












; Encoding query formula : forall (t: Prims.eqtype)
;   (_: Pulse.Class.BoundedIntegers.bounded_int t)
;   (x: t)
;   (y: t)
;   (z:
;   t
;     { Pulse.Class.BoundedIntegers.ok Pulse.Class.BoundedIntegers.op_Plus x y /\
;       Pulse.Class.BoundedIntegers.ok Pulse.Class.BoundedIntegers.op_Plus z (x + y) }).
;   (*  - Could not prove post-condition
; *)
;   _.fits (_.v x + _.v y) /\
;   (forall (pure_result: t).
;       _.v pure_result == _.v x + _.v y ==> x + y == pure_result ==> _.fits (_.v (x + y) + _.v z))


; Context: While encoding a query
; While typechecking the top-level declaration `let add3`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(Pulse.Class.BoundedIntegers.bounded_int @x0))
(HasType @x2
@x0)
(HasType @x3
@x0)
(HasType @x4
(Tm_refine_20dc8ad32903119db4097dbede2f6f9d @x0
@x1
@x2
@x3)))

;; def=Prims.fst(441,29-441,97); use=Pulse.Class.BoundedIntegers.fst(94,97-94,98)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(94,97-94,98)
(or label_1

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(94,97-94,98)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(94,97-94,98)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
@x0)
@x1)
(Prims.op_Addition (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1)
@x2)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1)
@x3)))
)
)


;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(94,97-94,98)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
@x0)

;; def=Pulse.Class.BoundedIntegers.fst(11,80-11,96); use=Pulse.Class.BoundedIntegers.fst(94,97-94,98)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1)
@x5)
(Prims.op_Addition (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1)
@x2)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1)
@x3)))


;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(94,95-94,104)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Plus@tok
@x0)
@x1)
@x2)
@x3)
@x5)
)

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(94,101-94,102)
(or label_2

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(94,101-94,102)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(94,101-94,102)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
@x0)
@x1)
(Prims.op_Addition (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Plus@tok
@x0)
@x1)
@x2)
@x3))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1)
@x4)))
)
)
)
 
;;no pats
:qid @query.1))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Pulse.Class.BoundedIntegers.add3, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, Prims_pretyping_ae567c2fb75be05905677af440075565, Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_c4a75f60b7157b7ea40684b3c73019d6, data_elim_Pulse.Class.BoundedIntegers.Mkbounded_int, equation_Pulse.Class.BoundedIntegers.bounded_int_int, equation_Pulse.Class.BoundedIntegers.ok, equation_Pulse.Class.BoundedIntegers.op_Plus, equation_Pulse.Class.BoundedIntegers.v, fuel_guarded_inversion_Pulse.Class.BoundedIntegers.bounded_int, function_token_typing_Prims.__cache_version_number__, int_inversion, int_typing, interpretation_Tm_abs_505c9b700f5dda804797fc6511aa37e2, interpretation_Tm_abs_d5877b1288b93e8d3523f2652f6bfc84, interpretation_Tm_abs_faa1351076bca4f1d410c09beaffa289, primitive_Prims.op_Addition, proj_equation_Pulse.Class.BoundedIntegers.Mkbounded_int_fits, proj_equation_Pulse.Class.BoundedIntegers.Mkbounded_int_v, projection_inverse_BoxInt_proj_0, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_op_Plus, refinement_interpretation_Tm_refine_20dc8ad32903119db4097dbede2f6f9d, refinement_interpretation_Tm_refine_cface579e84edab1d51e059d64561695, token_correspondence_Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits, token_correspondence_Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v, token_correspondence_Pulse.Class.BoundedIntegers.op_Plus, token_correspondence_Pulse.Class.BoundedIntegers.v

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at Pulse.Class.BoundedIntegers.fst(94,0-94,104)

(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)













; Encoding query formula : forall (t: Prims.eqtype) (_: Pulse.Class.BoundedIntegers.bounded_int t) (x: t) (y: t).
;   (*  - Subtyping check failed
;   - Expected type Type0 got type Type0
; *)
;   forall (z: t).
;     (forall (x: Prims.int) (y: Prims.int).
;         Prims.auto_squash (Pulse.Class.BoundedIntegers.bounded_int_int.fits (Pulse.Class.BoundedIntegers.bounded_int_int
;                   .v x +
;                 Pulse.Class.BoundedIntegers.bounded_int_int.v y))) /\
;     (Pulse.Class.BoundedIntegers.ok Pulse.Class.BoundedIntegers.op_Plus x y ==>
;       (forall (x: Prims.int) (y: Prims.int).
;           Prims.auto_squash (Pulse.Class.BoundedIntegers.bounded_int_int.fits (Pulse.Class.BoundedIntegers.bounded_int_int
;                     .v x +
;                   Pulse.Class.BoundedIntegers.bounded_int_int.v y))) /\
;       (forall (return_val: (_: Prims.int -> _: Prims.int -> Prims.int)).
;           return_val == Pulse.Class.BoundedIntegers.op_Plus ==> _.fits (_.v x + _.v y)))


; Context: While encoding a query
; While checking for top-level effects
; While typechecking the top-level declaration `let add3`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(Pulse.Class.BoundedIntegers.bounded_int @x0))
(HasType @x2
@x0)
(HasType @x3
@x0))

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(94,95-94,104)
(forall ((@x4 Term))
 (! (implies (HasType @x4
@x0)

;; def=Prims.fst(459,77-459,89); use=Pulse.Class.BoundedIntegers.fst(94,95-94,104)
(and 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(94,95-94,104)
(forall ((@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x5
Prims.int)
(HasType @x6
Prims.int))

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(94,64-94,65)
(or label_1

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(94,95-94,104)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(94,95-94,104)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(Prims.op_Addition (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
@x5)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
@x6)))
)
)
)
 
;;no pats
:qid @query.2))

(implies 
;; def=Pulse.Class.BoundedIntegers.fst(94,60-94,70); use=Pulse.Class.BoundedIntegers.fst(94,95-94,104)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(94,60-94,70); use=Pulse.Class.BoundedIntegers.fst(94,95-94,104)
(Pulse.Class.BoundedIntegers.ok @x0
@x1
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Plus@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
@x2
@x3)
)


;; def=Prims.fst(459,77-459,89); use=Pulse.Class.BoundedIntegers.fst(94,95-94,104)
(and 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(94,95-94,104)
(forall ((@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x5
Prims.int)
(HasType @x6
Prims.int))

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(94,78-94,79)
(or label_2

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(94,95-94,104)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(94,95-94,104)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(Prims.op_Addition (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
@x5)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
@x6)))
)
)
)
 
;;no pats
:qid @query.3))


;; def=Prims.fst(356,2-356,58); use=Pulse.Class.BoundedIntegers.fst(94,95-94,104)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Tm_arrow_47fc285d7b44e13bcb7e420cbfc55623)

;; def=Prims.fst(356,26-356,41); use=Pulse.Class.BoundedIntegers.fst(94,95-94,104)
(= @x5
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Plus@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value)))
)

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(94,53-94,92)
(or label_3

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(94,95-94,104)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(94,95-94,104)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
@x0)
@x1)
(Prims.op_Addition (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1)
@x2)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1)
@x3)))
)
)
)
 
;;no pats
:qid @query.4))
)
))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Pulse.Class.BoundedIntegers.add3, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, Prims_pretyping_ae567c2fb75be05905677af440075565, equation_Pulse.Class.BoundedIntegers.bounded_int_int, equation_Pulse.Class.BoundedIntegers.ok, equation_Pulse.Class.BoundedIntegers.op_Plus, equation_Pulse.Class.BoundedIntegers.v, fuel_guarded_inversion_Pulse.Class.BoundedIntegers.bounded_int, function_token_typing_Prims.__cache_version_number__, interpretation_Tm_abs_505c9b700f5dda804797fc6511aa37e2, interpretation_Tm_abs_d5877b1288b93e8d3523f2652f6bfc84, interpretation_Tm_abs_e55f1efb8e787e6fd29c4794771ae0d5, interpretation_Tm_abs_faa1351076bca4f1d410c09beaffa289, primitive_Prims.op_Addition, proj_equation_Pulse.Class.BoundedIntegers.Mkbounded_int_fits, proj_equation_Pulse.Class.BoundedIntegers.Mkbounded_int_v, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_fits, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_op_Plus, token_correspondence_Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits, token_correspondence_Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v, token_correspondence_Pulse.Class.BoundedIntegers.op_Plus, token_correspondence_Pulse.Class.BoundedIntegers.v, true_interp

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let add3


; <Start encoding let add3>




(declare-fun Tm_refine_20dc8ad32903119db4097dbede2f6f9d (Term Term Term Term) Term)
(declare-fun Pulse.Class.BoundedIntegers.add3 (Term Term Term Term Term) Term)




;;;;;;;;;;;;;;;;{| _: bounded_int t |} -> x: t -> y: t -> z: t{ok op_Plus x y /\ ok op_Plus z (x + y)} -> t
(declare-fun Tm_arrow_168d8424c035e2fb248fb1155258d045 () Term)
(declare-fun Pulse.Class.BoundedIntegers.add3@tok () Term)







; </end encoding let add3>

(push) ;; push{2

; Starting query at Pulse.Class.BoundedIntegers.fst(98,99-98,108)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)



(declare-fun Tm_refine_230a2a6e17a16d1ebe659e0d57ca05c9 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(98,57-98,96); use=Pulse.Class.BoundedIntegers.fst(98,57-98,96)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_230a2a6e17a16d1ebe659e0d57ca05c9 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_230a2a6e17a16d1ebe659e0d57ca05c9 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_230a2a6e17a16d1ebe659e0d57ca05c9))

:named refinement_kinding_Tm_refine_230a2a6e17a16d1ebe659e0d57ca05c9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(98,57-98,96); use=Pulse.Class.BoundedIntegers.fst(98,57-98,96)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_230a2a6e17a16d1ebe659e0d57ca05c9 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=Pulse.Class.BoundedIntegers.fst(98,64-98,74); use=Pulse.Class.BoundedIntegers.fst(98,64-98,74)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(98,64-98,74); use=Pulse.Class.BoundedIntegers.fst(98,64-98,74)
(Pulse.Class.BoundedIntegers.ok @x2
@x3
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Plus@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
@x4
@x5)
)


;; def=Pulse.Class.BoundedIntegers.fst(98,78-98,94); use=Pulse.Class.BoundedIntegers.fst(98,78-98,94)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(98,78-98,94); use=Pulse.Class.BoundedIntegers.fst(98,78-98,94)
(Pulse.Class.BoundedIntegers.ok @x2
@x3
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Plus@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Plus@tok
@x2)
@x3)
@x4)
@x5)
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_230a2a6e17a16d1ebe659e0d57ca05c9 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_230a2a6e17a16d1ebe659e0d57ca05c9))

:named refinement_interpretation_Tm_refine_230a2a6e17a16d1ebe659e0d57ca05c9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_230a2a6e17a16d1ebe659e0d57ca05c9
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(98,57-98,96); use=Pulse.Class.BoundedIntegers.fst(98,57-98,96)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_230a2a6e17a16d1ebe659e0d57ca05c9 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_230a2a6e17a16d1ebe659e0d57ca05c9 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_230a2a6e17a16d1ebe659e0d57ca05c9))

:named haseqTm_refine_230a2a6e17a16d1ebe659e0d57ca05c9))












; Encoding query formula : forall (t: Prims.eqtype)
;   (_: Pulse.Class.BoundedIntegers.bounded_int t)
;   (x: t)
;   (y: t)
;   (z:
;   t
;     { Pulse.Class.BoundedIntegers.ok Pulse.Class.BoundedIntegers.op_Plus x y /\
;       Pulse.Class.BoundedIntegers.ok Pulse.Class.BoundedIntegers.op_Plus (x + y) z }).
;   (*  - Could not prove post-condition
; *)
;   _.fits (_.v x + _.v y) /\
;   (forall (pure_result: t).
;       _.v pure_result == _.v x + _.v y ==> x + y == pure_result ==> _.fits (_.v (x + y) + _.v z))


; Context: While encoding a query
; While typechecking the top-level declaration `let add3_alt`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(Pulse.Class.BoundedIntegers.bounded_int @x0))
(HasType @x2
@x0)
(HasType @x3
@x0)
(HasType @x4
(Tm_refine_230a2a6e17a16d1ebe659e0d57ca05c9 @x0
@x1
@x2
@x3)))

;; def=Prims.fst(441,29-441,97); use=Pulse.Class.BoundedIntegers.fst(98,101-98,102)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(98,101-98,102)
(or label_1

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(98,101-98,102)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(98,101-98,102)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
@x0)
@x1)
(Prims.op_Addition (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1)
@x2)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1)
@x3)))
)
)


;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(98,101-98,102)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
@x0)

;; def=Pulse.Class.BoundedIntegers.fst(11,80-11,96); use=Pulse.Class.BoundedIntegers.fst(98,101-98,102)
(= (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1)
@x5)
(Prims.op_Addition (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1)
@x2)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1)
@x3)))


;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(98,99-98,108)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Plus@tok
@x0)
@x1)
@x2)
@x3)
@x5)
)

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(98,105-98,106)
(or label_2

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(98,105-98,106)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(98,105-98,106)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
@x0)
@x1)
(Prims.op_Addition (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Plus@tok
@x0)
@x1)
@x2)
@x3))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1)
@x4)))
)
)
)
 
;;no pats
:qid @query.1))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Pulse.Class.BoundedIntegers.add3_alt, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, Prims_pretyping_ae567c2fb75be05905677af440075565, equation_Pulse.Class.BoundedIntegers.bounded_int_int, equation_Pulse.Class.BoundedIntegers.ok, equation_Pulse.Class.BoundedIntegers.op_Plus, equation_Pulse.Class.BoundedIntegers.v, fuel_guarded_inversion_Pulse.Class.BoundedIntegers.bounded_int, function_token_typing_Prims.__cache_version_number__, interpretation_Tm_abs_505c9b700f5dda804797fc6511aa37e2, interpretation_Tm_abs_d5877b1288b93e8d3523f2652f6bfc84, interpretation_Tm_abs_faa1351076bca4f1d410c09beaffa289, proj_equation_Pulse.Class.BoundedIntegers.Mkbounded_int_v, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_op_Plus, refinement_interpretation_Tm_refine_230a2a6e17a16d1ebe659e0d57ca05c9, token_correspondence_Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v, token_correspondence_Pulse.Class.BoundedIntegers.op_Plus, token_correspondence_Pulse.Class.BoundedIntegers.v

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at Pulse.Class.BoundedIntegers.fst(98,0-98,108)

(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)













; Encoding query formula : forall (t: Prims.eqtype) (_: Pulse.Class.BoundedIntegers.bounded_int t) (x: t) (y: t).
;   (*  - Subtyping check failed
;   - Expected type Type0 got type Type0
; *)
;   forall (z: t).
;     (forall (x: Prims.int) (y: Prims.int).
;         Prims.auto_squash (Pulse.Class.BoundedIntegers.bounded_int_int.fits (Pulse.Class.BoundedIntegers.bounded_int_int
;                   .v x +
;                 Pulse.Class.BoundedIntegers.bounded_int_int.v y))) /\
;     (Pulse.Class.BoundedIntegers.ok Pulse.Class.BoundedIntegers.op_Plus x y ==>
;       (forall (x: Prims.int) (y: Prims.int).
;           Prims.auto_squash (Pulse.Class.BoundedIntegers.bounded_int_int.fits (Pulse.Class.BoundedIntegers.bounded_int_int
;                     .v x +
;                   Pulse.Class.BoundedIntegers.bounded_int_int.v y))) /\
;       (forall (return_val: (_: Prims.int -> _: Prims.int -> Prims.int)).
;           return_val == Pulse.Class.BoundedIntegers.op_Plus ==> _.fits (_.v x + _.v y)))


; Context: While encoding a query
; While checking for top-level effects
; While typechecking the top-level declaration `let add3_alt`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(Pulse.Class.BoundedIntegers.bounded_int @x0))
(HasType @x2
@x0)
(HasType @x3
@x0))

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(98,99-98,108)
(forall ((@x4 Term))
 (! (implies (HasType @x4
@x0)

;; def=Prims.fst(459,77-459,89); use=Pulse.Class.BoundedIntegers.fst(98,99-98,108)
(and 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(98,99-98,108)
(forall ((@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x5
Prims.int)
(HasType @x6
Prims.int))

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(98,68-98,69)
(or label_1

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(98,99-98,108)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(98,99-98,108)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(Prims.op_Addition (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
@x5)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
@x6)))
)
)
)
 
;;no pats
:qid @query.2))

(implies 
;; def=Pulse.Class.BoundedIntegers.fst(98,64-98,74); use=Pulse.Class.BoundedIntegers.fst(98,99-98,108)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(98,64-98,74); use=Pulse.Class.BoundedIntegers.fst(98,99-98,108)
(Pulse.Class.BoundedIntegers.ok @x0
@x1
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Plus@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
@x2
@x3)
)


;; def=Prims.fst(459,77-459,89); use=Pulse.Class.BoundedIntegers.fst(98,99-98,108)
(and 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(98,99-98,108)
(forall ((@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x5
Prims.int)
(HasType @x6
Prims.int))

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(98,82-98,83)
(or label_2

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(98,99-98,108)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(98,99-98,108)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(Prims.op_Addition (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
@x5)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
@x6)))
)
)
)
 
;;no pats
:qid @query.3))


;; def=Prims.fst(356,2-356,58); use=Pulse.Class.BoundedIntegers.fst(98,99-98,108)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Tm_arrow_47fc285d7b44e13bcb7e420cbfc55623)

;; def=Prims.fst(356,26-356,41); use=Pulse.Class.BoundedIntegers.fst(98,99-98,108)
(= @x5
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Plus@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value)))
)

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(98,57-98,96)
(or label_3

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(98,99-98,108)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(98,99-98,108)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
@x0)
@x1)
(Prims.op_Addition (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1)
@x2)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x0)
@x1)
@x3)))
)
)
)
 
;;no pats
:qid @query.4))
)
))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Pulse.Class.BoundedIntegers.add3_alt, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, Prims_pretyping_ae567c2fb75be05905677af440075565, equation_Pulse.Class.BoundedIntegers.bounded_int_int, equation_Pulse.Class.BoundedIntegers.ok, equation_Pulse.Class.BoundedIntegers.op_Plus, equation_Pulse.Class.BoundedIntegers.v, fuel_guarded_inversion_Pulse.Class.BoundedIntegers.bounded_int, function_token_typing_Prims.__cache_version_number__, interpretation_Tm_abs_505c9b700f5dda804797fc6511aa37e2, interpretation_Tm_abs_d5877b1288b93e8d3523f2652f6bfc84, interpretation_Tm_abs_e55f1efb8e787e6fd29c4794771ae0d5, interpretation_Tm_abs_faa1351076bca4f1d410c09beaffa289, primitive_Prims.op_Addition, proj_equation_Pulse.Class.BoundedIntegers.Mkbounded_int_fits, proj_equation_Pulse.Class.BoundedIntegers.Mkbounded_int_v, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_fits, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_op_Plus, token_correspondence_Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits, token_correspondence_Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v, token_correspondence_Pulse.Class.BoundedIntegers.op_Plus, token_correspondence_Pulse.Class.BoundedIntegers.v, true_interp

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let add3_alt


; <Start encoding let add3_alt>




(declare-fun Tm_refine_230a2a6e17a16d1ebe659e0d57ca05c9 (Term Term Term Term) Term)
(declare-fun Pulse.Class.BoundedIntegers.add3_alt (Term Term Term Term Term) Term)




;;;;;;;;;;;;;;;;{| _: bounded_int t |} -> x: t -> y: t -> z: t{ok op_Plus x y /\ ok op_Plus (x + y) z} -> t
(declare-fun Tm_arrow_f99fe761ca80ede6e3afab54069d4772 () Term)
(declare-fun Pulse.Class.BoundedIntegers.add3_alt@tok () Term)







; </end encoding let add3_alt>

;;;;;;;;;;;;;;;;typing_Tm_abs_e6649eba6390f90be22ea1a9dce6d496
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Less; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(13,6-13,7); use=Pulse.Class.BoundedIntegers.fst(13,6-13,7)
(forall ((@x0 Term))
 (! (HasType (Tm_abs_e6649eba6390f90be22ea1a9dce6d496 @x0)
(Tm_arrow_6e88da7f43cb121e9cadcec043378ab3 @x0))
 

:pattern ((Tm_abs_e6649eba6390f90be22ea1a9dce6d496 @x0))
:qid typing_Tm_abs_e6649eba6390f90be22ea1a9dce6d496))

:named typing_Tm_abs_e6649eba6390f90be22ea1a9dce6d496))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Less; Namespace Pulse.Class.BoundedIntegers
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.eqtype)
(HasType (Pulse.Class.BoundedIntegers.op_Less @x0)
(Tm_arrow_6e88da7f43cb121e9cadcec043378ab3 @x0)))
 

:pattern ((Pulse.Class.BoundedIntegers.op_Less @x0))
:qid typing_Pulse.Class.BoundedIntegers.op_Less))
:named typing_Pulse.Class.BoundedIntegers.op_Less))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pow2; Namespace Prims
(assert (! 
;; def=Prims.fst(708,8-708,12); use=Prims.fst(708,8-708,12)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.nat)
(HasType (Prims.pow2 @x0)
Prims.pos))
 

:pattern ((Prims.pow2 @x0))
:qid typing_Prims.pow2))

:named typing_Prims.pow2))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt32.v; Namespace FStar.UInt32
(assert (! 
;; def=FStar.UInt32.fsti(54,4-54,5); use=FStar.UInt32.fsti(54,4-54,5)
(forall ((@x0 Term))
 (! (implies (HasType @x0
(FStar.UInt32.t Dummy_value))
(HasType (FStar.UInt32.v @x0)
(FStar.UInt.uint_t (BoxInt 32))))
 

:pattern ((FStar.UInt32.v @x0))
:qid typing_FStar.UInt32.v))

:named typing_FStar.UInt32.v))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt32.uint_to_t; Namespace FStar.UInt32
(assert (! 
;; def=FStar.UInt32.fsti(58,4-58,13); use=FStar.UInt32.fsti(58,4-58,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
(FStar.UInt.uint_t (BoxInt 32)))
(HasType (FStar.UInt32.uint_to_t @x0)
(Tm_refine_0ea1fba779ad5718e28476faeef94d56 @x0)))
 

:pattern ((FStar.UInt32.uint_to_t @x0))
:qid typing_FStar.UInt32.uint_to_t))

:named typing_FStar.UInt32.uint_to_t))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt32.t; Namespace FStar.UInt32
(assert (! 
;; def=FStar.UInt32.fsti(50,8-50,9); use=FStar.UInt32.fsti(50,8-50,9)
(forall ((@u0 Dummy_sort))
 (! (HasType (FStar.UInt32.t @u0)
Prims.eqtype)
 

:pattern ((FStar.UInt32.t @u0))
:qid typing_FStar.UInt32.t))

:named typing_FStar.UInt32.t))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt32.sub; Namespace FStar.UInt32
(assert (! 
;; def=FStar.UInt32.fsti(116,4-116,7); use=FStar.UInt32.fsti(116,4-116,7)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and 
;; def=FStar.UInt32.fsti(117,12-117,32); use=FStar.UInt32.fsti(117,12-117,32)
(Valid 
;; def=FStar.UInt32.fsti(117,12-117,32); use=FStar.UInt32.fsti(117,12-117,32)
(FStar.UInt.size (Prims.op_Subtraction (FStar.UInt32.v @x0)
(FStar.UInt32.v @x1))
(BoxInt 32))
)

(HasType @x0
(FStar.UInt32.t Dummy_value))
(HasType @x1
(FStar.UInt32.t Dummy_value)))
(HasType (FStar.UInt32.sub @x0
@x1)
(Tm_refine_aa4b3d268075d84252df525db1f85524 @x0
@x1)))
 

:pattern ((FStar.UInt32.sub @x0
@x1))
:qid typing_FStar.UInt32.sub))

:named typing_FStar.UInt32.sub))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt32.rem; Namespace FStar.UInt32
(assert (! 
;; def=FStar.UInt32.fsti(177,4-177,7); use=FStar.UInt32.fsti(177,4-177,7)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
(FStar.UInt32.t Dummy_value))
(HasType @x1
Tm_refine_0941c9ff95557f2d53bc8f8179ab793e))
(HasType (FStar.UInt32.rem @x0
@x1)
(Tm_refine_19ac6a052799e5086e9c3eb3a21d54a5 @x0
@x1)))
 

:pattern ((FStar.UInt32.rem @x0
@x1))
:qid typing_FStar.UInt32.rem))

:named typing_FStar.UInt32.rem))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt32.lte; Namespace FStar.UInt32
(assert (! 
;; def=FStar.UInt32.fsti(235,4-235,7); use=FStar.UInt32.fsti(235,4-235,7)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
(FStar.UInt32.t Dummy_value))
(HasType @x1
(FStar.UInt32.t Dummy_value)))
(HasType (FStar.UInt32.lte @x0
@x1)
Prims.bool))
 

:pattern ((FStar.UInt32.lte @x0
@x1))
:qid typing_FStar.UInt32.lte))

:named typing_FStar.UInt32.lte))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt32.lt; Namespace FStar.UInt32
(assert (! 
;; def=FStar.UInt32.fsti(232,4-232,6); use=FStar.UInt32.fsti(232,4-232,6)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
(FStar.UInt32.t Dummy_value))
(HasType @x1
(FStar.UInt32.t Dummy_value)))
(HasType (FStar.UInt32.lt @x0
@x1)
Prims.bool))
 

:pattern ((FStar.UInt32.lt @x0
@x1))
:qid typing_FStar.UInt32.lt))

:named typing_FStar.UInt32.lt))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt32.add; Namespace FStar.UInt32
(assert (! 
;; def=FStar.UInt32.fsti(88,4-88,7); use=FStar.UInt32.fsti(88,4-88,7)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and 
;; def=FStar.UInt32.fsti(89,12-89,32); use=FStar.UInt32.fsti(89,12-89,32)
(Valid 
;; def=FStar.UInt32.fsti(89,12-89,32); use=FStar.UInt32.fsti(89,12-89,32)
(FStar.UInt.size (Prims.op_Addition (FStar.UInt32.v @x0)
(FStar.UInt32.v @x1))
(BoxInt 32))
)

(HasType @x0
(FStar.UInt32.t Dummy_value))
(HasType @x1
(FStar.UInt32.t Dummy_value)))
(HasType (FStar.UInt32.add @x0
@x1)
(Tm_refine_709aff84c75b0fff77dcbf3b529649dd @x0
@x1)))
 

:pattern ((FStar.UInt32.add @x0
@x1))
:qid typing_FStar.UInt32.add))

:named typing_FStar.UInt32.add))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.uint_t; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(54,5-54,11); use=FStar.UInt.fsti(54,5-54,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.nat)
(HasType (FStar.UInt.uint_t @x0)
Tm_type))
 

:pattern ((FStar.UInt.uint_t @x0))
:qid typing_FStar.UInt.uint_t))

:named typing_FStar.UInt.uint_t))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.size; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(50,4-50,8); use=FStar.UInt.fsti(50,4-50,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.int)
(HasType @x1
Prims.nat))
(HasType (FStar.UInt.size @x0
@x1)
Tm_type))
 

:pattern ((FStar.UInt.size @x0
@x1))
:qid typing_FStar.UInt.size))

:named typing_FStar.UInt.size))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.mod; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(162,4-162,7); use=FStar.UInt.fsti(162,4-162,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
(FStar.UInt.uint_t @x0))
(HasType @x2
(Tm_refine_0722e9115d2a1be8d90527397d01011c @x0)))
(HasType (FStar.UInt.mod @x0
@x1
@x2)
(FStar.UInt.uint_t @x0)))
 

:pattern ((FStar.UInt.mod @x0
@x1
@x2))
:qid typing_FStar.UInt.mod))

:named typing_FStar.UInt.mod))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.min_int; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(47,4-47,11); use=FStar.UInt.fsti(47,4-47,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.nat)
(HasType (FStar.UInt.min_int @x0)
Prims.int))
 

:pattern ((FStar.UInt.min_int @x0))
:qid typing_FStar.UInt.min_int))

:named typing_FStar.UInt.min_int))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.max_int; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(46,4-46,11); use=FStar.UInt.fsti(46,4-46,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.nat)
(HasType (FStar.UInt.max_int @x0)
Prims.int))
 

:pattern ((FStar.UInt.max_int @x0))
:qid typing_FStar.UInt.max_int))

:named typing_FStar.UInt.max_int))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.lte; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(170,4-170,7); use=FStar.UInt.fsti(170,4-170,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
(FStar.UInt.uint_t @x0))
(HasType @x2
(FStar.UInt.uint_t @x0)))
(HasType (FStar.UInt.lte @x0
@x1
@x2)
Prims.bool))
 

:pattern ((FStar.UInt.lte @x0
@x1
@x2))
:qid typing_FStar.UInt.lte))

:named typing_FStar.UInt.lte))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.lt; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(169,4-169,6); use=FStar.UInt.fsti(169,4-169,6)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
(FStar.UInt.uint_t @x0))
(HasType @x2
(FStar.UInt.uint_t @x0)))
(HasType (FStar.UInt.lt @x0
@x1
@x2)
Prims.bool))
 

:pattern ((FStar.UInt.lt @x0
@x1
@x2))
:qid typing_FStar.UInt.lt))

:named typing_FStar.UInt.lt))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.fits; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(49,4-49,8); use=FStar.UInt.fsti(49,4-49,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.int)
(HasType @x1
Prims.nat))
(HasType (FStar.UInt.fits @x0
@x1)
Prims.bool))
 

:pattern ((FStar.UInt.fits @x0
@x1))
:qid typing_FStar.UInt.fits))

:named typing_FStar.UInt.fits))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Less; Namespace Pulse.Class.BoundedIntegers
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Pulse.Class.BoundedIntegers.op_Less@tok
@x0)
(Pulse.Class.BoundedIntegers.op_Less @x0))
 

:pattern ((ApplyTT Pulse.Class.BoundedIntegers.op_Less@tok
@x0))
:qid token_correspondence_Pulse.Class.BoundedIntegers.op_Less))
:named token_correspondence_Pulse.Class.BoundedIntegers.op_Less))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.UInt32.uint_to_t; Namespace FStar.UInt32
(assert (! 
;; def=FStar.UInt32.fsti(58,4-58,13); use=FStar.UInt32.fsti(58,4-58,13)
(forall ((@x0 Term))
 (! (= (ApplyTT FStar.UInt32.uint_to_t@tok
@x0)
(FStar.UInt32.uint_to_t @x0))
 

:pattern ((ApplyTT FStar.UInt32.uint_to_t@tok
@x0))
:qid token_correspondence_FStar.UInt32.uint_to_t))

:named token_correspondence_FStar.UInt32.uint_to_t))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt.uint_t; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(54,22-54,37); use=FStar.UInt.fsti(54,22-54,37)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_f13070840248fced9d9d60d77bdae3ec @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_f13070840248fced9d9d60d77bdae3ec @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_f13070840248fced9d9d60d77bdae3ec))

:named refinement_kinding_Tm_refine_f13070840248fced9d9d60d77bdae3ec))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt32.one; Namespace FStar.UInt32
(assert (! (HasType Tm_refine_d94e5152d1c8429ac781cc5558c9a3e2
Tm_type)
:named refinement_kinding_Tm_refine_d94e5152d1c8429ac781cc5558c9a3e2))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt32.sub; Namespace FStar.UInt32
(assert (! 
;; def=FStar.UInt32.fsti(116,27-116,28); use=FStar.UInt32.fsti(116,27-116,28)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_aa4b3d268075d84252df525db1f85524 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_aa4b3d268075d84252df525db1f85524 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_aa4b3d268075d84252df525db1f85524))

:named refinement_kinding_Tm_refine_aa4b3d268075d84252df525db1f85524))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Char.char_code; Namespace FStar.Char
(assert (! (HasType Tm_refine_96af4a84eae6a9bae92bc908a1c3c24c
Tm_type)
:named refinement_kinding_Tm_refine_96af4a84eae6a9bae92bc908a1c3c24c))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt32.zero; Namespace FStar.UInt32
(assert (! (HasType Tm_refine_7cfa0141116db910fdee890408ebbaf1
Tm_type)
:named refinement_kinding_Tm_refine_7cfa0141116db910fdee890408ebbaf1))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt32.add; Namespace FStar.UInt32
(assert (! 
;; def=FStar.UInt32.fsti(88,27-88,28); use=FStar.UInt32.fsti(88,27-88,28)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_709aff84c75b0fff77dcbf3b529649dd @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_709aff84c75b0fff77dcbf3b529649dd @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_709aff84c75b0fff77dcbf3b529649dd))

:named refinement_kinding_Tm_refine_709aff84c75b0fff77dcbf3b529649dd))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Less; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(13,27-13,52); use=Pulse.Class.BoundedIntegers.fst(13,27-13,52)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_2338f56bb8e624a59dffd87bb6ec6289 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_2338f56bb8e624a59dffd87bb6ec6289 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_2338f56bb8e624a59dffd87bb6ec6289))

:named refinement_kinding_Tm_refine_2338f56bb8e624a59dffd87bb6ec6289))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt32.rem; Namespace FStar.UInt32
(assert (! 
;; def=FStar.UInt32.fsti(177,37-177,38); use=FStar.UInt32.fsti(177,37-177,38)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_19ac6a052799e5086e9c3eb3a21d54a5 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_19ac6a052799e5086e9c3eb3a21d54a5 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_19ac6a052799e5086e9c3eb3a21d54a5))

:named refinement_kinding_Tm_refine_19ac6a052799e5086e9c3eb3a21d54a5))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt32.uint_to_t; Namespace FStar.UInt32
(assert (! 
;; def=FStar.UInt32.fsti(58,34-58,35); use=FStar.UInt32.fsti(58,34-58,35)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_0ea1fba779ad5718e28476faeef94d56 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_0ea1fba779ad5718e28476faeef94d56 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_0ea1fba779ad5718e28476faeef94d56))

:named refinement_kinding_Tm_refine_0ea1fba779ad5718e28476faeef94d56))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt32.div; Namespace FStar.UInt32
(assert (! (HasType Tm_refine_0941c9ff95557f2d53bc8f8179ab793e
Tm_type)
:named refinement_kinding_Tm_refine_0941c9ff95557f2d53bc8f8179ab793e))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt.div; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(143,30-143,50); use=FStar.UInt.fsti(143,30-143,50)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_0722e9115d2a1be8d90527397d01011c @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_0722e9115d2a1be8d90527397d01011c @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_0722e9115d2a1be8d90527397d01011c))

:named refinement_kinding_Tm_refine_0722e9115d2a1be8d90527397d01011c))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt.uint_t; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(54,22-54,37); use=FStar.UInt.fsti(54,22-54,37)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_f13070840248fced9d9d60d77bdae3ec @x2))
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.UInt.fsti(54,28-54,36)
(Valid 
;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.UInt.fsti(54,28-54,36)
(FStar.UInt.size @x1
@x2)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_f13070840248fced9d9d60d77bdae3ec @x2)))
:qid refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec))

:named refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt32.one; Namespace FStar.UInt32
(assert (! 
;; def=FStar.UInt32.fsti(80,10-80,22); use=FStar.UInt32.fsti(80,10-80,22)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_d94e5152d1c8429ac781cc5558c9a3e2)
(and (HasTypeFuel @u0
@x1
(FStar.UInt32.t Dummy_value))

;; def=FStar.UInt32.fsti(80,14-80,21); use=FStar.UInt32.fsti(80,14-80,21)
(= (FStar.UInt32.v @x1)
(BoxInt 1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_d94e5152d1c8429ac781cc5558c9a3e2))
:qid refinement_interpretation_Tm_refine_d94e5152d1c8429ac781cc5558c9a3e2))

:named refinement_interpretation_Tm_refine_d94e5152d1c8429ac781cc5558c9a3e2))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt32.sub; Namespace FStar.UInt32
(assert (! 
;; def=FStar.UInt32.fsti(116,27-116,28); use=FStar.UInt32.fsti(116,27-116,28)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_aa4b3d268075d84252df525db1f85524 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(FStar.UInt32.t Dummy_value))

;; def=FStar.UInt32.fsti(118,21-118,36); use=FStar.UInt32.fsti(118,21-118,36)
(= (Prims.op_Subtraction (FStar.UInt32.v @x2)
(FStar.UInt32.v @x3))
(FStar.UInt32.v @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_aa4b3d268075d84252df525db1f85524 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_aa4b3d268075d84252df525db1f85524))

:named refinement_interpretation_Tm_refine_aa4b3d268075d84252df525db1f85524))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Char.char_code; Namespace FStar.Char
(assert (! 
;; def=FStar.Char.fsti(38,17-38,89); use=FStar.Char.fsti(38,17-38,89)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_96af4a84eae6a9bae92bc908a1c3c24c)
(and (HasTypeFuel @u0
@x1
(FStar.UInt32.t Dummy_value))

;; def=FStar.Char.fsti(38,26-38,88); use=FStar.Char.fsti(38,26-38,88)
(or 
;; def=FStar.Char.fsti(38,26-38,42); use=FStar.Char.fsti(38,26-38,42)
(< (BoxInt_proj_0 (FStar.UInt32.v @x1))
(BoxInt_proj_0 (BoxInt 55295)))


;; def=FStar.Char.fsti(38,46-38,88); use=FStar.Char.fsti(38,46-38,88)
(and 
;; def=FStar.Char.fsti(38,47-38,64); use=FStar.Char.fsti(38,47-38,64)
(>= (BoxInt_proj_0 (FStar.UInt32.v @x1))
(BoxInt_proj_0 (BoxInt 57344)))


;; def=FStar.Char.fsti(38,68-38,87); use=FStar.Char.fsti(38,68-38,87)
(<= (BoxInt_proj_0 (FStar.UInt32.v @x1))
(BoxInt_proj_0 (BoxInt 1114111)))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_96af4a84eae6a9bae92bc908a1c3c24c))
:qid refinement_interpretation_Tm_refine_96af4a84eae6a9bae92bc908a1c3c24c))

:named refinement_interpretation_Tm_refine_96af4a84eae6a9bae92bc908a1c3c24c))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt32.zero; Namespace FStar.UInt32
(assert (! 
;; def=FStar.UInt32.fsti(78,11-78,23); use=FStar.UInt32.fsti(78,11-78,23)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_7cfa0141116db910fdee890408ebbaf1)
(and (HasTypeFuel @u0
@x1
(FStar.UInt32.t Dummy_value))

;; def=FStar.UInt32.fsti(78,15-78,22); use=FStar.UInt32.fsti(78,15-78,22)
(= (FStar.UInt32.v @x1)
(BoxInt 0))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_7cfa0141116db910fdee890408ebbaf1))
:qid refinement_interpretation_Tm_refine_7cfa0141116db910fdee890408ebbaf1))

:named refinement_interpretation_Tm_refine_7cfa0141116db910fdee890408ebbaf1))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt32.add; Namespace FStar.UInt32
(assert (! 
;; def=FStar.UInt32.fsti(88,27-88,28); use=FStar.UInt32.fsti(88,27-88,28)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_709aff84c75b0fff77dcbf3b529649dd @x2
@x3))
(and (HasTypeFuel @u0
@x1
(FStar.UInt32.t Dummy_value))

;; def=FStar.UInt32.fsti(90,21-90,36); use=FStar.UInt32.fsti(90,21-90,36)
(= (Prims.op_Addition (FStar.UInt32.v @x2)
(FStar.UInt32.v @x3))
(FStar.UInt32.v @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_709aff84c75b0fff77dcbf3b529649dd @x2
@x3)))
:qid refinement_interpretation_Tm_refine_709aff84c75b0fff77dcbf3b529649dd))

:named refinement_interpretation_Tm_refine_709aff84c75b0fff77dcbf3b529649dd))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Less; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(13,27-13,52); use=Pulse.Class.BoundedIntegers.fst(13,27-13,52)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_2338f56bb8e624a59dffd87bb6ec6289 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
Prims.bool)

;; def=Pulse.Class.BoundedIntegers.fst(13,36-13,51); use=Pulse.Class.BoundedIntegers.fst(13,36-13,51)
(= @x1
(Prims.op_LessThan (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x2)
@x3)
@x4)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
@x2)
@x3)
@x5)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_2338f56bb8e624a59dffd87bb6ec6289 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_2338f56bb8e624a59dffd87bb6ec6289))

:named refinement_interpretation_Tm_refine_2338f56bb8e624a59dffd87bb6ec6289))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt32.rem; Namespace FStar.UInt32
(assert (! 
;; def=FStar.UInt32.fsti(177,37-177,38); use=FStar.UInt32.fsti(177,37-177,38)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_19ac6a052799e5086e9c3eb3a21d54a5 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(FStar.UInt32.t Dummy_value))

;; def=FStar.UInt32.fsti(179,21-179,53); use=FStar.UInt32.fsti(179,21-179,53)
(= (FStar.UInt.mod (BoxInt 32)
(FStar.UInt32.v @x2)
(FStar.UInt32.v @x3))
(FStar.UInt32.v @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_19ac6a052799e5086e9c3eb3a21d54a5 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_19ac6a052799e5086e9c3eb3a21d54a5))

:named refinement_interpretation_Tm_refine_19ac6a052799e5086e9c3eb3a21d54a5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt32.uint_to_t; Namespace FStar.UInt32
(assert (! 
;; def=FStar.UInt32.fsti(58,34-58,35); use=FStar.UInt32.fsti(58,34-58,35)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_0ea1fba779ad5718e28476faeef94d56 @x2))
(and (HasTypeFuel @u0
@x1
(FStar.UInt32.t Dummy_value))

;; def=FStar.UInt32.fsti(60,21-60,28); use=FStar.UInt32.fsti(60,21-60,28)
(= (FStar.UInt32.v @x1)
@x2)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_0ea1fba779ad5718e28476faeef94d56 @x2)))
:qid refinement_interpretation_Tm_refine_0ea1fba779ad5718e28476faeef94d56))

:named refinement_interpretation_Tm_refine_0ea1fba779ad5718e28476faeef94d56))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt32.div; Namespace FStar.UInt32
(assert (! 
;; def=FStar.UInt32.fsti(168,14-168,29); use=FStar.UInt32.fsti(168,14-168,29)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_0941c9ff95557f2d53bc8f8179ab793e)
(and (HasTypeFuel @u0
@x1
(FStar.UInt32.t Dummy_value))

;; def=FStar.UInt32.fsti(168,19-168,27); use=FStar.UInt32.fsti(168,19-168,27)
(not (= (FStar.UInt32.v @x1)
(BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_0941c9ff95557f2d53bc8f8179ab793e))
:qid refinement_interpretation_Tm_refine_0941c9ff95557f2d53bc8f8179ab793e))

:named refinement_interpretation_Tm_refine_0941c9ff95557f2d53bc8f8179ab793e))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt.div; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(143,30-143,50); use=FStar.UInt.fsti(143,30-143,50)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_0722e9115d2a1be8d90527397d01011c @x2))
(and (HasTypeFuel @u0
@x1
(FStar.UInt.uint_t @x2))

;; def=FStar.UInt.fsti(143,42-143,48); use=FStar.UInt.fsti(143,42-143,48)
(not (= @x1
(BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_0722e9115d2a1be8d90527397d01011c @x2)))
:qid refinement_interpretation_Tm_refine_0722e9115d2a1be8d90527397d01011c))

:named refinement_interpretation_Tm_refine_0722e9115d2a1be8d90527397d01011c))
;;; Fact-ids: Name Prims.op_Division; Namespace Prims
(assert (! 
;; def=Prims.fst(703,4-703,15); use=Prims.fst(703,4-703,15)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (not (= (BoxInt_proj_0 @x1)
0))
(= (Prims.op_Division @x0
@x1)
(BoxInt (div (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1)))))
 

:pattern ((Prims.op_Division @x0
@x1))
:qid primitive_Prims.op_Division))

:named primitive_Prims.op_Division))
;;; Fact-ids: Name Prims.op_AmpAmp; Namespace Prims
(assert (! 
;; def=Prims.fst(522,4-522,13); use=Prims.fst(522,4-522,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_AmpAmp @x0
@x1)
(BoxBool (and (BoxBool_proj_0 @x0)
(BoxBool_proj_0 @x1))))
 

:pattern ((Prims.op_AmpAmp @x0
@x1))
:qid primitive_Prims.op_AmpAmp))

:named primitive_Prims.op_AmpAmp))
;;;;;;;;;;;;;;;;Lemma: FStar.UInt32.vu_inv
;;; Fact-ids: Name FStar.UInt32.vu_inv; Namespace FStar.UInt32
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
(FStar.UInt.uint_t (BoxInt 32)))

;; def=FStar.UInt32.fsti(69,11-69,33); use=FStar.UInt32.fsti(69,11-69,33)
(= (FStar.UInt32.v (FStar.UInt32.uint_to_t @x0))
@x0)
)
 

:pattern ((FStar.UInt32.uint_to_t @x0))
:qid lemma_FStar.UInt32.vu_inv))
:named lemma_FStar.UInt32.vu_inv))
;;;;;;;;;;;;;;;;Lemma: FStar.UInt32.uv_inv
;;; Fact-ids: Name FStar.UInt32.uv_inv; Namespace FStar.UInt32
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
(FStar.UInt32.t Dummy_value))

;; def=FStar.UInt32.fsti(64,11-64,33); use=FStar.UInt32.fsti(64,11-64,33)
(= (FStar.UInt32.uint_to_t (FStar.UInt32.v @x0))
@x0)
)
 

:pattern ((FStar.UInt32.v @x0))
:qid lemma_FStar.UInt32.uv_inv))
:named lemma_FStar.UInt32.uv_inv))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_7275a7110336f1195ffb2026ecd4a1f5
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Less; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_arrow_7275a7110336f1195ffb2026ecd4a1f5
Tm_type)
:named kinding_Tm_arrow_7275a7110336f1195ffb2026ecd4a1f5))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_6e88da7f43cb121e9cadcec043378ab3
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Less; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,19-13,7)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_6e88da7f43cb121e9cadcec043378ab3 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_6e88da7f43cb121e9cadcec043378ab3 @x0)
Tm_type))
:qid kinding_Tm_arrow_6e88da7f43cb121e9cadcec043378ab3))

:named kinding_Tm_arrow_6e88da7f43cb121e9cadcec043378ab3))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_6cf634b0269516239f2d812c0194efd0
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Less; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-13,7)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_6cf634b0269516239f2d812c0194efd0 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_6cf634b0269516239f2d812c0194efd0 @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_6cf634b0269516239f2d812c0194efd0))

:named kinding_Tm_arrow_6cf634b0269516239f2d812c0194efd0))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_3d414099f2a2b7ef3e11b1fc75a28674
;;; Fact-ids: Name FStar.UInt32.uint_to_t; Namespace FStar.UInt32
(assert (! (HasType Tm_arrow_3d414099f2a2b7ef3e11b1fc75a28674
Tm_type)
:named kinding_Tm_arrow_3d414099f2a2b7ef3e11b1fc75a28674))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_21e98d2d10448ac8275ee113995424d9
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Less; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-13,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_arrow_21e98d2d10448ac8275ee113995424d9 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_arrow_21e98d2d10448ac8275ee113995424d9 @x0
@x1
@x2)
Tm_type))
:qid kinding_Tm_arrow_21e98d2d10448ac8275ee113995424d9))

:named kinding_Tm_arrow_21e98d2d10448ac8275ee113995424d9))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_e6649eba6390f90be22ea1a9dce6d496
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Less; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(13,6-13,7); use=Pulse.Class.BoundedIntegers.fst(13,6-13,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (Tm_abs_e6649eba6390f90be22ea1a9dce6d496 @x1)
@x0)
(let ((@lb2 @x0))
(Pulse.Class.BoundedIntegers.Mkbounded_int_op_Less @lb2)))
 

:pattern ((ApplyTT (Tm_abs_e6649eba6390f90be22ea1a9dce6d496 @x1)
@x0))
:qid interpretation_Tm_abs_e6649eba6390f90be22ea1a9dce6d496))

:named interpretation_Tm_abs_e6649eba6390f90be22ea1a9dce6d496))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f13070840248fced9d9d60d77bdae3ec
;;; Fact-ids: Name FStar.UInt.uint_t; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(54,22-54,37); use=FStar.UInt.fsti(54,22-54,37)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_f13070840248fced9d9d60d77bdae3ec @x0)))
(Valid (Prims.hasEq Prims.int)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_f13070840248fced9d9d60d77bdae3ec @x0))))
:qid haseqTm_refine_f13070840248fced9d9d60d77bdae3ec))

:named haseqTm_refine_f13070840248fced9d9d60d77bdae3ec))
;;;;;;;;;;;;;;;;haseq for Tm_refine_d94e5152d1c8429ac781cc5558c9a3e2
;;; Fact-ids: Name FStar.UInt32.one; Namespace FStar.UInt32
(assert (! (iff (Valid (Prims.hasEq Tm_refine_d94e5152d1c8429ac781cc5558c9a3e2))
(Valid (Prims.hasEq (FStar.UInt32.t Dummy_value))))
:named haseqTm_refine_d94e5152d1c8429ac781cc5558c9a3e2))
;;;;;;;;;;;;;;;;haseq for Tm_refine_aa4b3d268075d84252df525db1f85524
;;; Fact-ids: Name FStar.UInt32.sub; Namespace FStar.UInt32
(assert (! 
;; def=FStar.UInt32.fsti(116,27-116,28); use=FStar.UInt32.fsti(116,27-116,28)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_aa4b3d268075d84252df525db1f85524 @x0
@x1)))
(Valid (Prims.hasEq (FStar.UInt32.t Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_aa4b3d268075d84252df525db1f85524 @x0
@x1))))
:qid haseqTm_refine_aa4b3d268075d84252df525db1f85524))

:named haseqTm_refine_aa4b3d268075d84252df525db1f85524))
;;;;;;;;;;;;;;;;haseq for Tm_refine_96af4a84eae6a9bae92bc908a1c3c24c
;;; Fact-ids: Name FStar.Char.char_code; Namespace FStar.Char
(assert (! (iff (Valid (Prims.hasEq Tm_refine_96af4a84eae6a9bae92bc908a1c3c24c))
(Valid (Prims.hasEq (FStar.UInt32.t Dummy_value))))
:named haseqTm_refine_96af4a84eae6a9bae92bc908a1c3c24c))
;;;;;;;;;;;;;;;;haseq for Tm_refine_7cfa0141116db910fdee890408ebbaf1
;;; Fact-ids: Name FStar.UInt32.zero; Namespace FStar.UInt32
(assert (! (iff (Valid (Prims.hasEq Tm_refine_7cfa0141116db910fdee890408ebbaf1))
(Valid (Prims.hasEq (FStar.UInt32.t Dummy_value))))
:named haseqTm_refine_7cfa0141116db910fdee890408ebbaf1))
;;;;;;;;;;;;;;;;haseq for Tm_refine_709aff84c75b0fff77dcbf3b529649dd
;;; Fact-ids: Name FStar.UInt32.add; Namespace FStar.UInt32
(assert (! 
;; def=FStar.UInt32.fsti(88,27-88,28); use=FStar.UInt32.fsti(88,27-88,28)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_709aff84c75b0fff77dcbf3b529649dd @x0
@x1)))
(Valid (Prims.hasEq (FStar.UInt32.t Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_709aff84c75b0fff77dcbf3b529649dd @x0
@x1))))
:qid haseqTm_refine_709aff84c75b0fff77dcbf3b529649dd))

:named haseqTm_refine_709aff84c75b0fff77dcbf3b529649dd))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2338f56bb8e624a59dffd87bb6ec6289
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__op_Less; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(13,27-13,52); use=Pulse.Class.BoundedIntegers.fst(13,27-13,52)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_2338f56bb8e624a59dffd87bb6ec6289 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq Prims.bool)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_2338f56bb8e624a59dffd87bb6ec6289 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_2338f56bb8e624a59dffd87bb6ec6289))

:named haseqTm_refine_2338f56bb8e624a59dffd87bb6ec6289))
;;;;;;;;;;;;;;;;haseq for Tm_refine_19ac6a052799e5086e9c3eb3a21d54a5
;;; Fact-ids: Name FStar.UInt32.rem; Namespace FStar.UInt32
(assert (! 
;; def=FStar.UInt32.fsti(177,37-177,38); use=FStar.UInt32.fsti(177,37-177,38)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_19ac6a052799e5086e9c3eb3a21d54a5 @x0
@x1)))
(Valid (Prims.hasEq (FStar.UInt32.t Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_19ac6a052799e5086e9c3eb3a21d54a5 @x0
@x1))))
:qid haseqTm_refine_19ac6a052799e5086e9c3eb3a21d54a5))

:named haseqTm_refine_19ac6a052799e5086e9c3eb3a21d54a5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0ea1fba779ad5718e28476faeef94d56
;;; Fact-ids: Name FStar.UInt32.uint_to_t; Namespace FStar.UInt32
(assert (! 
;; def=FStar.UInt32.fsti(58,34-58,35); use=FStar.UInt32.fsti(58,34-58,35)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_0ea1fba779ad5718e28476faeef94d56 @x0)))
(Valid (Prims.hasEq (FStar.UInt32.t Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_0ea1fba779ad5718e28476faeef94d56 @x0))))
:qid haseqTm_refine_0ea1fba779ad5718e28476faeef94d56))

:named haseqTm_refine_0ea1fba779ad5718e28476faeef94d56))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0941c9ff95557f2d53bc8f8179ab793e
;;; Fact-ids: Name FStar.UInt32.div; Namespace FStar.UInt32
(assert (! (iff (Valid (Prims.hasEq Tm_refine_0941c9ff95557f2d53bc8f8179ab793e))
(Valid (Prims.hasEq (FStar.UInt32.t Dummy_value))))
:named haseqTm_refine_0941c9ff95557f2d53bc8f8179ab793e))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0722e9115d2a1be8d90527397d01011c
;;; Fact-ids: Name FStar.UInt.div; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(143,30-143,50); use=FStar.UInt.fsti(143,30-143,50)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_0722e9115d2a1be8d90527397d01011c @x0)))
(Valid (Prims.hasEq (FStar.UInt.uint_t @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_0722e9115d2a1be8d90527397d01011c @x0))))
:qid haseqTm_refine_0722e9115d2a1be8d90527397d01011c))

:named haseqTm_refine_0722e9115d2a1be8d90527397d01011c))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Less; Namespace Pulse.Class.BoundedIntegers
(assert (! (forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType Pulse.Class.BoundedIntegers.op_Less@tok
Tm_arrow_7275a7110336f1195ffb2026ecd4a1f5))
(forall ((@x1 Term))
 (! (= (ApplyTT Pulse.Class.BoundedIntegers.op_Less@tok
@x1)
(Pulse.Class.BoundedIntegers.op_Less @x1))
 

:pattern ((Pulse.Class.BoundedIntegers.op_Less @x1))
:qid function_token_typing_Pulse.Class.BoundedIntegers.op_Less.1)))
 

:pattern ((ApplyTT @x0
Pulse.Class.BoundedIntegers.op_Less@tok))
:qid function_token_typing_Pulse.Class.BoundedIntegers.op_Less))
:named function_token_typing_Pulse.Class.BoundedIntegers.op_Less))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.UInt32.uint_to_t; Namespace FStar.UInt32
(assert (! 
;; def=FStar.UInt32.fsti(58,4-58,13); use=FStar.UInt32.fsti(58,4-58,13)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType FStar.UInt32.uint_to_t@tok
Tm_arrow_3d414099f2a2b7ef3e11b1fc75a28674))

;; def=FStar.UInt32.fsti(58,4-58,13); use=FStar.UInt32.fsti(58,4-58,13)
(forall ((@x1 Term))
 (! (= (ApplyTT FStar.UInt32.uint_to_t@tok
@x1)
(FStar.UInt32.uint_to_t @x1))
 

:pattern ((FStar.UInt32.uint_to_t @x1))
:qid function_token_typing_FStar.UInt32.uint_to_t.1))
)
 

:pattern ((ApplyTT @x0
FStar.UInt32.uint_to_t@tok))
:qid function_token_typing_FStar.UInt32.uint_to_t))

:named function_token_typing_FStar.UInt32.uint_to_t))
;;;;;;;;;;;;;;;;Equation for Pulse.Class.BoundedIntegers.op_Less
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Less; Namespace Pulse.Class.BoundedIntegers
(assert (! (forall ((@x0 Term))
 (! (= (Pulse.Class.BoundedIntegers.op_Less @x0)
(Tm_abs_e6649eba6390f90be22ea1a9dce6d496 @x0))
 

:pattern ((Pulse.Class.BoundedIntegers.op_Less @x0))
:qid equation_Pulse.Class.BoundedIntegers.op_Less))
:named equation_Pulse.Class.BoundedIntegers.op_Less))
;;;;;;;;;;;;;;;;Equation for FStar.UInt32.lte
;;; Fact-ids: Name FStar.UInt32.lte; Namespace FStar.UInt32
(assert (! 
;; def=FStar.UInt32.fsti(235,4-235,7); use=FStar.UInt32.fsti(235,4-235,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.UInt32.lte @x0
@x1)
(FStar.UInt.lte (BoxInt 32)
(FStar.UInt32.v @x0)
(FStar.UInt32.v @x1)))
 

:pattern ((FStar.UInt32.lte @x0
@x1))
:qid equation_FStar.UInt32.lte))

:named equation_FStar.UInt32.lte))
;;;;;;;;;;;;;;;;Equation for FStar.UInt32.lt
;;; Fact-ids: Name FStar.UInt32.lt; Namespace FStar.UInt32
(assert (! 
;; def=FStar.UInt32.fsti(232,4-232,6); use=FStar.UInt32.fsti(232,4-232,6)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.UInt32.lt @x0
@x1)
(FStar.UInt.lt (BoxInt 32)
(FStar.UInt32.v @x0)
(FStar.UInt32.v @x1)))
 

:pattern ((FStar.UInt32.lt @x0
@x1))
:qid equation_FStar.UInt32.lt))

:named equation_FStar.UInt32.lt))
;;;;;;;;;;;;;;;;Equation for FStar.UInt.uint_t
;;; Fact-ids: Name FStar.UInt.uint_t; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(54,5-54,11); use=FStar.UInt.fsti(54,5-54,11)
(forall ((@x0 Term))
 (! (= (FStar.UInt.uint_t @x0)
(Tm_refine_f13070840248fced9d9d60d77bdae3ec @x0))
 

:pattern ((FStar.UInt.uint_t @x0))
:qid equation_FStar.UInt.uint_t))

:named equation_FStar.UInt.uint_t))
;;;;;;;;;;;;;;;;Equation for FStar.UInt.size
;;; Fact-ids: Name FStar.UInt.size; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(50,4-50,8); use=FStar.UInt.fsti(50,4-50,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.UInt.size @x0
@x1)
(Prims.b2t (FStar.UInt.fits @x0
@x1)))
 

:pattern ((FStar.UInt.size @x0
@x1))
:qid equation_FStar.UInt.size))

:named equation_FStar.UInt.size))
;;;;;;;;;;;;;;;;Equation for FStar.UInt.mod
;;; Fact-ids: Name FStar.UInt.mod; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(162,4-162,7); use=FStar.UInt.fsti(162,4-162,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.UInt.mod @x0
@x1
@x2)
(Prims.op_Subtraction @x1
(Prims.op_Multiply (Prims.op_Division @x1
@x2)
@x2)))
 

:pattern ((FStar.UInt.mod @x0
@x1
@x2))
:qid equation_FStar.UInt.mod))

:named equation_FStar.UInt.mod))
;;;;;;;;;;;;;;;;Equation for FStar.UInt.min_int
;;; Fact-ids: Name FStar.UInt.min_int; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(47,4-47,11); use=FStar.UInt.fsti(47,4-47,11)
(forall ((@x0 Term))
 (! (= (FStar.UInt.min_int @x0)
(BoxInt 0))
 

:pattern ((FStar.UInt.min_int @x0))
:qid equation_FStar.UInt.min_int))

:named equation_FStar.UInt.min_int))
;;;;;;;;;;;;;;;;Equation for FStar.UInt.max_int
;;; Fact-ids: Name FStar.UInt.max_int; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(46,4-46,11); use=FStar.UInt.fsti(46,4-46,11)
(forall ((@x0 Term))
 (! (= (FStar.UInt.max_int @x0)
(Prims.op_Subtraction (Prims.pow2 @x0)
(BoxInt 1)))
 

:pattern ((FStar.UInt.max_int @x0))
:qid equation_FStar.UInt.max_int))

:named equation_FStar.UInt.max_int))
;;;;;;;;;;;;;;;;Equation for FStar.UInt.lte
;;; Fact-ids: Name FStar.UInt.lte; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(170,4-170,7); use=FStar.UInt.fsti(170,4-170,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.UInt.lte @x0
@x1
@x2)
(Prims.op_LessThanOrEqual @x1
@x2))
 

:pattern ((FStar.UInt.lte @x0
@x1
@x2))
:qid equation_FStar.UInt.lte))

:named equation_FStar.UInt.lte))
;;;;;;;;;;;;;;;;Equation for FStar.UInt.lt
;;; Fact-ids: Name FStar.UInt.lt; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(169,4-169,6); use=FStar.UInt.fsti(169,4-169,6)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.UInt.lt @x0
@x1
@x2)
(Prims.op_LessThan @x1
@x2))
 

:pattern ((FStar.UInt.lt @x0
@x1
@x2))
:qid equation_FStar.UInt.lt))

:named equation_FStar.UInt.lt))
;;;;;;;;;;;;;;;;Equation for FStar.UInt.fits
;;; Fact-ids: Name FStar.UInt.fits; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(49,4-49,8); use=FStar.UInt.fsti(49,4-49,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.UInt.fits @x0
@x1)
(Prims.op_AmpAmp (Prims.op_LessThanOrEqual (FStar.UInt.min_int @x1)
@x0)
(Prims.op_LessThanOrEqual @x0
(FStar.UInt.max_int @x1))))
 

:pattern ((FStar.UInt.fits @x0
@x1))
:qid equation_FStar.UInt.fits))

:named equation_FStar.UInt.fits))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.UInt32.t; Namespace FStar.UInt32
(assert (! 
;; def=FStar.UInt32.fsti(50,8-50,9); use=FStar.UInt32.fsti(50,8-50,9)
(forall ((@u0 Dummy_sort))
 (! (= 101
(Term_constr_id (FStar.UInt32.t @u0)))
 

:pattern ((FStar.UInt32.t @u0))
:qid constructor_distinct_FStar.UInt32.t))

:named constructor_distinct_FStar.UInt32.t))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Less; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,27); use=Pulse.Class.BoundedIntegers.fst(7,19-13,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_7275a7110336f1195ffb2026ecd4a1f5)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_7275a7110336f1195ffb2026ecd4a1f5))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_7275a7110336f1195ffb2026ecd4a1f5))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_7275a7110336f1195ffb2026ecd4a1f5))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Less; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,19-13,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_6e88da7f43cb121e9cadcec043378ab3 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_6e88da7f43cb121e9cadcec043378ab3 @x2)))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_6e88da7f43cb121e9cadcec043378ab3))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_6e88da7f43cb121e9cadcec043378ab3))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Less; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-13,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_6cf634b0269516239f2d812c0194efd0 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_6cf634b0269516239f2d812c0194efd0 @x2
@x3)))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_6cf634b0269516239f2d812c0194efd0))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_6cf634b0269516239f2d812c0194efd0))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Less; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-13,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_21e98d2d10448ac8275ee113995424d9 @x2
@x3
@x4))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_21e98d2d10448ac8275ee113995424d9 @x2
@x3
@x4)))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_21e98d2d10448ac8275ee113995424d9))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_21e98d2d10448ac8275ee113995424d9))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_7275a7110336f1195ffb2026ecd4a1f5
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Less; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,27); use=Pulse.Class.BoundedIntegers.fst(7,19-13,7)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_7275a7110336f1195ffb2026ecd4a1f5)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,27); use=Pulse.Class.BoundedIntegers.fst(7,19-13,7)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.eqtype)
(HasType (ApplyTT @x0
@x1)
(Tm_arrow_6e88da7f43cb121e9cadcec043378ab3 @x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_7275a7110336f1195ffb2026ecd4a1f5.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_7275a7110336f1195ffb2026ecd4a1f5))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_7275a7110336f1195ffb2026ecd4a1f5))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_7275a7110336f1195ffb2026ecd4a1f5))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_6e88da7f43cb121e9cadcec043378ab3
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Less; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,19-13,7)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_6e88da7f43cb121e9cadcec043378ab3 @x1))
(and 
;; def=Pulse.Class.BoundedIntegers.fst(7,6-7,17); use=Pulse.Class.BoundedIntegers.fst(7,19-13,7)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(Pulse.Class.BoundedIntegers.bounded_int @x1))
(HasType (ApplyTT @x0
@x2)
(Tm_arrow_6cf634b0269516239f2d812c0194efd0 @x2
@x1)))
 

:pattern ((ApplyTT @x0
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_6e88da7f43cb121e9cadcec043378ab3.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_6e88da7f43cb121e9cadcec043378ab3 @x1)))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_6e88da7f43cb121e9cadcec043378ab3))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_6e88da7f43cb121e9cadcec043378ab3))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_6cf634b0269516239f2d812c0194efd0
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Less; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-13,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_6cf634b0269516239f2d812c0194efd0 @x1
@x2))
(and 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-13,7)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)
(HasType (ApplyTT @x0
@x3)
(Tm_arrow_21e98d2d10448ac8275ee113995424d9 @x3
@x1
@x2)))
 

:pattern ((ApplyTT @x0
@x3))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_6cf634b0269516239f2d812c0194efd0.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_6cf634b0269516239f2d812c0194efd0 @x1
@x2)))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_6cf634b0269516239f2d812c0194efd0))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_6cf634b0269516239f2d812c0194efd0))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_21e98d2d10448ac8275ee113995424d9
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.op_Less; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-13,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_21e98d2d10448ac8275ee113995424d9 @x1
@x2
@x3))
(and 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(7,19-13,7)
(forall ((@x4 Term))
 (! (implies (HasType @x4
@x3)
(HasType (ApplyTT @x0
@x4)
(Tm_refine_2338f56bb8e624a59dffd87bb6ec6289 @x3
@x2
@x1
@x4)))
 

:pattern ((ApplyTT @x0
@x4))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_21e98d2d10448ac8275ee113995424d9.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_21e98d2d10448ac8275ee113995424d9 @x1
@x2
@x3)))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_21e98d2d10448ac8275ee113995424d9))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_21e98d2d10448ac8275ee113995424d9))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.UInt32.t; Namespace FStar.UInt32
(assert (! 
;; def=FStar.UInt32.fsti(50,8-50,9); use=FStar.UInt32.fsti(50,8-50,9)
(forall ((@x0 Term) (@u1 Fuel) (@u2 Dummy_sort))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.UInt32.t @u2))
(= (FStar.UInt32.t @u2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.UInt32.t @u2)))
:qid FStar.UInt32_pretyping_2ab3c8ba2d08b0172817fc70b5994868))

:named FStar.UInt32_pretyping_2ab3c8ba2d08b0172817fc70b5994868))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.UInt32.uint_to_t; Namespace FStar.UInt32
(assert (! 
;; def=FStar.UInt32.fsti(58,17-58,35); use=FStar.UInt32.fsti(58,17-58,35)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_3d414099f2a2b7ef3e11b1fc75a28674)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_3d414099f2a2b7ef3e11b1fc75a28674))
:qid FStar.UInt32_pre_typing_Tm_arrow_3d414099f2a2b7ef3e11b1fc75a28674))

:named FStar.UInt32_pre_typing_Tm_arrow_3d414099f2a2b7ef3e11b1fc75a28674))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_3d414099f2a2b7ef3e11b1fc75a28674
;;; Fact-ids: Name FStar.UInt32.uint_to_t; Namespace FStar.UInt32
(assert (! 
;; def=FStar.UInt32.fsti(58,17-58,35); use=FStar.UInt32.fsti(58,17-58,35)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_3d414099f2a2b7ef3e11b1fc75a28674)
(and 
;; def=FStar.UInt32.fsti(58,17-58,35); use=FStar.UInt32.fsti(58,17-58,35)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.UInt.uint_t (BoxInt 32)))
(HasType (ApplyTT @x0
@x1)
(Tm_refine_0ea1fba779ad5718e28476faeef94d56 @x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid FStar.UInt32_interpretation_Tm_arrow_3d414099f2a2b7ef3e11b1fc75a28674.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_3d414099f2a2b7ef3e11b1fc75a28674))
:qid FStar.UInt32_interpretation_Tm_arrow_3d414099f2a2b7ef3e11b1fc75a28674))

:named FStar.UInt32_interpretation_Tm_arrow_3d414099f2a2b7ef3e11b1fc75a28674))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name Prims.pow2; Namespace Prims
(assert (! 
;; def=Prims.fst(708,8-708,12); use=Prims.fst(708,8-708,12)
(forall ((@x0 Term))
 (! (= (Prims.pow2 @x0)
(Prims.pow2.fuel_instrumented MaxFuel
@x0))
 

:pattern ((Prims.pow2 @x0))
:qid @fuel_correspondence_Prims.pow2.fuel_instrumented))

:named @fuel_correspondence_Prims.pow2.fuel_instrumented))
(push) ;; push{2

; Starting query at Pulse.Class.BoundedIntegers.fst(100,0-110,1)

(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: 
(assert (! (Valid (ApplyTT __uu__PartialApp
Pulse.Class.BoundedIntegers.op_Less@tok))
:named @kick_partial_app_ea43422ce0ffd4aaf03b49bd157dd6a8))




(declare-fun Tm_refine_cc9b3636b7a4a705bd1e5ec0de2cb70d (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt32.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_cc9b3636b7a4a705bd1e5ec0de2cb70d @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_cc9b3636b7a4a705bd1e5ec0de2cb70d @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_cc9b3636b7a4a705bd1e5ec0de2cb70d))

:named refinement_kinding_Tm_refine_cc9b3636b7a4a705bd1e5ec0de2cb70d))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt32.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_cc9b3636b7a4a705bd1e5ec0de2cb70d @x2
@x3))
(and (HasTypeFuel @u0
@x1
(FStar.UInt32.t Dummy_value))

;; def=Pulse.Class.BoundedIntegers.fst(11,80-11,96); use=Prims.fst(454,7-454,10)
(= (FStar.UInt32.v @x1)
(Prims.op_Addition (FStar.UInt32.v @x2)
(FStar.UInt32.v @x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_cc9b3636b7a4a705bd1e5ec0de2cb70d @x2
@x3)))
:qid refinement_interpretation_Tm_refine_cc9b3636b7a4a705bd1e5ec0de2cb70d))

:named refinement_interpretation_Tm_refine_cc9b3636b7a4a705bd1e5ec0de2cb70d))
;;;;;;;;;;;;;;;;haseq for Tm_refine_cc9b3636b7a4a705bd1e5ec0de2cb70d
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt32.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_cc9b3636b7a4a705bd1e5ec0de2cb70d @x0
@x1)))
(Valid (Prims.hasEq (FStar.UInt32.t Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_cc9b3636b7a4a705bd1e5ec0de2cb70d @x0
@x1))))
:qid haseqTm_refine_cc9b3636b7a4a705bd1e5ec0de2cb70d))

:named haseqTm_refine_cc9b3636b7a4a705bd1e5ec0de2cb70d))


;;;;;;;;;;;;;;;;x: FStar.UInt32.t -> y: FStar.UInt32.t -> Prims.Pure FStar.UInt32.t
(declare-fun Tm_arrow_cd2cc175cb5b757aaaa6e79e852855a7 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_cd2cc175cb5b757aaaa6e79e852855a7
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_cd2cc175cb5b757aaaa6e79e852855a7
Tm_type)
:named kinding_Tm_arrow_cd2cc175cb5b757aaaa6e79e852855a7))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt32.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_cd2cc175cb5b757aaaa6e79e852855a7)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_cd2cc175cb5b757aaaa6e79e852855a7))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_cd2cc175cb5b757aaaa6e79e852855a7))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_cd2cc175cb5b757aaaa6e79e852855a7))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_cd2cc175cb5b757aaaa6e79e852855a7
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt32.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_cd2cc175cb5b757aaaa6e79e852855a7)
(and 
;; def=FStar.UInt32.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and 
;; def=Pulse.Class.BoundedIntegers.fst(101,21-101,27); use=Prims.fst(454,7-454,10)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(BoxInt 0))
(Prims.op_Addition (FStar.UInt32.v @x1)
(FStar.UInt32.v @x2))))


;; def=Pulse.Class.BoundedIntegers.fst(101,31-101,45); use=Prims.fst(454,7-454,10)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(Prims.op_Addition (FStar.UInt32.v @x1)
(FStar.UInt32.v @x2)))
(BoxInt 4294967296)))

(HasType @x1
(FStar.UInt32.t Dummy_value))
(HasType @x2
(FStar.UInt32.t Dummy_value)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Tm_refine_cc9b3636b7a4a705bd1e5ec0de2cb70d @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_cd2cc175cb5b757aaaa6e79e852855a7.1))

(IsTotFun @x0)

;; def=FStar.UInt32.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.UInt32.t Dummy_value))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_cd2cc175cb5b757aaaa6e79e852855a7.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_cd2cc175cb5b757aaaa6e79e852855a7))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_cd2cc175cb5b757aaaa6e79e852855a7))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_cd2cc175cb5b757aaaa6e79e852855a7))


(declare-fun Tm_refine_e1856c488a062ad7ccdf2434b666b0ec (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt32.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_e1856c488a062ad7ccdf2434b666b0ec @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_e1856c488a062ad7ccdf2434b666b0ec @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_e1856c488a062ad7ccdf2434b666b0ec))

:named refinement_kinding_Tm_refine_e1856c488a062ad7ccdf2434b666b0ec))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt32.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_e1856c488a062ad7ccdf2434b666b0ec @x2
@x3))
(and (HasTypeFuel @u0
@x1
(FStar.UInt32.t Dummy_value))

;; def=Pulse.Class.BoundedIntegers.fst(12,89-12,105); use=Prims.fst(454,7-454,10)
(= (FStar.UInt32.v @x1)
(Prims.op_Subtraction (FStar.UInt32.v @x2)
(FStar.UInt32.v @x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_e1856c488a062ad7ccdf2434b666b0ec @x2
@x3)))
:qid refinement_interpretation_Tm_refine_e1856c488a062ad7ccdf2434b666b0ec))

:named refinement_interpretation_Tm_refine_e1856c488a062ad7ccdf2434b666b0ec))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e1856c488a062ad7ccdf2434b666b0ec
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt32.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_e1856c488a062ad7ccdf2434b666b0ec @x0
@x1)))
(Valid (Prims.hasEq (FStar.UInt32.t Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_e1856c488a062ad7ccdf2434b666b0ec @x0
@x1))))
:qid haseqTm_refine_e1856c488a062ad7ccdf2434b666b0ec))

:named haseqTm_refine_e1856c488a062ad7ccdf2434b666b0ec))


;;;;;;;;;;;;;;;;x: FStar.UInt32.t -> y: FStar.UInt32.t -> Prims.Pure FStar.UInt32.t
(declare-fun Tm_arrow_0a98c8c24f23e5bb91eb32133b4d438f () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_0a98c8c24f23e5bb91eb32133b4d438f
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_0a98c8c24f23e5bb91eb32133b4d438f
Tm_type)
:named kinding_Tm_arrow_0a98c8c24f23e5bb91eb32133b4d438f))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt32.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_0a98c8c24f23e5bb91eb32133b4d438f)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_0a98c8c24f23e5bb91eb32133b4d438f))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_0a98c8c24f23e5bb91eb32133b4d438f))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_0a98c8c24f23e5bb91eb32133b4d438f))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_0a98c8c24f23e5bb91eb32133b4d438f
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt32.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_0a98c8c24f23e5bb91eb32133b4d438f)
(and 
;; def=FStar.UInt32.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and 
;; def=Pulse.Class.BoundedIntegers.fst(101,21-101,27); use=Prims.fst(454,7-454,10)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(BoxInt 0))
(Prims.op_Subtraction (FStar.UInt32.v @x1)
(FStar.UInt32.v @x2))))


;; def=Pulse.Class.BoundedIntegers.fst(101,31-101,45); use=Prims.fst(454,7-454,10)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(Prims.op_Subtraction (FStar.UInt32.v @x1)
(FStar.UInt32.v @x2)))
(BoxInt 4294967296)))

(HasType @x1
(FStar.UInt32.t Dummy_value))
(HasType @x2
(FStar.UInt32.t Dummy_value)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Tm_refine_e1856c488a062ad7ccdf2434b666b0ec @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_0a98c8c24f23e5bb91eb32133b4d438f.1))

(IsTotFun @x0)

;; def=FStar.UInt32.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.UInt32.t Dummy_value))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_0a98c8c24f23e5bb91eb32133b4d438f.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_0a98c8c24f23e5bb91eb32133b4d438f))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_0a98c8c24f23e5bb91eb32133b4d438f))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_0a98c8c24f23e5bb91eb32133b4d438f))
(declare-fun Tm_refine_5dfd9970765c73a63d7d40e8c4db182d (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(13,27-13,52); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_5dfd9970765c73a63d7d40e8c4db182d @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_5dfd9970765c73a63d7d40e8c4db182d @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_5dfd9970765c73a63d7d40e8c4db182d))

:named refinement_kinding_Tm_refine_5dfd9970765c73a63d7d40e8c4db182d))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(13,27-13,52); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_5dfd9970765c73a63d7d40e8c4db182d @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.bool)

;; def=Pulse.Class.BoundedIntegers.fst(13,36-13,51); use=Prims.fst(454,7-454,10)
(= @x1
(Prims.op_LessThan (FStar.UInt32.v @x2)
(FStar.UInt32.v @x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_5dfd9970765c73a63d7d40e8c4db182d @x2
@x3)))
:qid refinement_interpretation_Tm_refine_5dfd9970765c73a63d7d40e8c4db182d))

:named refinement_interpretation_Tm_refine_5dfd9970765c73a63d7d40e8c4db182d))
;;;;;;;;;;;;;;;;haseq for Tm_refine_5dfd9970765c73a63d7d40e8c4db182d
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(13,27-13,52); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_5dfd9970765c73a63d7d40e8c4db182d @x0
@x1)))
(Valid (Prims.hasEq Prims.bool)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_5dfd9970765c73a63d7d40e8c4db182d @x0
@x1))))
:qid haseqTm_refine_5dfd9970765c73a63d7d40e8c4db182d))

:named haseqTm_refine_5dfd9970765c73a63d7d40e8c4db182d))
;;;;;;;;;;;;;;;;x: FStar.UInt32.t -> y: FStar.UInt32.t -> b: Prims.bool{b = (FStar.UInt32.v x < FStar.UInt32.v y)}
(declare-fun Tm_arrow_c8dfe6e8a32ac81b0fba0339610aaa9c () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_c8dfe6e8a32ac81b0fba0339610aaa9c
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_c8dfe6e8a32ac81b0fba0339610aaa9c
Tm_type)
:named kinding_Tm_arrow_c8dfe6e8a32ac81b0fba0339610aaa9c))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt32.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_c8dfe6e8a32ac81b0fba0339610aaa9c)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_c8dfe6e8a32ac81b0fba0339610aaa9c))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_c8dfe6e8a32ac81b0fba0339610aaa9c))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_c8dfe6e8a32ac81b0fba0339610aaa9c))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_c8dfe6e8a32ac81b0fba0339610aaa9c
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt32.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_c8dfe6e8a32ac81b0fba0339610aaa9c)
(and 
;; def=FStar.UInt32.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
(FStar.UInt32.t Dummy_value))
(HasType @x2
(FStar.UInt32.t Dummy_value)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Tm_refine_5dfd9970765c73a63d7d40e8c4db182d @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_c8dfe6e8a32ac81b0fba0339610aaa9c.1))

(IsTotFun @x0)

;; def=FStar.UInt32.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.UInt32.t Dummy_value))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_c8dfe6e8a32ac81b0fba0339610aaa9c.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_c8dfe6e8a32ac81b0fba0339610aaa9c))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_c8dfe6e8a32ac81b0fba0339610aaa9c))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_c8dfe6e8a32ac81b0fba0339610aaa9c))
(declare-fun Tm_refine_7a16d75db7a0d6a0342f83cfb654e34e (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,28-14,54); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_7a16d75db7a0d6a0342f83cfb654e34e @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_7a16d75db7a0d6a0342f83cfb654e34e @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_7a16d75db7a0d6a0342f83cfb654e34e))

:named refinement_kinding_Tm_refine_7a16d75db7a0d6a0342f83cfb654e34e))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,28-14,54); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_7a16d75db7a0d6a0342f83cfb654e34e @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.bool)

;; def=Pulse.Class.BoundedIntegers.fst(14,37-14,53); use=Prims.fst(454,7-454,10)
(= @x1
(Prims.op_LessThanOrEqual (FStar.UInt32.v @x2)
(FStar.UInt32.v @x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_7a16d75db7a0d6a0342f83cfb654e34e @x2
@x3)))
:qid refinement_interpretation_Tm_refine_7a16d75db7a0d6a0342f83cfb654e34e))

:named refinement_interpretation_Tm_refine_7a16d75db7a0d6a0342f83cfb654e34e))
;;;;;;;;;;;;;;;;haseq for Tm_refine_7a16d75db7a0d6a0342f83cfb654e34e
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,28-14,54); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_7a16d75db7a0d6a0342f83cfb654e34e @x0
@x1)))
(Valid (Prims.hasEq Prims.bool)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_7a16d75db7a0d6a0342f83cfb654e34e @x0
@x1))))
:qid haseqTm_refine_7a16d75db7a0d6a0342f83cfb654e34e))

:named haseqTm_refine_7a16d75db7a0d6a0342f83cfb654e34e))
;;;;;;;;;;;;;;;;x: FStar.UInt32.t -> y: FStar.UInt32.t -> b: Prims.bool{b = (FStar.UInt32.v x <= FStar.UInt32.v y)}
(declare-fun Tm_arrow_d68379b063bbed7a67ae25dc6b892929 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_d68379b063bbed7a67ae25dc6b892929
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_d68379b063bbed7a67ae25dc6b892929
Tm_type)
:named kinding_Tm_arrow_d68379b063bbed7a67ae25dc6b892929))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt32.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_d68379b063bbed7a67ae25dc6b892929)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_d68379b063bbed7a67ae25dc6b892929))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_d68379b063bbed7a67ae25dc6b892929))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_d68379b063bbed7a67ae25dc6b892929))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_d68379b063bbed7a67ae25dc6b892929
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt32.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_d68379b063bbed7a67ae25dc6b892929)
(and 
;; def=FStar.UInt32.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
(FStar.UInt32.t Dummy_value))
(HasType @x2
(FStar.UInt32.t Dummy_value)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Tm_refine_7a16d75db7a0d6a0342f83cfb654e34e @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_d68379b063bbed7a67ae25dc6b892929.1))

(IsTotFun @x0)

;; def=FStar.UInt32.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.UInt32.t Dummy_value))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_d68379b063bbed7a67ae25dc6b892929.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_d68379b063bbed7a67ae25dc6b892929))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_d68379b063bbed7a67ae25dc6b892929))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_d68379b063bbed7a67ae25dc6b892929))


(declare-fun Tm_refine_c580865785ebd0c41c2fcab948179372 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt32.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_c580865785ebd0c41c2fcab948179372 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_c580865785ebd0c41c2fcab948179372 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_c580865785ebd0c41c2fcab948179372))

:named refinement_kinding_Tm_refine_c580865785ebd0c41c2fcab948179372))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt32.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_c580865785ebd0c41c2fcab948179372 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(FStar.UInt32.t Dummy_value))

;; def=Pulse.Class.BoundedIntegers.fst(15,91-15,107); use=Prims.fst(454,7-454,10)
(= (FStar.UInt32.v @x1)
(Prims.op_Modulus (FStar.UInt32.v @x2)
(FStar.UInt32.v @x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_c580865785ebd0c41c2fcab948179372 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_c580865785ebd0c41c2fcab948179372))

:named refinement_interpretation_Tm_refine_c580865785ebd0c41c2fcab948179372))
;;;;;;;;;;;;;;;;haseq for Tm_refine_c580865785ebd0c41c2fcab948179372
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt32.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_c580865785ebd0c41c2fcab948179372 @x0
@x1)))
(Valid (Prims.hasEq (FStar.UInt32.t Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_c580865785ebd0c41c2fcab948179372 @x0
@x1))))
:qid haseqTm_refine_c580865785ebd0c41c2fcab948179372))

:named haseqTm_refine_c580865785ebd0c41c2fcab948179372))


;;;;;;;;;;;;;;;;x: FStar.UInt32.t -> y: FStar.UInt32.t -> Prims.Pure FStar.UInt32.t
(declare-fun Tm_arrow_ebc9476b674ddacec528aad051715a8a () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_ebc9476b674ddacec528aad051715a8a
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_ebc9476b674ddacec528aad051715a8a
Tm_type)
:named kinding_Tm_arrow_ebc9476b674ddacec528aad051715a8a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt32.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_ebc9476b674ddacec528aad051715a8a)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_ebc9476b674ddacec528aad051715a8a))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_ebc9476b674ddacec528aad051715a8a))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_ebc9476b674ddacec528aad051715a8a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_ebc9476b674ddacec528aad051715a8a
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt32.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_ebc9476b674ddacec528aad051715a8a)
(and 
;; def=FStar.UInt32.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and 
;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Prims.fst(454,7-454,10)
(> (BoxInt_proj_0 (FStar.UInt32.v @x2))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Pulse.Class.BoundedIntegers.fst(101,21-101,27); use=Prims.fst(454,7-454,10)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(BoxInt 0))
(Prims.op_Modulus (FStar.UInt32.v @x1)
(FStar.UInt32.v @x2))))


;; def=Pulse.Class.BoundedIntegers.fst(101,31-101,45); use=Prims.fst(454,7-454,10)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(Prims.op_Modulus (FStar.UInt32.v @x1)
(FStar.UInt32.v @x2)))
(BoxInt 4294967296)))

(HasType @x1
(FStar.UInt32.t Dummy_value))
(HasType @x2
(FStar.UInt32.t Dummy_value)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Tm_refine_c580865785ebd0c41c2fcab948179372 @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_ebc9476b674ddacec528aad051715a8a.1))

(IsTotFun @x0)

;; def=FStar.UInt32.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.UInt32.t Dummy_value))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_ebc9476b674ddacec528aad051715a8a.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_ebc9476b674ddacec528aad051715a8a))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_ebc9476b674ddacec528aad051715a8a))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_ebc9476b674ddacec528aad051715a8a))


(declare-fun Tm_abs_d42937132b33980d22e6ed22825e138d () Term)
;;;;;;;;;;;;;;;;tot_fun_Tm_abs_d42937132b33980d22e6ed22825e138d
;;; Fact-ids: 
(assert (! (and (IsTotFun Tm_abs_d42937132b33980d22e6ed22825e138d)

;; def=Pulse.Class.BoundedIntegers.fst(108,37-108,43); use=Pulse.Class.BoundedIntegers.fst(108,37-108,43)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Tm_abs_d42937132b33980d22e6ed22825e138d
@x0))
 

:pattern ((ApplyTT Tm_abs_d42937132b33980d22e6ed22825e138d
@x0))
:qid tot_fun_Tm_abs_d42937132b33980d22e6ed22825e138d))
)
:named tot_fun_Tm_abs_d42937132b33980d22e6ed22825e138d))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_d42937132b33980d22e6ed22825e138d
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(108,37-108,43); use=Pulse.Class.BoundedIntegers.fst(108,37-108,43)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_d42937132b33980d22e6ed22825e138d
@x0)
@x1)
(FStar.UInt32.rem @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_d42937132b33980d22e6ed22825e138d
@x0)
@x1))
:qid interpretation_Tm_abs_d42937132b33980d22e6ed22825e138d))

:named interpretation_Tm_abs_d42937132b33980d22e6ed22825e138d))


(declare-fun Tm_abs_21dc0ff3e1f2b842fd5e44a0b0989cce () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_21dc0ff3e1f2b842fd5e44a0b0989cce
;;; Fact-ids: 
(assert (! (HasType Tm_abs_21dc0ff3e1f2b842fd5e44a0b0989cce
Tm_arrow_d68379b063bbed7a67ae25dc6b892929)
:named typing_Tm_abs_21dc0ff3e1f2b842fd5e44a0b0989cce))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_21dc0ff3e1f2b842fd5e44a0b0989cce
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(107,38-107,45); use=Pulse.Class.BoundedIntegers.fst(107,38-107,45)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_21dc0ff3e1f2b842fd5e44a0b0989cce
@x0)
@x1)
(FStar.UInt32.lte @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_21dc0ff3e1f2b842fd5e44a0b0989cce
@x0)
@x1))
:qid interpretation_Tm_abs_21dc0ff3e1f2b842fd5e44a0b0989cce))

:named interpretation_Tm_abs_21dc0ff3e1f2b842fd5e44a0b0989cce))


(declare-fun Tm_abs_6fb9339249bc93d04cc2b2d2f6d946ce () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_6fb9339249bc93d04cc2b2d2f6d946ce
;;; Fact-ids: 
(assert (! (HasType Tm_abs_6fb9339249bc93d04cc2b2d2f6d946ce
Tm_arrow_c8dfe6e8a32ac81b0fba0339610aaa9c)
:named typing_Tm_abs_6fb9339249bc93d04cc2b2d2f6d946ce))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_6fb9339249bc93d04cc2b2d2f6d946ce
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(106,37-106,43); use=Pulse.Class.BoundedIntegers.fst(106,37-106,43)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_6fb9339249bc93d04cc2b2d2f6d946ce
@x0)
@x1)
(FStar.UInt32.lt @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_6fb9339249bc93d04cc2b2d2f6d946ce
@x0)
@x1))
:qid interpretation_Tm_abs_6fb9339249bc93d04cc2b2d2f6d946ce))

:named interpretation_Tm_abs_6fb9339249bc93d04cc2b2d2f6d946ce))
(declare-fun Tm_abs_18fb7ca5feda527746052adcf35f4c83 () Term)
;;;;;;;;;;;;;;;;tot_fun_Tm_abs_18fb7ca5feda527746052adcf35f4c83
;;; Fact-ids: 
(assert (! (and (IsTotFun Tm_abs_18fb7ca5feda527746052adcf35f4c83)

;; def=Pulse.Class.BoundedIntegers.fst(105,33-105,53); use=Pulse.Class.BoundedIntegers.fst(105,33-105,53)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Tm_abs_18fb7ca5feda527746052adcf35f4c83
@x0))
 

:pattern ((ApplyTT Tm_abs_18fb7ca5feda527746052adcf35f4c83
@x0))
:qid tot_fun_Tm_abs_18fb7ca5feda527746052adcf35f4c83))
)
:named tot_fun_Tm_abs_18fb7ca5feda527746052adcf35f4c83))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_18fb7ca5feda527746052adcf35f4c83
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(105,33-105,53); use=Pulse.Class.BoundedIntegers.fst(105,33-105,53)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_18fb7ca5feda527746052adcf35f4c83
@x0)
@x1)
(FStar.UInt32.sub @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_18fb7ca5feda527746052adcf35f4c83
@x0)
@x1))
:qid interpretation_Tm_abs_18fb7ca5feda527746052adcf35f4c83))

:named interpretation_Tm_abs_18fb7ca5feda527746052adcf35f4c83))
(declare-fun Tm_abs_5cc87307b197f7e721a12f5164164fea () Term)
;;;;;;;;;;;;;;;;tot_fun_Tm_abs_5cc87307b197f7e721a12f5164164fea
;;; Fact-ids: 
(assert (! (and (IsTotFun Tm_abs_5cc87307b197f7e721a12f5164164fea)

;; def=Pulse.Class.BoundedIntegers.fst(104,24-104,44); use=Pulse.Class.BoundedIntegers.fst(104,24-104,44)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Tm_abs_5cc87307b197f7e721a12f5164164fea
@x0))
 

:pattern ((ApplyTT Tm_abs_5cc87307b197f7e721a12f5164164fea
@x0))
:qid tot_fun_Tm_abs_5cc87307b197f7e721a12f5164164fea))
)
:named tot_fun_Tm_abs_5cc87307b197f7e721a12f5164164fea))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_5cc87307b197f7e721a12f5164164fea
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(104,24-104,44); use=Pulse.Class.BoundedIntegers.fst(104,24-104,44)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_5cc87307b197f7e721a12f5164164fea
@x0)
@x1)
(FStar.UInt32.add @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_5cc87307b197f7e721a12f5164164fea
@x0)
@x1))
:qid interpretation_Tm_abs_5cc87307b197f7e721a12f5164164fea))

:named interpretation_Tm_abs_5cc87307b197f7e721a12f5164164fea))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: 
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.UInt32.uint_to_t@tok))
:named @kick_partial_app_2e59d1382981ceb34fb76eaf9c6cce21))

; Encoding query formula : (forall (x: Prims.int). 0 <= x /\ x < 4294967296 ==> FStar.UInt.size x 32) /\
; (forall (any_result: (x: FStar.UInt.uint_t 32 -> Prims.Pure FStar.UInt32.t)).
;     FStar.UInt32.uint_to_t == any_result ==>
;     (forall (x: FStar.UInt32.t) (y: FStar.UInt32.t).
;         (*  - Could not prove post-condition
; *)
;         forall (p: Prims.pure_post FStar.UInt32.t).
;           0 <= FStar.UInt32.v x + FStar.UInt32.v y /\
;           FStar.UInt32.v x + FStar.UInt32.v y < 4294967296 /\
;           (forall (pure_result: FStar.UInt32.t).
;               FStar.UInt32.v pure_result == FStar.UInt32.v x + FStar.UInt32.v y ==> p pure_result) ==>
;           FStar.UInt.size (FStar.UInt32.v x + FStar.UInt32.v y) 32 /\
;           (forall (pure_result: FStar.UInt32.t).
;               FStar.UInt32.v x + FStar.UInt32.v y = FStar.UInt32.v pure_result ==>
;               pure_result == FStar.UInt32.add x y ==>
;               (forall (return_val: FStar.UInt32.t). return_val == pure_result ==> p return_val))) /\
;     (forall (any_result: (x: FStar.UInt32.t -> y: FStar.UInt32.t -> Prims.Pure FStar.UInt32.t)).
;         (fun x y -> FStar.UInt32.add x y) == any_result ==>
;         (forall (x: FStar.UInt32.t) (y: FStar.UInt32.t).
;             (*  - Could not prove post-condition
; *)
;             forall (p: Prims.pure_post FStar.UInt32.t).
;               0 <= FStar.UInt32.v x - FStar.UInt32.v y /\
;               FStar.UInt32.v x - FStar.UInt32.v y < 4294967296 /\
;               (forall (pure_result: FStar.UInt32.t).
;                   FStar.UInt32.v pure_result == FStar.UInt32.v x - FStar.UInt32.v y ==>
;                   p pure_result) ==>
;               FStar.UInt.size (FStar.UInt32.v x - FStar.UInt32.v y) 32 /\
;               (forall (pure_result: FStar.UInt32.t).
;                   FStar.UInt32.v x - FStar.UInt32.v y = FStar.UInt32.v pure_result ==>
;                   pure_result == FStar.UInt32.sub x y ==>
;                   (forall (return_val: FStar.UInt32.t). return_val == pure_result ==> p return_val))
;         ) /\
;         (forall (any_result: (x: FStar.UInt32.t -> y: FStar.UInt32.t -> Prims.Pure FStar.UInt32.t)).
;             (fun x y -> FStar.UInt32.sub x y) == any_result ==>
;             (forall (x: FStar.UInt32.t) (y: FStar.UInt32.t).
;                 (*  - Could not prove post-condition
; *)
;                 FStar.UInt32.lt x y = (FStar.UInt32.v x < FStar.UInt32.v y)) /\
;             (forall (any_result:
;                 (x: FStar.UInt32.t -> y: FStar.UInt32.t
;                     -> b: Prims.bool{b = (FStar.UInt32.v x < FStar.UInt32.v y)})).
;                 (fun x y -> FStar.UInt32.lt x y) == any_result ==>
;                 (forall (x: FStar.UInt32.t) (y: FStar.UInt32.t).
;                     (*  - Could not prove post-condition
; *)
;                     FStar.UInt32.lte x y = (FStar.UInt32.v x <= FStar.UInt32.v y)) /\
;                 (forall (any_result:
;                     (x: FStar.UInt32.t -> y: FStar.UInt32.t
;                         -> b: Prims.bool{b = (FStar.UInt32.v x <= FStar.UInt32.v y)})).
;                     (fun x y -> FStar.UInt32.lte x y) == any_result ==>
;                     (forall (x: FStar.UInt32.t) (y: FStar.UInt32.t).
;                         (*  - Could not prove post-condition
; *)
;                         forall (p: Prims.pure_post FStar.UInt32.t).
;                           FStar.UInt32.v y > 0 /\
;                           (0 <= FStar.UInt32.v x % FStar.UInt32.v y) /\
;                           (FStar.UInt32.v x % FStar.UInt32.v y < 4294967296) /\
;                           (forall (pure_result: FStar.UInt32.t).
;                               FStar.UInt32.v pure_result == FStar.UInt32.v x % FStar.UInt32.v y ==>
;                               p pure_result) ==>
;                           FStar.UInt32.v y <> 0 /\
;                           (forall (any_result: FStar.UInt32.t).
;                               y == any_result ==>
;                               (forall (pure_result: FStar.UInt32.t).
;                                   FStar.UInt.mod (FStar.UInt32.v x) (FStar.UInt32.v y) =
;                                   FStar.UInt32.v pure_result ==>
;                                   pure_result == FStar.UInt32.rem x y ==>
;                                   (forall (return_val: FStar.UInt32.t).
;                                       return_val == pure_result ==> p return_val)))) /\
;                     (forall (any_result:
;                         (x: FStar.UInt32.t -> y: FStar.UInt32.t -> Prims.Pure FStar.UInt32.t)).
;                         (fun x y -> FStar.UInt32.rem x y) == any_result ==>
;                         (forall (x: FStar.UInt32.t). {:pattern FStar.UInt32.v x}
;                             0 <= FStar.UInt32.v x /\ FStar.UInt32.v x < 4294967296)))))))


; Context: While encoding a query
; While checking for top-level effects
; While typechecking the top-level declaration `let bounded_int_u32`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(103,8-103,30)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
Prims.int)

;; def=Pulse.Class.BoundedIntegers.fst(101,21-101,27); use=Pulse.Class.BoundedIntegers.fst(103,8-103,30)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(BoxInt 0))
@x0))


;; def=Pulse.Class.BoundedIntegers.fst(101,31-101,45); use=Pulse.Class.BoundedIntegers.fst(103,8-103,30)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
@x0)
(BoxInt 4294967296)))
)

;; def=FStar.UInt.fsti(54,28-54,36); use=Pulse.Class.BoundedIntegers.fst(103,8-103,30)
(or label_1

;; def=FStar.UInt.fsti(54,28-54,36); use=Pulse.Class.BoundedIntegers.fst(103,8-103,30)
(Valid 
;; def=FStar.UInt.fsti(54,28-54,36); use=Pulse.Class.BoundedIntegers.fst(103,8-103,30)
(FStar.UInt.size @x0
(BoxInt 32))
)
)
)
 
;;no pats
:qid @query))


;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_arrow_3d414099f2a2b7ef3e11b1fc75a28674)

;; def=Pulse.Class.BoundedIntegers.fst(10,4-103,30); use=Pulse.Class.BoundedIntegers.fst(10,4-103,30)
(= FStar.UInt32.uint_to_t@tok
@x0)
)

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and (forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
(FStar.UInt32.t Dummy_value))
(HasType @x2
(FStar.UInt32.t Dummy_value)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post (FStar.UInt32.t Dummy_value)))

;; def=Pulse.Class.BoundedIntegers.fst(101,21-101,27); use=Pulse.Class.BoundedIntegers.fst(104,24-104,44)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(BoxInt 0))
(Prims.op_Addition (FStar.UInt32.v @x1)
(FStar.UInt32.v @x2))))


;; def=Pulse.Class.BoundedIntegers.fst(101,31-101,45); use=Pulse.Class.BoundedIntegers.fst(104,24-104,44)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(Prims.op_Addition (FStar.UInt32.v @x1)
(FStar.UInt32.v @x2)))
(BoxInt 4294967296)))


;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(104,24-104,44)
(forall ((@x4 Term))
 (! (implies (and (or label_2
(HasType @x4
(FStar.UInt32.t Dummy_value)))

;; def=Pulse.Class.BoundedIntegers.fst(11,80-11,96); use=Pulse.Class.BoundedIntegers.fst(104,24-104,44)
(or label_3

;; def=Pulse.Class.BoundedIntegers.fst(11,80-11,96); use=Pulse.Class.BoundedIntegers.fst(104,24-104,44)
(= (FStar.UInt32.v @x4)
(Prims.op_Addition (FStar.UInt32.v @x1)
(FStar.UInt32.v @x2)))
)
)

;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(104,24-104,44)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(104,24-104,44)
(ApplyTT @x3
@x4)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(104,24-104,44)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(104,24-104,44)
(ApplyTT @x3
@x4)
)
)
:qid @query.4))
)

;; def=Prims.fst(441,29-441,97); use=Pulse.Class.BoundedIntegers.fst(104,24-104,44)
(and 
;; def=FStar.UInt32.fsti(89,12-89,32); use=Pulse.Class.BoundedIntegers.fst(104,37-104,40)
(or label_4

;; def=FStar.UInt32.fsti(89,12-89,32); use=Pulse.Class.BoundedIntegers.fst(104,37-104,40)
(Valid 
;; def=FStar.UInt32.fsti(89,12-89,32); use=Pulse.Class.BoundedIntegers.fst(104,37-104,40)
(FStar.UInt.size (Prims.op_Addition (FStar.UInt32.v @x1)
(FStar.UInt32.v @x2))
(BoxInt 32))
)
)


;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(104,24-104,44)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(FStar.UInt32.t Dummy_value))

;; def=FStar.UInt32.fsti(90,21-90,36); use=Pulse.Class.BoundedIntegers.fst(104,37-104,40)
(= (Prims.op_Addition (FStar.UInt32.v @x1)
(FStar.UInt32.v @x2))
(FStar.UInt32.v @x4))


;; def=Pulse.Class.BoundedIntegers.fst(104,24-104,44); use=Pulse.Class.BoundedIntegers.fst(104,24-104,44)
(= @x4
(FStar.UInt32.add @x1
@x2))
)

;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(FStar.UInt32.t Dummy_value))

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x5
@x4)
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x3
@x5)
)
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
Tm_arrow_cd2cc175cb5b757aaaa6e79e852855a7)

;; def=Pulse.Class.BoundedIntegers.fst(11,6-104,44); use=Pulse.Class.BoundedIntegers.fst(11,6-104,44)
(= Tm_abs_5cc87307b197f7e721a12f5164164fea
@x1)
)

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and (forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
(FStar.UInt32.t Dummy_value))
(HasType @x3
(FStar.UInt32.t Dummy_value)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post (FStar.UInt32.t Dummy_value)))

;; def=Pulse.Class.BoundedIntegers.fst(101,21-101,27); use=Pulse.Class.BoundedIntegers.fst(105,33-105,53)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(BoxInt 0))
(Prims.op_Subtraction (FStar.UInt32.v @x2)
(FStar.UInt32.v @x3))))


;; def=Pulse.Class.BoundedIntegers.fst(101,31-101,45); use=Pulse.Class.BoundedIntegers.fst(105,33-105,53)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(Prims.op_Subtraction (FStar.UInt32.v @x2)
(FStar.UInt32.v @x3)))
(BoxInt 4294967296)))


;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(105,33-105,53)
(forall ((@x5 Term))
 (! (implies (and (or label_5
(HasType @x5
(FStar.UInt32.t Dummy_value)))

;; def=Pulse.Class.BoundedIntegers.fst(12,89-12,105); use=Pulse.Class.BoundedIntegers.fst(105,33-105,53)
(or label_6

;; def=Pulse.Class.BoundedIntegers.fst(12,89-12,105); use=Pulse.Class.BoundedIntegers.fst(105,33-105,53)
(= (FStar.UInt32.v @x5)
(Prims.op_Subtraction (FStar.UInt32.v @x2)
(FStar.UInt32.v @x3)))
)
)

;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(105,33-105,53)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(105,33-105,53)
(ApplyTT @x4
@x5)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(105,33-105,53)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(105,33-105,53)
(ApplyTT @x4
@x5)
)
)
:qid @query.10))
)

;; def=Prims.fst(441,29-441,97); use=Pulse.Class.BoundedIntegers.fst(105,33-105,53)
(and 
;; def=FStar.UInt32.fsti(117,12-117,32); use=Pulse.Class.BoundedIntegers.fst(105,46-105,49)
(or label_7

;; def=FStar.UInt32.fsti(117,12-117,32); use=Pulse.Class.BoundedIntegers.fst(105,46-105,49)
(Valid 
;; def=FStar.UInt32.fsti(117,12-117,32); use=Pulse.Class.BoundedIntegers.fst(105,46-105,49)
(FStar.UInt.size (Prims.op_Subtraction (FStar.UInt32.v @x2)
(FStar.UInt32.v @x3))
(BoxInt 32))
)
)


;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(105,33-105,53)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(FStar.UInt32.t Dummy_value))

;; def=FStar.UInt32.fsti(118,21-118,36); use=Pulse.Class.BoundedIntegers.fst(105,46-105,49)
(= (Prims.op_Subtraction (FStar.UInt32.v @x2)
(FStar.UInt32.v @x3))
(FStar.UInt32.v @x5))


;; def=Pulse.Class.BoundedIntegers.fst(105,33-105,53); use=Pulse.Class.BoundedIntegers.fst(105,33-105,53)
(= @x5
(FStar.UInt32.sub @x2
@x3))
)

;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(FStar.UInt32.t Dummy_value))

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x6
@x5)
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x4
@x6)
)
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
Tm_arrow_0a98c8c24f23e5bb91eb32133b4d438f)

;; def=Pulse.Class.BoundedIntegers.fst(12,4-105,53); use=Pulse.Class.BoundedIntegers.fst(12,4-105,53)
(= Tm_abs_18fb7ca5feda527746052adcf35f4c83
@x2)
)

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and (forall ((@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x3
(FStar.UInt32.t Dummy_value))
(HasType @x4
(FStar.UInt32.t Dummy_value)))

;; def=Pulse.Class.BoundedIntegers.fst(13,36-13,51); use=Pulse.Class.BoundedIntegers.fst(106,37-106,43)
(or label_8

;; def=Pulse.Class.BoundedIntegers.fst(13,36-13,51); use=Pulse.Class.BoundedIntegers.fst(106,37-106,43)
(= (FStar.UInt32.lt @x3
@x4)
(Prims.op_LessThan (FStar.UInt32.v @x3)
(FStar.UInt32.v @x4)))
)
)
 
;;no pats
:qid @query.14))

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Tm_arrow_c8dfe6e8a32ac81b0fba0339610aaa9c)

;; def=Pulse.Class.BoundedIntegers.fst(13,6-106,43); use=Pulse.Class.BoundedIntegers.fst(13,6-106,43)
(= Tm_abs_6fb9339249bc93d04cc2b2d2f6d946ce
@x3)
)

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and (forall ((@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x4
(FStar.UInt32.t Dummy_value))
(HasType @x5
(FStar.UInt32.t Dummy_value)))

;; def=Pulse.Class.BoundedIntegers.fst(14,37-14,53); use=Pulse.Class.BoundedIntegers.fst(107,38-107,45)
(or label_9

;; def=Pulse.Class.BoundedIntegers.fst(14,37-14,53); use=Pulse.Class.BoundedIntegers.fst(107,38-107,45)
(= (FStar.UInt32.lte @x4
@x5)
(Prims.op_LessThanOrEqual (FStar.UInt32.v @x4)
(FStar.UInt32.v @x5)))
)
)
 
;;no pats
:qid @query.16))

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Tm_arrow_d68379b063bbed7a67ae25dc6b892929)

;; def=Pulse.Class.BoundedIntegers.fst(14,6-107,45); use=Pulse.Class.BoundedIntegers.fst(14,6-107,45)
(= Tm_abs_21dc0ff3e1f2b842fd5e44a0b0989cce
@x4)
)

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and (forall ((@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x5
(FStar.UInt32.t Dummy_value))
(HasType @x6
(FStar.UInt32.t Dummy_value)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(Prims.pure_post (FStar.UInt32.t Dummy_value)))

;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Pulse.Class.BoundedIntegers.fst(108,37-108,43)
(> (BoxInt_proj_0 (FStar.UInt32.v @x6))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Pulse.Class.BoundedIntegers.fst(101,21-101,27); use=Pulse.Class.BoundedIntegers.fst(108,37-108,43)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(BoxInt 0))
(Prims.op_Modulus (FStar.UInt32.v @x5)
(FStar.UInt32.v @x6))))


;; def=Pulse.Class.BoundedIntegers.fst(101,31-101,45); use=Pulse.Class.BoundedIntegers.fst(108,37-108,43)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(Prims.op_Modulus (FStar.UInt32.v @x5)
(FStar.UInt32.v @x6)))
(BoxInt 4294967296)))


;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(108,37-108,43)
(forall ((@x8 Term))
 (! (implies (and (or label_10
(HasType @x8
(FStar.UInt32.t Dummy_value)))

;; def=Pulse.Class.BoundedIntegers.fst(15,91-15,107); use=Pulse.Class.BoundedIntegers.fst(108,37-108,43)
(or label_11

;; def=Pulse.Class.BoundedIntegers.fst(15,91-15,107); use=Pulse.Class.BoundedIntegers.fst(108,37-108,43)
(= (FStar.UInt32.v @x8)
(Prims.op_Modulus (FStar.UInt32.v @x5)
(FStar.UInt32.v @x6)))
)
)

;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(108,37-108,43)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(108,37-108,43)
(ApplyTT @x7
@x8)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(108,37-108,43)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(108,37-108,43)
(ApplyTT @x7
@x8)
)
)
:qid @query.20))
)

;; def=Prims.fst(459,77-459,89); use=Pulse.Class.BoundedIntegers.fst(108,37-108,43)
(and 
;; def=FStar.UInt32.fsti(177,19-177,27); use=Pulse.Class.BoundedIntegers.fst(108,42-108,43)
(or label_12

;; def=FStar.UInt32.fsti(177,19-177,27); use=Pulse.Class.BoundedIntegers.fst(108,42-108,43)
(not (= (FStar.UInt32.v @x6)
(BoxInt 0)))
)


;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(108,37-108,43)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(FStar.UInt32.t Dummy_value))

;; def=FStar.UInt32.fsti(177,15-177,16); use=Pulse.Class.BoundedIntegers.fst(108,37-108,43)
(= @x6
@x8)
)

;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(108,39-108,41)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(FStar.UInt32.t Dummy_value))

;; def=FStar.UInt32.fsti(179,21-179,53); use=Pulse.Class.BoundedIntegers.fst(108,39-108,41)
(= (FStar.UInt.mod (BoxInt 32)
(FStar.UInt32.v @x5)
(FStar.UInt32.v @x6))
(FStar.UInt32.v @x9))


;; def=Pulse.Class.BoundedIntegers.fst(108,37-108,43); use=Pulse.Class.BoundedIntegers.fst(108,37-108,43)
(= @x9
(FStar.UInt32.rem @x5
@x6))
)

;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(FStar.UInt32.t Dummy_value))

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x10
@x9)
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x7
@x10)
)
)
 
;;no pats
:qid @query.23))
)
 
;;no pats
:qid @query.22))
)
 
;;no pats
:qid @query.21))
)
)
 
;;no pats
:qid @query.19))
)
 
;;no pats
:qid @query.18))

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Tm_arrow_ebc9476b674ddacec528aad051715a8a)

;; def=Pulse.Class.BoundedIntegers.fst(15,6-108,43); use=Pulse.Class.BoundedIntegers.fst(15,6-108,43)
(= Tm_abs_d42937132b33980d22e6ed22825e138d
@x5)
)

;; def=Pulse.Class.BoundedIntegers.fst(17,23-19,5); use=Pulse.Class.BoundedIntegers.fst(109,17-109,19)
(forall ((@x6 Term))
 (! (implies (HasType @x6
(FStar.UInt32.t Dummy_value))

;; def=Pulse.Class.BoundedIntegers.fst(101,21-101,45); use=Pulse.Class.BoundedIntegers.fst(109,17-109,19)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(101,21-101,27); use=Pulse.Class.BoundedIntegers.fst(109,17-109,19)
(or label_13

;; def=Pulse.Class.BoundedIntegers.fst(101,21-101,27); use=Pulse.Class.BoundedIntegers.fst(109,17-109,19)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(BoxInt 0))
(FStar.UInt32.v @x6)))
)


;; def=Pulse.Class.BoundedIntegers.fst(101,31-101,45); use=Pulse.Class.BoundedIntegers.fst(109,17-109,19)
(or label_14

;; def=Pulse.Class.BoundedIntegers.fst(101,31-101,45); use=Pulse.Class.BoundedIntegers.fst(109,17-109,19)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(FStar.UInt32.v @x6))
(BoxInt 4294967296)))
)
)
)
 

:pattern ((FStar.UInt32.v @x6))
:qid @query.25))
)
 
;;no pats
:qid @query.24))
)
)
 
;;no pats
:qid @query.17))
)
)
 
;;no pats
:qid @query.15))
)
)
 
;;no pats
:qid @query.13))
)
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.1))
)
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Pulse.Class.BoundedIntegers.bounded_int_u32, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @fuel_irrelevance_Prims.pow2.fuel_instrumented, @query, FStar.UInt32_pretyping_2ab3c8ba2d08b0172817fc70b5994868, Prims_pretyping_ae567c2fb75be05905677af440075565, Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_4e06c0d9f21510c76cc9a4373093e200, b2t_def, bool_inversion, bool_typing, equation_FStar.Pervasives.id, equation_FStar.UInt.fits, equation_FStar.UInt.lt, equation_FStar.UInt.lte, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.mod, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt32.lt, equation_FStar.UInt32.lte, equation_Prims.nat, equation_Pulse.Class.BoundedIntegers.bounded_int_int, equation_Pulse.Class.BoundedIntegers.op_Less, equation_Pulse.Class.BoundedIntegers.op_Less_Equals, function_token_typing_Prims.__cache_version_number__, int_inversion, int_typing, interpretation_Tm_abs_9526f9b86538a09423bf79a8b2d28a7b, interpretation_Tm_abs_d68e5199f008f106619036deee889e9a, interpretation_Tm_abs_e6649eba6390f90be22ea1a9dce6d496, interpretation_Tm_abs_f4d32f3d705308e5f1a270cda9a29727, interpretation_Tm_abs_f8b7175ad4f28c0bc3c11371abe1d18d, lemma_FStar.UInt.pow2_values, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_Division, primitive_Prims.op_LessThan, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_op_Less, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_op_Less_Equals, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_v, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_7d5d464f1bd9167923b3673db6d066b9, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, token_correspondence_FStar.Pervasives.id, token_correspondence_Pulse.Class.BoundedIntegers.op_Less, token_correspondence_Pulse.Class.BoundedIntegers.op_Less_Equals, typing_FStar.UInt.fits, typing_FStar.UInt32.v, typing_Tm_abs_9526f9b86538a09423bf79a8b2d28a7b

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let bounded_int_u32


; <Start encoding let bounded_int_u32>

(declare-fun Pulse.Class.BoundedIntegers.bounded_int_u32 (Dummy_sort) Term)


(declare-fun Tm_abs_a8cddb33fae8264dd0fec582745dd7d6 () Term)
;;;;;;;;;;;;;;;;x: FStar.UInt32.t -> Prims.GTot Prims.int
(declare-fun Tm_ghost_arrow_755c79c2bc580d8b4fb5156ea583813e () Term)
(declare-fun Tm_abs_640ea0d2a5785c2bf69170bf394ad9c4 () Term)
(declare-fun Tm_abs_5cc87307b197f7e721a12f5164164fea () Term)
(declare-fun Tm_abs_18fb7ca5feda527746052adcf35f4c83 () Term)
(declare-fun Tm_refine_5dfd9970765c73a63d7d40e8c4db182d (Term Term) Term)
;;;;;;;;;;;;;;;;x: FStar.UInt32.t -> y: FStar.UInt32.t -> b: Prims.bool{b = (FStar.UInt32.v x < FStar.UInt32.v y)}
(declare-fun Tm_arrow_c8dfe6e8a32ac81b0fba0339610aaa9c () Term)
(declare-fun Tm_abs_6fb9339249bc93d04cc2b2d2f6d946ce () Term)
(declare-fun Tm_refine_7a16d75db7a0d6a0342f83cfb654e34e (Term Term) Term)
;;;;;;;;;;;;;;;;x: FStar.UInt32.t -> y: FStar.UInt32.t -> b: Prims.bool{b = (FStar.UInt32.v x <= FStar.UInt32.v y)}
(declare-fun Tm_arrow_d68379b063bbed7a67ae25dc6b892929 () Term)
(declare-fun Tm_abs_21dc0ff3e1f2b842fd5e44a0b0989cce () Term)
(declare-fun Tm_abs_d42937132b33980d22e6ed22825e138d () Term)

; </end encoding let bounded_int_u32>

;;;;;;;;;;;;;;;;typing_Tm_abs_a8cddb33fae8264dd0fec582745dd7d6
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u32; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_abs_a8cddb33fae8264dd0fec582745dd7d6
Tm_arrow_3a9c22ddc54716caa0276c05e792d97e)
:named typing_Tm_abs_a8cddb33fae8264dd0fec582745dd7d6))
;;;;;;;;;;;;;;;;typing_Tm_abs_6fb9339249bc93d04cc2b2d2f6d946ce
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u32; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_abs_6fb9339249bc93d04cc2b2d2f6d946ce
Tm_arrow_c8dfe6e8a32ac81b0fba0339610aaa9c)
:named typing_Tm_abs_6fb9339249bc93d04cc2b2d2f6d946ce))
;;;;;;;;;;;;;;;;typing_Tm_abs_640ea0d2a5785c2bf69170bf394ad9c4
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u32; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_abs_640ea0d2a5785c2bf69170bf394ad9c4
Tm_ghost_arrow_755c79c2bc580d8b4fb5156ea583813e)
:named typing_Tm_abs_640ea0d2a5785c2bf69170bf394ad9c4))
;;;;;;;;;;;;;;;;typing_Tm_abs_21dc0ff3e1f2b842fd5e44a0b0989cce
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u32; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_abs_21dc0ff3e1f2b842fd5e44a0b0989cce
Tm_arrow_d68379b063bbed7a67ae25dc6b892929)
:named typing_Tm_abs_21dc0ff3e1f2b842fd5e44a0b0989cce))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u32; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(100,9-100,24); use=Pulse.Class.BoundedIntegers.fst(100,9-100,24)
(forall ((@u0 Dummy_sort))
 (! (HasType (Pulse.Class.BoundedIntegers.bounded_int_u32 @u0)
(Pulse.Class.BoundedIntegers.bounded_int (FStar.UInt32.t Dummy_value)))
 

:pattern ((Pulse.Class.BoundedIntegers.bounded_int_u32 @u0))
:qid typing_Pulse.Class.BoundedIntegers.bounded_int_u32))

:named typing_Pulse.Class.BoundedIntegers.bounded_int_u32))
;;;;;;;;;;;;;;;;tot_fun_Tm_abs_d42937132b33980d22e6ed22825e138d
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u32; Namespace Pulse.Class.BoundedIntegers
(assert (! (and (IsTotFun Tm_abs_d42937132b33980d22e6ed22825e138d)

;; def=Pulse.Class.BoundedIntegers.fst(108,37-108,43); use=Pulse.Class.BoundedIntegers.fst(108,37-108,43)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Tm_abs_d42937132b33980d22e6ed22825e138d
@x0))
 

:pattern ((ApplyTT Tm_abs_d42937132b33980d22e6ed22825e138d
@x0))
:qid tot_fun_Tm_abs_d42937132b33980d22e6ed22825e138d))
)
:named tot_fun_Tm_abs_d42937132b33980d22e6ed22825e138d))
;;;;;;;;;;;;;;;;tot_fun_Tm_abs_5cc87307b197f7e721a12f5164164fea
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u32; Namespace Pulse.Class.BoundedIntegers
(assert (! (and (IsTotFun Tm_abs_5cc87307b197f7e721a12f5164164fea)

;; def=Pulse.Class.BoundedIntegers.fst(104,24-104,44); use=Pulse.Class.BoundedIntegers.fst(104,24-104,44)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Tm_abs_5cc87307b197f7e721a12f5164164fea
@x0))
 

:pattern ((ApplyTT Tm_abs_5cc87307b197f7e721a12f5164164fea
@x0))
:qid tot_fun_Tm_abs_5cc87307b197f7e721a12f5164164fea))
)
:named tot_fun_Tm_abs_5cc87307b197f7e721a12f5164164fea))
;;;;;;;;;;;;;;;;tot_fun_Tm_abs_18fb7ca5feda527746052adcf35f4c83
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u32; Namespace Pulse.Class.BoundedIntegers
(assert (! (and (IsTotFun Tm_abs_18fb7ca5feda527746052adcf35f4c83)

;; def=Pulse.Class.BoundedIntegers.fst(105,33-105,53); use=Pulse.Class.BoundedIntegers.fst(105,33-105,53)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Tm_abs_18fb7ca5feda527746052adcf35f4c83
@x0))
 

:pattern ((ApplyTT Tm_abs_18fb7ca5feda527746052adcf35f4c83
@x0))
:qid tot_fun_Tm_abs_18fb7ca5feda527746052adcf35f4c83))
)
:named tot_fun_Tm_abs_18fb7ca5feda527746052adcf35f4c83))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u32; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,28-14,54); use=Pulse.Class.BoundedIntegers.fst(101,4-109,19)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_7a16d75db7a0d6a0342f83cfb654e34e @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_7a16d75db7a0d6a0342f83cfb654e34e @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_7a16d75db7a0d6a0342f83cfb654e34e))

:named refinement_kinding_Tm_refine_7a16d75db7a0d6a0342f83cfb654e34e))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u32; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(13,27-13,52); use=Pulse.Class.BoundedIntegers.fst(101,4-109,19)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_5dfd9970765c73a63d7d40e8c4db182d @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_5dfd9970765c73a63d7d40e8c4db182d @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_5dfd9970765c73a63d7d40e8c4db182d))

:named refinement_kinding_Tm_refine_5dfd9970765c73a63d7d40e8c4db182d))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u32; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,28-14,54); use=Pulse.Class.BoundedIntegers.fst(101,4-109,19)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_7a16d75db7a0d6a0342f83cfb654e34e @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.bool)

;; def=Pulse.Class.BoundedIntegers.fst(14,37-14,53); use=Pulse.Class.BoundedIntegers.fst(101,4-109,19)
(= @x1
(Prims.op_LessThanOrEqual (FStar.UInt32.v @x2)
(FStar.UInt32.v @x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_7a16d75db7a0d6a0342f83cfb654e34e @x2
@x3)))
:qid refinement_interpretation_Tm_refine_7a16d75db7a0d6a0342f83cfb654e34e))

:named refinement_interpretation_Tm_refine_7a16d75db7a0d6a0342f83cfb654e34e))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u32; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(13,27-13,52); use=Pulse.Class.BoundedIntegers.fst(101,4-109,19)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_5dfd9970765c73a63d7d40e8c4db182d @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.bool)

;; def=Pulse.Class.BoundedIntegers.fst(13,36-13,51); use=Pulse.Class.BoundedIntegers.fst(101,4-109,19)
(= @x1
(Prims.op_LessThan (FStar.UInt32.v @x2)
(FStar.UInt32.v @x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_5dfd9970765c73a63d7d40e8c4db182d @x2
@x3)))
:qid refinement_interpretation_Tm_refine_5dfd9970765c73a63d7d40e8c4db182d))

:named refinement_interpretation_Tm_refine_5dfd9970765c73a63d7d40e8c4db182d))
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_755c79c2bc580d8b4fb5156ea583813e
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u32; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_ghost_arrow_755c79c2bc580d8b4fb5156ea583813e
Tm_type)
:named kinding_Tm_ghost_arrow_755c79c2bc580d8b4fb5156ea583813e))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_d68379b063bbed7a67ae25dc6b892929
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u32; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_arrow_d68379b063bbed7a67ae25dc6b892929
Tm_type)
:named kinding_Tm_arrow_d68379b063bbed7a67ae25dc6b892929))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_c8dfe6e8a32ac81b0fba0339610aaa9c
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u32; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_arrow_c8dfe6e8a32ac81b0fba0339610aaa9c
Tm_type)
:named kinding_Tm_arrow_c8dfe6e8a32ac81b0fba0339610aaa9c))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_d42937132b33980d22e6ed22825e138d
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u32; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(108,37-108,43); use=Pulse.Class.BoundedIntegers.fst(108,37-108,43)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_d42937132b33980d22e6ed22825e138d
@x0)
@x1)
(FStar.UInt32.rem @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_d42937132b33980d22e6ed22825e138d
@x0)
@x1))
:qid interpretation_Tm_abs_d42937132b33980d22e6ed22825e138d))

:named interpretation_Tm_abs_d42937132b33980d22e6ed22825e138d))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_a8cddb33fae8264dd0fec582745dd7d6
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u32; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(101,21-101,45); use=Pulse.Class.BoundedIntegers.fst(101,21-101,45)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_a8cddb33fae8264dd0fec582745dd7d6
@x0)
(Prims.l_and (Prims.b2t (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(BoxInt 0))
@x0))
(Prims.b2t (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
@x0)
(BoxInt 4294967296)))))
 

:pattern ((ApplyTT Tm_abs_a8cddb33fae8264dd0fec582745dd7d6
@x0))
:qid interpretation_Tm_abs_a8cddb33fae8264dd0fec582745dd7d6))

:named interpretation_Tm_abs_a8cddb33fae8264dd0fec582745dd7d6))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_6fb9339249bc93d04cc2b2d2f6d946ce
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u32; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(106,37-106,43); use=Pulse.Class.BoundedIntegers.fst(106,37-106,43)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_6fb9339249bc93d04cc2b2d2f6d946ce
@x0)
@x1)
(FStar.UInt32.lt @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_6fb9339249bc93d04cc2b2d2f6d946ce
@x0)
@x1))
:qid interpretation_Tm_abs_6fb9339249bc93d04cc2b2d2f6d946ce))

:named interpretation_Tm_abs_6fb9339249bc93d04cc2b2d2f6d946ce))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_640ea0d2a5785c2bf69170bf394ad9c4
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u32; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(102,18-102,34); use=Pulse.Class.BoundedIntegers.fst(102,18-102,34)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_640ea0d2a5785c2bf69170bf394ad9c4
@x0)
(FStar.UInt32.v @x0))
 

:pattern ((ApplyTT Tm_abs_640ea0d2a5785c2bf69170bf394ad9c4
@x0))
:qid interpretation_Tm_abs_640ea0d2a5785c2bf69170bf394ad9c4))

:named interpretation_Tm_abs_640ea0d2a5785c2bf69170bf394ad9c4))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_5cc87307b197f7e721a12f5164164fea
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u32; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(104,24-104,44); use=Pulse.Class.BoundedIntegers.fst(104,24-104,44)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_5cc87307b197f7e721a12f5164164fea
@x0)
@x1)
(FStar.UInt32.add @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_5cc87307b197f7e721a12f5164164fea
@x0)
@x1))
:qid interpretation_Tm_abs_5cc87307b197f7e721a12f5164164fea))

:named interpretation_Tm_abs_5cc87307b197f7e721a12f5164164fea))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_21dc0ff3e1f2b842fd5e44a0b0989cce
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u32; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(107,38-107,45); use=Pulse.Class.BoundedIntegers.fst(107,38-107,45)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_21dc0ff3e1f2b842fd5e44a0b0989cce
@x0)
@x1)
(FStar.UInt32.lte @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_21dc0ff3e1f2b842fd5e44a0b0989cce
@x0)
@x1))
:qid interpretation_Tm_abs_21dc0ff3e1f2b842fd5e44a0b0989cce))

:named interpretation_Tm_abs_21dc0ff3e1f2b842fd5e44a0b0989cce))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_18fb7ca5feda527746052adcf35f4c83
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u32; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(105,33-105,53); use=Pulse.Class.BoundedIntegers.fst(105,33-105,53)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_18fb7ca5feda527746052adcf35f4c83
@x0)
@x1)
(FStar.UInt32.sub @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_18fb7ca5feda527746052adcf35f4c83
@x0)
@x1))
:qid interpretation_Tm_abs_18fb7ca5feda527746052adcf35f4c83))

:named interpretation_Tm_abs_18fb7ca5feda527746052adcf35f4c83))
;;;;;;;;;;;;;;;;haseq for Tm_refine_7a16d75db7a0d6a0342f83cfb654e34e
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u32; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,28-14,54); use=Pulse.Class.BoundedIntegers.fst(101,4-109,19)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_7a16d75db7a0d6a0342f83cfb654e34e @x0
@x1)))
(Valid (Prims.hasEq Prims.bool)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_7a16d75db7a0d6a0342f83cfb654e34e @x0
@x1))))
:qid haseqTm_refine_7a16d75db7a0d6a0342f83cfb654e34e))

:named haseqTm_refine_7a16d75db7a0d6a0342f83cfb654e34e))
;;;;;;;;;;;;;;;;haseq for Tm_refine_5dfd9970765c73a63d7d40e8c4db182d
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u32; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(13,27-13,52); use=Pulse.Class.BoundedIntegers.fst(101,4-109,19)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_5dfd9970765c73a63d7d40e8c4db182d @x0
@x1)))
(Valid (Prims.hasEq Prims.bool)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_5dfd9970765c73a63d7d40e8c4db182d @x0
@x1))))
:qid haseqTm_refine_5dfd9970765c73a63d7d40e8c4db182d))

:named haseqTm_refine_5dfd9970765c73a63d7d40e8c4db182d))
;;;;;;;;;;;;;;;;Equation for Pulse.Class.BoundedIntegers.bounded_int_u32
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u32; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(100,9-100,24); use=Pulse.Class.BoundedIntegers.fst(100,9-100,24)
(forall ((@u0 Dummy_sort))
 (! (= 
;; def=Pulse.Class.BoundedIntegers.fst(100,9-100,24); use=Pulse.Class.BoundedIntegers.fst(100,9-100,24)
(Pulse.Class.BoundedIntegers.bounded_int_u32 @u0)

(Pulse.Class.BoundedIntegers.Mkbounded_int (FStar.UInt32.t Dummy_value)
Tm_abs_a8cddb33fae8264dd0fec582745dd7d6
Tm_abs_640ea0d2a5785c2bf69170bf394ad9c4
FStar.UInt32.uint_to_t@tok
Tm_abs_5cc87307b197f7e721a12f5164164fea
Tm_abs_18fb7ca5feda527746052adcf35f4c83
Tm_abs_6fb9339249bc93d04cc2b2d2f6d946ce
Tm_abs_21dc0ff3e1f2b842fd5e44a0b0989cce
Tm_abs_d42937132b33980d22e6ed22825e138d
Tm_unit))
 

:pattern (
;; def=Pulse.Class.BoundedIntegers.fst(100,9-100,24); use=Pulse.Class.BoundedIntegers.fst(100,9-100,24)
(Pulse.Class.BoundedIntegers.bounded_int_u32 @u0)
)
:qid equation_Pulse.Class.BoundedIntegers.bounded_int_u32))

:named equation_Pulse.Class.BoundedIntegers.bounded_int_u32))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u32; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=FStar.UInt32.fsti(54,9-54,10); use=Pulse.Class.BoundedIntegers.fst(101,4-109,19)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_ghost_arrow_755c79c2bc580d8b4fb5156ea583813e)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_ghost_arrow_755c79c2bc580d8b4fb5156ea583813e))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_ghost_arrow_755c79c2bc580d8b4fb5156ea583813e))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_ghost_arrow_755c79c2bc580d8b4fb5156ea583813e))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u32; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=FStar.UInt32.fsti(54,9-54,10); use=Pulse.Class.BoundedIntegers.fst(101,4-109,19)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_d68379b063bbed7a67ae25dc6b892929)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_d68379b063bbed7a67ae25dc6b892929))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_d68379b063bbed7a67ae25dc6b892929))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_d68379b063bbed7a67ae25dc6b892929))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u32; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=FStar.UInt32.fsti(54,9-54,10); use=Pulse.Class.BoundedIntegers.fst(101,4-109,19)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_c8dfe6e8a32ac81b0fba0339610aaa9c)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_c8dfe6e8a32ac81b0fba0339610aaa9c))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_c8dfe6e8a32ac81b0fba0339610aaa9c))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_c8dfe6e8a32ac81b0fba0339610aaa9c))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_755c79c2bc580d8b4fb5156ea583813e
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u32; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=FStar.UInt32.fsti(54,9-54,10); use=Pulse.Class.BoundedIntegers.fst(101,4-109,19)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_ghost_arrow_755c79c2bc580d8b4fb5156ea583813e)

;; def=FStar.UInt32.fsti(54,9-54,10); use=Pulse.Class.BoundedIntegers.fst(101,4-109,19)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.UInt32.t Dummy_value))
(HasType (ApplyTT @x0
@x1)
Prims.int))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_ghost_arrow_755c79c2bc580d8b4fb5156ea583813e.1))
)
 

:pattern ((HasTypeZ @x0
Tm_ghost_arrow_755c79c2bc580d8b4fb5156ea583813e))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_ghost_arrow_755c79c2bc580d8b4fb5156ea583813e))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_ghost_arrow_755c79c2bc580d8b4fb5156ea583813e))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_d68379b063bbed7a67ae25dc6b892929
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u32; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=FStar.UInt32.fsti(54,9-54,10); use=Pulse.Class.BoundedIntegers.fst(101,4-109,19)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_d68379b063bbed7a67ae25dc6b892929)
(and 
;; def=FStar.UInt32.fsti(54,9-54,10); use=Pulse.Class.BoundedIntegers.fst(101,4-109,19)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
(FStar.UInt32.t Dummy_value))
(HasType @x2
(FStar.UInt32.t Dummy_value)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Tm_refine_7a16d75db7a0d6a0342f83cfb654e34e @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_d68379b063bbed7a67ae25dc6b892929.1))

(IsTotFun @x0)

;; def=FStar.UInt32.fsti(54,9-54,10); use=Pulse.Class.BoundedIntegers.fst(101,4-109,19)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.UInt32.t Dummy_value))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_d68379b063bbed7a67ae25dc6b892929.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_d68379b063bbed7a67ae25dc6b892929))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_d68379b063bbed7a67ae25dc6b892929))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_d68379b063bbed7a67ae25dc6b892929))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_c8dfe6e8a32ac81b0fba0339610aaa9c
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u32; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=FStar.UInt32.fsti(54,9-54,10); use=Pulse.Class.BoundedIntegers.fst(101,4-109,19)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_c8dfe6e8a32ac81b0fba0339610aaa9c)
(and 
;; def=FStar.UInt32.fsti(54,9-54,10); use=Pulse.Class.BoundedIntegers.fst(101,4-109,19)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
(FStar.UInt32.t Dummy_value))
(HasType @x2
(FStar.UInt32.t Dummy_value)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Tm_refine_5dfd9970765c73a63d7d40e8c4db182d @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_c8dfe6e8a32ac81b0fba0339610aaa9c.1))

(IsTotFun @x0)

;; def=FStar.UInt32.fsti(54,9-54,10); use=Pulse.Class.BoundedIntegers.fst(101,4-109,19)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.UInt32.t Dummy_value))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_c8dfe6e8a32ac81b0fba0339610aaa9c.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_c8dfe6e8a32ac81b0fba0339610aaa9c))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_c8dfe6e8a32ac81b0fba0339610aaa9c))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_c8dfe6e8a32ac81b0fba0339610aaa9c))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u32; Namespace Pulse.Class.BoundedIntegers
(assert (! (Valid (ApplyTT __uu__PartialApp
Pulse.Class.BoundedIntegers.op_Less@tok))
:named @kick_partial_app_ea43422ce0ffd4aaf03b49bd157dd6a8))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u32; Namespace Pulse.Class.BoundedIntegers
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.UInt32.uint_to_t@tok))
:named @kick_partial_app_2e59d1382981ceb34fb76eaf9c6cce21))
(push) ;; push{2

; Starting query at Pulse.Class.BoundedIntegers.fst(112,0-117,1)

(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)








; Encoding query formula : (forall (x: FStar.UInt32.t).
;     Pulse.Class.BoundedIntegers.v x >= 0 /\
;     Pulse.Class.BoundedIntegers.v x <=
;     Pulse.Class.BoundedIntegers.v (0xfffffffful <: FStar.UInt32.t)) /\
; (forall (x: Prims.nat).
;     x <= Pulse.Class.BoundedIntegers.v (0xfffffffful <: FStar.UInt32.t) ==>
;     Pulse.Class.BoundedIntegers.fits x)


; Context: While encoding a query
; While checking for top-level effects
; While typechecking the top-level declaration `let bounded_unsigned_u32`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=Pulse.Class.BoundedIntegers.fst(45,21-48,3); use=Pulse.Class.BoundedIntegers.fst(116,15-116,17)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(46,4-46,73); use=Pulse.Class.BoundedIntegers.fst(116,15-116,17)
(forall ((@x0 Term))
 (! (implies (HasType @x0
(FStar.UInt32.t Dummy_value))

;; def=Pulse.Class.BoundedIntegers.fst(46,19-46,72); use=Pulse.Class.BoundedIntegers.fst(116,15-116,17)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(46,19-46,27); use=Pulse.Class.BoundedIntegers.fst(116,15-116,17)
(or label_1

;; def=Pulse.Class.BoundedIntegers.fst(46,19-46,27); use=Pulse.Class.BoundedIntegers.fst(116,15-116,17)
(>= (BoxInt_proj_0 (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
(FStar.UInt32.t Dummy_value))
(Pulse.Class.BoundedIntegers.bounded_int_u32 Dummy_value))
@x0))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Pulse.Class.BoundedIntegers.fst(46,53-46,71); use=Pulse.Class.BoundedIntegers.fst(116,15-116,17)
(or label_2

;; def=Pulse.Class.BoundedIntegers.fst(46,53-46,71); use=Pulse.Class.BoundedIntegers.fst(116,15-116,17)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
(FStar.UInt32.t Dummy_value))
(Pulse.Class.BoundedIntegers.bounded_int_u32 Dummy_value))
@x0))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
(FStar.UInt32.t Dummy_value))
(Pulse.Class.BoundedIntegers.bounded_int_u32 Dummy_value))
(FStar.UInt32.uint_to_t (BoxInt 4294967295)))))
)
)
)
 
;;no pats
:qid @query))


;; def=Pulse.Class.BoundedIntegers.fst(47,4-47,52); use=Pulse.Class.BoundedIntegers.fst(116,15-116,17)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
Prims.nat)

;; def=Pulse.Class.BoundedIntegers.fst(47,21-47,37); use=Pulse.Class.BoundedIntegers.fst(116,15-116,17)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
@x0)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
(FStar.UInt32.t Dummy_value))
(Pulse.Class.BoundedIntegers.bounded_int_u32 Dummy_value))
(FStar.UInt32.uint_to_t (BoxInt 4294967295)))))
)

;; def=Pulse.Class.BoundedIntegers.fst(47,42-47,51); use=Pulse.Class.BoundedIntegers.fst(116,15-116,17)
(or label_3

;; def=Pulse.Class.BoundedIntegers.fst(47,42-47,51); use=Pulse.Class.BoundedIntegers.fst(116,15-116,17)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(47,42-47,51); use=Pulse.Class.BoundedIntegers.fst(116,15-116,17)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.fits@tok
(FStar.UInt32.t Dummy_value))
(Pulse.Class.BoundedIntegers.bounded_int_u32 Dummy_value))
@x0)
)
)
)
 
;;no pats
:qid @query.1))
)
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Pulse.Class.BoundedIntegers.bounded_unsigned_u32, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @fuel_irrelevance_Prims.pow2.fuel_instrumented, @query, FStar.UInt32_pretyping_2ab3c8ba2d08b0172817fc70b5994868, Prims_interpretation_Tm_arrow_99724436653747ac6f5a6a00c64ff8bc, Prims_pretyping_ae567c2fb75be05905677af440075565, Pulse.Class.BoundedIntegers_interpretation_Tm_ghost_arrow_755c79c2bc580d8b4fb5156ea583813e, Pulse.Class.BoundedIntegers_interpretation_Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced, b2t_def, bool_inversion, bool_typing, data_elim_Pulse.Class.BoundedIntegers.Mkbounded_int, equation_FStar.Pervasives.id, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_Prims.eqtype, equation_Prims.nat, equation_Pulse.Class.BoundedIntegers.bounded_int_int, equation_Pulse.Class.BoundedIntegers.bounded_int_u32, equation_Pulse.Class.BoundedIntegers.fits, equation_Pulse.Class.BoundedIntegers.fits_t, equation_Pulse.Class.BoundedIntegers.op_Less, equation_Pulse.Class.BoundedIntegers.op_Less_Equals, equation_Pulse.Class.BoundedIntegers.v, function_token_typing_FStar.Pervasives.id, function_token_typing_FStar.UInt32.uint_to_t, function_token_typing_Prims.__cache_version_number__, int_inversion, int_typing, interpretation_Tm_abs_640ea0d2a5785c2bf69170bf394ad9c4, interpretation_Tm_abs_9526f9b86538a09423bf79a8b2d28a7b, interpretation_Tm_abs_a8cddb33fae8264dd0fec582745dd7d6, interpretation_Tm_abs_d2b36eee66dd8372042cd1c49358f9dc, interpretation_Tm_abs_d68e5199f008f106619036deee889e9a, interpretation_Tm_abs_e6649eba6390f90be22ea1a9dce6d496, interpretation_Tm_abs_f4d32f3d705308e5f1a270cda9a29727, interpretation_Tm_abs_faa1351076bca4f1d410c09beaffa289, l_and-interp, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt32.vu_inv, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThan, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_fits, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_op_Less, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_op_Less_Equals, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_v, refinement_interpretation_Tm_refine_2c9509c4fdf356ea8b390762a509ebbb, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_9b6814fd42e45bedf339f7a6d66952ad, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, token_correspondence_FStar.Pervasives.id, token_correspondence_Pulse.Class.BoundedIntegers.fits, token_correspondence_Pulse.Class.BoundedIntegers.op_Less, token_correspondence_Pulse.Class.BoundedIntegers.op_Less_Equals, token_correspondence_Pulse.Class.BoundedIntegers.v, typing_FStar.UInt.fits, typing_FStar.UInt32.v, typing_Prims.int, typing_Pulse.Class.BoundedIntegers.bounded_int_u32, typing_Tm_abs_640ea0d2a5785c2bf69170bf394ad9c4

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let bounded_unsigned_u32


; <Start encoding let bounded_unsigned_u32>

(declare-fun Pulse.Class.BoundedIntegers.bounded_unsigned_u32 (Dummy_sort) Term)

; </end encoding let bounded_unsigned_u32>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt64.v; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(54,4-54,5); use=FStar.UInt64.fsti(54,4-54,5)
(forall ((@x0 Term))
 (! (implies (HasType @x0
(FStar.UInt64.t Dummy_value))
(HasType (FStar.UInt64.v @x0)
(FStar.UInt.uint_t (BoxInt 64))))
 

:pattern ((FStar.UInt64.v @x0))
:qid typing_FStar.UInt64.v))

:named typing_FStar.UInt64.v))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt64.uint_to_t; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(58,4-58,13); use=FStar.UInt64.fsti(58,4-58,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
(FStar.UInt.uint_t (BoxInt 64)))
(HasType (FStar.UInt64.uint_to_t @x0)
(Tm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4 @x0)))
 

:pattern ((FStar.UInt64.uint_to_t @x0))
:qid typing_FStar.UInt64.uint_to_t))

:named typing_FStar.UInt64.uint_to_t))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt64.t; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(50,8-50,9); use=FStar.UInt64.fsti(50,8-50,9)
(forall ((@u0 Dummy_sort))
 (! (HasType (FStar.UInt64.t @u0)
Prims.eqtype)
 

:pattern ((FStar.UInt64.t @u0))
:qid typing_FStar.UInt64.t))

:named typing_FStar.UInt64.t))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt64.sub; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(116,4-116,7); use=FStar.UInt64.fsti(116,4-116,7)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and 
;; def=FStar.UInt64.fsti(117,12-117,32); use=FStar.UInt64.fsti(117,12-117,32)
(Valid 
;; def=FStar.UInt64.fsti(117,12-117,32); use=FStar.UInt64.fsti(117,12-117,32)
(FStar.UInt.size (Prims.op_Subtraction (FStar.UInt64.v @x0)
(FStar.UInt64.v @x1))
(BoxInt 64))
)

(HasType @x0
(FStar.UInt64.t Dummy_value))
(HasType @x1
(FStar.UInt64.t Dummy_value)))
(HasType (FStar.UInt64.sub @x0
@x1)
(Tm_refine_4db8ba22c4504a66577a2159dcc603cd @x0
@x1)))
 

:pattern ((FStar.UInt64.sub @x0
@x1))
:qid typing_FStar.UInt64.sub))

:named typing_FStar.UInt64.sub))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt64.rem; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(177,4-177,7); use=FStar.UInt64.fsti(177,4-177,7)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
(FStar.UInt64.t Dummy_value))
(HasType @x1
Tm_refine_94d25b6e0041d543efd58300424ecc37))
(HasType (FStar.UInt64.rem @x0
@x1)
(Tm_refine_06f2bf4950bb76094f7b7f43daea2409 @x0
@x1)))
 

:pattern ((FStar.UInt64.rem @x0
@x1))
:qid typing_FStar.UInt64.rem))

:named typing_FStar.UInt64.rem))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt64.lte; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(235,4-235,7); use=FStar.UInt64.fsti(235,4-235,7)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
(FStar.UInt64.t Dummy_value))
(HasType @x1
(FStar.UInt64.t Dummy_value)))
(HasType (FStar.UInt64.lte @x0
@x1)
Prims.bool))
 

:pattern ((FStar.UInt64.lte @x0
@x1))
:qid typing_FStar.UInt64.lte))

:named typing_FStar.UInt64.lte))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt64.lt; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(232,4-232,6); use=FStar.UInt64.fsti(232,4-232,6)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
(FStar.UInt64.t Dummy_value))
(HasType @x1
(FStar.UInt64.t Dummy_value)))
(HasType (FStar.UInt64.lt @x0
@x1)
Prims.bool))
 

:pattern ((FStar.UInt64.lt @x0
@x1))
:qid typing_FStar.UInt64.lt))

:named typing_FStar.UInt64.lt))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt64.add; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(88,4-88,7); use=FStar.UInt64.fsti(88,4-88,7)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and 
;; def=FStar.UInt64.fsti(89,12-89,32); use=FStar.UInt64.fsti(89,12-89,32)
(Valid 
;; def=FStar.UInt64.fsti(89,12-89,32); use=FStar.UInt64.fsti(89,12-89,32)
(FStar.UInt.size (Prims.op_Addition (FStar.UInt64.v @x0)
(FStar.UInt64.v @x1))
(BoxInt 64))
)

(HasType @x0
(FStar.UInt64.t Dummy_value))
(HasType @x1
(FStar.UInt64.t Dummy_value)))
(HasType (FStar.UInt64.add @x0
@x1)
(Tm_refine_bc552b2c624e2add758b3ac761c0c563 @x0
@x1)))
 

:pattern ((FStar.UInt64.add @x0
@x1))
:qid typing_FStar.UInt64.add))

:named typing_FStar.UInt64.add))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.UInt64.uint_to_t; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(58,4-58,13); use=FStar.UInt64.fsti(58,4-58,13)
(forall ((@x0 Term))
 (! (= (ApplyTT FStar.UInt64.uint_to_t@tok
@x0)
(FStar.UInt64.uint_to_t @x0))
 

:pattern ((ApplyTT FStar.UInt64.uint_to_t@tok
@x0))
:qid token_correspondence_FStar.UInt64.uint_to_t))

:named token_correspondence_FStar.UInt64.uint_to_t))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt64.add; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(88,27-88,28); use=FStar.UInt64.fsti(88,27-88,28)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_bc552b2c624e2add758b3ac761c0c563 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_bc552b2c624e2add758b3ac761c0c563 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_bc552b2c624e2add758b3ac761c0c563))

:named refinement_kinding_Tm_refine_bc552b2c624e2add758b3ac761c0c563))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt64.div; Namespace FStar.UInt64
(assert (! (HasType Tm_refine_94d25b6e0041d543efd58300424ecc37
Tm_type)
:named refinement_kinding_Tm_refine_94d25b6e0041d543efd58300424ecc37))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt64.zero; Namespace FStar.UInt64
(assert (! (HasType Tm_refine_89584a9c9cf094f470969adafcc43f12
Tm_type)
:named refinement_kinding_Tm_refine_89584a9c9cf094f470969adafcc43f12))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt64.sub; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(116,27-116,28); use=FStar.UInt64.fsti(116,27-116,28)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_4db8ba22c4504a66577a2159dcc603cd @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_4db8ba22c4504a66577a2159dcc603cd @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_4db8ba22c4504a66577a2159dcc603cd))

:named refinement_kinding_Tm_refine_4db8ba22c4504a66577a2159dcc603cd))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt64.uint_to_t; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(58,34-58,35); use=FStar.UInt64.fsti(58,34-58,35)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4))

:named refinement_kinding_Tm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt64.one; Namespace FStar.UInt64
(assert (! (HasType Tm_refine_248426d47c73436882d5ff4a2d4f3cf0
Tm_type)
:named refinement_kinding_Tm_refine_248426d47c73436882d5ff4a2d4f3cf0))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt64.rem; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(177,37-177,38); use=FStar.UInt64.fsti(177,37-177,38)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_06f2bf4950bb76094f7b7f43daea2409 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_06f2bf4950bb76094f7b7f43daea2409 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_06f2bf4950bb76094f7b7f43daea2409))

:named refinement_kinding_Tm_refine_06f2bf4950bb76094f7b7f43daea2409))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt64.add; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(88,27-88,28); use=FStar.UInt64.fsti(88,27-88,28)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_bc552b2c624e2add758b3ac761c0c563 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(FStar.UInt64.t Dummy_value))

;; def=FStar.UInt64.fsti(90,21-90,36); use=FStar.UInt64.fsti(90,21-90,36)
(= (Prims.op_Addition (FStar.UInt64.v @x2)
(FStar.UInt64.v @x3))
(FStar.UInt64.v @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_bc552b2c624e2add758b3ac761c0c563 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_bc552b2c624e2add758b3ac761c0c563))

:named refinement_interpretation_Tm_refine_bc552b2c624e2add758b3ac761c0c563))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt64.div; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(168,14-168,29); use=FStar.UInt64.fsti(168,14-168,29)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_94d25b6e0041d543efd58300424ecc37)
(and (HasTypeFuel @u0
@x1
(FStar.UInt64.t Dummy_value))

;; def=FStar.UInt64.fsti(168,19-168,27); use=FStar.UInt64.fsti(168,19-168,27)
(not (= (FStar.UInt64.v @x1)
(BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_94d25b6e0041d543efd58300424ecc37))
:qid refinement_interpretation_Tm_refine_94d25b6e0041d543efd58300424ecc37))

:named refinement_interpretation_Tm_refine_94d25b6e0041d543efd58300424ecc37))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt64.zero; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(78,11-78,23); use=FStar.UInt64.fsti(78,11-78,23)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_89584a9c9cf094f470969adafcc43f12)
(and (HasTypeFuel @u0
@x1
(FStar.UInt64.t Dummy_value))

;; def=FStar.UInt64.fsti(78,15-78,22); use=FStar.UInt64.fsti(78,15-78,22)
(= (FStar.UInt64.v @x1)
(BoxInt 0))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_89584a9c9cf094f470969adafcc43f12))
:qid refinement_interpretation_Tm_refine_89584a9c9cf094f470969adafcc43f12))

:named refinement_interpretation_Tm_refine_89584a9c9cf094f470969adafcc43f12))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt64.sub; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(116,27-116,28); use=FStar.UInt64.fsti(116,27-116,28)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_4db8ba22c4504a66577a2159dcc603cd @x2
@x3))
(and (HasTypeFuel @u0
@x1
(FStar.UInt64.t Dummy_value))

;; def=FStar.UInt64.fsti(118,21-118,36); use=FStar.UInt64.fsti(118,21-118,36)
(= (Prims.op_Subtraction (FStar.UInt64.v @x2)
(FStar.UInt64.v @x3))
(FStar.UInt64.v @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_4db8ba22c4504a66577a2159dcc603cd @x2
@x3)))
:qid refinement_interpretation_Tm_refine_4db8ba22c4504a66577a2159dcc603cd))

:named refinement_interpretation_Tm_refine_4db8ba22c4504a66577a2159dcc603cd))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt64.uint_to_t; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(58,34-58,35); use=FStar.UInt64.fsti(58,34-58,35)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4 @x2))
(and (HasTypeFuel @u0
@x1
(FStar.UInt64.t Dummy_value))

;; def=FStar.UInt64.fsti(60,21-60,28); use=FStar.UInt64.fsti(60,21-60,28)
(= (FStar.UInt64.v @x1)
@x2)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4 @x2)))
:qid refinement_interpretation_Tm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4))

:named refinement_interpretation_Tm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt64.one; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(80,10-80,22); use=FStar.UInt64.fsti(80,10-80,22)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_248426d47c73436882d5ff4a2d4f3cf0)
(and (HasTypeFuel @u0
@x1
(FStar.UInt64.t Dummy_value))

;; def=FStar.UInt64.fsti(80,14-80,21); use=FStar.UInt64.fsti(80,14-80,21)
(= (FStar.UInt64.v @x1)
(BoxInt 1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_248426d47c73436882d5ff4a2d4f3cf0))
:qid refinement_interpretation_Tm_refine_248426d47c73436882d5ff4a2d4f3cf0))

:named refinement_interpretation_Tm_refine_248426d47c73436882d5ff4a2d4f3cf0))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt64.rem; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(177,37-177,38); use=FStar.UInt64.fsti(177,37-177,38)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_06f2bf4950bb76094f7b7f43daea2409 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(FStar.UInt64.t Dummy_value))

;; def=FStar.UInt64.fsti(179,21-179,53); use=FStar.UInt64.fsti(179,21-179,53)
(= (FStar.UInt.mod (BoxInt 64)
(FStar.UInt64.v @x2)
(FStar.UInt64.v @x3))
(FStar.UInt64.v @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_06f2bf4950bb76094f7b7f43daea2409 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_06f2bf4950bb76094f7b7f43daea2409))

:named refinement_interpretation_Tm_refine_06f2bf4950bb76094f7b7f43daea2409))
;;;;;;;;;;;;;;;;Lemma: FStar.UInt64.vu_inv
;;; Fact-ids: Name FStar.UInt64.vu_inv; Namespace FStar.UInt64
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
(FStar.UInt.uint_t (BoxInt 64)))

;; def=FStar.UInt64.fsti(69,11-69,33); use=FStar.UInt64.fsti(69,11-69,33)
(= (FStar.UInt64.v (FStar.UInt64.uint_to_t @x0))
@x0)
)
 

:pattern ((FStar.UInt64.uint_to_t @x0))
:qid lemma_FStar.UInt64.vu_inv))
:named lemma_FStar.UInt64.vu_inv))
;;;;;;;;;;;;;;;;Lemma: FStar.UInt64.uv_inv
;;; Fact-ids: Name FStar.UInt64.uv_inv; Namespace FStar.UInt64
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
(FStar.UInt64.t Dummy_value))

;; def=FStar.UInt64.fsti(64,11-64,33); use=FStar.UInt64.fsti(64,11-64,33)
(= (FStar.UInt64.uint_to_t (FStar.UInt64.v @x0))
@x0)
)
 

:pattern ((FStar.UInt64.v @x0))
:qid lemma_FStar.UInt64.uv_inv))
:named lemma_FStar.UInt64.uv_inv))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_0a7b550d26d1f7783c7c5e1990842388
;;; Fact-ids: Name FStar.UInt64.uint_to_t; Namespace FStar.UInt64
(assert (! (HasType Tm_arrow_0a7b550d26d1f7783c7c5e1990842388
Tm_type)
:named kinding_Tm_arrow_0a7b550d26d1f7783c7c5e1990842388))
;;;;;;;;;;;;;;;;haseq for Tm_refine_bc552b2c624e2add758b3ac761c0c563
;;; Fact-ids: Name FStar.UInt64.add; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(88,27-88,28); use=FStar.UInt64.fsti(88,27-88,28)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_bc552b2c624e2add758b3ac761c0c563 @x0
@x1)))
(Valid (Prims.hasEq (FStar.UInt64.t Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_bc552b2c624e2add758b3ac761c0c563 @x0
@x1))))
:qid haseqTm_refine_bc552b2c624e2add758b3ac761c0c563))

:named haseqTm_refine_bc552b2c624e2add758b3ac761c0c563))
;;;;;;;;;;;;;;;;haseq for Tm_refine_94d25b6e0041d543efd58300424ecc37
;;; Fact-ids: Name FStar.UInt64.div; Namespace FStar.UInt64
(assert (! (iff (Valid (Prims.hasEq Tm_refine_94d25b6e0041d543efd58300424ecc37))
(Valid (Prims.hasEq (FStar.UInt64.t Dummy_value))))
:named haseqTm_refine_94d25b6e0041d543efd58300424ecc37))
;;;;;;;;;;;;;;;;haseq for Tm_refine_89584a9c9cf094f470969adafcc43f12
;;; Fact-ids: Name FStar.UInt64.zero; Namespace FStar.UInt64
(assert (! (iff (Valid (Prims.hasEq Tm_refine_89584a9c9cf094f470969adafcc43f12))
(Valid (Prims.hasEq (FStar.UInt64.t Dummy_value))))
:named haseqTm_refine_89584a9c9cf094f470969adafcc43f12))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4db8ba22c4504a66577a2159dcc603cd
;;; Fact-ids: Name FStar.UInt64.sub; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(116,27-116,28); use=FStar.UInt64.fsti(116,27-116,28)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_4db8ba22c4504a66577a2159dcc603cd @x0
@x1)))
(Valid (Prims.hasEq (FStar.UInt64.t Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_4db8ba22c4504a66577a2159dcc603cd @x0
@x1))))
:qid haseqTm_refine_4db8ba22c4504a66577a2159dcc603cd))

:named haseqTm_refine_4db8ba22c4504a66577a2159dcc603cd))
;;;;;;;;;;;;;;;;haseq for Tm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4
;;; Fact-ids: Name FStar.UInt64.uint_to_t; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(58,34-58,35); use=FStar.UInt64.fsti(58,34-58,35)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4 @x0)))
(Valid (Prims.hasEq (FStar.UInt64.t Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4 @x0))))
:qid haseqTm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4))

:named haseqTm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4))
;;;;;;;;;;;;;;;;haseq for Tm_refine_248426d47c73436882d5ff4a2d4f3cf0
;;; Fact-ids: Name FStar.UInt64.one; Namespace FStar.UInt64
(assert (! (iff (Valid (Prims.hasEq Tm_refine_248426d47c73436882d5ff4a2d4f3cf0))
(Valid (Prims.hasEq (FStar.UInt64.t Dummy_value))))
:named haseqTm_refine_248426d47c73436882d5ff4a2d4f3cf0))
;;;;;;;;;;;;;;;;haseq for Tm_refine_06f2bf4950bb76094f7b7f43daea2409
;;; Fact-ids: Name FStar.UInt64.rem; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(177,37-177,38); use=FStar.UInt64.fsti(177,37-177,38)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_06f2bf4950bb76094f7b7f43daea2409 @x0
@x1)))
(Valid (Prims.hasEq (FStar.UInt64.t Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_06f2bf4950bb76094f7b7f43daea2409 @x0
@x1))))
:qid haseqTm_refine_06f2bf4950bb76094f7b7f43daea2409))

:named haseqTm_refine_06f2bf4950bb76094f7b7f43daea2409))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.UInt64.uint_to_t; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(58,4-58,13); use=FStar.UInt64.fsti(58,4-58,13)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType FStar.UInt64.uint_to_t@tok
Tm_arrow_0a7b550d26d1f7783c7c5e1990842388))

;; def=FStar.UInt64.fsti(58,4-58,13); use=FStar.UInt64.fsti(58,4-58,13)
(forall ((@x1 Term))
 (! (= (ApplyTT FStar.UInt64.uint_to_t@tok
@x1)
(FStar.UInt64.uint_to_t @x1))
 

:pattern ((FStar.UInt64.uint_to_t @x1))
:qid function_token_typing_FStar.UInt64.uint_to_t.1))
)
 

:pattern ((ApplyTT @x0
FStar.UInt64.uint_to_t@tok))
:qid function_token_typing_FStar.UInt64.uint_to_t))

:named function_token_typing_FStar.UInt64.uint_to_t))
;;;;;;;;;;;;;;;;Equation for FStar.UInt64.lte
;;; Fact-ids: Name FStar.UInt64.lte; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(235,4-235,7); use=FStar.UInt64.fsti(235,4-235,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.UInt64.lte @x0
@x1)
(FStar.UInt.lte (BoxInt 64)
(FStar.UInt64.v @x0)
(FStar.UInt64.v @x1)))
 

:pattern ((FStar.UInt64.lte @x0
@x1))
:qid equation_FStar.UInt64.lte))

:named equation_FStar.UInt64.lte))
;;;;;;;;;;;;;;;;Equation for FStar.UInt64.lt
;;; Fact-ids: Name FStar.UInt64.lt; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(232,4-232,6); use=FStar.UInt64.fsti(232,4-232,6)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.UInt64.lt @x0
@x1)
(FStar.UInt.lt (BoxInt 64)
(FStar.UInt64.v @x0)
(FStar.UInt64.v @x1)))
 

:pattern ((FStar.UInt64.lt @x0
@x1))
:qid equation_FStar.UInt64.lt))

:named equation_FStar.UInt64.lt))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.UInt64.t; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(50,8-50,9); use=FStar.UInt64.fsti(50,8-50,9)
(forall ((@u0 Dummy_sort))
 (! (= 101
(Term_constr_id (FStar.UInt64.t @u0)))
 

:pattern ((FStar.UInt64.t @u0))
:qid constructor_distinct_FStar.UInt64.t))

:named constructor_distinct_FStar.UInt64.t))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.UInt64.t; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(50,8-50,9); use=FStar.UInt64.fsti(50,8-50,9)
(forall ((@x0 Term) (@u1 Fuel) (@u2 Dummy_sort))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.UInt64.t @u2))
(= (FStar.UInt64.t @u2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.UInt64.t @u2)))
:qid FStar.UInt64_pretyping_0a6d0526dc068d94bc7967094b2dd513))

:named FStar.UInt64_pretyping_0a6d0526dc068d94bc7967094b2dd513))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.UInt64.uint_to_t; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(58,17-58,35); use=FStar.UInt64.fsti(58,17-58,35)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_0a7b550d26d1f7783c7c5e1990842388)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_0a7b550d26d1f7783c7c5e1990842388))
:qid FStar.UInt64_pre_typing_Tm_arrow_0a7b550d26d1f7783c7c5e1990842388))

:named FStar.UInt64_pre_typing_Tm_arrow_0a7b550d26d1f7783c7c5e1990842388))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_0a7b550d26d1f7783c7c5e1990842388
;;; Fact-ids: Name FStar.UInt64.uint_to_t; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(58,17-58,35); use=FStar.UInt64.fsti(58,17-58,35)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_0a7b550d26d1f7783c7c5e1990842388)
(and 
;; def=FStar.UInt64.fsti(58,17-58,35); use=FStar.UInt64.fsti(58,17-58,35)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.UInt.uint_t (BoxInt 64)))
(HasType (ApplyTT @x0
@x1)
(Tm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4 @x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid FStar.UInt64_interpretation_Tm_arrow_0a7b550d26d1f7783c7c5e1990842388.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_0a7b550d26d1f7783c7c5e1990842388))
:qid FStar.UInt64_interpretation_Tm_arrow_0a7b550d26d1f7783c7c5e1990842388))

:named FStar.UInt64_interpretation_Tm_arrow_0a7b550d26d1f7783c7c5e1990842388))
(push) ;; push{2

; Starting query at Pulse.Class.BoundedIntegers.fst(119,0-129,1)

(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)






(declare-fun Tm_refine_5abcf0dd65a2e9ef20e9f8233c4604ad (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt64.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_5abcf0dd65a2e9ef20e9f8233c4604ad @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_5abcf0dd65a2e9ef20e9f8233c4604ad @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_5abcf0dd65a2e9ef20e9f8233c4604ad))

:named refinement_kinding_Tm_refine_5abcf0dd65a2e9ef20e9f8233c4604ad))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt64.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_5abcf0dd65a2e9ef20e9f8233c4604ad @x2
@x3))
(and (HasTypeFuel @u0
@x1
(FStar.UInt64.t Dummy_value))

;; def=Pulse.Class.BoundedIntegers.fst(11,80-11,96); use=Prims.fst(454,7-454,10)
(= (FStar.UInt64.v @x1)
(Prims.op_Addition (FStar.UInt64.v @x2)
(FStar.UInt64.v @x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_5abcf0dd65a2e9ef20e9f8233c4604ad @x2
@x3)))
:qid refinement_interpretation_Tm_refine_5abcf0dd65a2e9ef20e9f8233c4604ad))

:named refinement_interpretation_Tm_refine_5abcf0dd65a2e9ef20e9f8233c4604ad))
;;;;;;;;;;;;;;;;haseq for Tm_refine_5abcf0dd65a2e9ef20e9f8233c4604ad
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt64.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_5abcf0dd65a2e9ef20e9f8233c4604ad @x0
@x1)))
(Valid (Prims.hasEq (FStar.UInt64.t Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_5abcf0dd65a2e9ef20e9f8233c4604ad @x0
@x1))))
:qid haseqTm_refine_5abcf0dd65a2e9ef20e9f8233c4604ad))

:named haseqTm_refine_5abcf0dd65a2e9ef20e9f8233c4604ad))


;;;;;;;;;;;;;;;;x: FStar.UInt64.t -> y: FStar.UInt64.t -> Prims.Pure FStar.UInt64.t
(declare-fun Tm_arrow_2521536ed7f5dcd6af297af10a60597e () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_2521536ed7f5dcd6af297af10a60597e
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_2521536ed7f5dcd6af297af10a60597e
Tm_type)
:named kinding_Tm_arrow_2521536ed7f5dcd6af297af10a60597e))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt64.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_2521536ed7f5dcd6af297af10a60597e)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_2521536ed7f5dcd6af297af10a60597e))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_2521536ed7f5dcd6af297af10a60597e))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_2521536ed7f5dcd6af297af10a60597e))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_2521536ed7f5dcd6af297af10a60597e
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt64.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_2521536ed7f5dcd6af297af10a60597e)
(and 
;; def=FStar.UInt64.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and 
;; def=Pulse.Class.BoundedIntegers.fst(120,21-120,27); use=Prims.fst(454,7-454,10)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(BoxInt 0))
(Prims.op_Addition (FStar.UInt64.v @x1)
(FStar.UInt64.v @x2))))


;; def=Pulse.Class.BoundedIntegers.fst(120,31-120,54); use=Prims.fst(454,7-454,10)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(Prims.op_Addition (FStar.UInt64.v @x1)
(FStar.UInt64.v @x2)))
(BoxInt 18446744073709551615)))

(HasType @x1
(FStar.UInt64.t Dummy_value))
(HasType @x2
(FStar.UInt64.t Dummy_value)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Tm_refine_5abcf0dd65a2e9ef20e9f8233c4604ad @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_2521536ed7f5dcd6af297af10a60597e.1))

(IsTotFun @x0)

;; def=FStar.UInt64.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.UInt64.t Dummy_value))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_2521536ed7f5dcd6af297af10a60597e.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_2521536ed7f5dcd6af297af10a60597e))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_2521536ed7f5dcd6af297af10a60597e))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_2521536ed7f5dcd6af297af10a60597e))


(declare-fun Tm_refine_494c197445fc14ba90593aba9ee41695 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt64.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_494c197445fc14ba90593aba9ee41695 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_494c197445fc14ba90593aba9ee41695 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_494c197445fc14ba90593aba9ee41695))

:named refinement_kinding_Tm_refine_494c197445fc14ba90593aba9ee41695))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt64.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_494c197445fc14ba90593aba9ee41695 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(FStar.UInt64.t Dummy_value))

;; def=Pulse.Class.BoundedIntegers.fst(12,89-12,105); use=Prims.fst(454,7-454,10)
(= (FStar.UInt64.v @x1)
(Prims.op_Subtraction (FStar.UInt64.v @x2)
(FStar.UInt64.v @x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_494c197445fc14ba90593aba9ee41695 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_494c197445fc14ba90593aba9ee41695))

:named refinement_interpretation_Tm_refine_494c197445fc14ba90593aba9ee41695))
;;;;;;;;;;;;;;;;haseq for Tm_refine_494c197445fc14ba90593aba9ee41695
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt64.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_494c197445fc14ba90593aba9ee41695 @x0
@x1)))
(Valid (Prims.hasEq (FStar.UInt64.t Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_494c197445fc14ba90593aba9ee41695 @x0
@x1))))
:qid haseqTm_refine_494c197445fc14ba90593aba9ee41695))

:named haseqTm_refine_494c197445fc14ba90593aba9ee41695))


;;;;;;;;;;;;;;;;x: FStar.UInt64.t -> y: FStar.UInt64.t -> Prims.Pure FStar.UInt64.t
(declare-fun Tm_arrow_a62958f9d2527d4e1225f6fcc42882e7 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_a62958f9d2527d4e1225f6fcc42882e7
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_a62958f9d2527d4e1225f6fcc42882e7
Tm_type)
:named kinding_Tm_arrow_a62958f9d2527d4e1225f6fcc42882e7))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt64.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_a62958f9d2527d4e1225f6fcc42882e7)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_a62958f9d2527d4e1225f6fcc42882e7))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_a62958f9d2527d4e1225f6fcc42882e7))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_a62958f9d2527d4e1225f6fcc42882e7))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_a62958f9d2527d4e1225f6fcc42882e7
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt64.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_a62958f9d2527d4e1225f6fcc42882e7)
(and 
;; def=FStar.UInt64.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and 
;; def=Pulse.Class.BoundedIntegers.fst(120,21-120,27); use=Prims.fst(454,7-454,10)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(BoxInt 0))
(Prims.op_Subtraction (FStar.UInt64.v @x1)
(FStar.UInt64.v @x2))))


;; def=Pulse.Class.BoundedIntegers.fst(120,31-120,54); use=Prims.fst(454,7-454,10)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(Prims.op_Subtraction (FStar.UInt64.v @x1)
(FStar.UInt64.v @x2)))
(BoxInt 18446744073709551615)))

(HasType @x1
(FStar.UInt64.t Dummy_value))
(HasType @x2
(FStar.UInt64.t Dummy_value)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Tm_refine_494c197445fc14ba90593aba9ee41695 @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_a62958f9d2527d4e1225f6fcc42882e7.1))

(IsTotFun @x0)

;; def=FStar.UInt64.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.UInt64.t Dummy_value))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_a62958f9d2527d4e1225f6fcc42882e7.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_a62958f9d2527d4e1225f6fcc42882e7))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_a62958f9d2527d4e1225f6fcc42882e7))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_a62958f9d2527d4e1225f6fcc42882e7))
(declare-fun Tm_refine_0d44f95597fc6ce8f03594c4f76be322 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(13,27-13,52); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_0d44f95597fc6ce8f03594c4f76be322 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_0d44f95597fc6ce8f03594c4f76be322 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_0d44f95597fc6ce8f03594c4f76be322))

:named refinement_kinding_Tm_refine_0d44f95597fc6ce8f03594c4f76be322))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(13,27-13,52); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_0d44f95597fc6ce8f03594c4f76be322 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.bool)

;; def=Pulse.Class.BoundedIntegers.fst(13,36-13,51); use=Prims.fst(454,7-454,10)
(= @x1
(Prims.op_LessThan (FStar.UInt64.v @x2)
(FStar.UInt64.v @x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_0d44f95597fc6ce8f03594c4f76be322 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_0d44f95597fc6ce8f03594c4f76be322))

:named refinement_interpretation_Tm_refine_0d44f95597fc6ce8f03594c4f76be322))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0d44f95597fc6ce8f03594c4f76be322
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(13,27-13,52); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_0d44f95597fc6ce8f03594c4f76be322 @x0
@x1)))
(Valid (Prims.hasEq Prims.bool)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_0d44f95597fc6ce8f03594c4f76be322 @x0
@x1))))
:qid haseqTm_refine_0d44f95597fc6ce8f03594c4f76be322))

:named haseqTm_refine_0d44f95597fc6ce8f03594c4f76be322))
;;;;;;;;;;;;;;;;x: FStar.UInt64.t -> y: FStar.UInt64.t -> b: Prims.bool{b = (FStar.UInt64.v x < FStar.UInt64.v y)}
(declare-fun Tm_arrow_cdf1b89be74402224e2ce9aab4ffb1b3 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_cdf1b89be74402224e2ce9aab4ffb1b3
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_cdf1b89be74402224e2ce9aab4ffb1b3
Tm_type)
:named kinding_Tm_arrow_cdf1b89be74402224e2ce9aab4ffb1b3))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt64.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_cdf1b89be74402224e2ce9aab4ffb1b3)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_cdf1b89be74402224e2ce9aab4ffb1b3))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_cdf1b89be74402224e2ce9aab4ffb1b3))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_cdf1b89be74402224e2ce9aab4ffb1b3))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_cdf1b89be74402224e2ce9aab4ffb1b3
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt64.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_cdf1b89be74402224e2ce9aab4ffb1b3)
(and 
;; def=FStar.UInt64.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
(FStar.UInt64.t Dummy_value))
(HasType @x2
(FStar.UInt64.t Dummy_value)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Tm_refine_0d44f95597fc6ce8f03594c4f76be322 @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_cdf1b89be74402224e2ce9aab4ffb1b3.1))

(IsTotFun @x0)

;; def=FStar.UInt64.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.UInt64.t Dummy_value))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_cdf1b89be74402224e2ce9aab4ffb1b3.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_cdf1b89be74402224e2ce9aab4ffb1b3))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_cdf1b89be74402224e2ce9aab4ffb1b3))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_cdf1b89be74402224e2ce9aab4ffb1b3))
(declare-fun Tm_refine_23b0da4834db6574add6ff4060a1c2ef (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,28-14,54); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_23b0da4834db6574add6ff4060a1c2ef @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_23b0da4834db6574add6ff4060a1c2ef @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_23b0da4834db6574add6ff4060a1c2ef))

:named refinement_kinding_Tm_refine_23b0da4834db6574add6ff4060a1c2ef))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,28-14,54); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_23b0da4834db6574add6ff4060a1c2ef @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.bool)

;; def=Pulse.Class.BoundedIntegers.fst(14,37-14,53); use=Prims.fst(454,7-454,10)
(= @x1
(Prims.op_LessThanOrEqual (FStar.UInt64.v @x2)
(FStar.UInt64.v @x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_23b0da4834db6574add6ff4060a1c2ef @x2
@x3)))
:qid refinement_interpretation_Tm_refine_23b0da4834db6574add6ff4060a1c2ef))

:named refinement_interpretation_Tm_refine_23b0da4834db6574add6ff4060a1c2ef))
;;;;;;;;;;;;;;;;haseq for Tm_refine_23b0da4834db6574add6ff4060a1c2ef
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,28-14,54); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_23b0da4834db6574add6ff4060a1c2ef @x0
@x1)))
(Valid (Prims.hasEq Prims.bool)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_23b0da4834db6574add6ff4060a1c2ef @x0
@x1))))
:qid haseqTm_refine_23b0da4834db6574add6ff4060a1c2ef))

:named haseqTm_refine_23b0da4834db6574add6ff4060a1c2ef))
;;;;;;;;;;;;;;;;x: FStar.UInt64.t -> y: FStar.UInt64.t -> b: Prims.bool{b = (FStar.UInt64.v x <= FStar.UInt64.v y)}
(declare-fun Tm_arrow_2fdc2137400852f93fcdb769b77f9ee5 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_2fdc2137400852f93fcdb769b77f9ee5
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_2fdc2137400852f93fcdb769b77f9ee5
Tm_type)
:named kinding_Tm_arrow_2fdc2137400852f93fcdb769b77f9ee5))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt64.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_2fdc2137400852f93fcdb769b77f9ee5)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_2fdc2137400852f93fcdb769b77f9ee5))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_2fdc2137400852f93fcdb769b77f9ee5))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_2fdc2137400852f93fcdb769b77f9ee5))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_2fdc2137400852f93fcdb769b77f9ee5
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt64.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_2fdc2137400852f93fcdb769b77f9ee5)
(and 
;; def=FStar.UInt64.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
(FStar.UInt64.t Dummy_value))
(HasType @x2
(FStar.UInt64.t Dummy_value)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Tm_refine_23b0da4834db6574add6ff4060a1c2ef @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_2fdc2137400852f93fcdb769b77f9ee5.1))

(IsTotFun @x0)

;; def=FStar.UInt64.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.UInt64.t Dummy_value))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_2fdc2137400852f93fcdb769b77f9ee5.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_2fdc2137400852f93fcdb769b77f9ee5))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_2fdc2137400852f93fcdb769b77f9ee5))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_2fdc2137400852f93fcdb769b77f9ee5))


(declare-fun Tm_refine_23ab3cff6c04bd2aba62a95555c2e667 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt64.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_23ab3cff6c04bd2aba62a95555c2e667 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_23ab3cff6c04bd2aba62a95555c2e667 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_23ab3cff6c04bd2aba62a95555c2e667))

:named refinement_kinding_Tm_refine_23ab3cff6c04bd2aba62a95555c2e667))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt64.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_23ab3cff6c04bd2aba62a95555c2e667 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(FStar.UInt64.t Dummy_value))

;; def=Pulse.Class.BoundedIntegers.fst(15,91-15,107); use=Prims.fst(454,7-454,10)
(= (FStar.UInt64.v @x1)
(Prims.op_Modulus (FStar.UInt64.v @x2)
(FStar.UInt64.v @x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_23ab3cff6c04bd2aba62a95555c2e667 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_23ab3cff6c04bd2aba62a95555c2e667))

:named refinement_interpretation_Tm_refine_23ab3cff6c04bd2aba62a95555c2e667))
;;;;;;;;;;;;;;;;haseq for Tm_refine_23ab3cff6c04bd2aba62a95555c2e667
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt64.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_23ab3cff6c04bd2aba62a95555c2e667 @x0
@x1)))
(Valid (Prims.hasEq (FStar.UInt64.t Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_23ab3cff6c04bd2aba62a95555c2e667 @x0
@x1))))
:qid haseqTm_refine_23ab3cff6c04bd2aba62a95555c2e667))

:named haseqTm_refine_23ab3cff6c04bd2aba62a95555c2e667))


;;;;;;;;;;;;;;;;x: FStar.UInt64.t -> y: FStar.UInt64.t -> Prims.Pure FStar.UInt64.t
(declare-fun Tm_arrow_c048f8149dd677eb850c3f8a4b4c12ad () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_c048f8149dd677eb850c3f8a4b4c12ad
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_c048f8149dd677eb850c3f8a4b4c12ad
Tm_type)
:named kinding_Tm_arrow_c048f8149dd677eb850c3f8a4b4c12ad))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt64.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_c048f8149dd677eb850c3f8a4b4c12ad)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_c048f8149dd677eb850c3f8a4b4c12ad))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_c048f8149dd677eb850c3f8a4b4c12ad))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_c048f8149dd677eb850c3f8a4b4c12ad))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_c048f8149dd677eb850c3f8a4b4c12ad
;;; Fact-ids: 
(assert (! 
;; def=FStar.UInt64.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_c048f8149dd677eb850c3f8a4b4c12ad)
(and 
;; def=FStar.UInt64.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and 
;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Prims.fst(454,7-454,10)
(> (BoxInt_proj_0 (FStar.UInt64.v @x2))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Pulse.Class.BoundedIntegers.fst(120,21-120,27); use=Prims.fst(454,7-454,10)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(BoxInt 0))
(Prims.op_Modulus (FStar.UInt64.v @x1)
(FStar.UInt64.v @x2))))


;; def=Pulse.Class.BoundedIntegers.fst(120,31-120,54); use=Prims.fst(454,7-454,10)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(Prims.op_Modulus (FStar.UInt64.v @x1)
(FStar.UInt64.v @x2)))
(BoxInt 18446744073709551615)))

(HasType @x1
(FStar.UInt64.t Dummy_value))
(HasType @x2
(FStar.UInt64.t Dummy_value)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Tm_refine_23ab3cff6c04bd2aba62a95555c2e667 @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_c048f8149dd677eb850c3f8a4b4c12ad.1))

(IsTotFun @x0)

;; def=FStar.UInt64.fsti(54,9-54,10); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.UInt64.t Dummy_value))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_c048f8149dd677eb850c3f8a4b4c12ad.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_c048f8149dd677eb850c3f8a4b4c12ad))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_c048f8149dd677eb850c3f8a4b4c12ad))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_c048f8149dd677eb850c3f8a4b4c12ad))


(declare-fun Tm_abs_326ca1c240b952c0e935a4acf0dd4e3c () Term)
;;;;;;;;;;;;;;;;tot_fun_Tm_abs_326ca1c240b952c0e935a4acf0dd4e3c
;;; Fact-ids: 
(assert (! (and (IsTotFun Tm_abs_326ca1c240b952c0e935a4acf0dd4e3c)

;; def=Pulse.Class.BoundedIntegers.fst(127,37-127,43); use=Pulse.Class.BoundedIntegers.fst(127,37-127,43)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Tm_abs_326ca1c240b952c0e935a4acf0dd4e3c
@x0))
 

:pattern ((ApplyTT Tm_abs_326ca1c240b952c0e935a4acf0dd4e3c
@x0))
:qid tot_fun_Tm_abs_326ca1c240b952c0e935a4acf0dd4e3c))
)
:named tot_fun_Tm_abs_326ca1c240b952c0e935a4acf0dd4e3c))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_326ca1c240b952c0e935a4acf0dd4e3c
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(127,37-127,43); use=Pulse.Class.BoundedIntegers.fst(127,37-127,43)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_326ca1c240b952c0e935a4acf0dd4e3c
@x0)
@x1)
(FStar.UInt64.rem @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_326ca1c240b952c0e935a4acf0dd4e3c
@x0)
@x1))
:qid interpretation_Tm_abs_326ca1c240b952c0e935a4acf0dd4e3c))

:named interpretation_Tm_abs_326ca1c240b952c0e935a4acf0dd4e3c))


(declare-fun Tm_abs_44b16d4735e6200d1cf27b608e00997a () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_44b16d4735e6200d1cf27b608e00997a
;;; Fact-ids: 
(assert (! (HasType Tm_abs_44b16d4735e6200d1cf27b608e00997a
Tm_arrow_2fdc2137400852f93fcdb769b77f9ee5)
:named typing_Tm_abs_44b16d4735e6200d1cf27b608e00997a))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_44b16d4735e6200d1cf27b608e00997a
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(126,38-126,45); use=Pulse.Class.BoundedIntegers.fst(126,38-126,45)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_44b16d4735e6200d1cf27b608e00997a
@x0)
@x1)
(FStar.UInt64.lte @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_44b16d4735e6200d1cf27b608e00997a
@x0)
@x1))
:qid interpretation_Tm_abs_44b16d4735e6200d1cf27b608e00997a))

:named interpretation_Tm_abs_44b16d4735e6200d1cf27b608e00997a))


(declare-fun Tm_abs_843839a7d86259598a366244963893fe () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_843839a7d86259598a366244963893fe
;;; Fact-ids: 
(assert (! (HasType Tm_abs_843839a7d86259598a366244963893fe
Tm_arrow_cdf1b89be74402224e2ce9aab4ffb1b3)
:named typing_Tm_abs_843839a7d86259598a366244963893fe))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_843839a7d86259598a366244963893fe
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(125,37-125,43); use=Pulse.Class.BoundedIntegers.fst(125,37-125,43)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_843839a7d86259598a366244963893fe
@x0)
@x1)
(FStar.UInt64.lt @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_843839a7d86259598a366244963893fe
@x0)
@x1))
:qid interpretation_Tm_abs_843839a7d86259598a366244963893fe))

:named interpretation_Tm_abs_843839a7d86259598a366244963893fe))
(declare-fun Tm_abs_255c03b7587cb24df910ae5057ac3633 () Term)
;;;;;;;;;;;;;;;;tot_fun_Tm_abs_255c03b7587cb24df910ae5057ac3633
;;; Fact-ids: 
(assert (! (and (IsTotFun Tm_abs_255c03b7587cb24df910ae5057ac3633)

;; def=Pulse.Class.BoundedIntegers.fst(124,33-124,53); use=Pulse.Class.BoundedIntegers.fst(124,33-124,53)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Tm_abs_255c03b7587cb24df910ae5057ac3633
@x0))
 

:pattern ((ApplyTT Tm_abs_255c03b7587cb24df910ae5057ac3633
@x0))
:qid tot_fun_Tm_abs_255c03b7587cb24df910ae5057ac3633))
)
:named tot_fun_Tm_abs_255c03b7587cb24df910ae5057ac3633))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_255c03b7587cb24df910ae5057ac3633
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(124,33-124,53); use=Pulse.Class.BoundedIntegers.fst(124,33-124,53)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_255c03b7587cb24df910ae5057ac3633
@x0)
@x1)
(FStar.UInt64.sub @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_255c03b7587cb24df910ae5057ac3633
@x0)
@x1))
:qid interpretation_Tm_abs_255c03b7587cb24df910ae5057ac3633))

:named interpretation_Tm_abs_255c03b7587cb24df910ae5057ac3633))
(declare-fun Tm_abs_ce0ee0237f85cfbcc7bf931e4507ffb6 () Term)
;;;;;;;;;;;;;;;;tot_fun_Tm_abs_ce0ee0237f85cfbcc7bf931e4507ffb6
;;; Fact-ids: 
(assert (! (and (IsTotFun Tm_abs_ce0ee0237f85cfbcc7bf931e4507ffb6)

;; def=Pulse.Class.BoundedIntegers.fst(123,24-123,44); use=Pulse.Class.BoundedIntegers.fst(123,24-123,44)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Tm_abs_ce0ee0237f85cfbcc7bf931e4507ffb6
@x0))
 

:pattern ((ApplyTT Tm_abs_ce0ee0237f85cfbcc7bf931e4507ffb6
@x0))
:qid tot_fun_Tm_abs_ce0ee0237f85cfbcc7bf931e4507ffb6))
)
:named tot_fun_Tm_abs_ce0ee0237f85cfbcc7bf931e4507ffb6))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_ce0ee0237f85cfbcc7bf931e4507ffb6
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(123,24-123,44); use=Pulse.Class.BoundedIntegers.fst(123,24-123,44)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_ce0ee0237f85cfbcc7bf931e4507ffb6
@x0)
@x1)
(FStar.UInt64.add @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_ce0ee0237f85cfbcc7bf931e4507ffb6
@x0)
@x1))
:qid interpretation_Tm_abs_ce0ee0237f85cfbcc7bf931e4507ffb6))

:named interpretation_Tm_abs_ce0ee0237f85cfbcc7bf931e4507ffb6))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: 
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.UInt64.uint_to_t@tok))
:named @kick_partial_app_8487c70b0f994b3dc05119e1f546aef6))

; Encoding query formula : (forall (x: Prims.int). 0 <= x /\ x <= 0xffffffffffffffff ==> FStar.UInt.size x 64) /\
; (forall (any_result: (x: FStar.UInt.uint_t 64 -> Prims.Pure FStar.UInt64.t)).
;     FStar.UInt64.uint_to_t == any_result ==>
;     (forall (x: FStar.UInt64.t) (y: FStar.UInt64.t).
;         (*  - Could not prove post-condition
; *)
;         forall (p: Prims.pure_post FStar.UInt64.t).
;           0 <= FStar.UInt64.v x + FStar.UInt64.v y /\
;           FStar.UInt64.v x + FStar.UInt64.v y <= 0xffffffffffffffff /\
;           (forall (pure_result: FStar.UInt64.t).
;               FStar.UInt64.v pure_result == FStar.UInt64.v x + FStar.UInt64.v y ==> p pure_result) ==>
;           FStar.UInt.size (FStar.UInt64.v x + FStar.UInt64.v y) 64 /\
;           (forall (pure_result: FStar.UInt64.t).
;               FStar.UInt64.v x + FStar.UInt64.v y = FStar.UInt64.v pure_result ==>
;               pure_result == FStar.UInt64.add x y ==>
;               (forall (return_val: FStar.UInt64.t). return_val == pure_result ==> p return_val))) /\
;     (forall (any_result: (x: FStar.UInt64.t -> y: FStar.UInt64.t -> Prims.Pure FStar.UInt64.t)).
;         (fun x y -> FStar.UInt64.add x y) == any_result ==>
;         (forall (x: FStar.UInt64.t) (y: FStar.UInt64.t).
;             (*  - Could not prove post-condition
; *)
;             forall (p: Prims.pure_post FStar.UInt64.t).
;               0 <= FStar.UInt64.v x - FStar.UInt64.v y /\
;               FStar.UInt64.v x - FStar.UInt64.v y <= 0xffffffffffffffff /\
;               (forall (pure_result: FStar.UInt64.t).
;                   FStar.UInt64.v pure_result == FStar.UInt64.v x - FStar.UInt64.v y ==>
;                   p pure_result) ==>
;               FStar.UInt.size (FStar.UInt64.v x - FStar.UInt64.v y) 64 /\
;               (forall (pure_result: FStar.UInt64.t).
;                   FStar.UInt64.v x - FStar.UInt64.v y = FStar.UInt64.v pure_result ==>
;                   pure_result == FStar.UInt64.sub x y ==>
;                   (forall (return_val: FStar.UInt64.t). return_val == pure_result ==> p return_val))
;         ) /\
;         (forall (any_result: (x: FStar.UInt64.t -> y: FStar.UInt64.t -> Prims.Pure FStar.UInt64.t)).
;             (fun x y -> FStar.UInt64.sub x y) == any_result ==>
;             (forall (x: FStar.UInt64.t) (y: FStar.UInt64.t).
;                 (*  - Could not prove post-condition
; *)
;                 FStar.UInt64.lt x y = (FStar.UInt64.v x < FStar.UInt64.v y)) /\
;             (forall (any_result:
;                 (x: FStar.UInt64.t -> y: FStar.UInt64.t
;                     -> b: Prims.bool{b = (FStar.UInt64.v x < FStar.UInt64.v y)})).
;                 (fun x y -> FStar.UInt64.lt x y) == any_result ==>
;                 (forall (x: FStar.UInt64.t) (y: FStar.UInt64.t).
;                     (*  - Could not prove post-condition
; *)
;                     FStar.UInt64.lte x y = (FStar.UInt64.v x <= FStar.UInt64.v y)) /\
;                 (forall (any_result:
;                     (x: FStar.UInt64.t -> y: FStar.UInt64.t
;                         -> b: Prims.bool{b = (FStar.UInt64.v x <= FStar.UInt64.v y)})).
;                     (fun x y -> FStar.UInt64.lte x y) == any_result ==>
;                     (forall (x: FStar.UInt64.t) (y: FStar.UInt64.t).
;                         (*  - Could not prove post-condition
; *)
;                         forall (p: Prims.pure_post FStar.UInt64.t).
;                           FStar.UInt64.v y > 0 /\
;                           (0 <= FStar.UInt64.v x % FStar.UInt64.v y) /\
;                           (FStar.UInt64.v x % FStar.UInt64.v y <= 0xffffffffffffffff) /\
;                           (forall (pure_result: FStar.UInt64.t).
;                               FStar.UInt64.v pure_result == FStar.UInt64.v x % FStar.UInt64.v y ==>
;                               p pure_result) ==>
;                           FStar.UInt64.v y <> 0 /\
;                           (forall (any_result: FStar.UInt64.t).
;                               y == any_result ==>
;                               (forall (pure_result: FStar.UInt64.t).
;                                   FStar.UInt.mod (FStar.UInt64.v x) (FStar.UInt64.v y) =
;                                   FStar.UInt64.v pure_result ==>
;                                   pure_result == FStar.UInt64.rem x y ==>
;                                   (forall (return_val: FStar.UInt64.t).
;                                       return_val == pure_result ==> p return_val)))) /\
;                     (forall (any_result:
;                         (x: FStar.UInt64.t -> y: FStar.UInt64.t -> Prims.Pure FStar.UInt64.t)).
;                         (fun x y -> FStar.UInt64.rem x y) == any_result ==>
;                         (forall (x: FStar.UInt64.t). {:pattern FStar.UInt64.v x}
;                             0 <= FStar.UInt64.v x /\ FStar.UInt64.v x <= 0xffffffffffffffff)))))))


; Context: While encoding a query
; While checking for top-level effects
; While typechecking the top-level declaration `let bounded_int_u64`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and 
;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(122,8-122,30)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
Prims.int)

;; def=Pulse.Class.BoundedIntegers.fst(120,21-120,27); use=Pulse.Class.BoundedIntegers.fst(122,8-122,30)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(BoxInt 0))
@x0))


;; def=Pulse.Class.BoundedIntegers.fst(120,31-120,54); use=Pulse.Class.BoundedIntegers.fst(122,8-122,30)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
@x0)
(BoxInt 18446744073709551615)))
)

;; def=FStar.UInt.fsti(54,28-54,36); use=Pulse.Class.BoundedIntegers.fst(122,8-122,30)
(or label_1

;; def=FStar.UInt.fsti(54,28-54,36); use=Pulse.Class.BoundedIntegers.fst(122,8-122,30)
(Valid 
;; def=FStar.UInt.fsti(54,28-54,36); use=Pulse.Class.BoundedIntegers.fst(122,8-122,30)
(FStar.UInt.size @x0
(BoxInt 64))
)
)
)
 
;;no pats
:qid @query))


;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_arrow_0a7b550d26d1f7783c7c5e1990842388)

;; def=Pulse.Class.BoundedIntegers.fst(10,4-122,30); use=Pulse.Class.BoundedIntegers.fst(10,4-122,30)
(= FStar.UInt64.uint_to_t@tok
@x0)
)

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and (forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
(FStar.UInt64.t Dummy_value))
(HasType @x2
(FStar.UInt64.t Dummy_value)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post (FStar.UInt64.t Dummy_value)))

;; def=Pulse.Class.BoundedIntegers.fst(120,21-120,27); use=Pulse.Class.BoundedIntegers.fst(123,24-123,44)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(BoxInt 0))
(Prims.op_Addition (FStar.UInt64.v @x1)
(FStar.UInt64.v @x2))))


;; def=Pulse.Class.BoundedIntegers.fst(120,31-120,54); use=Pulse.Class.BoundedIntegers.fst(123,24-123,44)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(Prims.op_Addition (FStar.UInt64.v @x1)
(FStar.UInt64.v @x2)))
(BoxInt 18446744073709551615)))


;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(123,24-123,44)
(forall ((@x4 Term))
 (! (implies (and (or label_2
(HasType @x4
(FStar.UInt64.t Dummy_value)))

;; def=Pulse.Class.BoundedIntegers.fst(11,80-11,96); use=Pulse.Class.BoundedIntegers.fst(123,24-123,44)
(or label_3

;; def=Pulse.Class.BoundedIntegers.fst(11,80-11,96); use=Pulse.Class.BoundedIntegers.fst(123,24-123,44)
(= (FStar.UInt64.v @x4)
(Prims.op_Addition (FStar.UInt64.v @x1)
(FStar.UInt64.v @x2)))
)
)

;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(123,24-123,44)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(123,24-123,44)
(ApplyTT @x3
@x4)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(123,24-123,44)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(123,24-123,44)
(ApplyTT @x3
@x4)
)
)
:qid @query.4))
)

;; def=Prims.fst(441,29-441,97); use=Pulse.Class.BoundedIntegers.fst(123,24-123,44)
(and 
;; def=FStar.UInt64.fsti(89,12-89,32); use=Pulse.Class.BoundedIntegers.fst(123,37-123,40)
(or label_4

;; def=FStar.UInt64.fsti(89,12-89,32); use=Pulse.Class.BoundedIntegers.fst(123,37-123,40)
(Valid 
;; def=FStar.UInt64.fsti(89,12-89,32); use=Pulse.Class.BoundedIntegers.fst(123,37-123,40)
(FStar.UInt.size (Prims.op_Addition (FStar.UInt64.v @x1)
(FStar.UInt64.v @x2))
(BoxInt 64))
)
)


;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(123,24-123,44)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(FStar.UInt64.t Dummy_value))

;; def=FStar.UInt64.fsti(90,21-90,36); use=Pulse.Class.BoundedIntegers.fst(123,37-123,40)
(= (Prims.op_Addition (FStar.UInt64.v @x1)
(FStar.UInt64.v @x2))
(FStar.UInt64.v @x4))


;; def=Pulse.Class.BoundedIntegers.fst(123,24-123,44); use=Pulse.Class.BoundedIntegers.fst(123,24-123,44)
(= @x4
(FStar.UInt64.add @x1
@x2))
)

;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(FStar.UInt64.t Dummy_value))

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x5
@x4)
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x3
@x5)
)
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
Tm_arrow_2521536ed7f5dcd6af297af10a60597e)

;; def=Pulse.Class.BoundedIntegers.fst(11,6-123,44); use=Pulse.Class.BoundedIntegers.fst(11,6-123,44)
(= Tm_abs_ce0ee0237f85cfbcc7bf931e4507ffb6
@x1)
)

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and (forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
(FStar.UInt64.t Dummy_value))
(HasType @x3
(FStar.UInt64.t Dummy_value)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post (FStar.UInt64.t Dummy_value)))

;; def=Pulse.Class.BoundedIntegers.fst(120,21-120,27); use=Pulse.Class.BoundedIntegers.fst(124,33-124,53)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(BoxInt 0))
(Prims.op_Subtraction (FStar.UInt64.v @x2)
(FStar.UInt64.v @x3))))


;; def=Pulse.Class.BoundedIntegers.fst(120,31-120,54); use=Pulse.Class.BoundedIntegers.fst(124,33-124,53)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(Prims.op_Subtraction (FStar.UInt64.v @x2)
(FStar.UInt64.v @x3)))
(BoxInt 18446744073709551615)))


;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(124,33-124,53)
(forall ((@x5 Term))
 (! (implies (and (or label_5
(HasType @x5
(FStar.UInt64.t Dummy_value)))

;; def=Pulse.Class.BoundedIntegers.fst(12,89-12,105); use=Pulse.Class.BoundedIntegers.fst(124,33-124,53)
(or label_6

;; def=Pulse.Class.BoundedIntegers.fst(12,89-12,105); use=Pulse.Class.BoundedIntegers.fst(124,33-124,53)
(= (FStar.UInt64.v @x5)
(Prims.op_Subtraction (FStar.UInt64.v @x2)
(FStar.UInt64.v @x3)))
)
)

;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(124,33-124,53)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(124,33-124,53)
(ApplyTT @x4
@x5)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(124,33-124,53)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(124,33-124,53)
(ApplyTT @x4
@x5)
)
)
:qid @query.10))
)

;; def=Prims.fst(441,29-441,97); use=Pulse.Class.BoundedIntegers.fst(124,33-124,53)
(and 
;; def=FStar.UInt64.fsti(117,12-117,32); use=Pulse.Class.BoundedIntegers.fst(124,46-124,49)
(or label_7

;; def=FStar.UInt64.fsti(117,12-117,32); use=Pulse.Class.BoundedIntegers.fst(124,46-124,49)
(Valid 
;; def=FStar.UInt64.fsti(117,12-117,32); use=Pulse.Class.BoundedIntegers.fst(124,46-124,49)
(FStar.UInt.size (Prims.op_Subtraction (FStar.UInt64.v @x2)
(FStar.UInt64.v @x3))
(BoxInt 64))
)
)


;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(124,33-124,53)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(FStar.UInt64.t Dummy_value))

;; def=FStar.UInt64.fsti(118,21-118,36); use=Pulse.Class.BoundedIntegers.fst(124,46-124,49)
(= (Prims.op_Subtraction (FStar.UInt64.v @x2)
(FStar.UInt64.v @x3))
(FStar.UInt64.v @x5))


;; def=Pulse.Class.BoundedIntegers.fst(124,33-124,53); use=Pulse.Class.BoundedIntegers.fst(124,33-124,53)
(= @x5
(FStar.UInt64.sub @x2
@x3))
)

;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(FStar.UInt64.t Dummy_value))

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x6
@x5)
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x4
@x6)
)
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
Tm_arrow_a62958f9d2527d4e1225f6fcc42882e7)

;; def=Pulse.Class.BoundedIntegers.fst(12,4-124,53); use=Pulse.Class.BoundedIntegers.fst(12,4-124,53)
(= Tm_abs_255c03b7587cb24df910ae5057ac3633
@x2)
)

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and (forall ((@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x3
(FStar.UInt64.t Dummy_value))
(HasType @x4
(FStar.UInt64.t Dummy_value)))

;; def=Pulse.Class.BoundedIntegers.fst(13,36-13,51); use=Pulse.Class.BoundedIntegers.fst(125,37-125,43)
(or label_8

;; def=Pulse.Class.BoundedIntegers.fst(13,36-13,51); use=Pulse.Class.BoundedIntegers.fst(125,37-125,43)
(= (FStar.UInt64.lt @x3
@x4)
(Prims.op_LessThan (FStar.UInt64.v @x3)
(FStar.UInt64.v @x4)))
)
)
 
;;no pats
:qid @query.14))

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Tm_arrow_cdf1b89be74402224e2ce9aab4ffb1b3)

;; def=Pulse.Class.BoundedIntegers.fst(13,6-125,43); use=Pulse.Class.BoundedIntegers.fst(13,6-125,43)
(= Tm_abs_843839a7d86259598a366244963893fe
@x3)
)

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and (forall ((@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x4
(FStar.UInt64.t Dummy_value))
(HasType @x5
(FStar.UInt64.t Dummy_value)))

;; def=Pulse.Class.BoundedIntegers.fst(14,37-14,53); use=Pulse.Class.BoundedIntegers.fst(126,38-126,45)
(or label_9

;; def=Pulse.Class.BoundedIntegers.fst(14,37-14,53); use=Pulse.Class.BoundedIntegers.fst(126,38-126,45)
(= (FStar.UInt64.lte @x4
@x5)
(Prims.op_LessThanOrEqual (FStar.UInt64.v @x4)
(FStar.UInt64.v @x5)))
)
)
 
;;no pats
:qid @query.16))

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Tm_arrow_2fdc2137400852f93fcdb769b77f9ee5)

;; def=Pulse.Class.BoundedIntegers.fst(14,6-126,45); use=Pulse.Class.BoundedIntegers.fst(14,6-126,45)
(= Tm_abs_44b16d4735e6200d1cf27b608e00997a
@x4)
)

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and (forall ((@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x5
(FStar.UInt64.t Dummy_value))
(HasType @x6
(FStar.UInt64.t Dummy_value)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(Prims.pure_post (FStar.UInt64.t Dummy_value)))

;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Pulse.Class.BoundedIntegers.fst(127,37-127,43)
(> (BoxInt_proj_0 (FStar.UInt64.v @x6))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Pulse.Class.BoundedIntegers.fst(120,21-120,27); use=Pulse.Class.BoundedIntegers.fst(127,37-127,43)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(BoxInt 0))
(Prims.op_Modulus (FStar.UInt64.v @x5)
(FStar.UInt64.v @x6))))


;; def=Pulse.Class.BoundedIntegers.fst(120,31-120,54); use=Pulse.Class.BoundedIntegers.fst(127,37-127,43)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(Prims.op_Modulus (FStar.UInt64.v @x5)
(FStar.UInt64.v @x6)))
(BoxInt 18446744073709551615)))


;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(127,37-127,43)
(forall ((@x8 Term))
 (! (implies (and (or label_10
(HasType @x8
(FStar.UInt64.t Dummy_value)))

;; def=Pulse.Class.BoundedIntegers.fst(15,91-15,107); use=Pulse.Class.BoundedIntegers.fst(127,37-127,43)
(or label_11

;; def=Pulse.Class.BoundedIntegers.fst(15,91-15,107); use=Pulse.Class.BoundedIntegers.fst(127,37-127,43)
(= (FStar.UInt64.v @x8)
(Prims.op_Modulus (FStar.UInt64.v @x5)
(FStar.UInt64.v @x6)))
)
)

;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(127,37-127,43)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(127,37-127,43)
(ApplyTT @x7
@x8)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(127,37-127,43)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(127,37-127,43)
(ApplyTT @x7
@x8)
)
)
:qid @query.20))
)

;; def=Prims.fst(459,77-459,89); use=Pulse.Class.BoundedIntegers.fst(127,37-127,43)
(and 
;; def=FStar.UInt64.fsti(177,19-177,27); use=Pulse.Class.BoundedIntegers.fst(127,42-127,43)
(or label_12

;; def=FStar.UInt64.fsti(177,19-177,27); use=Pulse.Class.BoundedIntegers.fst(127,42-127,43)
(not (= (FStar.UInt64.v @x6)
(BoxInt 0)))
)


;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(127,37-127,43)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(FStar.UInt64.t Dummy_value))

;; def=FStar.UInt64.fsti(177,15-177,16); use=Pulse.Class.BoundedIntegers.fst(127,37-127,43)
(= @x6
@x8)
)

;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(127,39-127,41)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(FStar.UInt64.t Dummy_value))

;; def=FStar.UInt64.fsti(179,21-179,53); use=Pulse.Class.BoundedIntegers.fst(127,39-127,41)
(= (FStar.UInt.mod (BoxInt 64)
(FStar.UInt64.v @x5)
(FStar.UInt64.v @x6))
(FStar.UInt64.v @x9))


;; def=Pulse.Class.BoundedIntegers.fst(127,37-127,43); use=Pulse.Class.BoundedIntegers.fst(127,37-127,43)
(= @x9
(FStar.UInt64.rem @x5
@x6))
)

;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(FStar.UInt64.t Dummy_value))

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x10
@x9)
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x7
@x10)
)
)
 
;;no pats
:qid @query.23))
)
 
;;no pats
:qid @query.22))
)
 
;;no pats
:qid @query.21))
)
)
 
;;no pats
:qid @query.19))
)
 
;;no pats
:qid @query.18))

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Tm_arrow_c048f8149dd677eb850c3f8a4b4c12ad)

;; def=Pulse.Class.BoundedIntegers.fst(15,6-127,43); use=Pulse.Class.BoundedIntegers.fst(15,6-127,43)
(= Tm_abs_326ca1c240b952c0e935a4acf0dd4e3c
@x5)
)

;; def=Pulse.Class.BoundedIntegers.fst(17,23-19,5); use=Pulse.Class.BoundedIntegers.fst(128,17-128,19)
(forall ((@x6 Term))
 (! (implies (HasType @x6
(FStar.UInt64.t Dummy_value))

;; def=Pulse.Class.BoundedIntegers.fst(120,21-120,54); use=Pulse.Class.BoundedIntegers.fst(128,17-128,19)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(120,21-120,27); use=Pulse.Class.BoundedIntegers.fst(128,17-128,19)
(or label_13

;; def=Pulse.Class.BoundedIntegers.fst(120,21-120,27); use=Pulse.Class.BoundedIntegers.fst(128,17-128,19)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(BoxInt 0))
(FStar.UInt64.v @x6)))
)


;; def=Pulse.Class.BoundedIntegers.fst(120,31-120,54); use=Pulse.Class.BoundedIntegers.fst(128,17-128,19)
(or label_14

;; def=Pulse.Class.BoundedIntegers.fst(120,31-120,54); use=Pulse.Class.BoundedIntegers.fst(128,17-128,19)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(FStar.UInt64.v @x6))
(BoxInt 18446744073709551615)))
)
)
)
 

:pattern ((FStar.UInt64.v @x6))
:qid @query.25))
)
 
;;no pats
:qid @query.24))
)
)
 
;;no pats
:qid @query.17))
)
)
 
;;no pats
:qid @query.15))
)
)
 
;;no pats
:qid @query.13))
)
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.1))
)
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Pulse.Class.BoundedIntegers.bounded_int_u64, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @fuel_irrelevance_Prims.pow2.fuel_instrumented, @query, Prims_interpretation_Tm_arrow_99724436653747ac6f5a6a00c64ff8bc, Prims_pretyping_ae567c2fb75be05905677af440075565, Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_4e06c0d9f21510c76cc9a4373093e200, b2t_def, bool_inversion, bool_typing, equation_FStar.Pervasives.id, equation_FStar.UInt.fits, equation_FStar.UInt.lt, equation_FStar.UInt.lte, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.mod, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt64.lt, equation_FStar.UInt64.lte, equation_Prims.eqtype, equation_Prims.nat, equation_Pulse.Class.BoundedIntegers.bounded_int_int, equation_Pulse.Class.BoundedIntegers.op_Less_Equals, function_token_typing_FStar.Pervasives.id, function_token_typing_Prims.__cache_version_number__, int_inversion, int_typing, interpretation_Tm_abs_9526f9b86538a09423bf79a8b2d28a7b, interpretation_Tm_abs_f4d32f3d705308e5f1a270cda9a29727, lemma_FStar.UInt.pow2_values, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_Division, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_op_Less_Equals, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_7d5d464f1bd9167923b3673db6d066b9, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, token_correspondence_FStar.Pervasives.id, token_correspondence_Pulse.Class.BoundedIntegers.op_Less_Equals, typing_FStar.UInt.fits, typing_FStar.UInt64.v, typing_Prims.int, typing_Tm_abs_9526f9b86538a09423bf79a8b2d28a7b

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let bounded_int_u64


; <Start encoding let bounded_int_u64>

(declare-fun Pulse.Class.BoundedIntegers.bounded_int_u64 (Dummy_sort) Term)



(declare-fun Tm_abs_3a550d7fc388328ce7824cdc5c854d83 () Term)
;;;;;;;;;;;;;;;;x: FStar.UInt64.t -> Prims.GTot Prims.int
(declare-fun Tm_ghost_arrow_907a75c0b80b0310256a775327765977 () Term)
(declare-fun Tm_abs_b264ffbb62cdda235d25000972d6bc9e () Term)
(declare-fun Tm_abs_ce0ee0237f85cfbcc7bf931e4507ffb6 () Term)
(declare-fun Tm_abs_255c03b7587cb24df910ae5057ac3633 () Term)
(declare-fun Tm_refine_0d44f95597fc6ce8f03594c4f76be322 (Term Term) Term)
;;;;;;;;;;;;;;;;x: FStar.UInt64.t -> y: FStar.UInt64.t -> b: Prims.bool{b = (FStar.UInt64.v x < FStar.UInt64.v y)}
(declare-fun Tm_arrow_cdf1b89be74402224e2ce9aab4ffb1b3 () Term)
(declare-fun Tm_abs_843839a7d86259598a366244963893fe () Term)
(declare-fun Tm_refine_23b0da4834db6574add6ff4060a1c2ef (Term Term) Term)
;;;;;;;;;;;;;;;;x: FStar.UInt64.t -> y: FStar.UInt64.t -> b: Prims.bool{b = (FStar.UInt64.v x <= FStar.UInt64.v y)}
(declare-fun Tm_arrow_2fdc2137400852f93fcdb769b77f9ee5 () Term)
(declare-fun Tm_abs_44b16d4735e6200d1cf27b608e00997a () Term)
(declare-fun Tm_abs_326ca1c240b952c0e935a4acf0dd4e3c () Term)

; </end encoding let bounded_int_u64>

;;;;;;;;;;;;;;;;typing_Tm_abs_b264ffbb62cdda235d25000972d6bc9e
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u64; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_abs_b264ffbb62cdda235d25000972d6bc9e
Tm_ghost_arrow_907a75c0b80b0310256a775327765977)
:named typing_Tm_abs_b264ffbb62cdda235d25000972d6bc9e))
;;;;;;;;;;;;;;;;typing_Tm_abs_843839a7d86259598a366244963893fe
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u64; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_abs_843839a7d86259598a366244963893fe
Tm_arrow_cdf1b89be74402224e2ce9aab4ffb1b3)
:named typing_Tm_abs_843839a7d86259598a366244963893fe))
;;;;;;;;;;;;;;;;typing_Tm_abs_44b16d4735e6200d1cf27b608e00997a
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u64; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_abs_44b16d4735e6200d1cf27b608e00997a
Tm_arrow_2fdc2137400852f93fcdb769b77f9ee5)
:named typing_Tm_abs_44b16d4735e6200d1cf27b608e00997a))
;;;;;;;;;;;;;;;;typing_Tm_abs_3a550d7fc388328ce7824cdc5c854d83
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u64; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_abs_3a550d7fc388328ce7824cdc5c854d83
Tm_arrow_3a9c22ddc54716caa0276c05e792d97e)
:named typing_Tm_abs_3a550d7fc388328ce7824cdc5c854d83))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u64; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(119,9-119,24); use=Pulse.Class.BoundedIntegers.fst(119,9-119,24)
(forall ((@u0 Dummy_sort))
 (! (HasType (Pulse.Class.BoundedIntegers.bounded_int_u64 @u0)
(Pulse.Class.BoundedIntegers.bounded_int (FStar.UInt64.t Dummy_value)))
 

:pattern ((Pulse.Class.BoundedIntegers.bounded_int_u64 @u0))
:qid typing_Pulse.Class.BoundedIntegers.bounded_int_u64))

:named typing_Pulse.Class.BoundedIntegers.bounded_int_u64))
;;;;;;;;;;;;;;;;tot_fun_Tm_abs_ce0ee0237f85cfbcc7bf931e4507ffb6
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u64; Namespace Pulse.Class.BoundedIntegers
(assert (! (and (IsTotFun Tm_abs_ce0ee0237f85cfbcc7bf931e4507ffb6)

;; def=Pulse.Class.BoundedIntegers.fst(123,24-123,44); use=Pulse.Class.BoundedIntegers.fst(123,24-123,44)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Tm_abs_ce0ee0237f85cfbcc7bf931e4507ffb6
@x0))
 

:pattern ((ApplyTT Tm_abs_ce0ee0237f85cfbcc7bf931e4507ffb6
@x0))
:qid tot_fun_Tm_abs_ce0ee0237f85cfbcc7bf931e4507ffb6))
)
:named tot_fun_Tm_abs_ce0ee0237f85cfbcc7bf931e4507ffb6))
;;;;;;;;;;;;;;;;tot_fun_Tm_abs_326ca1c240b952c0e935a4acf0dd4e3c
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u64; Namespace Pulse.Class.BoundedIntegers
(assert (! (and (IsTotFun Tm_abs_326ca1c240b952c0e935a4acf0dd4e3c)

;; def=Pulse.Class.BoundedIntegers.fst(127,37-127,43); use=Pulse.Class.BoundedIntegers.fst(127,37-127,43)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Tm_abs_326ca1c240b952c0e935a4acf0dd4e3c
@x0))
 

:pattern ((ApplyTT Tm_abs_326ca1c240b952c0e935a4acf0dd4e3c
@x0))
:qid tot_fun_Tm_abs_326ca1c240b952c0e935a4acf0dd4e3c))
)
:named tot_fun_Tm_abs_326ca1c240b952c0e935a4acf0dd4e3c))
;;;;;;;;;;;;;;;;tot_fun_Tm_abs_255c03b7587cb24df910ae5057ac3633
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u64; Namespace Pulse.Class.BoundedIntegers
(assert (! (and (IsTotFun Tm_abs_255c03b7587cb24df910ae5057ac3633)

;; def=Pulse.Class.BoundedIntegers.fst(124,33-124,53); use=Pulse.Class.BoundedIntegers.fst(124,33-124,53)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Tm_abs_255c03b7587cb24df910ae5057ac3633
@x0))
 

:pattern ((ApplyTT Tm_abs_255c03b7587cb24df910ae5057ac3633
@x0))
:qid tot_fun_Tm_abs_255c03b7587cb24df910ae5057ac3633))
)
:named tot_fun_Tm_abs_255c03b7587cb24df910ae5057ac3633))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u64; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,28-14,54); use=Pulse.Class.BoundedIntegers.fst(120,4-128,19)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_23b0da4834db6574add6ff4060a1c2ef @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_23b0da4834db6574add6ff4060a1c2ef @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_23b0da4834db6574add6ff4060a1c2ef))

:named refinement_kinding_Tm_refine_23b0da4834db6574add6ff4060a1c2ef))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u64; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(13,27-13,52); use=Pulse.Class.BoundedIntegers.fst(120,4-128,19)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_0d44f95597fc6ce8f03594c4f76be322 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_0d44f95597fc6ce8f03594c4f76be322 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_0d44f95597fc6ce8f03594c4f76be322))

:named refinement_kinding_Tm_refine_0d44f95597fc6ce8f03594c4f76be322))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u64; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,28-14,54); use=Pulse.Class.BoundedIntegers.fst(120,4-128,19)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_23b0da4834db6574add6ff4060a1c2ef @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.bool)

;; def=Pulse.Class.BoundedIntegers.fst(14,37-14,53); use=Pulse.Class.BoundedIntegers.fst(120,4-128,19)
(= @x1
(Prims.op_LessThanOrEqual (FStar.UInt64.v @x2)
(FStar.UInt64.v @x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_23b0da4834db6574add6ff4060a1c2ef @x2
@x3)))
:qid refinement_interpretation_Tm_refine_23b0da4834db6574add6ff4060a1c2ef))

:named refinement_interpretation_Tm_refine_23b0da4834db6574add6ff4060a1c2ef))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u64; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(13,27-13,52); use=Pulse.Class.BoundedIntegers.fst(120,4-128,19)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_0d44f95597fc6ce8f03594c4f76be322 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.bool)

;; def=Pulse.Class.BoundedIntegers.fst(13,36-13,51); use=Pulse.Class.BoundedIntegers.fst(120,4-128,19)
(= @x1
(Prims.op_LessThan (FStar.UInt64.v @x2)
(FStar.UInt64.v @x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_0d44f95597fc6ce8f03594c4f76be322 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_0d44f95597fc6ce8f03594c4f76be322))

:named refinement_interpretation_Tm_refine_0d44f95597fc6ce8f03594c4f76be322))
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_907a75c0b80b0310256a775327765977
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u64; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_ghost_arrow_907a75c0b80b0310256a775327765977
Tm_type)
:named kinding_Tm_ghost_arrow_907a75c0b80b0310256a775327765977))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_cdf1b89be74402224e2ce9aab4ffb1b3
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u64; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_arrow_cdf1b89be74402224e2ce9aab4ffb1b3
Tm_type)
:named kinding_Tm_arrow_cdf1b89be74402224e2ce9aab4ffb1b3))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_2fdc2137400852f93fcdb769b77f9ee5
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u64; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_arrow_2fdc2137400852f93fcdb769b77f9ee5
Tm_type)
:named kinding_Tm_arrow_2fdc2137400852f93fcdb769b77f9ee5))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_ce0ee0237f85cfbcc7bf931e4507ffb6
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u64; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(123,24-123,44); use=Pulse.Class.BoundedIntegers.fst(123,24-123,44)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_ce0ee0237f85cfbcc7bf931e4507ffb6
@x0)
@x1)
(FStar.UInt64.add @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_ce0ee0237f85cfbcc7bf931e4507ffb6
@x0)
@x1))
:qid interpretation_Tm_abs_ce0ee0237f85cfbcc7bf931e4507ffb6))

:named interpretation_Tm_abs_ce0ee0237f85cfbcc7bf931e4507ffb6))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_b264ffbb62cdda235d25000972d6bc9e
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u64; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(121,18-121,34); use=Pulse.Class.BoundedIntegers.fst(121,18-121,34)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_b264ffbb62cdda235d25000972d6bc9e
@x0)
(FStar.UInt64.v @x0))
 

:pattern ((ApplyTT Tm_abs_b264ffbb62cdda235d25000972d6bc9e
@x0))
:qid interpretation_Tm_abs_b264ffbb62cdda235d25000972d6bc9e))

:named interpretation_Tm_abs_b264ffbb62cdda235d25000972d6bc9e))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_843839a7d86259598a366244963893fe
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u64; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(125,37-125,43); use=Pulse.Class.BoundedIntegers.fst(125,37-125,43)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_843839a7d86259598a366244963893fe
@x0)
@x1)
(FStar.UInt64.lt @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_843839a7d86259598a366244963893fe
@x0)
@x1))
:qid interpretation_Tm_abs_843839a7d86259598a366244963893fe))

:named interpretation_Tm_abs_843839a7d86259598a366244963893fe))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_44b16d4735e6200d1cf27b608e00997a
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u64; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(126,38-126,45); use=Pulse.Class.BoundedIntegers.fst(126,38-126,45)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_44b16d4735e6200d1cf27b608e00997a
@x0)
@x1)
(FStar.UInt64.lte @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_44b16d4735e6200d1cf27b608e00997a
@x0)
@x1))
:qid interpretation_Tm_abs_44b16d4735e6200d1cf27b608e00997a))

:named interpretation_Tm_abs_44b16d4735e6200d1cf27b608e00997a))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_3a550d7fc388328ce7824cdc5c854d83
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u64; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(120,21-120,54); use=Pulse.Class.BoundedIntegers.fst(120,21-120,54)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_3a550d7fc388328ce7824cdc5c854d83
@x0)
(Prims.l_and (Prims.b2t (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(BoxInt 0))
@x0))
(Prims.b2t (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
@x0)
(BoxInt 18446744073709551615)))))
 

:pattern ((ApplyTT Tm_abs_3a550d7fc388328ce7824cdc5c854d83
@x0))
:qid interpretation_Tm_abs_3a550d7fc388328ce7824cdc5c854d83))

:named interpretation_Tm_abs_3a550d7fc388328ce7824cdc5c854d83))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_326ca1c240b952c0e935a4acf0dd4e3c
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u64; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(127,37-127,43); use=Pulse.Class.BoundedIntegers.fst(127,37-127,43)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_326ca1c240b952c0e935a4acf0dd4e3c
@x0)
@x1)
(FStar.UInt64.rem @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_326ca1c240b952c0e935a4acf0dd4e3c
@x0)
@x1))
:qid interpretation_Tm_abs_326ca1c240b952c0e935a4acf0dd4e3c))

:named interpretation_Tm_abs_326ca1c240b952c0e935a4acf0dd4e3c))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_255c03b7587cb24df910ae5057ac3633
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u64; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(124,33-124,53); use=Pulse.Class.BoundedIntegers.fst(124,33-124,53)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_255c03b7587cb24df910ae5057ac3633
@x0)
@x1)
(FStar.UInt64.sub @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_255c03b7587cb24df910ae5057ac3633
@x0)
@x1))
:qid interpretation_Tm_abs_255c03b7587cb24df910ae5057ac3633))

:named interpretation_Tm_abs_255c03b7587cb24df910ae5057ac3633))
;;;;;;;;;;;;;;;;haseq for Tm_refine_23b0da4834db6574add6ff4060a1c2ef
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u64; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,28-14,54); use=Pulse.Class.BoundedIntegers.fst(120,4-128,19)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_23b0da4834db6574add6ff4060a1c2ef @x0
@x1)))
(Valid (Prims.hasEq Prims.bool)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_23b0da4834db6574add6ff4060a1c2ef @x0
@x1))))
:qid haseqTm_refine_23b0da4834db6574add6ff4060a1c2ef))

:named haseqTm_refine_23b0da4834db6574add6ff4060a1c2ef))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0d44f95597fc6ce8f03594c4f76be322
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u64; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(13,27-13,52); use=Pulse.Class.BoundedIntegers.fst(120,4-128,19)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_0d44f95597fc6ce8f03594c4f76be322 @x0
@x1)))
(Valid (Prims.hasEq Prims.bool)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_0d44f95597fc6ce8f03594c4f76be322 @x0
@x1))))
:qid haseqTm_refine_0d44f95597fc6ce8f03594c4f76be322))

:named haseqTm_refine_0d44f95597fc6ce8f03594c4f76be322))
;;;;;;;;;;;;;;;;Equation for Pulse.Class.BoundedIntegers.bounded_int_u64
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u64; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(119,9-119,24); use=Pulse.Class.BoundedIntegers.fst(119,9-119,24)
(forall ((@u0 Dummy_sort))
 (! (= 
;; def=Pulse.Class.BoundedIntegers.fst(119,9-119,24); use=Pulse.Class.BoundedIntegers.fst(119,9-119,24)
(Pulse.Class.BoundedIntegers.bounded_int_u64 @u0)

(Pulse.Class.BoundedIntegers.Mkbounded_int (FStar.UInt64.t Dummy_value)
Tm_abs_3a550d7fc388328ce7824cdc5c854d83
Tm_abs_b264ffbb62cdda235d25000972d6bc9e
FStar.UInt64.uint_to_t@tok
Tm_abs_ce0ee0237f85cfbcc7bf931e4507ffb6
Tm_abs_255c03b7587cb24df910ae5057ac3633
Tm_abs_843839a7d86259598a366244963893fe
Tm_abs_44b16d4735e6200d1cf27b608e00997a
Tm_abs_326ca1c240b952c0e935a4acf0dd4e3c
Tm_unit))
 

:pattern (
;; def=Pulse.Class.BoundedIntegers.fst(119,9-119,24); use=Pulse.Class.BoundedIntegers.fst(119,9-119,24)
(Pulse.Class.BoundedIntegers.bounded_int_u64 @u0)
)
:qid equation_Pulse.Class.BoundedIntegers.bounded_int_u64))

:named equation_Pulse.Class.BoundedIntegers.bounded_int_u64))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u64; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=FStar.UInt64.fsti(54,9-54,10); use=Pulse.Class.BoundedIntegers.fst(120,4-128,19)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_ghost_arrow_907a75c0b80b0310256a775327765977)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_ghost_arrow_907a75c0b80b0310256a775327765977))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_ghost_arrow_907a75c0b80b0310256a775327765977))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_ghost_arrow_907a75c0b80b0310256a775327765977))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u64; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=FStar.UInt64.fsti(54,9-54,10); use=Pulse.Class.BoundedIntegers.fst(120,4-128,19)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_cdf1b89be74402224e2ce9aab4ffb1b3)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_cdf1b89be74402224e2ce9aab4ffb1b3))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_cdf1b89be74402224e2ce9aab4ffb1b3))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_cdf1b89be74402224e2ce9aab4ffb1b3))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u64; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=FStar.UInt64.fsti(54,9-54,10); use=Pulse.Class.BoundedIntegers.fst(120,4-128,19)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_2fdc2137400852f93fcdb769b77f9ee5)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_2fdc2137400852f93fcdb769b77f9ee5))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_2fdc2137400852f93fcdb769b77f9ee5))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_2fdc2137400852f93fcdb769b77f9ee5))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_907a75c0b80b0310256a775327765977
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u64; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=FStar.UInt64.fsti(54,9-54,10); use=Pulse.Class.BoundedIntegers.fst(120,4-128,19)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_ghost_arrow_907a75c0b80b0310256a775327765977)

;; def=FStar.UInt64.fsti(54,9-54,10); use=Pulse.Class.BoundedIntegers.fst(120,4-128,19)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.UInt64.t Dummy_value))
(HasType (ApplyTT @x0
@x1)
Prims.int))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_ghost_arrow_907a75c0b80b0310256a775327765977.1))
)
 

:pattern ((HasTypeZ @x0
Tm_ghost_arrow_907a75c0b80b0310256a775327765977))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_ghost_arrow_907a75c0b80b0310256a775327765977))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_ghost_arrow_907a75c0b80b0310256a775327765977))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_cdf1b89be74402224e2ce9aab4ffb1b3
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u64; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=FStar.UInt64.fsti(54,9-54,10); use=Pulse.Class.BoundedIntegers.fst(120,4-128,19)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_cdf1b89be74402224e2ce9aab4ffb1b3)
(and 
;; def=FStar.UInt64.fsti(54,9-54,10); use=Pulse.Class.BoundedIntegers.fst(120,4-128,19)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
(FStar.UInt64.t Dummy_value))
(HasType @x2
(FStar.UInt64.t Dummy_value)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Tm_refine_0d44f95597fc6ce8f03594c4f76be322 @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_cdf1b89be74402224e2ce9aab4ffb1b3.1))

(IsTotFun @x0)

;; def=FStar.UInt64.fsti(54,9-54,10); use=Pulse.Class.BoundedIntegers.fst(120,4-128,19)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.UInt64.t Dummy_value))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_cdf1b89be74402224e2ce9aab4ffb1b3.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_cdf1b89be74402224e2ce9aab4ffb1b3))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_cdf1b89be74402224e2ce9aab4ffb1b3))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_cdf1b89be74402224e2ce9aab4ffb1b3))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_2fdc2137400852f93fcdb769b77f9ee5
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u64; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=FStar.UInt64.fsti(54,9-54,10); use=Pulse.Class.BoundedIntegers.fst(120,4-128,19)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_2fdc2137400852f93fcdb769b77f9ee5)
(and 
;; def=FStar.UInt64.fsti(54,9-54,10); use=Pulse.Class.BoundedIntegers.fst(120,4-128,19)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
(FStar.UInt64.t Dummy_value))
(HasType @x2
(FStar.UInt64.t Dummy_value)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Tm_refine_23b0da4834db6574add6ff4060a1c2ef @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_2fdc2137400852f93fcdb769b77f9ee5.1))

(IsTotFun @x0)

;; def=FStar.UInt64.fsti(54,9-54,10); use=Pulse.Class.BoundedIntegers.fst(120,4-128,19)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.UInt64.t Dummy_value))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_2fdc2137400852f93fcdb769b77f9ee5.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_2fdc2137400852f93fcdb769b77f9ee5))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_2fdc2137400852f93fcdb769b77f9ee5))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_2fdc2137400852f93fcdb769b77f9ee5))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_u64; Namespace Pulse.Class.BoundedIntegers
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.UInt64.uint_to_t@tok))
:named @kick_partial_app_8487c70b0f994b3dc05119e1f546aef6))
(push) ;; push{2

; Starting query at Pulse.Class.BoundedIntegers.fst(131,0-136,1)

(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)








; Encoding query formula : (forall (x: FStar.UInt64.t).
;     Pulse.Class.BoundedIntegers.v x >= 0 /\
;     Pulse.Class.BoundedIntegers.v x <=
;     Pulse.Class.BoundedIntegers.v (0xffffffffffffffffuL <: FStar.UInt64.t)) /\
; (forall (x: Prims.nat).
;     x <= Pulse.Class.BoundedIntegers.v (0xffffffffffffffffuL <: FStar.UInt64.t) ==>
;     Pulse.Class.BoundedIntegers.fits x)


; Context: While encoding a query
; While checking for top-level effects
; While typechecking the top-level declaration `let bounded_unsigned_u64`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=Pulse.Class.BoundedIntegers.fst(45,21-48,3); use=Pulse.Class.BoundedIntegers.fst(135,15-135,17)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(46,4-46,73); use=Pulse.Class.BoundedIntegers.fst(135,15-135,17)
(forall ((@x0 Term))
 (! (implies (HasType @x0
(FStar.UInt64.t Dummy_value))

;; def=Pulse.Class.BoundedIntegers.fst(46,19-46,72); use=Pulse.Class.BoundedIntegers.fst(135,15-135,17)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(46,19-46,27); use=Pulse.Class.BoundedIntegers.fst(135,15-135,17)
(or label_1

;; def=Pulse.Class.BoundedIntegers.fst(46,19-46,27); use=Pulse.Class.BoundedIntegers.fst(135,15-135,17)
(>= (BoxInt_proj_0 (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
(FStar.UInt64.t Dummy_value))
(Pulse.Class.BoundedIntegers.bounded_int_u64 Dummy_value))
@x0))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Pulse.Class.BoundedIntegers.fst(46,53-46,71); use=Pulse.Class.BoundedIntegers.fst(135,15-135,17)
(or label_2

;; def=Pulse.Class.BoundedIntegers.fst(46,53-46,71); use=Pulse.Class.BoundedIntegers.fst(135,15-135,17)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
(FStar.UInt64.t Dummy_value))
(Pulse.Class.BoundedIntegers.bounded_int_u64 Dummy_value))
@x0))
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
(FStar.UInt64.t Dummy_value))
(Pulse.Class.BoundedIntegers.bounded_int_u64 Dummy_value))
(FStar.UInt64.uint_to_t (BoxInt 18446744073709551615)))))
)
)
)
 
;;no pats
:qid @query))


;; def=Pulse.Class.BoundedIntegers.fst(47,4-47,52); use=Pulse.Class.BoundedIntegers.fst(135,15-135,17)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
Prims.nat)

;; def=Pulse.Class.BoundedIntegers.fst(47,21-47,37); use=Pulse.Class.BoundedIntegers.fst(135,15-135,17)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
@x0)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
(FStar.UInt64.t Dummy_value))
(Pulse.Class.BoundedIntegers.bounded_int_u64 Dummy_value))
(FStar.UInt64.uint_to_t (BoxInt 18446744073709551615)))))
)

;; def=Pulse.Class.BoundedIntegers.fst(47,42-47,51); use=Pulse.Class.BoundedIntegers.fst(135,15-135,17)
(or label_3

;; def=Pulse.Class.BoundedIntegers.fst(47,42-47,51); use=Pulse.Class.BoundedIntegers.fst(135,15-135,17)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(47,42-47,51); use=Pulse.Class.BoundedIntegers.fst(135,15-135,17)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.fits@tok
(FStar.UInt64.t Dummy_value))
(Pulse.Class.BoundedIntegers.bounded_int_u64 Dummy_value))
@x0)
)
)
)
 
;;no pats
:qid @query.1))
)
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Pulse.Class.BoundedIntegers.bounded_unsigned_u64, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @fuel_irrelevance_Prims.pow2.fuel_instrumented, @query, FStar.UInt64_pretyping_0a6d0526dc068d94bc7967094b2dd513, Prims_pretyping_ae567c2fb75be05905677af440075565, Pulse.Class.BoundedIntegers_interpretation_Tm_ghost_arrow_7c7fd6f0bd92993d0eb053fc53d3647b, Pulse.Class.BoundedIntegers_interpretation_Tm_ghost_arrow_d16b792c8388af6cbe3d3e4ea5d87ced, b2t_def, bool_inversion, bool_typing, data_elim_Pulse.Class.BoundedIntegers.Mkbounded_int, equation_FStar.Pervasives.id, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_Prims.nat, equation_Pulse.Class.BoundedIntegers.bounded_int_int, equation_Pulse.Class.BoundedIntegers.bounded_int_u64, equation_Pulse.Class.BoundedIntegers.fits, equation_Pulse.Class.BoundedIntegers.fits_t, equation_Pulse.Class.BoundedIntegers.op_Less_Equals, equation_Pulse.Class.BoundedIntegers.v, function_token_typing_FStar.Pervasives.id, function_token_typing_FStar.UInt64.uint_to_t, function_token_typing_Prims.__cache_version_number__, int_inversion, int_typing, interpretation_Tm_abs_3a550d7fc388328ce7824cdc5c854d83, interpretation_Tm_abs_9526f9b86538a09423bf79a8b2d28a7b, interpretation_Tm_abs_b264ffbb62cdda235d25000972d6bc9e, interpretation_Tm_abs_d2b36eee66dd8372042cd1c49358f9dc, interpretation_Tm_abs_f4d32f3d705308e5f1a270cda9a29727, interpretation_Tm_abs_faa1351076bca4f1d410c09beaffa289, l_and-interp, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt64.vu_inv, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_fits, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_op_Less_Equals, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_v, refinement_interpretation_Tm_refine_2c9509c4fdf356ea8b390762a509ebbb, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_9b6814fd42e45bedf339f7a6d66952ad, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, token_correspondence_FStar.Pervasives.id, token_correspondence_Pulse.Class.BoundedIntegers.fits, token_correspondence_Pulse.Class.BoundedIntegers.op_Less_Equals, token_correspondence_Pulse.Class.BoundedIntegers.v, typing_FStar.UInt.fits, typing_FStar.UInt64.v, typing_Pulse.Class.BoundedIntegers.bounded_int_u64

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let bounded_unsigned_u64


; <Start encoding let bounded_unsigned_u64>

(declare-fun Pulse.Class.BoundedIntegers.bounded_unsigned_u64 (Dummy_sort) Term)

; </end encoding let bounded_unsigned_u64>


; encoding sigelt let test


; <Start encoding let test>

(declare-fun Pulse.Class.BoundedIntegers.test (Term Term Term) Term)
;;;;;;;;;;;;;;;;t: Prims.eqtype -> {| _: bounded_unsigned t |} -> x: t -> Prims.GTot Prims.int
(declare-fun Tm_ghost_arrow_007d245278473197ba994c4c3116f6b3 () Term)
(declare-fun Pulse.Class.BoundedIntegers.test@tok () Term)


; </end encoding let test>

(push) ;; push{2

; Starting query at Pulse.Class.BoundedIntegers.fst(140,67-140,72)

(declare-fun label_1 () Bool)

(declare-fun Tm_refine_9d79ca37d0e830469d08a27aadb313bf (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(140,31-140,64); use=Pulse.Class.BoundedIntegers.fst(140,31-140,64)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_9d79ca37d0e830469d08a27aadb313bf @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_9d79ca37d0e830469d08a27aadb313bf @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_9d79ca37d0e830469d08a27aadb313bf))

:named refinement_kinding_Tm_refine_9d79ca37d0e830469d08a27aadb313bf))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(140,31-140,64); use=Pulse.Class.BoundedIntegers.fst(140,31-140,64)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_9d79ca37d0e830469d08a27aadb313bf @x2))
(and (HasTypeFuel @u0
@x1
(FStar.UInt32.t Dummy_value))

;; def=Pulse.Class.BoundedIntegers.fst(140,51-140,61); use=Pulse.Class.BoundedIntegers.fst(140,51-140,61)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(140,51-140,61); use=Pulse.Class.BoundedIntegers.fst(140,51-140,61)
(Pulse.Class.BoundedIntegers.ok (FStar.UInt32.t Dummy_value)
(Pulse.Class.BoundedIntegers.bounded_int_u32 Dummy_value)
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Plus@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
@x2
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_9d79ca37d0e830469d08a27aadb313bf @x2)))
:qid refinement_interpretation_Tm_refine_9d79ca37d0e830469d08a27aadb313bf))

:named refinement_interpretation_Tm_refine_9d79ca37d0e830469d08a27aadb313bf))
;;;;;;;;;;;;;;;;haseq for Tm_refine_9d79ca37d0e830469d08a27aadb313bf
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(140,31-140,64); use=Pulse.Class.BoundedIntegers.fst(140,31-140,64)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_9d79ca37d0e830469d08a27aadb313bf @x0)))
(Valid (Prims.hasEq (FStar.UInt32.t Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_9d79ca37d0e830469d08a27aadb313bf @x0))))
:qid haseqTm_refine_9d79ca37d0e830469d08a27aadb313bf))

:named haseqTm_refine_9d79ca37d0e830469d08a27aadb313bf))




; Encoding query formula : forall (x: FStar.UInt32.t)
;   (y: FStar.UInt32.t{Pulse.Class.BoundedIntegers.ok Pulse.Class.BoundedIntegers.op_Plus x y}).
;   (*  - Could not prove post-condition
; *)
;   Prims.auto_squash (Pulse.Class.BoundedIntegers.bounded_int_u32.fits (Pulse.Class.BoundedIntegers.bounded_int_u32
;             .v x +
;           Pulse.Class.BoundedIntegers.bounded_int_u32.v y))


; Context: While encoding a query
; While typechecking the top-level declaration `let add_u32`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
(FStar.UInt32.t Dummy_value))
(HasType @x1
(Tm_refine_9d79ca37d0e830469d08a27aadb313bf @x0)))

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(140,69-140,70)
(or label_1

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(140,69-140,70)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(140,69-140,70)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
(FStar.UInt32.t Dummy_value))
(Pulse.Class.BoundedIntegers.bounded_int_u32 Dummy_value))
(Prims.op_Addition (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
(FStar.UInt32.t Dummy_value))
(Pulse.Class.BoundedIntegers.bounded_int_u32 Dummy_value))
@x0)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
(FStar.UInt32.t Dummy_value))
(Pulse.Class.BoundedIntegers.bounded_int_u32 Dummy_value))
@x1)))
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Pulse.Class.BoundedIntegers.add_u32, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, Prims_pretyping_ae567c2fb75be05905677af440075565, equation_Pulse.Class.BoundedIntegers.bounded_int_int, equation_Pulse.Class.BoundedIntegers.bounded_int_u32, equation_Pulse.Class.BoundedIntegers.ok, equation_Pulse.Class.BoundedIntegers.op_Plus, equation_Pulse.Class.BoundedIntegers.v, function_token_typing_Prims.__cache_version_number__, interpretation_Tm_abs_505c9b700f5dda804797fc6511aa37e2, interpretation_Tm_abs_d5877b1288b93e8d3523f2652f6bfc84, interpretation_Tm_abs_faa1351076bca4f1d410c09beaffa289, proj_equation_Pulse.Class.BoundedIntegers.Mkbounded_int_v, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_op_Plus, refinement_interpretation_Tm_refine_9d79ca37d0e830469d08a27aadb313bf, token_correspondence_Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v, token_correspondence_Pulse.Class.BoundedIntegers.op_Plus, token_correspondence_Pulse.Class.BoundedIntegers.v

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at Pulse.Class.BoundedIntegers.fst(140,0-140,72)

(declare-fun label_1 () Bool)




; Encoding query formula : forall (x: FStar.UInt32.t).
;   (*  - Subtyping check failed
;   - Expected type Type0 got type Type0
; *)
;   forall (y: FStar.UInt32.t).
;     (*  - Subtyping check failed
;   - Expected type _: Prims.int -> _: Prims.int -> Prims.int
;     got type x: Prims.int -> y: Prims.int -> Prims.Pure Prims.int
; *)
;     forall (x: Prims.int) (y: Prims.int).
;       Prims.auto_squash (Pulse.Class.BoundedIntegers.bounded_int_int.fits (Pulse.Class.BoundedIntegers.bounded_int_int
;                 .v x +
;               Pulse.Class.BoundedIntegers.bounded_int_int.v y))


; Context: While encoding a query
; While checking for top-level effects
; While typechecking the top-level declaration `let add_u32`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (HasType @x0
(FStar.UInt32.t Dummy_value))

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(140,67-140,72)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.UInt32.t Dummy_value))

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(140,67-140,72)
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
Prims.int)
(HasType @x3
Prims.int))

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(140,55-140,56)
(or label_1

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(140,67-140,72)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(140,67-140,72)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(Prims.op_Addition (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
@x2)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
@x3)))
)
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Pulse.Class.BoundedIntegers.add_u32, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @query, equation_Pulse.Class.BoundedIntegers.bounded_int_int, interpretation_Tm_abs_e55f1efb8e787e6fd29c4794771ae0d5, primitive_Prims.op_Addition, proj_equation_Pulse.Class.BoundedIntegers.Mkbounded_int_fits, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_fits, token_correspondence_Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits, true_interp

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let add_u32


; <Start encoding let add_u32>


(declare-fun Tm_refine_9d79ca37d0e830469d08a27aadb313bf (Term) Term)
(declare-fun Pulse.Class.BoundedIntegers.add_u32 (Term Term) Term)


;;;;;;;;;;;;;;;;x: FStar.UInt32.t -> y: FStar.UInt32.t{ok op_Plus x y} -> FStar.UInt32.t
(declare-fun Tm_arrow_1750e93fbf01a248b1241f650d5de162 () Term)
(declare-fun Pulse.Class.BoundedIntegers.add_u32@tok () Term)




; </end encoding let add_u32>

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.safe_add; Namespace Pulse.Class.BoundedIntegers
(assert (! (Valid (ApplyTT __uu__PartialApp
Pulse.Class.BoundedIntegers.op_Subtraction@tok))
:named @kick_partial_app_6eecc02fce329c36f4e524ea1499ff10))
(push) ;; push{2

; Starting query at Pulse.Class.BoundedIntegers.fst(143,77-143,82)

(declare-fun label_1 () Bool)

(declare-fun Tm_refine_bf58fad13f308910817062e1bf18d398 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(143,31-143,74); use=Pulse.Class.BoundedIntegers.fst(143,31-143,74)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_bf58fad13f308910817062e1bf18d398 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_bf58fad13f308910817062e1bf18d398 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_bf58fad13f308910817062e1bf18d398))

:named refinement_kinding_Tm_refine_bf58fad13f308910817062e1bf18d398))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(143,31-143,74); use=Pulse.Class.BoundedIntegers.fst(143,31-143,74)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_bf58fad13f308910817062e1bf18d398 @x2))
(and (HasTypeFuel @u0
@x1
(FStar.UInt32.t Dummy_value))

;; def=Pulse.Class.BoundedIntegers.fst(143,51-143,72); use=Pulse.Class.BoundedIntegers.fst(143,51-143,72)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(143,51-143,72); use=Pulse.Class.BoundedIntegers.fst(143,51-143,72)
(Pulse.Class.BoundedIntegers.ok (FStar.UInt32.t Dummy_value)
(Pulse.Class.BoundedIntegers.bounded_int_u32 Dummy_value)
(ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Subtraction@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
@x2
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_bf58fad13f308910817062e1bf18d398 @x2)))
:qid refinement_interpretation_Tm_refine_bf58fad13f308910817062e1bf18d398))

:named refinement_interpretation_Tm_refine_bf58fad13f308910817062e1bf18d398))
;;;;;;;;;;;;;;;;haseq for Tm_refine_bf58fad13f308910817062e1bf18d398
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(143,31-143,74); use=Pulse.Class.BoundedIntegers.fst(143,31-143,74)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_bf58fad13f308910817062e1bf18d398 @x0)))
(Valid (Prims.hasEq (FStar.UInt32.t Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_bf58fad13f308910817062e1bf18d398 @x0))))
:qid haseqTm_refine_bf58fad13f308910817062e1bf18d398))

:named haseqTm_refine_bf58fad13f308910817062e1bf18d398))




; Encoding query formula : forall (x: FStar.UInt32.t)
;   (y: FStar.UInt32.t{Pulse.Class.BoundedIntegers.ok Pulse.Class.BoundedIntegers.op_Subtraction x y})
; .
;   (*  - Could not prove post-condition
; *)
;   Prims.auto_squash (Pulse.Class.BoundedIntegers.bounded_int_u32.fits (Pulse.Class.BoundedIntegers.bounded_int_u32
;             .v x -
;           Pulse.Class.BoundedIntegers.bounded_int_u32.v y))


; Context: While encoding a query
; While typechecking the top-level declaration `let sub_u32`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
(FStar.UInt32.t Dummy_value))
(HasType @x1
(Tm_refine_bf58fad13f308910817062e1bf18d398 @x0)))

;; def=Pulse.Class.BoundedIntegers.fst(12,53-12,69); use=Pulse.Class.BoundedIntegers.fst(143,79-143,80)
(or label_1

;; def=Pulse.Class.BoundedIntegers.fst(12,53-12,69); use=Pulse.Class.BoundedIntegers.fst(143,79-143,80)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(12,53-12,69); use=Pulse.Class.BoundedIntegers.fst(143,79-143,80)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
(FStar.UInt32.t Dummy_value))
(Pulse.Class.BoundedIntegers.bounded_int_u32 Dummy_value))
(Prims.op_Subtraction (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
(FStar.UInt32.t Dummy_value))
(Pulse.Class.BoundedIntegers.bounded_int_u32 Dummy_value))
@x0)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
(FStar.UInt32.t Dummy_value))
(Pulse.Class.BoundedIntegers.bounded_int_u32 Dummy_value))
@x1)))
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Pulse.Class.BoundedIntegers.sub_u32, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, Prims_pretyping_ae567c2fb75be05905677af440075565, equation_Pulse.Class.BoundedIntegers.bounded_int_int, equation_Pulse.Class.BoundedIntegers.bounded_int_u32, equation_Pulse.Class.BoundedIntegers.ok, equation_Pulse.Class.BoundedIntegers.op_Subtraction, equation_Pulse.Class.BoundedIntegers.v, function_token_typing_Prims.__cache_version_number__, interpretation_Tm_abs_247f3cb36b17b51f48b81868489fffc3, interpretation_Tm_abs_8154ab71284c4a913019d0826babcbe6, interpretation_Tm_abs_faa1351076bca4f1d410c09beaffa289, proj_equation_Pulse.Class.BoundedIntegers.Mkbounded_int_v, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_op_Subtraction, refinement_interpretation_Tm_refine_bf58fad13f308910817062e1bf18d398, token_correspondence_Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v, token_correspondence_Pulse.Class.BoundedIntegers.op_Subtraction, token_correspondence_Pulse.Class.BoundedIntegers.v

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at Pulse.Class.BoundedIntegers.fst(143,0-143,82)

(declare-fun label_1 () Bool)




; Encoding query formula : forall (x: FStar.UInt32.t).
;   (*  - Subtyping check failed
;   - Expected type Type0 got type Type0
; *)
;   forall (y: FStar.UInt32.t).
;     (*  - Subtyping check failed
;   - Expected type _: Prims.int -> _: Prims.int -> Prims.int
;     got type x: Prims.int -> y: Prims.int -> Prims.Pure Prims.int
; *)
;     forall (x: Prims.int) (y: Prims.int).
;       Prims.auto_squash (Pulse.Class.BoundedIntegers.bounded_int_int.fits (Pulse.Class.BoundedIntegers.bounded_int_int
;                 .v x -
;               Pulse.Class.BoundedIntegers.bounded_int_int.v y))


; Context: While encoding a query
; While checking for top-level effects
; While typechecking the top-level declaration `let sub_u32`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (HasType @x0
(FStar.UInt32.t Dummy_value))

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(143,77-143,82)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.UInt32.t Dummy_value))

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(143,77-143,82)
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
Prims.int)
(HasType @x3
Prims.int))

;; def=Pulse.Class.BoundedIntegers.fst(12,53-12,69); use=Pulse.Class.BoundedIntegers.fst(143,54-143,68)
(or label_1

;; def=Pulse.Class.BoundedIntegers.fst(12,53-12,69); use=Pulse.Class.BoundedIntegers.fst(143,77-143,82)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(12,53-12,69); use=Pulse.Class.BoundedIntegers.fst(143,77-143,82)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(Prims.op_Subtraction (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
@x2)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
@x3)))
)
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Pulse.Class.BoundedIntegers.sub_u32, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @query, equation_Pulse.Class.BoundedIntegers.bounded_int_int, interpretation_Tm_abs_e55f1efb8e787e6fd29c4794771ae0d5, primitive_Prims.op_Subtraction, proj_equation_Pulse.Class.BoundedIntegers.Mkbounded_int_fits, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_fits, token_correspondence_Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits, true_interp

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let sub_u32


; <Start encoding let sub_u32>


(declare-fun Tm_refine_bf58fad13f308910817062e1bf18d398 (Term) Term)
(declare-fun Pulse.Class.BoundedIntegers.sub_u32 (Term Term) Term)


;;;;;;;;;;;;;;;;x: FStar.UInt32.t -> y: FStar.UInt32.t{ok op_Subtraction x y} -> FStar.UInt32.t
(declare-fun Tm_arrow_a43a4dba376a6d7e0beeca6e38b38fc9 () Term)
(declare-fun Pulse.Class.BoundedIntegers.sub_u32@tok () Term)




; </end encoding let sub_u32>

(push) ;; push{2

; Starting query at Pulse.Class.BoundedIntegers.fst(146,24-146,29)

(declare-fun label_1 () Bool)




; Encoding query formula : forall (x: Prims.nat).
;   (*  - Could not prove post-condition
; *)
;   Prims.auto_squash (Pulse.Class.BoundedIntegers.bounded_int_int.fits (Pulse.Class.BoundedIntegers.bounded_int_int
;             .v x +
;           Pulse.Class.BoundedIntegers.bounded_int_int.v 1))


; Context: While encoding a query
; While typechecking the top-level declaration `let add_nat_1`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.nat)

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(146,26-146,27)
(or label_1

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(146,26-146,27)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(146,26-146,27)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(Prims.op_Addition (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
@x0)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
(BoxInt 1))))
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Pulse.Class.BoundedIntegers.add_nat_1, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query, equation_Pulse.Class.BoundedIntegers.bounded_int_int, interpretation_Tm_abs_e55f1efb8e787e6fd29c4794771ae0d5, primitive_Prims.op_Addition, proj_equation_Pulse.Class.BoundedIntegers.Mkbounded_int_fits, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_fits, token_correspondence_Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits, true_interp

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let add_nat_1


; <Start encoding let add_nat_1>

(declare-fun Pulse.Class.BoundedIntegers.add_nat_1 (Term) Term)

(declare-fun Pulse.Class.BoundedIntegers.add_nat_1@tok () Term)


; </end encoding let add_nat_1>


; encoding sigelt let nat_as_int


; <Start encoding let nat_as_int>

(declare-fun Pulse.Class.BoundedIntegers.nat_as_int (Term) Term)

(declare-fun Pulse.Class.BoundedIntegers.nat_as_int@tok () Term)

; </end encoding let nat_as_int>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.nat_as_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(152,4-152,14); use=Pulse.Class.BoundedIntegers.fst(152,4-152,14)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.nat)
(HasType (Pulse.Class.BoundedIntegers.nat_as_int @x0)
Prims.int))
 

:pattern ((Pulse.Class.BoundedIntegers.nat_as_int @x0))
:qid typing_Pulse.Class.BoundedIntegers.nat_as_int))

:named typing_Pulse.Class.BoundedIntegers.nat_as_int))
;;; Fact-ids: Name Prims.op_GreaterThanOrEqual; Namespace Prims
(assert (! 
;; def=Prims.fst(576,4-576,25); use=Prims.fst(576,4-576,25)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_GreaterThanOrEqual @x0
@x1)
(BoxBool (>= (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_GreaterThanOrEqual @x0
@x1))
:qid primitive_Prims.op_GreaterThanOrEqual))

:named primitive_Prims.op_GreaterThanOrEqual))
;;;;;;;;;;;;;;;;Equation for Pulse.Class.BoundedIntegers.nat_as_int
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.nat_as_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(152,4-152,14); use=Pulse.Class.BoundedIntegers.fst(152,4-152,14)
(forall ((@x0 Term))
 (! (= (Pulse.Class.BoundedIntegers.nat_as_int @x0)
@x0)
 

:pattern ((Pulse.Class.BoundedIntegers.nat_as_int @x0))
:qid equation_Pulse.Class.BoundedIntegers.nat_as_int))

:named equation_Pulse.Class.BoundedIntegers.nat_as_int))
(push) ;; push{2

; Starting query at Pulse.Class.BoundedIntegers.fst(154,0-164,1)

(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

(declare-fun Tm_abs_49832691c8e834c9b5f114e3af28e84b () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_49832691c8e834c9b5f114e3af28e84b
;;; Fact-ids: 
(assert (! (HasType Tm_abs_49832691c8e834c9b5f114e3af28e84b
Tm_arrow_3a9c22ddc54716caa0276c05e792d97e)
:named typing_Tm_abs_49832691c8e834c9b5f114e3af28e84b))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_49832691c8e834c9b5f114e3af28e84b
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(155,21-155,27); use=Pulse.Class.BoundedIntegers.fst(157,18-157,19)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_49832691c8e834c9b5f114e3af28e84b
@x0)
(Prims.b2t (Prims.op_GreaterThanOrEqual @x0
(BoxInt 0))))
 

:pattern ((ApplyTT Tm_abs_49832691c8e834c9b5f114e3af28e84b
@x0))
:qid interpretation_Tm_abs_49832691c8e834c9b5f114e3af28e84b))

:named interpretation_Tm_abs_49832691c8e834c9b5f114e3af28e84b))
















(declare-fun Tm_refine_bd223e00c466608dde1dc993969b2c2e (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_bd223e00c466608dde1dc993969b2c2e @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_bd223e00c466608dde1dc993969b2c2e @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_bd223e00c466608dde1dc993969b2c2e))

:named refinement_kinding_Tm_refine_bd223e00c466608dde1dc993969b2c2e))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_bd223e00c466608dde1dc993969b2c2e @x2
@x3))
(and (HasTypeFuel @u0
@x1
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b))

;; def=Pulse.Class.BoundedIntegers.fst(11,80-11,96); use=Prims.fst(454,7-454,10)
(= (Pulse.Class.BoundedIntegers.nat_as_int @x1)
(Prims.op_Addition (Pulse.Class.BoundedIntegers.nat_as_int @x2)
(Pulse.Class.BoundedIntegers.nat_as_int @x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_bd223e00c466608dde1dc993969b2c2e @x2
@x3)))
:qid refinement_interpretation_Tm_refine_bd223e00c466608dde1dc993969b2c2e))

:named refinement_interpretation_Tm_refine_bd223e00c466608dde1dc993969b2c2e))
;;;;;;;;;;;;;;;;haseq for Tm_refine_bd223e00c466608dde1dc993969b2c2e
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_bd223e00c466608dde1dc993969b2c2e @x0
@x1)))
(Valid (Prims.hasEq (Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_bd223e00c466608dde1dc993969b2c2e @x0
@x1))))
:qid haseqTm_refine_bd223e00c466608dde1dc993969b2c2e))

:named haseqTm_refine_bd223e00c466608dde1dc993969b2c2e))
;;;;;;;;;;;;;;;;x: fits_t (fun x -> x >= 0) -> y: fits_t (fun x -> x >= 0) -> Prims.Pure (fits_t (fun x -> x >= 0))
(declare-fun Tm_arrow_955236a830db76b48e7a10b7f749e603 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_955236a830db76b48e7a10b7f749e603
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_955236a830db76b48e7a10b7f749e603
Tm_type)
:named kinding_Tm_arrow_955236a830db76b48e7a10b7f749e603))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_955236a830db76b48e7a10b7f749e603)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_955236a830db76b48e7a10b7f749e603))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_955236a830db76b48e7a10b7f749e603))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_955236a830db76b48e7a10b7f749e603))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_955236a830db76b48e7a10b7f749e603
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_955236a830db76b48e7a10b7f749e603)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and 
;; def=Pulse.Class.BoundedIntegers.fst(155,21-155,27); use=Prims.fst(454,7-454,10)
(>= (BoxInt_proj_0 (Prims.op_Addition (Pulse.Class.BoundedIntegers.nat_as_int @x1)
(Pulse.Class.BoundedIntegers.nat_as_int @x2)))
(BoxInt_proj_0 (BoxInt 0)))

(HasType @x1
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b))
(HasType @x2
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Tm_refine_bd223e00c466608dde1dc993969b2c2e @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_955236a830db76b48e7a10b7f749e603.1))

(IsTotFun @x0)

;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_955236a830db76b48e7a10b7f749e603.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_955236a830db76b48e7a10b7f749e603))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_955236a830db76b48e7a10b7f749e603))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_955236a830db76b48e7a10b7f749e603))
















(declare-fun Tm_refine_e85c67baf98c2770dee9e3a346f4aa9a (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_e85c67baf98c2770dee9e3a346f4aa9a @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_e85c67baf98c2770dee9e3a346f4aa9a @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_e85c67baf98c2770dee9e3a346f4aa9a))

:named refinement_kinding_Tm_refine_e85c67baf98c2770dee9e3a346f4aa9a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_e85c67baf98c2770dee9e3a346f4aa9a @x2
@x3))
(and (HasTypeFuel @u0
@x1
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b))

;; def=Pulse.Class.BoundedIntegers.fst(12,89-12,105); use=Prims.fst(454,7-454,10)
(= (Pulse.Class.BoundedIntegers.nat_as_int @x1)
(Prims.op_Subtraction (Pulse.Class.BoundedIntegers.nat_as_int @x2)
(Pulse.Class.BoundedIntegers.nat_as_int @x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_e85c67baf98c2770dee9e3a346f4aa9a @x2
@x3)))
:qid refinement_interpretation_Tm_refine_e85c67baf98c2770dee9e3a346f4aa9a))

:named refinement_interpretation_Tm_refine_e85c67baf98c2770dee9e3a346f4aa9a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e85c67baf98c2770dee9e3a346f4aa9a
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_e85c67baf98c2770dee9e3a346f4aa9a @x0
@x1)))
(Valid (Prims.hasEq (Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_e85c67baf98c2770dee9e3a346f4aa9a @x0
@x1))))
:qid haseqTm_refine_e85c67baf98c2770dee9e3a346f4aa9a))

:named haseqTm_refine_e85c67baf98c2770dee9e3a346f4aa9a))
;;;;;;;;;;;;;;;;x: fits_t (fun x -> x >= 0) -> y: fits_t (fun x -> x >= 0) -> Prims.Pure (fits_t (fun x -> x >= 0))
(declare-fun Tm_arrow_84ffaa7b8cd98b49ed4b32804bab6271 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_84ffaa7b8cd98b49ed4b32804bab6271
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_84ffaa7b8cd98b49ed4b32804bab6271
Tm_type)
:named kinding_Tm_arrow_84ffaa7b8cd98b49ed4b32804bab6271))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_84ffaa7b8cd98b49ed4b32804bab6271)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_84ffaa7b8cd98b49ed4b32804bab6271))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_84ffaa7b8cd98b49ed4b32804bab6271))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_84ffaa7b8cd98b49ed4b32804bab6271))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_84ffaa7b8cd98b49ed4b32804bab6271
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_84ffaa7b8cd98b49ed4b32804bab6271)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and 
;; def=Pulse.Class.BoundedIntegers.fst(155,21-155,27); use=Prims.fst(454,7-454,10)
(>= (BoxInt_proj_0 (Prims.op_Subtraction (Pulse.Class.BoundedIntegers.nat_as_int @x1)
(Pulse.Class.BoundedIntegers.nat_as_int @x2)))
(BoxInt_proj_0 (BoxInt 0)))

(HasType @x1
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b))
(HasType @x2
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Tm_refine_e85c67baf98c2770dee9e3a346f4aa9a @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_84ffaa7b8cd98b49ed4b32804bab6271.1))

(IsTotFun @x0)

;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_84ffaa7b8cd98b49ed4b32804bab6271.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_84ffaa7b8cd98b49ed4b32804bab6271))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_84ffaa7b8cd98b49ed4b32804bab6271))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_84ffaa7b8cd98b49ed4b32804bab6271))








(declare-fun Tm_refine_7a0190ece034f608a1d17c6f810afd8b (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(13,27-13,52); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_7a0190ece034f608a1d17c6f810afd8b @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_7a0190ece034f608a1d17c6f810afd8b @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_7a0190ece034f608a1d17c6f810afd8b))

:named refinement_kinding_Tm_refine_7a0190ece034f608a1d17c6f810afd8b))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(13,27-13,52); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_7a0190ece034f608a1d17c6f810afd8b @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.bool)

;; def=Pulse.Class.BoundedIntegers.fst(13,36-13,51); use=Prims.fst(454,7-454,10)
(= @x1
(Prims.op_LessThan (Pulse.Class.BoundedIntegers.nat_as_int @x2)
(Pulse.Class.BoundedIntegers.nat_as_int @x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_7a0190ece034f608a1d17c6f810afd8b @x2
@x3)))
:qid refinement_interpretation_Tm_refine_7a0190ece034f608a1d17c6f810afd8b))

:named refinement_interpretation_Tm_refine_7a0190ece034f608a1d17c6f810afd8b))
;;;;;;;;;;;;;;;;haseq for Tm_refine_7a0190ece034f608a1d17c6f810afd8b
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(13,27-13,52); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_7a0190ece034f608a1d17c6f810afd8b @x0
@x1)))
(Valid (Prims.hasEq Prims.bool)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_7a0190ece034f608a1d17c6f810afd8b @x0
@x1))))
:qid haseqTm_refine_7a0190ece034f608a1d17c6f810afd8b))

:named haseqTm_refine_7a0190ece034f608a1d17c6f810afd8b))
;;;;;;;;;;;;;;;;x: fits_t (fun x -> x >= 0) -> y: fits_t (fun x -> x >= 0)   -> b: Prims.bool{b = (nat_as_int x < nat_as_int y)}
(declare-fun Tm_arrow_73b84083d45cd507c90dfd05ff5232dc () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_73b84083d45cd507c90dfd05ff5232dc
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_73b84083d45cd507c90dfd05ff5232dc
Tm_type)
:named kinding_Tm_arrow_73b84083d45cd507c90dfd05ff5232dc))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-13,52); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_73b84083d45cd507c90dfd05ff5232dc)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_73b84083d45cd507c90dfd05ff5232dc))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_73b84083d45cd507c90dfd05ff5232dc))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_73b84083d45cd507c90dfd05ff5232dc))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_73b84083d45cd507c90dfd05ff5232dc
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-13,52); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_73b84083d45cd507c90dfd05ff5232dc)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-13,52); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b))
(HasType @x2
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Tm_refine_7a0190ece034f608a1d17c6f810afd8b @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_73b84083d45cd507c90dfd05ff5232dc.1))

(IsTotFun @x0)

;; def=Pulse.Class.BoundedIntegers.fst(10,8-13,52); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_73b84083d45cd507c90dfd05ff5232dc.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_73b84083d45cd507c90dfd05ff5232dc))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_73b84083d45cd507c90dfd05ff5232dc))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_73b84083d45cd507c90dfd05ff5232dc))








(declare-fun Tm_refine_b7332a55ca3c2b91cf8db7f1f4f4dbaf (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,28-14,54); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_b7332a55ca3c2b91cf8db7f1f4f4dbaf @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_b7332a55ca3c2b91cf8db7f1f4f4dbaf @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_b7332a55ca3c2b91cf8db7f1f4f4dbaf))

:named refinement_kinding_Tm_refine_b7332a55ca3c2b91cf8db7f1f4f4dbaf))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,28-14,54); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_b7332a55ca3c2b91cf8db7f1f4f4dbaf @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.bool)

;; def=Pulse.Class.BoundedIntegers.fst(14,37-14,53); use=Prims.fst(454,7-454,10)
(= @x1
(Prims.op_LessThanOrEqual (Pulse.Class.BoundedIntegers.nat_as_int @x2)
(Pulse.Class.BoundedIntegers.nat_as_int @x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_b7332a55ca3c2b91cf8db7f1f4f4dbaf @x2
@x3)))
:qid refinement_interpretation_Tm_refine_b7332a55ca3c2b91cf8db7f1f4f4dbaf))

:named refinement_interpretation_Tm_refine_b7332a55ca3c2b91cf8db7f1f4f4dbaf))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b7332a55ca3c2b91cf8db7f1f4f4dbaf
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,28-14,54); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_b7332a55ca3c2b91cf8db7f1f4f4dbaf @x0
@x1)))
(Valid (Prims.hasEq Prims.bool)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_b7332a55ca3c2b91cf8db7f1f4f4dbaf @x0
@x1))))
:qid haseqTm_refine_b7332a55ca3c2b91cf8db7f1f4f4dbaf))

:named haseqTm_refine_b7332a55ca3c2b91cf8db7f1f4f4dbaf))
;;;;;;;;;;;;;;;;x: fits_t (fun x -> x >= 0) -> y: fits_t (fun x -> x >= 0)   -> b: Prims.bool{b = (nat_as_int x <= nat_as_int y)}
(declare-fun Tm_arrow_c626ec882f4aa75e799aeb7098151df7 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_c626ec882f4aa75e799aeb7098151df7
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_c626ec882f4aa75e799aeb7098151df7
Tm_type)
:named kinding_Tm_arrow_c626ec882f4aa75e799aeb7098151df7))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-14,54); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_c626ec882f4aa75e799aeb7098151df7)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_c626ec882f4aa75e799aeb7098151df7))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_c626ec882f4aa75e799aeb7098151df7))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_c626ec882f4aa75e799aeb7098151df7))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_c626ec882f4aa75e799aeb7098151df7
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-14,54); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_c626ec882f4aa75e799aeb7098151df7)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-14,54); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b))
(HasType @x2
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Tm_refine_b7332a55ca3c2b91cf8db7f1f4f4dbaf @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_c626ec882f4aa75e799aeb7098151df7.1))

(IsTotFun @x0)

;; def=Pulse.Class.BoundedIntegers.fst(10,8-14,54); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_c626ec882f4aa75e799aeb7098151df7.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_c626ec882f4aa75e799aeb7098151df7))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_c626ec882f4aa75e799aeb7098151df7))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_c626ec882f4aa75e799aeb7098151df7))




















(declare-fun Tm_refine_80220e0fa81f4e39bb5f60e3670dc824 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_80220e0fa81f4e39bb5f60e3670dc824 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_80220e0fa81f4e39bb5f60e3670dc824 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_80220e0fa81f4e39bb5f60e3670dc824))

:named refinement_kinding_Tm_refine_80220e0fa81f4e39bb5f60e3670dc824))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_80220e0fa81f4e39bb5f60e3670dc824 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b))

;; def=Pulse.Class.BoundedIntegers.fst(15,91-15,107); use=Prims.fst(454,7-454,10)
(= (Pulse.Class.BoundedIntegers.nat_as_int @x1)
(Prims.op_Modulus (Pulse.Class.BoundedIntegers.nat_as_int @x2)
(Pulse.Class.BoundedIntegers.nat_as_int @x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_80220e0fa81f4e39bb5f60e3670dc824 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_80220e0fa81f4e39bb5f60e3670dc824))

:named refinement_interpretation_Tm_refine_80220e0fa81f4e39bb5f60e3670dc824))
;;;;;;;;;;;;;;;;haseq for Tm_refine_80220e0fa81f4e39bb5f60e3670dc824
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_80220e0fa81f4e39bb5f60e3670dc824 @x0
@x1)))
(Valid (Prims.hasEq (Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_80220e0fa81f4e39bb5f60e3670dc824 @x0
@x1))))
:qid haseqTm_refine_80220e0fa81f4e39bb5f60e3670dc824))

:named haseqTm_refine_80220e0fa81f4e39bb5f60e3670dc824))
;;;;;;;;;;;;;;;;x: fits_t (fun x -> x >= 0) -> y: fits_t (fun x -> x >= 0) -> Prims.Pure (fits_t (fun x -> x >= 0))
(declare-fun Tm_arrow_3544ee23567d830d90e440615d5ca141 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_3544ee23567d830d90e440615d5ca141
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_3544ee23567d830d90e440615d5ca141
Tm_type)
:named kinding_Tm_arrow_3544ee23567d830d90e440615d5ca141))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_3544ee23567d830d90e440615d5ca141)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_3544ee23567d830d90e440615d5ca141))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_3544ee23567d830d90e440615d5ca141))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_3544ee23567d830d90e440615d5ca141))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_3544ee23567d830d90e440615d5ca141
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_3544ee23567d830d90e440615d5ca141)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and 
;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Prims.fst(454,7-454,10)
(> (BoxInt_proj_0 (Pulse.Class.BoundedIntegers.nat_as_int @x2))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Pulse.Class.BoundedIntegers.fst(155,21-155,27); use=Prims.fst(454,7-454,10)
(>= (BoxInt_proj_0 (Prims.op_Modulus (Pulse.Class.BoundedIntegers.nat_as_int @x1)
(Pulse.Class.BoundedIntegers.nat_as_int @x2)))
(BoxInt_proj_0 (BoxInt 0)))

(HasType @x1
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b))
(HasType @x2
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Tm_refine_80220e0fa81f4e39bb5f60e3670dc824 @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_3544ee23567d830d90e440615d5ca141.1))

(IsTotFun @x0)

;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_3544ee23567d830d90e440615d5ca141.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_3544ee23567d830d90e440615d5ca141))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_3544ee23567d830d90e440615d5ca141))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_3544ee23567d830d90e440615d5ca141))






(declare-fun Tm_abs_b45ecfef1e69b747cee094ed4915a995 () Term)
;;;;;;;;;;;;;;;;tot_fun_Tm_abs_b45ecfef1e69b747cee094ed4915a995
;;; Fact-ids: 
(assert (! (and (IsTotFun Tm_abs_b45ecfef1e69b747cee094ed4915a995)

;; def=Pulse.Class.BoundedIntegers.fst(162,24-162,44); use=Pulse.Class.BoundedIntegers.fst(162,24-162,44)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Tm_abs_b45ecfef1e69b747cee094ed4915a995
@x0))
 

:pattern ((ApplyTT Tm_abs_b45ecfef1e69b747cee094ed4915a995
@x0))
:qid tot_fun_Tm_abs_b45ecfef1e69b747cee094ed4915a995))
)
:named tot_fun_Tm_abs_b45ecfef1e69b747cee094ed4915a995))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_b45ecfef1e69b747cee094ed4915a995
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(162,24-162,44); use=Pulse.Class.BoundedIntegers.fst(162,24-162,44)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_b45ecfef1e69b747cee094ed4915a995
@x0)
@x1)
(Prims.op_Modulus @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_b45ecfef1e69b747cee094ed4915a995
@x0)
@x1))
:qid interpretation_Tm_abs_b45ecfef1e69b747cee094ed4915a995))

:named interpretation_Tm_abs_b45ecfef1e69b747cee094ed4915a995))










(declare-fun Tm_abs_7a0511e53a1724af3cf68adb4961fb02 () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_7a0511e53a1724af3cf68adb4961fb02
;;; Fact-ids: 
(assert (! (HasType Tm_abs_7a0511e53a1724af3cf68adb4961fb02
Tm_arrow_c626ec882f4aa75e799aeb7098151df7)
:named typing_Tm_abs_7a0511e53a1724af3cf68adb4961fb02))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_7a0511e53a1724af3cf68adb4961fb02
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(161,25-161,53); use=Pulse.Class.BoundedIntegers.fst(161,25-161,53)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_7a0511e53a1724af3cf68adb4961fb02
@x0)
@x1)
(Prims.op_LessThanOrEqual @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_7a0511e53a1724af3cf68adb4961fb02
@x0)
@x1))
:qid interpretation_Tm_abs_7a0511e53a1724af3cf68adb4961fb02))

:named interpretation_Tm_abs_7a0511e53a1724af3cf68adb4961fb02))










(declare-fun Tm_abs_302dd8637fb769ea258b84e4ebb0e424 () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_302dd8637fb769ea258b84e4ebb0e424
;;; Fact-ids: 
(assert (! (HasType Tm_abs_302dd8637fb769ea258b84e4ebb0e424
Tm_arrow_73b84083d45cd507c90dfd05ff5232dc)
:named typing_Tm_abs_302dd8637fb769ea258b84e4ebb0e424))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_302dd8637fb769ea258b84e4ebb0e424
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(160,24-160,45); use=Pulse.Class.BoundedIntegers.fst(160,24-160,45)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_302dd8637fb769ea258b84e4ebb0e424
@x0)
@x1)
(Prims.op_LessThan @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_302dd8637fb769ea258b84e4ebb0e424
@x0)
@x1))
:qid interpretation_Tm_abs_302dd8637fb769ea258b84e4ebb0e424))

:named interpretation_Tm_abs_302dd8637fb769ea258b84e4ebb0e424))




(declare-fun Tm_abs_07ccbb89fbea6258a2496082252a1f87 () Term)
;;;;;;;;;;;;;;;;tot_fun_Tm_abs_07ccbb89fbea6258a2496082252a1f87
;;; Fact-ids: 
(assert (! (and (IsTotFun Tm_abs_07ccbb89fbea6258a2496082252a1f87)

;; def=Pulse.Class.BoundedIntegers.fst(159,33-159,57); use=Pulse.Class.BoundedIntegers.fst(159,33-159,57)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Tm_abs_07ccbb89fbea6258a2496082252a1f87
@x0))
 

:pattern ((ApplyTT Tm_abs_07ccbb89fbea6258a2496082252a1f87
@x0))
:qid tot_fun_Tm_abs_07ccbb89fbea6258a2496082252a1f87))
)
:named tot_fun_Tm_abs_07ccbb89fbea6258a2496082252a1f87))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_07ccbb89fbea6258a2496082252a1f87
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(159,33-159,57); use=Pulse.Class.BoundedIntegers.fst(159,33-159,57)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_07ccbb89fbea6258a2496082252a1f87
@x0)
@x1)
(Prims.op_Subtraction @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_07ccbb89fbea6258a2496082252a1f87
@x0)
@x1))
:qid interpretation_Tm_abs_07ccbb89fbea6258a2496082252a1f87))

:named interpretation_Tm_abs_07ccbb89fbea6258a2496082252a1f87))




(declare-fun Tm_abs_006bddfb1ee8c8fc8738d0c29ba2cb89 () Term)
;;;;;;;;;;;;;;;;tot_fun_Tm_abs_006bddfb1ee8c8fc8738d0c29ba2cb89
;;; Fact-ids: 
(assert (! (and (IsTotFun Tm_abs_006bddfb1ee8c8fc8738d0c29ba2cb89)

;; def=Pulse.Class.BoundedIntegers.fst(158,24-158,45); use=Pulse.Class.BoundedIntegers.fst(158,24-158,45)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Tm_abs_006bddfb1ee8c8fc8738d0c29ba2cb89
@x0))
 

:pattern ((ApplyTT Tm_abs_006bddfb1ee8c8fc8738d0c29ba2cb89
@x0))
:qid tot_fun_Tm_abs_006bddfb1ee8c8fc8738d0c29ba2cb89))
)
:named tot_fun_Tm_abs_006bddfb1ee8c8fc8738d0c29ba2cb89))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_006bddfb1ee8c8fc8738d0c29ba2cb89
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(158,24-158,45); use=Pulse.Class.BoundedIntegers.fst(158,24-158,45)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_006bddfb1ee8c8fc8738d0c29ba2cb89
@x0)
@x1)
(Prims.op_Addition @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_006bddfb1ee8c8fc8738d0c29ba2cb89
@x0)
@x1))
:qid interpretation_Tm_abs_006bddfb1ee8c8fc8738d0c29ba2cb89))

:named interpretation_Tm_abs_006bddfb1ee8c8fc8738d0c29ba2cb89))



; Encoding query formula : Prims.hasEq (Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0)) /\
; (forall (return_val: Prims.eqtype).
;     return_val == Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0) ==>
;     (forall (x: Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0))
;         (y: Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0)).
;         (*  - Could not prove post-condition
; *)
;         forall (p: Prims.pure_post (Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0))).
;           Pulse.Class.BoundedIntegers.nat_as_int x + Pulse.Class.BoundedIntegers.nat_as_int y >= 0 /\
;           (forall (pure_result: Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0)).
;               Pulse.Class.BoundedIntegers.nat_as_int pure_result ==
;               Pulse.Class.BoundedIntegers.nat_as_int x + Pulse.Class.BoundedIntegers.nat_as_int y ==>
;               p pure_result) ==>
;           x + y >= 0 /\
;           (forall (return_val: Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0)).
;               return_val == x + y ==> p return_val)) /\
;     (forall (any_result:
;         (
;               x: Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0) ->
;               y: Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0)
;             -> Prims.Pure (Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0)))).
;         (fun x y -> x + y) == any_result ==>
;         (forall (x: Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0))
;             (y: Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0)).
;             (*  - Could not prove post-condition
; *)
;             forall (p: Prims.pure_post (Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0))).
;               Pulse.Class.BoundedIntegers.nat_as_int x - Pulse.Class.BoundedIntegers.nat_as_int y >=
;               0 /\
;               (forall (pure_result: Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0)).
;                   Pulse.Class.BoundedIntegers.nat_as_int pure_result ==
;                   Pulse.Class.BoundedIntegers.nat_as_int x -
;                   Pulse.Class.BoundedIntegers.nat_as_int y ==>
;                   p pure_result) ==>
;               x - y >= 0 /\
;               (forall (return_val: Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0)).
;                   return_val == x - y ==> p return_val)) /\
;         (forall (any_result:
;             (
;                   x: Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0) ->
;                   y: Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0)
;                 -> Prims.Pure (Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0)))).
;             (fun x y -> x - y) == any_result ==>
;             (forall (x: Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0))
;                 (y: Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0)).
;                 (*  - Could not prove post-condition
; *)
;                 x < y =
;                 (Pulse.Class.BoundedIntegers.nat_as_int x < Pulse.Class.BoundedIntegers.nat_as_int y)
;             ) /\
;             (forall (any_result:
;                 (
;                       x: Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0) ->
;                       y: Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0)
;                     -> b:
;                       Prims.bool
;                         { b =
;                           (Pulse.Class.BoundedIntegers.nat_as_int x <
;                           Pulse.Class.BoundedIntegers.nat_as_int y) })).
;                 (fun x y -> x < y) == any_result ==>
;                 (forall (x: Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0))
;                     (y: Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0)).
;                     (*  - Could not prove post-condition
; *)
;                     x <= y =
;                     (Pulse.Class.BoundedIntegers.nat_as_int x <=
;                     Pulse.Class.BoundedIntegers.nat_as_int y)) /\
;                 (forall (any_result:
;                     (
;                           x: Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0) ->
;                           y: Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0)
;                         -> b:
;                           Prims.bool
;                             { b =
;                               (Pulse.Class.BoundedIntegers.nat_as_int x <=
;                               Pulse.Class.BoundedIntegers.nat_as_int y) })).
;                     (fun x y -> x <= y) == any_result ==>
;                     (forall (x: Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0))
;                         (y: Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0)).
;                         (*  - Could not prove post-condition
; *)
;                         forall (p:
;                           Prims.pure_post (Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0))).
;                           Pulse.Class.BoundedIntegers.nat_as_int y > 0 /\
;                           Pulse.Class.BoundedIntegers.nat_as_int x %
;                           Pulse.Class.BoundedIntegers.nat_as_int y >=
;                           0 /\
;                           (forall (pure_result:
;                               Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0)).
;                               Pulse.Class.BoundedIntegers.nat_as_int pure_result ==
;                               Pulse.Class.BoundedIntegers.nat_as_int x %
;                               Pulse.Class.BoundedIntegers.nat_as_int y ==>
;                               p pure_result) ==>
;                           (y >= 0 ==> y <> 0) /\
;                           (forall (any_result: Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0))
;                             .
;                               y == any_result ==>
;                               (forall (any_result: Prims.int).
;                                   x % y == any_result ==>
;                                   x % y >= 0 /\
;                                   (forall (return_val:
;                                       Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0)).
;                                       return_val == x % y ==>
;                                       return_val == x % y ==>
;                                       (forall (return_val:
;                                           Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0)).
;                                           return_val == return_val ==> p return_val))))) /\
;                     (forall (any_result:
;                         (
;                               x: Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0) ->
;                               y: Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0)
;                             -> Prims.Pure (Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0)))).
;                         (fun x y -> x % y) == any_result ==>
;                         (forall (x: Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0)).
;                             {:pattern Pulse.Class.BoundedIntegers.nat_as_int x}
;                             Pulse.Class.BoundedIntegers.nat_as_int x >= 0)))))))


; Context: While encoding a query
; While checking for top-level effects
; While typechecking the top-level declaration `let bounded_int_nat`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and 
;; def=Prims.fst(73,23-73,30); use=Pulse.Class.BoundedIntegers.fst(157,18-157,19)
(or label_1

;; def=Prims.fst(73,23-73,30); use=Pulse.Class.BoundedIntegers.fst(157,18-157,19)
(Valid 
;; def=Prims.fst(73,23-73,30); use=Pulse.Class.BoundedIntegers.fst(157,18-157,19)
(Prims.hasEq (Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b))
)
)


;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x0
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b))
)

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and (forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b))
(HasType @x2
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post (Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b)))

;; def=Pulse.Class.BoundedIntegers.fst(155,21-155,27); use=Pulse.Class.BoundedIntegers.fst(158,24-158,45)
(>= (BoxInt_proj_0 (Prims.op_Addition (Pulse.Class.BoundedIntegers.nat_as_int @x1)
(Pulse.Class.BoundedIntegers.nat_as_int @x2)))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(158,24-158,45)
(forall ((@x4 Term))
 (! (implies (and (or label_2
(HasType @x4
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b)))

;; def=Pulse.Class.BoundedIntegers.fst(11,80-11,96); use=Pulse.Class.BoundedIntegers.fst(158,24-158,45)
(or label_3

;; def=Pulse.Class.BoundedIntegers.fst(11,80-11,96); use=Pulse.Class.BoundedIntegers.fst(158,24-158,45)
(= (Pulse.Class.BoundedIntegers.nat_as_int @x4)
(Prims.op_Addition (Pulse.Class.BoundedIntegers.nat_as_int @x1)
(Pulse.Class.BoundedIntegers.nat_as_int @x2)))
)
)

;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(158,24-158,45)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(158,24-158,45)
(ApplyTT @x3
@x4)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(158,24-158,45)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(158,24-158,45)
(ApplyTT @x3
@x4)
)
)
:qid @query.3))
)

;; def=Prims.fst(459,77-459,89); use=Pulse.Class.BoundedIntegers.fst(158,24-158,45)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(155,21-155,27); use=Pulse.Class.BoundedIntegers.fst(158,24-158,45)
(or label_4

;; def=Pulse.Class.BoundedIntegers.fst(155,21-155,27); use=Pulse.Class.BoundedIntegers.fst(158,24-158,45)
(>= (BoxInt_proj_0 (Prims.op_Addition @x1
@x2))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=Pulse.Class.BoundedIntegers.fst(158,24-158,45)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b))

;; def=Prims.fst(356,26-356,41); use=Pulse.Class.BoundedIntegers.fst(158,24-158,45)
(= @x4
(Prims.op_Addition @x1
@x2))
)

;; def=Prims.fst(356,46-356,58); use=Pulse.Class.BoundedIntegers.fst(158,24-158,45)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Pulse.Class.BoundedIntegers.fst(158,24-158,45)
(ApplyTT @x3
@x4)
)
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
Tm_arrow_955236a830db76b48e7a10b7f749e603)

;; def=Pulse.Class.BoundedIntegers.fst(11,6-158,45); use=Pulse.Class.BoundedIntegers.fst(11,6-158,45)
(= Tm_abs_006bddfb1ee8c8fc8738d0c29ba2cb89
@x1)
)

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and (forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b))
(HasType @x3
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post (Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b)))

;; def=Pulse.Class.BoundedIntegers.fst(155,21-155,27); use=Pulse.Class.BoundedIntegers.fst(159,33-159,57)
(>= (BoxInt_proj_0 (Prims.op_Subtraction (Pulse.Class.BoundedIntegers.nat_as_int @x2)
(Pulse.Class.BoundedIntegers.nat_as_int @x3)))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(159,33-159,57)
(forall ((@x5 Term))
 (! (implies (and (or label_5
(HasType @x5
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b)))

;; def=Pulse.Class.BoundedIntegers.fst(12,89-12,105); use=Pulse.Class.BoundedIntegers.fst(159,33-159,57)
(or label_6

;; def=Pulse.Class.BoundedIntegers.fst(12,89-12,105); use=Pulse.Class.BoundedIntegers.fst(159,33-159,57)
(= (Pulse.Class.BoundedIntegers.nat_as_int @x5)
(Prims.op_Subtraction (Pulse.Class.BoundedIntegers.nat_as_int @x2)
(Pulse.Class.BoundedIntegers.nat_as_int @x3)))
)
)

;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(159,33-159,57)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(159,33-159,57)
(ApplyTT @x4
@x5)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(159,33-159,57)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(159,33-159,57)
(ApplyTT @x4
@x5)
)
)
:qid @query.8))
)

;; def=Prims.fst(459,77-459,89); use=Pulse.Class.BoundedIntegers.fst(159,33-159,57)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(155,21-155,27); use=Pulse.Class.BoundedIntegers.fst(159,33-159,57)
(or label_7

;; def=Pulse.Class.BoundedIntegers.fst(155,21-155,27); use=Pulse.Class.BoundedIntegers.fst(159,33-159,57)
(>= (BoxInt_proj_0 (Prims.op_Subtraction @x2
@x3))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=Pulse.Class.BoundedIntegers.fst(159,33-159,57)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b))

;; def=Prims.fst(356,26-356,41); use=Pulse.Class.BoundedIntegers.fst(159,33-159,57)
(= @x5
(Prims.op_Subtraction @x2
@x3))
)

;; def=Prims.fst(356,46-356,58); use=Pulse.Class.BoundedIntegers.fst(159,33-159,57)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Pulse.Class.BoundedIntegers.fst(159,33-159,57)
(ApplyTT @x4
@x5)
)
)
 
;;no pats
:qid @query.9))
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
Tm_arrow_84ffaa7b8cd98b49ed4b32804bab6271)

;; def=Pulse.Class.BoundedIntegers.fst(12,4-159,57); use=Pulse.Class.BoundedIntegers.fst(12,4-159,57)
(= Tm_abs_07ccbb89fbea6258a2496082252a1f87
@x2)
)

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and (forall ((@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x3
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b))
(HasType @x4
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b)))

;; def=Pulse.Class.BoundedIntegers.fst(13,36-13,51); use=Pulse.Class.BoundedIntegers.fst(160,24-160,45)
(or label_8

;; def=Pulse.Class.BoundedIntegers.fst(13,36-13,51); use=Pulse.Class.BoundedIntegers.fst(160,24-160,45)
(= (Prims.op_LessThan @x3
@x4)
(Prims.op_LessThan (Pulse.Class.BoundedIntegers.nat_as_int @x3)
(Pulse.Class.BoundedIntegers.nat_as_int @x4)))
)
)
 
;;no pats
:qid @query.11))

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Tm_arrow_73b84083d45cd507c90dfd05ff5232dc)

;; def=Pulse.Class.BoundedIntegers.fst(13,6-160,45); use=Pulse.Class.BoundedIntegers.fst(13,6-160,45)
(= Tm_abs_302dd8637fb769ea258b84e4ebb0e424
@x3)
)

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and (forall ((@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x4
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b))
(HasType @x5
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b)))

;; def=Pulse.Class.BoundedIntegers.fst(14,37-14,53); use=Pulse.Class.BoundedIntegers.fst(161,25-161,53)
(or label_9

;; def=Pulse.Class.BoundedIntegers.fst(14,37-14,53); use=Pulse.Class.BoundedIntegers.fst(161,25-161,53)
(= (Prims.op_LessThanOrEqual @x4
@x5)
(Prims.op_LessThanOrEqual (Pulse.Class.BoundedIntegers.nat_as_int @x4)
(Pulse.Class.BoundedIntegers.nat_as_int @x5)))
)
)
 
;;no pats
:qid @query.13))

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Tm_arrow_c626ec882f4aa75e799aeb7098151df7)

;; def=Pulse.Class.BoundedIntegers.fst(14,6-161,53); use=Pulse.Class.BoundedIntegers.fst(14,6-161,53)
(= Tm_abs_7a0511e53a1724af3cf68adb4961fb02
@x4)
)

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and (forall ((@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x5
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b))
(HasType @x6
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(Prims.pure_post (Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b)))

;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Pulse.Class.BoundedIntegers.fst(162,24-162,44)
(> (BoxInt_proj_0 (Pulse.Class.BoundedIntegers.nat_as_int @x6))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Pulse.Class.BoundedIntegers.fst(155,21-155,27); use=Pulse.Class.BoundedIntegers.fst(162,24-162,44)
(>= (BoxInt_proj_0 (Prims.op_Modulus (Pulse.Class.BoundedIntegers.nat_as_int @x5)
(Pulse.Class.BoundedIntegers.nat_as_int @x6)))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(162,24-162,44)
(forall ((@x8 Term))
 (! (implies (and (or label_10
(HasType @x8
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b)))

;; def=Pulse.Class.BoundedIntegers.fst(15,91-15,107); use=Pulse.Class.BoundedIntegers.fst(162,24-162,44)
(or label_11

;; def=Pulse.Class.BoundedIntegers.fst(15,91-15,107); use=Pulse.Class.BoundedIntegers.fst(162,24-162,44)
(= (Pulse.Class.BoundedIntegers.nat_as_int @x8)
(Prims.op_Modulus (Pulse.Class.BoundedIntegers.nat_as_int @x5)
(Pulse.Class.BoundedIntegers.nat_as_int @x6)))
)
)

;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(162,24-162,44)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(162,24-162,44)
(ApplyTT @x7
@x8)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(162,24-162,44)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(162,24-162,44)
(ApplyTT @x7
@x8)
)
)
:qid @query.17))
)

;; def=Prims.fst(459,77-459,89); use=Pulse.Class.BoundedIntegers.fst(162,24-162,44)
(and (implies 
;; def=Pulse.Class.BoundedIntegers.fst(155,21-155,27); use=Pulse.Class.BoundedIntegers.fst(162,43-162,44)
(>= (BoxInt_proj_0 @x6)
(BoxInt_proj_0 (BoxInt 0)))


;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(162,43-162,44)
(or label_12

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(162,43-162,44)
(not (= @x6
(BoxInt 0)))
)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(162,24-162,44)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b))

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(162,24-162,44)
(= @x6
@x8)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(162,24-162,44)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.int)

;; def=Pulse.Class.BoundedIntegers.fst(10,8-162,44); use=Pulse.Class.BoundedIntegers.fst(162,24-162,44)
(= (Prims.op_Modulus @x5
@x6)
@x9)
)

;; def=Prims.fst(459,77-459,89); use=Pulse.Class.BoundedIntegers.fst(162,24-162,44)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(155,21-155,27); use=Pulse.Class.BoundedIntegers.fst(162,24-162,44)
(or label_13

;; def=Pulse.Class.BoundedIntegers.fst(155,21-155,27); use=Pulse.Class.BoundedIntegers.fst(162,24-162,44)
(>= (BoxInt_proj_0 (Prims.op_Modulus @x5
@x6))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=Pulse.Class.BoundedIntegers.fst(162,24-162,44)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b))

;; def=Prims.fst(356,26-356,41); use=Pulse.Class.BoundedIntegers.fst(162,24-162,44)
(= @x10
(Prims.op_Modulus @x5
@x6))


;; def=Pulse.Class.BoundedIntegers.fst(10,8-162,44); use=Pulse.Class.BoundedIntegers.fst(162,24-162,44)
(= @x10
(Prims.op_Modulus @x5
@x6))
)

;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b))

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x11
@x10)
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x7
@x11)
)
)
 
;;no pats
:qid @query.21))
)
 
;;no pats
:qid @query.20))
)
)
 
;;no pats
:qid @query.19))
)
 
;;no pats
:qid @query.18))
)
)
 
;;no pats
:qid @query.16))
)
 
;;no pats
:qid @query.15))

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Tm_arrow_3544ee23567d830d90e440615d5ca141)

;; def=Pulse.Class.BoundedIntegers.fst(15,6-162,44); use=Pulse.Class.BoundedIntegers.fst(15,6-162,44)
(= Tm_abs_b45ecfef1e69b747cee094ed4915a995
@x5)
)

;; def=Pulse.Class.BoundedIntegers.fst(17,23-19,5); use=Pulse.Class.BoundedIntegers.fst(163,17-163,19)
(forall ((@x6 Term))
 (! (implies (HasType @x6
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b))

;; def=Pulse.Class.BoundedIntegers.fst(155,21-155,27); use=Pulse.Class.BoundedIntegers.fst(163,17-163,19)
(or label_14

;; def=Pulse.Class.BoundedIntegers.fst(155,21-155,27); use=Pulse.Class.BoundedIntegers.fst(163,17-163,19)
(>= (BoxInt_proj_0 (Pulse.Class.BoundedIntegers.nat_as_int @x6))
(BoxInt_proj_0 (BoxInt 0)))
)
)
 

:pattern ((Pulse.Class.BoundedIntegers.nat_as_int @x6))
:qid @query.23))
)
 
;;no pats
:qid @query.22))
)
)
 
;;no pats
:qid @query.14))
)
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.5))
)
)
 
;;no pats
:qid @query))
)
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Pulse.Class.BoundedIntegers.bounded_int_nat, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, b2t_def, equation_Prims.eqtype, equation_Pulse.Class.BoundedIntegers.fits_t, equation_Pulse.Class.BoundedIntegers.nat_as_int, haseqTm_refine_2c9509c4fdf356ea8b390762a509ebbb, interpretation_Tm_abs_49832691c8e834c9b5f114e3af28e84b, primitive_Prims.op_Addition, primitive_Prims.op_GreaterThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_2c9509c4fdf356ea8b390762a509ebbb, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let bounded_int_nat


; <Start encoding let bounded_int_nat>

(declare-fun Pulse.Class.BoundedIntegers.bounded_int_nat (Dummy_sort) Term)

(declare-fun Tm_abs_49832691c8e834c9b5f114e3af28e84b () Term)








;;;;;;;;;;;;;;;;x: fits_t (fun x -> x >= 0) -> Prims.GTot (fits_t (fun x -> x >= 0))
(declare-fun Tm_ghost_arrow_06eaab41334caade1e6215d73ea1145a () Term)
(declare-fun Tm_abs_f1e946ad1bde2318468b24a873da4633 () Term)




(declare-fun Tm_abs_006bddfb1ee8c8fc8738d0c29ba2cb89 () Term)




(declare-fun Tm_abs_07ccbb89fbea6258a2496082252a1f87 () Term)








(declare-fun Tm_refine_7a0190ece034f608a1d17c6f810afd8b (Term Term) Term)
;;;;;;;;;;;;;;;;x: fits_t (fun x -> x >= 0) -> y: fits_t (fun x -> x >= 0)   -> b: Prims.bool{b = (nat_as_int x < nat_as_int y)}
(declare-fun Tm_arrow_73b84083d45cd507c90dfd05ff5232dc () Term)
(declare-fun Tm_abs_302dd8637fb769ea258b84e4ebb0e424 () Term)








(declare-fun Tm_refine_b7332a55ca3c2b91cf8db7f1f4f4dbaf (Term Term) Term)
;;;;;;;;;;;;;;;;x: fits_t (fun x -> x >= 0) -> y: fits_t (fun x -> x >= 0)   -> b: Prims.bool{b = (nat_as_int x <= nat_as_int y)}
(declare-fun Tm_arrow_c626ec882f4aa75e799aeb7098151df7 () Term)
(declare-fun Tm_abs_7a0511e53a1724af3cf68adb4961fb02 () Term)




(declare-fun Tm_abs_b45ecfef1e69b747cee094ed4915a995 () Term)

; </end encoding let bounded_int_nat>

;;;;;;;;;;;;;;;;typing_Tm_abs_f1e946ad1bde2318468b24a873da4633
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_nat; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_abs_f1e946ad1bde2318468b24a873da4633
Tm_ghost_arrow_06eaab41334caade1e6215d73ea1145a)
:named typing_Tm_abs_f1e946ad1bde2318468b24a873da4633))
;;;;;;;;;;;;;;;;typing_Tm_abs_7a0511e53a1724af3cf68adb4961fb02
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_nat; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_abs_7a0511e53a1724af3cf68adb4961fb02
Tm_arrow_c626ec882f4aa75e799aeb7098151df7)
:named typing_Tm_abs_7a0511e53a1724af3cf68adb4961fb02))
;;;;;;;;;;;;;;;;typing_Tm_abs_49832691c8e834c9b5f114e3af28e84b
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_nat; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_abs_49832691c8e834c9b5f114e3af28e84b
Tm_arrow_3a9c22ddc54716caa0276c05e792d97e)
:named typing_Tm_abs_49832691c8e834c9b5f114e3af28e84b))
;;;;;;;;;;;;;;;;typing_Tm_abs_302dd8637fb769ea258b84e4ebb0e424
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_nat; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_abs_302dd8637fb769ea258b84e4ebb0e424
Tm_arrow_73b84083d45cd507c90dfd05ff5232dc)
:named typing_Tm_abs_302dd8637fb769ea258b84e4ebb0e424))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_nat; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(154,9-154,24); use=Pulse.Class.BoundedIntegers.fst(154,9-154,24)
(forall ((@u0 Dummy_sort))
 (! (HasType (Pulse.Class.BoundedIntegers.bounded_int_nat @u0)
(Pulse.Class.BoundedIntegers.bounded_int Prims.nat))
 

:pattern ((Pulse.Class.BoundedIntegers.bounded_int_nat @u0))
:qid typing_Pulse.Class.BoundedIntegers.bounded_int_nat))

:named typing_Pulse.Class.BoundedIntegers.bounded_int_nat))
;;;;;;;;;;;;;;;;tot_fun_Tm_abs_b45ecfef1e69b747cee094ed4915a995
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_nat; Namespace Pulse.Class.BoundedIntegers
(assert (! (and (IsTotFun Tm_abs_b45ecfef1e69b747cee094ed4915a995)

;; def=Pulse.Class.BoundedIntegers.fst(162,24-162,44); use=Pulse.Class.BoundedIntegers.fst(162,24-162,44)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Tm_abs_b45ecfef1e69b747cee094ed4915a995
@x0))
 

:pattern ((ApplyTT Tm_abs_b45ecfef1e69b747cee094ed4915a995
@x0))
:qid tot_fun_Tm_abs_b45ecfef1e69b747cee094ed4915a995))
)
:named tot_fun_Tm_abs_b45ecfef1e69b747cee094ed4915a995))
;;;;;;;;;;;;;;;;tot_fun_Tm_abs_07ccbb89fbea6258a2496082252a1f87
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_nat; Namespace Pulse.Class.BoundedIntegers
(assert (! (and (IsTotFun Tm_abs_07ccbb89fbea6258a2496082252a1f87)

;; def=Pulse.Class.BoundedIntegers.fst(159,33-159,57); use=Pulse.Class.BoundedIntegers.fst(159,33-159,57)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Tm_abs_07ccbb89fbea6258a2496082252a1f87
@x0))
 

:pattern ((ApplyTT Tm_abs_07ccbb89fbea6258a2496082252a1f87
@x0))
:qid tot_fun_Tm_abs_07ccbb89fbea6258a2496082252a1f87))
)
:named tot_fun_Tm_abs_07ccbb89fbea6258a2496082252a1f87))
;;;;;;;;;;;;;;;;tot_fun_Tm_abs_006bddfb1ee8c8fc8738d0c29ba2cb89
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_nat; Namespace Pulse.Class.BoundedIntegers
(assert (! (and (IsTotFun Tm_abs_006bddfb1ee8c8fc8738d0c29ba2cb89)

;; def=Pulse.Class.BoundedIntegers.fst(158,24-158,45); use=Pulse.Class.BoundedIntegers.fst(158,24-158,45)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Tm_abs_006bddfb1ee8c8fc8738d0c29ba2cb89
@x0))
 

:pattern ((ApplyTT Tm_abs_006bddfb1ee8c8fc8738d0c29ba2cb89
@x0))
:qid tot_fun_Tm_abs_006bddfb1ee8c8fc8738d0c29ba2cb89))
)
:named tot_fun_Tm_abs_006bddfb1ee8c8fc8738d0c29ba2cb89))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.nat_as_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(152,4-152,14); use=Pulse.Class.BoundedIntegers.fst(152,4-152,14)
(forall ((@x0 Term))
 (! (= (ApplyTT Pulse.Class.BoundedIntegers.nat_as_int@tok
@x0)
(Pulse.Class.BoundedIntegers.nat_as_int @x0))
 

:pattern ((ApplyTT Pulse.Class.BoundedIntegers.nat_as_int@tok
@x0))
:qid token_correspondence_Pulse.Class.BoundedIntegers.nat_as_int))

:named token_correspondence_Pulse.Class.BoundedIntegers.nat_as_int))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_nat; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,28-14,54); use=Pulse.Class.BoundedIntegers.fst(155,4-163,19)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_b7332a55ca3c2b91cf8db7f1f4f4dbaf @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_b7332a55ca3c2b91cf8db7f1f4f4dbaf @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_b7332a55ca3c2b91cf8db7f1f4f4dbaf))

:named refinement_kinding_Tm_refine_b7332a55ca3c2b91cf8db7f1f4f4dbaf))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_nat; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(13,27-13,52); use=Pulse.Class.BoundedIntegers.fst(155,4-163,19)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_7a0190ece034f608a1d17c6f810afd8b @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_7a0190ece034f608a1d17c6f810afd8b @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_7a0190ece034f608a1d17c6f810afd8b))

:named refinement_kinding_Tm_refine_7a0190ece034f608a1d17c6f810afd8b))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_nat; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,28-14,54); use=Pulse.Class.BoundedIntegers.fst(155,4-163,19)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_b7332a55ca3c2b91cf8db7f1f4f4dbaf @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.bool)

;; def=Pulse.Class.BoundedIntegers.fst(14,37-14,53); use=Pulse.Class.BoundedIntegers.fst(155,4-163,19)
(= @x1
(Prims.op_LessThanOrEqual (Pulse.Class.BoundedIntegers.nat_as_int @x2)
(Pulse.Class.BoundedIntegers.nat_as_int @x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_b7332a55ca3c2b91cf8db7f1f4f4dbaf @x2
@x3)))
:qid refinement_interpretation_Tm_refine_b7332a55ca3c2b91cf8db7f1f4f4dbaf))

:named refinement_interpretation_Tm_refine_b7332a55ca3c2b91cf8db7f1f4f4dbaf))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_nat; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(13,27-13,52); use=Pulse.Class.BoundedIntegers.fst(155,4-163,19)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_7a0190ece034f608a1d17c6f810afd8b @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.bool)

;; def=Pulse.Class.BoundedIntegers.fst(13,36-13,51); use=Pulse.Class.BoundedIntegers.fst(155,4-163,19)
(= @x1
(Prims.op_LessThan (Pulse.Class.BoundedIntegers.nat_as_int @x2)
(Pulse.Class.BoundedIntegers.nat_as_int @x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_7a0190ece034f608a1d17c6f810afd8b @x2
@x3)))
:qid refinement_interpretation_Tm_refine_7a0190ece034f608a1d17c6f810afd8b))

:named refinement_interpretation_Tm_refine_7a0190ece034f608a1d17c6f810afd8b))
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_06eaab41334caade1e6215d73ea1145a
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_nat; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_ghost_arrow_06eaab41334caade1e6215d73ea1145a
Tm_type)
:named kinding_Tm_ghost_arrow_06eaab41334caade1e6215d73ea1145a))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_fc34ca66de2f262c06145b17fb7ed6cb
;;; Fact-ids: Name FStar.UInt.max_int; Namespace FStar.UInt
(assert (! (HasType Tm_arrow_fc34ca66de2f262c06145b17fb7ed6cb
Tm_type)
:named kinding_Tm_arrow_fc34ca66de2f262c06145b17fb7ed6cb))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_c626ec882f4aa75e799aeb7098151df7
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_nat; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_arrow_c626ec882f4aa75e799aeb7098151df7
Tm_type)
:named kinding_Tm_arrow_c626ec882f4aa75e799aeb7098151df7))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_73b84083d45cd507c90dfd05ff5232dc
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_nat; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_arrow_73b84083d45cd507c90dfd05ff5232dc
Tm_type)
:named kinding_Tm_arrow_73b84083d45cd507c90dfd05ff5232dc))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_f1e946ad1bde2318468b24a873da4633
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_nat; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(157,13-157,14); use=Pulse.Class.BoundedIntegers.fst(157,18-157,19)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_f1e946ad1bde2318468b24a873da4633
@x0)
@x0)
 

:pattern ((ApplyTT Tm_abs_f1e946ad1bde2318468b24a873da4633
@x0))
:qid interpretation_Tm_abs_f1e946ad1bde2318468b24a873da4633))

:named interpretation_Tm_abs_f1e946ad1bde2318468b24a873da4633))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_b45ecfef1e69b747cee094ed4915a995
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_nat; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(162,24-162,44); use=Pulse.Class.BoundedIntegers.fst(162,24-162,44)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_b45ecfef1e69b747cee094ed4915a995
@x0)
@x1)
(Prims.op_Modulus @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_b45ecfef1e69b747cee094ed4915a995
@x0)
@x1))
:qid interpretation_Tm_abs_b45ecfef1e69b747cee094ed4915a995))

:named interpretation_Tm_abs_b45ecfef1e69b747cee094ed4915a995))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_7a0511e53a1724af3cf68adb4961fb02
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_nat; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(161,25-161,53); use=Pulse.Class.BoundedIntegers.fst(161,25-161,53)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_7a0511e53a1724af3cf68adb4961fb02
@x0)
@x1)
(Prims.op_LessThanOrEqual @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_7a0511e53a1724af3cf68adb4961fb02
@x0)
@x1))
:qid interpretation_Tm_abs_7a0511e53a1724af3cf68adb4961fb02))

:named interpretation_Tm_abs_7a0511e53a1724af3cf68adb4961fb02))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_49832691c8e834c9b5f114e3af28e84b
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_nat; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(155,21-155,27); use=Pulse.Class.BoundedIntegers.fst(157,18-157,19)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_49832691c8e834c9b5f114e3af28e84b
@x0)
(Prims.b2t (Prims.op_GreaterThanOrEqual @x0
(BoxInt 0))))
 

:pattern ((ApplyTT Tm_abs_49832691c8e834c9b5f114e3af28e84b
@x0))
:qid interpretation_Tm_abs_49832691c8e834c9b5f114e3af28e84b))

:named interpretation_Tm_abs_49832691c8e834c9b5f114e3af28e84b))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_302dd8637fb769ea258b84e4ebb0e424
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_nat; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(160,24-160,45); use=Pulse.Class.BoundedIntegers.fst(160,24-160,45)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_302dd8637fb769ea258b84e4ebb0e424
@x0)
@x1)
(Prims.op_LessThan @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_302dd8637fb769ea258b84e4ebb0e424
@x0)
@x1))
:qid interpretation_Tm_abs_302dd8637fb769ea258b84e4ebb0e424))

:named interpretation_Tm_abs_302dd8637fb769ea258b84e4ebb0e424))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_07ccbb89fbea6258a2496082252a1f87
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_nat; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(159,33-159,57); use=Pulse.Class.BoundedIntegers.fst(159,33-159,57)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_07ccbb89fbea6258a2496082252a1f87
@x0)
@x1)
(Prims.op_Subtraction @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_07ccbb89fbea6258a2496082252a1f87
@x0)
@x1))
:qid interpretation_Tm_abs_07ccbb89fbea6258a2496082252a1f87))

:named interpretation_Tm_abs_07ccbb89fbea6258a2496082252a1f87))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_006bddfb1ee8c8fc8738d0c29ba2cb89
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_nat; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(158,24-158,45); use=Pulse.Class.BoundedIntegers.fst(158,24-158,45)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_006bddfb1ee8c8fc8738d0c29ba2cb89
@x0)
@x1)
(Prims.op_Addition @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_006bddfb1ee8c8fc8738d0c29ba2cb89
@x0)
@x1))
:qid interpretation_Tm_abs_006bddfb1ee8c8fc8738d0c29ba2cb89))

:named interpretation_Tm_abs_006bddfb1ee8c8fc8738d0c29ba2cb89))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b7332a55ca3c2b91cf8db7f1f4f4dbaf
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_nat; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,28-14,54); use=Pulse.Class.BoundedIntegers.fst(155,4-163,19)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_b7332a55ca3c2b91cf8db7f1f4f4dbaf @x0
@x1)))
(Valid (Prims.hasEq Prims.bool)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_b7332a55ca3c2b91cf8db7f1f4f4dbaf @x0
@x1))))
:qid haseqTm_refine_b7332a55ca3c2b91cf8db7f1f4f4dbaf))

:named haseqTm_refine_b7332a55ca3c2b91cf8db7f1f4f4dbaf))
;;;;;;;;;;;;;;;;haseq for Tm_refine_7a0190ece034f608a1d17c6f810afd8b
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_nat; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(13,27-13,52); use=Pulse.Class.BoundedIntegers.fst(155,4-163,19)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_7a0190ece034f608a1d17c6f810afd8b @x0
@x1)))
(Valid (Prims.hasEq Prims.bool)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_7a0190ece034f608a1d17c6f810afd8b @x0
@x1))))
:qid haseqTm_refine_7a0190ece034f608a1d17c6f810afd8b))

:named haseqTm_refine_7a0190ece034f608a1d17c6f810afd8b))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.nat_as_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(152,4-152,14); use=Pulse.Class.BoundedIntegers.fst(152,4-152,14)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType Pulse.Class.BoundedIntegers.nat_as_int@tok
Tm_arrow_fc34ca66de2f262c06145b17fb7ed6cb))

;; def=Pulse.Class.BoundedIntegers.fst(152,4-152,14); use=Pulse.Class.BoundedIntegers.fst(152,4-152,14)
(forall ((@x1 Term))
 (! (= (ApplyTT Pulse.Class.BoundedIntegers.nat_as_int@tok
@x1)
(Pulse.Class.BoundedIntegers.nat_as_int @x1))
 

:pattern ((Pulse.Class.BoundedIntegers.nat_as_int @x1))
:qid function_token_typing_Pulse.Class.BoundedIntegers.nat_as_int.1))
)
 

:pattern ((ApplyTT @x0
Pulse.Class.BoundedIntegers.nat_as_int@tok))
:qid function_token_typing_Pulse.Class.BoundedIntegers.nat_as_int))

:named function_token_typing_Pulse.Class.BoundedIntegers.nat_as_int))
;;;;;;;;;;;;;;;;Equation for Pulse.Class.BoundedIntegers.bounded_int_nat
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_nat; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(154,9-154,24); use=Pulse.Class.BoundedIntegers.fst(154,9-154,24)
(forall ((@u0 Dummy_sort))
 (! (= 
;; def=Pulse.Class.BoundedIntegers.fst(154,9-154,24); use=Pulse.Class.BoundedIntegers.fst(154,9-154,24)
(Pulse.Class.BoundedIntegers.bounded_int_nat @u0)

(Pulse.Class.BoundedIntegers.Mkbounded_int (Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b)
Tm_abs_49832691c8e834c9b5f114e3af28e84b
Pulse.Class.BoundedIntegers.nat_as_int@tok
Tm_abs_f1e946ad1bde2318468b24a873da4633
Tm_abs_006bddfb1ee8c8fc8738d0c29ba2cb89
Tm_abs_07ccbb89fbea6258a2496082252a1f87
Tm_abs_302dd8637fb769ea258b84e4ebb0e424
Tm_abs_7a0511e53a1724af3cf68adb4961fb02
Tm_abs_b45ecfef1e69b747cee094ed4915a995
Tm_unit))
 

:pattern (
;; def=Pulse.Class.BoundedIntegers.fst(154,9-154,24); use=Pulse.Class.BoundedIntegers.fst(154,9-154,24)
(Pulse.Class.BoundedIntegers.bounded_int_nat @u0)
)
:qid equation_Pulse.Class.BoundedIntegers.bounded_int_nat))

:named equation_Pulse.Class.BoundedIntegers.bounded_int_nat))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_nat; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Pulse.Class.BoundedIntegers.fst(155,4-163,19)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_ghost_arrow_06eaab41334caade1e6215d73ea1145a)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_ghost_arrow_06eaab41334caade1e6215d73ea1145a))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_ghost_arrow_06eaab41334caade1e6215d73ea1145a))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_ghost_arrow_06eaab41334caade1e6215d73ea1145a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_nat; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-14,54); use=Pulse.Class.BoundedIntegers.fst(155,4-163,19)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_c626ec882f4aa75e799aeb7098151df7)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_c626ec882f4aa75e799aeb7098151df7))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_c626ec882f4aa75e799aeb7098151df7))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_c626ec882f4aa75e799aeb7098151df7))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_nat; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-13,52); use=Pulse.Class.BoundedIntegers.fst(155,4-163,19)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_73b84083d45cd507c90dfd05ff5232dc)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_73b84083d45cd507c90dfd05ff5232dc))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_73b84083d45cd507c90dfd05ff5232dc))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_73b84083d45cd507c90dfd05ff5232dc))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_06eaab41334caade1e6215d73ea1145a
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_nat; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Pulse.Class.BoundedIntegers.fst(155,4-163,19)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_ghost_arrow_06eaab41334caade1e6215d73ea1145a)

;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Pulse.Class.BoundedIntegers.fst(155,4-163,19)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b))
(HasType (ApplyTT @x0
@x1)
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_ghost_arrow_06eaab41334caade1e6215d73ea1145a.1))
)
 

:pattern ((HasTypeZ @x0
Tm_ghost_arrow_06eaab41334caade1e6215d73ea1145a))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_ghost_arrow_06eaab41334caade1e6215d73ea1145a))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_ghost_arrow_06eaab41334caade1e6215d73ea1145a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_c626ec882f4aa75e799aeb7098151df7
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_nat; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-14,54); use=Pulse.Class.BoundedIntegers.fst(155,4-163,19)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_c626ec882f4aa75e799aeb7098151df7)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-14,54); use=Pulse.Class.BoundedIntegers.fst(155,4-163,19)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b))
(HasType @x2
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Tm_refine_b7332a55ca3c2b91cf8db7f1f4f4dbaf @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_c626ec882f4aa75e799aeb7098151df7.1))

(IsTotFun @x0)

;; def=Pulse.Class.BoundedIntegers.fst(10,8-14,54); use=Pulse.Class.BoundedIntegers.fst(155,4-163,19)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_c626ec882f4aa75e799aeb7098151df7.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_c626ec882f4aa75e799aeb7098151df7))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_c626ec882f4aa75e799aeb7098151df7))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_c626ec882f4aa75e799aeb7098151df7))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_73b84083d45cd507c90dfd05ff5232dc
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_nat; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-13,52); use=Pulse.Class.BoundedIntegers.fst(155,4-163,19)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_73b84083d45cd507c90dfd05ff5232dc)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-13,52); use=Pulse.Class.BoundedIntegers.fst(155,4-163,19)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b))
(HasType @x2
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Tm_refine_7a0190ece034f608a1d17c6f810afd8b @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_73b84083d45cd507c90dfd05ff5232dc.1))

(IsTotFun @x0)

;; def=Pulse.Class.BoundedIntegers.fst(10,8-13,52); use=Pulse.Class.BoundedIntegers.fst(155,4-163,19)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_49832691c8e834c9b5f114e3af28e84b))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_73b84083d45cd507c90dfd05ff5232dc.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_73b84083d45cd507c90dfd05ff5232dc))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_73b84083d45cd507c90dfd05ff5232dc))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_73b84083d45cd507c90dfd05ff5232dc))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.UInt.max_int; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(46,15-46,29); use=FStar.UInt.fsti(46,15-46,29)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_fc34ca66de2f262c06145b17fb7ed6cb)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_fc34ca66de2f262c06145b17fb7ed6cb))
:qid FStar.UInt_pre_typing_Tm_arrow_fc34ca66de2f262c06145b17fb7ed6cb))

:named FStar.UInt_pre_typing_Tm_arrow_fc34ca66de2f262c06145b17fb7ed6cb))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_fc34ca66de2f262c06145b17fb7ed6cb
;;; Fact-ids: Name FStar.UInt.max_int; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(46,15-46,29); use=FStar.UInt.fsti(46,15-46,29)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_fc34ca66de2f262c06145b17fb7ed6cb)
(and 
;; def=FStar.UInt.fsti(46,15-46,29); use=FStar.UInt.fsti(46,15-46,29)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.nat)
(HasType (ApplyTT @x0
@x1)
Prims.int))
 

:pattern ((ApplyTT @x0
@x1))
:qid FStar.UInt_interpretation_Tm_arrow_fc34ca66de2f262c06145b17fb7ed6cb.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_fc34ca66de2f262c06145b17fb7ed6cb))
:qid FStar.UInt_interpretation_Tm_arrow_fc34ca66de2f262c06145b17fb7ed6cb))

:named FStar.UInt_interpretation_Tm_arrow_fc34ca66de2f262c06145b17fb7ed6cb))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_nat; Namespace Pulse.Class.BoundedIntegers
(assert (! (Valid (ApplyTT __uu__PartialApp
Pulse.Class.BoundedIntegers.nat_as_int@tok))
:named @kick_partial_app_ecfd44e12a812256d9269209bf183ce0))
(push) ;; push{2

; Starting query at Pulse.Class.BoundedIntegers.fst(166,24-166,29)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)




; Encoding query formula : forall (x: Prims.nat) (y: Prims.nat).
;   (*  - Could not prove post-condition
; *)
;   Prims.hasEq Prims.nat /\
;   (forall (any_result: Type0).
;       Prims.nat == any_result ==>
;       Pulse.Class.BoundedIntegers.bounded_int_nat.fits (Pulse.Class.BoundedIntegers.bounded_int_nat
;             .v x +
;           Pulse.Class.BoundedIntegers.bounded_int_nat.v y))


; Context: While encoding a query
; While typechecking the top-level declaration `let add_nat`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Prims.nat))

;; def=Prims.fst(459,77-459,89); use=Pulse.Class.BoundedIntegers.fst(166,24-166,29)
(and 
;; def=Prims.fst(73,23-73,30); use=Pulse.Class.BoundedIntegers.fst(166,24-166,25)
(or label_1

;; def=Prims.fst(73,23-73,30); use=Pulse.Class.BoundedIntegers.fst(166,24-166,25)
(Valid 
;; def=Prims.fst(73,23-73,30); use=Pulse.Class.BoundedIntegers.fst(166,24-166,25)
(Prims.hasEq Prims.nat)
)
)


;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(166,24-166,29)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
Tm_type)

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(166,24-166,29)
(= Prims.nat
@x2)
)

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(166,26-166,27)
(or label_2

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(166,26-166,27)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(166,26-166,27)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
Prims.nat)
(Pulse.Class.BoundedIntegers.bounded_int_nat Dummy_value))
(Prims.op_Addition (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.nat)
(Pulse.Class.BoundedIntegers.bounded_int_nat Dummy_value))
@x0)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
Prims.nat)
(Pulse.Class.BoundedIntegers.bounded_int_nat Dummy_value))
@x1)))
)
)
)
 
;;no pats
:qid @query.1))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Pulse.Class.BoundedIntegers.add_nat, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, b2t_def, equation_Prims.eqtype, equation_Prims.nat, equation_Pulse.Class.BoundedIntegers.bounded_int_nat, equation_Pulse.Class.BoundedIntegers.nat_as_int, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, int_inversion, interpretation_Tm_abs_49832691c8e834c9b5f114e3af28e84b, primitive_Prims.op_Addition, primitive_Prims.op_GreaterThanOrEqual, proj_equation_Pulse.Class.BoundedIntegers.Mkbounded_int_fits, proj_equation_Pulse.Class.BoundedIntegers.Mkbounded_int_v, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_fits, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_v, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, token_correspondence_Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits, token_correspondence_Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v, token_correspondence_Pulse.Class.BoundedIntegers.nat_as_int, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let add_nat


; <Start encoding let add_nat>

(declare-fun Pulse.Class.BoundedIntegers.add_nat (Term Term) Term)
;;;;;;;;;;;;;;;;x: Prims.nat -> y: Prims.nat -> Prims.nat
(declare-fun Tm_arrow_2bb228db8432d0cdc106cb64c22e55ba () Term)
(declare-fun Pulse.Class.BoundedIntegers.add_nat@tok () Term)


; </end encoding let add_nat>


; encoding sigelt let pos_as_int


; <Start encoding let pos_as_int>

(declare-fun Pulse.Class.BoundedIntegers.pos_as_int (Term) Term)
;;;;;;;;;;;;;;;;x: Prims.pos -> Prims.int
(declare-fun Tm_arrow_08643d78e274903c12e67630bc27e2ff () Term)
(declare-fun Pulse.Class.BoundedIntegers.pos_as_int@tok () Term)

; </end encoding let pos_as_int>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.pos_as_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(169,4-169,14); use=Pulse.Class.BoundedIntegers.fst(169,4-169,14)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.pos)
(HasType (Pulse.Class.BoundedIntegers.pos_as_int @x0)
Prims.int))
 

:pattern ((Pulse.Class.BoundedIntegers.pos_as_int @x0))
:qid typing_Pulse.Class.BoundedIntegers.pos_as_int))

:named typing_Pulse.Class.BoundedIntegers.pos_as_int))
;;;;;;;;;;;;;;;;Equation for Pulse.Class.BoundedIntegers.pos_as_int
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.pos_as_int; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(169,4-169,14); use=Pulse.Class.BoundedIntegers.fst(169,4-169,14)
(forall ((@x0 Term))
 (! (= (Pulse.Class.BoundedIntegers.pos_as_int @x0)
@x0)
 

:pattern ((Pulse.Class.BoundedIntegers.pos_as_int @x0))
:qid equation_Pulse.Class.BoundedIntegers.pos_as_int))

:named equation_Pulse.Class.BoundedIntegers.pos_as_int))
(push) ;; push{2

; Starting query at Pulse.Class.BoundedIntegers.fst(171,0-181,1)

(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

(declare-fun Tm_abs_a0c0e02f00d0e81415acba0445b8261b () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_a0c0e02f00d0e81415acba0445b8261b
;;; Fact-ids: 
(assert (! (HasType Tm_abs_a0c0e02f00d0e81415acba0445b8261b
Tm_arrow_3a9c22ddc54716caa0276c05e792d97e)
:named typing_Tm_abs_a0c0e02f00d0e81415acba0445b8261b))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_a0c0e02f00d0e81415acba0445b8261b
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(172,21-172,26); use=Pulse.Class.BoundedIntegers.fst(174,18-174,19)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_a0c0e02f00d0e81415acba0445b8261b
@x0)
(Prims.b2t (Prims.op_GreaterThan @x0
(BoxInt 0))))
 

:pattern ((ApplyTT Tm_abs_a0c0e02f00d0e81415acba0445b8261b
@x0))
:qid interpretation_Tm_abs_a0c0e02f00d0e81415acba0445b8261b))

:named interpretation_Tm_abs_a0c0e02f00d0e81415acba0445b8261b))
















(declare-fun Tm_refine_fad9df321fe94693a9c005c80bf9d1b0 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_fad9df321fe94693a9c005c80bf9d1b0 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_fad9df321fe94693a9c005c80bf9d1b0 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_fad9df321fe94693a9c005c80bf9d1b0))

:named refinement_kinding_Tm_refine_fad9df321fe94693a9c005c80bf9d1b0))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_fad9df321fe94693a9c005c80bf9d1b0 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b))

;; def=Pulse.Class.BoundedIntegers.fst(11,80-11,96); use=Prims.fst(454,7-454,10)
(= (Pulse.Class.BoundedIntegers.pos_as_int @x1)
(Prims.op_Addition (Pulse.Class.BoundedIntegers.pos_as_int @x2)
(Pulse.Class.BoundedIntegers.pos_as_int @x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_fad9df321fe94693a9c005c80bf9d1b0 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_fad9df321fe94693a9c005c80bf9d1b0))

:named refinement_interpretation_Tm_refine_fad9df321fe94693a9c005c80bf9d1b0))
;;;;;;;;;;;;;;;;haseq for Tm_refine_fad9df321fe94693a9c005c80bf9d1b0
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_fad9df321fe94693a9c005c80bf9d1b0 @x0
@x1)))
(Valid (Prims.hasEq (Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_fad9df321fe94693a9c005c80bf9d1b0 @x0
@x1))))
:qid haseqTm_refine_fad9df321fe94693a9c005c80bf9d1b0))

:named haseqTm_refine_fad9df321fe94693a9c005c80bf9d1b0))
;;;;;;;;;;;;;;;;x: fits_t (fun x -> x > 0) -> y: fits_t (fun x -> x > 0) -> Prims.Pure (fits_t (fun x -> x > 0))
(declare-fun Tm_arrow_a132664ebe0a31a67c2cd2627085c71a () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_a132664ebe0a31a67c2cd2627085c71a
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_a132664ebe0a31a67c2cd2627085c71a
Tm_type)
:named kinding_Tm_arrow_a132664ebe0a31a67c2cd2627085c71a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_a132664ebe0a31a67c2cd2627085c71a)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_a132664ebe0a31a67c2cd2627085c71a))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_a132664ebe0a31a67c2cd2627085c71a))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_a132664ebe0a31a67c2cd2627085c71a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_a132664ebe0a31a67c2cd2627085c71a
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_a132664ebe0a31a67c2cd2627085c71a)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and 
;; def=Pulse.Class.BoundedIntegers.fst(172,21-172,26); use=Prims.fst(454,7-454,10)
(> (BoxInt_proj_0 (Prims.op_Addition (Pulse.Class.BoundedIntegers.pos_as_int @x1)
(Pulse.Class.BoundedIntegers.pos_as_int @x2)))
(BoxInt_proj_0 (BoxInt 0)))

(HasType @x1
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b))
(HasType @x2
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Tm_refine_fad9df321fe94693a9c005c80bf9d1b0 @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_a132664ebe0a31a67c2cd2627085c71a.1))

(IsTotFun @x0)

;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_a132664ebe0a31a67c2cd2627085c71a.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_a132664ebe0a31a67c2cd2627085c71a))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_a132664ebe0a31a67c2cd2627085c71a))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_a132664ebe0a31a67c2cd2627085c71a))
















(declare-fun Tm_refine_583c1e63481c4a1a765eaab14295c300 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_583c1e63481c4a1a765eaab14295c300 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_583c1e63481c4a1a765eaab14295c300 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_583c1e63481c4a1a765eaab14295c300))

:named refinement_kinding_Tm_refine_583c1e63481c4a1a765eaab14295c300))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_583c1e63481c4a1a765eaab14295c300 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b))

;; def=Pulse.Class.BoundedIntegers.fst(12,89-12,105); use=Prims.fst(454,7-454,10)
(= (Pulse.Class.BoundedIntegers.pos_as_int @x1)
(Prims.op_Subtraction (Pulse.Class.BoundedIntegers.pos_as_int @x2)
(Pulse.Class.BoundedIntegers.pos_as_int @x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_583c1e63481c4a1a765eaab14295c300 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_583c1e63481c4a1a765eaab14295c300))

:named refinement_interpretation_Tm_refine_583c1e63481c4a1a765eaab14295c300))
;;;;;;;;;;;;;;;;haseq for Tm_refine_583c1e63481c4a1a765eaab14295c300
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_583c1e63481c4a1a765eaab14295c300 @x0
@x1)))
(Valid (Prims.hasEq (Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_583c1e63481c4a1a765eaab14295c300 @x0
@x1))))
:qid haseqTm_refine_583c1e63481c4a1a765eaab14295c300))

:named haseqTm_refine_583c1e63481c4a1a765eaab14295c300))
;;;;;;;;;;;;;;;;x: fits_t (fun x -> x > 0) -> y: fits_t (fun x -> x > 0) -> Prims.Pure (fits_t (fun x -> x > 0))
(declare-fun Tm_arrow_a7bea353dbf6c922b24f231f5fb94c40 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_a7bea353dbf6c922b24f231f5fb94c40
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_a7bea353dbf6c922b24f231f5fb94c40
Tm_type)
:named kinding_Tm_arrow_a7bea353dbf6c922b24f231f5fb94c40))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_a7bea353dbf6c922b24f231f5fb94c40)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_a7bea353dbf6c922b24f231f5fb94c40))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_a7bea353dbf6c922b24f231f5fb94c40))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_a7bea353dbf6c922b24f231f5fb94c40))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_a7bea353dbf6c922b24f231f5fb94c40
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_a7bea353dbf6c922b24f231f5fb94c40)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and 
;; def=Pulse.Class.BoundedIntegers.fst(172,21-172,26); use=Prims.fst(454,7-454,10)
(> (BoxInt_proj_0 (Prims.op_Subtraction (Pulse.Class.BoundedIntegers.pos_as_int @x1)
(Pulse.Class.BoundedIntegers.pos_as_int @x2)))
(BoxInt_proj_0 (BoxInt 0)))

(HasType @x1
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b))
(HasType @x2
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Tm_refine_583c1e63481c4a1a765eaab14295c300 @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_a7bea353dbf6c922b24f231f5fb94c40.1))

(IsTotFun @x0)

;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_a7bea353dbf6c922b24f231f5fb94c40.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_a7bea353dbf6c922b24f231f5fb94c40))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_a7bea353dbf6c922b24f231f5fb94c40))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_a7bea353dbf6c922b24f231f5fb94c40))








(declare-fun Tm_refine_49f79d349e2ea66d0f3ab3d102f7b26d (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(13,27-13,52); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_49f79d349e2ea66d0f3ab3d102f7b26d @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_49f79d349e2ea66d0f3ab3d102f7b26d @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_49f79d349e2ea66d0f3ab3d102f7b26d))

:named refinement_kinding_Tm_refine_49f79d349e2ea66d0f3ab3d102f7b26d))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(13,27-13,52); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_49f79d349e2ea66d0f3ab3d102f7b26d @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.bool)

;; def=Pulse.Class.BoundedIntegers.fst(13,36-13,51); use=Prims.fst(454,7-454,10)
(= @x1
(Prims.op_LessThan (Pulse.Class.BoundedIntegers.pos_as_int @x2)
(Pulse.Class.BoundedIntegers.pos_as_int @x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_49f79d349e2ea66d0f3ab3d102f7b26d @x2
@x3)))
:qid refinement_interpretation_Tm_refine_49f79d349e2ea66d0f3ab3d102f7b26d))

:named refinement_interpretation_Tm_refine_49f79d349e2ea66d0f3ab3d102f7b26d))
;;;;;;;;;;;;;;;;haseq for Tm_refine_49f79d349e2ea66d0f3ab3d102f7b26d
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(13,27-13,52); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_49f79d349e2ea66d0f3ab3d102f7b26d @x0
@x1)))
(Valid (Prims.hasEq Prims.bool)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_49f79d349e2ea66d0f3ab3d102f7b26d @x0
@x1))))
:qid haseqTm_refine_49f79d349e2ea66d0f3ab3d102f7b26d))

:named haseqTm_refine_49f79d349e2ea66d0f3ab3d102f7b26d))
;;;;;;;;;;;;;;;;x: fits_t (fun x -> x > 0) -> y: fits_t (fun x -> x > 0)   -> b: Prims.bool{b = (pos_as_int x < pos_as_int y)}
(declare-fun Tm_arrow_1366db2c5f83853ab150636774368e46 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_1366db2c5f83853ab150636774368e46
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_1366db2c5f83853ab150636774368e46
Tm_type)
:named kinding_Tm_arrow_1366db2c5f83853ab150636774368e46))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-13,52); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_1366db2c5f83853ab150636774368e46)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_1366db2c5f83853ab150636774368e46))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_1366db2c5f83853ab150636774368e46))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_1366db2c5f83853ab150636774368e46))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_1366db2c5f83853ab150636774368e46
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-13,52); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_1366db2c5f83853ab150636774368e46)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-13,52); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b))
(HasType @x2
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Tm_refine_49f79d349e2ea66d0f3ab3d102f7b26d @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_1366db2c5f83853ab150636774368e46.1))

(IsTotFun @x0)

;; def=Pulse.Class.BoundedIntegers.fst(10,8-13,52); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_1366db2c5f83853ab150636774368e46.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_1366db2c5f83853ab150636774368e46))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_1366db2c5f83853ab150636774368e46))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_1366db2c5f83853ab150636774368e46))








(declare-fun Tm_refine_6a89af1ec8335b68fb1cfb3f3b5d88a5 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,28-14,54); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_6a89af1ec8335b68fb1cfb3f3b5d88a5 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_6a89af1ec8335b68fb1cfb3f3b5d88a5 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_6a89af1ec8335b68fb1cfb3f3b5d88a5))

:named refinement_kinding_Tm_refine_6a89af1ec8335b68fb1cfb3f3b5d88a5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,28-14,54); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_6a89af1ec8335b68fb1cfb3f3b5d88a5 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.bool)

;; def=Pulse.Class.BoundedIntegers.fst(14,37-14,53); use=Prims.fst(454,7-454,10)
(= @x1
(Prims.op_LessThanOrEqual (Pulse.Class.BoundedIntegers.pos_as_int @x2)
(Pulse.Class.BoundedIntegers.pos_as_int @x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_6a89af1ec8335b68fb1cfb3f3b5d88a5 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_6a89af1ec8335b68fb1cfb3f3b5d88a5))

:named refinement_interpretation_Tm_refine_6a89af1ec8335b68fb1cfb3f3b5d88a5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_6a89af1ec8335b68fb1cfb3f3b5d88a5
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(14,28-14,54); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_6a89af1ec8335b68fb1cfb3f3b5d88a5 @x0
@x1)))
(Valid (Prims.hasEq Prims.bool)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_6a89af1ec8335b68fb1cfb3f3b5d88a5 @x0
@x1))))
:qid haseqTm_refine_6a89af1ec8335b68fb1cfb3f3b5d88a5))

:named haseqTm_refine_6a89af1ec8335b68fb1cfb3f3b5d88a5))
;;;;;;;;;;;;;;;;x: fits_t (fun x -> x > 0) -> y: fits_t (fun x -> x > 0)   -> b: Prims.bool{b = (pos_as_int x <= pos_as_int y)}
(declare-fun Tm_arrow_afdecc77c51515894c2b74b738067b8e () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_afdecc77c51515894c2b74b738067b8e
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_afdecc77c51515894c2b74b738067b8e
Tm_type)
:named kinding_Tm_arrow_afdecc77c51515894c2b74b738067b8e))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-14,54); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_afdecc77c51515894c2b74b738067b8e)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_afdecc77c51515894c2b74b738067b8e))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_afdecc77c51515894c2b74b738067b8e))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_afdecc77c51515894c2b74b738067b8e))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_afdecc77c51515894c2b74b738067b8e
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-14,54); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_afdecc77c51515894c2b74b738067b8e)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-14,54); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b))
(HasType @x2
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Tm_refine_6a89af1ec8335b68fb1cfb3f3b5d88a5 @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_afdecc77c51515894c2b74b738067b8e.1))

(IsTotFun @x0)

;; def=Pulse.Class.BoundedIntegers.fst(10,8-14,54); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_afdecc77c51515894c2b74b738067b8e.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_afdecc77c51515894c2b74b738067b8e))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_afdecc77c51515894c2b74b738067b8e))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_afdecc77c51515894c2b74b738067b8e))




















(declare-fun Tm_refine_f0dca5e0e35ebed039d484fc14d6631d (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_f0dca5e0e35ebed039d484fc14d6631d @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_f0dca5e0e35ebed039d484fc14d6631d @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_f0dca5e0e35ebed039d484fc14d6631d))

:named refinement_kinding_Tm_refine_f0dca5e0e35ebed039d484fc14d6631d))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_f0dca5e0e35ebed039d484fc14d6631d @x2
@x3))
(and (HasTypeFuel @u0
@x1
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b))

;; def=Pulse.Class.BoundedIntegers.fst(15,91-15,107); use=Prims.fst(454,7-454,10)
(= (Pulse.Class.BoundedIntegers.pos_as_int @x1)
(Prims.op_Modulus (Pulse.Class.BoundedIntegers.pos_as_int @x2)
(Pulse.Class.BoundedIntegers.pos_as_int @x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_f0dca5e0e35ebed039d484fc14d6631d @x2
@x3)))
:qid refinement_interpretation_Tm_refine_f0dca5e0e35ebed039d484fc14d6631d))

:named refinement_interpretation_Tm_refine_f0dca5e0e35ebed039d484fc14d6631d))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f0dca5e0e35ebed039d484fc14d6631d
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_f0dca5e0e35ebed039d484fc14d6631d @x0
@x1)))
(Valid (Prims.hasEq (Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_f0dca5e0e35ebed039d484fc14d6631d @x0
@x1))))
:qid haseqTm_refine_f0dca5e0e35ebed039d484fc14d6631d))

:named haseqTm_refine_f0dca5e0e35ebed039d484fc14d6631d))
;;;;;;;;;;;;;;;;x: fits_t (fun x -> x > 0) -> y: fits_t (fun x -> x > 0) -> Prims.Pure (fits_t (fun x -> x > 0))
(declare-fun Tm_arrow_4d38d7fc4b43226b3189add1bcbac3dd () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_4d38d7fc4b43226b3189add1bcbac3dd
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_4d38d7fc4b43226b3189add1bcbac3dd
Tm_type)
:named kinding_Tm_arrow_4d38d7fc4b43226b3189add1bcbac3dd))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_4d38d7fc4b43226b3189add1bcbac3dd)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_4d38d7fc4b43226b3189add1bcbac3dd))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_4d38d7fc4b43226b3189add1bcbac3dd))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_4d38d7fc4b43226b3189add1bcbac3dd))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_4d38d7fc4b43226b3189add1bcbac3dd
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_4d38d7fc4b43226b3189add1bcbac3dd)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and 
;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Prims.fst(454,7-454,10)
(> (BoxInt_proj_0 (Pulse.Class.BoundedIntegers.pos_as_int @x2))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Pulse.Class.BoundedIntegers.fst(172,21-172,26); use=Prims.fst(454,7-454,10)
(> (BoxInt_proj_0 (Prims.op_Modulus (Pulse.Class.BoundedIntegers.pos_as_int @x1)
(Pulse.Class.BoundedIntegers.pos_as_int @x2)))
(BoxInt_proj_0 (BoxInt 0)))

(HasType @x1
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b))
(HasType @x2
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Tm_refine_f0dca5e0e35ebed039d484fc14d6631d @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_4d38d7fc4b43226b3189add1bcbac3dd.1))

(IsTotFun @x0)

;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_4d38d7fc4b43226b3189add1bcbac3dd.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_4d38d7fc4b43226b3189add1bcbac3dd))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_4d38d7fc4b43226b3189add1bcbac3dd))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_4d38d7fc4b43226b3189add1bcbac3dd))






(declare-fun Tm_abs_070b5ea2b97e0fc09c7c981146a82928 () Term)
;;;;;;;;;;;;;;;;tot_fun_Tm_abs_070b5ea2b97e0fc09c7c981146a82928
;;; Fact-ids: 
(assert (! (and (IsTotFun Tm_abs_070b5ea2b97e0fc09c7c981146a82928)

;; def=Pulse.Class.BoundedIntegers.fst(179,24-179,44); use=Pulse.Class.BoundedIntegers.fst(179,24-179,44)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Tm_abs_070b5ea2b97e0fc09c7c981146a82928
@x0))
 

:pattern ((ApplyTT Tm_abs_070b5ea2b97e0fc09c7c981146a82928
@x0))
:qid tot_fun_Tm_abs_070b5ea2b97e0fc09c7c981146a82928))
)
:named tot_fun_Tm_abs_070b5ea2b97e0fc09c7c981146a82928))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_070b5ea2b97e0fc09c7c981146a82928
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(179,24-179,44); use=Pulse.Class.BoundedIntegers.fst(179,24-179,44)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_070b5ea2b97e0fc09c7c981146a82928
@x0)
@x1)
(Prims.op_Modulus @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_070b5ea2b97e0fc09c7c981146a82928
@x0)
@x1))
:qid interpretation_Tm_abs_070b5ea2b97e0fc09c7c981146a82928))

:named interpretation_Tm_abs_070b5ea2b97e0fc09c7c981146a82928))










(declare-fun Tm_abs_84411c529aadcb1116eac6527c6b792f () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_84411c529aadcb1116eac6527c6b792f
;;; Fact-ids: 
(assert (! (HasType Tm_abs_84411c529aadcb1116eac6527c6b792f
Tm_arrow_afdecc77c51515894c2b74b738067b8e)
:named typing_Tm_abs_84411c529aadcb1116eac6527c6b792f))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_84411c529aadcb1116eac6527c6b792f
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(178,25-178,53); use=Pulse.Class.BoundedIntegers.fst(178,25-178,53)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_84411c529aadcb1116eac6527c6b792f
@x0)
@x1)
(Prims.op_LessThanOrEqual @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_84411c529aadcb1116eac6527c6b792f
@x0)
@x1))
:qid interpretation_Tm_abs_84411c529aadcb1116eac6527c6b792f))

:named interpretation_Tm_abs_84411c529aadcb1116eac6527c6b792f))










(declare-fun Tm_abs_c0b25b1d1aa263cc86fd36b11e63f170 () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_c0b25b1d1aa263cc86fd36b11e63f170
;;; Fact-ids: 
(assert (! (HasType Tm_abs_c0b25b1d1aa263cc86fd36b11e63f170
Tm_arrow_1366db2c5f83853ab150636774368e46)
:named typing_Tm_abs_c0b25b1d1aa263cc86fd36b11e63f170))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_c0b25b1d1aa263cc86fd36b11e63f170
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(177,24-177,45); use=Pulse.Class.BoundedIntegers.fst(177,24-177,45)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_c0b25b1d1aa263cc86fd36b11e63f170
@x0)
@x1)
(Prims.op_LessThan @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_c0b25b1d1aa263cc86fd36b11e63f170
@x0)
@x1))
:qid interpretation_Tm_abs_c0b25b1d1aa263cc86fd36b11e63f170))

:named interpretation_Tm_abs_c0b25b1d1aa263cc86fd36b11e63f170))




(declare-fun Tm_abs_9ef36024bb5e1a40108df2dfee06a8a3 () Term)
;;;;;;;;;;;;;;;;tot_fun_Tm_abs_9ef36024bb5e1a40108df2dfee06a8a3
;;; Fact-ids: 
(assert (! (and (IsTotFun Tm_abs_9ef36024bb5e1a40108df2dfee06a8a3)

;; def=Pulse.Class.BoundedIntegers.fst(176,33-176,57); use=Pulse.Class.BoundedIntegers.fst(176,33-176,57)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Tm_abs_9ef36024bb5e1a40108df2dfee06a8a3
@x0))
 

:pattern ((ApplyTT Tm_abs_9ef36024bb5e1a40108df2dfee06a8a3
@x0))
:qid tot_fun_Tm_abs_9ef36024bb5e1a40108df2dfee06a8a3))
)
:named tot_fun_Tm_abs_9ef36024bb5e1a40108df2dfee06a8a3))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_9ef36024bb5e1a40108df2dfee06a8a3
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(176,33-176,57); use=Pulse.Class.BoundedIntegers.fst(176,33-176,57)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_9ef36024bb5e1a40108df2dfee06a8a3
@x0)
@x1)
(Prims.op_Subtraction @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_9ef36024bb5e1a40108df2dfee06a8a3
@x0)
@x1))
:qid interpretation_Tm_abs_9ef36024bb5e1a40108df2dfee06a8a3))

:named interpretation_Tm_abs_9ef36024bb5e1a40108df2dfee06a8a3))




(declare-fun Tm_abs_4cce77c08819dd21a3165240c4725bcf () Term)
;;;;;;;;;;;;;;;;tot_fun_Tm_abs_4cce77c08819dd21a3165240c4725bcf
;;; Fact-ids: 
(assert (! (and (IsTotFun Tm_abs_4cce77c08819dd21a3165240c4725bcf)

;; def=Pulse.Class.BoundedIntegers.fst(175,24-175,45); use=Pulse.Class.BoundedIntegers.fst(175,24-175,45)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Tm_abs_4cce77c08819dd21a3165240c4725bcf
@x0))
 

:pattern ((ApplyTT Tm_abs_4cce77c08819dd21a3165240c4725bcf
@x0))
:qid tot_fun_Tm_abs_4cce77c08819dd21a3165240c4725bcf))
)
:named tot_fun_Tm_abs_4cce77c08819dd21a3165240c4725bcf))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_4cce77c08819dd21a3165240c4725bcf
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(175,24-175,45); use=Pulse.Class.BoundedIntegers.fst(175,24-175,45)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_4cce77c08819dd21a3165240c4725bcf
@x0)
@x1)
(Prims.op_Addition @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_4cce77c08819dd21a3165240c4725bcf
@x0)
@x1))
:qid interpretation_Tm_abs_4cce77c08819dd21a3165240c4725bcf))

:named interpretation_Tm_abs_4cce77c08819dd21a3165240c4725bcf))



; Encoding query formula : Prims.hasEq (Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0)) /\
; (forall (return_val: Prims.eqtype).
;     return_val == Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0) ==>
;     (forall (x: Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0))
;         (y: Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0)).
;         (*  - Could not prove post-condition
; *)
;         forall (p: Prims.pure_post (Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0))).
;           Pulse.Class.BoundedIntegers.pos_as_int x + Pulse.Class.BoundedIntegers.pos_as_int y > 0 /\
;           (forall (pure_result: Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0)).
;               Pulse.Class.BoundedIntegers.pos_as_int pure_result ==
;               Pulse.Class.BoundedIntegers.pos_as_int x + Pulse.Class.BoundedIntegers.pos_as_int y ==>
;               p pure_result) ==>
;           x + y > 0 /\
;           (forall (return_val: Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0)).
;               return_val == x + y ==> p return_val)) /\
;     (forall (any_result:
;         (
;               x: Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0) ->
;               y: Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0)
;             -> Prims.Pure (Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0)))).
;         (fun x y -> x + y) == any_result ==>
;         (forall (x: Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0))
;             (y: Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0)).
;             (*  - Could not prove post-condition
; *)
;             forall (p: Prims.pure_post (Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0))).
;               Pulse.Class.BoundedIntegers.pos_as_int x - Pulse.Class.BoundedIntegers.pos_as_int y >
;               0 /\
;               (forall (pure_result: Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0)).
;                   Pulse.Class.BoundedIntegers.pos_as_int pure_result ==
;                   Pulse.Class.BoundedIntegers.pos_as_int x -
;                   Pulse.Class.BoundedIntegers.pos_as_int y ==>
;                   p pure_result) ==>
;               x - y > 0 /\
;               (forall (return_val: Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0)).
;                   return_val == x - y ==> p return_val)) /\
;         (forall (any_result:
;             (
;                   x: Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0) ->
;                   y: Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0)
;                 -> Prims.Pure (Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0)))).
;             (fun x y -> x - y) == any_result ==>
;             (forall (x: Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0))
;                 (y: Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0)).
;                 (*  - Could not prove post-condition
; *)
;                 x < y =
;                 (Pulse.Class.BoundedIntegers.pos_as_int x < Pulse.Class.BoundedIntegers.pos_as_int y)
;             ) /\
;             (forall (any_result:
;                 (
;                       x: Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0) ->
;                       y: Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0)
;                     -> b:
;                       Prims.bool
;                         { b =
;                           (Pulse.Class.BoundedIntegers.pos_as_int x <
;                           Pulse.Class.BoundedIntegers.pos_as_int y) })).
;                 (fun x y -> x < y) == any_result ==>
;                 (forall (x: Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0))
;                     (y: Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0)).
;                     (*  - Could not prove post-condition
; *)
;                     x <= y =
;                     (Pulse.Class.BoundedIntegers.pos_as_int x <=
;                     Pulse.Class.BoundedIntegers.pos_as_int y)) /\
;                 (forall (any_result:
;                     (
;                           x: Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0) ->
;                           y: Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0)
;                         -> b:
;                           Prims.bool
;                             { b =
;                               (Pulse.Class.BoundedIntegers.pos_as_int x <=
;                               Pulse.Class.BoundedIntegers.pos_as_int y) })).
;                     (fun x y -> x <= y) == any_result ==>
;                     (forall (x: Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0))
;                         (y: Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0)).
;                         (*  - Could not prove post-condition
; *)
;                         forall (p:
;                           Prims.pure_post (Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0))).
;                           Pulse.Class.BoundedIntegers.pos_as_int y > 0 /\
;                           Pulse.Class.BoundedIntegers.pos_as_int x %
;                           Pulse.Class.BoundedIntegers.pos_as_int y >
;                           0 /\
;                           (forall (pure_result: Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0))
;                             .
;                               Pulse.Class.BoundedIntegers.pos_as_int pure_result ==
;                               Pulse.Class.BoundedIntegers.pos_as_int x %
;                               Pulse.Class.BoundedIntegers.pos_as_int y ==>
;                               p pure_result) ==>
;                           (y > 0 ==> y <> 0) /\
;                           (forall (any_result: Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0)).
;                               y == any_result ==>
;                               (forall (any_result: Prims.int).
;                                   x % y == any_result ==>
;                                   x % y > 0 /\
;                                   (forall (return_val:
;                                       Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0)).
;                                       return_val == x % y ==>
;                                       return_val == x % y ==>
;                                       (forall (return_val:
;                                           Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0)).
;                                           return_val == return_val ==> p return_val))))) /\
;                     (forall (any_result:
;                         (
;                               x: Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0) ->
;                               y: Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0)
;                             -> Prims.Pure (Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0)))).
;                         (fun x y -> x % y) == any_result ==>
;                         (forall (x: Pulse.Class.BoundedIntegers.fits_t (fun x -> x > 0)).
;                             {:pattern Pulse.Class.BoundedIntegers.pos_as_int x}
;                             Pulse.Class.BoundedIntegers.pos_as_int x > 0)))))))


; Context: While encoding a query
; While checking for top-level effects
; While typechecking the top-level declaration `let bounded_int_pos`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and 
;; def=Prims.fst(73,23-73,30); use=Pulse.Class.BoundedIntegers.fst(174,18-174,19)
(or label_1

;; def=Prims.fst(73,23-73,30); use=Pulse.Class.BoundedIntegers.fst(174,18-174,19)
(Valid 
;; def=Prims.fst(73,23-73,30); use=Pulse.Class.BoundedIntegers.fst(174,18-174,19)
(Prims.hasEq (Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b))
)
)


;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x0
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b))
)

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and (forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b))
(HasType @x2
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post (Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b)))

;; def=Pulse.Class.BoundedIntegers.fst(172,21-172,26); use=Pulse.Class.BoundedIntegers.fst(175,24-175,45)
(> (BoxInt_proj_0 (Prims.op_Addition (Pulse.Class.BoundedIntegers.pos_as_int @x1)
(Pulse.Class.BoundedIntegers.pos_as_int @x2)))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(175,24-175,45)
(forall ((@x4 Term))
 (! (implies (and (or label_2
(HasType @x4
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b)))

;; def=Pulse.Class.BoundedIntegers.fst(11,80-11,96); use=Pulse.Class.BoundedIntegers.fst(175,24-175,45)
(or label_3

;; def=Pulse.Class.BoundedIntegers.fst(11,80-11,96); use=Pulse.Class.BoundedIntegers.fst(175,24-175,45)
(= (Pulse.Class.BoundedIntegers.pos_as_int @x4)
(Prims.op_Addition (Pulse.Class.BoundedIntegers.pos_as_int @x1)
(Pulse.Class.BoundedIntegers.pos_as_int @x2)))
)
)

;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(175,24-175,45)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(175,24-175,45)
(ApplyTT @x3
@x4)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(175,24-175,45)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(175,24-175,45)
(ApplyTT @x3
@x4)
)
)
:qid @query.3))
)

;; def=Prims.fst(459,77-459,89); use=Pulse.Class.BoundedIntegers.fst(175,24-175,45)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(172,21-172,26); use=Pulse.Class.BoundedIntegers.fst(175,24-175,45)
(or label_4

;; def=Pulse.Class.BoundedIntegers.fst(172,21-172,26); use=Pulse.Class.BoundedIntegers.fst(175,24-175,45)
(> (BoxInt_proj_0 (Prims.op_Addition @x1
@x2))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=Pulse.Class.BoundedIntegers.fst(175,24-175,45)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b))

;; def=Prims.fst(356,26-356,41); use=Pulse.Class.BoundedIntegers.fst(175,24-175,45)
(= @x4
(Prims.op_Addition @x1
@x2))
)

;; def=Prims.fst(356,46-356,58); use=Pulse.Class.BoundedIntegers.fst(175,24-175,45)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Pulse.Class.BoundedIntegers.fst(175,24-175,45)
(ApplyTT @x3
@x4)
)
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
Tm_arrow_a132664ebe0a31a67c2cd2627085c71a)

;; def=Pulse.Class.BoundedIntegers.fst(11,6-175,45); use=Pulse.Class.BoundedIntegers.fst(11,6-175,45)
(= Tm_abs_4cce77c08819dd21a3165240c4725bcf
@x1)
)

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and (forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b))
(HasType @x3
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post (Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b)))

;; def=Pulse.Class.BoundedIntegers.fst(172,21-172,26); use=Pulse.Class.BoundedIntegers.fst(176,33-176,57)
(> (BoxInt_proj_0 (Prims.op_Subtraction (Pulse.Class.BoundedIntegers.pos_as_int @x2)
(Pulse.Class.BoundedIntegers.pos_as_int @x3)))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(176,33-176,57)
(forall ((@x5 Term))
 (! (implies (and (or label_5
(HasType @x5
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b)))

;; def=Pulse.Class.BoundedIntegers.fst(12,89-12,105); use=Pulse.Class.BoundedIntegers.fst(176,33-176,57)
(or label_6

;; def=Pulse.Class.BoundedIntegers.fst(12,89-12,105); use=Pulse.Class.BoundedIntegers.fst(176,33-176,57)
(= (Pulse.Class.BoundedIntegers.pos_as_int @x5)
(Prims.op_Subtraction (Pulse.Class.BoundedIntegers.pos_as_int @x2)
(Pulse.Class.BoundedIntegers.pos_as_int @x3)))
)
)

;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(176,33-176,57)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(176,33-176,57)
(ApplyTT @x4
@x5)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(176,33-176,57)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(176,33-176,57)
(ApplyTT @x4
@x5)
)
)
:qid @query.8))
)

;; def=Prims.fst(459,77-459,89); use=Pulse.Class.BoundedIntegers.fst(176,33-176,57)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(172,21-172,26); use=Pulse.Class.BoundedIntegers.fst(176,33-176,57)
(or label_7

;; def=Pulse.Class.BoundedIntegers.fst(172,21-172,26); use=Pulse.Class.BoundedIntegers.fst(176,33-176,57)
(> (BoxInt_proj_0 (Prims.op_Subtraction @x2
@x3))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=Pulse.Class.BoundedIntegers.fst(176,33-176,57)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b))

;; def=Prims.fst(356,26-356,41); use=Pulse.Class.BoundedIntegers.fst(176,33-176,57)
(= @x5
(Prims.op_Subtraction @x2
@x3))
)

;; def=Prims.fst(356,46-356,58); use=Pulse.Class.BoundedIntegers.fst(176,33-176,57)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Pulse.Class.BoundedIntegers.fst(176,33-176,57)
(ApplyTT @x4
@x5)
)
)
 
;;no pats
:qid @query.9))
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
Tm_arrow_a7bea353dbf6c922b24f231f5fb94c40)

;; def=Pulse.Class.BoundedIntegers.fst(12,4-176,57); use=Pulse.Class.BoundedIntegers.fst(12,4-176,57)
(= Tm_abs_9ef36024bb5e1a40108df2dfee06a8a3
@x2)
)

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and (forall ((@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x3
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b))
(HasType @x4
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b)))

;; def=Pulse.Class.BoundedIntegers.fst(13,36-13,51); use=Pulse.Class.BoundedIntegers.fst(177,24-177,45)
(or label_8

;; def=Pulse.Class.BoundedIntegers.fst(13,36-13,51); use=Pulse.Class.BoundedIntegers.fst(177,24-177,45)
(= (Prims.op_LessThan @x3
@x4)
(Prims.op_LessThan (Pulse.Class.BoundedIntegers.pos_as_int @x3)
(Pulse.Class.BoundedIntegers.pos_as_int @x4)))
)
)
 
;;no pats
:qid @query.11))

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Tm_arrow_1366db2c5f83853ab150636774368e46)

;; def=Pulse.Class.BoundedIntegers.fst(13,6-177,45); use=Pulse.Class.BoundedIntegers.fst(13,6-177,45)
(= Tm_abs_c0b25b1d1aa263cc86fd36b11e63f170
@x3)
)

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and (forall ((@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x4
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b))
(HasType @x5
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b)))

;; def=Pulse.Class.BoundedIntegers.fst(14,37-14,53); use=Pulse.Class.BoundedIntegers.fst(178,25-178,53)
(or label_9

;; def=Pulse.Class.BoundedIntegers.fst(14,37-14,53); use=Pulse.Class.BoundedIntegers.fst(178,25-178,53)
(= (Prims.op_LessThanOrEqual @x4
@x5)
(Prims.op_LessThanOrEqual (Pulse.Class.BoundedIntegers.pos_as_int @x4)
(Pulse.Class.BoundedIntegers.pos_as_int @x5)))
)
)
 
;;no pats
:qid @query.13))

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Tm_arrow_afdecc77c51515894c2b74b738067b8e)

;; def=Pulse.Class.BoundedIntegers.fst(14,6-178,53); use=Pulse.Class.BoundedIntegers.fst(14,6-178,53)
(= Tm_abs_84411c529aadcb1116eac6527c6b792f
@x4)
)

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and (forall ((@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x5
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b))
(HasType @x6
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(Prims.pure_post (Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b)))

;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Pulse.Class.BoundedIntegers.fst(179,24-179,44)
(> (BoxInt_proj_0 (Pulse.Class.BoundedIntegers.pos_as_int @x6))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Pulse.Class.BoundedIntegers.fst(172,21-172,26); use=Pulse.Class.BoundedIntegers.fst(179,24-179,44)
(> (BoxInt_proj_0 (Prims.op_Modulus (Pulse.Class.BoundedIntegers.pos_as_int @x5)
(Pulse.Class.BoundedIntegers.pos_as_int @x6)))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(179,24-179,44)
(forall ((@x8 Term))
 (! (implies (and (or label_10
(HasType @x8
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b)))

;; def=Pulse.Class.BoundedIntegers.fst(15,91-15,107); use=Pulse.Class.BoundedIntegers.fst(179,24-179,44)
(or label_11

;; def=Pulse.Class.BoundedIntegers.fst(15,91-15,107); use=Pulse.Class.BoundedIntegers.fst(179,24-179,44)
(= (Pulse.Class.BoundedIntegers.pos_as_int @x8)
(Prims.op_Modulus (Pulse.Class.BoundedIntegers.pos_as_int @x5)
(Pulse.Class.BoundedIntegers.pos_as_int @x6)))
)
)

;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(179,24-179,44)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(179,24-179,44)
(ApplyTT @x7
@x8)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(179,24-179,44)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(179,24-179,44)
(ApplyTT @x7
@x8)
)
)
:qid @query.17))
)

;; def=Prims.fst(459,77-459,89); use=Pulse.Class.BoundedIntegers.fst(179,24-179,44)
(and (implies 
;; def=Pulse.Class.BoundedIntegers.fst(172,21-172,26); use=Pulse.Class.BoundedIntegers.fst(179,43-179,44)
(> (BoxInt_proj_0 @x6)
(BoxInt_proj_0 (BoxInt 0)))


;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(179,43-179,44)
(or label_12

;; def=Prims.fst(686,22-686,28); use=Pulse.Class.BoundedIntegers.fst(179,43-179,44)
(not (= @x6
(BoxInt 0)))
)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(179,24-179,44)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b))

;; def=dummy(0,0-0,0); use=Pulse.Class.BoundedIntegers.fst(179,24-179,44)
(= @x6
@x8)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(179,24-179,44)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.int)

;; def=Pulse.Class.BoundedIntegers.fst(10,8-179,44); use=Pulse.Class.BoundedIntegers.fst(179,24-179,44)
(= (Prims.op_Modulus @x5
@x6)
@x9)
)

;; def=Prims.fst(459,77-459,89); use=Pulse.Class.BoundedIntegers.fst(179,24-179,44)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(172,21-172,26); use=Pulse.Class.BoundedIntegers.fst(179,24-179,44)
(or label_13

;; def=Pulse.Class.BoundedIntegers.fst(172,21-172,26); use=Pulse.Class.BoundedIntegers.fst(179,24-179,44)
(> (BoxInt_proj_0 (Prims.op_Modulus @x5
@x6))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=Pulse.Class.BoundedIntegers.fst(179,24-179,44)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b))

;; def=Prims.fst(356,26-356,41); use=Pulse.Class.BoundedIntegers.fst(179,24-179,44)
(= @x10
(Prims.op_Modulus @x5
@x6))


;; def=Pulse.Class.BoundedIntegers.fst(10,8-179,44); use=Pulse.Class.BoundedIntegers.fst(179,24-179,44)
(= @x10
(Prims.op_Modulus @x5
@x6))
)

;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b))

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x11
@x10)
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x7
@x11)
)
)
 
;;no pats
:qid @query.21))
)
 
;;no pats
:qid @query.20))
)
)
 
;;no pats
:qid @query.19))
)
 
;;no pats
:qid @query.18))
)
)
 
;;no pats
:qid @query.16))
)
 
;;no pats
:qid @query.15))

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Tm_arrow_4d38d7fc4b43226b3189add1bcbac3dd)

;; def=Pulse.Class.BoundedIntegers.fst(15,6-179,44); use=Pulse.Class.BoundedIntegers.fst(15,6-179,44)
(= Tm_abs_070b5ea2b97e0fc09c7c981146a82928
@x5)
)

;; def=Pulse.Class.BoundedIntegers.fst(17,23-19,5); use=Pulse.Class.BoundedIntegers.fst(180,17-180,19)
(forall ((@x6 Term))
 (! (implies (HasType @x6
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_a0c0e02f00d0e81415acba0445b8261b))

;; def=Pulse.Class.BoundedIntegers.fst(172,21-172,26); use=Pulse.Class.BoundedIntegers.fst(180,17-180,19)
(or label_14

;; def=Pulse.Class.BoundedIntegers.fst(172,21-172,26); use=Pulse.Class.BoundedIntegers.fst(180,17-180,19)
(> (BoxInt_proj_0 (Pulse.Class.BoundedIntegers.pos_as_int @x6))
(BoxInt_proj_0 (BoxInt 0)))
)
)
 

:pattern ((Pulse.Class.BoundedIntegers.pos_as_int @x6))
:qid @query.23))
)
 
;;no pats
:qid @query.22))
)
)
 
;;no pats
:qid @query.14))
)
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.5))
)
)
 
;;no pats
:qid @query))
)
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Pulse.Class.BoundedIntegers.bounded_int_pos, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, b2t_def, equation_Prims.eqtype, equation_Pulse.Class.BoundedIntegers.fits_t, equation_Pulse.Class.BoundedIntegers.pos_as_int, haseqTm_refine_2c9509c4fdf356ea8b390762a509ebbb, interpretation_Tm_abs_a0c0e02f00d0e81415acba0445b8261b, primitive_Prims.op_Addition, primitive_Prims.op_GreaterThan, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_2c9509c4fdf356ea8b390762a509ebbb, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let bounded_int_pos


; <Start encoding let bounded_int_pos>

(declare-fun Pulse.Class.BoundedIntegers.bounded_int_pos (Dummy_sort) Term)

(declare-fun Tm_abs_a0c0e02f00d0e81415acba0445b8261b () Term)








;;;;;;;;;;;;;;;;x: fits_t (fun x -> x > 0) -> Prims.GTot (fits_t (fun x -> x > 0))
(declare-fun Tm_ghost_arrow_b33d9126a70258b3b20b8a67702540ea () Term)
(declare-fun Tm_abs_b87dc948001b9cd637648aad2f161965 () Term)




(declare-fun Tm_abs_4cce77c08819dd21a3165240c4725bcf () Term)




(declare-fun Tm_abs_9ef36024bb5e1a40108df2dfee06a8a3 () Term)








(declare-fun Tm_refine_49f79d349e2ea66d0f3ab3d102f7b26d (Term Term) Term)
;;;;;;;;;;;;;;;;x: fits_t (fun x -> x > 0) -> y: fits_t (fun x -> x > 0)   -> b: Prims.bool{b = (pos_as_int x < pos_as_int y)}
(declare-fun Tm_arrow_1366db2c5f83853ab150636774368e46 () Term)
(declare-fun Tm_abs_c0b25b1d1aa263cc86fd36b11e63f170 () Term)








(declare-fun Tm_refine_6a89af1ec8335b68fb1cfb3f3b5d88a5 (Term Term) Term)
;;;;;;;;;;;;;;;;x: fits_t (fun x -> x > 0) -> y: fits_t (fun x -> x > 0)   -> b: Prims.bool{b = (pos_as_int x <= pos_as_int y)}
(declare-fun Tm_arrow_afdecc77c51515894c2b74b738067b8e () Term)
(declare-fun Tm_abs_84411c529aadcb1116eac6527c6b792f () Term)




(declare-fun Tm_abs_070b5ea2b97e0fc09c7c981146a82928 () Term)

; </end encoding let bounded_int_pos>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.SizeT.v; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(24,4-24,5); use=FStar.SizeT.fsti(24,4-24,5)
(forall ((@x0 Term))
 (! (implies (HasType @x0
(FStar.SizeT.t Dummy_value))
(HasType (FStar.SizeT.v @x0)
Tm_refine_7df43cb9feb536df62477b7b30ce1682))
 

:pattern ((FStar.SizeT.v @x0))
:qid typing_FStar.SizeT.v))

:named typing_FStar.SizeT.v))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.SizeT.uint_to_t; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(34,4-34,13); use=FStar.SizeT.fsti(34,4-34,13)
(forall ((@x0 Term))
 (! (implies (and 
;; def=FStar.SizeT.fsti(35,12-35,20); use=FStar.SizeT.fsti(35,12-35,20)
(Valid 
;; def=FStar.SizeT.fsti(35,12-35,20); use=FStar.SizeT.fsti(35,12-35,20)
(FStar.SizeT.fits @x0)
)

(HasType @x0
Prims.nat))
(HasType (FStar.SizeT.uint_to_t @x0)
(Tm_refine_207024d2522be2ff59992eb07d6dc785 @x0)))
 

:pattern ((FStar.SizeT.uint_to_t @x0))
:qid typing_FStar.SizeT.uint_to_t))

:named typing_FStar.SizeT.uint_to_t))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.SizeT.t; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(10,4-10,5); use=FStar.SizeT.fsti(10,4-10,5)
(forall ((@u0 Dummy_sort))
 (! (HasType (FStar.SizeT.t @u0)
Prims.eqtype)
 

:pattern ((FStar.SizeT.t @u0))
:qid typing_FStar.SizeT.t))

:named typing_FStar.SizeT.t))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.SizeT.sub; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(115,4-115,7); use=FStar.SizeT.fsti(115,4-115,7)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and 
;; def=FStar.SizeT.fsti(116,12-116,24); use=FStar.SizeT.fsti(116,12-116,24)
(>= (BoxInt_proj_0 (FStar.SizeT.v @x0))
(BoxInt_proj_0 (FStar.SizeT.v @x1)))

(HasType @x0
(FStar.SizeT.t Dummy_value))
(HasType @x1
(FStar.SizeT.t Dummy_value)))
(HasType (FStar.SizeT.sub @x0
@x1)
(Tm_refine_d0e26b5396345241439382488d6d50cb @x0
@x1)))
 

:pattern ((FStar.SizeT.sub @x0
@x1))
:qid typing_FStar.SizeT.sub))

:named typing_FStar.SizeT.sub))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.SizeT.rem; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(139,4-139,7); use=FStar.SizeT.fsti(139,4-139,7)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
(FStar.SizeT.t Dummy_value))
(HasType @x1
Tm_refine_839ce6d58012d733d9f3ff233d62acf0))
(HasType (FStar.SizeT.rem @x0
@x1)
(Tm_refine_ce32fa128b1462de9e092637c8c505fc @x0
@x1)))
 

:pattern ((FStar.SizeT.rem @x0
@x1))
:qid typing_FStar.SizeT.rem))

:named typing_FStar.SizeT.rem))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.SizeT.mod_spec; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(130,4-130,12); use=FStar.SizeT.fsti(130,4-130,12)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_refine_7df43cb9feb536df62477b7b30ce1682)
(HasType @x1
Tm_refine_aa6a9e30f1f8ec8644f9ecb60708ad80))
(HasType (FStar.SizeT.mod_spec @x0
@x1)
Tm_refine_7df43cb9feb536df62477b7b30ce1682))
 

:pattern ((FStar.SizeT.mod_spec @x0
@x1))
:qid typing_FStar.SizeT.mod_spec))

:named typing_FStar.SizeT.mod_spec))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.SizeT.lte; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(159,4-159,7); use=FStar.SizeT.fsti(159,4-159,7)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
(FStar.SizeT.t Dummy_value))
(HasType @x1
(FStar.SizeT.t Dummy_value)))
(HasType (FStar.SizeT.lte @x0
@x1)
(Tm_refine_2fa5cf54e8b3b6f52e5eb44bd038d58d @x0
@x1)))
 

:pattern ((FStar.SizeT.lte @x0
@x1))
:qid typing_FStar.SizeT.lte))

:named typing_FStar.SizeT.lte))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.SizeT.lt; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(154,4-154,6); use=FStar.SizeT.fsti(154,4-154,6)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
(FStar.SizeT.t Dummy_value))
(HasType @x1
(FStar.SizeT.t Dummy_value)))
(HasType (FStar.SizeT.lt @x0
@x1)
(Tm_refine_31989e8abdc6ba5299e22d3a8f67c3d3 @x0
@x1)))
 

:pattern ((FStar.SizeT.lt @x0
@x1))
:qid typing_FStar.SizeT.lt))

:named typing_FStar.SizeT.lt))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.SizeT.add; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(111,4-111,7); use=FStar.SizeT.fsti(111,4-111,7)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and 
;; def=FStar.SizeT.fsti(112,12-112,30); use=FStar.SizeT.fsti(112,12-112,30)
(Valid 
;; def=FStar.SizeT.fsti(112,12-112,30); use=FStar.SizeT.fsti(112,12-112,30)
(FStar.SizeT.fits (Prims.op_Addition (FStar.SizeT.v @x0)
(FStar.SizeT.v @x1)))
)

(HasType @x0
(FStar.SizeT.t Dummy_value))
(HasType @x1
(FStar.SizeT.t Dummy_value)))
(HasType (FStar.SizeT.add @x0
@x1)
(Tm_refine_7345e45a081c530b535520410af62181 @x0
@x1)))
 

:pattern ((FStar.SizeT.add @x0
@x1))
:qid typing_FStar.SizeT.add))

:named typing_FStar.SizeT.add))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.SizeT.sub; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(115,24-115,25); use=FStar.SizeT.fsti(115,24-115,25)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_d0e26b5396345241439382488d6d50cb @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_d0e26b5396345241439382488d6d50cb @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_d0e26b5396345241439382488d6d50cb))

:named refinement_kinding_Tm_refine_d0e26b5396345241439382488d6d50cb))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.SizeT.rem; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(139,37-139,38); use=FStar.SizeT.fsti(139,37-139,38)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_ce32fa128b1462de9e092637c8c505fc @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_ce32fa128b1462de9e092637c8c505fc @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_ce32fa128b1462de9e092637c8c505fc))

:named refinement_kinding_Tm_refine_ce32fa128b1462de9e092637c8c505fc))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.SizeT.div; Namespace FStar.SizeT
(assert (! (HasType Tm_refine_839ce6d58012d733d9f3ff233d62acf0
Tm_type)
:named refinement_kinding_Tm_refine_839ce6d58012d733d9f3ff233d62acf0))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.SizeT.add; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(111,24-111,25); use=FStar.SizeT.fsti(111,24-111,25)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_7345e45a081c530b535520410af62181 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_7345e45a081c530b535520410af62181 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_7345e45a081c530b535520410af62181))

:named refinement_kinding_Tm_refine_7345e45a081c530b535520410af62181))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.SizeT.lt; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(154,22-154,26); use=FStar.SizeT.fsti(154,22-154,26)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_31989e8abdc6ba5299e22d3a8f67c3d3 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_31989e8abdc6ba5299e22d3a8f67c3d3 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_31989e8abdc6ba5299e22d3a8f67c3d3))

:named refinement_kinding_Tm_refine_31989e8abdc6ba5299e22d3a8f67c3d3))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.SizeT.lte; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(159,24-159,28); use=FStar.SizeT.fsti(159,24-159,28)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_2fa5cf54e8b3b6f52e5eb44bd038d58d @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_2fa5cf54e8b3b6f52e5eb44bd038d58d @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_2fa5cf54e8b3b6f52e5eb44bd038d58d))

:named refinement_kinding_Tm_refine_2fa5cf54e8b3b6f52e5eb44bd038d58d))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.SizeT.uint_to_t; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(34,30-34,31); use=FStar.SizeT.fsti(34,30-34,31)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_207024d2522be2ff59992eb07d6dc785 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_207024d2522be2ff59992eb07d6dc785 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_207024d2522be2ff59992eb07d6dc785))

:named refinement_kinding_Tm_refine_207024d2522be2ff59992eb07d6dc785))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.SizeT.sub; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(115,24-115,25); use=FStar.SizeT.fsti(115,24-115,25)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_d0e26b5396345241439382488d6d50cb @x2
@x3))
(and (HasTypeFuel @u0
@x1
(FStar.SizeT.t Dummy_value))

;; def=FStar.SizeT.fsti(117,21-117,37); use=FStar.SizeT.fsti(117,21-117,37)
(= (FStar.SizeT.v @x1)
(Prims.op_Subtraction (FStar.SizeT.v @x2)
(FStar.SizeT.v @x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_d0e26b5396345241439382488d6d50cb @x2
@x3)))
:qid refinement_interpretation_Tm_refine_d0e26b5396345241439382488d6d50cb))

:named refinement_interpretation_Tm_refine_d0e26b5396345241439382488d6d50cb))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.SizeT.rem; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(139,37-139,38); use=FStar.SizeT.fsti(139,37-139,38)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_ce32fa128b1462de9e092637c8c505fc @x2
@x3))
(and (HasTypeFuel @u0
@x1
(FStar.SizeT.t Dummy_value))

;; def=FStar.SizeT.fsti(141,21-141,47); use=FStar.SizeT.fsti(141,21-141,47)
(= (FStar.SizeT.mod_spec (FStar.SizeT.v @x2)
(FStar.SizeT.v @x3))
(FStar.SizeT.v @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_ce32fa128b1462de9e092637c8c505fc @x2
@x3)))
:qid refinement_interpretation_Tm_refine_ce32fa128b1462de9e092637c8c505fc))

:named refinement_interpretation_Tm_refine_ce32fa128b1462de9e092637c8c505fc))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.SizeT.div; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(124,14-124,29); use=FStar.SizeT.fsti(124,14-124,29)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_839ce6d58012d733d9f3ff233d62acf0)
(and (HasTypeFuel @u0
@x1
(FStar.SizeT.t Dummy_value))

;; def=FStar.SizeT.fsti(124,19-124,27); use=FStar.SizeT.fsti(124,19-124,27)
(not (= (FStar.SizeT.v @x1)
(BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_839ce6d58012d733d9f3ff233d62acf0))
:qid refinement_interpretation_Tm_refine_839ce6d58012d733d9f3ff233d62acf0))

:named refinement_interpretation_Tm_refine_839ce6d58012d733d9f3ff233d62acf0))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.SizeT.add; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(111,24-111,25); use=FStar.SizeT.fsti(111,24-111,25)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_7345e45a081c530b535520410af62181 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(FStar.SizeT.t Dummy_value))

;; def=FStar.SizeT.fsti(113,21-113,37); use=FStar.SizeT.fsti(113,21-113,37)
(= (FStar.SizeT.v @x1)
(Prims.op_Addition (FStar.SizeT.v @x2)
(FStar.SizeT.v @x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_7345e45a081c530b535520410af62181 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_7345e45a081c530b535520410af62181))

:named refinement_interpretation_Tm_refine_7345e45a081c530b535520410af62181))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.SizeT.lt; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(154,22-154,26); use=FStar.SizeT.fsti(154,22-154,26)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_31989e8abdc6ba5299e22d3a8f67c3d3 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.bool)

;; def=FStar.SizeT.fsti(156,21-156,37); use=FStar.SizeT.fsti(156,21-156,37)
(= @x1
(Prims.op_LessThan (FStar.SizeT.v @x2)
(FStar.SizeT.v @x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_31989e8abdc6ba5299e22d3a8f67c3d3 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_31989e8abdc6ba5299e22d3a8f67c3d3))

:named refinement_interpretation_Tm_refine_31989e8abdc6ba5299e22d3a8f67c3d3))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.SizeT.lte; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(159,24-159,28); use=FStar.SizeT.fsti(159,24-159,28)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_2fa5cf54e8b3b6f52e5eb44bd038d58d @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.bool)

;; def=FStar.SizeT.fsti(161,21-161,38); use=FStar.SizeT.fsti(161,21-161,38)
(= @x1
(Prims.op_LessThanOrEqual (FStar.SizeT.v @x2)
(FStar.SizeT.v @x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_2fa5cf54e8b3b6f52e5eb44bd038d58d @x2
@x3)))
:qid refinement_interpretation_Tm_refine_2fa5cf54e8b3b6f52e5eb44bd038d58d))

:named refinement_interpretation_Tm_refine_2fa5cf54e8b3b6f52e5eb44bd038d58d))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.SizeT.uint_to_t; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(34,30-34,31); use=FStar.SizeT.fsti(34,30-34,31)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_207024d2522be2ff59992eb07d6dc785 @x2))
(and (HasTypeFuel @u0
@x1
(FStar.SizeT.t Dummy_value))

;; def=FStar.SizeT.fsti(36,21-36,29); use=FStar.SizeT.fsti(36,21-36,29)
(= (FStar.SizeT.v @x1)
@x2)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_207024d2522be2ff59992eb07d6dc785 @x2)))
:qid refinement_interpretation_Tm_refine_207024d2522be2ff59992eb07d6dc785))

:named refinement_interpretation_Tm_refine_207024d2522be2ff59992eb07d6dc785))
;;;;;;;;;;;;;;;;Lemma: FStar.SizeT.size_v_inj
;;; Fact-ids: Name FStar.SizeT.size_v_inj; Namespace FStar.SizeT
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
(FStar.SizeT.t Dummy_value))

;; def=FStar.SizeT.fsti(41,13-41,33); use=FStar.SizeT.fsti(41,13-41,33)
(= (FStar.SizeT.uint_to_t (FStar.SizeT.v @x0))
@x0)
)
 

:pattern ((FStar.SizeT.v @x0))
:qid lemma_FStar.SizeT.size_v_inj))
:named lemma_FStar.SizeT.size_v_inj))
;;;;;;;;;;;;;;;;Lemma: FStar.SizeT.size_uint_to_t_inj
;;; Fact-ids: Name FStar.SizeT.size_uint_to_t_inj; Namespace FStar.SizeT
(assert (! (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Prims.nat)

;; def=FStar.SizeT.fsti(46,14-46,20); use=FStar.SizeT.fsti(46,14-46,20)
(Valid 
;; def=FStar.SizeT.fsti(46,14-46,20); use=FStar.SizeT.fsti(46,14-46,20)
(FStar.SizeT.fits @x0)
)
)

;; def=FStar.SizeT.fsti(47,13-47,33); use=FStar.SizeT.fsti(47,13-47,33)
(= (FStar.SizeT.v (FStar.SizeT.uint_to_t @x0))
@x0)
)
 

:pattern ((FStar.SizeT.uint_to_t @x0))
:qid lemma_FStar.SizeT.size_uint_to_t_inj))
:named lemma_FStar.SizeT.size_uint_to_t_inj))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_8afa17d239047ff9e126b23943854cd0
;;; Fact-ids: Name FStar.SizeT.lte; Namespace FStar.SizeT
(assert (! (HasType Tm_arrow_8afa17d239047ff9e126b23943854cd0
Tm_type)
:named kinding_Tm_arrow_8afa17d239047ff9e126b23943854cd0))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_3ba06e4c12d431bb8decb21d117369bf
;;; Fact-ids: Name FStar.SizeT.lt; Namespace FStar.SizeT
(assert (! (HasType Tm_arrow_3ba06e4c12d431bb8decb21d117369bf
Tm_type)
:named kinding_Tm_arrow_3ba06e4c12d431bb8decb21d117369bf))
;;;;;;;;;;;;;;;;haseq for Tm_refine_d0e26b5396345241439382488d6d50cb
;;; Fact-ids: Name FStar.SizeT.sub; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(115,24-115,25); use=FStar.SizeT.fsti(115,24-115,25)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_d0e26b5396345241439382488d6d50cb @x0
@x1)))
(Valid (Prims.hasEq (FStar.SizeT.t Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_d0e26b5396345241439382488d6d50cb @x0
@x1))))
:qid haseqTm_refine_d0e26b5396345241439382488d6d50cb))

:named haseqTm_refine_d0e26b5396345241439382488d6d50cb))
;;;;;;;;;;;;;;;;haseq for Tm_refine_ce32fa128b1462de9e092637c8c505fc
;;; Fact-ids: Name FStar.SizeT.rem; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(139,37-139,38); use=FStar.SizeT.fsti(139,37-139,38)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_ce32fa128b1462de9e092637c8c505fc @x0
@x1)))
(Valid (Prims.hasEq (FStar.SizeT.t Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_ce32fa128b1462de9e092637c8c505fc @x0
@x1))))
:qid haseqTm_refine_ce32fa128b1462de9e092637c8c505fc))

:named haseqTm_refine_ce32fa128b1462de9e092637c8c505fc))
;;;;;;;;;;;;;;;;haseq for Tm_refine_839ce6d58012d733d9f3ff233d62acf0
;;; Fact-ids: Name FStar.SizeT.div; Namespace FStar.SizeT
(assert (! (iff (Valid (Prims.hasEq Tm_refine_839ce6d58012d733d9f3ff233d62acf0))
(Valid (Prims.hasEq (FStar.SizeT.t Dummy_value))))
:named haseqTm_refine_839ce6d58012d733d9f3ff233d62acf0))
;;;;;;;;;;;;;;;;haseq for Tm_refine_7345e45a081c530b535520410af62181
;;; Fact-ids: Name FStar.SizeT.add; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(111,24-111,25); use=FStar.SizeT.fsti(111,24-111,25)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_7345e45a081c530b535520410af62181 @x0
@x1)))
(Valid (Prims.hasEq (FStar.SizeT.t Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_7345e45a081c530b535520410af62181 @x0
@x1))))
:qid haseqTm_refine_7345e45a081c530b535520410af62181))

:named haseqTm_refine_7345e45a081c530b535520410af62181))
;;;;;;;;;;;;;;;;haseq for Tm_refine_31989e8abdc6ba5299e22d3a8f67c3d3
;;; Fact-ids: Name FStar.SizeT.lt; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(154,22-154,26); use=FStar.SizeT.fsti(154,22-154,26)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_31989e8abdc6ba5299e22d3a8f67c3d3 @x0
@x1)))
(Valid (Prims.hasEq Prims.bool)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_31989e8abdc6ba5299e22d3a8f67c3d3 @x0
@x1))))
:qid haseqTm_refine_31989e8abdc6ba5299e22d3a8f67c3d3))

:named haseqTm_refine_31989e8abdc6ba5299e22d3a8f67c3d3))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2fa5cf54e8b3b6f52e5eb44bd038d58d
;;; Fact-ids: Name FStar.SizeT.lte; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(159,24-159,28); use=FStar.SizeT.fsti(159,24-159,28)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_2fa5cf54e8b3b6f52e5eb44bd038d58d @x0
@x1)))
(Valid (Prims.hasEq Prims.bool)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_2fa5cf54e8b3b6f52e5eb44bd038d58d @x0
@x1))))
:qid haseqTm_refine_2fa5cf54e8b3b6f52e5eb44bd038d58d))

:named haseqTm_refine_2fa5cf54e8b3b6f52e5eb44bd038d58d))
;;;;;;;;;;;;;;;;haseq for Tm_refine_207024d2522be2ff59992eb07d6dc785
;;; Fact-ids: Name FStar.SizeT.uint_to_t; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(34,30-34,31); use=FStar.SizeT.fsti(34,30-34,31)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_207024d2522be2ff59992eb07d6dc785 @x0)))
(Valid (Prims.hasEq (FStar.SizeT.t Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_207024d2522be2ff59992eb07d6dc785 @x0))))
:qid haseqTm_refine_207024d2522be2ff59992eb07d6dc785))

:named haseqTm_refine_207024d2522be2ff59992eb07d6dc785))
;;;;;;;;;;;;;;;;Equation for FStar.SizeT.mod_spec
;;; Fact-ids: Name FStar.SizeT.mod_spec; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(130,4-130,12); use=FStar.SizeT.fsti(130,4-130,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.SizeT.mod_spec @x0
@x1)
(Prims.op_Subtraction @x0
(Prims.op_Multiply (Prims.op_Division @x0
@x1)
@x1)))
 

:pattern ((FStar.SizeT.mod_spec @x0
@x1))
:qid equation_FStar.SizeT.mod_spec))

:named equation_FStar.SizeT.mod_spec))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.SizeT.t; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(10,4-10,5); use=FStar.SizeT.fsti(10,4-10,5)
(forall ((@u0 Dummy_sort))
 (! (= 101
(Term_constr_id (FStar.SizeT.t @u0)))
 

:pattern ((FStar.SizeT.t @u0))
:qid constructor_distinct_FStar.SizeT.t))

:named constructor_distinct_FStar.SizeT.t))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.SizeT.t; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(10,4-10,5); use=FStar.SizeT.fsti(10,4-10,5)
(forall ((@x0 Term) (@u1 Fuel) (@u2 Dummy_sort))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.SizeT.t @u2))
(= (FStar.SizeT.t @u2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.SizeT.t @u2)))
:qid FStar.SizeT_pretyping_4a605b34db6539ab166936a7792f508b))

:named FStar.SizeT_pretyping_4a605b34db6539ab166936a7792f508b))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.SizeT.lte; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(159,14-159,28); use=FStar.SizeT.fsti(159,14-159,28)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_8afa17d239047ff9e126b23943854cd0)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_8afa17d239047ff9e126b23943854cd0))
:qid FStar.SizeT_pre_typing_Tm_arrow_8afa17d239047ff9e126b23943854cd0))

:named FStar.SizeT_pre_typing_Tm_arrow_8afa17d239047ff9e126b23943854cd0))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.SizeT.lt; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(154,12-154,26); use=FStar.SizeT.fsti(154,12-154,26)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_3ba06e4c12d431bb8decb21d117369bf)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_3ba06e4c12d431bb8decb21d117369bf))
:qid FStar.SizeT_pre_typing_Tm_arrow_3ba06e4c12d431bb8decb21d117369bf))

:named FStar.SizeT_pre_typing_Tm_arrow_3ba06e4c12d431bb8decb21d117369bf))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_8afa17d239047ff9e126b23943854cd0
;;; Fact-ids: Name FStar.SizeT.lte; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(159,14-159,28); use=FStar.SizeT.fsti(159,14-159,28)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_8afa17d239047ff9e126b23943854cd0)
(and 
;; def=FStar.SizeT.fsti(159,14-159,28); use=FStar.SizeT.fsti(159,14-159,28)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
(FStar.SizeT.t Dummy_value))
(HasType @x2
(FStar.SizeT.t Dummy_value)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Tm_refine_2fa5cf54e8b3b6f52e5eb44bd038d58d @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid FStar.SizeT_interpretation_Tm_arrow_8afa17d239047ff9e126b23943854cd0.1))

(IsTotFun @x0)

;; def=FStar.SizeT.fsti(159,14-159,28); use=FStar.SizeT.fsti(159,14-159,28)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.SizeT.t Dummy_value))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid FStar.SizeT_interpretation_Tm_arrow_8afa17d239047ff9e126b23943854cd0.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_8afa17d239047ff9e126b23943854cd0))
:qid FStar.SizeT_interpretation_Tm_arrow_8afa17d239047ff9e126b23943854cd0))

:named FStar.SizeT_interpretation_Tm_arrow_8afa17d239047ff9e126b23943854cd0))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_3ba06e4c12d431bb8decb21d117369bf
;;; Fact-ids: Name FStar.SizeT.lt; Namespace FStar.SizeT
(assert (! 
;; def=FStar.SizeT.fsti(154,12-154,26); use=FStar.SizeT.fsti(154,12-154,26)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_3ba06e4c12d431bb8decb21d117369bf)
(and 
;; def=FStar.SizeT.fsti(154,12-154,26); use=FStar.SizeT.fsti(154,12-154,26)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
(FStar.SizeT.t Dummy_value))
(HasType @x2
(FStar.SizeT.t Dummy_value)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Tm_refine_31989e8abdc6ba5299e22d3a8f67c3d3 @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid FStar.SizeT_interpretation_Tm_arrow_3ba06e4c12d431bb8decb21d117369bf.1))

(IsTotFun @x0)

;; def=FStar.SizeT.fsti(154,12-154,26); use=FStar.SizeT.fsti(154,12-154,26)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.SizeT.t Dummy_value))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid FStar.SizeT_interpretation_Tm_arrow_3ba06e4c12d431bb8decb21d117369bf.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_3ba06e4c12d431bb8decb21d117369bf))
:qid FStar.SizeT_interpretation_Tm_arrow_3ba06e4c12d431bb8decb21d117369bf))

:named FStar.SizeT_interpretation_Tm_arrow_3ba06e4c12d431bb8decb21d117369bf))
(push) ;; push{2

; Starting query at Pulse.Class.BoundedIntegers.fst(185,0-195,1)

(declare-fun label_15 () Bool)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

(declare-fun Tm_abs_efe372ce3e9de26e7779d8bc6ea105c3 () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_efe372ce3e9de26e7779d8bc6ea105c3
;;; Fact-ids: 
(assert (! (HasType Tm_abs_efe372ce3e9de26e7779d8bc6ea105c3
Tm_arrow_3a9c22ddc54716caa0276c05e792d97e)
:named typing_Tm_abs_efe372ce3e9de26e7779d8bc6ea105c3))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_efe372ce3e9de26e7779d8bc6ea105c3
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(186,21-186,49); use=Pulse.Class.BoundedIntegers.fst(186,21-186,49)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_efe372ce3e9de26e7779d8bc6ea105c3
@x0)
(Prims.l_and (Prims.b2t (Prims.op_GreaterThanOrEqual @x0
(BoxInt 0)))
(FStar.SizeT.fits @x0)))
 

:pattern ((ApplyTT Tm_abs_efe372ce3e9de26e7779d8bc6ea105c3
@x0))
:qid interpretation_Tm_abs_efe372ce3e9de26e7779d8bc6ea105c3))

:named interpretation_Tm_abs_efe372ce3e9de26e7779d8bc6ea105c3))




;;;;;;;;;;;;;;;;_: fits_t (fun x -> x >= 0 /\ FStar.SizeT.fits x) -> Prims.GTot FStar.SizeT.t
(declare-fun Tm_ghost_arrow_e95b9686128de4410167770d4865bf96 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_e95b9686128de4410167770d4865bf96
;;; Fact-ids: 
(assert (! (HasType Tm_ghost_arrow_e95b9686128de4410167770d4865bf96
Tm_type)
:named kinding_Tm_ghost_arrow_e95b9686128de4410167770d4865bf96))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_ghost_arrow_e95b9686128de4410167770d4865bf96)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_ghost_arrow_e95b9686128de4410167770d4865bf96))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_ghost_arrow_e95b9686128de4410167770d4865bf96))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_ghost_arrow_e95b9686128de4410167770d4865bf96))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_e95b9686128de4410167770d4865bf96
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_ghost_arrow_e95b9686128de4410167770d4865bf96)

;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_efe372ce3e9de26e7779d8bc6ea105c3))
(HasType (ApplyTT @x0
@x1)
(FStar.SizeT.t Dummy_value)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_ghost_arrow_e95b9686128de4410167770d4865bf96.1))
)
 

:pattern ((HasTypeZ @x0
Tm_ghost_arrow_e95b9686128de4410167770d4865bf96))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_ghost_arrow_e95b9686128de4410167770d4865bf96))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_ghost_arrow_e95b9686128de4410167770d4865bf96))

;;;;;;;;;;;;;;;;x: FStar.SizeT.t -> y: FStar.SizeT.t -> Prims.Pure FStar.SizeT.t
(declare-fun Tm_arrow_9eb02fbc4b00325e1366cc8f50a8ee04 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_9eb02fbc4b00325e1366cc8f50a8ee04
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_9eb02fbc4b00325e1366cc8f50a8ee04
Tm_type)
:named kinding_Tm_arrow_9eb02fbc4b00325e1366cc8f50a8ee04))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.SizeT.fsti(24,10-24,11); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_9eb02fbc4b00325e1366cc8f50a8ee04)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_9eb02fbc4b00325e1366cc8f50a8ee04))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_9eb02fbc4b00325e1366cc8f50a8ee04))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_9eb02fbc4b00325e1366cc8f50a8ee04))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_9eb02fbc4b00325e1366cc8f50a8ee04
;;; Fact-ids: 
(assert (! 
;; def=FStar.SizeT.fsti(24,10-24,11); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_9eb02fbc4b00325e1366cc8f50a8ee04)
(and 
;; def=FStar.SizeT.fsti(24,10-24,11); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and 
;; def=Pulse.Class.BoundedIntegers.fst(186,21-186,27); use=Prims.fst(454,7-454,10)
(>= (BoxInt_proj_0 (Prims.op_Addition (FStar.SizeT.v @x1)
(FStar.SizeT.v @x2)))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Pulse.Class.BoundedIntegers.fst(186,31-186,49); use=Prims.fst(454,7-454,10)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(186,31-186,49); use=Prims.fst(454,7-454,10)
(FStar.SizeT.fits (Prims.op_Addition (FStar.SizeT.v @x1)
(FStar.SizeT.v @x2)))
)

(HasType @x1
(FStar.SizeT.t Dummy_value))
(HasType @x2
(FStar.SizeT.t Dummy_value)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Tm_refine_7345e45a081c530b535520410af62181 @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_9eb02fbc4b00325e1366cc8f50a8ee04.1))

(IsTotFun @x0)

;; def=FStar.SizeT.fsti(24,10-24,11); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.SizeT.t Dummy_value))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_9eb02fbc4b00325e1366cc8f50a8ee04.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_9eb02fbc4b00325e1366cc8f50a8ee04))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_9eb02fbc4b00325e1366cc8f50a8ee04))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_9eb02fbc4b00325e1366cc8f50a8ee04))

;;;;;;;;;;;;;;;;x: FStar.SizeT.t -> y: FStar.SizeT.t -> Prims.Pure FStar.SizeT.t
(declare-fun Tm_arrow_f6d76ebc20e96ee34a8879000616d8b1 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_f6d76ebc20e96ee34a8879000616d8b1
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_f6d76ebc20e96ee34a8879000616d8b1
Tm_type)
:named kinding_Tm_arrow_f6d76ebc20e96ee34a8879000616d8b1))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.SizeT.fsti(24,10-24,11); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_f6d76ebc20e96ee34a8879000616d8b1)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_f6d76ebc20e96ee34a8879000616d8b1))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_f6d76ebc20e96ee34a8879000616d8b1))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_f6d76ebc20e96ee34a8879000616d8b1))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_f6d76ebc20e96ee34a8879000616d8b1
;;; Fact-ids: 
(assert (! 
;; def=FStar.SizeT.fsti(24,10-24,11); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_f6d76ebc20e96ee34a8879000616d8b1)
(and 
;; def=FStar.SizeT.fsti(24,10-24,11); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and 
;; def=Pulse.Class.BoundedIntegers.fst(186,21-186,27); use=Prims.fst(454,7-454,10)
(>= (BoxInt_proj_0 (Prims.op_Subtraction (FStar.SizeT.v @x1)
(FStar.SizeT.v @x2)))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Pulse.Class.BoundedIntegers.fst(186,31-186,49); use=Prims.fst(454,7-454,10)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(186,31-186,49); use=Prims.fst(454,7-454,10)
(FStar.SizeT.fits (Prims.op_Subtraction (FStar.SizeT.v @x1)
(FStar.SizeT.v @x2)))
)

(HasType @x1
(FStar.SizeT.t Dummy_value))
(HasType @x2
(FStar.SizeT.t Dummy_value)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Tm_refine_d0e26b5396345241439382488d6d50cb @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_f6d76ebc20e96ee34a8879000616d8b1.1))

(IsTotFun @x0)

;; def=FStar.SizeT.fsti(24,10-24,11); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.SizeT.t Dummy_value))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_f6d76ebc20e96ee34a8879000616d8b1.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_f6d76ebc20e96ee34a8879000616d8b1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_f6d76ebc20e96ee34a8879000616d8b1))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_f6d76ebc20e96ee34a8879000616d8b1))




(declare-fun Tm_refine_a871f294f85f704f278fae02656b3614 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.SizeT.fsti(24,10-24,11); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_a871f294f85f704f278fae02656b3614 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_a871f294f85f704f278fae02656b3614 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_a871f294f85f704f278fae02656b3614))

:named refinement_kinding_Tm_refine_a871f294f85f704f278fae02656b3614))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.SizeT.fsti(24,10-24,11); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_a871f294f85f704f278fae02656b3614 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(FStar.SizeT.t Dummy_value))

;; def=Pulse.Class.BoundedIntegers.fst(15,91-15,107); use=Prims.fst(454,7-454,10)
(= (FStar.SizeT.v @x1)
(Prims.op_Modulus (FStar.SizeT.v @x2)
(FStar.SizeT.v @x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_a871f294f85f704f278fae02656b3614 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_a871f294f85f704f278fae02656b3614))

:named refinement_interpretation_Tm_refine_a871f294f85f704f278fae02656b3614))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a871f294f85f704f278fae02656b3614
;;; Fact-ids: 
(assert (! 
;; def=FStar.SizeT.fsti(24,10-24,11); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_a871f294f85f704f278fae02656b3614 @x0
@x1)))
(Valid (Prims.hasEq (FStar.SizeT.t Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_a871f294f85f704f278fae02656b3614 @x0
@x1))))
:qid haseqTm_refine_a871f294f85f704f278fae02656b3614))

:named haseqTm_refine_a871f294f85f704f278fae02656b3614))
;;;;;;;;;;;;;;;;x: FStar.SizeT.t -> y: FStar.SizeT.t -> Prims.Pure FStar.SizeT.t
(declare-fun Tm_arrow_70c4914e13a7f911dcbac39306e96432 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_70c4914e13a7f911dcbac39306e96432
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_70c4914e13a7f911dcbac39306e96432
Tm_type)
:named kinding_Tm_arrow_70c4914e13a7f911dcbac39306e96432))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.SizeT.fsti(24,10-24,11); use=Prims.fst(454,7-454,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_70c4914e13a7f911dcbac39306e96432)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_70c4914e13a7f911dcbac39306e96432))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_70c4914e13a7f911dcbac39306e96432))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_arrow_70c4914e13a7f911dcbac39306e96432))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_70c4914e13a7f911dcbac39306e96432
;;; Fact-ids: 
(assert (! 
;; def=FStar.SizeT.fsti(24,10-24,11); use=Prims.fst(454,7-454,10)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_70c4914e13a7f911dcbac39306e96432)
(and 
;; def=FStar.SizeT.fsti(24,10-24,11); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and 
;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Prims.fst(454,7-454,10)
(> (BoxInt_proj_0 (FStar.SizeT.v @x2))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Pulse.Class.BoundedIntegers.fst(186,21-186,27); use=Prims.fst(454,7-454,10)
(>= (BoxInt_proj_0 (Prims.op_Modulus (FStar.SizeT.v @x1)
(FStar.SizeT.v @x2)))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Pulse.Class.BoundedIntegers.fst(186,31-186,49); use=Prims.fst(454,7-454,10)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(186,31-186,49); use=Prims.fst(454,7-454,10)
(FStar.SizeT.fits (Prims.op_Modulus (FStar.SizeT.v @x1)
(FStar.SizeT.v @x2)))
)

(HasType @x1
(FStar.SizeT.t Dummy_value))
(HasType @x2
(FStar.SizeT.t Dummy_value)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Tm_refine_a871f294f85f704f278fae02656b3614 @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_70c4914e13a7f911dcbac39306e96432.1))

(IsTotFun @x0)

;; def=FStar.SizeT.fsti(24,10-24,11); use=Prims.fst(454,7-454,10)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.SizeT.t Dummy_value))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_70c4914e13a7f911dcbac39306e96432.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_70c4914e13a7f911dcbac39306e96432))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_70c4914e13a7f911dcbac39306e96432))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_70c4914e13a7f911dcbac39306e96432))
(declare-fun Tm_abs_3729d5ec1db42e214d5915398852302c () Term)
;;;;;;;;;;;;;;;;tot_fun_Tm_abs_3729d5ec1db42e214d5915398852302c
;;; Fact-ids: 
(assert (! (and (IsTotFun Tm_abs_3729d5ec1db42e214d5915398852302c)

;; def=Pulse.Class.BoundedIntegers.fst(193,37-193,43); use=Pulse.Class.BoundedIntegers.fst(193,37-193,43)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Tm_abs_3729d5ec1db42e214d5915398852302c
@x0))
 

:pattern ((ApplyTT Tm_abs_3729d5ec1db42e214d5915398852302c
@x0))
:qid tot_fun_Tm_abs_3729d5ec1db42e214d5915398852302c))
)
:named tot_fun_Tm_abs_3729d5ec1db42e214d5915398852302c))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_3729d5ec1db42e214d5915398852302c
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(193,37-193,43); use=Pulse.Class.BoundedIntegers.fst(193,37-193,43)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_3729d5ec1db42e214d5915398852302c
@x0)
@x1)
(FStar.SizeT.rem @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_3729d5ec1db42e214d5915398852302c
@x0)
@x1))
:qid interpretation_Tm_abs_3729d5ec1db42e214d5915398852302c))

:named interpretation_Tm_abs_3729d5ec1db42e214d5915398852302c))


(declare-fun Tm_abs_78a60ebce236d2dda5a04300895055f9 () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_78a60ebce236d2dda5a04300895055f9
;;; Fact-ids: 
(assert (! (HasType Tm_abs_78a60ebce236d2dda5a04300895055f9
Tm_arrow_8afa17d239047ff9e126b23943854cd0)
:named typing_Tm_abs_78a60ebce236d2dda5a04300895055f9))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_78a60ebce236d2dda5a04300895055f9
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(192,38-192,45); use=Pulse.Class.BoundedIntegers.fst(192,38-192,45)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_78a60ebce236d2dda5a04300895055f9
@x0)
@x1)
(FStar.SizeT.lte @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_78a60ebce236d2dda5a04300895055f9
@x0)
@x1))
:qid interpretation_Tm_abs_78a60ebce236d2dda5a04300895055f9))

:named interpretation_Tm_abs_78a60ebce236d2dda5a04300895055f9))


(declare-fun Tm_abs_24a873797f26156ae9d97fe9aa2a95c1 () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_24a873797f26156ae9d97fe9aa2a95c1
;;; Fact-ids: 
(assert (! (HasType Tm_abs_24a873797f26156ae9d97fe9aa2a95c1
Tm_arrow_3ba06e4c12d431bb8decb21d117369bf)
:named typing_Tm_abs_24a873797f26156ae9d97fe9aa2a95c1))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_24a873797f26156ae9d97fe9aa2a95c1
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(191,37-191,43); use=Pulse.Class.BoundedIntegers.fst(191,37-191,43)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_24a873797f26156ae9d97fe9aa2a95c1
@x0)
@x1)
(FStar.SizeT.lt @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_24a873797f26156ae9d97fe9aa2a95c1
@x0)
@x1))
:qid interpretation_Tm_abs_24a873797f26156ae9d97fe9aa2a95c1))

:named interpretation_Tm_abs_24a873797f26156ae9d97fe9aa2a95c1))
(declare-fun Tm_abs_d00c31d72cfac94717a36fe076862bc3 () Term)
;;;;;;;;;;;;;;;;tot_fun_Tm_abs_d00c31d72cfac94717a36fe076862bc3
;;; Fact-ids: 
(assert (! (and (IsTotFun Tm_abs_d00c31d72cfac94717a36fe076862bc3)

;; def=Pulse.Class.BoundedIntegers.fst(190,33-190,52); use=Pulse.Class.BoundedIntegers.fst(190,33-190,52)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Tm_abs_d00c31d72cfac94717a36fe076862bc3
@x0))
 

:pattern ((ApplyTT Tm_abs_d00c31d72cfac94717a36fe076862bc3
@x0))
:qid tot_fun_Tm_abs_d00c31d72cfac94717a36fe076862bc3))
)
:named tot_fun_Tm_abs_d00c31d72cfac94717a36fe076862bc3))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_d00c31d72cfac94717a36fe076862bc3
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(190,33-190,52); use=Pulse.Class.BoundedIntegers.fst(190,33-190,52)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_d00c31d72cfac94717a36fe076862bc3
@x0)
@x1)
(FStar.SizeT.sub @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_d00c31d72cfac94717a36fe076862bc3
@x0)
@x1))
:qid interpretation_Tm_abs_d00c31d72cfac94717a36fe076862bc3))

:named interpretation_Tm_abs_d00c31d72cfac94717a36fe076862bc3))
(declare-fun Tm_abs_85aff10bd53fe71f32acdc9ed77bb693 () Term)
;;;;;;;;;;;;;;;;tot_fun_Tm_abs_85aff10bd53fe71f32acdc9ed77bb693
;;; Fact-ids: 
(assert (! (and (IsTotFun Tm_abs_85aff10bd53fe71f32acdc9ed77bb693)

;; def=Pulse.Class.BoundedIntegers.fst(189,24-189,43); use=Pulse.Class.BoundedIntegers.fst(189,24-189,43)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Tm_abs_85aff10bd53fe71f32acdc9ed77bb693
@x0))
 

:pattern ((ApplyTT Tm_abs_85aff10bd53fe71f32acdc9ed77bb693
@x0))
:qid tot_fun_Tm_abs_85aff10bd53fe71f32acdc9ed77bb693))
)
:named tot_fun_Tm_abs_85aff10bd53fe71f32acdc9ed77bb693))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_85aff10bd53fe71f32acdc9ed77bb693
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(189,24-189,43); use=Pulse.Class.BoundedIntegers.fst(189,24-189,43)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_85aff10bd53fe71f32acdc9ed77bb693
@x0)
@x1)
(FStar.SizeT.add @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_85aff10bd53fe71f32acdc9ed77bb693
@x0)
@x1))
:qid interpretation_Tm_abs_85aff10bd53fe71f32acdc9ed77bb693))

:named interpretation_Tm_abs_85aff10bd53fe71f32acdc9ed77bb693))





(declare-fun Tm_abs_a81415c28fb1ef841eaf612c9f285bb3 () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_a81415c28fb1ef841eaf612c9f285bb3
;;; Fact-ids: 
(assert (! (HasType Tm_abs_a81415c28fb1ef841eaf612c9f285bb3
Tm_ghost_arrow_e95b9686128de4410167770d4865bf96)
:named typing_Tm_abs_a81415c28fb1ef841eaf612c9f285bb3))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_a81415c28fb1ef841eaf612c9f285bb3
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(188,18-188,41); use=Pulse.Class.BoundedIntegers.fst(188,18-188,41)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_a81415c28fb1ef841eaf612c9f285bb3
@x0)
(FStar.SizeT.uint_to_t @x0))
 

:pattern ((ApplyTT Tm_abs_a81415c28fb1ef841eaf612c9f285bb3
@x0))
:qid interpretation_Tm_abs_a81415c28fb1ef841eaf612c9f285bb3))

:named interpretation_Tm_abs_a81415c28fb1ef841eaf612c9f285bb3))

; Encoding query formula : (forall (x: Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0 /\ FStar.SizeT.fits x)).
;     (*  - Could not prove post-condition
; *)
;     (x >= 0 /\ FStar.SizeT.fits x ==> x >= 0) /\
;     (forall (any_result: Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0 /\ FStar.SizeT.fits x))
;       .
;         x == any_result ==> FStar.SizeT.fits x)) /\
; (forall (any_result:
;     (_: Pulse.Class.BoundedIntegers.fits_t (fun x -> x >= 0 /\ FStar.SizeT.fits x)
;         -> Prims.GTot FStar.SizeT.t)).
;     (fun x -> FStar.SizeT.uint_to_t x) == any_result ==>
;     (forall (x: FStar.SizeT.t) (y: FStar.SizeT.t).
;         (*  - Could not prove post-condition
; *)
;         forall (p: Prims.pure_post FStar.SizeT.t).
;           FStar.SizeT.v x + FStar.SizeT.v y >= 0 /\
;           FStar.SizeT.fits (FStar.SizeT.v x + FStar.SizeT.v y) /\
;           (forall (pure_result: FStar.SizeT.t).
;               FStar.SizeT.v pure_result == FStar.SizeT.v x + FStar.SizeT.v y ==> p pure_result) ==>
;           FStar.SizeT.fits (FStar.SizeT.v x + FStar.SizeT.v y) /\
;           (forall (pure_result: FStar.SizeT.t).
;               FStar.SizeT.v pure_result == FStar.SizeT.v x + FStar.SizeT.v y ==>
;               pure_result == FStar.SizeT.add x y ==>
;               (forall (return_val: FStar.SizeT.t). return_val == pure_result ==> p return_val))) /\
;     (forall (any_result: (x: FStar.SizeT.t -> y: FStar.SizeT.t -> Prims.Pure FStar.SizeT.t)).
;         (fun x y -> FStar.SizeT.add x y) == any_result ==>
;         (forall (x: FStar.SizeT.t) (y: FStar.SizeT.t).
;             (*  - Could not prove post-condition
; *)
;             forall (p: Prims.pure_post FStar.SizeT.t).
;               FStar.SizeT.v x - FStar.SizeT.v y >= 0 /\
;               FStar.SizeT.fits (FStar.SizeT.v x - FStar.SizeT.v y) /\
;               (forall (pure_result: FStar.SizeT.t).
;                   FStar.SizeT.v pure_result == FStar.SizeT.v x - FStar.SizeT.v y ==> p pure_result) ==>
;               FStar.SizeT.v x >= FStar.SizeT.v y /\
;               (forall (pure_result: FStar.SizeT.t).
;                   FStar.SizeT.v pure_result == FStar.SizeT.v x - FStar.SizeT.v y ==>
;                   pure_result == FStar.SizeT.sub x y ==>
;                   (forall (return_val: FStar.SizeT.t). return_val == pure_result ==> p return_val))) /\
;         (forall (any_result: (x: FStar.SizeT.t -> y: FStar.SizeT.t -> Prims.Pure FStar.SizeT.t)).
;             (fun x y -> FStar.SizeT.sub x y) == any_result ==>
;             (forall (x: FStar.SizeT.t) (y: FStar.SizeT.t).
;                 (*  - Could not prove post-condition
; *)
;                 forall (pure_result: Prims.bool).
;                   pure_result == (FStar.SizeT.v x < FStar.SizeT.v y) ==>
;                   FStar.SizeT.lt x y == pure_result ==>
;                   FStar.SizeT.lt x y = (FStar.SizeT.v x < FStar.SizeT.v y)) /\
;             (forall (any_result:
;                 (x: FStar.SizeT.t -> y: FStar.SizeT.t
;                     -> b: Prims.bool{b = (FStar.SizeT.v x < FStar.SizeT.v y)})).
;                 (fun x y -> FStar.SizeT.lt x y) == any_result ==>
;                 (forall (x: FStar.SizeT.t) (y: FStar.SizeT.t).
;                     (*  - Could not prove post-condition
; *)
;                     forall (pure_result: Prims.bool).
;                       pure_result == (FStar.SizeT.v x <= FStar.SizeT.v y) ==>
;                       FStar.SizeT.lte x y == pure_result ==>
;                       FStar.SizeT.lte x y = (FStar.SizeT.v x <= FStar.SizeT.v y)) /\
;                 (forall (any_result:
;                     (x: FStar.SizeT.t -> y: FStar.SizeT.t
;                         -> b: Prims.bool{b = (FStar.SizeT.v x <= FStar.SizeT.v y)})).
;                     (fun x y -> FStar.SizeT.lte x y) == any_result ==>
;                     (forall (x: FStar.SizeT.t) (y: FStar.SizeT.t).
;                         (*  - Could not prove post-condition
; *)
;                         forall (p: Prims.pure_post FStar.SizeT.t).
;                           FStar.SizeT.v y > 0 /\
;                           (FStar.SizeT.v x % FStar.SizeT.v y >= 0) /\
;                           FStar.SizeT.fits (FStar.SizeT.v x % FStar.SizeT.v y) /\
;                           (forall (pure_result: FStar.SizeT.t).
;                               FStar.SizeT.v pure_result == FStar.SizeT.v x % FStar.SizeT.v y ==>
;                               p pure_result) ==>
;                           FStar.SizeT.v y <> 0 /\
;                           (forall (any_result: FStar.SizeT.t).
;                               y == any_result ==>
;                               (forall (pure_result: FStar.SizeT.t).
;                                   FStar.SizeT.mod_spec (FStar.SizeT.v x) (FStar.SizeT.v y) =
;                                   FStar.SizeT.v pure_result ==>
;                                   pure_result == FStar.SizeT.rem x y ==>
;                                   (forall (return_val: FStar.SizeT.t).
;                                       return_val == pure_result ==> p return_val)))) /\
;                     (forall (any_result:
;                         (x: FStar.SizeT.t -> y: FStar.SizeT.t -> Prims.Pure FStar.SizeT.t)).
;                         (fun x y -> FStar.SizeT.rem x y) == any_result ==>
;                         (forall (x: FStar.SizeT.t). {:pattern FStar.SizeT.v x}
;                             FStar.SizeT.v x >= 0 /\ FStar.SizeT.fits (FStar.SizeT.v x))))))))


; Context: While encoding a query
; While checking for top-level effects
; While typechecking the top-level declaration `let bounded_int_size_t`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and (forall ((@x0 Term))
 (! (implies (HasType @x0
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_efe372ce3e9de26e7779d8bc6ea105c3))

;; def=Prims.fst(459,77-459,89); use=Pulse.Class.BoundedIntegers.fst(188,18-188,41)
(and (implies 
;; def=Pulse.Class.BoundedIntegers.fst(186,21-186,49); use=Pulse.Class.BoundedIntegers.fst(188,40-188,41)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(186,21-186,27); use=Pulse.Class.BoundedIntegers.fst(188,40-188,41)
(>= (BoxInt_proj_0 @x0)
(BoxInt_proj_0 (BoxInt 0)))


;; def=Pulse.Class.BoundedIntegers.fst(186,31-186,49); use=Pulse.Class.BoundedIntegers.fst(188,40-188,41)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(186,31-186,49); use=Pulse.Class.BoundedIntegers.fst(188,40-188,41)
(FStar.SizeT.fits @x0)
)
)


;; def=Prims.fst(680,18-680,24); use=Pulse.Class.BoundedIntegers.fst(188,40-188,41)
(or label_1

;; def=Prims.fst(680,18-680,24); use=Pulse.Class.BoundedIntegers.fst(188,40-188,41)
(>= (BoxInt_proj_0 @x0)
(BoxInt_proj_0 (BoxInt 0)))
)
)

;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(188,18-188,41)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_efe372ce3e9de26e7779d8bc6ea105c3))

;; def=FStar.SizeT.fsti(34,15-34,16); use=Pulse.Class.BoundedIntegers.fst(188,18-188,41)
(= @x0
@x1)
)

;; def=FStar.SizeT.fsti(35,12-35,20); use=Pulse.Class.BoundedIntegers.fst(188,30-188,39)
(or label_2

;; def=FStar.SizeT.fsti(35,12-35,20); use=Pulse.Class.BoundedIntegers.fst(188,30-188,39)
(Valid 
;; def=FStar.SizeT.fsti(35,12-35,20); use=Pulse.Class.BoundedIntegers.fst(188,30-188,39)
(FStar.SizeT.fits @x0)
)
)
)
 
;;no pats
:qid @query.1))
)
)
 
;;no pats
:qid @query))

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_ghost_arrow_e95b9686128de4410167770d4865bf96)

;; def=Pulse.Class.BoundedIntegers.fst(10,4-188,41); use=Pulse.Class.BoundedIntegers.fst(10,4-188,41)
(= Tm_abs_a81415c28fb1ef841eaf612c9f285bb3
@x0)
)

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and (forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
(FStar.SizeT.t Dummy_value))
(HasType @x2
(FStar.SizeT.t Dummy_value)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post (FStar.SizeT.t Dummy_value)))

;; def=Pulse.Class.BoundedIntegers.fst(186,21-186,27); use=Pulse.Class.BoundedIntegers.fst(189,24-189,43)
(>= (BoxInt_proj_0 (Prims.op_Addition (FStar.SizeT.v @x1)
(FStar.SizeT.v @x2)))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Pulse.Class.BoundedIntegers.fst(186,31-186,49); use=Pulse.Class.BoundedIntegers.fst(189,24-189,43)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(186,31-186,49); use=Pulse.Class.BoundedIntegers.fst(189,24-189,43)
(FStar.SizeT.fits (Prims.op_Addition (FStar.SizeT.v @x1)
(FStar.SizeT.v @x2)))
)


;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(189,24-189,43)
(forall ((@x4 Term))
 (! (implies (and (or label_3
(HasType @x4
(FStar.SizeT.t Dummy_value)))

;; def=Pulse.Class.BoundedIntegers.fst(11,80-11,96); use=Pulse.Class.BoundedIntegers.fst(189,24-189,43)
(or label_4

;; def=Pulse.Class.BoundedIntegers.fst(11,80-11,96); use=Pulse.Class.BoundedIntegers.fst(189,24-189,43)
(= (FStar.SizeT.v @x4)
(Prims.op_Addition (FStar.SizeT.v @x1)
(FStar.SizeT.v @x2)))
)
)

;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(189,24-189,43)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(189,24-189,43)
(ApplyTT @x3
@x4)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(189,24-189,43)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(189,24-189,43)
(ApplyTT @x3
@x4)
)
)
:qid @query.5))
)

;; def=Prims.fst(441,29-441,97); use=Pulse.Class.BoundedIntegers.fst(189,24-189,43)
(and 
;; def=FStar.SizeT.fsti(112,12-112,30); use=Pulse.Class.BoundedIntegers.fst(189,36-189,39)
(or label_5

;; def=FStar.SizeT.fsti(112,12-112,30); use=Pulse.Class.BoundedIntegers.fst(189,36-189,39)
(Valid 
;; def=FStar.SizeT.fsti(112,12-112,30); use=Pulse.Class.BoundedIntegers.fst(189,36-189,39)
(FStar.SizeT.fits (Prims.op_Addition (FStar.SizeT.v @x1)
(FStar.SizeT.v @x2)))
)
)


;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(189,24-189,43)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(FStar.SizeT.t Dummy_value))

;; def=FStar.SizeT.fsti(113,21-113,37); use=Pulse.Class.BoundedIntegers.fst(189,36-189,39)
(= (FStar.SizeT.v @x4)
(Prims.op_Addition (FStar.SizeT.v @x1)
(FStar.SizeT.v @x2)))


;; def=Pulse.Class.BoundedIntegers.fst(189,24-189,43); use=Pulse.Class.BoundedIntegers.fst(189,24-189,43)
(= @x4
(FStar.SizeT.add @x1
@x2))
)

;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(FStar.SizeT.t Dummy_value))

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x5
@x4)
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x3
@x5)
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
Tm_arrow_9eb02fbc4b00325e1366cc8f50a8ee04)

;; def=Pulse.Class.BoundedIntegers.fst(11,6-189,43); use=Pulse.Class.BoundedIntegers.fst(11,6-189,43)
(= Tm_abs_85aff10bd53fe71f32acdc9ed77bb693
@x1)
)

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and (forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
(FStar.SizeT.t Dummy_value))
(HasType @x3
(FStar.SizeT.t Dummy_value)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post (FStar.SizeT.t Dummy_value)))

;; def=Pulse.Class.BoundedIntegers.fst(186,21-186,27); use=Pulse.Class.BoundedIntegers.fst(190,33-190,52)
(>= (BoxInt_proj_0 (Prims.op_Subtraction (FStar.SizeT.v @x2)
(FStar.SizeT.v @x3)))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Pulse.Class.BoundedIntegers.fst(186,31-186,49); use=Pulse.Class.BoundedIntegers.fst(190,33-190,52)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(186,31-186,49); use=Pulse.Class.BoundedIntegers.fst(190,33-190,52)
(FStar.SizeT.fits (Prims.op_Subtraction (FStar.SizeT.v @x2)
(FStar.SizeT.v @x3)))
)


;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(190,33-190,52)
(forall ((@x5 Term))
 (! (implies (and (or label_6
(HasType @x5
(FStar.SizeT.t Dummy_value)))

;; def=Pulse.Class.BoundedIntegers.fst(12,89-12,105); use=Pulse.Class.BoundedIntegers.fst(190,33-190,52)
(or label_7

;; def=Pulse.Class.BoundedIntegers.fst(12,89-12,105); use=Pulse.Class.BoundedIntegers.fst(190,33-190,52)
(= (FStar.SizeT.v @x5)
(Prims.op_Subtraction (FStar.SizeT.v @x2)
(FStar.SizeT.v @x3)))
)
)

;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(190,33-190,52)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(190,33-190,52)
(ApplyTT @x4
@x5)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(190,33-190,52)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(190,33-190,52)
(ApplyTT @x4
@x5)
)
)
:qid @query.11))
)

;; def=Prims.fst(441,29-441,97); use=Pulse.Class.BoundedIntegers.fst(190,33-190,52)
(and 
;; def=FStar.SizeT.fsti(116,12-116,24); use=Pulse.Class.BoundedIntegers.fst(190,45-190,48)
(or label_8

;; def=FStar.SizeT.fsti(116,12-116,24); use=Pulse.Class.BoundedIntegers.fst(190,45-190,48)
(>= (BoxInt_proj_0 (FStar.SizeT.v @x2))
(BoxInt_proj_0 (FStar.SizeT.v @x3)))
)


;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(190,33-190,52)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(FStar.SizeT.t Dummy_value))

;; def=FStar.SizeT.fsti(117,21-117,37); use=Pulse.Class.BoundedIntegers.fst(190,45-190,48)
(= (FStar.SizeT.v @x5)
(Prims.op_Subtraction (FStar.SizeT.v @x2)
(FStar.SizeT.v @x3)))


;; def=Pulse.Class.BoundedIntegers.fst(190,33-190,52); use=Pulse.Class.BoundedIntegers.fst(190,33-190,52)
(= @x5
(FStar.SizeT.sub @x2
@x3))
)

;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(FStar.SizeT.t Dummy_value))

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x6
@x5)
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x4
@x6)
)
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
Tm_arrow_f6d76ebc20e96ee34a8879000616d8b1)

;; def=Pulse.Class.BoundedIntegers.fst(12,4-190,52); use=Pulse.Class.BoundedIntegers.fst(12,4-190,52)
(= Tm_abs_d00c31d72cfac94717a36fe076862bc3
@x2)
)

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and (forall ((@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x3
(FStar.SizeT.t Dummy_value))
(HasType @x4
(FStar.SizeT.t Dummy_value)))

;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(191,39-191,41)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.bool)

;; def=FStar.SizeT.fsti(156,21-156,37); use=Pulse.Class.BoundedIntegers.fst(191,39-191,41)
(= @x5
(Prims.op_LessThan (FStar.SizeT.v @x3)
(FStar.SizeT.v @x4)))


;; def=Pulse.Class.BoundedIntegers.fst(13,27-191,43); use=Pulse.Class.BoundedIntegers.fst(191,37-191,43)
(= (FStar.SizeT.lt @x3
@x4)
@x5)
)

;; def=Pulse.Class.BoundedIntegers.fst(13,36-13,51); use=Pulse.Class.BoundedIntegers.fst(191,37-191,43)
(or label_9

;; def=Pulse.Class.BoundedIntegers.fst(13,36-13,51); use=Pulse.Class.BoundedIntegers.fst(191,37-191,43)
(= (FStar.SizeT.lt @x3
@x4)
(Prims.op_LessThan (FStar.SizeT.v @x3)
(FStar.SizeT.v @x4)))
)
)
 
;;no pats
:qid @query.16))
)
 
;;no pats
:qid @query.15))

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Tm_arrow_3ba06e4c12d431bb8decb21d117369bf)

;; def=Pulse.Class.BoundedIntegers.fst(13,6-191,43); use=Pulse.Class.BoundedIntegers.fst(13,6-191,43)
(= Tm_abs_24a873797f26156ae9d97fe9aa2a95c1
@x3)
)

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and (forall ((@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x4
(FStar.SizeT.t Dummy_value))
(HasType @x5
(FStar.SizeT.t Dummy_value)))

;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(192,40-192,43)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.bool)

;; def=FStar.SizeT.fsti(161,21-161,38); use=Pulse.Class.BoundedIntegers.fst(192,40-192,43)
(= @x6
(Prims.op_LessThanOrEqual (FStar.SizeT.v @x4)
(FStar.SizeT.v @x5)))


;; def=Pulse.Class.BoundedIntegers.fst(14,28-192,45); use=Pulse.Class.BoundedIntegers.fst(192,38-192,45)
(= (FStar.SizeT.lte @x4
@x5)
@x6)
)

;; def=Pulse.Class.BoundedIntegers.fst(14,37-14,53); use=Pulse.Class.BoundedIntegers.fst(192,38-192,45)
(or label_10

;; def=Pulse.Class.BoundedIntegers.fst(14,37-14,53); use=Pulse.Class.BoundedIntegers.fst(192,38-192,45)
(= (FStar.SizeT.lte @x4
@x5)
(Prims.op_LessThanOrEqual (FStar.SizeT.v @x4)
(FStar.SizeT.v @x5)))
)
)
 
;;no pats
:qid @query.19))
)
 
;;no pats
:qid @query.18))

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Tm_arrow_8afa17d239047ff9e126b23943854cd0)

;; def=Pulse.Class.BoundedIntegers.fst(14,6-192,45); use=Pulse.Class.BoundedIntegers.fst(14,6-192,45)
(= Tm_abs_78a60ebce236d2dda5a04300895055f9
@x4)
)

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and (forall ((@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x5
(FStar.SizeT.t Dummy_value))
(HasType @x6
(FStar.SizeT.t Dummy_value)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(Prims.pure_post (FStar.SizeT.t Dummy_value)))

;; def=Pulse.Class.BoundedIntegers.fst(15,44-15,51); use=Pulse.Class.BoundedIntegers.fst(193,37-193,43)
(> (BoxInt_proj_0 (FStar.SizeT.v @x6))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Pulse.Class.BoundedIntegers.fst(186,21-186,27); use=Pulse.Class.BoundedIntegers.fst(193,37-193,43)
(>= (BoxInt_proj_0 (Prims.op_Modulus (FStar.SizeT.v @x5)
(FStar.SizeT.v @x6)))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Pulse.Class.BoundedIntegers.fst(186,31-186,49); use=Pulse.Class.BoundedIntegers.fst(193,37-193,43)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(186,31-186,49); use=Pulse.Class.BoundedIntegers.fst(193,37-193,43)
(FStar.SizeT.fits (Prims.op_Modulus (FStar.SizeT.v @x5)
(FStar.SizeT.v @x6)))
)


;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(193,37-193,43)
(forall ((@x8 Term))
 (! (implies (and (or label_11
(HasType @x8
(FStar.SizeT.t Dummy_value)))

;; def=Pulse.Class.BoundedIntegers.fst(15,91-15,107); use=Pulse.Class.BoundedIntegers.fst(193,37-193,43)
(or label_12

;; def=Pulse.Class.BoundedIntegers.fst(15,91-15,107); use=Pulse.Class.BoundedIntegers.fst(193,37-193,43)
(= (FStar.SizeT.v @x8)
(Prims.op_Modulus (FStar.SizeT.v @x5)
(FStar.SizeT.v @x6)))
)
)

;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(193,37-193,43)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(193,37-193,43)
(ApplyTT @x7
@x8)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(193,37-193,43)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Pulse.Class.BoundedIntegers.fst(193,37-193,43)
(ApplyTT @x7
@x8)
)
)
:qid @query.23))
)

;; def=Prims.fst(459,77-459,89); use=Pulse.Class.BoundedIntegers.fst(193,37-193,43)
(and 
;; def=FStar.SizeT.fsti(139,19-139,27); use=Pulse.Class.BoundedIntegers.fst(193,42-193,43)
(or label_13

;; def=FStar.SizeT.fsti(139,19-139,27); use=Pulse.Class.BoundedIntegers.fst(193,42-193,43)
(not (= (FStar.SizeT.v @x6)
(BoxInt 0)))
)


;; def=Prims.fst(451,66-451,102); use=Pulse.Class.BoundedIntegers.fst(193,37-193,43)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(FStar.SizeT.t Dummy_value))

;; def=FStar.SizeT.fsti(139,15-139,16); use=Pulse.Class.BoundedIntegers.fst(193,37-193,43)
(= @x6
@x8)
)

;; def=Prims.fst(441,36-441,97); use=Pulse.Class.BoundedIntegers.fst(193,39-193,41)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(FStar.SizeT.t Dummy_value))

;; def=FStar.SizeT.fsti(141,21-141,47); use=Pulse.Class.BoundedIntegers.fst(193,39-193,41)
(= (FStar.SizeT.mod_spec (FStar.SizeT.v @x5)
(FStar.SizeT.v @x6))
(FStar.SizeT.v @x9))


;; def=Pulse.Class.BoundedIntegers.fst(193,37-193,43); use=Pulse.Class.BoundedIntegers.fst(193,37-193,43)
(= @x9
(FStar.SizeT.rem @x5
@x6))
)

;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(FStar.SizeT.t Dummy_value))

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x10
@x9)
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x7
@x10)
)
)
 
;;no pats
:qid @query.26))
)
 
;;no pats
:qid @query.25))
)
 
;;no pats
:qid @query.24))
)
)
 
;;no pats
:qid @query.22))
)
 
;;no pats
:qid @query.21))

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Tm_arrow_70c4914e13a7f911dcbac39306e96432)

;; def=Pulse.Class.BoundedIntegers.fst(15,6-193,43); use=Pulse.Class.BoundedIntegers.fst(15,6-193,43)
(= Tm_abs_3729d5ec1db42e214d5915398852302c
@x5)
)

;; def=Pulse.Class.BoundedIntegers.fst(17,23-19,5); use=Pulse.Class.BoundedIntegers.fst(194,17-194,19)
(forall ((@x6 Term))
 (! (implies (HasType @x6
(FStar.SizeT.t Dummy_value))

;; def=Pulse.Class.BoundedIntegers.fst(186,21-186,49); use=Pulse.Class.BoundedIntegers.fst(194,17-194,19)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(186,21-186,27); use=Pulse.Class.BoundedIntegers.fst(194,17-194,19)
(or label_14

;; def=Pulse.Class.BoundedIntegers.fst(186,21-186,27); use=Pulse.Class.BoundedIntegers.fst(194,17-194,19)
(>= (BoxInt_proj_0 (FStar.SizeT.v @x6))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Pulse.Class.BoundedIntegers.fst(186,31-186,49); use=Pulse.Class.BoundedIntegers.fst(194,17-194,19)
(or label_15

;; def=Pulse.Class.BoundedIntegers.fst(186,31-186,49); use=Pulse.Class.BoundedIntegers.fst(194,17-194,19)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(186,31-186,49); use=Pulse.Class.BoundedIntegers.fst(194,17-194,19)
(FStar.SizeT.fits (FStar.SizeT.v @x6))
)
)
)
)
 

:pattern ((FStar.SizeT.v @x6))
:qid @query.28))
)
 
;;no pats
:qid @query.27))
)
)
 
;;no pats
:qid @query.20))
)
)
 
;;no pats
:qid @query.17))
)
)
 
;;no pats
:qid @query.14))
)
)
 
;;no pats
:qid @query.8))
)
)
 
;;no pats
:qid @query.2))
)
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Pulse.Class.BoundedIntegers.bounded_int_size_t, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_FStar.SizeT.mod_spec, equation_Prims.nat, equation_Pulse.Class.BoundedIntegers.fits_t, int_inversion, int_typing, interpretation_Tm_abs_efe372ce3e9de26e7779d8bc6ea105c3, l_and-interp, primitive_Prims.op_Division, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_2c9509c4fdf356ea8b390762a509ebbb, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_7df43cb9feb536df62477b7b30ce1682, typing_FStar.SizeT.v

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let bounded_int_size_t


; <Start encoding let bounded_int_size_t>

(declare-fun Pulse.Class.BoundedIntegers.bounded_int_size_t (Dummy_sort) Term)

(declare-fun Tm_abs_efe372ce3e9de26e7779d8bc6ea105c3 () Term)
;;;;;;;;;;;;;;;;x: FStar.SizeT.t -> Prims.GTot Prims.int
(declare-fun Tm_ghost_arrow_937ffeb4bbc584dd860302869349ffa1 () Term)
(declare-fun Tm_abs_63fb2cefe8a09ad45caa8eb2d2cf7613 () Term)




;;;;;;;;;;;;;;;;x: fits_t (fun x -> x >= 0 /\ FStar.SizeT.fits x) -> Prims.GTot FStar.SizeT.t
(declare-fun Tm_ghost_arrow_e95b9686128de4410167770d4865bf96 () Term)
(declare-fun Tm_abs_a81415c28fb1ef841eaf612c9f285bb3 () Term)
(declare-fun Tm_abs_85aff10bd53fe71f32acdc9ed77bb693 () Term)
(declare-fun Tm_abs_d00c31d72cfac94717a36fe076862bc3 () Term)


(declare-fun Tm_abs_24a873797f26156ae9d97fe9aa2a95c1 () Term)


(declare-fun Tm_abs_78a60ebce236d2dda5a04300895055f9 () Term)
(declare-fun Tm_abs_3729d5ec1db42e214d5915398852302c () Term)

; </end encoding let bounded_int_size_t>

;;;;;;;;;;;;;;;;typing_Tm_abs_efe372ce3e9de26e7779d8bc6ea105c3
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_size_t; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_abs_efe372ce3e9de26e7779d8bc6ea105c3
Tm_arrow_3a9c22ddc54716caa0276c05e792d97e)
:named typing_Tm_abs_efe372ce3e9de26e7779d8bc6ea105c3))
;;;;;;;;;;;;;;;;typing_Tm_abs_a81415c28fb1ef841eaf612c9f285bb3
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_size_t; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_abs_a81415c28fb1ef841eaf612c9f285bb3
Tm_ghost_arrow_e95b9686128de4410167770d4865bf96)
:named typing_Tm_abs_a81415c28fb1ef841eaf612c9f285bb3))
;;;;;;;;;;;;;;;;typing_Tm_abs_78a60ebce236d2dda5a04300895055f9
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_size_t; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_abs_78a60ebce236d2dda5a04300895055f9
Tm_arrow_8afa17d239047ff9e126b23943854cd0)
:named typing_Tm_abs_78a60ebce236d2dda5a04300895055f9))
;;;;;;;;;;;;;;;;typing_Tm_abs_63fb2cefe8a09ad45caa8eb2d2cf7613
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_size_t; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_abs_63fb2cefe8a09ad45caa8eb2d2cf7613
Tm_ghost_arrow_937ffeb4bbc584dd860302869349ffa1)
:named typing_Tm_abs_63fb2cefe8a09ad45caa8eb2d2cf7613))
;;;;;;;;;;;;;;;;typing_Tm_abs_24a873797f26156ae9d97fe9aa2a95c1
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_size_t; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_abs_24a873797f26156ae9d97fe9aa2a95c1
Tm_arrow_3ba06e4c12d431bb8decb21d117369bf)
:named typing_Tm_abs_24a873797f26156ae9d97fe9aa2a95c1))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_size_t; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(185,9-185,27); use=Pulse.Class.BoundedIntegers.fst(185,9-185,27)
(forall ((@u0 Dummy_sort))
 (! (HasType (Pulse.Class.BoundedIntegers.bounded_int_size_t @u0)
(Pulse.Class.BoundedIntegers.bounded_int (FStar.SizeT.t Dummy_value)))
 

:pattern ((Pulse.Class.BoundedIntegers.bounded_int_size_t @u0))
:qid typing_Pulse.Class.BoundedIntegers.bounded_int_size_t))

:named typing_Pulse.Class.BoundedIntegers.bounded_int_size_t))
;;;;;;;;;;;;;;;;tot_fun_Tm_abs_d00c31d72cfac94717a36fe076862bc3
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_size_t; Namespace Pulse.Class.BoundedIntegers
(assert (! (and (IsTotFun Tm_abs_d00c31d72cfac94717a36fe076862bc3)

;; def=Pulse.Class.BoundedIntegers.fst(190,33-190,52); use=Pulse.Class.BoundedIntegers.fst(190,33-190,52)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Tm_abs_d00c31d72cfac94717a36fe076862bc3
@x0))
 

:pattern ((ApplyTT Tm_abs_d00c31d72cfac94717a36fe076862bc3
@x0))
:qid tot_fun_Tm_abs_d00c31d72cfac94717a36fe076862bc3))
)
:named tot_fun_Tm_abs_d00c31d72cfac94717a36fe076862bc3))
;;;;;;;;;;;;;;;;tot_fun_Tm_abs_85aff10bd53fe71f32acdc9ed77bb693
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_size_t; Namespace Pulse.Class.BoundedIntegers
(assert (! (and (IsTotFun Tm_abs_85aff10bd53fe71f32acdc9ed77bb693)

;; def=Pulse.Class.BoundedIntegers.fst(189,24-189,43); use=Pulse.Class.BoundedIntegers.fst(189,24-189,43)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Tm_abs_85aff10bd53fe71f32acdc9ed77bb693
@x0))
 

:pattern ((ApplyTT Tm_abs_85aff10bd53fe71f32acdc9ed77bb693
@x0))
:qid tot_fun_Tm_abs_85aff10bd53fe71f32acdc9ed77bb693))
)
:named tot_fun_Tm_abs_85aff10bd53fe71f32acdc9ed77bb693))
;;;;;;;;;;;;;;;;tot_fun_Tm_abs_3729d5ec1db42e214d5915398852302c
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_size_t; Namespace Pulse.Class.BoundedIntegers
(assert (! (and (IsTotFun Tm_abs_3729d5ec1db42e214d5915398852302c)

;; def=Pulse.Class.BoundedIntegers.fst(193,37-193,43); use=Pulse.Class.BoundedIntegers.fst(193,37-193,43)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Tm_abs_3729d5ec1db42e214d5915398852302c
@x0))
 

:pattern ((ApplyTT Tm_abs_3729d5ec1db42e214d5915398852302c
@x0))
:qid tot_fun_Tm_abs_3729d5ec1db42e214d5915398852302c))
)
:named tot_fun_Tm_abs_3729d5ec1db42e214d5915398852302c))
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_e95b9686128de4410167770d4865bf96
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_size_t; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_ghost_arrow_e95b9686128de4410167770d4865bf96
Tm_type)
:named kinding_Tm_ghost_arrow_e95b9686128de4410167770d4865bf96))
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_937ffeb4bbc584dd860302869349ffa1
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_size_t; Namespace Pulse.Class.BoundedIntegers
(assert (! (HasType Tm_ghost_arrow_937ffeb4bbc584dd860302869349ffa1
Tm_type)
:named kinding_Tm_ghost_arrow_937ffeb4bbc584dd860302869349ffa1))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_efe372ce3e9de26e7779d8bc6ea105c3
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_size_t; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(186,21-186,49); use=Pulse.Class.BoundedIntegers.fst(186,21-186,49)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_efe372ce3e9de26e7779d8bc6ea105c3
@x0)
(Prims.l_and (Prims.b2t (Prims.op_GreaterThanOrEqual @x0
(BoxInt 0)))
(FStar.SizeT.fits @x0)))
 

:pattern ((ApplyTT Tm_abs_efe372ce3e9de26e7779d8bc6ea105c3
@x0))
:qid interpretation_Tm_abs_efe372ce3e9de26e7779d8bc6ea105c3))

:named interpretation_Tm_abs_efe372ce3e9de26e7779d8bc6ea105c3))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_d00c31d72cfac94717a36fe076862bc3
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_size_t; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(190,33-190,52); use=Pulse.Class.BoundedIntegers.fst(190,33-190,52)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_d00c31d72cfac94717a36fe076862bc3
@x0)
@x1)
(FStar.SizeT.sub @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_d00c31d72cfac94717a36fe076862bc3
@x0)
@x1))
:qid interpretation_Tm_abs_d00c31d72cfac94717a36fe076862bc3))

:named interpretation_Tm_abs_d00c31d72cfac94717a36fe076862bc3))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_a81415c28fb1ef841eaf612c9f285bb3
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_size_t; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(188,18-188,41); use=Pulse.Class.BoundedIntegers.fst(188,18-188,41)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_a81415c28fb1ef841eaf612c9f285bb3
@x0)
(FStar.SizeT.uint_to_t @x0))
 

:pattern ((ApplyTT Tm_abs_a81415c28fb1ef841eaf612c9f285bb3
@x0))
:qid interpretation_Tm_abs_a81415c28fb1ef841eaf612c9f285bb3))

:named interpretation_Tm_abs_a81415c28fb1ef841eaf612c9f285bb3))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_85aff10bd53fe71f32acdc9ed77bb693
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_size_t; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(189,24-189,43); use=Pulse.Class.BoundedIntegers.fst(189,24-189,43)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_85aff10bd53fe71f32acdc9ed77bb693
@x0)
@x1)
(FStar.SizeT.add @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_85aff10bd53fe71f32acdc9ed77bb693
@x0)
@x1))
:qid interpretation_Tm_abs_85aff10bd53fe71f32acdc9ed77bb693))

:named interpretation_Tm_abs_85aff10bd53fe71f32acdc9ed77bb693))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_78a60ebce236d2dda5a04300895055f9
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_size_t; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(192,38-192,45); use=Pulse.Class.BoundedIntegers.fst(192,38-192,45)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_78a60ebce236d2dda5a04300895055f9
@x0)
@x1)
(FStar.SizeT.lte @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_78a60ebce236d2dda5a04300895055f9
@x0)
@x1))
:qid interpretation_Tm_abs_78a60ebce236d2dda5a04300895055f9))

:named interpretation_Tm_abs_78a60ebce236d2dda5a04300895055f9))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_63fb2cefe8a09ad45caa8eb2d2cf7613
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_size_t; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(187,18-187,33); use=Pulse.Class.BoundedIntegers.fst(187,18-187,33)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_63fb2cefe8a09ad45caa8eb2d2cf7613
@x0)
(FStar.SizeT.v @x0))
 

:pattern ((ApplyTT Tm_abs_63fb2cefe8a09ad45caa8eb2d2cf7613
@x0))
:qid interpretation_Tm_abs_63fb2cefe8a09ad45caa8eb2d2cf7613))

:named interpretation_Tm_abs_63fb2cefe8a09ad45caa8eb2d2cf7613))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_3729d5ec1db42e214d5915398852302c
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_size_t; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(193,37-193,43); use=Pulse.Class.BoundedIntegers.fst(193,37-193,43)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_3729d5ec1db42e214d5915398852302c
@x0)
@x1)
(FStar.SizeT.rem @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_3729d5ec1db42e214d5915398852302c
@x0)
@x1))
:qid interpretation_Tm_abs_3729d5ec1db42e214d5915398852302c))

:named interpretation_Tm_abs_3729d5ec1db42e214d5915398852302c))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_24a873797f26156ae9d97fe9aa2a95c1
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_size_t; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(191,37-191,43); use=Pulse.Class.BoundedIntegers.fst(191,37-191,43)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_24a873797f26156ae9d97fe9aa2a95c1
@x0)
@x1)
(FStar.SizeT.lt @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_24a873797f26156ae9d97fe9aa2a95c1
@x0)
@x1))
:qid interpretation_Tm_abs_24a873797f26156ae9d97fe9aa2a95c1))

:named interpretation_Tm_abs_24a873797f26156ae9d97fe9aa2a95c1))
;;;;;;;;;;;;;;;;Equation for Pulse.Class.BoundedIntegers.bounded_int_size_t
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_size_t; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(185,9-185,27); use=Pulse.Class.BoundedIntegers.fst(185,9-185,27)
(forall ((@u0 Dummy_sort))
 (! (= 
;; def=Pulse.Class.BoundedIntegers.fst(185,9-185,27); use=Pulse.Class.BoundedIntegers.fst(185,9-185,27)
(Pulse.Class.BoundedIntegers.bounded_int_size_t @u0)

(Pulse.Class.BoundedIntegers.Mkbounded_int (FStar.SizeT.t Dummy_value)
Tm_abs_efe372ce3e9de26e7779d8bc6ea105c3
Tm_abs_63fb2cefe8a09ad45caa8eb2d2cf7613
Tm_abs_a81415c28fb1ef841eaf612c9f285bb3
Tm_abs_85aff10bd53fe71f32acdc9ed77bb693
Tm_abs_d00c31d72cfac94717a36fe076862bc3
Tm_abs_24a873797f26156ae9d97fe9aa2a95c1
Tm_abs_78a60ebce236d2dda5a04300895055f9
Tm_abs_3729d5ec1db42e214d5915398852302c
Tm_unit))
 

:pattern (
;; def=Pulse.Class.BoundedIntegers.fst(185,9-185,27); use=Pulse.Class.BoundedIntegers.fst(185,9-185,27)
(Pulse.Class.BoundedIntegers.bounded_int_size_t @u0)
)
:qid equation_Pulse.Class.BoundedIntegers.bounded_int_size_t))

:named equation_Pulse.Class.BoundedIntegers.bounded_int_size_t))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_size_t; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Pulse.Class.BoundedIntegers.fst(186,4-194,20)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_ghost_arrow_e95b9686128de4410167770d4865bf96)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_ghost_arrow_e95b9686128de4410167770d4865bf96))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_ghost_arrow_e95b9686128de4410167770d4865bf96))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_ghost_arrow_e95b9686128de4410167770d4865bf96))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_size_t; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=FStar.SizeT.fsti(24,10-24,11); use=Pulse.Class.BoundedIntegers.fst(186,4-194,20)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_ghost_arrow_937ffeb4bbc584dd860302869349ffa1)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_ghost_arrow_937ffeb4bbc584dd860302869349ffa1))
:qid Pulse.Class.BoundedIntegers_pre_typing_Tm_ghost_arrow_937ffeb4bbc584dd860302869349ffa1))

:named Pulse.Class.BoundedIntegers_pre_typing_Tm_ghost_arrow_937ffeb4bbc584dd860302869349ffa1))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_e95b9686128de4410167770d4865bf96
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_size_t; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Pulse.Class.BoundedIntegers.fst(186,4-194,20)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_ghost_arrow_e95b9686128de4410167770d4865bf96)

;; def=Pulse.Class.BoundedIntegers.fst(10,8-10,19); use=Pulse.Class.BoundedIntegers.fst(186,4-194,20)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(Pulse.Class.BoundedIntegers.fits_t Tm_abs_efe372ce3e9de26e7779d8bc6ea105c3))
(HasType (ApplyTT @x0
@x1)
(FStar.SizeT.t Dummy_value)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_ghost_arrow_e95b9686128de4410167770d4865bf96.1))
)
 

:pattern ((HasTypeZ @x0
Tm_ghost_arrow_e95b9686128de4410167770d4865bf96))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_ghost_arrow_e95b9686128de4410167770d4865bf96))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_ghost_arrow_e95b9686128de4410167770d4865bf96))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_937ffeb4bbc584dd860302869349ffa1
;;; Fact-ids: Name Pulse.Class.BoundedIntegers.bounded_int_size_t; Namespace Pulse.Class.BoundedIntegers
(assert (! 
;; def=FStar.SizeT.fsti(24,10-24,11); use=Pulse.Class.BoundedIntegers.fst(186,4-194,20)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_ghost_arrow_937ffeb4bbc584dd860302869349ffa1)

;; def=FStar.SizeT.fsti(24,10-24,11); use=Pulse.Class.BoundedIntegers.fst(186,4-194,20)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.SizeT.t Dummy_value))
(HasType (ApplyTT @x0
@x1)
Prims.int))
 

:pattern ((ApplyTT @x0
@x1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_ghost_arrow_937ffeb4bbc584dd860302869349ffa1.1))
)
 

:pattern ((HasTypeZ @x0
Tm_ghost_arrow_937ffeb4bbc584dd860302869349ffa1))
:qid Pulse.Class.BoundedIntegers_interpretation_Tm_ghost_arrow_937ffeb4bbc584dd860302869349ffa1))

:named Pulse.Class.BoundedIntegers_interpretation_Tm_ghost_arrow_937ffeb4bbc584dd860302869349ffa1))
(push) ;; push{2

; Starting query at Pulse.Class.BoundedIntegers.fst(197,0-202,1)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)





; Encoding query formula : (forall (x: FStar.SizeT.t). Pulse.Class.BoundedIntegers.v x >= 0) /\
; (forall (x: Prims.nat).
;     x <= Pulse.Class.BoundedIntegers.v (FStar.SizeT.uint_to_t 0xffff <: FStar.SizeT.t) ==>
;     Pulse.Class.BoundedIntegers.fits x)


; Context: While encoding a query
; While checking for top-level effects
; While typechecking the top-level declaration `let bounded_unsigned_size_t`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=Pulse.Class.BoundedIntegers.fst(45,21-48,3); use=Pulse.Class.BoundedIntegers.fst(201,15-201,17)
(and 
;; def=Pulse.Class.BoundedIntegers.fst(46,4-46,73); use=Pulse.Class.BoundedIntegers.fst(201,15-201,17)
(forall ((@x0 Term))
 (! (implies (HasType @x0
(FStar.SizeT.t Dummy_value))

;; def=Pulse.Class.BoundedIntegers.fst(46,19-46,27); use=Pulse.Class.BoundedIntegers.fst(201,15-201,17)
(or label_1

;; def=Pulse.Class.BoundedIntegers.fst(46,19-46,27); use=Pulse.Class.BoundedIntegers.fst(201,15-201,17)
(>= (BoxInt_proj_0 (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
(FStar.SizeT.t Dummy_value))
(Pulse.Class.BoundedIntegers.bounded_int_size_t Dummy_value))
@x0))
(BoxInt_proj_0 (BoxInt 0)))
)
)
 
;;no pats
:qid @query))


;; def=Pulse.Class.BoundedIntegers.fst(47,4-47,52); use=Pulse.Class.BoundedIntegers.fst(201,15-201,17)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
Prims.nat)

;; def=Pulse.Class.BoundedIntegers.fst(47,21-47,37); use=Pulse.Class.BoundedIntegers.fst(201,15-201,17)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less_Equals@tok
Prims.int)
(Pulse.Class.BoundedIntegers.bounded_int_int Dummy_value))
@x0)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.v@tok
(FStar.SizeT.t Dummy_value))
(Pulse.Class.BoundedIntegers.bounded_int_size_t Dummy_value))
(FStar.SizeT.uint_to_t (BoxInt 65535)))))
)

;; def=Pulse.Class.BoundedIntegers.fst(47,42-47,51); use=Pulse.Class.BoundedIntegers.fst(201,15-201,17)
(or label_2

;; def=Pulse.Class.BoundedIntegers.fst(47,42-47,51); use=Pulse.Class.BoundedIntegers.fst(201,15-201,17)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(47,42-47,51); use=Pulse.Class.BoundedIntegers.fst(201,15-201,17)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.fits@tok
(FStar.SizeT.t Dummy_value))
(Pulse.Class.BoundedIntegers.bounded_int_size_t Dummy_value))
@x0)
)
)
)
 
;;no pats
:qid @query.1))
)
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Pulse.Class.BoundedIntegers.bounded_unsigned_size_t, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, Prims_pretyping_ae567c2fb75be05905677af440075565, b2t_def, data_elim_Pulse.Class.BoundedIntegers.Mkbounded_int, equation_Prims.nat, equation_Pulse.Class.BoundedIntegers.bounded_int_int, equation_Pulse.Class.BoundedIntegers.bounded_int_size_t, equation_Pulse.Class.BoundedIntegers.fits, equation_Pulse.Class.BoundedIntegers.op_Less_Equals, equation_Pulse.Class.BoundedIntegers.v, function_token_typing_Prims.__cache_version_number__, int_inversion, int_typing, interpretation_Tm_abs_63fb2cefe8a09ad45caa8eb2d2cf7613, interpretation_Tm_abs_9526f9b86538a09423bf79a8b2d28a7b, interpretation_Tm_abs_d2b36eee66dd8372042cd1c49358f9dc, interpretation_Tm_abs_efe372ce3e9de26e7779d8bc6ea105c3, interpretation_Tm_abs_f4d32f3d705308e5f1a270cda9a29727, interpretation_Tm_abs_faa1351076bca4f1d410c09beaffa289, l_and-interp, lemma_FStar.SizeT.fits_at_least_16, lemma_FStar.SizeT.fits_lte, lemma_FStar.UInt.pow2_values, primitive_Prims.op_GreaterThanOrEqual, primitive_Prims.op_LessThanOrEqual, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_fits, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_op_Less_Equals, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_v, refinement_interpretation_Tm_refine_207024d2522be2ff59992eb07d6dc785, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_7df43cb9feb536df62477b7b30ce1682, refinement_interpretation_Tm_refine_9b6814fd42e45bedf339f7a6d66952ad, token_correspondence_Pulse.Class.BoundedIntegers.fits, token_correspondence_Pulse.Class.BoundedIntegers.op_Less_Equals, token_correspondence_Pulse.Class.BoundedIntegers.v, typing_FStar.SizeT.uint_to_t, typing_FStar.SizeT.v, typing_Pulse.Class.BoundedIntegers.bounded_int_size_t

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let bounded_unsigned_size_t


; <Start encoding let bounded_unsigned_size_t>

(declare-fun Pulse.Class.BoundedIntegers.bounded_unsigned_size_t (Dummy_sort) Term)

; </end encoding let bounded_unsigned_size_t>

(push) ;; push{2

; Starting query at Pulse.Class.BoundedIntegers.fst(205,55-205,62)

(declare-fun label_1 () Bool)

(declare-fun Tm_refine_4bfb8911fbd05ad55cdf0a80ba01bd05 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_4bfb8911fbd05ad55cdf0a80ba01bd05
Tm_type)
:named refinement_kinding_Tm_refine_4bfb8911fbd05ad55cdf0a80ba01bd05))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Pulse.Class.BoundedIntegers.fst(205,20-205,52); use=Pulse.Class.BoundedIntegers.fst(205,20-205,52)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4bfb8911fbd05ad55cdf0a80ba01bd05)
(and (HasTypeFuel @u0
@x1
(FStar.SizeT.t Dummy_value))

;; def=Pulse.Class.BoundedIntegers.fst(205,39-205,49); use=Pulse.Class.BoundedIntegers.fst(205,39-205,49)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.op_Less@tok
(FStar.SizeT.t Dummy_value))
(Pulse.Class.BoundedIntegers.bounded_int_size_t Dummy_value))
@x1)
(FStar.SizeT.uint_to_t (BoxInt 1024))))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4bfb8911fbd05ad55cdf0a80ba01bd05))
:qid refinement_interpretation_Tm_refine_4bfb8911fbd05ad55cdf0a80ba01bd05))

:named refinement_interpretation_Tm_refine_4bfb8911fbd05ad55cdf0a80ba01bd05))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4bfb8911fbd05ad55cdf0a80ba01bd05
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4bfb8911fbd05ad55cdf0a80ba01bd05))
(Valid (Prims.hasEq (FStar.SizeT.t Dummy_value))))
:named haseqTm_refine_4bfb8911fbd05ad55cdf0a80ba01bd05))




; Encoding query formula : forall (x: FStar.SizeT.t{x < (FStar.SizeT.uint_to_t 1024 <: FStar.SizeT.t)}).
;   (*  - Could not prove post-condition
; *)
;   Prims.auto_squash (Pulse.Class.BoundedIntegers.bounded_int_size_t.fits (Pulse.Class.BoundedIntegers.bounded_int_size_t
;             .v x +
;           Pulse.Class.BoundedIntegers.bounded_int_size_t.v (FStar.SizeT.uint_to_t 1 <: FStar.SizeT.t
;             )))


; Context: While encoding a query
; While typechecking the top-level declaration `let size_t_plus_one`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_4bfb8911fbd05ad55cdf0a80ba01bd05)

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(205,57-205,58)
(or label_1

;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(205,57-205,58)
(Valid 
;; def=Pulse.Class.BoundedIntegers.fst(11,44-11,60); use=Pulse.Class.BoundedIntegers.fst(205,57-205,58)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits@tok
(FStar.SizeT.t Dummy_value))
(Pulse.Class.BoundedIntegers.bounded_int_size_t Dummy_value))
(Prims.op_Addition (ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
(FStar.SizeT.t Dummy_value))
(Pulse.Class.BoundedIntegers.bounded_int_size_t Dummy_value))
@x0)
(ApplyTT (ApplyTT (ApplyTT Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v@tok
(FStar.SizeT.t Dummy_value))
(Pulse.Class.BoundedIntegers.bounded_int_size_t Dummy_value))
(FStar.SizeT.uint_to_t (BoxInt 1)))))
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Pulse.Class.BoundedIntegers.size_t_plus_one, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, Pulse.Class.BoundedIntegers_interpretation_Tm_arrow_4e9e5a602a12a0a4955a27552da74126, b2t_def, data_elim_Pulse.Class.BoundedIntegers.Mkbounded_int, equation_Prims.nat, equation_Pulse.Class.BoundedIntegers.bounded_int_size_t, equation_Pulse.Class.BoundedIntegers.op_Less, int_typing, interpretation_Tm_abs_24a873797f26156ae9d97fe9aa2a95c1, interpretation_Tm_abs_63fb2cefe8a09ad45caa8eb2d2cf7613, interpretation_Tm_abs_e6649eba6390f90be22ea1a9dce6d496, interpretation_Tm_abs_efe372ce3e9de26e7779d8bc6ea105c3, l_and-interp, lemma_FStar.SizeT.fits_at_least_16, lemma_FStar.SizeT.size_uint_to_t_inj, lemma_FStar.UInt.pow2_values, primitive_Prims.op_Addition, primitive_Prims.op_GreaterThanOrEqual, primitive_Prims.op_LessThan, proj_equation_Pulse.Class.BoundedIntegers.Mkbounded_int_fits, proj_equation_Pulse.Class.BoundedIntegers.Mkbounded_int_v, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_fits, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_op_Less, projection_inverse_Pulse.Class.BoundedIntegers.Mkbounded_int_v, refinement_interpretation_Tm_refine_207024d2522be2ff59992eb07d6dc785, refinement_interpretation_Tm_refine_2cdd0b779b7e65376ec1ec73cce4cdb4, refinement_interpretation_Tm_refine_4bfb8911fbd05ad55cdf0a80ba01bd05, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_7df43cb9feb536df62477b7b30ce1682, token_correspondence_Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__fits, token_correspondence_Pulse.Class.BoundedIntegers.__proj__Mkbounded_int__item__v, token_correspondence_Pulse.Class.BoundedIntegers.op_Less, typing_FStar.SizeT.uint_to_t, typing_FStar.SizeT.v, typing_Pulse.Class.BoundedIntegers.bounded_int_size_t
