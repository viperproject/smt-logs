
; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(set-option :global-decls false)
(set-option :smt.mbqi false)
(set-option :auto_config false)
(set-option :produce-unsat-cores true)
(set-option :model true)
(set-option :smt.case_split 3)
(set-option :smt.relevancy 2)
(set-option :smt.arith.solver 2)


(declare-sort FString)
(declare-fun FString_constr_id (FString) Int)

(declare-sort Term)
(declare-fun Term_constr_id (Term) Int)
(declare-sort Dummy_sort)
(declare-fun Dummy_value () Dummy_sort)
(declare-datatypes () ((Fuel 
(ZFuel) 
(SFuel (prec Fuel)))))
(declare-fun MaxIFuel () Fuel)
(declare-fun MaxFuel () Fuel)
(declare-fun PreType (Term) Term)
(declare-fun Valid (Term) Bool)
(declare-fun HasTypeFuel (Fuel Term Term) Bool)
(define-fun HasTypeZ ((x Term) (t Term)) Bool
(HasTypeFuel ZFuel x t))
(define-fun HasType ((x Term) (t Term)) Bool
(HasTypeFuel MaxIFuel x t))
(declare-fun IsTotFun (Term) Bool)

                ;;fuel irrelevance
(assert (forall ((f Fuel) (x Term) (t Term))
(! (= (HasTypeFuel (SFuel f) x t)
(HasTypeZ x t))
:pattern ((HasTypeFuel (SFuel f) x t)))))
(declare-fun NoHoist (Term Bool) Bool)
;;no-hoist
(assert (forall ((dummy Term) (b Bool))
(! (= (NoHoist dummy b)
b)
:pattern ((NoHoist dummy b)))))
(define-fun  IsTyped ((x Term)) Bool
(exists ((t Term)) (HasTypeZ x t)))
(declare-fun ApplyTF (Term Fuel) Term)
(declare-fun ApplyTT (Term Term) Term)
(declare-fun Prec (Term Term) Bool)
(assert (forall ((x Term) (y Term) (z Term))
(! (implies (and (Prec x y) (Prec y z))
(Prec x z))
                                   :pattern ((Prec x z) (Prec x y)))))
(assert (forall ((x Term) (y Term))
(implies (Prec x y)
(not (Prec y x)))))
(declare-fun Closure (Term) Term)
(declare-fun ConsTerm (Term Term) Term)
(declare-fun ConsFuel (Fuel Term) Term)
(declare-fun Tm_uvar (Int) Term)
(define-fun Reify ((x Term)) Term x)
(declare-fun Prims.precedes (Term Term Term Term) Term)
(declare-fun Range_const (Int) Term)
(declare-fun _mul (Int Int) Int)
(declare-fun _div (Int Int) Int)
(declare-fun _mod (Int Int) Int)
(declare-fun __uu__PartialApp () Term)
(assert (forall ((x Int) (y Int)) (! (= (_mul x y) (* x y)) :pattern ((_mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (_div x y) (div x y)) :pattern ((_div x y)))))
(assert (forall ((x Int) (y Int)) (! (= (_mod x y) (mod x y)) :pattern ((_mod x y)))))
(declare-fun _rmul (Real Real) Real)
(declare-fun _rdiv (Real Real) Real)
(assert (forall ((x Real) (y Real)) (! (= (_rmul x y) (* x y)) :pattern ((_rmul x y)))))
(assert (forall ((x Real) (y Real)) (! (= (_rdiv x y) (/ x y)) :pattern ((_rdiv x y)))))
(define-fun Unreachable () Bool false)
; <start constructor FString_const>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FString_const (Int) FString)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 0
(FString_constr_id (FString_const @u0)))
 

:pattern ((FString_const @u0))
:qid constructor_distinct_FString_const))
:named constructor_distinct_FString_const))
;;;;;;;;;;;;;;;;Projector
(declare-fun FString_const_proj_0 (FString) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (FString_const_proj_0 (FString_const @u0))
@u0)
 

:pattern ((FString_const @u0))
:qid projection_inverse_FString_const_proj_0))
:named projection_inverse_FString_const_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FString_const ((__@u0 FString)) Bool
 (and (= (FString_constr_id __@u0)
0)
(= __@u0
(FString_const (FString_const_proj_0 __@u0)))))

; </end constructor FString_const>


; <start constructor Tm_type>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_type () Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (= 2
(Term_constr_id Tm_type))
:named constructor_distinct_Tm_type))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_type ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
2)
(= __@x0
Tm_type)))

; </end constructor Tm_type>


; <start constructor Tm_arrow>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_arrow (Int) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 3
(Term_constr_id (Tm_arrow @u0)))
 

:pattern ((Tm_arrow @u0))
:qid constructor_distinct_Tm_arrow))
:named constructor_distinct_Tm_arrow))
;;;;;;;;;;;;;;;;Projector
(declare-fun Tm_arrow_id (Term) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (Tm_arrow_id (Tm_arrow @u0))
@u0)
 

:pattern ((Tm_arrow @u0))
:qid projection_inverse_Tm_arrow_id))
:named projection_inverse_Tm_arrow_id))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_arrow ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
3)
(= __@x0
(Tm_arrow (Tm_arrow_id __@x0)))))

; </end constructor Tm_arrow>


; <start constructor Tm_unit>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_unit () Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (= 6
(Term_constr_id Tm_unit))
:named constructor_distinct_Tm_unit))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_unit ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
6)
(= __@x0
Tm_unit)))

; </end constructor Tm_unit>


; <start constructor BoxInt>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxInt (Int) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 7
(Term_constr_id (BoxInt @u0)))
 

:pattern ((BoxInt @u0))
:qid constructor_distinct_BoxInt))
:named constructor_distinct_BoxInt))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxInt_proj_0 (Term) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (BoxInt_proj_0 (BoxInt @u0))
@u0)
 

:pattern ((BoxInt @u0))
:qid projection_inverse_BoxInt_proj_0))
:named projection_inverse_BoxInt_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxInt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
7)
(= __@x0
(BoxInt (BoxInt_proj_0 __@x0)))))

; </end constructor BoxInt>


; <start constructor BoxBool>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxBool (Bool) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Bool))
 (! (= 8
(Term_constr_id (BoxBool @u0)))
 

:pattern ((BoxBool @u0))
:qid constructor_distinct_BoxBool))
:named constructor_distinct_BoxBool))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxBool_proj_0 (Term) Bool)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Bool))
 (! (= (BoxBool_proj_0 (BoxBool @u0))
@u0)
 

:pattern ((BoxBool @u0))
:qid projection_inverse_BoxBool_proj_0))
:named projection_inverse_BoxBool_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxBool ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
8)
(= __@x0
(BoxBool (BoxBool_proj_0 __@x0)))))

; </end constructor BoxBool>


; <start constructor BoxString>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxString (FString) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 FString))
 (! (= 9
(Term_constr_id (BoxString @u0)))
 

:pattern ((BoxString @u0))
:qid constructor_distinct_BoxString))
:named constructor_distinct_BoxString))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxString_proj_0 (Term) FString)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 FString))
 (! (= (BoxString_proj_0 (BoxString @u0))
@u0)
 

:pattern ((BoxString @u0))
:qid projection_inverse_BoxString_proj_0))
:named projection_inverse_BoxString_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxString ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
9)
(= __@x0
(BoxString (BoxString_proj_0 __@x0)))))

; </end constructor BoxString>


; <start constructor BoxReal>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxReal (Real) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Real))
 (! (= 10
(Term_constr_id (BoxReal @u0)))
 

:pattern ((BoxReal @u0))
:qid constructor_distinct_BoxReal))
:named constructor_distinct_BoxReal))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxReal_proj_0 (Term) Real)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Real))
 (! (= (BoxReal_proj_0 (BoxReal @u0))
@u0)
 

:pattern ((BoxReal @u0))
:qid projection_inverse_BoxReal_proj_0))
:named projection_inverse_BoxReal_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxReal ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
10)
(= __@x0
(BoxReal (BoxReal_proj_0 __@x0)))))

; </end constructor BoxReal>

(declare-fun Prims.precedes@tok () Term)
(assert
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
(! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.precedes@tok
@x0)
@x1)
@x2)
@x3)
(Prims.precedes @x0 @x1 @x2 @x3))

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.precedes@tok
@x0)
@x1)
@x2)
@x3)))))

(declare-fun Prims.lex_t () Term)
(assert (forall ((t1 Term) (t2 Term) (e1 Term) (e2 Term))
(! (iff (Valid (Prims.precedes t1 t2 e1 e2))
(Valid (Prims.precedes Prims.lex_t Prims.lex_t e1 e2)))
:pattern (Prims.precedes t1 t2 e1 e2))))
(assert (forall ((t1 Term) (t2 Term))
(! (iff (Valid (Prims.precedes Prims.lex_t Prims.lex_t t1 t2)) 
(Prec t1 t2))
:pattern ((Prims.precedes Prims.lex_t Prims.lex_t t1 t2)))))
(assert (forall ((e Term) (t Term))
(! (implies (HasType e t)
(Valid t))
:pattern ((HasType e t)
(Valid t))
:qid __prelude_valid_intro)))


; Externals for module Prims


; <Start encoding val Prims.attribute>

(declare-fun Prims.attribute () Term)

; </end encoding val Prims.attribute>


; <Start encoding val Prims.cps>

(declare-fun Prims.cps () Term)

; </end encoding val Prims.cps>


; <Start encoding val Prims.tac_opaque>

(declare-fun Prims.tac_opaque () Term)

; </end encoding val Prims.tac_opaque>


; <Start encoding val Prims.unrefine>

(declare-fun Prims.unrefine () Term)

; </end encoding val Prims.unrefine>


; <Start encoding val Prims.do_not_unrefine>

(declare-fun Prims.do_not_unrefine () Term)

; </end encoding val Prims.do_not_unrefine>


; <Start encoding val Prims.hasEq>

(declare-fun Prims.hasEq (Term) Term)
(declare-fun Tm_arrow_ef9cb512a25ee351fa5536d617490497 () Term)
(declare-fun Prims.hasEq@tok () Term)

; </end encoding val Prims.hasEq>


; <Start encoding let eqtype>

(declare-fun Prims.eqtype () Term)
(declare-fun Tm_refine_414d0a9f578ab0048252f8c8f552b99f () Term)

; </end encoding let eqtype>


; <Start encoding val Prims.bool>

(declare-fun Prims.bool () Term)

; </end encoding val Prims.bool>


; <Start encoding type Prims.empty>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.empty () Term)

; <start constructor Prims.empty>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.empty ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
111)
(= __@x0
Prims.empty)))

; </end constructor Prims.empty>


; </end encoding type Prims.empty>


; <Start encoding type Prims.trivial>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.trivial () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.T () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.T
(declare-fun Prims.T@tok () Term)

; <start constructor Prims.trivial>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.trivial ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
116)
(= __@x0
Prims.trivial)))

; </end constructor Prims.trivial>


; <start constructor Prims.T>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.T ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
122)
(= __@x0
Prims.T)))

; </end constructor Prims.T>


; </end encoding type Prims.trivial>


; <Start encoding val Prims.uu___is_T>

(declare-fun Prims.uu___is_T (Term) Term)
(declare-fun Tm_arrow_053f01f066524059a49c5dc621e6494a () Term)
(declare-fun Prims.uu___is_T@tok () Term)

; </end encoding val Prims.uu___is_T>


; <Start encoding val Prims.unit>

(declare-fun Prims.unit () Term)

; </end encoding val Prims.unit>


; <Start encoding let squash>

(declare-fun Prims.squash (Term) Term)

(declare-fun Prims.squash@tok () Term)
(declare-fun Tm_refine_2de20c066034c13bf76e9c0b94f4806c (Term) Term)

; </end encoding let squash>


; <Start encoding let auto_squash>

(declare-fun Prims.auto_squash (Term) Term)

(declare-fun Prims.auto_squash@tok () Term)

; </end encoding let auto_squash>


; <Start encoding let logical>

(declare-fun Prims.logical () Term)

; </end encoding let logical>


; <Start encoding val Prims.smt_theory_symbol>

(declare-fun Prims.smt_theory_symbol () Term)

; </end encoding val Prims.smt_theory_symbol>


; <Start encoding let l_True>

(declare-fun Prims.l_True () Term)

; </end encoding let l_True>


; <Start encoding let l_False>

(declare-fun Prims.l_False () Term)

; </end encoding let l_False>


; <Start encoding type Prims.equals>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.equals (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.equals@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Refl (Term Term) Term)
;;;;;;;;;;;;;;;;Constructor base
(declare-fun Prims.Refl@base () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Refl
(declare-fun Prims.Refl@tok () Term)
(declare-fun Tm_arrow_8e00c6263684633abbc1d1a87608e391 () Term)

; <start constructor Prims.equals>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.equals ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
134)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(Prims.equals @x0
@x1
@x2))
 
;;no pats
:qid is-Prims.equals))))

; </end constructor Prims.equals>


; <start constructor Prims.Refl>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Refl ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
141)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.Refl @x0
@x1))
 
;;no pats
:qid is-Prims.Refl))))

; </end constructor Prims.Refl>


; </end encoding type Prims.equals>


; <Start encoding val Prims.uu___is_Refl>

(declare-fun Prims.uu___is_Refl (Term Term Term Term) Term)
(declare-fun Tm_arrow_2a4540f76c8969717ea911077d7b4d15 () Term)
(declare-fun Prims.uu___is_Refl@tok () Term)

; </end encoding val Prims.uu___is_Refl>


; <Start encoding let eq2>

(declare-fun Prims.eq2 (Term Term Term) Term)
(declare-fun Tm_arrow_1ec40cec1da281b45a559c74dd57f3b7 () Term)
(declare-fun Prims.eq2@tok () Term)

; </end encoding let eq2>


; <Start encoding let b2t>

(declare-fun Prims.b2t (Term) Term)

; </end encoding let b2t>


; <Start encoding type Prims.pair>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.pair (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.pair@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Pair (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Pair
(declare-fun Prims.Pair@tok () Term)
(declare-fun Tm_arrow_e2b0096073073582c70f249d40f91c5d () Term)

; <start constructor Prims.pair>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.pair ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
150)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.pair @x0
@x1))
 
;;no pats
:qid is-Prims.pair))))

; </end constructor Prims.pair>


; <start constructor Prims.Pair>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Pair ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
157)
(= __@x0
(Prims.Pair (Prims.Pair_p __@x0)
(Prims.Pair_q __@x0)
(Prims.Pair__1 __@x0)
(Prims.Pair__2 __@x0)))))

; </end constructor Prims.Pair>


; </end encoding type Prims.pair>


; <Start encoding val Prims.uu___is_Pair>

(declare-fun Prims.uu___is_Pair (Term Term Term) Term)
(declare-fun Tm_arrow_0a519c999e1325381ee4c9b1d93a06b2 () Term)
(declare-fun Prims.uu___is_Pair@tok () Term)

; </end encoding val Prims.uu___is_Pair>


; <Start encoding val Prims.__proj__Pair__item___1>

(declare-fun Prims.__proj__Pair__item___1 (Term Term Term) Term)
(declare-fun Tm_arrow_214b45775d1504fb2699ff0d156b6857 () Term)
(declare-fun Prims.__proj__Pair__item___1@tok () Term)

; </end encoding val Prims.__proj__Pair__item___1>


; <Start encoding val Prims.__proj__Pair__item___2>

(declare-fun Prims.__proj__Pair__item___2 (Term Term Term) Term)
(declare-fun Tm_arrow_1b97dbe8f5eb289f51cc2556690371e3 () Term)
(declare-fun Prims.__proj__Pair__item___2@tok () Term)

; </end encoding val Prims.__proj__Pair__item___2>


; <Start encoding let l_and>

(declare-fun Prims.l_and (Term Term) Term)
(declare-fun Tm_arrow_289ee2cc5874944bf725b9e3db8c0fd6 () Term)
(declare-fun Prims.l_and@tok () Term)

; </end encoding let l_and>


; <Start encoding type Prims.sum>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.sum (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.sum@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Left
(declare-fun Prims.Left@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Right
(declare-fun Prims.Right@tok () Term)
(declare-fun Tm_arrow_4ef073c03ed003774fe6ccb4064aeebd () Term)
(declare-fun Tm_arrow_c537ccd7fef2183d55f1a6960ee793b0 () Term)

; <start constructor Prims.sum>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.sum ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
169)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.sum @x0
@x1))
 
;;no pats
:qid is-Prims.sum))))

; </end constructor Prims.sum>


; <start constructor Prims.Left>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Left ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
176)
(= __@x0
(Prims.Left (Prims.Left_p __@x0)
(Prims.Left_q __@x0)
(Prims.Left_v __@x0)))))

; </end constructor Prims.Left>


; <start constructor Prims.Right>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Right ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
181)
(= __@x0
(Prims.Right (Prims.Right_p __@x0)
(Prims.Right_q __@x0)
(Prims.Right_v __@x0)))))

; </end constructor Prims.Right>


; </end encoding type Prims.sum>


; <Start encoding val Prims.uu___is_Left>

(declare-fun Prims.uu___is_Left (Term Term Term) Term)
(declare-fun Tm_arrow_3c254c463840bdea2ca63f23cf7c2f0c () Term)
(declare-fun Prims.uu___is_Left@tok () Term)

; </end encoding val Prims.uu___is_Left>


; <Start encoding val Prims.__proj__Left__item__v>

(declare-fun Tm_refine_6140be01a70b18051829f178aaf0270b (Term Term) Term)
(declare-fun Prims.__proj__Left__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_aaf070885513892396497eef726adce1 () Term)
(declare-fun Prims.__proj__Left__item__v@tok () Term)

; </end encoding val Prims.__proj__Left__item__v>


; <Start encoding val Prims.uu___is_Right>

(declare-fun Prims.uu___is_Right (Term Term Term) Term)

(declare-fun Prims.uu___is_Right@tok () Term)

; </end encoding val Prims.uu___is_Right>


; <Start encoding val Prims.__proj__Right__item__v>

(declare-fun Tm_refine_43ea5cf89e866ce271f97bd6ce102588 (Term Term) Term)
(declare-fun Prims.__proj__Right__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_4ae0e7dd85e55aec7e8190dea6e3997f () Term)
(declare-fun Prims.__proj__Right__item__v@tok () Term)

; </end encoding val Prims.__proj__Right__item__v>


; <Start encoding let l_or>

(declare-fun Prims.l_or (Term Term) Term)

(declare-fun Prims.l_or@tok () Term)

; </end encoding let l_or>


; <Start encoding let l_imp>

(declare-fun Prims.l_imp (Term Term) Term)

(declare-fun Prims.l_imp@tok () Term)
(declare-fun Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a (Term Term) Term)

; </end encoding let l_imp>


; <Start encoding let l_iff>

(declare-fun Prims.l_iff (Term Term) Term)

(declare-fun Prims.l_iff@tok () Term)

; </end encoding let l_iff>


; <Start encoding let l_not>

(declare-fun Prims.l_not (Term) Term)
(declare-fun Tm_arrow_8178e3b6934aa50ea45bb0ccea2d9711 () Term)
(declare-fun Prims.l_not@tok () Term)

; </end encoding let l_not>


; <Skipped let l_ITE/>


; <Skipped val Prims.precedes/>


; <Start encoding val Prims.string>

(declare-fun Prims.string () Term)

; </end encoding val Prims.string>


; <Start encoding val Prims.warn_on_use>

(declare-fun Prims.warn_on_use (Term) Term)
(declare-fun Tm_arrow_2863eb88d7490a9c3cf347c16ca04740 () Term)
(declare-fun Prims.warn_on_use@tok () Term)

; </end encoding val Prims.warn_on_use>


; <Start encoding val Prims.deprecated>

(declare-fun Prims.deprecated (Term) Term)

(declare-fun Prims.deprecated@tok () Term)

; </end encoding val Prims.deprecated>


; <Start encoding val Prims.has_type>

(declare-fun Prims.has_type (Term Term Term) Term)
(declare-fun Tm_arrow_b5d8ed0243b8c7c893f2b329de57c62b () Term)
(declare-fun Prims.has_type@tok () Term)

; </end encoding val Prims.has_type>


; <Start encoding let l_Forall>

(declare-fun Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da (Term) Term)
(declare-fun Prims.l_Forall (Term Term) Term)

(declare-fun Tm_arrow_977ec6901669a051ac66211b8e72666a () Term)
(declare-fun Prims.l_Forall@tok () Term)

(declare-fun Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f (Term Term) Term)

; </end encoding let l_Forall>


; <Skipped #push-options "--warn_error -288"/>


; <Start encoding let subtype_of>

(declare-fun Prims.subtype_of (Term Term) Term)
(declare-fun Tm_arrow_28becc0427b69ebf63ea956148504d97 () Term)
(declare-fun Prims.subtype_of@tok () Term)

; </end encoding let subtype_of>


; <Skipped #pop-options/>


; <Start encoding let prop>

(declare-fun Prims.prop () Term)
(declare-fun Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf () Term)

; </end encoding let prop>


; <Start encoding let pure_pre>

(declare-fun Prims.pure_pre () Term)

; </end encoding let pure_pre>


; <Start encoding let pure_post'>

(declare-fun Prims.pure_post_ (Term Term) Term)
(declare-fun Tm_arrow_e4cf09589736facd1137944a1f5a00a6 () Term)
(declare-fun Prims.pure_post_@tok () Term)
(declare-fun Tm_refine_8d65e998a07dd53ec478e27017d9dba5 (Term Term) Term)
(declare-fun Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 (Term Term) Term)

; </end encoding let pure_post'>


; <Start encoding let pure_post>

(declare-fun Prims.pure_post (Term) Term)

(declare-fun Prims.pure_post@tok () Term)

; </end encoding let pure_post>


; <Start encoding let pure_wp'>

(declare-fun Prims.pure_wp_ (Term) Term)

(declare-fun Prims.pure_wp_@tok () Term)
(declare-fun Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4 (Term) Term)

; </end encoding let pure_wp'>


; <Start encoding let pure_wp_monotonic0>

(declare-fun Prims.pure_wp_monotonic0 (Term Term) Term)
(declare-fun Tm_arrow_85436e2c1c64a4dd0159a737ef5b212e () Term)
(declare-fun Prims.pure_wp_monotonic0@tok () Term)

; </end encoding let pure_wp_monotonic0>


; <Start encoding let pure_wp_monotonic>

(declare-fun Prims.pure_wp_monotonic (Term Term) Term)

(declare-fun Prims.pure_wp_monotonic@tok () Term)

; </end encoding let pure_wp_monotonic>


; <Start encoding let pure_wp>

(declare-fun Prims.pure_wp (Term) Term)

(declare-fun Prims.pure_wp@tok () Term)
(declare-fun Tm_refine_15e0beb75f7033bad5fae236999feebe (Term) Term)

; </end encoding let pure_wp>


; <Start encoding val Prims.guard_free>

(declare-fun Prims.guard_free (Term) Term)

(declare-fun Prims.guard_free@tok () Term)

; </end encoding val Prims.guard_free>


; <Skipped let pure_return0/>


; <Skipped let pure_bind_wp0/>


; <Skipped let pure_if_then_else0/>


; <Skipped let pure_ite_wp0/>


; <Skipped let pure_stronger/>


; <Skipped let pure_close_wp0/>


; <Skipped let pure_trivial/>


; <Skipped new_effect { PURE ... }/>


; <Skipped effect Pure a pre post = Prims.PURE a/>


; <Skipped effect Admit a = Prims.PURE a/>


; <Skipped let pure_null_wp0/>


; <Skipped effect Tot a = Prims.PURE a/>


; <Start encoding let pure_assert_wp0>

(declare-fun Prims.pure_assert_wp0 (Term) Term)
(declare-fun Tm_arrow_14bcf5e7fc38d91827ecd9d25d3b3a67 () Term)
(declare-fun Prims.pure_assert_wp0@tok () Term)

; </end encoding let pure_assert_wp0>


; <Start encoding let pure_assume_wp0>

(declare-fun Prims.pure_assume_wp0 (Term) Term)

(declare-fun Prims.pure_assume_wp0@tok () Term)

; </end encoding let pure_assume_wp0>


; <Skipped new_effect { GHOST ... }/>


; <Skipped let purewp_id/>


; <Skipped sub_effect PURE ~> GHOST/>


; <Skipped effect Ghost a pre post = Prims.GHOST a/>


; <Skipped effect GTot a = Prims.GHOST a/>


; <Start encoding let op_Equals_Equals_Equals>

(declare-fun Prims.op_Equals_Equals_Equals (Term Term Term Term) Term)
(declare-fun Tm_arrow_7fcb145b23c2ac843afd9b126c4f71a9 () Term)
(declare-fun Prims.op_Equals_Equals_Equals@tok () Term)

; </end encoding let op_Equals_Equals_Equals>


; <Start encoding type Prims.dtuple2>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.dtuple2 (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.dtuple2@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Mkdtuple2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Mkdtuple2
(declare-fun Prims.Mkdtuple2@tok () Term)



(declare-fun Tm_arrow_22a50f5c5c9bb74bac4384fb8999be8b () Term)

; <start constructor Prims.dtuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.dtuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
258)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.dtuple2 @x0
@x1))
 
;;no pats
:qid is-Prims.dtuple2))))

; </end constructor Prims.dtuple2>


; <start constructor Prims.Mkdtuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Mkdtuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
267)
(= __@x0
(Prims.Mkdtuple2 (Prims.Mkdtuple2_a __@x0)
(Prims.Mkdtuple2_b __@x0)
(Prims.Mkdtuple2__1 __@x0)
(Prims.Mkdtuple2__2 __@x0)))))

; </end constructor Prims.Mkdtuple2>


; </end encoding type Prims.dtuple2>


; <Start encoding assume Prims.dtuple2__uu___haseq>



; </end encoding assume Prims.dtuple2__uu___haseq>


; <Start encoding val Prims.uu___is_Mkdtuple2>


(declare-fun Prims.uu___is_Mkdtuple2 (Term Term Term) Term)

(declare-fun Tm_arrow_e6f9f7cb1936ec43b52469e706dcadcc () Term)
(declare-fun Prims.uu___is_Mkdtuple2@tok () Term)

; </end encoding val Prims.uu___is_Mkdtuple2>


; <Skipped let uu___is_Mkdtuple2/>


; <Start encoding val Prims.__proj__Mkdtuple2__item___1>


(declare-fun Prims.__proj__Mkdtuple2__item___1 (Term Term Term) Term)

(declare-fun Tm_arrow_26c013ffba39d4f7eeb4bcc80d2d4e22 () Term)
(declare-fun Prims.__proj__Mkdtuple2__item___1@tok () Term)

; </end encoding val Prims.__proj__Mkdtuple2__item___1>


; <Skipped let __proj__Mkdtuple2__item___1/>


; <Start encoding val Prims.__proj__Mkdtuple2__item___2>


(declare-fun Prims.__proj__Mkdtuple2__item___2 (Term Term Term) Term)

(declare-fun Tm_arrow_870cc7701a0d9a8a2d6fb92427a97d66 () Term)
(declare-fun Prims.__proj__Mkdtuple2__item___2@tok () Term)

; </end encoding val Prims.__proj__Mkdtuple2__item___2>


; <Skipped let __proj__Mkdtuple2__item___2/>


; <Start encoding let l_Exists>


(declare-fun Prims.l_Exists (Term Term) Term)


(declare-fun Prims.l_Exists@tok () Term)


(declare-fun Tm_abs_6ba36691ee58dee85cd144324b083848 (Term Term) Term)

; </end encoding let l_Exists>


; <Start encoding val Prims.int>

(declare-fun Prims.int () Term)

; </end encoding val Prims.int>


; <Start encoding val Prims.op_AmpAmp>

(declare-fun Prims.op_AmpAmp (Term Term) Term)
(declare-fun Prims.op_AmpAmp@tok () Term)

; </end encoding val Prims.op_AmpAmp>


; <Start encoding val Prims.op_BarBar>

(declare-fun Prims.op_BarBar (Term Term) Term)
(declare-fun Prims.op_BarBar@tok () Term)

; </end encoding val Prims.op_BarBar>


; <Start encoding val Prims.op_Negation>

(declare-fun Prims.op_Negation (Term) Term)
(declare-fun Prims.op_Negation@tok () Term)

; </end encoding val Prims.op_Negation>


; <Start encoding val Prims.op_Multiply>

(declare-fun Prims.op_Multiply (Term Term) Term)
(declare-fun Prims.op_Multiply@tok () Term)

; </end encoding val Prims.op_Multiply>


; <Start encoding val Prims.op_Subtraction>

(declare-fun Prims.op_Subtraction (Term Term) Term)
(declare-fun Prims.op_Subtraction@tok () Term)

; </end encoding val Prims.op_Subtraction>


; <Start encoding val Prims.op_Addition>

(declare-fun Prims.op_Addition (Term Term) Term)
(declare-fun Prims.op_Addition@tok () Term)

; </end encoding val Prims.op_Addition>


; <Start encoding val Prims.op_Minus>

(declare-fun Prims.op_Minus (Term) Term)
(declare-fun Prims.op_Minus@tok () Term)

; </end encoding val Prims.op_Minus>


; <Start encoding val Prims.op_LessThanOrEqual>

(declare-fun Prims.op_LessThanOrEqual (Term Term) Term)
(declare-fun Prims.op_LessThanOrEqual@tok () Term)

; </end encoding val Prims.op_LessThanOrEqual>


; <Start encoding val Prims.op_GreaterThan>

(declare-fun Prims.op_GreaterThan (Term Term) Term)
(declare-fun Prims.op_GreaterThan@tok () Term)

; </end encoding val Prims.op_GreaterThan>


; <Start encoding val Prims.op_GreaterThanOrEqual>

(declare-fun Prims.op_GreaterThanOrEqual (Term Term) Term)
(declare-fun Prims.op_GreaterThanOrEqual@tok () Term)

; </end encoding val Prims.op_GreaterThanOrEqual>


; <Start encoding val Prims.op_LessThan>

(declare-fun Prims.op_LessThan (Term Term) Term)
(declare-fun Prims.op_LessThan@tok () Term)

; </end encoding val Prims.op_LessThan>


; <Start encoding val Prims.op_Equality>

(declare-fun Prims.op_Equality (Term Term Term) Term)
(declare-fun Prims.op_Equality@tok () Term)

; </end encoding val Prims.op_Equality>


; <Start encoding val Prims.op_disEquality>

(declare-fun Prims.op_disEquality (Term Term Term) Term)
(declare-fun Prims.op_disEquality@tok () Term)

; </end encoding val Prims.op_disEquality>


; <Start encoding val Prims.exn>

(declare-fun Prims.exn () Term)

; </end encoding val Prims.exn>


; <Start encoding val Prims.array>

(declare-fun Prims.array (Term) Term)

(declare-fun Prims.array@tok () Term)

; </end encoding val Prims.array>


; <Start encoding val Prims.strcat>

(declare-fun Prims.strcat (Term Term) Term)
(declare-fun Tm_arrow_b66cecec1d56111347abe61e89557dd1 () Term)
(declare-fun Prims.strcat@tok () Term)

; </end encoding val Prims.strcat>


; <Skipped let op_Hat/>


; <Start encoding type Prims.list>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.list (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.list@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Nil (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Nil_a (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Nil
(declare-fun Prims.Nil@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_hd (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_tl (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Cons
(declare-fun Prims.Cons@tok () Term)
(declare-fun Tm_arrow_3864bd5fbb999b4fe4487408df9b3401 () Term)
(declare-fun Tm_arrow_02c072760cbad0f5a4706f6cffab6c94 () Term)

; <start constructor Prims.list>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.list ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
318)
(exists ((@x0 Term))
 (! (= __@x0
(Prims.list @x0))
 
;;no pats
:qid is-Prims.list))))

; </end constructor Prims.list>


; <start constructor Prims.Nil>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Nil ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
325)
(= __@x0
(Prims.Nil (Prims.Nil_a __@x0)))))

; </end constructor Prims.Nil>


; <start constructor Prims.Cons>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Cons ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
330)
(= __@x0
(Prims.Cons (Prims.Cons_a __@x0)
(Prims.Cons_hd __@x0)
(Prims.Cons_tl __@x0)))))

; </end constructor Prims.Cons>


; </end encoding type Prims.list>


; <Start encoding assume Prims.list__uu___haseq>


; </end encoding assume Prims.list__uu___haseq>


; <Start encoding val Prims.uu___is_Nil>

(declare-fun Prims.uu___is_Nil (Term Term) Term)
(declare-fun Tm_arrow_606904b0fa72729a20285beb231f9f2e () Term)
(declare-fun Prims.uu___is_Nil@tok () Term)

; </end encoding val Prims.uu___is_Nil>


; <Skipped let uu___is_Nil/>


; <Start encoding val Prims.uu___is_Cons>

(declare-fun Prims.uu___is_Cons (Term Term) Term)

(declare-fun Prims.uu___is_Cons@tok () Term)

; </end encoding val Prims.uu___is_Cons>


; <Skipped let uu___is_Cons/>


; <Start encoding val Prims.__proj__Cons__item__hd>

(declare-fun Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 (Term) Term)
(declare-fun Prims.__proj__Cons__item__hd (Term Term) Term)

(declare-fun Tm_arrow_27c3547831737e5a63950f3d18bf3d22 () Term)
(declare-fun Prims.__proj__Cons__item__hd@tok () Term)

; </end encoding val Prims.__proj__Cons__item__hd>


; <Skipped let __proj__Cons__item__hd/>


; <Start encoding val Prims.__proj__Cons__item__tl>


(declare-fun Prims.__proj__Cons__item__tl (Term Term) Term)

(declare-fun Tm_arrow_4e740085106d54d8b48ffe3c6c20ef21 () Term)
(declare-fun Prims.__proj__Cons__item__tl@tok () Term)

; </end encoding val Prims.__proj__Cons__item__tl>


; <Skipped let __proj__Cons__item__tl/>


; <Skipped effect M a = a/>


; <Start encoding let returnM>

(declare-fun Prims.returnM (Term Term) Term)
(declare-fun Tm_arrow_99724436653747ac6f5a6a00c64ff8bc () Term)
(declare-fun Prims.returnM@tok () Term)

; </end encoding let returnM>


; <Skipped let as_requires/>


; <Skipped let as_ensures/>


; <Start encoding val Prims._assume>

(declare-fun Prims._assume (Term) Term)
(declare-fun Non_total_Tm_arrow_724d0dab46b8b51a1bb19d329f7fc4b2 () Term)
(declare-fun Prims._assume@tok () Term)

; </end encoding val Prims._assume>


; <Start encoding val Prims.admit>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Prims.admit (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Prims.admit@tok () Term)

; </end encoding val Prims.admit>


; <Start encoding val Prims.magic>

(declare-fun Prims.magic (Term Term) Term)
(declare-fun Tm_arrow_f5df98ce82fbcebbbdb844c958bee4fb () Term)
(declare-fun Prims.magic@tok () Term)

; </end encoding val Prims.magic>


; <Start encoding let unsafe_coerce>

(declare-fun Prims.unsafe_coerce (Term Term Term) Term)
(declare-fun Tm_arrow_443ab41008720460b7a09e280558a60f () Term)
(declare-fun Prims.unsafe_coerce@tok () Term)

; </end encoding let unsafe_coerce>


; <Start encoding val Prims.admitP>

(declare-fun Prims.admitP (Term) Term)

(declare-fun Prims.admitP@tok () Term)

; </end encoding val Prims.admitP>


; <Skipped val Prims._assert/>


; <Start encoding let _assert>

(declare-fun Prims._assert (Term) Term)
(declare-fun Non_total_Tm_arrow_bb2d1b4bdb07c87bf5990ad3e5fd8642 () Term)
(declare-fun Prims._assert@tok () Term)

; </end encoding let _assert>


; <Skipped val Prims.cut/>


; <Start encoding let cut>

(declare-fun Prims.cut (Term) Term)

(declare-fun Prims.cut@tok () Term)

; </end encoding let cut>


; <Start encoding let nat>

(declare-fun Prims.nat () Term)
(declare-fun Tm_refine_542f9d4f129664613f2483a6c88bc7c2 () Term)

; </end encoding let nat>


; <Start encoding let pos>

(declare-fun Prims.pos () Term)
(declare-fun Tm_refine_774ba3f728d91ead8ef40be66c9802e5 () Term)

; </end encoding let pos>


; <Start encoding let nonzero>

(declare-fun Prims.nonzero () Term)
(declare-fun Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f () Term)

; </end encoding let nonzero>


; <Start encoding val Prims.op_Modulus>

(declare-fun Prims.op_Modulus (Term Term) Term)
(declare-fun Prims.op_Modulus@tok () Term)

; </end encoding val Prims.op_Modulus>


; <Start encoding val Prims.op_Division>

(declare-fun Prims.op_Division (Term Term) Term)
(declare-fun Prims.op_Division@tok () Term)

; </end encoding val Prims.op_Division>


; <Start encoding let rec pow2>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Prims.pow2.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Prims.pow2.fuel_instrumented_token () Term)
(declare-fun Prims.pow2 (Term) Term)
(declare-fun Prims.pow2@tok () Term)
(declare-fun Tm_arrow_c331a0e032e021e1eaa359b3983de4f2 () Term)

; </end encoding let rec pow2>


; <Start encoding let min>

(declare-fun Prims.min (Term Term) Term)
(declare-fun Tm_arrow_47fc285d7b44e13bcb7e420cbfc55623 () Term)
(declare-fun Prims.min@tok () Term)

; </end encoding let min>


; <Start encoding let abs>

(declare-fun Prims.abs (Term) Term)
(declare-fun Tm_arrow_35447810753695c4fe25c93af1251992 () Term)
(declare-fun Prims.abs@tok () Term)

; </end encoding let abs>


; <Start encoding val Prims.string_of_bool>

(declare-fun Prims.string_of_bool (Term) Term)
(declare-fun Tm_arrow_e86b54405c2a58719f5e8112efd48c09 () Term)
(declare-fun Prims.string_of_bool@tok () Term)

; </end encoding val Prims.string_of_bool>


; <Start encoding val Prims.string_of_int>

(declare-fun Prims.string_of_int (Term) Term)
(declare-fun Tm_arrow_2bc066ec63734c94a3c008e1e72cae2b () Term)
(declare-fun Prims.string_of_int@tok () Term)

; </end encoding val Prims.string_of_int>


; <Start encoding let __cache_version_number__>

(declare-fun Prims.__cache_version_number__ () Term)

; </end encoding let __cache_version_number__>


; End Externals for module Prims


; Externals for module FStar.Pervasives.Native


; <Start encoding type FStar.Pervasives.Native.option>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.option (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.option@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.None (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.None_a (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.None
(declare-fun FStar.Pervasives.Native.None@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Some (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Some_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Some_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Some
(declare-fun FStar.Pervasives.Native.Some@tok () Term)
(declare-fun Tm_arrow_48b914114ec9f2f1caadf0f6848a9741 () Term)
(declare-fun Tm_arrow_b93a364b5144c2a5f3e9d1ea7b881752 () Term)

; <start constructor FStar.Pervasives.Native.option>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.option ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Pervasives.Native.option @x0))
 
;;no pats
:qid is-FStar.Pervasives.Native.option))))

; </end constructor FStar.Pervasives.Native.option>


; <start constructor FStar.Pervasives.Native.None>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.None ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
108)
(= __@x0
(FStar.Pervasives.Native.None (FStar.Pervasives.Native.None_a __@x0)))))

; </end constructor FStar.Pervasives.Native.None>


; <start constructor FStar.Pervasives.Native.Some>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Some ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
113)
(= __@x0
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.Some_a __@x0)
(FStar.Pervasives.Native.Some_v __@x0)))))

; </end constructor FStar.Pervasives.Native.Some>


; </end encoding type FStar.Pervasives.Native.option>


; <Start encoding assume FStar.Pervasives.Native.option__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.option__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_None>

(declare-fun FStar.Pervasives.Native.uu___is_None (Term Term) Term)
(declare-fun Tm_arrow_f1a97bcd6ba9b40d22609b756f183afa () Term)
(declare-fun FStar.Pervasives.Native.uu___is_None@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_None>


; <Skipped let uu___is_None/>


; <Start encoding val FStar.Pervasives.Native.uu___is_Some>

(declare-fun FStar.Pervasives.Native.uu___is_Some (Term Term) Term)

(declare-fun FStar.Pervasives.Native.uu___is_Some@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Some>


; <Skipped let uu___is_Some/>


; <Start encoding val FStar.Pervasives.Native.__proj__Some__item__v>

(declare-fun Tm_refine_4d5241eb6fe198666a8101195bbd4a2a (Term) Term)
(declare-fun FStar.Pervasives.Native.__proj__Some__item__v (Term Term) Term)

(declare-fun Tm_arrow_1b1398c011ff53e4194fc2ec00c7b411 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Some__item__v@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Some__item__v>


; <Skipped let __proj__Some__item__v/>


; <Start encoding type FStar.Pervasives.Native.tuple2>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple2 (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple2@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple2
(declare-fun FStar.Pervasives.Native.Mktuple2@tok () Term)
(declare-fun Tm_arrow_4054cc0a51327db54c2ed9ba3376a093 () Term)

; <start constructor FStar.Pervasives.Native.tuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
125)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple2 @x0
@x1))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple2))))

; </end constructor FStar.Pervasives.Native.tuple2>


; <start constructor FStar.Pervasives.Native.Mktuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
132)
(= __@x0
(FStar.Pervasives.Native.Mktuple2 (FStar.Pervasives.Native.Mktuple2__a __@x0)
(FStar.Pervasives.Native.Mktuple2__b __@x0)
(FStar.Pervasives.Native.Mktuple2__1 __@x0)
(FStar.Pervasives.Native.Mktuple2__2 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple2>


; </end encoding type FStar.Pervasives.Native.tuple2>


; <Start encoding assume FStar.Pervasives.Native.tuple2__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple2__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple2>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple2 (Term Term Term) Term)
(declare-fun Tm_arrow_eff71eeee4474e017e02350f86f54756 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple2@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple2>


; <Skipped let uu___is_Mktuple2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___1 (Term Term Term) Term)
(declare-fun Tm_arrow_b8cce376a4a678a51298a0f3945f25ce () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___1>


; <Skipped let __proj__Mktuple2__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___2 (Term Term Term) Term)
(declare-fun Tm_arrow_d952d001575ecb20c572af535c88dd2d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___2>


; <Skipped let __proj__Mktuple2__item___2/>


; <Start encoding let fst>

(declare-fun FStar.Pervasives.Native.fst (Term Term Term) Term)

(declare-fun FStar.Pervasives.Native.fst@tok () Term)

; </end encoding let fst>


; <Start encoding let snd>

(declare-fun FStar.Pervasives.Native.snd (Term Term Term) Term)

(declare-fun FStar.Pervasives.Native.snd@tok () Term)

; </end encoding let snd>


; <Start encoding type FStar.Pervasives.Native.tuple3>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple3@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple3 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__3 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple3
(declare-fun FStar.Pervasives.Native.Mktuple3@tok () Term)
(declare-fun Tm_arrow_1bedda193f13e939931cf5d46ad84216 () Term)

; <start constructor FStar.Pervasives.Native.tuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
146)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple3))))

; </end constructor FStar.Pervasives.Native.tuple3>


; <start constructor FStar.Pervasives.Native.Mktuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
153)
(= __@x0
(FStar.Pervasives.Native.Mktuple3 (FStar.Pervasives.Native.Mktuple3__a __@x0)
(FStar.Pervasives.Native.Mktuple3__b __@x0)
(FStar.Pervasives.Native.Mktuple3__c __@x0)
(FStar.Pervasives.Native.Mktuple3__1 __@x0)
(FStar.Pervasives.Native.Mktuple3__2 __@x0)
(FStar.Pervasives.Native.Mktuple3__3 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple3>


; </end encoding type FStar.Pervasives.Native.tuple3>


; <Start encoding assume FStar.Pervasives.Native.tuple3__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple3__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple3>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple3 (Term Term Term Term) Term)
(declare-fun Tm_arrow_f03c6dc5b30146aaca49ed4bf6f332a7 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple3@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple3>


; <Skipped let uu___is_Mktuple3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Term Term Term Term) Term)
(declare-fun Tm_arrow_592c45439d32a71e1933eacb9776c9ed () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___1>


; <Skipped let __proj__Mktuple3__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Term Term Term Term) Term)
(declare-fun Tm_arrow_9c9b0c5ac9b0fbfc367f406af296ecab () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___2>


; <Skipped let __proj__Mktuple3__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___3 (Term Term Term Term) Term)
(declare-fun Tm_arrow_08246a62c9aeca08c44c602ad80e95a4 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___3>


; <Skipped let __proj__Mktuple3__item___3/>


; <Start encoding type FStar.Pervasives.Native.tuple4>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple4 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple4@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple4 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__4 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple4
(declare-fun FStar.Pervasives.Native.Mktuple4@tok () Term)
(declare-fun Tm_arrow_cbe72a10167439fe1ecfaf4fec8fd23f () Term)

; <start constructor FStar.Pervasives.Native.tuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
165)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple4 @x0
@x1
@x2
@x3))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple4))))

; </end constructor FStar.Pervasives.Native.tuple4>


; <start constructor FStar.Pervasives.Native.Mktuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
172)
(= __@x0
(FStar.Pervasives.Native.Mktuple4 (FStar.Pervasives.Native.Mktuple4__a __@x0)
(FStar.Pervasives.Native.Mktuple4__b __@x0)
(FStar.Pervasives.Native.Mktuple4__c __@x0)
(FStar.Pervasives.Native.Mktuple4__d __@x0)
(FStar.Pervasives.Native.Mktuple4__1 __@x0)
(FStar.Pervasives.Native.Mktuple4__2 __@x0)
(FStar.Pervasives.Native.Mktuple4__3 __@x0)
(FStar.Pervasives.Native.Mktuple4__4 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple4>


; </end encoding type FStar.Pervasives.Native.tuple4>


; <Start encoding assume FStar.Pervasives.Native.tuple4__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple4__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple4>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple4 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_4319694c225efa92ce9fad6e9d81f761 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple4@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple4>


; <Skipped let uu___is_Mktuple4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___1 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_382d1e9129053162252ec57e86d46f82 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___1>


; <Skipped let __proj__Mktuple4__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___2 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_fffd25e5325d259efa0675ef649c6864 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___2>


; <Skipped let __proj__Mktuple4__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___3 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_57b4005e0833f7b396e349ed7cdd1bb2 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___3>


; <Skipped let __proj__Mktuple4__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___4 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9e6c1a63d63f8735645b9898955a2dca () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___4>


; <Skipped let __proj__Mktuple4__item___4/>


; <Start encoding type FStar.Pervasives.Native.tuple5>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple5 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple5@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple5 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__5 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple5
(declare-fun FStar.Pervasives.Native.Mktuple5@tok () Term)
(declare-fun Tm_arrow_dd8a078a1b97a81b5089dc3637cc2887 () Term)

; <start constructor FStar.Pervasives.Native.tuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
186)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple5 @x0
@x1
@x2
@x3
@x4))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple5))))

; </end constructor FStar.Pervasives.Native.tuple5>


; <start constructor FStar.Pervasives.Native.Mktuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
193)
(= __@x0
(FStar.Pervasives.Native.Mktuple5 (FStar.Pervasives.Native.Mktuple5__a __@x0)
(FStar.Pervasives.Native.Mktuple5__b __@x0)
(FStar.Pervasives.Native.Mktuple5__c __@x0)
(FStar.Pervasives.Native.Mktuple5__d __@x0)
(FStar.Pervasives.Native.Mktuple5__e __@x0)
(FStar.Pervasives.Native.Mktuple5__1 __@x0)
(FStar.Pervasives.Native.Mktuple5__2 __@x0)
(FStar.Pervasives.Native.Mktuple5__3 __@x0)
(FStar.Pervasives.Native.Mktuple5__4 __@x0)
(FStar.Pervasives.Native.Mktuple5__5 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple5>


; </end encoding type FStar.Pervasives.Native.tuple5>


; <Start encoding assume FStar.Pervasives.Native.tuple5__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple5__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple5>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple5 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_cfa2e2c8b8b41312889ff659c4faa5f9 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple5@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple5>


; <Skipped let uu___is_Mktuple5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___1 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7519f72fe101267af170e00c6ce694af () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___1>


; <Skipped let __proj__Mktuple5__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___2 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3e46329f224aa70981a337f98afbaa87 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___2>


; <Skipped let __proj__Mktuple5__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___3 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_55e6dc1b736536de45fedf844003f847 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___3>


; <Skipped let __proj__Mktuple5__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___4 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3a4e86c6aee1a39b4811bdbc12405398 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___4>


; <Skipped let __proj__Mktuple5__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___5 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1a78355922fdaba3f3848932dfc0a089 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___5>


; <Skipped let __proj__Mktuple5__item___5/>


; <Start encoding type FStar.Pervasives.Native.tuple6>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple6 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple6@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple6 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__6 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple6
(declare-fun FStar.Pervasives.Native.Mktuple6@tok () Term)
(declare-fun Tm_arrow_f277ffaa7e891207f9c6bff5b88ffd67 () Term)

; <start constructor FStar.Pervasives.Native.tuple6>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple6 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
209)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple6 @x0
@x1
@x2
@x3
@x4
@x5))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple6))))

; </end constructor FStar.Pervasives.Native.tuple6>


; <start constructor FStar.Pervasives.Native.Mktuple6>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple6 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
216)
(= __@x0
(FStar.Pervasives.Native.Mktuple6 (FStar.Pervasives.Native.Mktuple6__a __@x0)
(FStar.Pervasives.Native.Mktuple6__b __@x0)
(FStar.Pervasives.Native.Mktuple6__c __@x0)
(FStar.Pervasives.Native.Mktuple6__d __@x0)
(FStar.Pervasives.Native.Mktuple6__e __@x0)
(FStar.Pervasives.Native.Mktuple6__f __@x0)
(FStar.Pervasives.Native.Mktuple6__1 __@x0)
(FStar.Pervasives.Native.Mktuple6__2 __@x0)
(FStar.Pervasives.Native.Mktuple6__3 __@x0)
(FStar.Pervasives.Native.Mktuple6__4 __@x0)
(FStar.Pervasives.Native.Mktuple6__5 __@x0)
(FStar.Pervasives.Native.Mktuple6__6 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple6>


; </end encoding type FStar.Pervasives.Native.tuple6>


; <Start encoding assume FStar.Pervasives.Native.tuple6__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple6__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple6>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple6 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_286587a1b9d299ba75a076f54a6dad5f () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple6@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple6>


; <Skipped let uu___is_Mktuple6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___1 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5b1e145eeceab869b8e427e6927dbd63 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___1>


; <Skipped let __proj__Mktuple6__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___2 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3207475e225d584881d3e0a297482887 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___2>


; <Skipped let __proj__Mktuple6__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___3 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_43e491b3b537a523a4f10de18b1915f5 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___3>


; <Skipped let __proj__Mktuple6__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___4 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f5747d5b721642d7ecb757b043f20880 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___4>


; <Skipped let __proj__Mktuple6__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___5 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_d6501381a0206e157ecc43950bb31fea () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___5>


; <Skipped let __proj__Mktuple6__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___6 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9c342f41120d0c7aea115b09b58cefb2 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___6>


; <Skipped let __proj__Mktuple6__item___6/>


; <Start encoding type FStar.Pervasives.Native.tuple7>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple7 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple7@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__7 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple7
(declare-fun FStar.Pervasives.Native.Mktuple7@tok () Term)
(declare-fun Tm_arrow_37ee9ec407a0f7bb69bf1b308f74a230 () Term)

; <start constructor FStar.Pervasives.Native.tuple7>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple7 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
234)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple7))))

; </end constructor FStar.Pervasives.Native.tuple7>


; <start constructor FStar.Pervasives.Native.Mktuple7>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple7 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
241)
(= __@x0
(FStar.Pervasives.Native.Mktuple7 (FStar.Pervasives.Native.Mktuple7__a __@x0)
(FStar.Pervasives.Native.Mktuple7__b __@x0)
(FStar.Pervasives.Native.Mktuple7__c __@x0)
(FStar.Pervasives.Native.Mktuple7__d __@x0)
(FStar.Pervasives.Native.Mktuple7__e __@x0)
(FStar.Pervasives.Native.Mktuple7__f __@x0)
(FStar.Pervasives.Native.Mktuple7__g __@x0)
(FStar.Pervasives.Native.Mktuple7__1 __@x0)
(FStar.Pervasives.Native.Mktuple7__2 __@x0)
(FStar.Pervasives.Native.Mktuple7__3 __@x0)
(FStar.Pervasives.Native.Mktuple7__4 __@x0)
(FStar.Pervasives.Native.Mktuple7__5 __@x0)
(FStar.Pervasives.Native.Mktuple7__6 __@x0)
(FStar.Pervasives.Native.Mktuple7__7 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple7>


; </end encoding type FStar.Pervasives.Native.tuple7>


; <Start encoding assume FStar.Pervasives.Native.tuple7__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple7__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple7>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple7 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_612dde2fedb1440c5d790ba7f5015319 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple7@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple7>


; <Skipped let uu___is_Mktuple7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___1 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_01c4488a68699f466c59799f5c1173ff () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___1>


; <Skipped let __proj__Mktuple7__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___2 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f317591858699585c67fe4ba8664e34c () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___2>


; <Skipped let __proj__Mktuple7__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___3 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_44afce9d86f095aacc82b3ea2e0e223c () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___3>


; <Skipped let __proj__Mktuple7__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___4 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e857539d4cc5be0510cbcfb97cb64b35 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___4>


; <Skipped let __proj__Mktuple7__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___5 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a249d3d5ba06026b12d41e289bb88061 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___5>


; <Skipped let __proj__Mktuple7__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___6 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_bf614c740d11cac9b5f8eb20b24c7d00 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___6>


; <Skipped let __proj__Mktuple7__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___7 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e775fbf03b08091e48143165286522f7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___7>


; <Skipped let __proj__Mktuple7__item___7/>


; <Start encoding type FStar.Pervasives.Native.tuple8>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple8 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple8@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__8 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple8
(declare-fun FStar.Pervasives.Native.Mktuple8@tok () Term)
(declare-fun Tm_arrow_e922a339a0aa0f375ed7113049811583 () Term)

; <start constructor FStar.Pervasives.Native.tuple8>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple8 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
261)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple8))))

; </end constructor FStar.Pervasives.Native.tuple8>


; <start constructor FStar.Pervasives.Native.Mktuple8>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple8 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
268)
(= __@x0
(FStar.Pervasives.Native.Mktuple8 (FStar.Pervasives.Native.Mktuple8__a __@x0)
(FStar.Pervasives.Native.Mktuple8__b __@x0)
(FStar.Pervasives.Native.Mktuple8__c __@x0)
(FStar.Pervasives.Native.Mktuple8__d __@x0)
(FStar.Pervasives.Native.Mktuple8__e __@x0)
(FStar.Pervasives.Native.Mktuple8__f __@x0)
(FStar.Pervasives.Native.Mktuple8__g __@x0)
(FStar.Pervasives.Native.Mktuple8__h __@x0)
(FStar.Pervasives.Native.Mktuple8__1 __@x0)
(FStar.Pervasives.Native.Mktuple8__2 __@x0)
(FStar.Pervasives.Native.Mktuple8__3 __@x0)
(FStar.Pervasives.Native.Mktuple8__4 __@x0)
(FStar.Pervasives.Native.Mktuple8__5 __@x0)
(FStar.Pervasives.Native.Mktuple8__6 __@x0)
(FStar.Pervasives.Native.Mktuple8__7 __@x0)
(FStar.Pervasives.Native.Mktuple8__8 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple8>


; </end encoding type FStar.Pervasives.Native.tuple8>


; <Start encoding assume FStar.Pervasives.Native.tuple8__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple8__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple8>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple8 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ee31533e24c78558f4566668a6ec027c () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple8@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple8>


; <Skipped let uu___is_Mktuple8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___1 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c971649e117e4941e7317eff508d5ea7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___1>


; <Skipped let __proj__Mktuple8__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___2 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_97dd51e3888c1c543d8f6c73d1808548 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___2>


; <Skipped let __proj__Mktuple8__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___3 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3931d1873633dc65fed4e022ee3df3ca () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___3>


; <Skipped let __proj__Mktuple8__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___4 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5c791e62f9472e4c351c2befb2b7a3d8 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___4>


; <Skipped let __proj__Mktuple8__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___5 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7ef7cac898ca0ef25893959e91d8c6ce () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___5>


; <Skipped let __proj__Mktuple8__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___6 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_b0ae5f58a7fa002e0313b58bf5fc74cb () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___6>


; <Skipped let __proj__Mktuple8__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___7 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7fcd94f7549ca8acfadc26bc5b82f590 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___7>


; <Skipped let __proj__Mktuple8__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___8 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_feaaf61fa62fef18c5ee7c39e9f86573 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___8>


; <Skipped let __proj__Mktuple8__item___8/>


; <Start encoding type FStar.Pervasives.Native.tuple9>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple9 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple9@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__9 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple9
(declare-fun FStar.Pervasives.Native.Mktuple9@tok () Term)
(declare-fun Tm_arrow_0c6bc368a301d7de6e1939ebea91ee60 () Term)

; <start constructor FStar.Pervasives.Native.tuple9>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple9 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
290)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple9 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple9))))

; </end constructor FStar.Pervasives.Native.tuple9>


; <start constructor FStar.Pervasives.Native.Mktuple9>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple9 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
297)
(= __@x0
(FStar.Pervasives.Native.Mktuple9 (FStar.Pervasives.Native.Mktuple9__a __@x0)
(FStar.Pervasives.Native.Mktuple9__b __@x0)
(FStar.Pervasives.Native.Mktuple9__c __@x0)
(FStar.Pervasives.Native.Mktuple9__d __@x0)
(FStar.Pervasives.Native.Mktuple9__e __@x0)
(FStar.Pervasives.Native.Mktuple9__f __@x0)
(FStar.Pervasives.Native.Mktuple9__g __@x0)
(FStar.Pervasives.Native.Mktuple9__h __@x0)
(FStar.Pervasives.Native.Mktuple9__i __@x0)
(FStar.Pervasives.Native.Mktuple9__1 __@x0)
(FStar.Pervasives.Native.Mktuple9__2 __@x0)
(FStar.Pervasives.Native.Mktuple9__3 __@x0)
(FStar.Pervasives.Native.Mktuple9__4 __@x0)
(FStar.Pervasives.Native.Mktuple9__5 __@x0)
(FStar.Pervasives.Native.Mktuple9__6 __@x0)
(FStar.Pervasives.Native.Mktuple9__7 __@x0)
(FStar.Pervasives.Native.Mktuple9__8 __@x0)
(FStar.Pervasives.Native.Mktuple9__9 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple9>


; </end encoding type FStar.Pervasives.Native.tuple9>


; <Start encoding assume FStar.Pervasives.Native.tuple9__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple9__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple9>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple9 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9ac8f39c7b1df1e87db7c9bf5bc37a38 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple9@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple9>


; <Skipped let uu___is_Mktuple9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___1 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_270119cc1f13c9afeb25322d78efc328 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___1>


; <Skipped let __proj__Mktuple9__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___2 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3c368dee2c86a1af7bd7ea91baab7613 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___2>


; <Skipped let __proj__Mktuple9__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___3 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e9c745e2da3dec50930b0a7e01a11cc3 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___3>


; <Skipped let __proj__Mktuple9__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___4 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a82ff41c5c66cd37481c83584c94a54d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___4>


; <Skipped let __proj__Mktuple9__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___5 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1b3b4c5e68fdf7277f64bde93e6534de () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___5>


; <Skipped let __proj__Mktuple9__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___6 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_837f1324f6fa51bb8a0e45ee48e4e058 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___6>


; <Skipped let __proj__Mktuple9__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___7 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a7562220963e3431d35de76c3c9c87b9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___7>


; <Skipped let __proj__Mktuple9__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___8 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_861b810bc1c20bbd221cecbce824b695 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___8>


; <Skipped let __proj__Mktuple9__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___9 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9a54b18d8e08fdf0e20244b3f960c9dc () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___9>


; <Skipped let __proj__Mktuple9__item___9/>


; <Start encoding type FStar.Pervasives.Native.tuple10>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple10 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple10@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__10 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple10
(declare-fun FStar.Pervasives.Native.Mktuple10@tok () Term)
(declare-fun Tm_arrow_61d31241317018093b2245d256adbcb5 () Term)

; <start constructor FStar.Pervasives.Native.tuple10>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple10 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
321)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple10 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple10))))

; </end constructor FStar.Pervasives.Native.tuple10>


; <start constructor FStar.Pervasives.Native.Mktuple10>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple10 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
328)
(= __@x0
(FStar.Pervasives.Native.Mktuple10 (FStar.Pervasives.Native.Mktuple10__a __@x0)
(FStar.Pervasives.Native.Mktuple10__b __@x0)
(FStar.Pervasives.Native.Mktuple10__c __@x0)
(FStar.Pervasives.Native.Mktuple10__d __@x0)
(FStar.Pervasives.Native.Mktuple10__e __@x0)
(FStar.Pervasives.Native.Mktuple10__f __@x0)
(FStar.Pervasives.Native.Mktuple10__g __@x0)
(FStar.Pervasives.Native.Mktuple10__h __@x0)
(FStar.Pervasives.Native.Mktuple10__i __@x0)
(FStar.Pervasives.Native.Mktuple10__j __@x0)
(FStar.Pervasives.Native.Mktuple10__1 __@x0)
(FStar.Pervasives.Native.Mktuple10__2 __@x0)
(FStar.Pervasives.Native.Mktuple10__3 __@x0)
(FStar.Pervasives.Native.Mktuple10__4 __@x0)
(FStar.Pervasives.Native.Mktuple10__5 __@x0)
(FStar.Pervasives.Native.Mktuple10__6 __@x0)
(FStar.Pervasives.Native.Mktuple10__7 __@x0)
(FStar.Pervasives.Native.Mktuple10__8 __@x0)
(FStar.Pervasives.Native.Mktuple10__9 __@x0)
(FStar.Pervasives.Native.Mktuple10__10 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple10>


; </end encoding type FStar.Pervasives.Native.tuple10>


; <Start encoding assume FStar.Pervasives.Native.tuple10__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple10__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple10>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple10 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f27282a056f525d8710bf32204d252ec () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple10@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple10>


; <Skipped let uu___is_Mktuple10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___1 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c581e9177cd071a1b6e057fca49ea75b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___1>


; <Skipped let __proj__Mktuple10__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___2 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ae4b2db87d7c69a8380f4d5ae20f2149 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___2>


; <Skipped let __proj__Mktuple10__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___3 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a21274cb112dc6619b2bde244e6a0f9a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___3>


; <Skipped let __proj__Mktuple10__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___4 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9a051d5cacf4367d170d590ba8bb720d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___4>


; <Skipped let __proj__Mktuple10__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___5 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_bbd73769b626202d4de52d4d60cd3b75 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___5>


; <Skipped let __proj__Mktuple10__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___6 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7ceeded5a3852448c1a5406becbd990e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___6>


; <Skipped let __proj__Mktuple10__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___7 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c68947c71d484ad43cd50646c4e1daf4 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___7>


; <Skipped let __proj__Mktuple10__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___8 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e7b9ff90289491020fe84c6ab3bc60c6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___8>


; <Skipped let __proj__Mktuple10__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___9 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_6dbb3170f112f78092d1caee0b341678 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___9>


; <Skipped let __proj__Mktuple10__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___10 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_45598a99c0a7fcc1bf2258b9ad4256cf () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___10>


; <Skipped let __proj__Mktuple10__item___10/>


; <Start encoding type FStar.Pervasives.Native.tuple11>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple11 (Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple11@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__11 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple11
(declare-fun FStar.Pervasives.Native.Mktuple11@tok () Term)
(declare-fun Tm_arrow_bf9783a1a3bf19ab918f42acff1daa32 () Term)

; <start constructor FStar.Pervasives.Native.tuple11>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple11 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
354)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple11 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple11))))

; </end constructor FStar.Pervasives.Native.tuple11>


; <start constructor FStar.Pervasives.Native.Mktuple11>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple11 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
361)
(= __@x0
(FStar.Pervasives.Native.Mktuple11 (FStar.Pervasives.Native.Mktuple11__a __@x0)
(FStar.Pervasives.Native.Mktuple11__b __@x0)
(FStar.Pervasives.Native.Mktuple11__c __@x0)
(FStar.Pervasives.Native.Mktuple11__d __@x0)
(FStar.Pervasives.Native.Mktuple11__e __@x0)
(FStar.Pervasives.Native.Mktuple11__f __@x0)
(FStar.Pervasives.Native.Mktuple11__g __@x0)
(FStar.Pervasives.Native.Mktuple11__h __@x0)
(FStar.Pervasives.Native.Mktuple11__i __@x0)
(FStar.Pervasives.Native.Mktuple11__j __@x0)
(FStar.Pervasives.Native.Mktuple11__k __@x0)
(FStar.Pervasives.Native.Mktuple11__1 __@x0)
(FStar.Pervasives.Native.Mktuple11__2 __@x0)
(FStar.Pervasives.Native.Mktuple11__3 __@x0)
(FStar.Pervasives.Native.Mktuple11__4 __@x0)
(FStar.Pervasives.Native.Mktuple11__5 __@x0)
(FStar.Pervasives.Native.Mktuple11__6 __@x0)
(FStar.Pervasives.Native.Mktuple11__7 __@x0)
(FStar.Pervasives.Native.Mktuple11__8 __@x0)
(FStar.Pervasives.Native.Mktuple11__9 __@x0)
(FStar.Pervasives.Native.Mktuple11__10 __@x0)
(FStar.Pervasives.Native.Mktuple11__11 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple11>


; </end encoding type FStar.Pervasives.Native.tuple11>


; <Start encoding assume FStar.Pervasives.Native.tuple11__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple11__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple11>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple11 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_005819ee7a23a5c47189bae72b85d85c () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple11@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple11>


; <Skipped let uu___is_Mktuple11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_31968e334e9582d95281307f534992a9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___1>


; <Skipped let __proj__Mktuple11__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_6252dd9f4473dc54a3482810e8556404 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___2>


; <Skipped let __proj__Mktuple11__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ec3ce6b7406c091cd7d0961922bb5a02 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___3>


; <Skipped let __proj__Mktuple11__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_be7571e73b0e7fc24d03efe0e003c054 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___4>


; <Skipped let __proj__Mktuple11__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_97ae7d913e508c46c48c3b51553d4459 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___5>


; <Skipped let __proj__Mktuple11__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1dca311798936510e0ead61e14cf32a6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___6>


; <Skipped let __proj__Mktuple11__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_eec431ea31093a646681ef2ceb2e2986 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___7>


; <Skipped let __proj__Mktuple11__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_689b2f06e9fd83f7a84ce80a13d338c6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___8>


; <Skipped let __proj__Mktuple11__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_20210a3d9498f929cb7aa68d9e8b5ebf () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___9>


; <Skipped let __proj__Mktuple11__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_96812f2124d88760b2002bbe1502c3c9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___10>


; <Skipped let __proj__Mktuple11__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_abcfa2582f68905d460c5ef4a7642f2d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___11>


; <Skipped let __proj__Mktuple11__item___11/>


; <Start encoding type FStar.Pervasives.Native.tuple12>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple12 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple12@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__12 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple12
(declare-fun FStar.Pervasives.Native.Mktuple12@tok () Term)
(declare-fun Tm_arrow_4d5cd995d6f44a2ec39d0f193be0be65 () Term)

; <start constructor FStar.Pervasives.Native.tuple12>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple12 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
389)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple12 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple12))))

; </end constructor FStar.Pervasives.Native.tuple12>


; <start constructor FStar.Pervasives.Native.Mktuple12>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple12 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
396)
(= __@x0
(FStar.Pervasives.Native.Mktuple12 (FStar.Pervasives.Native.Mktuple12__a __@x0)
(FStar.Pervasives.Native.Mktuple12__b __@x0)
(FStar.Pervasives.Native.Mktuple12__c __@x0)
(FStar.Pervasives.Native.Mktuple12__d __@x0)
(FStar.Pervasives.Native.Mktuple12__e __@x0)
(FStar.Pervasives.Native.Mktuple12__f __@x0)
(FStar.Pervasives.Native.Mktuple12__g __@x0)
(FStar.Pervasives.Native.Mktuple12__h __@x0)
(FStar.Pervasives.Native.Mktuple12__i __@x0)
(FStar.Pervasives.Native.Mktuple12__j __@x0)
(FStar.Pervasives.Native.Mktuple12__k __@x0)
(FStar.Pervasives.Native.Mktuple12__l __@x0)
(FStar.Pervasives.Native.Mktuple12__1 __@x0)
(FStar.Pervasives.Native.Mktuple12__2 __@x0)
(FStar.Pervasives.Native.Mktuple12__3 __@x0)
(FStar.Pervasives.Native.Mktuple12__4 __@x0)
(FStar.Pervasives.Native.Mktuple12__5 __@x0)
(FStar.Pervasives.Native.Mktuple12__6 __@x0)
(FStar.Pervasives.Native.Mktuple12__7 __@x0)
(FStar.Pervasives.Native.Mktuple12__8 __@x0)
(FStar.Pervasives.Native.Mktuple12__9 __@x0)
(FStar.Pervasives.Native.Mktuple12__10 __@x0)
(FStar.Pervasives.Native.Mktuple12__11 __@x0)
(FStar.Pervasives.Native.Mktuple12__12 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple12>


; </end encoding type FStar.Pervasives.Native.tuple12>


; <Start encoding assume FStar.Pervasives.Native.tuple12__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple12__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple12>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple12 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5c9f47d9090f554c9826d2f65e388f20 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple12@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple12>


; <Skipped let uu___is_Mktuple12/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_618941d7cf5ddbaabe15df8579b4a387 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___1>


; <Skipped let __proj__Mktuple12__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_84e9e2280e9bcb3233e4f33f86d66ea6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___2>


; <Skipped let __proj__Mktuple12__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1fa79c5abf9f18607bd2e46a1a6967fa () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___3>


; <Skipped let __proj__Mktuple12__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_0f49c582489d782b08195e81221181dc () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___4>


; <Skipped let __proj__Mktuple12__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_29b7181ebb44f9e4a45f95c4f8478c6a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___5>


; <Skipped let __proj__Mktuple12__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3cc2863a7d7f23e3916fa1e43483cb90 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___6>


; <Skipped let __proj__Mktuple12__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c7deea49701ab64a73985bf522e46359 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___7>


; <Skipped let __proj__Mktuple12__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_380615e7761919086537a14273a02d22 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___8>


; <Skipped let __proj__Mktuple12__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_245250918a4432b31aea8152d056489a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___9>


; <Skipped let __proj__Mktuple12__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2a967c8402c441e6d8a9336a7568e4de () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___10>


; <Skipped let __proj__Mktuple12__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_543c3feac0cd9e04ecb6cfd74ced8964 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___11>


; <Skipped let __proj__Mktuple12__item___11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e91029e2320896c60e94f554727a0c41 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___12@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___12>


; <Skipped let __proj__Mktuple12__item___12/>


; <Start encoding type FStar.Pervasives.Native.tuple13>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple13@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__m (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__12 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__13 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple13
(declare-fun FStar.Pervasives.Native.Mktuple13@tok () Term)
(declare-fun Tm_arrow_6462785e86ca440ee74ed32e1053eae3 () Term)

; <start constructor FStar.Pervasives.Native.tuple13>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple13 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
426)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple13 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple13))))

; </end constructor FStar.Pervasives.Native.tuple13>


; <start constructor FStar.Pervasives.Native.Mktuple13>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple13 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
433)
(= __@x0
(FStar.Pervasives.Native.Mktuple13 (FStar.Pervasives.Native.Mktuple13__a __@x0)
(FStar.Pervasives.Native.Mktuple13__b __@x0)
(FStar.Pervasives.Native.Mktuple13__c __@x0)
(FStar.Pervasives.Native.Mktuple13__d __@x0)
(FStar.Pervasives.Native.Mktuple13__e __@x0)
(FStar.Pervasives.Native.Mktuple13__f __@x0)
(FStar.Pervasives.Native.Mktuple13__g __@x0)
(FStar.Pervasives.Native.Mktuple13__h __@x0)
(FStar.Pervasives.Native.Mktuple13__i __@x0)
(FStar.Pervasives.Native.Mktuple13__j __@x0)
(FStar.Pervasives.Native.Mktuple13__k __@x0)
(FStar.Pervasives.Native.Mktuple13__l __@x0)
(FStar.Pervasives.Native.Mktuple13__m __@x0)
(FStar.Pervasives.Native.Mktuple13__1 __@x0)
(FStar.Pervasives.Native.Mktuple13__2 __@x0)
(FStar.Pervasives.Native.Mktuple13__3 __@x0)
(FStar.Pervasives.Native.Mktuple13__4 __@x0)
(FStar.Pervasives.Native.Mktuple13__5 __@x0)
(FStar.Pervasives.Native.Mktuple13__6 __@x0)
(FStar.Pervasives.Native.Mktuple13__7 __@x0)
(FStar.Pervasives.Native.Mktuple13__8 __@x0)
(FStar.Pervasives.Native.Mktuple13__9 __@x0)
(FStar.Pervasives.Native.Mktuple13__10 __@x0)
(FStar.Pervasives.Native.Mktuple13__11 __@x0)
(FStar.Pervasives.Native.Mktuple13__12 __@x0)
(FStar.Pervasives.Native.Mktuple13__13 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple13>


; </end encoding type FStar.Pervasives.Native.tuple13>


; <Start encoding assume FStar.Pervasives.Native.tuple13__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple13__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple13>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_68c092e8b387730b412c4dcf592b12d3 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple13@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple13>


; <Skipped let uu___is_Mktuple13/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_82a3dc3a5dbad615d8d4a31db238e43f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___1>


; <Skipped let __proj__Mktuple13__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1da976aaa65f1c6b8b256dfc45c41306 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___2>


; <Skipped let __proj__Mktuple13__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ca5cf529c415deee29e0a34c0c5d1c9f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___3>


; <Skipped let __proj__Mktuple13__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_94f6c578541b6cb528ca9e7dd1dacc3b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___4>


; <Skipped let __proj__Mktuple13__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_211e172b7220adc186d8a02ff17e8780 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___5>


; <Skipped let __proj__Mktuple13__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9276a4f669d8497205e8d59f12da53ba () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___6>


; <Skipped let __proj__Mktuple13__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_8aa8f381a5ed57cbbae9dcd2405ce80f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___7>


; <Skipped let __proj__Mktuple13__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_51814106613688cf259d7cdba9c24d93 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___8>


; <Skipped let __proj__Mktuple13__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_05fec25e6f03f974bb2933a910642d7e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___9>


; <Skipped let __proj__Mktuple13__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3280ee04611a7985c9d107bb1a8a330a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___10>


; <Skipped let __proj__Mktuple13__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_86c868d5d5058e8e5ec1f4d0285c7e90 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___11>


; <Skipped let __proj__Mktuple13__item___11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7263c1a3c4475bb4e4b41a1be4bf22da () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___12@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___12>


; <Skipped let __proj__Mktuple13__item___12/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___13>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_338c65ae58844787891c6f47cf01c068 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___13@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___13>


; <Skipped let __proj__Mktuple13__item___13/>


; <Start encoding type FStar.Pervasives.Native.tuple14>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple14@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__m (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__n (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__12 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__13 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__14 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple14
(declare-fun FStar.Pervasives.Native.Mktuple14@tok () Term)
(declare-fun Tm_arrow_484e3bf88a886900f7e695d7333615e9 () Term)

; <start constructor FStar.Pervasives.Native.tuple14>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple14 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
465)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple14 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple14))))

; </end constructor FStar.Pervasives.Native.tuple14>


; <start constructor FStar.Pervasives.Native.Mktuple14>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple14 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
472)
(= __@x0
(FStar.Pervasives.Native.Mktuple14 (FStar.Pervasives.Native.Mktuple14__a __@x0)
(FStar.Pervasives.Native.Mktuple14__b __@x0)
(FStar.Pervasives.Native.Mktuple14__c __@x0)
(FStar.Pervasives.Native.Mktuple14__d __@x0)
(FStar.Pervasives.Native.Mktuple14__e __@x0)
(FStar.Pervasives.Native.Mktuple14__f __@x0)
(FStar.Pervasives.Native.Mktuple14__g __@x0)
(FStar.Pervasives.Native.Mktuple14__h __@x0)
(FStar.Pervasives.Native.Mktuple14__i __@x0)
(FStar.Pervasives.Native.Mktuple14__j __@x0)
(FStar.Pervasives.Native.Mktuple14__k __@x0)
(FStar.Pervasives.Native.Mktuple14__l __@x0)
(FStar.Pervasives.Native.Mktuple14__m __@x0)
(FStar.Pervasives.Native.Mktuple14__n __@x0)
(FStar.Pervasives.Native.Mktuple14__1 __@x0)
(FStar.Pervasives.Native.Mktuple14__2 __@x0)
(FStar.Pervasives.Native.Mktuple14__3 __@x0)
(FStar.Pervasives.Native.Mktuple14__4 __@x0)
(FStar.Pervasives.Native.Mktuple14__5 __@x0)
(FStar.Pervasives.Native.Mktuple14__6 __@x0)
(FStar.Pervasives.Native.Mktuple14__7 __@x0)
(FStar.Pervasives.Native.Mktuple14__8 __@x0)
(FStar.Pervasives.Native.Mktuple14__9 __@x0)
(FStar.Pervasives.Native.Mktuple14__10 __@x0)
(FStar.Pervasives.Native.Mktuple14__11 __@x0)
(FStar.Pervasives.Native.Mktuple14__12 __@x0)
(FStar.Pervasives.Native.Mktuple14__13 __@x0)
(FStar.Pervasives.Native.Mktuple14__14 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple14>


; </end encoding type FStar.Pervasives.Native.tuple14>


; <Start encoding assume FStar.Pervasives.Native.tuple14__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple14__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple14>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2de133cfaca100fc23d8bf4b3421db9a () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple14@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple14>


; <Skipped let uu___is_Mktuple14/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2e3216cab266e138debd68d0a503c177 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___1>


; <Skipped let __proj__Mktuple14__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_958b0270e487d0bf5fe9191b9efaa127 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___2>


; <Skipped let __proj__Mktuple14__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_08349f596f8c0acf60d1587bebe8c91b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___3>


; <Skipped let __proj__Mktuple14__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2b069168147ba0f67f117ad5b0ac078b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___4>


; <Skipped let __proj__Mktuple14__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1e38bb16245a24a197c44a262fee7bf1 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___5>


; <Skipped let __proj__Mktuple14__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7a148953a3884454d8a1dffddce086bb () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___6>


; <Skipped let __proj__Mktuple14__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_812eeb3fdab56dfea8e419236740acb0 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___7>


; <Skipped let __proj__Mktuple14__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9dc932ce7cdfd6fa57f6536787fcb65b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___8>


; <Skipped let __proj__Mktuple14__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2600722933f06bc55e28bb3fc2ce4a6a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___9>


; <Skipped let __proj__Mktuple14__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f51203e57fd66f9e9293b8962c57edfe () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___10>


; <Skipped let __proj__Mktuple14__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7c34e0c28edc5fc4ad24d0b749c0adb7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___11>


; <Skipped let __proj__Mktuple14__item___11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_8772cc50ea320af17b3f2371c273679a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___12@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___12>


; <Skipped let __proj__Mktuple14__item___12/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___13>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_039da0b9a8da1a651a1c570e55456614 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___13@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___13>


; <Skipped let __proj__Mktuple14__item___13/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___14>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_579ada2eb036c15c7306dac5b648153e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___14@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___14>


; <Skipped let __proj__Mktuple14__item___14/>


; End Externals for module FStar.Pervasives.Native


; Externals for interface FStar.Pervasives


; <Start encoding val FStar.Pervasives.remove_unused_type_parameters>

(declare-fun FStar.Pervasives.remove_unused_type_parameters (Term) Term)
(declare-fun Tm_arrow_555d62757eeaf90340982fcdf25f6704 () Term)
(declare-fun FStar.Pervasives.remove_unused_type_parameters@tok () Term)

; </end encoding val FStar.Pervasives.remove_unused_type_parameters>


; <Start encoding let pattern>

(declare-fun FStar.Pervasives.pattern () Term)

; </end encoding let pattern>


; <Start encoding val FStar.Pervasives.smt_pat>

(declare-fun FStar.Pervasives.smt_pat (Term Term) Term)
(declare-fun Tm_arrow_ce7b692455ad1649f97902066cf7c9aa () Term)
(declare-fun FStar.Pervasives.smt_pat@tok () Term)

; </end encoding val FStar.Pervasives.smt_pat>


; <Start encoding val FStar.Pervasives.smt_pat_or>

(declare-fun FStar.Pervasives.smt_pat_or (Term) Term)
(declare-fun Tm_arrow_cbfaca2770c8ef7d6393b664b7ea1a41 () Term)
(declare-fun FStar.Pervasives.smt_pat_or@tok () Term)

; </end encoding val FStar.Pervasives.smt_pat_or>


; <Start encoding let eqtype_u>

(declare-fun FStar.Pervasives.eqtype_u () Term)


; </end encoding let eqtype_u>


; <Skipped effect Lemma a pre post pats = Prims.Pure a/>


; <Start encoding val FStar.Pervasives.spinoff>

(declare-fun FStar.Pervasives.spinoff (Term) Term)

(declare-fun FStar.Pervasives.spinoff@tok () Term)

; </end encoding val FStar.Pervasives.spinoff>


; <Start encoding val FStar.Pervasives.spinoff_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.spinoff_eq (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.spinoff_eq@tok () Term)

; </end encoding val FStar.Pervasives.spinoff_eq>


; <Start encoding val FStar.Pervasives.spinoff_equiv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.spinoff_equiv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.spinoff_equiv@tok () Term)

; </end encoding val FStar.Pervasives.spinoff_equiv>


; <Start encoding val FStar.Pervasives.assert_spinoff>

(declare-fun FStar.Pervasives.assert_spinoff (Term) Term)

(declare-fun Tm_arrow_071538fd1c72fb82c7bb7b280daddf84 () Term)
(declare-fun FStar.Pervasives.assert_spinoff@tok () Term)


; </end encoding val FStar.Pervasives.assert_spinoff>


; <Start encoding let id>

(declare-fun FStar.Pervasives.id (Term Term) Term)

(declare-fun FStar.Pervasives.id@tok () Term)

; </end encoding let id>


; <Start encoding let trivial_pure_post>

(declare-fun FStar.Pervasives.trivial_pure_post (Term) Term)
(declare-fun Tm_arrow_53823f439377767fbcd3e27ebcdb971b () Term)
(declare-fun FStar.Pervasives.trivial_pure_post@tok () Term)

(declare-fun Tm_abs_5e34897418ce4950a4effcc8c159cf53 (Term) Term)

; </end encoding let trivial_pure_post>


; <Start encoding val FStar.Pervasives.ambient>

(declare-fun FStar.Pervasives.ambient (Term Term) Term)
(declare-fun Tm_arrow_9e007179360e2932d75ab29019e3d7fa () Term)
(declare-fun FStar.Pervasives.ambient@tok () Term)

; </end encoding val FStar.Pervasives.ambient>


; <Start encoding val FStar.Pervasives.intro_ambient>

(declare-fun FStar.Pervasives.intro_ambient (Term Term) Term)
(declare-fun Tm_arrow_6fc6334d56387f3d408122a4bd045e7e () Term)
(declare-fun FStar.Pervasives.intro_ambient@tok () Term)

; </end encoding val FStar.Pervasives.intro_ambient>


; <Start encoding val FStar.Pervasives.normalize_term>

(declare-fun FStar.Pervasives.normalize_term (Term Term) Term)

(declare-fun FStar.Pervasives.normalize_term@tok () Term)

; </end encoding val FStar.Pervasives.normalize_term>


; <Start encoding val FStar.Pervasives.normalize>

(declare-fun FStar.Pervasives.normalize (Term) Term)

(declare-fun FStar.Pervasives.normalize@tok () Term)

; </end encoding val FStar.Pervasives.normalize>


; <Start encoding val FStar.Pervasives.norm_step>

(declare-fun FStar.Pervasives.norm_step () Term)

; </end encoding val FStar.Pervasives.norm_step>


; <Start encoding val FStar.Pervasives.simplify>

(declare-fun FStar.Pervasives.simplify (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.simplify>


; <Start encoding val FStar.Pervasives.weak>

(declare-fun FStar.Pervasives.weak (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.weak>


; <Start encoding val FStar.Pervasives.hnf>

(declare-fun FStar.Pervasives.hnf (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.hnf>


; <Start encoding val FStar.Pervasives.primops>

(declare-fun FStar.Pervasives.primops (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.primops>


; <Start encoding val FStar.Pervasives.delta>

(declare-fun FStar.Pervasives.delta (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.delta>


; <Start encoding val FStar.Pervasives.norm_debug>

(declare-fun FStar.Pervasives.norm_debug (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.norm_debug>


; <Start encoding val FStar.Pervasives.zeta>

(declare-fun FStar.Pervasives.zeta (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.zeta>


; <Start encoding val FStar.Pervasives.zeta_full>

(declare-fun FStar.Pervasives.zeta_full (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.zeta_full>


; <Start encoding val FStar.Pervasives.iota>

(declare-fun FStar.Pervasives.iota (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.iota>


; <Start encoding val FStar.Pervasives.nbe>

(declare-fun FStar.Pervasives.nbe (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.nbe>


; <Start encoding val FStar.Pervasives.reify_>

(declare-fun FStar.Pervasives.reify_ (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.reify_>


; <Start encoding val FStar.Pervasives.delta_only>

(declare-fun FStar.Pervasives.delta_only (Term) Term)
(declare-fun Tm_arrow_f14a20345cd55ddda96b6c4cc49e05f1 () Term)
(declare-fun FStar.Pervasives.delta_only@tok () Term)

; </end encoding val FStar.Pervasives.delta_only>


; <Start encoding val FStar.Pervasives.delta_fully>

(declare-fun FStar.Pervasives.delta_fully (Term) Term)

(declare-fun FStar.Pervasives.delta_fully@tok () Term)

; </end encoding val FStar.Pervasives.delta_fully>


; <Start encoding val FStar.Pervasives.delta_attr>

(declare-fun FStar.Pervasives.delta_attr (Term) Term)

(declare-fun FStar.Pervasives.delta_attr@tok () Term)

; </end encoding val FStar.Pervasives.delta_attr>


; <Start encoding val FStar.Pervasives.delta_qualifier>

(declare-fun FStar.Pervasives.delta_qualifier (Term) Term)

(declare-fun FStar.Pervasives.delta_qualifier@tok () Term)

; </end encoding val FStar.Pervasives.delta_qualifier>


; <Start encoding val FStar.Pervasives.delta_namespace>

(declare-fun FStar.Pervasives.delta_namespace (Term) Term)

(declare-fun FStar.Pervasives.delta_namespace@tok () Term)

; </end encoding val FStar.Pervasives.delta_namespace>


; <Start encoding val FStar.Pervasives.unmeta>

(declare-fun FStar.Pervasives.unmeta (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unmeta>


; <Start encoding val FStar.Pervasives.unascribe>

(declare-fun FStar.Pervasives.unascribe (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unascribe>


; <Start encoding val FStar.Pervasives.norm>

(declare-fun FStar.Pervasives.norm (Term Term Term) Term)
(declare-fun Tm_arrow_7d92e7a4aa7eee4098b10c5f1b3d77ea () Term)
(declare-fun FStar.Pervasives.norm@tok () Term)

; </end encoding val FStar.Pervasives.norm>


; <Start encoding val FStar.Pervasives.assert_norm>

(declare-fun FStar.Pervasives.assert_norm (Term) Term)

(declare-fun Tm_arrow_ee24fcf624d074d3c637ee61e4a867fb () Term)
(declare-fun FStar.Pervasives.assert_norm@tok () Term)


; </end encoding val FStar.Pervasives.assert_norm>


; <Start encoding val FStar.Pervasives.normalize_term_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.normalize_term_spec (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.normalize_term_spec@tok () Term)

; </end encoding val FStar.Pervasives.normalize_term_spec>


; <Start encoding val FStar.Pervasives.normalize_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.normalize_spec (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.normalize_spec@tok () Term)

; </end encoding val FStar.Pervasives.normalize_spec>


; <Start encoding val FStar.Pervasives.norm_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.norm_spec (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.norm_spec@tok () Term)

; </end encoding val FStar.Pervasives.norm_spec>


; <Start encoding let reveal_opaque>

(declare-fun FStar.Pervasives.reveal_opaque (Term Term) Term)
(declare-fun Tm_refine_2be30877b98f57c6ef5847ce3a81c23c (Term Term Term) Term)
(declare-fun Tm_arrow_ba8e05da7828191e456b9d6196e5c486 (Term Term) Term)
(declare-fun Tm_arrow_a3d09fecedc35d104f95c5fde10a81ff () Term)
(declare-fun FStar.Pervasives.reveal_opaque@tok () Term)



; </end encoding let reveal_opaque>


; <Start encoding let pure_return>

(declare-fun FStar.Pervasives.pure_return (Term Term) Term)
(declare-fun Tm_arrow_0dff8d294aeaf0b1d7e9cad664c9a15f () Term)
(declare-fun FStar.Pervasives.pure_return@tok () Term)

(declare-fun Tm_abs_bc5117f6a06a581c69e04141781c86d0 (Term Term Term) Term)
(declare-fun Tm_arrow_c88a29758356586fc450d481d4b685f3 (Term) Term)
(declare-fun Tm_abs_bdac9a3f32789788b83138a3a4262d0d (Term Term) Term)

; </end encoding let pure_return>


; <Start encoding let pure_bind_wp>

(declare-fun Tm_arrow_c05bc9331677cc1a187ad7677301a601 (Term Term) Term)
(declare-fun FStar.Pervasives.pure_bind_wp (Term Term Term Term) Term)

(declare-fun Tm_arrow_f8eba41a4bcb9aca0e3c11224f695d1e () Term)
(declare-fun FStar.Pervasives.pure_bind_wp@tok () Term)


(declare-fun Tm_abs_d0f415a5361a9d7988d8e425dc193472 (Term Term Term) Term)

(declare-fun Tm_abs_72b65b71b828688dbb0ba657715a194c (Term Term Term Term) Term)

; </end encoding let pure_bind_wp>


; <Start encoding let pure_if_then_else>

(declare-fun FStar.Pervasives.pure_if_then_else (Term Term Term Term) Term)
(declare-fun Tm_arrow_5911c11ab85061b4a8acf6a6ff43aaea () Term)
(declare-fun FStar.Pervasives.pure_if_then_else@tok () Term)

(declare-fun Tm_abs_614d7ab3976dfea6b6428085a93bafcc (Term Term Term Term) Term)

; </end encoding let pure_if_then_else>


; <Start encoding let pure_ite_wp>

(declare-fun FStar.Pervasives.pure_ite_wp (Term Term) Term)
(declare-fun Tm_arrow_983cc9c1e881fffd3b37c61b327d54c8 () Term)
(declare-fun FStar.Pervasives.pure_ite_wp@tok () Term)

(declare-fun Tm_abs_ea1703a99385b474600aa7a3bdb045c5 (Term Term Term) Term)
(declare-fun Tm_arrow_b275e247a67e3e77d7c5997d864d1247 (Term) Term)
(declare-fun Tm_abs_f9993abe3e10fc5902262cf22e5f5e1c (Term Term Term) Term)

(declare-fun Tm_abs_a4d8a67e708eb0f8e41d6eefd90d8b3d (Term Term) Term)

; </end encoding let pure_ite_wp>


; <Start encoding let pure_close_wp>


(declare-fun FStar.Pervasives.pure_close_wp (Term Term Term) Term)

(declare-fun Tm_arrow_6424f17922e38fc8eb3b7ad8d9107d78 () Term)
(declare-fun FStar.Pervasives.pure_close_wp@tok () Term)




(declare-fun Tm_abs_bef01cdc202d648a37f7725a1e8579fa (Term Term Term) Term)

; </end encoding let pure_close_wp>


; <Start encoding let pure_null_wp>

(declare-fun FStar.Pervasives.pure_null_wp (Term) Term)
(declare-fun Tm_arrow_e02f472dad10492b4fdaf21971ae643f () Term)
(declare-fun FStar.Pervasives.pure_null_wp@tok () Term)



(declare-fun Tm_abs_c7a599bd05f6d553477b7b3a5a51d357 (Term) Term)

; </end encoding let pure_null_wp>


; <Start encoding let pure_assert_wp>

(declare-fun FStar.Pervasives.pure_assert_wp (Term) Term)

(declare-fun FStar.Pervasives.pure_assert_wp@tok () Term)

; </end encoding let pure_assert_wp>


; <Start encoding let pure_assume_wp>

(declare-fun FStar.Pervasives.pure_assume_wp (Term) Term)

(declare-fun FStar.Pervasives.pure_assume_wp@tok () Term)

; </end encoding let pure_assume_wp>


; <Skipped new_effect { DIV ... }/>


; <Skipped sub_effect PURE ~> DIV/>


; <Start encoding let div_hoare_to_wp>

(declare-fun FStar.Pervasives.div_hoare_to_wp (Term Term Term) Term)
(declare-fun Tm_arrow_e81e37f60b892c60a4b806bfecd6c240 () Term)
(declare-fun FStar.Pervasives.div_hoare_to_wp@tok () Term)




(declare-fun Tm_abs_69982e78bbdc9cbdfcc98c8c3ec276f1 (Term Term Term Term) Term)


(declare-fun Tm_abs_95829b03554cf2093d2bc29e28500b94 (Term Term Term) Term)

; </end encoding let div_hoare_to_wp>


; <Skipped effect Div a pre post = FStar.Pervasives.DIV a/>


; <Skipped effect Dv a = FStar.Pervasives.DIV a/>


; <Skipped effect EXT a = FStar.Pervasives.Dv a/>


; <Start encoding let st_pre_h>

(declare-fun FStar.Pervasives.st_pre_h (Term) Term)

(declare-fun FStar.Pervasives.st_pre_h@tok () Term)


; </end encoding let st_pre_h>


; <Start encoding let st_post_h'>

(declare-fun FStar.Pervasives.st_post_h_ (Term Term Term) Term)
(declare-fun Tm_arrow_659175ed40df3b798f91ffaee9e689bd () Term)
(declare-fun FStar.Pervasives.st_post_h_@tok () Term)

(declare-fun Tm_arrow_14435f7112db17792f8cd33f8f7ea859 (Term Term Term) Term)

; </end encoding let st_post_h'>


; <Start encoding let st_post_h>

(declare-fun FStar.Pervasives.st_post_h (Term Term) Term)

(declare-fun FStar.Pervasives.st_post_h@tok () Term)

; </end encoding let st_post_h>


; <Start encoding let st_wp_h>

(declare-fun FStar.Pervasives.st_wp_h (Term Term) Term)

(declare-fun FStar.Pervasives.st_wp_h@tok () Term)
(declare-fun Tm_arrow_c80b139653078194d2de90941effdc68 (Term Term) Term)

; </end encoding let st_wp_h>


; <Start encoding let st_return>

(declare-fun FStar.Pervasives.st_return (Term Term Term Term) Term)

(declare-fun Tm_arrow_6bfe4bf6faf1fb53a521d575cefc35ef () Term)
(declare-fun FStar.Pervasives.st_return@tok () Term)


; </end encoding let st_return>


; <Start encoding let st_bind_wp>

(declare-fun Tm_arrow_c6e0af8c2ccbdda79db5c09d07e87e35 (Term Term Term) Term)
(declare-fun FStar.Pervasives.st_bind_wp (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_0eca50df2f29485bdbf578799f16b4a6 () Term)
(declare-fun FStar.Pervasives.st_bind_wp@tok () Term)

(declare-fun Tm_arrow_eb9b1a038524b37579c152a3f169145e (Term Term) Term)
(declare-fun Tm_abs_0f3b5ee9eaa8de8cacad7d3dcacb4558 (Term Term Term Term) Term)

; </end encoding let st_bind_wp>


; <Start encoding let st_if_then_else>

(declare-fun FStar.Pervasives.st_if_then_else (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_6e48361e1a1c92df6ec1ff87e622ddad () Term)
(declare-fun FStar.Pervasives.st_if_then_else@tok () Term)

; </end encoding let st_if_then_else>


; <Start encoding let st_ite_wp>

(declare-fun FStar.Pervasives.st_ite_wp (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_eaad896c6afdcb7ade2e80b5a6a930af () Term)
(declare-fun FStar.Pervasives.st_ite_wp@tok () Term)

; </end encoding let st_ite_wp>


; <Start encoding let st_stronger>

(declare-fun FStar.Pervasives.st_stronger (Term Term Term Term) Term)
(declare-fun Tm_arrow_ae4d7f489de84317e0022bf89d45dd95 () Term)
(declare-fun FStar.Pervasives.st_stronger@tok () Term)

; </end encoding let st_stronger>


; <Start encoding let st_close_wp>


(declare-fun FStar.Pervasives.st_close_wp (Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_de6d3045642382698e9e38d41acfd7cc () Term)
(declare-fun FStar.Pervasives.st_close_wp@tok () Term)


; </end encoding let st_close_wp>


; <Start encoding let st_trivial>

(declare-fun FStar.Pervasives.st_trivial (Term Term Term) Term)
(declare-fun Tm_arrow_f145e04ff3c7033bdfc718f7f5bb1df0 () Term)
(declare-fun FStar.Pervasives.st_trivial@tok () Term)

(declare-fun Tm_abs_89b21c42be5bc00d63e29f63ae20d4e2 (Term Term) Term)

; </end encoding let st_trivial>


; <Skipped new_effect { STATE_h ... }/>


; <Start encoding type FStar.Pervasives.result>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.result (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.result@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.V (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.V_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.V_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.V
(declare-fun FStar.Pervasives.V@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.E (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.E_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.E_e (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.E
(declare-fun FStar.Pervasives.E@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Err (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Err_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Err_msg (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Err
(declare-fun FStar.Pervasives.Err@tok () Term)
(declare-fun Tm_arrow_30908143640041985b9200e2fb38a259 () Term)
(declare-fun Tm_arrow_f8bb10130fea772e0f786d78a188c381 () Term)
(declare-fun Tm_arrow_93661c87034b0b64c4714dafbe2b02e6 () Term)

; <start constructor FStar.Pervasives.result>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.result ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
263)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Pervasives.result @x0))
 
;;no pats
:qid is-FStar.Pervasives.result))))

; </end constructor FStar.Pervasives.result>


; <start constructor FStar.Pervasives.V>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.V ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
270)
(= __@x0
(FStar.Pervasives.V (FStar.Pervasives.V_a __@x0)
(FStar.Pervasives.V_v __@x0)))))

; </end constructor FStar.Pervasives.V>


; <start constructor FStar.Pervasives.E>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.E ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
275)
(= __@x0
(FStar.Pervasives.E (FStar.Pervasives.E_a __@x0)
(FStar.Pervasives.E_e __@x0)))))

; </end constructor FStar.Pervasives.E>


; <start constructor FStar.Pervasives.Err>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Err ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
280)
(= __@x0
(FStar.Pervasives.Err (FStar.Pervasives.Err_a __@x0)
(FStar.Pervasives.Err_msg __@x0)))))

; </end constructor FStar.Pervasives.Err>


; </end encoding type FStar.Pervasives.result>


; <Start encoding val FStar.Pervasives.uu___is_V>

(declare-fun FStar.Pervasives.uu___is_V (Term Term) Term)
(declare-fun Tm_arrow_5cd1d0722a6a986faf6f8e557186fe24 () Term)
(declare-fun FStar.Pervasives.uu___is_V@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_V>


; <Skipped let uu___is_V/>


; <Start encoding val FStar.Pervasives.__proj__V__item__v>

(declare-fun Tm_refine_9db520b26a7f39c5a01493a3f375290d (Term) Term)
(declare-fun FStar.Pervasives.__proj__V__item__v (Term Term) Term)

(declare-fun Tm_arrow_1ea119bf213c016916a7095486e28467 () Term)
(declare-fun FStar.Pervasives.__proj__V__item__v@tok () Term)

; </end encoding val FStar.Pervasives.__proj__V__item__v>


; <Skipped let __proj__V__item__v/>


; <Start encoding val FStar.Pervasives.uu___is_E>

(declare-fun FStar.Pervasives.uu___is_E (Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_E@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_E>


; <Skipped let uu___is_E/>


; <Start encoding val FStar.Pervasives.__proj__E__item__e>

(declare-fun Tm_refine_95e1e2ee29104754cc3740f5575fc6e5 (Term) Term)
(declare-fun FStar.Pervasives.__proj__E__item__e (Term Term) Term)

(declare-fun Tm_arrow_19e73c373dbf3f9945c6fcfce8a07661 () Term)
(declare-fun FStar.Pervasives.__proj__E__item__e@tok () Term)

; </end encoding val FStar.Pervasives.__proj__E__item__e>


; <Skipped let __proj__E__item__e/>


; <Start encoding val FStar.Pervasives.uu___is_Err>

(declare-fun FStar.Pervasives.uu___is_Err (Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_Err@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Err>


; <Skipped let uu___is_Err/>


; <Start encoding val FStar.Pervasives.__proj__Err__item__msg>

(declare-fun Tm_refine_22fb403854eba07427f92e79848f9d9f (Term) Term)
(declare-fun FStar.Pervasives.__proj__Err__item__msg (Term Term) Term)

(declare-fun Tm_arrow_f7e3debb858e412c9497460c5187d5cd () Term)
(declare-fun FStar.Pervasives.__proj__Err__item__msg@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Err__item__msg>


; <Skipped let __proj__Err__item__msg/>


; <Start encoding let ex_pre>

(declare-fun FStar.Pervasives.ex_pre () Term)

; </end encoding let ex_pre>


; <Start encoding let ex_post'>

(declare-fun FStar.Pervasives.ex_post_ (Term Term) Term)

(declare-fun FStar.Pervasives.ex_post_@tok () Term)
(declare-fun Tm_refine_a4dcdeeacbcb04d05a6720f786918fd6 (Term Term) Term)
(declare-fun Tm_arrow_68b66d987e8a7bdf825af8b370553e65 (Term Term) Term)

; </end encoding let ex_post'>


; <Start encoding let ex_post>

(declare-fun FStar.Pervasives.ex_post (Term) Term)

(declare-fun FStar.Pervasives.ex_post@tok () Term)

; </end encoding let ex_post>


; <Start encoding let ex_wp>

(declare-fun FStar.Pervasives.ex_wp (Term) Term)

(declare-fun FStar.Pervasives.ex_wp@tok () Term)
(declare-fun Tm_arrow_58168e52ae0908fefec42cac825ecc69 (Term) Term)

; </end encoding let ex_wp>


; <Start encoding let ex_return>

(declare-fun FStar.Pervasives.ex_return (Term Term Term) Term)
(declare-fun Tm_arrow_375264f6f19b4e37d33ffba9f6b1c7d2 () Term)
(declare-fun FStar.Pervasives.ex_return@tok () Term)

; </end encoding let ex_return>


; <Start encoding let ex_bind_wp>

(declare-fun Tm_arrow_3eb2992a529511f5b0ff2fef4e4594ad (Term Term) Term)
(declare-fun FStar.Pervasives.ex_bind_wp (Term Term Term Term Term) Term)

(declare-fun Tm_arrow_1da2056f1a2fe3dc8db7decf5cbd5885 () Term)
(declare-fun FStar.Pervasives.ex_bind_wp@tok () Term)

(declare-fun Tm_arrow_ca5db633696caf7e0cd44c11654eed8b (Term) Term)
(declare-fun Tm_abs_c1d9037a5cc10cc07ba9b6a7a58728db (Term Term Term Term) Term)

; </end encoding let ex_bind_wp>


; <Start encoding let ex_if_then_else>

(declare-fun FStar.Pervasives.ex_if_then_else (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_08bd7ce530cc6e8b4a3f8dadbd0806b0 () Term)
(declare-fun FStar.Pervasives.ex_if_then_else@tok () Term)

; </end encoding let ex_if_then_else>


; <Start encoding let ex_ite_wp>

(declare-fun FStar.Pervasives.ex_ite_wp (Term Term Term) Term)
(declare-fun Tm_arrow_c2a8c761b16a75376b24262cd8c50369 () Term)
(declare-fun FStar.Pervasives.ex_ite_wp@tok () Term)

; </end encoding let ex_ite_wp>


; <Start encoding let ex_stronger>

(declare-fun FStar.Pervasives.ex_stronger (Term Term Term) Term)
(declare-fun Tm_arrow_1376d97b5d43e7d77d56729e2a3e04af () Term)
(declare-fun FStar.Pervasives.ex_stronger@tok () Term)

; </end encoding let ex_stronger>


; <Start encoding let ex_close_wp>


(declare-fun FStar.Pervasives.ex_close_wp (Term Term Term Term) Term)

(declare-fun Tm_arrow_814af0adff92aa08c5b8b0951bcb1959 () Term)
(declare-fun FStar.Pervasives.ex_close_wp@tok () Term)


; </end encoding let ex_close_wp>


; <Start encoding let ex_trivial>

(declare-fun FStar.Pervasives.ex_trivial (Term Term) Term)
(declare-fun Tm_arrow_ee4a787765920b0cb4357a47a0d3ac5c () Term)
(declare-fun FStar.Pervasives.ex_trivial@tok () Term)

(declare-fun Tm_abs_5cc223716d095f4545f0dcc745acad5d (Term) Term)

; </end encoding let ex_trivial>


; <Skipped new_effect { EXN ... }/>


; <Skipped effect Exn a pre post = FStar.Pervasives.EXN a/>


; <Start encoding let lift_div_exn>

(declare-fun FStar.Pervasives.lift_div_exn (Term Term Term) Term)
(declare-fun Tm_arrow_8196682216f286f6fe3a7dffb3de7d02 () Term)
(declare-fun FStar.Pervasives.lift_div_exn@tok () Term)

(declare-fun Tm_abs_c2b605ddd5d1991642baf5762d2b1dc5 (Term Term) Term)

; </end encoding let lift_div_exn>


; <Skipped sub_effect DIV ~> EXN/>


; <Skipped effect Ex a = FStar.Pervasives.Exn a/>


; <Start encoding let all_pre_h>

(declare-fun FStar.Pervasives.all_pre_h (Term) Term)

(declare-fun FStar.Pervasives.all_pre_h@tok () Term)


; </end encoding let all_pre_h>


; <Start encoding let all_post_h'>

(declare-fun FStar.Pervasives.all_post_h_ (Term Term Term) Term)

(declare-fun FStar.Pervasives.all_post_h_@tok () Term)

(declare-fun Tm_arrow_fc269489cb2e24a10c7710a1f7f9d269 (Term Term Term) Term)

; </end encoding let all_post_h'>


; <Start encoding let all_post_h>

(declare-fun FStar.Pervasives.all_post_h (Term Term) Term)

(declare-fun FStar.Pervasives.all_post_h@tok () Term)

; </end encoding let all_post_h>


; <Start encoding let all_wp_h>

(declare-fun FStar.Pervasives.all_wp_h (Term Term) Term)

(declare-fun FStar.Pervasives.all_wp_h@tok () Term)
(declare-fun Tm_arrow_1cd90c71d90a216d9fb0ba0321a1d3b5 (Term Term) Term)

; </end encoding let all_wp_h>


; <Start encoding let all_return>

(declare-fun FStar.Pervasives.all_return (Term Term Term Term) Term)

(declare-fun Tm_arrow_3f61557667800fb54cc62e48a5201f9d () Term)
(declare-fun FStar.Pervasives.all_return@tok () Term)


; </end encoding let all_return>


; <Start encoding let all_bind_wp>

(declare-fun Tm_arrow_b567b509414635f00096b9b1c3e30b57 (Term Term Term) Term)
(declare-fun FStar.Pervasives.all_bind_wp (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_6ac18e25eb49f55ae0ce9c14679ecc22 () Term)
(declare-fun FStar.Pervasives.all_bind_wp@tok () Term)

(declare-fun Tm_arrow_59cac8a9b1ae3aa9511b8a867f8e934e (Term Term) Term)
(declare-fun Tm_abs_35ddc99cefc0079215f6f6ab3c58856d (Term Term Term Term Term) Term)

; </end encoding let all_bind_wp>


; <Start encoding let all_if_then_else>

(declare-fun FStar.Pervasives.all_if_then_else (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_491eee2c8dc4eab4d420326a8285d2c4 () Term)
(declare-fun FStar.Pervasives.all_if_then_else@tok () Term)

; </end encoding let all_if_then_else>


; <Start encoding let all_ite_wp>

(declare-fun FStar.Pervasives.all_ite_wp (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_20fdb4e6d0c32f949f55e39a059913a7 () Term)
(declare-fun FStar.Pervasives.all_ite_wp@tok () Term)

; </end encoding let all_ite_wp>


; <Start encoding let all_stronger>

(declare-fun FStar.Pervasives.all_stronger (Term Term Term Term) Term)
(declare-fun Tm_arrow_073b21d0ec8edf2dda32907b45ec5f68 () Term)
(declare-fun FStar.Pervasives.all_stronger@tok () Term)

; </end encoding let all_stronger>


; <Start encoding let all_close_wp>


(declare-fun FStar.Pervasives.all_close_wp (Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_803d195802308e8beadf04438d3a6508 () Term)
(declare-fun FStar.Pervasives.all_close_wp@tok () Term)


; </end encoding let all_close_wp>


; <Start encoding let all_trivial>

(declare-fun FStar.Pervasives.all_trivial (Term Term Term) Term)
(declare-fun Tm_arrow_957927b0d25001784693eee8b2182308 () Term)
(declare-fun FStar.Pervasives.all_trivial@tok () Term)

(declare-fun Tm_abs_22e463dbd987016e31d6bc67025a7cd9 (Term Term) Term)

; </end encoding let all_trivial>


; <Skipped new_effect { ALL_h ... }/>


; <Start encoding val FStar.Pervasives.inversion>

(declare-fun FStar.Pervasives.inversion (Term) Term)

(declare-fun FStar.Pervasives.inversion@tok () Term)

; </end encoding val FStar.Pervasives.inversion>


; <Start encoding val FStar.Pervasives.allow_inversion>

(declare-fun FStar.Pervasives.allow_inversion (Term) Term)
(declare-fun Tm_refine_363615bee79fae5066b7c8bd06c286d0 (Term) Term)
(declare-fun Tm_arrow_bcab9cce464ec0f76562bc48c17ba410 () Term)
(declare-fun FStar.Pervasives.allow_inversion@tok () Term)


; </end encoding val FStar.Pervasives.allow_inversion>


; <Start encoding val FStar.Pervasives.invertOption>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.invertOption (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.invertOption@tok () Term)

; </end encoding val FStar.Pervasives.invertOption>


; <Start encoding type FStar.Pervasives.either>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.either (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.either@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Inl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Inl
(declare-fun FStar.Pervasives.Inl@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Inr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Inr
(declare-fun FStar.Pervasives.Inr@tok () Term)
(declare-fun Tm_arrow_065da0adeba0c4ae0da1476ececee84c () Term)
(declare-fun Tm_arrow_c883938642e6d97d79c975d8d94b4aac () Term)

; <start constructor FStar.Pervasives.either>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.either ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
402)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(FStar.Pervasives.either @x0
@x1))
 
;;no pats
:qid is-FStar.Pervasives.either))))

; </end constructor FStar.Pervasives.either>


; <start constructor FStar.Pervasives.Inl>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Inl ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
409)
(= __@x0
(FStar.Pervasives.Inl (FStar.Pervasives.Inl_a __@x0)
(FStar.Pervasives.Inl_b __@x0)
(FStar.Pervasives.Inl_v __@x0)))))

; </end constructor FStar.Pervasives.Inl>


; <start constructor FStar.Pervasives.Inr>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Inr ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
414)
(= __@x0
(FStar.Pervasives.Inr (FStar.Pervasives.Inr_a __@x0)
(FStar.Pervasives.Inr_b __@x0)
(FStar.Pervasives.Inr_v __@x0)))))

; </end constructor FStar.Pervasives.Inr>


; </end encoding type FStar.Pervasives.either>


; <Start encoding assume FStar.Pervasives.either__uu___haseq>


; </end encoding assume FStar.Pervasives.either__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Inl>

(declare-fun FStar.Pervasives.uu___is_Inl (Term Term Term) Term)
(declare-fun Tm_arrow_af0c68f1e39d4d6020c0873b16730c7d () Term)
(declare-fun FStar.Pervasives.uu___is_Inl@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Inl>


; <Skipped let uu___is_Inl/>


; <Start encoding val FStar.Pervasives.__proj__Inl__item__v>

(declare-fun Tm_refine_85e0cc884f8457202f90cd77f23733ba (Term Term) Term)
(declare-fun FStar.Pervasives.__proj__Inl__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_a80e0750277867ba1a434ad3bba8702d () Term)
(declare-fun FStar.Pervasives.__proj__Inl__item__v@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Inl__item__v>


; <Skipped let __proj__Inl__item__v/>


; <Start encoding val FStar.Pervasives.uu___is_Inr>

(declare-fun FStar.Pervasives.uu___is_Inr (Term Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_Inr@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Inr>


; <Skipped let uu___is_Inr/>


; <Start encoding val FStar.Pervasives.__proj__Inr__item__v>

(declare-fun Tm_refine_8f1f5f564dae90240db429de2eb41517 (Term Term) Term)
(declare-fun FStar.Pervasives.__proj__Inr__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_df618db6b42762940f198036c8a56200 () Term)
(declare-fun FStar.Pervasives.__proj__Inr__item__v@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Inr__item__v>


; <Skipped let __proj__Inr__item__v/>


; <Start encoding let dfst>


(declare-fun FStar.Pervasives.dfst (Term Term Term) Term)


(declare-fun FStar.Pervasives.dfst@tok () Term)


; </end encoding let dfst>


; <Start encoding let dsnd>


(declare-fun FStar.Pervasives.dsnd (Term Term Term) Term)


(declare-fun FStar.Pervasives.dsnd@tok () Term)


; </end encoding let dsnd>


; <Start encoding type FStar.Pervasives.dtuple3>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple3@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple3 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__3 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Mkdtuple3
(declare-fun FStar.Pervasives.Mkdtuple3@tok () Term)

(declare-fun Tm_arrow_0b6559e6ff3addf84b0c2880affbb335 (Term Term) Term)




(declare-fun Tm_arrow_8423f67df62f9e824c55756f9e26058d () Term)

; <start constructor FStar.Pervasives.dtuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
450)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple3 @x0
@x1
@x2))
 
;;no pats
:qid is-FStar.Pervasives.dtuple3))))

; </end constructor FStar.Pervasives.dtuple3>


; <start constructor FStar.Pervasives.Mkdtuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
461)
(= __@x0
(FStar.Pervasives.Mkdtuple3 (FStar.Pervasives.Mkdtuple3_a __@x0)
(FStar.Pervasives.Mkdtuple3_b __@x0)
(FStar.Pervasives.Mkdtuple3_c __@x0)
(FStar.Pervasives.Mkdtuple3__1 __@x0)
(FStar.Pervasives.Mkdtuple3__2 __@x0)
(FStar.Pervasives.Mkdtuple3__3 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple3>


; </end encoding type FStar.Pervasives.dtuple3>


; <Start encoding assume FStar.Pervasives.dtuple3__uu___haseq>




; </end encoding assume FStar.Pervasives.dtuple3__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Mkdtuple3>



(declare-fun FStar.Pervasives.uu___is_Mkdtuple3 (Term Term Term Term) Term)


(declare-fun Tm_arrow_70452cb82cd0a282ca9a2dbeb54c1b04 () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple3@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Mkdtuple3>


; <Skipped let uu___is_Mkdtuple3/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple3__item___1>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___1 (Term Term Term Term) Term)


(declare-fun Tm_arrow_255f0cfe499b1d2e9836e157bce1dba3 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___1@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple3__item___1>


; <Skipped let __proj__Mkdtuple3__item___1/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple3__item___2>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___2 (Term Term Term Term) Term)


(declare-fun Tm_arrow_ea1ded11f7d194a26e812f407333a011 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___2@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple3__item___2>


; <Skipped let __proj__Mkdtuple3__item___2/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple3__item___3>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___3 (Term Term Term Term) Term)


(declare-fun Tm_arrow_1d7ad5cfa0fff643640e3f74466d283e () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___3@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple3__item___3>


; <Skipped let __proj__Mkdtuple3__item___3/>


; <Start encoding type FStar.Pervasives.dtuple4>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple4 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple4@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple4 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__4 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Mkdtuple4
(declare-fun FStar.Pervasives.Mkdtuple4@tok () Term)


(declare-fun Tm_arrow_af8eda99ba3685403be22a88669dcb35 (Term Term Term) Term)






(declare-fun Tm_arrow_cef44a6056754f192c2446237c4c1408 () Term)

; <start constructor FStar.Pervasives.dtuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
519)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple4 @x0
@x1
@x2
@x3))
 
;;no pats
:qid is-FStar.Pervasives.dtuple4))))

; </end constructor FStar.Pervasives.dtuple4>


; <start constructor FStar.Pervasives.Mkdtuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
532)
(= __@x0
(FStar.Pervasives.Mkdtuple4 (FStar.Pervasives.Mkdtuple4_a __@x0)
(FStar.Pervasives.Mkdtuple4_b __@x0)
(FStar.Pervasives.Mkdtuple4_c __@x0)
(FStar.Pervasives.Mkdtuple4_d __@x0)
(FStar.Pervasives.Mkdtuple4__1 __@x0)
(FStar.Pervasives.Mkdtuple4__2 __@x0)
(FStar.Pervasives.Mkdtuple4__3 __@x0)
(FStar.Pervasives.Mkdtuple4__4 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple4>


; </end encoding type FStar.Pervasives.dtuple4>


; <Start encoding assume FStar.Pervasives.dtuple4__uu___haseq>





; </end encoding assume FStar.Pervasives.dtuple4__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Mkdtuple4>




(declare-fun FStar.Pervasives.uu___is_Mkdtuple4 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_76a226dc2cea2ddd4e4258637fc95e5b () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple4@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Mkdtuple4>


; <Skipped let uu___is_Mkdtuple4/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___1>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___1 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_1da4d60ab69f411b912e76cc25e77965 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___1@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___1>


; <Skipped let __proj__Mkdtuple4__item___1/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___2>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___2 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_a86867091548f3d7d3ca1cb8b0458b9f () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___2@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___2>


; <Skipped let __proj__Mkdtuple4__item___2/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___3>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___3 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_ee72552fcc293405aa0e854ba26f27ac () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___3@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___3>


; <Skipped let __proj__Mkdtuple4__item___3/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___4>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___4 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_6c79def96aa5d5d9eb9555c48dd9ebb6 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___4@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___4>


; <Skipped let __proj__Mkdtuple4__item___4/>


; <Start encoding type FStar.Pervasives.dtuple5>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple5 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple5@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple5 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__5 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Mkdtuple5
(declare-fun FStar.Pervasives.Mkdtuple5@tok () Term)



(declare-fun Tm_arrow_e2051b23ee191036cd2c8f08b57577cc (Term Term Term Term) Term)








(declare-fun Tm_arrow_7c47a0b67fa3d6e69e51a1ade2982e74 () Term)

; <start constructor FStar.Pervasives.dtuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
626)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple5 @x0
@x1
@x2
@x3
@x4))
 
;;no pats
:qid is-FStar.Pervasives.dtuple5))))

; </end constructor FStar.Pervasives.dtuple5>


; <start constructor FStar.Pervasives.Mkdtuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
641)
(= __@x0
(FStar.Pervasives.Mkdtuple5 (FStar.Pervasives.Mkdtuple5_a __@x0)
(FStar.Pervasives.Mkdtuple5_b __@x0)
(FStar.Pervasives.Mkdtuple5_c __@x0)
(FStar.Pervasives.Mkdtuple5_d __@x0)
(FStar.Pervasives.Mkdtuple5_e __@x0)
(FStar.Pervasives.Mkdtuple5__1 __@x0)
(FStar.Pervasives.Mkdtuple5__2 __@x0)
(FStar.Pervasives.Mkdtuple5__3 __@x0)
(FStar.Pervasives.Mkdtuple5__4 __@x0)
(FStar.Pervasives.Mkdtuple5__5 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple5>


; </end encoding type FStar.Pervasives.dtuple5>


; <Start encoding assume FStar.Pervasives.dtuple5__uu___haseq>






; </end encoding assume FStar.Pervasives.dtuple5__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Mkdtuple5>





(declare-fun FStar.Pervasives.uu___is_Mkdtuple5 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_790317d9d2afaf2417875fd8f65cee9f () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple5@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Mkdtuple5>


; <Skipped let uu___is_Mkdtuple5/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___1>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___1 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_855676d3a54fc2cdf0dfa3ac2f15fdad () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___1@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___1>


; <Skipped let __proj__Mkdtuple5__item___1/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___2>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___2 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_3c181aa1af161d84af20412908ff5981 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___2@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___2>


; <Skipped let __proj__Mkdtuple5__item___2/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___3>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___3 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_cc152ea4c314cfd6854de94e70041031 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___3@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___3>


; <Skipped let __proj__Mkdtuple5__item___3/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___4>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___4 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_6a05465acf4f8d1b8f43fd30077a772a () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___4@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___4>


; <Skipped let __proj__Mkdtuple5__item___4/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___5>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___5 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_d5d61b48d54646c5c411627b3a20c98f () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___5@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___5>


; <Skipped let __proj__Mkdtuple5__item___5/>


; <Start encoding let ignore>

(declare-fun FStar.Pervasives.ignore (Term Term) Term)
(declare-fun Tm_arrow_962476a7eea46a6ffc9b658c6d8fbc71 () Term)
(declare-fun FStar.Pervasives.ignore@tok () Term)

; </end encoding let ignore>


; <Start encoding val FStar.Pervasives.false_elim>

(declare-fun Tm_refine_f1ecc6ab6882a651504f328937700647 () Term)
(declare-fun FStar.Pervasives.false_elim (Term Term) Term)

(declare-fun Tm_arrow_7636fbfab5cd88ba06f60c10ea8caef2 () Term)
(declare-fun FStar.Pervasives.false_elim@tok () Term)

; </end encoding val FStar.Pervasives.false_elim>


; <Start encoding type FStar.Pervasives.__internal_ocaml_attributes>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.__internal_ocaml_attributes () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingShow () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.PpxDerivingShow
(declare-fun FStar.Pervasives.PpxDerivingShow@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingShowConstant (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.PpxDerivingShowConstant__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.PpxDerivingShowConstant
(declare-fun FStar.Pervasives.PpxDerivingShowConstant@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingYoJson () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.PpxDerivingYoJson
(declare-fun FStar.Pervasives.PpxDerivingYoJson@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CInline () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CInline
(declare-fun FStar.Pervasives.CInline@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Substitute () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Substitute
(declare-fun FStar.Pervasives.Substitute@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Gc () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Gc
(declare-fun FStar.Pervasives.Gc@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Comment (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Comment__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Comment
(declare-fun FStar.Pervasives.Comment@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CPrologue (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CPrologue__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CPrologue
(declare-fun FStar.Pervasives.CPrologue@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CEpilogue (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CEpilogue__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CEpilogue
(declare-fun FStar.Pervasives.CEpilogue@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CConst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CConst__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CConst
(declare-fun FStar.Pervasives.CConst@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CCConv (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CCConv__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CCConv
(declare-fun FStar.Pervasives.CCConv@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CAbstractStruct () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CAbstractStruct
(declare-fun FStar.Pervasives.CAbstractStruct@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CIfDef () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CIfDef
(declare-fun FStar.Pervasives.CIfDef@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CMacro () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CMacro
(declare-fun FStar.Pervasives.CMacro@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CNoInline () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CNoInline
(declare-fun FStar.Pervasives.CNoInline@tok () Term)
(declare-fun Tm_arrow_a25c6dbdd7c43412e925069991c0ef48 () Term)






; <start constructor FStar.Pervasives.__internal_ocaml_attributes>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.__internal_ocaml_attributes ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
775)
(= __@x0
FStar.Pervasives.__internal_ocaml_attributes)))

; </end constructor FStar.Pervasives.__internal_ocaml_attributes>


; <start constructor FStar.Pervasives.PpxDerivingShow>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingShow ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
781)
(= __@x0
FStar.Pervasives.PpxDerivingShow)))

; </end constructor FStar.Pervasives.PpxDerivingShow>


; <start constructor FStar.Pervasives.PpxDerivingShowConstant>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingShowConstant ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
783)
(= __@x0
(FStar.Pervasives.PpxDerivingShowConstant (FStar.Pervasives.PpxDerivingShowConstant__0 __@x0)))))

; </end constructor FStar.Pervasives.PpxDerivingShowConstant>


; <start constructor FStar.Pervasives.PpxDerivingYoJson>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingYoJson ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
788)
(= __@x0
FStar.Pervasives.PpxDerivingYoJson)))

; </end constructor FStar.Pervasives.PpxDerivingYoJson>


; <start constructor FStar.Pervasives.CInline>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CInline ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
790)
(= __@x0
FStar.Pervasives.CInline)))

; </end constructor FStar.Pervasives.CInline>


; <start constructor FStar.Pervasives.Substitute>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Substitute ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
792)
(= __@x0
FStar.Pervasives.Substitute)))

; </end constructor FStar.Pervasives.Substitute>


; <start constructor FStar.Pervasives.Gc>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Gc ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
794)
(= __@x0
FStar.Pervasives.Gc)))

; </end constructor FStar.Pervasives.Gc>


; <start constructor FStar.Pervasives.Comment>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Comment ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
796)
(= __@x0
(FStar.Pervasives.Comment (FStar.Pervasives.Comment__0 __@x0)))))

; </end constructor FStar.Pervasives.Comment>


; <start constructor FStar.Pervasives.CPrologue>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CPrologue ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
801)
(= __@x0
(FStar.Pervasives.CPrologue (FStar.Pervasives.CPrologue__0 __@x0)))))

; </end constructor FStar.Pervasives.CPrologue>


; <start constructor FStar.Pervasives.CEpilogue>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CEpilogue ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
806)
(= __@x0
(FStar.Pervasives.CEpilogue (FStar.Pervasives.CEpilogue__0 __@x0)))))

; </end constructor FStar.Pervasives.CEpilogue>


; <start constructor FStar.Pervasives.CConst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CConst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
811)
(= __@x0
(FStar.Pervasives.CConst (FStar.Pervasives.CConst__0 __@x0)))))

; </end constructor FStar.Pervasives.CConst>


; <start constructor FStar.Pervasives.CCConv>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CCConv ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
816)
(= __@x0
(FStar.Pervasives.CCConv (FStar.Pervasives.CCConv__0 __@x0)))))

; </end constructor FStar.Pervasives.CCConv>


; <start constructor FStar.Pervasives.CAbstractStruct>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CAbstractStruct ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
821)
(= __@x0
FStar.Pervasives.CAbstractStruct)))

; </end constructor FStar.Pervasives.CAbstractStruct>


; <start constructor FStar.Pervasives.CIfDef>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CIfDef ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
823)
(= __@x0
FStar.Pervasives.CIfDef)))

; </end constructor FStar.Pervasives.CIfDef>


; <start constructor FStar.Pervasives.CMacro>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CMacro ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
825)
(= __@x0
FStar.Pervasives.CMacro)))

; </end constructor FStar.Pervasives.CMacro>


; <start constructor FStar.Pervasives.CNoInline>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CNoInline ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
827)
(= __@x0
FStar.Pervasives.CNoInline)))

; </end constructor FStar.Pervasives.CNoInline>


; </end encoding type FStar.Pervasives.__internal_ocaml_attributes>


; <Start encoding assume FStar.Pervasives.__internal_ocaml_attributes__uu___haseq>


; </end encoding assume FStar.Pervasives.__internal_ocaml_attributes__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_PpxDerivingShow>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShow (Term) Term)
(declare-fun Tm_arrow_89dc0c243f5e74d4fefc48cfe123db41 () Term)
(declare-fun FStar.Pervasives.uu___is_PpxDerivingShow@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_PpxDerivingShow>


; <Skipped let uu___is_PpxDerivingShow/>


; <Start encoding val FStar.Pervasives.uu___is_PpxDerivingShowConstant>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShowConstant (Term) Term)

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShowConstant@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_PpxDerivingShowConstant>


; <Skipped let uu___is_PpxDerivingShowConstant/>


; <Start encoding val FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0>

(declare-fun Tm_refine_564db2f0aa0878b4d96c60508be3dd36 () Term)
(declare-fun FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0 (Term) Term)

(declare-fun Tm_arrow_dbb84ef8131159481071b6d6a41b7f31 () Term)
(declare-fun FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0>


; <Skipped let __proj__PpxDerivingShowConstant__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_PpxDerivingYoJson>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingYoJson (Term) Term)

(declare-fun FStar.Pervasives.uu___is_PpxDerivingYoJson@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_PpxDerivingYoJson>


; <Skipped let uu___is_PpxDerivingYoJson/>


; <Start encoding val FStar.Pervasives.uu___is_CInline>

(declare-fun FStar.Pervasives.uu___is_CInline (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CInline@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CInline>


; <Skipped let uu___is_CInline/>


; <Start encoding val FStar.Pervasives.uu___is_Substitute>

(declare-fun FStar.Pervasives.uu___is_Substitute (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Substitute@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Substitute>


; <Skipped let uu___is_Substitute/>


; <Start encoding val FStar.Pervasives.uu___is_Gc>

(declare-fun FStar.Pervasives.uu___is_Gc (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Gc@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Gc>


; <Skipped let uu___is_Gc/>


; <Start encoding val FStar.Pervasives.uu___is_Comment>

(declare-fun FStar.Pervasives.uu___is_Comment (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Comment@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Comment>


; <Skipped let uu___is_Comment/>


; <Start encoding val FStar.Pervasives.__proj__Comment__item___0>

(declare-fun Tm_refine_c53089e2d20d1b0f5a267296ac8e45f0 () Term)
(declare-fun FStar.Pervasives.__proj__Comment__item___0 (Term) Term)

(declare-fun Tm_arrow_d4c2bbf4fb852b3f4b9961c7cbc2f3a2 () Term)
(declare-fun FStar.Pervasives.__proj__Comment__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Comment__item___0>


; <Skipped let __proj__Comment__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CPrologue>

(declare-fun FStar.Pervasives.uu___is_CPrologue (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CPrologue@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CPrologue>


; <Skipped let uu___is_CPrologue/>


; <Start encoding val FStar.Pervasives.__proj__CPrologue__item___0>

(declare-fun Tm_refine_ac46c1a2a06ce46a180e0eda48004c47 () Term)
(declare-fun FStar.Pervasives.__proj__CPrologue__item___0 (Term) Term)

(declare-fun Tm_arrow_929b9daa0a2a2e99e3571b146c52feaf () Term)
(declare-fun FStar.Pervasives.__proj__CPrologue__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CPrologue__item___0>


; <Skipped let __proj__CPrologue__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CEpilogue>

(declare-fun FStar.Pervasives.uu___is_CEpilogue (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CEpilogue@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CEpilogue>


; <Skipped let uu___is_CEpilogue/>


; <Start encoding val FStar.Pervasives.__proj__CEpilogue__item___0>

(declare-fun Tm_refine_47384bef739d1f0729fd782d351dc9a5 () Term)
(declare-fun FStar.Pervasives.__proj__CEpilogue__item___0 (Term) Term)

(declare-fun Tm_arrow_e37361b66babb46a30183ad1ff072689 () Term)
(declare-fun FStar.Pervasives.__proj__CEpilogue__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CEpilogue__item___0>


; <Skipped let __proj__CEpilogue__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CConst>

(declare-fun FStar.Pervasives.uu___is_CConst (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CConst@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CConst>


; <Skipped let uu___is_CConst/>


; <Start encoding val FStar.Pervasives.__proj__CConst__item___0>

(declare-fun Tm_refine_5036c6b2983454bc3afeffcba3f00f50 () Term)
(declare-fun FStar.Pervasives.__proj__CConst__item___0 (Term) Term)

(declare-fun Tm_arrow_2d0b7639551b88b0df758d7b36c8f77a () Term)
(declare-fun FStar.Pervasives.__proj__CConst__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CConst__item___0>


; <Skipped let __proj__CConst__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CCConv>

(declare-fun FStar.Pervasives.uu___is_CCConv (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CCConv@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CCConv>


; <Skipped let uu___is_CCConv/>


; <Start encoding val FStar.Pervasives.__proj__CCConv__item___0>

(declare-fun Tm_refine_2c4510f48649a66c3dca1fc9e3a2d320 () Term)
(declare-fun FStar.Pervasives.__proj__CCConv__item___0 (Term) Term)

(declare-fun Tm_arrow_b7e884ec94708f2b05c42d4d8834eac6 () Term)
(declare-fun FStar.Pervasives.__proj__CCConv__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CCConv__item___0>


; <Skipped let __proj__CCConv__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CAbstractStruct>

(declare-fun FStar.Pervasives.uu___is_CAbstractStruct (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CAbstractStruct@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CAbstractStruct>


; <Skipped let uu___is_CAbstractStruct/>


; <Start encoding val FStar.Pervasives.uu___is_CIfDef>

(declare-fun FStar.Pervasives.uu___is_CIfDef (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CIfDef@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CIfDef>


; <Skipped let uu___is_CIfDef/>


; <Start encoding val FStar.Pervasives.uu___is_CMacro>

(declare-fun FStar.Pervasives.uu___is_CMacro (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CMacro@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CMacro>


; <Skipped let uu___is_CMacro/>


; <Start encoding val FStar.Pervasives.uu___is_CNoInline>

(declare-fun FStar.Pervasives.uu___is_CNoInline (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CNoInline@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CNoInline>


; <Skipped let uu___is_CNoInline/>


; <Start encoding val FStar.Pervasives.inline_let>

(declare-fun FStar.Pervasives.inline_let (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.inline_let>


; <Start encoding val FStar.Pervasives.rename_let>

(declare-fun FStar.Pervasives.rename_let (Term) Term)

(declare-fun FStar.Pervasives.rename_let@tok () Term)

; </end encoding val FStar.Pervasives.rename_let>


; <Start encoding val FStar.Pervasives.plugin>

(declare-fun FStar.Pervasives.plugin (Term) Term)
(declare-fun Tm_arrow_f12575a0ee171a8be16a63e3359708f8 () Term)
(declare-fun FStar.Pervasives.plugin@tok () Term)

; </end encoding val FStar.Pervasives.plugin>


; <Start encoding val FStar.Pervasives.tcnorm>

(declare-fun FStar.Pervasives.tcnorm (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.tcnorm>


; <Start encoding val FStar.Pervasives.must_erase_for_extraction>

(declare-fun FStar.Pervasives.must_erase_for_extraction (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.must_erase_for_extraction>


; <Start encoding val FStar.Pervasives.dm4f_bind_range>

(declare-fun FStar.Pervasives.dm4f_bind_range (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.dm4f_bind_range>


; <Start encoding val FStar.Pervasives.expect_failure>

(declare-fun FStar.Pervasives.expect_failure (Term) Term)

(declare-fun FStar.Pervasives.expect_failure@tok () Term)

; </end encoding val FStar.Pervasives.expect_failure>


; <Start encoding val FStar.Pervasives.expect_lax_failure>

(declare-fun FStar.Pervasives.expect_lax_failure (Term) Term)

(declare-fun FStar.Pervasives.expect_lax_failure@tok () Term)

; </end encoding val FStar.Pervasives.expect_lax_failure>


; <Start encoding val FStar.Pervasives.tcdecltime>

(declare-fun FStar.Pervasives.tcdecltime (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.tcdecltime>


; <Start encoding val FStar.Pervasives.unifier_hint_injective>

(declare-fun FStar.Pervasives.unifier_hint_injective (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unifier_hint_injective>


; <Start encoding val FStar.Pervasives.strict_on_arguments>

(declare-fun FStar.Pervasives.strict_on_arguments (Term) Term)

(declare-fun FStar.Pervasives.strict_on_arguments@tok () Term)

; </end encoding val FStar.Pervasives.strict_on_arguments>


; <Start encoding val FStar.Pervasives.resolve_implicits>

(declare-fun FStar.Pervasives.resolve_implicits (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.resolve_implicits>


; <Start encoding val FStar.Pervasives.override_resolve_implicits_handler>

(declare-fun FStar.Pervasives.override_resolve_implicits_handler (Term Term Term) Term)
(declare-fun Tm_arrow_93e6548cfc250f7cc25301579d62a018 () Term)
(declare-fun FStar.Pervasives.override_resolve_implicits_handler@tok () Term)

; </end encoding val FStar.Pervasives.override_resolve_implicits_handler>


; <Start encoding val FStar.Pervasives.handle_smt_goals>

(declare-fun FStar.Pervasives.handle_smt_goals (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.handle_smt_goals>


; <Start encoding val FStar.Pervasives.erasable>

(declare-fun FStar.Pervasives.erasable (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.erasable>


; <Start encoding val FStar.Pervasives.commute_nested_matches>

(declare-fun FStar.Pervasives.commute_nested_matches (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.commute_nested_matches>


; <Start encoding val FStar.Pervasives.noextract_to>

(declare-fun FStar.Pervasives.noextract_to (Term) Term)

(declare-fun FStar.Pervasives.noextract_to@tok () Term)

; </end encoding val FStar.Pervasives.noextract_to>


; <Start encoding val FStar.Pervasives.normalize_for_extraction>

(declare-fun FStar.Pervasives.normalize_for_extraction (Term) Term)
(declare-fun Tm_arrow_5a371649389ebd695db0478470787cef () Term)
(declare-fun FStar.Pervasives.normalize_for_extraction@tok () Term)

; </end encoding val FStar.Pervasives.normalize_for_extraction>


; <Start encoding val FStar.Pervasives.ite_soundness_by>

(declare-fun FStar.Pervasives.ite_soundness_by (Term) Term)
(declare-fun Tm_arrow_0c55530a575bf8e94add46ffb548393c () Term)
(declare-fun FStar.Pervasives.ite_soundness_by@tok () Term)

; </end encoding val FStar.Pervasives.ite_soundness_by>


; <Start encoding val FStar.Pervasives.default_effect>

(declare-fun FStar.Pervasives.default_effect (Term) Term)

(declare-fun FStar.Pervasives.default_effect@tok () Term)

; </end encoding val FStar.Pervasives.default_effect>


; <Start encoding val FStar.Pervasives.top_level_effect>

(declare-fun FStar.Pervasives.top_level_effect (Term) Term)

(declare-fun FStar.Pervasives.top_level_effect@tok () Term)

; </end encoding val FStar.Pervasives.top_level_effect>


; <Start encoding val FStar.Pervasives.effect_param>

(declare-fun FStar.Pervasives.effect_param (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.effect_param>


; <Start encoding val FStar.Pervasives.bind_has_range_args>

(declare-fun FStar.Pervasives.bind_has_range_args (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.bind_has_range_args>


; <Start encoding val FStar.Pervasives.primitive_extraction>

(declare-fun FStar.Pervasives.primitive_extraction (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.primitive_extraction>


; <Start encoding val FStar.Pervasives.extract_as_impure_effect>

(declare-fun FStar.Pervasives.extract_as_impure_effect (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.extract_as_impure_effect>


; <Start encoding val FStar.Pervasives.strictly_positive>

(declare-fun FStar.Pervasives.strictly_positive (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.strictly_positive>


; <Start encoding val FStar.Pervasives.unused>

(declare-fun FStar.Pervasives.unused (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unused>


; <Start encoding val FStar.Pervasives.no_auto_projectors>

(declare-fun FStar.Pervasives.no_auto_projectors (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.no_auto_projectors>


; <Start encoding val FStar.Pervasives.no_auto_projectors_decls>

(declare-fun FStar.Pervasives.no_auto_projectors_decls (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.no_auto_projectors_decls>


; <Start encoding val FStar.Pervasives.no_subtyping>

(declare-fun FStar.Pervasives.no_subtyping (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.no_subtyping>


; <Start encoding val FStar.Pervasives.admit_termination>

(declare-fun FStar.Pervasives.admit_termination (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.admit_termination>


; <Start encoding val FStar.Pervasives.singleton>

(declare-fun FStar.Pervasives.singleton (Term Term) Term)
(declare-fun Tm_refine_2fbd657fe85bcb2423f9c7e5f9b3bcb5 (Term Term) Term)
(declare-fun Tm_arrow_9cdb4ebd85da757e86217b6fb07ef9fc () Term)
(declare-fun FStar.Pervasives.singleton@tok () Term)


; </end encoding val FStar.Pervasives.singleton>


; <Start encoding let eqtype_as_type>

(declare-fun FStar.Pervasives.eqtype_as_type (Term) Term)
(declare-fun Tm_arrow_7e9afc6da5407011473323ad80ff51bf () Term)
(declare-fun FStar.Pervasives.eqtype_as_type@tok () Term)

; </end encoding let eqtype_as_type>


; <Start encoding let coerce_eq>

(declare-fun Tm_refine_0dee8cb03258a67c2f7ec66427696212 (Term Term) Term)
(declare-fun FStar.Pervasives.coerce_eq (Term Term Term Term) Term)

(declare-fun Tm_arrow_f44173fb14fa6046eedce5f32cb8aae8 () Term)
(declare-fun FStar.Pervasives.coerce_eq@tok () Term)


; </end encoding let coerce_eq>


; <Start encoding val FStar.Pervasives.coercion>

(declare-fun FStar.Pervasives.coercion (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.coercion>


; <Start encoding val FStar.Pervasives.desugar_of_variant_record>

(declare-fun FStar.Pervasives.desugar_of_variant_record (Term) Term)

(declare-fun FStar.Pervasives.desugar_of_variant_record@tok () Term)

; </end encoding val FStar.Pervasives.desugar_of_variant_record>


; <Start encoding val FStar.Pervasives.defer_to>

(declare-fun FStar.Pervasives.defer_to (Term Term) Term)

(declare-fun FStar.Pervasives.defer_to@tok () Term)

; </end encoding val FStar.Pervasives.defer_to>


; End Externals for interface FStar.Pervasives


; Externals for interface FStar.Classical


; <Start encoding val FStar.Classical.give_witness>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.give_witness (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.give_witness@tok () Term)

; </end encoding val FStar.Classical.give_witness>


; <Start encoding val FStar.Classical.give_witness_from_squash>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.give_witness_from_squash (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.give_witness_from_squash@tok () Term)

; </end encoding val FStar.Classical.give_witness_from_squash>


; <Start encoding val FStar.Classical.lemma_to_squash_gtot>


(declare-fun Tm_refine_839524df17f415c122f40f00685d3fe6 (Term Term) Term)
(declare-fun Tm_arrow_9a028cfcf6111a85dd3c28d61b4efdfd (Term Term) Term)
(declare-fun FStar.Classical.lemma_to_squash_gtot (Term Term Term Term) Term)



(declare-fun Tm_arrow_6f9100982820dfbce0fb9c6dae0cee11 () Term)
(declare-fun FStar.Classical.lemma_to_squash_gtot@tok () Term)

; </end encoding val FStar.Classical.lemma_to_squash_gtot>


; <Start encoding val FStar.Classical.get_equality>

(declare-fun FStar.Classical.get_equality (Term Term Term) Term)
(declare-fun Tm_refine_7c805cbd5439f1b21f6463c70e57d0f1 (Term Term Term) Term)
(declare-fun Tm_arrow_158af926c0cd4bc1ff513e80f99f4b49 () Term)
(declare-fun FStar.Classical.get_equality@tok () Term)


; </end encoding val FStar.Classical.get_equality>


; <Start encoding val FStar.Classical.impl_to_arrow>

(declare-fun FStar.Classical.impl_to_arrow (Term Term Term Term) Term)
(declare-fun Tm_arrow_156c500bdf0e99cc45ffd26a33a603a8 () Term)
(declare-fun FStar.Classical.impl_to_arrow@tok () Term)

; </end encoding val FStar.Classical.impl_to_arrow>


; <Start encoding val FStar.Classical.arrow_to_impl>

(declare-fun Tm_arrow_9d84457d1c8d2a3cb1cecf47a390b833 (Term Term) Term)
(declare-fun FStar.Classical.arrow_to_impl (Term Term Term) Term)

(declare-fun Tm_arrow_78d787b8a2633e2185ded4267a81cc32 () Term)
(declare-fun FStar.Classical.arrow_to_impl@tok () Term)

; </end encoding val FStar.Classical.arrow_to_impl>


; <Start encoding val FStar.Classical.impl_intro_gtot>


(declare-fun FStar.Classical.impl_intro_gtot (Term Term Term) Term)

(declare-fun Tm_arrow_d2cdd2f18b92810e3048c35d07f1c9ea () Term)
(declare-fun FStar.Classical.impl_intro_gtot@tok () Term)

; </end encoding val FStar.Classical.impl_intro_gtot>


; <Start encoding val FStar.Classical.impl_intro_tot>

(declare-fun Tm_arrow_6980332764c4493a7b0df5c02f7aefbe (Term Term) Term)
(declare-fun FStar.Classical.impl_intro_tot (Term Term Term) Term)

(declare-fun Tm_arrow_91aadb43edc4c2c0c091af8dbe745057 () Term)
(declare-fun FStar.Classical.impl_intro_tot@tok () Term)

; </end encoding val FStar.Classical.impl_intro_tot>


; <Start encoding val FStar.Classical.impl_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.impl_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.impl_intro@tok () Term)

; </end encoding val FStar.Classical.impl_intro>


; <Start encoding val FStar.Classical.move_requires>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.move_requires (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.move_requires@tok () Term)

; </end encoding val FStar.Classical.move_requires>


; <Start encoding val FStar.Classical.move_requires_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.move_requires_2 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.move_requires_2@tok () Term)

; </end encoding val FStar.Classical.move_requires_2>


; <Start encoding val FStar.Classical.move_requires_3>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.move_requires_3 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.move_requires_3@tok () Term)

; </end encoding val FStar.Classical.move_requires_3>


; <Start encoding val FStar.Classical.move_requires_4>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.move_requires_4 (Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.move_requires_4@tok () Term)

; </end encoding val FStar.Classical.move_requires_4>


; <Start encoding val FStar.Classical.impl_intro_gen>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.impl_intro_gen (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.impl_intro_gen@tok () Term)

; </end encoding val FStar.Classical.impl_intro_gen>


; <Start encoding val FStar.Classical.get_forall>


(declare-fun FStar.Classical.get_forall (Term Term) Term)




(declare-fun Tm_refine_7a68552470cd0b3e3b5038c890f62a82 (Term Term) Term)
(declare-fun Tm_arrow_44be7520ed79d38d96b60844cf5c3637 () Term)
(declare-fun FStar.Classical.get_forall@tok () Term)





; </end encoding val FStar.Classical.get_forall>


; <Start encoding val FStar.Classical.forall_intro_gtot>



(declare-fun FStar.Classical.forall_intro_gtot (Term Term Term) Term)


(declare-fun Tm_refine_eee646ed2c0261b2e37307734e5990b8 (Term Term) Term)
(declare-fun Tm_arrow_0d81b083331cc2ca8277c22c2c6ed09c () Term)
(declare-fun FStar.Classical.forall_intro_gtot@tok () Term)


; </end encoding val FStar.Classical.forall_intro_gtot>


; <Start encoding val FStar.Classical.lemma_forall_intro_gtot>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.lemma_forall_intro_gtot (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.lemma_forall_intro_gtot@tok () Term)

; </end encoding val FStar.Classical.lemma_forall_intro_gtot>


; <Start encoding val FStar.Classical.gtot_to_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.gtot_to_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.gtot_to_lemma@tok () Term)

; </end encoding val FStar.Classical.gtot_to_lemma>


; <Start encoding val FStar.Classical.forall_intro_squash_gtot>


(declare-fun Tm_arrow_e44b1a1960e76c65248b9976ee453bf1 (Term Term) Term)
(declare-fun FStar.Classical.forall_intro_squash_gtot (Term Term Term) Term)



(declare-fun Tm_arrow_810fc5a930eab84e2e1c9bc10e65f526 () Term)
(declare-fun FStar.Classical.forall_intro_squash_gtot@tok () Term)


; </end encoding val FStar.Classical.forall_intro_squash_gtot>


; <Start encoding val FStar.Classical.forall_intro_squash_gtot_join>



(declare-fun FStar.Classical.forall_intro_squash_gtot_join (Term Term Term) Term)





(declare-fun Tm_arrow_cd9381a0f782f3a2a2b6ba363e2e0508 () Term)
(declare-fun FStar.Classical.forall_intro_squash_gtot_join@tok () Term)




; </end encoding val FStar.Classical.forall_intro_squash_gtot_join>


; <Start encoding val FStar.Classical.forall_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro@tok () Term)

; </end encoding val FStar.Classical.forall_intro>


; <Start encoding val FStar.Classical.forall_intro_with_pat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_with_pat (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_with_pat@tok () Term)

; </end encoding val FStar.Classical.forall_intro_with_pat>


; <Start encoding val FStar.Classical.forall_intro_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_sub (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_sub@tok () Term)

; </end encoding val FStar.Classical.forall_intro_sub>


; <Start encoding val FStar.Classical.forall_intro_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_2@tok () Term)

; </end encoding val FStar.Classical.forall_intro_2>


; <Start encoding val FStar.Classical.forall_intro_2_with_pat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_2_with_pat (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_2_with_pat@tok () Term)

; </end encoding val FStar.Classical.forall_intro_2_with_pat>


; <Start encoding val FStar.Classical.forall_intro_3>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_3 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_3@tok () Term)

; </end encoding val FStar.Classical.forall_intro_3>


; <Start encoding val FStar.Classical.forall_intro_3_with_pat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_3_with_pat (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_3_with_pat@tok () Term)

; </end encoding val FStar.Classical.forall_intro_3_with_pat>


; <Start encoding val FStar.Classical.forall_intro_4>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_4 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_4@tok () Term)

; </end encoding val FStar.Classical.forall_intro_4>


; <Start encoding val FStar.Classical.forall_impl_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_impl_intro (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_impl_intro@tok () Term)

; </end encoding val FStar.Classical.forall_impl_intro>


; <Start encoding val FStar.Classical.ghost_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.ghost_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.ghost_lemma@tok () Term)

; </end encoding val FStar.Classical.ghost_lemma>


; <Start encoding val FStar.Classical.exists_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.exists_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.exists_intro@tok () Term)

; </end encoding val FStar.Classical.exists_intro>


; <Start encoding val FStar.Classical.exists_intro_not_all_not>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.exists_intro_not_all_not (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.exists_intro_not_all_not@tok () Term)

; </end encoding val FStar.Classical.exists_intro_not_all_not>


; <Start encoding val FStar.Classical.forall_to_exists>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_to_exists (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_to_exists@tok () Term)

; </end encoding val FStar.Classical.forall_to_exists>


; <Start encoding val FStar.Classical.forall_to_exists_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_to_exists_2 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_to_exists_2@tok () Term)

; </end encoding val FStar.Classical.forall_to_exists_2>


; <Start encoding val FStar.Classical.exists_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.exists_elim (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.exists_elim@tok () Term)

; </end encoding val FStar.Classical.exists_elim>


; <Start encoding val FStar.Classical.or_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.or_elim (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.or_elim@tok () Term)

; </end encoding val FStar.Classical.or_elim>


; <Start encoding val FStar.Classical.excluded_middle>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.excluded_middle (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.excluded_middle@tok () Term)

; </end encoding val FStar.Classical.excluded_middle>


; End Externals for interface FStar.Classical


; Externals for interface FStar.Set


; <Skipped #set-options "--initial_fuel 0 --max_fuel 0 --initial_ifuel 0 --max_ifuel 0"/>


; <Start encoding val FStar.Set.set>

(declare-fun FStar.Set.set (Term) Term)

(declare-fun FStar.Set.set@tok () Term)

; </end encoding val FStar.Set.set>


; <Start encoding val FStar.Set.equal>

(declare-fun FStar.Set.equal (Term Term Term) Term)
(declare-fun Tm_arrow_3c4f6e4cf547bd34ec8e06fa6c99957f () Term)
(declare-fun FStar.Set.equal@tok () Term)

; </end encoding val FStar.Set.equal>


; <Start encoding val FStar.Set.mem>

(declare-fun FStar.Set.mem (Term Term Term) Term)
(declare-fun Tm_arrow_3622740f6f31d7fd022d9da9e7023a5e () Term)
(declare-fun FStar.Set.mem@tok () Term)

; </end encoding val FStar.Set.mem>


; <Start encoding val FStar.Set.empty>

(declare-fun FStar.Set.empty (Term) Term)
(declare-fun Tm_arrow_8126140804a823c0abf765b538511539 () Term)
(declare-fun FStar.Set.empty@tok () Term)

; </end encoding val FStar.Set.empty>


; <Start encoding val FStar.Set.singleton>

(declare-fun FStar.Set.singleton (Term Term) Term)
(declare-fun Tm_arrow_764304f899737575fb0645eff5d55885 () Term)
(declare-fun FStar.Set.singleton@tok () Term)

; </end encoding val FStar.Set.singleton>


; <Start encoding val FStar.Set.union>

(declare-fun FStar.Set.union (Term Term Term) Term)
(declare-fun Tm_arrow_7571f855c31e3c10cb35bbdc0f3ae878 () Term)
(declare-fun FStar.Set.union@tok () Term)

; </end encoding val FStar.Set.union>


; <Start encoding val FStar.Set.intersect>

(declare-fun FStar.Set.intersect (Term Term Term) Term)

(declare-fun FStar.Set.intersect@tok () Term)

; </end encoding val FStar.Set.intersect>


; <Start encoding val FStar.Set.complement>

(declare-fun FStar.Set.complement (Term Term) Term)
(declare-fun Tm_arrow_4a14af1f2d9ff62069ebb44d0d1980f6 () Term)
(declare-fun FStar.Set.complement@tok () Term)

; </end encoding val FStar.Set.complement>


; <Start encoding val FStar.Set.intension>

(declare-fun Tm_arrow_84543425b818e2d10a976186b8e8c250 (Term) Term)
(declare-fun FStar.Set.intension (Term Term) Term)

(declare-fun Tm_ghost_arrow_04e42a5c0c55c36964ab6333a076e29e () Term)
(declare-fun FStar.Set.intension@tok () Term)

; </end encoding val FStar.Set.intension>


; <Start encoding let disjoint>

(declare-fun FStar.Set.disjoint (Term Term Term) Term)

(declare-fun FStar.Set.disjoint@tok () Term)

; </end encoding let disjoint>


; <Start encoding let subset>

(declare-fun FStar.Set.subset (Term Term Term) Term)
(declare-fun Tm_arrow_9a1bfd7a415bf0250a3dd161144f27fa () Term)
(declare-fun FStar.Set.subset@tok () Term)

; </end encoding let subset>


; <Start encoding let add>

(declare-fun FStar.Set.add (Term Term Term) Term)
(declare-fun Tm_arrow_3e561cbcf9b0a4b95f6e5d77760b40db () Term)
(declare-fun FStar.Set.add@tok () Term)

; </end encoding let add>


; <Start encoding let remove>

(declare-fun FStar.Set.remove (Term Term Term) Term)

(declare-fun FStar.Set.remove@tok () Term)

; </end encoding let remove>


; <Start encoding val FStar.Set.mem_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_empty@tok () Term)

; </end encoding val FStar.Set.mem_empty>


; <Start encoding val FStar.Set.mem_singleton>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_singleton (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_singleton@tok () Term)

; </end encoding val FStar.Set.mem_singleton>


; <Start encoding val FStar.Set.mem_union>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_union (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_union@tok () Term)

; </end encoding val FStar.Set.mem_union>


; <Start encoding val FStar.Set.mem_intersect>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_intersect (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_intersect@tok () Term)

; </end encoding val FStar.Set.mem_intersect>


; <Start encoding val FStar.Set.mem_complement>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_complement (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_complement@tok () Term)

; </end encoding val FStar.Set.mem_complement>


; <Start encoding val FStar.Set.mem_intension>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_intension (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_intension@tok () Term)

; </end encoding val FStar.Set.mem_intension>


; <Start encoding val FStar.Set.mem_subset>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_subset (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_subset@tok () Term)

; </end encoding val FStar.Set.mem_subset>


; <Start encoding val FStar.Set.subset_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.subset_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.subset_mem@tok () Term)

; </end encoding val FStar.Set.subset_mem>


; <Start encoding val FStar.Set.lemma_equal_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.lemma_equal_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.lemma_equal_intro@tok () Term)

; </end encoding val FStar.Set.lemma_equal_intro>


; <Start encoding val FStar.Set.lemma_equal_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.lemma_equal_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.lemma_equal_elim@tok () Term)

; </end encoding val FStar.Set.lemma_equal_elim>


; <Start encoding val FStar.Set.lemma_equal_refl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.lemma_equal_refl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.lemma_equal_refl@tok () Term)

; </end encoding val FStar.Set.lemma_equal_refl>


; <Start encoding val FStar.Set.disjoint_not_in_both>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.disjoint_not_in_both (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.disjoint_not_in_both@tok () Term)

; </end encoding val FStar.Set.disjoint_not_in_both>


; <Skipped #reset-options/>


; <Start encoding let rec as_set'>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Set.as_set_.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Set.as_set_.fuel_instrumented_token () Term)
(declare-fun FStar.Set.as_set_ (Term Term) Term)
(declare-fun FStar.Set.as_set_@tok () Term)
(declare-fun Tm_arrow_37c32948884378803a50151abdb3cb09 () Term)

; </end encoding let rec as_set'>


; <Start encoding let as_set>

(declare-fun FStar.Set.as_set (Term Term) Term)

(declare-fun FStar.Set.as_set@tok () Term)

; </end encoding let as_set>


; <Start encoding let lemma_disjoint_subset>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.lemma_disjoint_subset (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.lemma_disjoint_subset@tok () Term)

; </end encoding let lemma_disjoint_subset>


; End Externals for interface FStar.Set


; Externals for interface FStar.Ghost


; <Start encoding val FStar.Ghost.erased>

(declare-fun FStar.Ghost.erased (Term) Term)

(declare-fun FStar.Ghost.erased@tok () Term)

; </end encoding val FStar.Ghost.erased>


; <Start encoding val FStar.Ghost.reveal>

(declare-fun FStar.Ghost.reveal (Term Term) Term)
(declare-fun Tm_ghost_arrow_e2f4c1991753137c5a80c115428d0cef () Term)
(declare-fun FStar.Ghost.reveal@tok () Term)

; </end encoding val FStar.Ghost.reveal>


; <Start encoding val FStar.Ghost.hide>

(declare-fun FStar.Ghost.hide (Term Term) Term)
(declare-fun Tm_arrow_643f1030585ddc96db34fbedd5533726 () Term)
(declare-fun FStar.Ghost.hide@tok () Term)

; </end encoding val FStar.Ghost.hide>


; <Start encoding val FStar.Ghost.hide_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Ghost.hide_reveal (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Ghost.hide_reveal@tok () Term)

; </end encoding val FStar.Ghost.hide_reveal>


; <Start encoding val FStar.Ghost.reveal_hide>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Ghost.reveal_hide (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Ghost.reveal_hide@tok () Term)

; </end encoding val FStar.Ghost.reveal_hide>


; <Start encoding let tot_to_gtot>


(declare-fun FStar.Ghost.tot_to_gtot (Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_c9fd3b742fd348c1f0aa2b7131578f3e () Term)
(declare-fun FStar.Ghost.tot_to_gtot@tok () Term)


; </end encoding let tot_to_gtot>


; <Start encoding let return>

(declare-fun FStar.Ghost.return (Term Term) Term)

(declare-fun FStar.Ghost.return@tok () Term)

; </end encoding let return>


; <Start encoding let bind>

(declare-fun Tm_arrow_5716b68879f92aa07a25325dea2a598d (Term Term) Term)
(declare-fun FStar.Ghost.bind (Term Term Term Term) Term)

(declare-fun Tm_arrow_744e10832c82c923706888158b99b0fe () Term)
(declare-fun FStar.Ghost.bind@tok () Term)


; </end encoding let bind>


; <Start encoding let op_let_At>


(declare-fun FStar.Ghost.op_let_At (Term Term Term Term) Term)


(declare-fun FStar.Ghost.op_let_At@tok () Term)


; </end encoding let op_let_At>


; <Start encoding let elift1>


(declare-fun FStar.Ghost.elift1 (Term Term Term Term) Term)

(declare-fun Tm_refine_785b445c1ccb59eaa8c666ff5bddec28 (Term Term Term Term) Term)
(declare-fun Tm_arrow_da89250ece049a2244626f93975cd557 () Term)
(declare-fun FStar.Ghost.elift1@tok () Term)


; </end encoding let elift1>


; <Start encoding let elift2>

(declare-fun Tm_ghost_arrow_44164f5e759c8937bc211b53dca29861 (Term Term Term) Term)
(declare-fun FStar.Ghost.elift2 (Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_65079789b5ee069d4dcb71b5d5562419 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3bc5977a48f4c4aa4cd3ebcf331fe3f9 () Term)
(declare-fun FStar.Ghost.elift2@tok () Term)


; </end encoding let elift2>


; <Start encoding let elift3>

(declare-fun Tm_ghost_arrow_c3cf725ad58bf27e304b88d311d2ef4d (Term Term Term Term) Term)
(declare-fun FStar.Ghost.elift3 (Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_f701336f04214efabf1dc8fb653177ef (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_d597747eb30e55a029a57bb56ae3576b () Term)
(declare-fun FStar.Ghost.elift3@tok () Term)


; </end encoding let elift3>


; <Start encoding let push_refinement>


(declare-fun Tm_refine_4861ff30b18822886452f698558931e8 (Term Term) Term)
(declare-fun FStar.Ghost.push_refinement (Term Term Term) Term)


(declare-fun Tm_refine_36af295866c873249daf08f8d623a269 (Term Term Term) Term)
(declare-fun Tm_arrow_08d120582cc4dfdc7e90cb9038e8f6b8 () Term)
(declare-fun FStar.Ghost.push_refinement@tok () Term)





; </end encoding let push_refinement>


; <Start encoding let elift1_p>


(declare-fun Tm_refine_9f8cb5a84b67f50c9d5f87a914037545 (Term Term) Term)
(declare-fun Tm_ghost_arrow_8f538917cb02d75c44bfd86ed6834262 (Term Term Term) Term)

(declare-fun FStar.Ghost.elift1_p (Term Term Term Term Term) Term)





(declare-fun Tm_arrow_2f2f081c9c2a272e83f647cd86440766 () Term)
(declare-fun FStar.Ghost.elift1_p@tok () Term)


; </end encoding let elift1_p>


; <Start encoding let elift2_p>


(declare-fun Tm_refine_08698b4b6e166624b5bf789ac071b4cf (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_4f9eac2d0622ae1c34d05baa5f6854c6 (Term Term Term Term) Term)
(declare-fun Tm_refine_50e552dc638ed7dac9f2492d99576667 (Term Term Term Term) Term)
(declare-fun FStar.Ghost.elift2_p (Term Term Term Term Term Term Term) Term)





(declare-fun Tm_arrow_4243a3f87827ef2e8c38dd30c5e8518d () Term)
(declare-fun FStar.Ghost.elift2_p@tok () Term)


; </end encoding let elift2_p>


; <Start encoding let elift1_pq>



(declare-fun Tm_arrow_b9b0980b05721a41304c20e612f3108f (Term Term Term) Term)


(declare-fun Tm_ghost_arrow_3f0c334c27896d01c2e72f45e6fcb67c (Term Term Term Term) Term)

(declare-fun FStar.Ghost.elift1_pq (Term Term Term Term Term Term) Term)








(declare-fun Tm_arrow_b8eadba0211443ca5c59668f6aa4b6c9 () Term)
(declare-fun FStar.Ghost.elift1_pq@tok () Term)


; </end encoding let elift1_pq>


; <Start encoding let elift2_pq>



(declare-fun Tm_arrow_747965e95d1386c22f52f977256a903b (Term Term Term Term) Term)

(declare-fun Tm_refine_f9e3dab5c1ea39d2741639e0fe40e216 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_00838c3d276d7476d6679b97a2aa247c (Term Term Term Term Term) Term)

(declare-fun FStar.Ghost.elift2_pq (Term Term Term Term Term Term Term Term) Term)








(declare-fun Tm_arrow_b7e390954ec59dc663763c956d66957b () Term)
(declare-fun FStar.Ghost.elift2_pq@tok () Term)


; </end encoding let elift2_pq>


; End Externals for interface FStar.Ghost


; Externals for interface FStar.IndefiniteDescription


; <Start encoding val FStar.IndefiniteDescription.elim_squash>

(declare-fun FStar.IndefiniteDescription.elim_squash (Term Term) Term)
(declare-fun Tm_ghost_arrow_c6842219f247b61822e21d8f892190b3 () Term)
(declare-fun FStar.IndefiniteDescription.elim_squash@tok () Term)

; </end encoding val FStar.IndefiniteDescription.elim_squash>


; <Start encoding val FStar.IndefiniteDescription.indefinite_description_ghost>

(declare-fun Tm_arrow_81e65de2755319ee661cc1adc7d951e3 (Term) Term)
(declare-fun Tm_refine_4cc89ae73e7128e43010e5aba0ff060c (Term) Term)
(declare-fun FStar.IndefiniteDescription.indefinite_description_ghost (Term Term) Term)



(declare-fun Tm_ghost_arrow_feddccf07264e14202821ef1d50468a8 () Term)
(declare-fun FStar.IndefiniteDescription.indefinite_description_ghost@tok () Term)


; </end encoding val FStar.IndefiniteDescription.indefinite_description_ghost>


; <Start encoding val FStar.IndefiniteDescription.indefinite_description_tot>



(declare-fun FStar.IndefiniteDescription.indefinite_description_tot (Term Term) Term)



(declare-fun Tm_arrow_913328739865ec1d7344ba2324047e94 () Term)
(declare-fun FStar.IndefiniteDescription.indefinite_description_tot@tok () Term)


; </end encoding val FStar.IndefiniteDescription.indefinite_description_tot>


; <Start encoding val FStar.IndefiniteDescription.strong_excluded_middle>

(declare-fun FStar.IndefiniteDescription.strong_excluded_middle (Term) Term)
(declare-fun Tm_refine_2c7ecebd8a41d0890aab4251b61d6458 (Term) Term)
(declare-fun Tm_ghost_arrow_13b822d9f45311e725609e40f68f39a1 () Term)
(declare-fun FStar.IndefiniteDescription.strong_excluded_middle@tok () Term)


; </end encoding val FStar.IndefiniteDescription.strong_excluded_middle>


; <Start encoding val FStar.IndefiniteDescription.stronger_markovs_principle>

(declare-fun Tm_ghost_arrow_eaf0e881316979a10a835f9aef894ea3 () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle (Term) Term)

(declare-fun Tm_refine_ce62cc380d030e5cd8dfd1cf0ea19b01 (Term) Term)
(declare-fun Tm_ghost_arrow_0ecc4bb7783229ca7ca7edd38b0bab8d () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle@tok () Term)


; </end encoding val FStar.IndefiniteDescription.stronger_markovs_principle>


; <Start encoding val FStar.IndefiniteDescription.stronger_markovs_principle_prop>

(declare-fun Tm_arrow_1742ee5bbc9c9e74913cc041d85062b6 () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle_prop (Term) Term)

(declare-fun Tm_refine_e76bd1e3fcd1369d7232ec3854a8c984 (Term) Term)
(declare-fun Tm_ghost_arrow_c21c60a4b8d9409191eea9e22a1b37db () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle_prop@tok () Term)


; </end encoding val FStar.IndefiniteDescription.stronger_markovs_principle_prop>


; End Externals for interface FStar.IndefiniteDescription


; Externals for module FStar.StrongExcludedMiddle


; <Start encoding let strong_excluded_middle>

(declare-fun FStar.StrongExcludedMiddle.strong_excluded_middle (Term) Term)


(declare-fun FStar.StrongExcludedMiddle.strong_excluded_middle@tok () Term)


; </end encoding let strong_excluded_middle>


; End Externals for module FStar.StrongExcludedMiddle


; Externals for interface FStar.Classical.Sugar


; <Start encoding val FStar.Classical.Sugar.forall_elim>



(declare-fun FStar.Classical.Sugar.forall_elim (Term Term Term Term) Term)


(declare-fun Tm_arrow_6fad81cdc8376c5921e448133045a0b5 () Term)
(declare-fun FStar.Classical.Sugar.forall_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.forall_elim>


; <Start encoding val FStar.Classical.Sugar.exists_elim>


(declare-fun Tm_refine_df2d65c00128265e81a98d1694fa32db (Term Term) Term)
(declare-fun Tm_arrow_757abf2ff34845ceba7272f2bf4c779d (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.exists_elim (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_8a831fa0f832c0a8df6d5207189d1bd6 () Term)
(declare-fun FStar.Classical.Sugar.exists_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.exists_elim>


; <Start encoding let implies_elim>

(declare-fun Tm_refine_913239c2cf9dc8a14e1f047e0206138d (Term Term) Term)
(declare-fun Tm_arrow_e5bf96e6b202d44baf035cb07df2da84 (Term) Term)
(declare-fun FStar.Classical.Sugar.implies_elim (Term Term Term Term) Term)


(declare-fun Tm_arrow_08b9f1333754078ddc08d25d2c8efab0 () Term)
(declare-fun FStar.Classical.Sugar.implies_elim@tok () Term)



; </end encoding let implies_elim>


; <Start encoding val FStar.Classical.Sugar.or_elim>

(declare-fun Tm_refine_953a6e4e702e848a7213bd619baaa22d (Term) Term)
(declare-fun Tm_arrow_0e4b9f46020ce2f098f1971a515a22d9 (Term) Term)
(declare-fun Tm_refine_044452ce08fa2077b813992baef379a7 (Term Term) Term)


(declare-fun Tm_arrow_3cd50b91a1a8ff7ae2a33f725c49ca25 (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.or_elim (Term Term Term Term Term Term) Term)






(declare-fun Tm_arrow_cd3704184434b709df08ad54743b9ddc () Term)
(declare-fun FStar.Classical.Sugar.or_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.or_elim>


; <Start encoding val FStar.Classical.Sugar.and_elim>

(declare-fun Tm_arrow_e617226e5c485cfca90836a8d37dc422 (Term) Term)
(declare-fun Tm_refine_0e6764ea7cf9747bf338120e46774802 (Term Term) Term)
(declare-fun Tm_arrow_9cf3fa74bead5ce84576f320b610d107 (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.and_elim (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_46e93521f3e2b84feb3b4c45d4b82427 () Term)
(declare-fun FStar.Classical.Sugar.and_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.and_elim>


; <Start encoding val FStar.Classical.Sugar.forall_intro>



(declare-fun FStar.Classical.Sugar.forall_intro (Term Term Term) Term)




(declare-fun FStar.Classical.Sugar.forall_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.forall_intro>


; <Start encoding val FStar.Classical.Sugar.exists_intro>


(declare-fun Tm_arrow_1f559753133c819dcbab21eb87f04504 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.exists_intro (Term Term Term Term) Term)



(declare-fun Tm_arrow_98a6ce57193d862f12aa770d807de2d6 () Term)
(declare-fun FStar.Classical.Sugar.exists_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.exists_intro>


; <Start encoding val FStar.Classical.Sugar.implies_intro>


(declare-fun Tm_arrow_8cc28639983f141a2c2b513a3b9f2226 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.implies_intro (Term Term Term) Term)


(declare-fun Tm_refine_210741fcd012f6981d2132fb47059ae4 (Term Term) Term)
(declare-fun Tm_arrow_16ed35ee40b45e5834d942fa129fc7a5 () Term)
(declare-fun FStar.Classical.Sugar.implies_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.implies_intro>


; <Start encoding val FStar.Classical.Sugar.or_intro_left>




(declare-fun FStar.Classical.Sugar.or_intro_left (Term Term Term) Term)




(declare-fun Tm_arrow_ba201b0aaffa8c92349bb033309546c6 () Term)
(declare-fun FStar.Classical.Sugar.or_intro_left@tok () Term)


; </end encoding val FStar.Classical.Sugar.or_intro_left>


; <Start encoding val FStar.Classical.Sugar.or_intro_right>




(declare-fun Tm_arrow_c1f46761cba190a64ceda9e0b423d73a (Term Term) Term)
(declare-fun FStar.Classical.Sugar.or_intro_right (Term Term Term) Term)





(declare-fun Tm_arrow_820ce98d2bc904183444162411ef4873 () Term)
(declare-fun FStar.Classical.Sugar.or_intro_right@tok () Term)


; </end encoding val FStar.Classical.Sugar.or_intro_right>


; <Start encoding val FStar.Classical.Sugar.and_intro>




(declare-fun FStar.Classical.Sugar.and_intro (Term Term Term Term) Term)




(declare-fun Tm_arrow_74dd2a70fe5b8eefc42b899233f1e113 () Term)
(declare-fun FStar.Classical.Sugar.and_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.and_intro>


; End Externals for interface FStar.Classical.Sugar


; Externals for module FStar.List.Tot.Base


; <Skipped val FStar.List.Tot.Base.isEmpty/>


; <Start encoding let isEmpty>

(declare-fun FStar.List.Tot.Base.isEmpty (Term Term) Term)

(declare-fun FStar.List.Tot.Base.isEmpty@tok () Term)

; </end encoding let isEmpty>


; <Skipped val FStar.List.Tot.Base.hd/>


; <Start encoding let hd>


(declare-fun FStar.List.Tot.Base.hd (Term Term) Term)


(declare-fun FStar.List.Tot.Base.hd@tok () Term)


; </end encoding let hd>


; <Skipped val FStar.List.Tot.Base.tail/>


; <Start encoding let tail>


(declare-fun FStar.List.Tot.Base.tail (Term Term) Term)


(declare-fun FStar.List.Tot.Base.tail@tok () Term)


; </end encoding let tail>


; <Skipped val FStar.List.Tot.Base.tl/>


; <Start encoding let tl>


(declare-fun FStar.List.Tot.Base.tl (Term Term) Term)


(declare-fun FStar.List.Tot.Base.tl@tok () Term)


; </end encoding let tl>


; <Skipped val FStar.List.Tot.Base.last/>


; <Start encoding let rec last>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.last.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.last.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.last (Term Term) Term)
(declare-fun FStar.List.Tot.Base.last@tok () Term)





; </end encoding let rec last>


; <Skipped val FStar.List.Tot.Base.init/>


; <Start encoding let rec init>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.init.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.init.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.init (Term Term) Term)
(declare-fun FStar.List.Tot.Base.init@tok () Term)





; </end encoding let rec init>


; <Skipped val FStar.List.Tot.Base.length/>


; <Start encoding let rec length>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.length.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.length.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.length (Term Term) Term)
(declare-fun FStar.List.Tot.Base.length@tok () Term)
(declare-fun Tm_arrow_5adbd6bc13eabd8f92e79f380e1498f0 () Term)

; </end encoding let rec length>


; <Skipped val FStar.List.Tot.Base.nth/>


; <Start encoding let rec nth>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.nth.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.nth.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.nth (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.nth@tok () Term)
(declare-fun Tm_arrow_c96efec76dd44fb4c1c29ca8a004927d () Term)

; </end encoding let rec nth>


; <Skipped val FStar.List.Tot.Base.index/>


; <Start encoding let rec index>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.index.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.index.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.index (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.index@tok () Term)
(declare-fun Tm_refine_c86aba5c6243e6b7f9a4b0ad41b4e9a0 (Term Term) Term)


(declare-fun Tm_arrow_87330224a075c52374b0ca2b4b909772 () Term)

; </end encoding let rec index>


; <Skipped val FStar.List.Tot.Base.count/>


; <Start encoding let rec count>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.count.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.count.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.count (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.count@tok () Term)
(declare-fun Tm_arrow_d7494a533e0c3edea69ad484d93aa0e5 () Term)

; </end encoding let rec count>


; <Skipped val FStar.List.Tot.Base.rev_acc/>


; <Start encoding let rec rev_acc>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.rev_acc.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.rev_acc.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.rev_acc (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.rev_acc@tok () Term)
(declare-fun Tm_arrow_54e38bdd456bab4cdb32b5d540c2274c () Term)

; </end encoding let rec rev_acc>


; <Skipped val FStar.List.Tot.Base.rev/>


; <Start encoding let rev>

(declare-fun FStar.List.Tot.Base.rev (Term Term) Term)
(declare-fun Tm_arrow_f9ba16c6212a483d195bbb8ceec3eef1 () Term)
(declare-fun FStar.List.Tot.Base.rev@tok () Term)

; </end encoding let rev>


; <Skipped val FStar.List.Tot.Base.append/>


; <Start encoding let rec append>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.append.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.append.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.append (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.append@tok () Term)


; </end encoding let rec append>


; <Start encoding let op_At>

(declare-fun FStar.List.Tot.Base.op_At (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.op_At@tok () Term)

; </end encoding let op_At>


; <Skipped val FStar.List.Tot.Base.snoc/>


; <Start encoding let snoc>

(declare-fun FStar.List.Tot.Base.snoc (Term Term) Term)
(declare-fun Tm_arrow_07ff48a1c7b541b0963ce508064e29fb () Term)
(declare-fun FStar.List.Tot.Base.snoc@tok () Term)

; </end encoding let snoc>


; <Skipped val FStar.List.Tot.Base.flatten/>


; <Start encoding let rec flatten>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.flatten.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.flatten.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.flatten (Term Term) Term)
(declare-fun FStar.List.Tot.Base.flatten@tok () Term)
(declare-fun Tm_arrow_7e18fd6b36805c1f1c9a77e024fdec2e () Term)

; </end encoding let rec flatten>


; <Skipped val FStar.List.Tot.Base.map/>


; <Start encoding let rec map>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.map.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.map.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.map (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.map@tok () Term)



(declare-fun Tm_arrow_28431dcf5044bcdd56dbe625f9e3df4e () Term)

; </end encoding let rec map>


; <Skipped val FStar.List.Tot.Base.mapi_init/>


; <Start encoding let rec mapi_init>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.mapi_init.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.mapi_init.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.mapi_init (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.mapi_init@tok () Term)
(declare-fun Tm_arrow_010f318679809a99aeced42f5ba95505 (Term Term) Term)


(declare-fun Tm_arrow_9a89e146e4bb6b361bc4526b891ed1f1 () Term)

; </end encoding let rec mapi_init>


; <Skipped val FStar.List.Tot.Base.mapi/>


; <Start encoding let mapi>


(declare-fun FStar.List.Tot.Base.mapi (Term Term Term Term) Term)

(declare-fun Tm_arrow_b2a07f422fceebd0f3ee3abd5e4aeed2 () Term)
(declare-fun FStar.List.Tot.Base.mapi@tok () Term)


; </end encoding let mapi>


; <Skipped val FStar.List.Tot.Base.concatMap/>


; <Start encoding let rec concatMap>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.concatMap.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.concatMap.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.concatMap (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.concatMap@tok () Term)
(declare-fun Tm_arrow_121fa5bc200f7b3946a5e35040f266b9 (Term Term) Term)


(declare-fun Tm_arrow_c35dd4e5f8c08f94183bf93963fac92f () Term)

; </end encoding let rec concatMap>


; <Skipped val FStar.List.Tot.Base.fold_left/>


; <Start encoding let rec fold_left>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_left.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_left.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_left (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_left@tok () Term)
(declare-fun Tm_arrow_f0225aaf6b987d44876e7f498390aa39 (Term Term) Term)


(declare-fun Tm_arrow_230697841c1116c0d5f3958097856e6e () Term)

; </end encoding let rec fold_left>


; <Skipped val FStar.List.Tot.Base.fold_right/>


; <Start encoding let rec fold_right>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_right.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_right.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_right (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_right@tok () Term)
(declare-fun Tm_arrow_3c1d21b8f6dcc5e202b4ff1cafbaba81 (Term Term) Term)


(declare-fun Tm_arrow_105b39eeae3a464c82e64975ac399cdb () Term)

; </end encoding let rec fold_right>


; <Start encoding let rec fold_right_gtot>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_right_gtot (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_right_gtot@tok () Term)
(declare-fun Tm_ghost_arrow_d7e9834b8fd0407a723f5f3f4b012fdd (Term Term) Term)


(declare-fun Tm_ghost_arrow_fab043b8cdd2296e8d98a06066e4b2d2 () Term)

; </end encoding let rec fold_right_gtot>


; <Start encoding let map_gtot>


(declare-fun FStar.List.Tot.Base.map_gtot (Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_d0c7be07105bf8d5ad60b7f603c725f3 () Term)
(declare-fun FStar.List.Tot.Base.map_gtot@tok () Term)

(declare-fun Tm_ghost_arrow_21583233c98863da294c5e5d657cf78a (Term Term) Term)
(declare-fun Tm_abs_469cd3853c3ff3e8cd408b5521fdbd9d (Term Term Term) Term)

; </end encoding let map_gtot>


; <Skipped val FStar.List.Tot.Base.fold_left2/>


; <Start encoding let rec fold_left2>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_left2.fuel_instrumented (Fuel Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_left2.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_left2 (Term Term Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_left2@tok () Term)
(declare-fun Tm_arrow_40dd30796dd695d143ec6ed01d322177 (Term Term Term) Term)
(declare-fun Tm_refine_c16bc1b61f58b349bf6fc1c94dcaf83b (Term) Term)



(declare-fun Tm_arrow_3f28d1abbd43ddded682cbec516ea7bb () Term)


; </end encoding let rec fold_left2>


; <Start encoding let rec memP>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.memP.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.memP.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.memP (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.memP@tok () Term)
(declare-fun Tm_arrow_9a5de17321abf8ec257671c9a474c08a () Term)

; </end encoding let rec memP>


; <Skipped val FStar.List.Tot.Base.mem/>


; <Start encoding let rec mem>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.mem.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.mem.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.mem (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.mem@tok () Term)
(declare-fun Tm_arrow_8b16b79a9f8fab7cb6911016a8022992 () Term)

; </end encoding let rec mem>


; <Start encoding let contains>

(declare-fun FStar.List.Tot.Base.contains (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.contains@tok () Term)

; </end encoding let contains>


; <Skipped val FStar.List.Tot.Base.existsb/>


; <Start encoding let rec existsb>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.existsb.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.existsb.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.existsb (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.existsb@tok () Term)



(declare-fun Tm_arrow_98dbecc64760e6a41f037a6881cd5df8 () Term)

; </end encoding let rec existsb>


; <Skipped val FStar.List.Tot.Base.find/>


; <Start encoding let rec find>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.find.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.find.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.find (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.find@tok () Term)

(declare-fun Tm_refine_3b1cb9ec3355fed185c658f53954b3fa (Term Term) Term)





(declare-fun Tm_arrow_286c509b12b9a2bb9bf1025c6fd97451 () Term)


; </end encoding let rec find>


; <Skipped val FStar.List.Tot.Base.filter/>


; <Start encoding let rec filter>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.filter.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.filter.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.filter (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.filter@tok () Term)



(declare-fun Tm_arrow_7c3df353a3c3ca9bc0a8454788aa9ad1 () Term)

; </end encoding let rec filter>


; <Start encoding let rec mem_filter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.mem_filter (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.mem_filter@tok () Term)

; </end encoding let rec mem_filter>


; <Start encoding let mem_filter_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.mem_filter_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.mem_filter_forall@tok () Term)


; </end encoding let mem_filter_forall>


; <Skipped val FStar.List.Tot.Base.for_all/>


; <Start encoding let rec for_all>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.for_all.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.for_all.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.for_all (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.for_all@tok () Term)





; </end encoding let rec for_all>


; <Start encoding let rec for_all_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.for_all_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.for_all_mem@tok () Term)

; </end encoding let rec for_all_mem>


; <Skipped val FStar.List.Tot.Base.collect/>


; <Start encoding let rec collect>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.collect.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.collect.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.collect (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.collect@tok () Term)





; </end encoding let rec collect>


; <Skipped val FStar.List.Tot.Base.tryFind/>


; <Start encoding let rec tryFind>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.tryFind.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.tryFind.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.tryFind (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.tryFind@tok () Term)



(declare-fun Tm_arrow_4ae6bca87a611585312b8b0d0d66fefe () Term)

; </end encoding let rec tryFind>


; <Skipped val FStar.List.Tot.Base.tryPick/>


; <Start encoding let rec tryPick>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.tryPick.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.tryPick.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.tryPick (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.tryPick@tok () Term)
(declare-fun Tm_arrow_4b0c7cc34485afa5854ebe5c95023d4c (Term Term) Term)


(declare-fun Tm_arrow_7fbbe8a710b97b9ed9c0d2dfb00b1641 () Term)

; </end encoding let rec tryPick>


; <Skipped val FStar.List.Tot.Base.choose/>


; <Start encoding let rec choose>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.choose.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.choose.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.choose (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.choose@tok () Term)



(declare-fun Tm_arrow_ee03a7411b6d8975b285ea6c772c4d89 () Term)

; </end encoding let rec choose>


; <Skipped val FStar.List.Tot.Base.partition/>


; <Start encoding let rec partition>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.partition.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.partition.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.partition (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.partition@tok () Term)



(declare-fun Tm_arrow_706f575815ce8a3bbd962da035d8aa14 () Term)

; </end encoding let rec partition>


; <Skipped val FStar.List.Tot.Base.subset/>


; <Start encoding let rec subset>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.subset.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.subset.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.subset (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.subset@tok () Term)
(declare-fun Tm_arrow_8d819a995fc33b4cb6aa699af88e8d32 () Term)

; </end encoding let rec subset>


; <Skipped val FStar.List.Tot.Base.noRepeats/>


; <Start encoding let rec noRepeats>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.noRepeats.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.noRepeats.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.noRepeats (Term Term) Term)
(declare-fun FStar.List.Tot.Base.noRepeats@tok () Term)
(declare-fun Tm_arrow_0dd285b24907a2f8b15dedffef61afa6 () Term)

; </end encoding let rec noRepeats>


; <Skipped val FStar.List.Tot.Base.no_repeats_p/>


; <Start encoding let rec no_repeats_p>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.no_repeats_p.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.no_repeats_p.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.no_repeats_p (Term Term) Term)
(declare-fun FStar.List.Tot.Base.no_repeats_p@tok () Term)
(declare-fun Tm_arrow_79c2442eab9e49d1108d2b7a240dc76e () Term)

; </end encoding let rec no_repeats_p>


; <Skipped val FStar.List.Tot.Base.assoc/>


; <Start encoding let rec assoc>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.assoc.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.assoc.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.assoc (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.assoc@tok () Term)
(declare-fun Tm_arrow_d77cf796c5b72d2c2316c0fcdad1dd79 () Term)

; </end encoding let rec assoc>


; <Skipped val FStar.List.Tot.Base.split/>


; <Start encoding let rec split>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.split.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.split.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.split (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.split@tok () Term)
(declare-fun Tm_arrow_1c3cb31b4ffa47bc6454f5b8a25e2407 () Term)

; </end encoding let rec split>


; <Start encoding let unzip>

(declare-fun FStar.List.Tot.Base.unzip (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.unzip@tok () Term)

; </end encoding let unzip>


; <Skipped val FStar.List.Tot.Base.unzip3/>


; <Start encoding let rec unzip3>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.unzip3.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.unzip3.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.unzip3 (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.unzip3@tok () Term)
(declare-fun Tm_arrow_d40be6b496fedb6f7a46205c5824b732 () Term)

; </end encoding let rec unzip3>


; <Start encoding let rec splitAt>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.splitAt.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.splitAt.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.splitAt (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.splitAt@tok () Term)
(declare-fun Tm_arrow_e36bd078e08c2ac2f1324fef6e0a4a22 () Term)

; </end encoding let rec splitAt>


; <Start encoding let rec lemma_splitAt_snd_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.lemma_splitAt_snd_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.lemma_splitAt_snd_length@tok () Term)

; </end encoding let rec lemma_splitAt_snd_length>


; <Skipped val FStar.List.Tot.Base.unsnoc/>


; <Start encoding let unsnoc>

(declare-fun Tm_refine_3f6b38b2852708f36615f9b4db0f9ff1 (Term) Term)
(declare-fun FStar.List.Tot.Base.unsnoc (Term Term) Term)

(declare-fun Tm_arrow_f4bc61622db0c39a751170734a140783 () Term)
(declare-fun FStar.List.Tot.Base.unsnoc@tok () Term)


; </end encoding let unsnoc>


; <Skipped val FStar.List.Tot.Base.split3/>


; <Start encoding let split3>


(declare-fun FStar.List.Tot.Base.split3 (Term Term Term) Term)

(declare-fun Tm_arrow_07dcb44faa0fb6172673970868e7ecff () Term)
(declare-fun FStar.List.Tot.Base.split3@tok () Term)


; </end encoding let split3>


; <Skipped val FStar.List.Tot.Base.partition_length/>


; <Start encoding let rec partition_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.partition_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.partition_length@tok () Term)

; </end encoding let rec partition_length>


; <Skipped val FStar.List.Tot.Base.bool_of_compare/>


; <Start encoding let bool_of_compare>

(declare-fun Tm_arrow_9877f854fbaabbcfda94f6c19b32ae3f (Term) Term)
(declare-fun FStar.List.Tot.Base.bool_of_compare (Term Term Term Term) Term)

(declare-fun Tm_arrow_a2f219461d35e20b7bc771538ca96429 () Term)
(declare-fun FStar.List.Tot.Base.bool_of_compare@tok () Term)


; </end encoding let bool_of_compare>


; <Skipped val FStar.List.Tot.Base.compare_of_bool/>


; <Start encoding let compare_of_bool>

(declare-fun Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e (Term) Term)
(declare-fun FStar.List.Tot.Base.compare_of_bool (Term Term Term Term) Term)

(declare-fun Tm_arrow_8b54d4820d055c327440d0d4811d3a33 () Term)
(declare-fun FStar.List.Tot.Base.compare_of_bool@tok () Term)


; </end encoding let compare_of_bool>


; <Start encoding let compare_of_bool_of_compare>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.compare_of_bool_of_compare (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.compare_of_bool_of_compare@tok () Term)

; </end encoding let compare_of_bool_of_compare>


; <Skipped val FStar.List.Tot.Base.sortWith/>


; <Start encoding let rec sortWith>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.sortWith.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.sortWith.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.sortWith (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.sortWith@tok () Term)



(declare-fun Tm_arrow_d29fb5884447b657cb725f9be68c5ba6 () Term)

; </end encoding let rec sortWith>


; <Start encoding let rec strict_suffix_of>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.strict_suffix_of (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.strict_suffix_of@tok () Term)
(declare-fun Tm_refine_da3062322c9bea8d5b2058386775b91a () Term)

(declare-fun Tm_arrow_1d91178a138c1826d6a199b1613394f1 () Term)


; </end encoding let rec strict_suffix_of>


; <Start encoding let strict_prefix_of>

(declare-fun FStar.List.Tot.Base.strict_prefix_of (Term) Term)

(declare-fun Tm_arrow_0dd65914dd84642f7849df5d67086aa0 (Term) Term)
(declare-fun Tm_arrow_25d975ae357f14f725a8d52a81f8be72 () Term)
(declare-fun FStar.List.Tot.Base.strict_prefix_of@tok () Term)



; </end encoding let strict_prefix_of>


; <Skipped val FStar.List.Tot.Base.list_unref/>


; <Start encoding let rec list_unref>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_unref.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_unref.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_unref (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_unref@tok () Term)






(declare-fun Tm_arrow_6b3a7706fc085133138f00ee506ef176 () Term)

; </end encoding let rec list_unref>


; <Skipped val FStar.List.Tot.Base.list_refb/>


; <Start encoding let rec list_refb>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_refb.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_refb.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_refb (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_refb@tok () Term)

(declare-fun Tm_refine_3dfaece5a1f8e27ecb1367ff50145048 (Term Term) Term)





(declare-fun Tm_refine_b3daba88e15ae8a9be9dd341522270b2 (Term Term Term Term) Term)

(declare-fun Tm_refine_1d1ddbacd892e41ad4ba585e87296d2e (Term Term Term) Term)










(declare-fun Tm_arrow_73c684a5823f2875fcceead4ce671ea8 () Term)







; </end encoding let rec list_refb>


; <Skipped val FStar.List.Tot.Base.list_ref/>


; <Start encoding let rec list_ref>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_ref.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_ref.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_ref (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_ref@tok () Term)

(declare-fun Tm_refine_751cc4d3e845537c495f9d7e1deb8aa9 (Term Term) Term)





(declare-fun Tm_refine_f61b92c00df29b87346e52dcf7670926 (Term Term Term Term) Term)

(declare-fun Tm_refine_16f0c42812e28aba7e30bc8c275306fb (Term Term Term) Term)










(declare-fun Tm_arrow_73f29356f974e35d230fb85375ad3965 () Term)







; </end encoding let rec list_ref>


; End Externals for module FStar.List.Tot.Base


; Externals for interface FStar.List.Tot.Properties


; <Start encoding let llist>

(declare-fun FStar.List.Tot.Properties.llist (Term Term) Term)
(declare-fun Tm_arrow_67c7b2626869cb316f118144000415b9 () Term)
(declare-fun FStar.List.Tot.Properties.llist@tok () Term)
(declare-fun Tm_refine_fbb3412f12fd58a91571022d7c9fa36d (Term Term) Term)

; </end encoding let llist>


; <Start encoding val FStar.List.Tot.Properties.mem_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_memP>


; <Start encoding val FStar.List.Tot.Properties.lemma_index_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_index_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_index_memP@tok () Term)
(declare-fun Tm_refine_bf2fa1226f2c9a0f6671df3e80ddcb8e (Term Term) Term)

; </end encoding val FStar.List.Tot.Properties.lemma_index_memP>


; <Start encoding val FStar.List.Tot.Properties.memP_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_empty@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_empty>


; <Start encoding val FStar.List.Tot.Properties.memP_existsb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_existsb (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_existsb@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_existsb>


; <Start encoding val FStar.List.Tot.Properties.memP_map_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_intro (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_map_intro>


; <Start encoding val FStar.List.Tot.Properties.memP_map_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_elim (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_elim@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_map_elim>


; <Start encoding val FStar.List.Tot.Properties.mem_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_empty@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_empty>


; <Start encoding val FStar.List.Tot.Properties.mem_existsb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_existsb (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_existsb@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_existsb>


; <Start encoding val FStar.List.Tot.Properties.mem_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_count (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_count@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_count>


; <Start encoding val FStar.List.Tot.Properties.rev_acc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_acc_length>


; <Start encoding val FStar.List.Tot.Properties.rev_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_length>


; <Start encoding val FStar.List.Tot.Properties.rev_acc_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_memP (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_acc_memP>


; <Start encoding val FStar.List.Tot.Properties.rev_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_memP>


; <Start encoding val FStar.List.Tot.Properties.rev_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_mem>


; <Start encoding val FStar.List.Tot.Properties.append_nil_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_nil_l (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_nil_l@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_nil_l>


; <Start encoding val FStar.List.Tot.Properties.append_l_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_l_nil (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_l_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_l_nil>


; <Start encoding val FStar.List.Tot.Properties.append_cons_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_cons_l (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_cons_l@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_cons_l>


; <Start encoding val FStar.List.Tot.Properties.append_l_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_l_cons (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_l_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_l_cons>


; <Start encoding val FStar.List.Tot.Properties.append_assoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_assoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_assoc@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_assoc>


; <Start encoding val FStar.List.Tot.Properties.append_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_length>


; <Start encoding val FStar.List.Tot.Properties.append_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_mem>


; <Start encoding val FStar.List.Tot.Properties.append_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_memP (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_memP>


; <Start encoding val FStar.List.Tot.Properties.append_mem_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_mem_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_mem_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_mem_forall>


; <Start encoding val FStar.List.Tot.Properties.append_memP_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_memP_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_memP_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_memP_forall>


; <Start encoding val FStar.List.Tot.Properties.append_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_count (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_count@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_count>


; <Start encoding val FStar.List.Tot.Properties.append_count_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_count_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_count_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_count_forall>


; <Start encoding val FStar.List.Tot.Properties.append_eq_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_eq_nil>


; <Start encoding val FStar.List.Tot.Properties.append_eq_singl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_singl (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_singl@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_eq_singl>


; <Start encoding val FStar.List.Tot.Properties.append_inv_head>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_head (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_head@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_inv_head>


; <Start encoding val FStar.List.Tot.Properties.append_inv_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_tail (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_tail@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_inv_tail>


; <Start encoding val FStar.List.Tot.Properties.append_length_inv_head>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_head (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_head@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_length_inv_head>


; <Start encoding val FStar.List.Tot.Properties.append_length_inv_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_tail (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_tail@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_length_inv_tail>


; <Start encoding val FStar.List.Tot.Properties.append_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_injective (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_injective@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_injective>


; <Start encoding val FStar.List.Tot.Properties.lemma_append_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_append_last (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_append_last@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_append_last>


; <Start encoding let rec rev'>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.rev_.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.rev_.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.rev_ (Term Term) Term)
(declare-fun FStar.List.Tot.Properties.rev_@tok () Term)


; </end encoding let rec rev'>


; <Start encoding let rev'T>

(declare-fun FStar.List.Tot.Properties.rev_T (Term) Term)
(declare-fun Tm_arrow_f34ce2ad5441b4bd300fa100b397737d (Term) Term)
(declare-fun Tm_arrow_42c6b27a859866d5307ff94c9f459cb1 () Term)
(declare-fun FStar.List.Tot.Properties.rev_T@tok () Term)


; </end encoding let rev'T>


; <Start encoding val FStar.List.Tot.Properties.rev_acc_rev'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_rev_ (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_rev_@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_acc_rev'>


; <Start encoding val FStar.List.Tot.Properties.rev_rev'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_rev_ (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_rev_@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_rev'>


; <Start encoding val FStar.List.Tot.Properties.rev'_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev'_append>


; <Start encoding val FStar.List.Tot.Properties.rev_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_append>


; <Start encoding val FStar.List.Tot.Properties.rev'_involutive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__involutive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__involutive@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev'_involutive>


; <Start encoding val FStar.List.Tot.Properties.rev_involutive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_involutive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_involutive@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_involutive>


; <Start encoding val FStar.List.Tot.Properties.lemma_snoc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_snoc_length>


; <Start encoding val FStar.List.Tot.Properties.rev'_list_ind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__list_ind (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__list_ind@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev'_list_ind>


; <Start encoding val FStar.List.Tot.Properties.rev_ind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_ind (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_ind@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_ind>


; <Start encoding val FStar.List.Tot.Properties.map_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_lemma@tok () Term)


; </end encoding val FStar.List.Tot.Properties.map_lemma>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_snoc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_snoc@tok () Term)
(declare-fun Tm_refine_e88aba6d4c79a5625ab4330932edf7ed (Term) Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_snoc>


; <Start encoding val FStar.List.Tot.Properties.lemma_snoc_unsnoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_unsnoc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_unsnoc@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_snoc_unsnoc>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_length>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_append>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_is_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_is_last (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_is_last@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_is_last>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_index@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_index>


; <Start encoding let rec split_using>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.split_using.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.split_using.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.split_using (Term Term Term) Term)
(declare-fun FStar.List.Tot.Properties.split_using@tok () Term)
(declare-fun Tm_refine_ca5b6dc4e0a851997703798a1ffc5f70 (Term Term) Term)


(declare-fun Tm_ghost_arrow_583c096a402961cd40d8b718fb07bacc () Term)

; </end encoding let rec split_using>


; <Start encoding val FStar.List.Tot.Properties.lemma_split_using>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_split_using (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_split_using@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_split_using>


; <Start encoding let rec index_of>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.index_of.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.index_of.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.index_of (Term Term Term) Term)
(declare-fun FStar.List.Tot.Properties.index_of@tok () Term)

(declare-fun Tm_refine_cd45ecc9daf74409c394004efbaa3338 (Term Term Term) Term)



(declare-fun Tm_ghost_arrow_d9cd5e48f458f8c211c59f9048af3929 () Term)


; </end encoding let rec index_of>


; <Start encoding val FStar.List.Tot.Properties.partition_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_mem>


; <Start encoding val FStar.List.Tot.Properties.partition_mem_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_mem_forall>


; <Start encoding val FStar.List.Tot.Properties.partition_mem_p_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_p_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_p_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_mem_p_forall>


; <Start encoding val FStar.List.Tot.Properties.partition_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_count (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_count@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_count>


; <Start encoding val FStar.List.Tot.Properties.partition_count_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_count_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_count_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_count_forall>


; <Start encoding val FStar.List.Tot.Properties.mem_subset>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_subset (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_subset@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_subset>


; <Start encoding val FStar.List.Tot.Properties.subset_reflexive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.subset_reflexive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.subset_reflexive@tok () Term)

; </end encoding val FStar.List.Tot.Properties.subset_reflexive>


; <Start encoding val FStar.List.Tot.Properties.sortWith_permutation>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_permutation (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_permutation@tok () Term)

; </end encoding val FStar.List.Tot.Properties.sortWith_permutation>


; <Start encoding let rec sorted>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.sorted.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.sorted.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.sorted (Term Term) Term)
(declare-fun FStar.List.Tot.Properties.sorted@tok () Term)

(declare-fun Tm_arrow_9cabe840930f95fd18f81c0a913ddb25 (Term) Term)
(declare-fun Tm_abs_4bfb53c1305d6fe7222f07cf49f467b6 (Term Term Fuel Term) Term)




(declare-fun Tm_arrow_af42ab660b7a2cfc6caea649532e5867 () Term)


; </end encoding let rec sorted>


; <Start encoding let total_order>


(declare-fun FStar.List.Tot.Properties.total_order (Term Term) Term)

(declare-fun Tm_arrow_92649d42e4d7df07b51f92b06355903e () Term)
(declare-fun FStar.List.Tot.Properties.total_order@tok () Term)


; </end encoding let total_order>


; <Start encoding val FStar.List.Tot.Properties.append_sorted>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_sorted (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_sorted@tok () Term)

(declare-fun Tm_refine_a928c26e721d07631e5f0d63f521a37e (Term Term) Term)


; </end encoding val FStar.List.Tot.Properties.append_sorted>


; <Start encoding val FStar.List.Tot.Properties.sortWith_sorted>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_sorted (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_sorted@tok () Term)

; </end encoding val FStar.List.Tot.Properties.sortWith_sorted>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_nil (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_nil>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_cons>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_append_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_elim@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_append_elim>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_append_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_append_intro>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_nil (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_nil>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_cons>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_elim@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_elim>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_intro>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_swap>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_swap (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_swap@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_swap>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_permut>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_permut (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_permut@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_permut>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_false_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_false_intro (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_false_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_false_intro>


; <Start encoding val FStar.List.Tot.Properties.assoc_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_nil>


; <Start encoding val FStar.List.Tot.Properties.assoc_cons_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_eq (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_eq@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_cons_eq>


; <Start encoding val FStar.List.Tot.Properties.assoc_cons_not_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_not_eq (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_not_eq@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_cons_not_eq>


; <Start encoding val FStar.List.Tot.Properties.assoc_append_elim_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_r (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_r@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_append_elim_r>


; <Start encoding val FStar.List.Tot.Properties.assoc_append_elim_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_l (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_l@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_append_elim_l>


; <Start encoding val FStar.List.Tot.Properties.assoc_memP_some>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_some (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_some@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_memP_some>


; <Start encoding val FStar.List.Tot.Properties.assoc_memP_none>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_none (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_none@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_memP_none>


; <Start encoding val FStar.List.Tot.Properties.assoc_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_mem>


; <Start encoding val FStar.List.Tot.Properties.fold_left_invar>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_invar (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_invar@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_invar>


; <Start encoding val FStar.List.Tot.Properties.fold_left_map>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_map (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_map@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_map>


; <Start encoding val FStar.List.Tot.Properties.map_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_append (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.map_append>


; <Start encoding val FStar.List.Tot.Properties.fold_left_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_append>


; <Start encoding val FStar.List.Tot.Properties.fold_left_monoid>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_monoid (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_monoid@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_monoid>


; <Start encoding val FStar.List.Tot.Properties.fold_left_append_monoid>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append_monoid (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append_monoid@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_append_monoid>


; <Start encoding val FStar.List.Tot.Properties.index_extensionality>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.index_extensionality (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.index_extensionality@tok () Term)

; </end encoding val FStar.List.Tot.Properties.index_extensionality>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_nil>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_cons>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_trans>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_trans (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_trans@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_trans>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_correct>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_correct (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_correct@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_correct>


; <Start encoding val FStar.List.Tot.Properties.map_strict_suffix_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_strict_suffix_of (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_strict_suffix_of@tok () Term)

; </end encoding val FStar.List.Tot.Properties.map_strict_suffix_of>


; <Start encoding val FStar.List.Tot.Properties.mem_strict_suffix_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_strict_suffix_of (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_strict_suffix_of@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_strict_suffix_of>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_exists_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_exists_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_exists_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_exists_append>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append>


; <Start encoding val FStar.List.Tot.Properties.precedes_tl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_tl (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_tl@tok () Term)

; </end encoding val FStar.List.Tot.Properties.precedes_tl>


; <Start encoding val FStar.List.Tot.Properties.precedes_append_cons_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_r (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_r@tok () Term)

; </end encoding val FStar.List.Tot.Properties.precedes_append_cons_r>


; <Start encoding val FStar.List.Tot.Properties.precedes_append_cons_prod_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_prod_r (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_prod_r@tok () Term)

; </end encoding val FStar.List.Tot.Properties.precedes_append_cons_prod_r>


; <Start encoding val FStar.List.Tot.Properties.memP_precedes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_precedes (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_precedes@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_precedes>


; <Start encoding val FStar.List.Tot.Properties.assoc_precedes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_precedes (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_precedes@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_precedes>


; <Start encoding val FStar.List.Tot.Properties.find_none>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.find_none (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.find_none@tok () Term)

; </end encoding val FStar.List.Tot.Properties.find_none>


; <Start encoding val FStar.List.Tot.Properties.append_init_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_init_last (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_init_last@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_init_last>


; <Start encoding val FStar.List.Tot.Properties.init_last_def>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.init_last_def (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.init_last_def@tok () Term)

; </end encoding val FStar.List.Tot.Properties.init_last_def>


; <Start encoding val FStar.List.Tot.Properties.init_last_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.init_last_inj (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.init_last_inj@tok () Term)

; </end encoding val FStar.List.Tot.Properties.init_last_inj>


; <Start encoding val FStar.List.Tot.Properties.for_all_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.for_all_append (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.for_all_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.for_all_append>


; End Externals for interface FStar.List.Tot.Properties


; Externals for module FStar.List.Tot


; End Externals for module FStar.List.Tot


; Externals for interface FStar.Seq.Base


; <Start encoding val FStar.Seq.Base.seq>

(declare-fun FStar.Seq.Base.seq (Term) Term)

(declare-fun FStar.Seq.Base.seq@tok () Term)

; </end encoding val FStar.Seq.Base.seq>


; <Start encoding val FStar.Seq.Base.length>

(declare-fun FStar.Seq.Base.length (Term Term) Term)
(declare-fun Tm_arrow_d2c01593e1ccf972aadc4bced72f8166 () Term)
(declare-fun FStar.Seq.Base.length@tok () Term)

; </end encoding val FStar.Seq.Base.length>


; <Start encoding val FStar.Seq.Base.seq_to_list>

(declare-fun FStar.Seq.Base.seq_to_list (Term Term) Term)
(declare-fun Tm_refine_c4e3a92f9bd1d01a07e4fb66c5de2e7e (Term Term) Term)
(declare-fun Tm_arrow_7d1aeb9cf9244f8c50e0ad901486a03b () Term)
(declare-fun FStar.Seq.Base.seq_to_list@tok () Term)


; </end encoding val FStar.Seq.Base.seq_to_list>


; <Start encoding val FStar.Seq.Base.seq_of_list>

(declare-fun FStar.Seq.Base.seq_of_list (Term Term) Term)
(declare-fun Tm_refine_d2d1ea66f2b3a92c2deb42edcbb784ce (Term Term) Term)
(declare-fun Tm_arrow_4966fa2986a35d9c0803c863a2768cbd () Term)
(declare-fun FStar.Seq.Base.seq_of_list@tok () Term)


; </end encoding val FStar.Seq.Base.seq_of_list>


; <Start encoding val FStar.Seq.Base.index>

(declare-fun Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 (Term Term) Term)
(declare-fun FStar.Seq.Base.index (Term Term Term) Term)

(declare-fun Tm_arrow_1910ef5262f2ee8e712b6609a232b1ea () Term)
(declare-fun FStar.Seq.Base.index@tok () Term)

; </end encoding val FStar.Seq.Base.index>


; <Start encoding val FStar.Seq.Base.create>

(declare-fun FStar.Seq.Base.create (Term Term Term) Term)
(declare-fun Tm_arrow_b5b3d4fcc48eb666a8878550e50df9fb () Term)
(declare-fun FStar.Seq.Base.create@tok () Term)

; </end encoding val FStar.Seq.Base.create>


; <Start encoding val FStar.Seq.Base.init_aux>

(declare-fun Tm_refine_c1424615841f28cac7fc34e92b7ff33c (Term) Term)

(declare-fun Tm_arrow_44bb45ed5c2534b346e0f58ea5033251 (Term Term) Term)
(declare-fun FStar.Seq.Base.init_aux (Term Term Term Term) Term)



(declare-fun Tm_arrow_da6bbab10714c064205223f9990745bd () Term)
(declare-fun FStar.Seq.Base.init_aux@tok () Term)

; </end encoding val FStar.Seq.Base.init_aux>


; <Start encoding val FStar.Seq.Base.init>



(declare-fun FStar.Seq.Base.init (Term Term Term) Term)


(declare-fun Tm_arrow_d638d84259a58eff38c91944355ac313 () Term)
(declare-fun FStar.Seq.Base.init@tok () Term)

; </end encoding val FStar.Seq.Base.init>


; <Start encoding val FStar.Seq.Base.init_aux_ghost>



(declare-fun Tm_ghost_arrow_b7c239afcc620812134a759b53cafcc7 (Term Term) Term)
(declare-fun FStar.Seq.Base.init_aux_ghost (Term Term Term Term) Term)



(declare-fun Tm_ghost_arrow_90c084cce85ad5fa9b6789a83ba7b9d5 () Term)
(declare-fun FStar.Seq.Base.init_aux_ghost@tok () Term)

; </end encoding val FStar.Seq.Base.init_aux_ghost>


; <Start encoding val FStar.Seq.Base.init_ghost>



(declare-fun FStar.Seq.Base.init_ghost (Term Term Term) Term)


(declare-fun Tm_ghost_arrow_dc3e2497ae3914facc1bb3cecddbafe4 () Term)
(declare-fun FStar.Seq.Base.init_ghost@tok () Term)

; </end encoding val FStar.Seq.Base.init_ghost>


; <Start encoding val FStar.Seq.Base.empty>

(declare-fun FStar.Seq.Base.empty (Term) Term)
(declare-fun Tm_refine_b913a3f691ca99086652e0a655e72f17 (Term) Term)
(declare-fun Tm_arrow_c39fb4e3e203a822394c714f70ec2d2c () Term)
(declare-fun FStar.Seq.Base.empty@tok () Term)


; </end encoding val FStar.Seq.Base.empty>


; <Start encoding let createEmpty>

(declare-fun FStar.Seq.Base.createEmpty (Term) Term)


(declare-fun FStar.Seq.Base.createEmpty@tok () Term)


; </end encoding let createEmpty>


; <Start encoding val FStar.Seq.Base.lemma_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_empty@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_empty>


; <Start encoding val FStar.Seq.Base.upd>


(declare-fun FStar.Seq.Base.upd (Term Term Term Term) Term)

(declare-fun Tm_arrow_12766e98f50c8b91e296bbc369061265 () Term)
(declare-fun FStar.Seq.Base.upd@tok () Term)

; </end encoding val FStar.Seq.Base.upd>


; <Start encoding val FStar.Seq.Base.append>

(declare-fun FStar.Seq.Base.append (Term Term Term) Term)
(declare-fun Tm_arrow_22c1b165cc91e8aafbceb8b36244be8e () Term)
(declare-fun FStar.Seq.Base.append@tok () Term)

; </end encoding val FStar.Seq.Base.append>


; <Start encoding let cons>

(declare-fun FStar.Seq.Base.cons (Term Term Term) Term)
(declare-fun Tm_arrow_62ad6018b578ef7ed3c0e74bdebff729 () Term)
(declare-fun FStar.Seq.Base.cons@tok () Term)

; </end encoding let cons>


; <Start encoding let op_At_Bar>

(declare-fun FStar.Seq.Base.op_At_Bar (Term Term Term) Term)

(declare-fun FStar.Seq.Base.op_At_Bar@tok () Term)

; </end encoding let op_At_Bar>


; <Start encoding val FStar.Seq.Base.slice>

(declare-fun Tm_refine_81407705a0828c2c1b1976675443f647 (Term Term Term) Term)
(declare-fun FStar.Seq.Base.slice (Term Term Term Term) Term)

(declare-fun Tm_arrow_f59809c98fadf275c00ce819f5868628 () Term)
(declare-fun FStar.Seq.Base.slice@tok () Term)

; </end encoding val FStar.Seq.Base.slice>


; <Start encoding val FStar.Seq.Base.lemma_seq_of_seq_to_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_seq_of_seq_to_list (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_seq_of_seq_to_list@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_seq_of_seq_to_list>


; <Start encoding val FStar.Seq.Base.lemma_seq_to_seq_of_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_seq_to_seq_of_list (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_seq_to_seq_of_list@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_seq_to_seq_of_list>


; <Start encoding val FStar.Seq.Base.lemma_seq_of_list_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_seq_of_list_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_seq_of_list_cons@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_seq_of_list_cons>


; <Start encoding val FStar.Seq.Base.lemma_seq_to_list_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_seq_to_list_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_seq_to_list_cons@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_seq_to_list_cons>


; <Start encoding val FStar.Seq.Base.lemma_create_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_create_len (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_create_len@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_create_len>


; <Start encoding val FStar.Seq.Base.lemma_init_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_len (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_len@tok () Term)



; </end encoding val FStar.Seq.Base.lemma_init_len>


; <Start encoding val FStar.Seq.Base.lemma_init_aux_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_aux_len (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_aux_len@tok () Term)




; </end encoding val FStar.Seq.Base.lemma_init_aux_len>


; <Start encoding val FStar.Seq.Base.lemma_init_ghost_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_len (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_len@tok () Term)



; </end encoding val FStar.Seq.Base.lemma_init_ghost_len>


; <Start encoding val FStar.Seq.Base.lemma_init_ghost_aux_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_aux_len (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_aux_len@tok () Term)




; </end encoding val FStar.Seq.Base.lemma_init_ghost_aux_len>


; <Start encoding val FStar.Seq.Base.lemma_len_upd>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_len_upd (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_len_upd@tok () Term)
(declare-fun Tm_refine_2ca062977a42c36634b89c1c4f193f79 (Term Term) Term)

; </end encoding val FStar.Seq.Base.lemma_len_upd>


; <Start encoding val FStar.Seq.Base.lemma_len_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_len_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_len_append@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_len_append>


; <Start encoding val FStar.Seq.Base.lemma_len_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_len_slice (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_len_slice@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_len_slice>


; <Start encoding val FStar.Seq.Base.lemma_index_create>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_create (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_create@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_index_create>


; <Start encoding val FStar.Seq.Base.lemma_index_upd1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd1@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_index_upd1>


; <Start encoding val FStar.Seq.Base.lemma_index_upd2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd2 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd2@tok () Term)

(declare-fun Tm_refine_df81b3f17797c6f405c1dbb191651292 (Term Term Term) Term)

; </end encoding val FStar.Seq.Base.lemma_index_upd2>


; <Start encoding val FStar.Seq.Base.lemma_index_app1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_app1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_app1@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_index_app1>


; <Start encoding val FStar.Seq.Base.lemma_index_app2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_app2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_app2@tok () Term)
(declare-fun Tm_refine_ac201cf927190d39c033967b63cb957b (Term Term Term) Term)

; </end encoding val FStar.Seq.Base.lemma_index_app2>


; <Start encoding val FStar.Seq.Base.lemma_index_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_slice (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_slice@tok () Term)
(declare-fun Tm_refine_d3d07693cd71377864ef84dc97d10ec1 (Term Term Term) Term)
(declare-fun Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8 (Term Term) Term)

; </end encoding val FStar.Seq.Base.lemma_index_slice>


; <Start encoding val FStar.Seq.Base.hasEq_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.hasEq_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.hasEq_lemma@tok () Term)

; </end encoding val FStar.Seq.Base.hasEq_lemma>


; <Start encoding val FStar.Seq.Base.equal>

(declare-fun FStar.Seq.Base.equal (Term Term Term) Term)
(declare-fun Tm_arrow_c2c0a5f39eee7a5a92db8bac6fe4fb3b () Term)
(declare-fun FStar.Seq.Base.equal@tok () Term)

; </end encoding val FStar.Seq.Base.equal>


; <Start encoding val FStar.Seq.Base.eq_i>

(declare-fun Tm_refine_4639d389381bee5cf8cf77b7a6585074 (Term Term) Term)
(declare-fun Tm_refine_b361ba8089a6e963921008d537e799a1 (Term Term) Term)
(declare-fun FStar.Seq.Base.eq_i (Term Term Term Term) Term)


(declare-fun Tm_refine_331c14d442c5ee89a4fce6ea305c920f (Term Term Term) Term)
(declare-fun Tm_refine_51f956555266662f5f0ed4aac81d10bc (Term Term Term Term) Term)
(declare-fun Tm_arrow_e5286e13b5c071949ebc5146fbef7d7f () Term)
(declare-fun FStar.Seq.Base.eq_i@tok () Term)



; </end encoding val FStar.Seq.Base.eq_i>


; <Start encoding val FStar.Seq.Base.eq>

(declare-fun FStar.Seq.Base.eq (Term Term Term) Term)
(declare-fun Tm_refine_1c0effbdef48f9b00a1efb7b571fbb69 (Term Term Term) Term)
(declare-fun Tm_arrow_70ef1e4b9388d8aa6e0d17c5aeed02a7 () Term)
(declare-fun FStar.Seq.Base.eq@tok () Term)


; </end encoding val FStar.Seq.Base.eq>


; <Start encoding val FStar.Seq.Base.lemma_eq_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_eq_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_eq_intro@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_eq_intro>


; <Start encoding val FStar.Seq.Base.lemma_eq_refl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_eq_refl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_eq_refl@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_eq_refl>


; <Start encoding val FStar.Seq.Base.lemma_eq_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_eq_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_eq_elim@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_eq_elim>


; <Start encoding val FStar.Seq.Base.append_assoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.append_assoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.append_assoc@tok () Term)

; </end encoding val FStar.Seq.Base.append_assoc>


; <Start encoding val FStar.Seq.Base.append_empty_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.append_empty_l (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.append_empty_l@tok () Term)

; </end encoding val FStar.Seq.Base.append_empty_l>


; <Start encoding val FStar.Seq.Base.append_empty_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.append_empty_r (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.append_empty_r@tok () Term)

; </end encoding val FStar.Seq.Base.append_empty_r>


; <Start encoding val FStar.Seq.Base.init_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_index@tok () Term)

; </end encoding val FStar.Seq.Base.init_index>


; <Start encoding val FStar.Seq.Base.init_index_>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_index_ (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_index_@tok () Term)



; </end encoding val FStar.Seq.Base.init_index_>


; <Start encoding val FStar.Seq.Base.init_ghost_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_ghost_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_ghost_index@tok () Term)

; </end encoding val FStar.Seq.Base.init_ghost_index>


; <Start encoding val FStar.Seq.Base.init_ghost_index_>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_ghost_index_ (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_ghost_index_@tok () Term)



; </end encoding val FStar.Seq.Base.init_ghost_index_>


; <Start encoding val FStar.Seq.Base.lemma_equal_instances_implies_equal_types>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_equal_instances_implies_equal_types (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_equal_instances_implies_equal_types@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_equal_instances_implies_equal_types>


; End Externals for interface FStar.Seq.Base


; Externals for interface FStar.Seq.Properties


; <Start encoding let lseq>

(declare-fun FStar.Seq.Properties.lseq (Term Term) Term)

(declare-fun FStar.Seq.Properties.lseq@tok () Term)
(declare-fun Tm_refine_a0cd7d06c5da6444b6b51b319febde8e (Term Term) Term)

; </end encoding let lseq>


; <Start encoding let indexable>

(declare-fun FStar.Seq.Properties.indexable (Term Term Term) Term)
(declare-fun Tm_arrow_2c0367dd991d12c77178c7fe63f076c5 () Term)
(declare-fun FStar.Seq.Properties.indexable@tok () Term)

; </end encoding let indexable>


; <Start encoding val FStar.Seq.Properties.lemma_append_inj_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_append_inj_l (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_append_inj_l@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_append_inj_l>


; <Start encoding val FStar.Seq.Properties.lemma_append_inj_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_append_inj_r (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_append_inj_r@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_append_inj_r>


; <Start encoding val FStar.Seq.Properties.lemma_append_len_disj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_append_len_disj (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_append_len_disj@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_append_len_disj>


; <Start encoding val FStar.Seq.Properties.lemma_append_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_append_inj (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_append_inj@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_append_inj>


; <Start encoding let head>

(declare-fun Tm_refine_167ef714932ec832fb671890fc3eee6c (Term) Term)
(declare-fun FStar.Seq.Properties.head (Term Term) Term)

(declare-fun Tm_arrow_fde6b9111cb8aaf87a1b6689af62ed69 () Term)
(declare-fun FStar.Seq.Properties.head@tok () Term)


; </end encoding let head>


; <Start encoding let tail>


(declare-fun FStar.Seq.Properties.tail (Term Term) Term)

(declare-fun Tm_arrow_3db93b3d63ab329f9ab58ee76fda4c87 () Term)
(declare-fun FStar.Seq.Properties.tail@tok () Term)


; </end encoding let tail>


; <Start encoding val FStar.Seq.Properties.lemma_head_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_head_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_head_append@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_head_append>


; <Start encoding val FStar.Seq.Properties.lemma_tail_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_tail_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_tail_append@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_tail_append>


; <Start encoding let last>


(declare-fun FStar.Seq.Properties.last (Term Term) Term)


(declare-fun FStar.Seq.Properties.last@tok () Term)


; </end encoding let last>


; <Start encoding val FStar.Seq.Properties.lemma_cons_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_cons_inj (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_cons_inj@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_cons_inj>


; <Start encoding let split>

(declare-fun Tm_refine_17631fa6304dcc08d028bd475a6dd078 (Term Term) Term)
(declare-fun FStar.Seq.Properties.split (Term Term Term) Term)

(declare-fun Tm_arrow_e8094a245058e1a3364fcb54e52c4b61 () Term)
(declare-fun FStar.Seq.Properties.split@tok () Term)


; </end encoding let split>


; <Start encoding val FStar.Seq.Properties.lemma_split>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_split (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_split@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_split>


; <Start encoding let split_eq>


(declare-fun FStar.Seq.Properties.split_eq (Term Term Term) Term)

(declare-fun Tm_refine_78d42c5dbba01ee594272daa6bb0579c (Term Term) Term)
(declare-fun Tm_arrow_b88932abf1506cfe956c7a113bc65f4b () Term)
(declare-fun FStar.Seq.Properties.split_eq@tok () Term)



; </end encoding let split_eq>


; <Start encoding let rec count>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.count.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.count.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.count (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.count@tok () Term)
(declare-fun Tm_arrow_b68daf91c98458f9ea85290d85674a2e () Term)

; </end encoding let rec count>


; <Start encoding let mem>

(declare-fun FStar.Seq.Properties.mem (Term Term Term) Term)
(declare-fun Tm_arrow_8b9021eb78c56c0f1820182c3a3e44b5 () Term)
(declare-fun FStar.Seq.Properties.mem@tok () Term)

; </end encoding let mem>


; <Start encoding val FStar.Seq.Properties.mem_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.mem_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.mem_index@tok () Term)

; </end encoding val FStar.Seq.Properties.mem_index>


; <Start encoding let rec index_mem>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.index_mem.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.index_mem.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.index_mem (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.index_mem@tok () Term)
(declare-fun Tm_refine_7c92df3cf71635bc41483532e738d828 (Term Term Term) Term)

(declare-fun Tm_arrow_12def5646e9a05cc547dd67c2eeaec45 () Term)


; </end encoding let rec index_mem>


; <Start encoding let swap>



(declare-fun FStar.Seq.Properties.swap (Term Term Term Term) Term)


(declare-fun Tm_arrow_ed5530d89236443143d2d084ddc97069 () Term)
(declare-fun FStar.Seq.Properties.swap@tok () Term)



; </end encoding let swap>


; <Start encoding val FStar.Seq.Properties.lemma_slice_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_append@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_slice_append>


; <Start encoding val FStar.Seq.Properties.lemma_slice_first_in_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_first_in_append (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_first_in_append@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_slice_first_in_append>


; <Start encoding val FStar.Seq.Properties.slice_upd>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.slice_upd (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.slice_upd@tok () Term)



; </end encoding val FStar.Seq.Properties.slice_upd>


; <Start encoding val FStar.Seq.Properties.upd_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.upd_slice (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.upd_slice@tok () Term)



; </end encoding val FStar.Seq.Properties.upd_slice>


; <Start encoding val FStar.Seq.Properties.lemma_append_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_append_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_append_cons@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_append_cons>


; <Start encoding val FStar.Seq.Properties.lemma_tl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_tl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_tl@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_tl>


; <Start encoding let rec sorted>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.sorted.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.sorted.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.sorted (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.sorted@tok () Term)



(declare-fun Tm_arrow_28685b742721099a6ab3847e4434a96d () Term)

; </end encoding let rec sorted>


; <Start encoding val FStar.Seq.Properties.sorted_feq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.sorted_feq (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.sorted_feq@tok () Term)

; </end encoding val FStar.Seq.Properties.sorted_feq>


; <Start encoding val FStar.Seq.Properties.lemma_append_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_append_count (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_append_count@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_append_count>


; <Start encoding val FStar.Seq.Properties.lemma_append_count_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_append_count_aux (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_append_count_aux@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_append_count_aux>


; <Start encoding val FStar.Seq.Properties.lemma_mem_inversion>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_inversion (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_inversion@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_mem_inversion>


; <Start encoding val FStar.Seq.Properties.lemma_mem_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_count (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_count@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_mem_count>


; <Start encoding val FStar.Seq.Properties.lemma_count_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_count_slice (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_count_slice@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_count_slice>


; <Start encoding let total_order>


(declare-fun FStar.Seq.Properties.total_order (Term Term) Term)

(declare-fun Tm_arrow_1118b25cace7451b1e5dfdfe482dbb64 () Term)
(declare-fun FStar.Seq.Properties.total_order@tok () Term)


; </end encoding let total_order>


; <Start encoding let tot_ord>

(declare-fun FStar.Seq.Properties.tot_ord (Term) Term)

(declare-fun FStar.Seq.Properties.tot_ord@tok () Term)

(declare-fun Tm_refine_a01e88865b4bbd2f0a4bcb261b6760a8 (Term) Term)

; </end encoding let tot_ord>


; <Start encoding val FStar.Seq.Properties.sorted_concat_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.sorted_concat_lemma (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.sorted_concat_lemma@tok () Term)

; </end encoding val FStar.Seq.Properties.sorted_concat_lemma>


; <Start encoding val FStar.Seq.Properties.split_5>

(declare-fun Tm_refine_55108d29d63192475ca95f591039cc18 (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.split_5 (Term Term Term Term) Term)

(declare-fun Tm_refine_03fdfb031367b218884098aa9d386676 (Term Term Term Term) Term)
(declare-fun Tm_arrow_1ab34f107de5525c681399e3c671c330 () Term)
(declare-fun FStar.Seq.Properties.split_5@tok () Term)


; </end encoding val FStar.Seq.Properties.split_5>


; <Start encoding val FStar.Seq.Properties.lemma_swap_permutes_aux_frag_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes_aux_frag_eq (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes_aux_frag_eq@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_swap_permutes_aux_frag_eq>


; <Start encoding val FStar.Seq.Properties.lemma_swap_permutes_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes_aux (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes_aux@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_swap_permutes_aux>


; <Start encoding let permutation>

(declare-fun FStar.Seq.Properties.permutation (Term Term Term) Term)
(declare-fun Tm_arrow_05517904f5779069bb79d90a352f1386 () Term)
(declare-fun FStar.Seq.Properties.permutation@tok () Term)

; </end encoding let permutation>


; <Start encoding val FStar.Seq.Properties.append_permutations>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.append_permutations (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.append_permutations@tok () Term)

; </end encoding val FStar.Seq.Properties.append_permutations>


; <Start encoding val FStar.Seq.Properties.lemma_swap_permutes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_swap_permutes>


; <Start encoding val FStar.Seq.Properties.perm_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.perm_len (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.perm_len@tok () Term)

; </end encoding val FStar.Seq.Properties.perm_len>


; <Start encoding val FStar.Seq.Properties.cons_perm>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.cons_perm (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.cons_perm@tok () Term)

; </end encoding val FStar.Seq.Properties.cons_perm>


; <Start encoding val FStar.Seq.Properties.lemma_mem_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_append@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_mem_append>


; <Start encoding val FStar.Seq.Properties.lemma_slice_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_cons (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_cons@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_slice_cons>


; <Start encoding val FStar.Seq.Properties.lemma_slice_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_snoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_snoc@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_slice_snoc>


; <Start encoding val FStar.Seq.Properties.lemma_ordering_lo_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_ordering_lo_snoc (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_ordering_lo_snoc@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_ordering_lo_snoc>


; <Start encoding val FStar.Seq.Properties.lemma_ordering_hi_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_ordering_hi_cons (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_ordering_hi_cons@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_ordering_hi_cons>


; <Start encoding val FStar.Seq.Properties.swap_frame_lo>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.swap_frame_lo (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.swap_frame_lo@tok () Term)

; </end encoding val FStar.Seq.Properties.swap_frame_lo>


; <Start encoding val FStar.Seq.Properties.swap_frame_lo'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.swap_frame_lo_ (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.swap_frame_lo_@tok () Term)

; </end encoding val FStar.Seq.Properties.swap_frame_lo'>


; <Start encoding val FStar.Seq.Properties.swap_frame_hi>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.swap_frame_hi (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.swap_frame_hi@tok () Term)

; </end encoding val FStar.Seq.Properties.swap_frame_hi>


; <Start encoding val FStar.Seq.Properties.lemma_swap_slice_commute>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_slice_commute (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_slice_commute@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_swap_slice_commute>


; <Start encoding val FStar.Seq.Properties.lemma_swap_permutes_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes_slice (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes_slice@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_swap_permutes_slice>


; <Start encoding let splice>



(declare-fun FStar.Seq.Properties.splice (Term Term Term Term Term) Term)


(declare-fun Tm_arrow_c43a25ef505b9db21532cdb95f3c9f68 () Term)
(declare-fun FStar.Seq.Properties.splice@tok () Term)



; </end encoding let splice>


; <Start encoding let replace_subseq>


(declare-fun Tm_refine_5542011d20872a6178aad9a072f1b686 (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.replace_subseq (Term Term Term Term Term) Term)


(declare-fun Tm_arrow_9fa775abc8f8f9c4e6df626212cddc6a () Term)
(declare-fun FStar.Seq.Properties.replace_subseq@tok () Term)



; </end encoding let replace_subseq>


; <Start encoding val FStar.Seq.Properties.splice_refl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.splice_refl (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.splice_refl@tok () Term)

; </end encoding val FStar.Seq.Properties.splice_refl>


; <Start encoding val FStar.Seq.Properties.lemma_swap_splice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_splice (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_splice@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_swap_splice>


; <Start encoding val FStar.Seq.Properties.lemma_seq_frame_hi>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_frame_hi (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_frame_hi@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_seq_frame_hi>


; <Start encoding val FStar.Seq.Properties.lemma_seq_frame_lo>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_frame_lo (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_frame_lo@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_seq_frame_lo>


; <Start encoding val FStar.Seq.Properties.lemma_tail_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_tail_slice (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_tail_slice@tok () Term)
(declare-fun Tm_refine_b138bd5848d4184f7632587e6e4bcf9f (Term Term Term) Term)

; </end encoding val FStar.Seq.Properties.lemma_tail_slice>


; <Start encoding val FStar.Seq.Properties.lemma_weaken_frame_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_frame_right (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_frame_right@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_weaken_frame_right>


; <Start encoding val FStar.Seq.Properties.lemma_weaken_frame_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_frame_left (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_frame_left@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_weaken_frame_left>


; <Start encoding val FStar.Seq.Properties.lemma_trans_frame>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_trans_frame (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_trans_frame@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_trans_frame>


; <Start encoding val FStar.Seq.Properties.lemma_weaken_perm_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_perm_left (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_perm_left@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_weaken_perm_left>


; <Start encoding val FStar.Seq.Properties.lemma_weaken_perm_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_perm_right (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_perm_right@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_weaken_perm_right>


; <Start encoding val FStar.Seq.Properties.lemma_trans_perm>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_trans_perm (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_trans_perm@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_trans_perm>


; <Start encoding let snoc>

(declare-fun FStar.Seq.Properties.snoc (Term Term Term) Term)
(declare-fun Tm_arrow_f9b27de7c4505538c6110afe14403cc8 () Term)
(declare-fun FStar.Seq.Properties.snoc@tok () Term)

; </end encoding let snoc>


; <Start encoding val FStar.Seq.Properties.lemma_cons_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_cons_snoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_cons_snoc@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_cons_snoc>


; <Start encoding val FStar.Seq.Properties.lemma_tail_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_tail_snoc (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_tail_snoc@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_tail_snoc>


; <Start encoding val FStar.Seq.Properties.lemma_snoc_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_snoc_inj (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_snoc_inj@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_snoc_inj>


; <Start encoding val FStar.Seq.Properties.lemma_mem_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_snoc (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_snoc@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_mem_snoc>


; <Start encoding let rec find_l>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.find_l.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.find_l.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.find_l (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.find_l@tok () Term)

(declare-fun Tm_refine_aba7638072c8f1ba6a01b95ec6f9a485 (Term Term) Term)



(declare-fun Tm_arrow_fd183dc9552028fd54abfbe4a84f515a () Term)


; </end encoding let rec find_l>


; <Start encoding let rec ghost_find_l>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.ghost_find_l.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.ghost_find_l.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.ghost_find_l (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.ghost_find_l@tok () Term)
(declare-fun Tm_ghost_arrow_9a34a9deaac3ca72ad48c3ec79b6656c (Term) Term)




(declare-fun Tm_ghost_arrow_3f8a537d0d54200d690f80a370cf9031 () Term)


; </end encoding let rec ghost_find_l>


; <Start encoding val FStar.Seq.Properties.find_append_some>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.find_append_some (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.find_append_some@tok () Term)

; </end encoding val FStar.Seq.Properties.find_append_some>


; <Start encoding val FStar.Seq.Properties.find_append_none>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.find_append_none (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.find_append_none@tok () Term)

; </end encoding val FStar.Seq.Properties.find_append_none>


; <Start encoding val FStar.Seq.Properties.find_append_none_s2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.find_append_none_s2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.find_append_none_s2@tok () Term)

; </end encoding val FStar.Seq.Properties.find_append_none_s2>


; <Start encoding val FStar.Seq.Properties.find_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.find_snoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.find_snoc@tok () Term)

; </end encoding val FStar.Seq.Properties.find_snoc>


; <Start encoding let un_snoc>

(declare-fun Tm_refine_5739deb21d8cba89243fec27b35b7ef0 (Term) Term)
(declare-fun FStar.Seq.Properties.un_snoc (Term Term) Term)

(declare-fun Tm_refine_16326afaeb5f4d93ab294cc4a965de3e (Term Term) Term)
(declare-fun Tm_arrow_30c2910b2510bbce2598a79ba00a0209 () Term)
(declare-fun FStar.Seq.Properties.un_snoc@tok () Term)



; </end encoding let un_snoc>


; <Start encoding val FStar.Seq.Properties.un_snoc_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.un_snoc_snoc (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.un_snoc_snoc@tok () Term)

; </end encoding val FStar.Seq.Properties.un_snoc_snoc>


; <Start encoding let rec find_r>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.find_r.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.find_r.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.find_r (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.find_r@tok () Term)








; </end encoding let rec find_r>


; <Start encoding let found>

(declare-fun FStar.Seq.Properties.found (Term) Term)
(declare-fun Tm_arrow_591bcdc53dc583ecc77b1bc5436f9a59 () Term)
(declare-fun FStar.Seq.Properties.found@tok () Term)

; </end encoding let found>


; <Start encoding let rec seq_find_aux>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.seq_find_aux.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.seq_find_aux.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.seq_find_aux (Term Term Term Term) Term)
(declare-fun FStar.Seq.Properties.seq_find_aux@tok () Term)


(declare-fun Tm_refine_564e05c43cb7c1f4e1de1a4fb2fd28c8 (Term Term Term) Term)


(declare-fun Tm_refine_5e8ab89510578a938a38bd5dfb813b93 (Term Term Term) Term)









(declare-fun Tm_arrow_c2dc7826f3281f473541797eb2d714b7 () Term)




; </end encoding let rec seq_find_aux>


; <Start encoding let seq_find>


(declare-fun FStar.Seq.Properties.seq_find (Term Term Term) Term)




(declare-fun Tm_arrow_fa1508f34cdf614c6772d290f5ddf827 () Term)
(declare-fun FStar.Seq.Properties.seq_find@tok () Term)





; </end encoding let seq_find>


; <Start encoding val FStar.Seq.Properties.find_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.find_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.find_mem@tok () Term)

; </end encoding val FStar.Seq.Properties.find_mem>


; <Start encoding let for_all>


(declare-fun FStar.Seq.Properties.for_all (Term Term Term) Term)


(declare-fun Tm_refine_307fd373d8b3749096cf164b41cf1984 (Term Term Term) Term)
(declare-fun Tm_arrow_098d0ddce18f722cb743337c9d7dd0b9 () Term)
(declare-fun FStar.Seq.Properties.for_all@tok () Term)




(declare-fun Tm_abs_e818836335067047224d0c19c4cabb2d (Term Term) Term)

; </end encoding let for_all>


; <Start encoding val FStar.Seq.Properties.seq_mem_k>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.seq_mem_k (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.seq_mem_k@tok () Term)


; </end encoding val FStar.Seq.Properties.seq_mem_k>


; <Start encoding val FStar.Seq.Properties.lemma_seq_of_list_induction>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_induction (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_induction@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_seq_of_list_induction>


; <Start encoding val FStar.Seq.Properties.lemma_seq_list_bij>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_list_bij (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_list_bij@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_seq_list_bij>


; <Start encoding val FStar.Seq.Properties.lemma_list_seq_bij>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_list_seq_bij (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_list_seq_bij@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_list_seq_bij>


; <Start encoding let createL_post>

(declare-fun FStar.Seq.Properties.createL_post (Term Term Term) Term)
(declare-fun Tm_arrow_befeea9093c61a572da65bfe7ce35cff () Term)
(declare-fun FStar.Seq.Properties.createL_post@tok () Term)
(declare-fun Tm_refine_1780a0fddfda88c43d203b562c6d3f5b () Term)

; </end encoding let createL_post>


; <Start encoding let createL>

(declare-fun FStar.Seq.Properties.createL (Term Term) Term)

(declare-fun Tm_refine_21ffdca6c0b13e0caadadae84ae105ad (Term Term) Term)
(declare-fun Tm_arrow_fe4a88707901fac19b8a27ed4097cad8 () Term)
(declare-fun FStar.Seq.Properties.createL@tok () Term)



; </end encoding let createL>


; <Start encoding val FStar.Seq.Properties.lemma_index_is_nth>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_index_is_nth (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_index_is_nth@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_index_is_nth>


; <Start encoding val FStar.Seq.Properties.contains>

(declare-fun FStar.Seq.Properties.contains (Term Term Term) Term)
(declare-fun Tm_arrow_65d0102b1211a5d233193433129106a1 () Term)
(declare-fun FStar.Seq.Properties.contains@tok () Term)

; </end encoding val FStar.Seq.Properties.contains>


; <Start encoding val FStar.Seq.Properties.contains_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.contains_intro (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.contains_intro@tok () Term)

; </end encoding val FStar.Seq.Properties.contains_intro>


; <Start encoding val FStar.Seq.Properties.contains_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.contains_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.contains_elim@tok () Term)

; </end encoding val FStar.Seq.Properties.contains_elim>


; <Start encoding val FStar.Seq.Properties.lemma_contains_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_contains_empty (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_contains_empty@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_contains_empty>


; <Start encoding val FStar.Seq.Properties.lemma_contains_singleton>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_contains_singleton (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_contains_singleton@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_contains_singleton>


; <Start encoding val FStar.Seq.Properties.append_contains_equiv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.append_contains_equiv (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.append_contains_equiv@tok () Term)

; </end encoding val FStar.Seq.Properties.append_contains_equiv>


; <Start encoding val FStar.Seq.Properties.contains_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.contains_snoc (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.contains_snoc@tok () Term)

; </end encoding val FStar.Seq.Properties.contains_snoc>


; <Start encoding val FStar.Seq.Properties.lemma_find_l_contains>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_find_l_contains (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_find_l_contains@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_find_l_contains>


; <Start encoding val FStar.Seq.Properties.contains_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.contains_cons (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.contains_cons@tok () Term)

; </end encoding val FStar.Seq.Properties.contains_cons>


; <Start encoding val FStar.Seq.Properties.append_cons_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.append_cons_snoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.append_cons_snoc@tok () Term)

; </end encoding val FStar.Seq.Properties.append_cons_snoc>


; <Start encoding val FStar.Seq.Properties.append_slices>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.append_slices (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.append_slices@tok () Term)

; </end encoding val FStar.Seq.Properties.append_slices>


; <Start encoding val FStar.Seq.Properties.find_l_none_no_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.find_l_none_no_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.find_l_none_no_index@tok () Term)

; </end encoding val FStar.Seq.Properties.find_l_none_no_index>


; <Start encoding let suffix_of>

(declare-fun FStar.Seq.Properties.suffix_of (Term Term Term) Term)
(declare-fun Tm_arrow_2ed6082b86d605508c94c4b8a46966f5 () Term)
(declare-fun FStar.Seq.Properties.suffix_of@tok () Term)

; </end encoding let suffix_of>


; <Start encoding val FStar.Seq.Properties.cons_head_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.cons_head_tail (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.cons_head_tail@tok () Term)


; </end encoding val FStar.Seq.Properties.cons_head_tail>


; <Start encoding val FStar.Seq.Properties.head_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.head_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.head_cons@tok () Term)

; </end encoding val FStar.Seq.Properties.head_cons>


; <Start encoding val FStar.Seq.Properties.suffix_of_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.suffix_of_tail (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.suffix_of_tail@tok () Term)


; </end encoding val FStar.Seq.Properties.suffix_of_tail>


; <Start encoding val FStar.Seq.Properties.index_cons_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.index_cons_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.index_cons_l@tok () Term)

; </end encoding val FStar.Seq.Properties.index_cons_l>


; <Start encoding val FStar.Seq.Properties.index_cons_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.index_cons_r (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.index_cons_r@tok () Term)

; </end encoding val FStar.Seq.Properties.index_cons_r>


; <Start encoding val FStar.Seq.Properties.append_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.append_cons (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.append_cons@tok () Term)

; </end encoding val FStar.Seq.Properties.append_cons>


; <Start encoding val FStar.Seq.Properties.index_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.index_tail (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.index_tail@tok () Term)

; </end encoding val FStar.Seq.Properties.index_tail>


; <Start encoding val FStar.Seq.Properties.mem_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.mem_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.mem_cons@tok () Term)

; </end encoding val FStar.Seq.Properties.mem_cons>


; <Start encoding val FStar.Seq.Properties.snoc_slice_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.snoc_slice_index (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.snoc_slice_index@tok () Term)
(declare-fun Tm_refine_095c5722edf0f79bcd7dce7bd084c7b5 (Term Term Term) Term)

; </end encoding val FStar.Seq.Properties.snoc_slice_index>


; <Start encoding val FStar.Seq.Properties.cons_index_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.cons_index_slice (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.cons_index_slice@tok () Term)
(declare-fun Tm_refine_09d2e9ab3b9c121b24316d151747e281 (Term Term Term) Term)
(declare-fun Tm_refine_ddd44b85040d1947cca83550b7e21966 (Term) Term)

; </end encoding val FStar.Seq.Properties.cons_index_slice>


; <Start encoding val FStar.Seq.Properties.slice_is_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.slice_is_empty (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.slice_is_empty@tok () Term)


; </end encoding val FStar.Seq.Properties.slice_is_empty>


; <Start encoding val FStar.Seq.Properties.slice_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.slice_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.slice_length@tok () Term)

; </end encoding val FStar.Seq.Properties.slice_length>


; <Start encoding val FStar.Seq.Properties.slice_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.slice_slice (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.slice_slice@tok () Term)

(declare-fun Tm_refine_1ba8fd8bb363097813064c67740b2de5 (Term Term Term) Term)

; </end encoding val FStar.Seq.Properties.slice_slice>


; <Start encoding val FStar.Seq.Properties.lemma_seq_of_list_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_index@tok () Term)


; </end encoding val FStar.Seq.Properties.lemma_seq_of_list_index>


; <Start encoding let of_list>

(declare-fun FStar.Seq.Properties.of_list (Term Term) Term)
(declare-fun Tm_arrow_474463878fff5c7c9c02e4f0b8b84aa8 () Term)
(declare-fun FStar.Seq.Properties.of_list@tok () Term)

; </end encoding let of_list>


; <Start encoding val FStar.Seq.Properties.seq_of_list_tl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.seq_of_list_tl (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.seq_of_list_tl@tok () Term)

; </end encoding val FStar.Seq.Properties.seq_of_list_tl>


; <Start encoding val FStar.Seq.Properties.mem_seq_of_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.mem_seq_of_list (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.mem_seq_of_list@tok () Term)

; </end encoding val FStar.Seq.Properties.mem_seq_of_list>


; <Start encoding let rec explode_and>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.explode_and.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.explode_and.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.explode_and (Term Term Term Term) Term)
(declare-fun FStar.Seq.Properties.explode_and@tok () Term)
(declare-fun Tm_refine_5885c715bf599d471c43c6b7dcb2413b (Term Term) Term)
(declare-fun Tm_refine_c731267dd71b747abfd9fc75f6f2da81 (Term Term Term) Term)




(declare-fun Tm_arrow_62bce6f622c5bc90fd46048dee6dae55 () Term)

; </end encoding let rec explode_and>


; <Start encoding let pointwise_and>

(declare-fun Tm_refine_9f068c7f6ce275579028a195ac18485b (Term) Term)
(declare-fun Tm_refine_1ad818e6438a897337e89a3053cb2002 (Term Term) Term)
(declare-fun FStar.Seq.Properties.pointwise_and (Term Term Term) Term)


(declare-fun Tm_arrow_1d69c34f503e87805d9fa1b40bc9b696 () Term)
(declare-fun FStar.Seq.Properties.pointwise_and@tok () Term)



; </end encoding let pointwise_and>


; <Start encoding val FStar.Seq.Properties.intro_of_list'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.intro_of_list_ (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.intro_of_list_@tok () Term)

; </end encoding val FStar.Seq.Properties.intro_of_list'>


; <Start encoding val FStar.Seq.Properties.intro_of_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.intro_of_list (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.intro_of_list@tok () Term)

; </end encoding val FStar.Seq.Properties.intro_of_list>


; <Start encoding val FStar.Seq.Properties.elim_of_list'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.elim_of_list_ (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.elim_of_list_@tok () Term)

; </end encoding val FStar.Seq.Properties.elim_of_list'>


; <Start encoding val FStar.Seq.Properties.elim_of_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.elim_of_list (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.elim_of_list@tok () Term)

; </end encoding val FStar.Seq.Properties.elim_of_list>


; <Start encoding let sortWith>


(declare-fun FStar.Seq.Properties.sortWith (Term Term Term) Term)

(declare-fun Tm_arrow_783d577ed6adadfd234f2ce68178463f () Term)
(declare-fun FStar.Seq.Properties.sortWith@tok () Term)


; </end encoding let sortWith>


; <Start encoding val FStar.Seq.Properties.lemma_seq_to_list_permutation>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_to_list_permutation (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_to_list_permutation@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_seq_to_list_permutation>


; <Start encoding val FStar.Seq.Properties.lemma_seq_of_list_permutation>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_permutation (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_permutation@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_seq_of_list_permutation>


; <Start encoding val FStar.Seq.Properties.lemma_seq_of_list_sorted>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_sorted (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_sorted@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_seq_of_list_sorted>


; <Start encoding val FStar.Seq.Properties.lemma_seq_sortwith_correctness>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_sortwith_correctness (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_sortwith_correctness@tok () Term)

; </end encoding val FStar.Seq.Properties.lemma_seq_sortwith_correctness>


; <Start encoding let sort_lseq>

(declare-fun FStar.Seq.Properties.sort_lseq (Term Term Term Term) Term)
(declare-fun Tm_refine_896d0573468d5c87de125067e75d7d47 (Term Term Term Term) Term)
(declare-fun Tm_arrow_3fb7de3746e0ee65d4a1a51ab385c639 () Term)
(declare-fun FStar.Seq.Properties.sort_lseq@tok () Term)


; </end encoding let sort_lseq>


; <Start encoding let rec foldr>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.foldr.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.foldr.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.foldr (Term Term Term Term Term) Term)
(declare-fun FStar.Seq.Properties.foldr@tok () Term)



(declare-fun Tm_arrow_d44e7807ff692a4b5f624a4c31f6a34b () Term)

; </end encoding let rec foldr>


; <Start encoding let rec foldr_snoc>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.foldr_snoc.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.foldr_snoc.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.foldr_snoc (Term Term Term Term Term) Term)
(declare-fun FStar.Seq.Properties.foldr_snoc@tok () Term)





; </end encoding let rec foldr_snoc>


; <Start encoding val FStar.Seq.Properties.map_seq>


(declare-fun FStar.Seq.Properties.map_seq (Term Term Term Term) Term)

(declare-fun Tm_arrow_5f9288474a8f301ac883b79bab9ed39c () Term)
(declare-fun FStar.Seq.Properties.map_seq@tok () Term)

; </end encoding val FStar.Seq.Properties.map_seq>


; <Start encoding val FStar.Seq.Properties.map_seq_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.map_seq_len (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.map_seq_len@tok () Term)

; </end encoding val FStar.Seq.Properties.map_seq_len>


; <Start encoding val FStar.Seq.Properties.map_seq_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.map_seq_index (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.map_seq_index@tok () Term)

; </end encoding val FStar.Seq.Properties.map_seq_index>


; <Start encoding val FStar.Seq.Properties.map_seq_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.map_seq_append (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.map_seq_append@tok () Term)

; </end encoding val FStar.Seq.Properties.map_seq_append>


; End Externals for interface FStar.Seq.Properties


; Externals for module FStar.Seq


; End Externals for module FStar.Seq


; Externals for module ArrayUtils


; <Start encoding let init_at_seq>

(declare-fun Tm_refine_e2af26714aacb45b5c7237458083cad9 (Term Term) Term)
(declare-fun ArrayUtils.init_at_seq (Term Term Term) Term)

;;;;;;;;;;;;;;;;s: FStar.Seq.Base.seq (FStar.Pervasives.Native.option a) ->     i: Prims.nat{i < FStar.Seq.Base.length s}   -> Type
(declare-fun Tm_arrow_0b41806dfbc8487ce57d421ecbbd7025 () Term)
(declare-fun ArrayUtils.init_at_seq@tok () Term)


; </end encoding let init_at_seq>


; <Start encoding let all_some>

(declare-fun ArrayUtils.all_some (Term Term) Term)
;;;;;;;;;;;;;;;;s: FStar.Seq.Base.seq (FStar.Pervasives.Native.option a) -> Type
(declare-fun Tm_arrow_7ca15a0cfab17f713fbe741069e3d86f () Term)
(declare-fun ArrayUtils.all_some@tok () Term)

; </end encoding let all_some>


; <Start encoding let some_equivalent_seqs>

(declare-fun ArrayUtils.some_equivalent_seqs (Term Term Term) Term)
;;;;;;;;;;;;;;;;s1: FStar.Seq.Base.seq (FStar.Pervasives.Native.option a) -> s2: FStar.Seq.Base.seq a -> Type
(declare-fun Tm_arrow_5eaaa2e8dfe49e65a91f7a89c6678c7a () Term)
(declare-fun ArrayUtils.some_equivalent_seqs@tok () Term)

; </end encoding let some_equivalent_seqs>


; <Start encoding val ArrayUtils.get_some_equivalent>

(declare-fun ArrayUtils.get_some_equivalent (Term Term) Term)
(declare-fun Tm_refine_e50addb6c1bbd8f85fb54bf03b146e15 (Term Term) Term)
;;;;;;;;;;;;;;;;s: FStar.Seq.Base.seq (FStar.Pervasives.Native.option a) -> Prims.Pure (FStar.Seq.Base.seq a)
(declare-fun Tm_arrow_9f51a03ab2a6db5ef7e4fb152a82547d () Term)
(declare-fun ArrayUtils.get_some_equivalent@tok () Term)


; </end encoding val ArrayUtils.get_some_equivalent>


; <Start encoding let lemma_get_some_equivalent_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun ArrayUtils.lemma_get_some_equivalent_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun ArrayUtils.lemma_get_some_equivalent_length@tok () Term)

; </end encoding let lemma_get_some_equivalent_length>


; <Start encoding let lemma_get_some_equivalent_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun ArrayUtils.lemma_get_some_equivalent_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun ArrayUtils.lemma_get_some_equivalent_index@tok () Term)

; </end encoding let lemma_get_some_equivalent_index>


; <Start encoding val ArrayUtils.lemma_get_some_equivalent_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun ArrayUtils.lemma_get_some_equivalent_snoc (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun ArrayUtils.lemma_get_some_equivalent_snoc@tok () Term)

; </end encoding val ArrayUtils.lemma_get_some_equivalent_snoc>


; <Start encoding val ArrayUtils.lemma_get_some_equivalent_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun ArrayUtils.lemma_get_some_equivalent_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun ArrayUtils.lemma_get_some_equivalent_append@tok () Term)

; </end encoding val ArrayUtils.lemma_get_some_equivalent_append>


; <Start encoding val ArrayUtils.lemma_get_some_equivalent_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun ArrayUtils.lemma_get_some_equivalent_slice (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun ArrayUtils.lemma_get_some_equivalent_slice@tok () Term)

; </end encoding val ArrayUtils.lemma_get_some_equivalent_slice>


; <Start encoding let lemma_get_equivalent_sequence_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun ArrayUtils.lemma_get_equivalent_sequence_slice (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun ArrayUtils.lemma_get_equivalent_sequence_slice@tok () Term)

; </end encoding let lemma_get_equivalent_sequence_slice>


; <Start encoding val ArrayUtils.copy_seq>

(declare-fun ArrayUtils.copy_seq (Term Term Term Term Term) Term)
(declare-fun Tm_refine_88b0ed6b4b5079a756a9391e54e2b3c5 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;s1: FStar.Seq.Base.seq (FStar.Pervasives.Native.option a) ->     i: Prims.nat ->     j: Prims.nat ->     s2: FStar.Seq.Base.seq a   -> Prims.Pure (FStar.Seq.Base.seq (FStar.Pervasives.Native.option a))
(declare-fun Tm_arrow_8223a848a0793f372c7df78829c17297 () Term)
(declare-fun ArrayUtils.copy_seq@tok () Term)


; </end encoding val ArrayUtils.copy_seq>


; <Start encoding let is_prefix_of>

(declare-fun ArrayUtils.is_prefix_of (Term Term Term) Term)
;;;;;;;;;;;;;;;;s1: FStar.Seq.Base.seq a -> s2: FStar.Seq.Base.seq a -> Type
(declare-fun Tm_arrow_b075dbd23ff57920b5046920c08834b0 () Term)
(declare-fun ArrayUtils.is_prefix_of@tok () Term)

; </end encoding let is_prefix_of>


; <Start encoding let lemma_is_prefix_of_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun ArrayUtils.lemma_is_prefix_of_slice (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun ArrayUtils.lemma_is_prefix_of_slice@tok () Term)
(declare-fun Tm_refine_c1711d8a7b0919288364d7fa4be66673 (Term Term) Term)
(declare-fun Tm_refine_21ba3780ecd4c31fe9f89ff8d60a5f28 (Term Term Term) Term)

; </end encoding let lemma_is_prefix_of_slice>


; <Start encoding val ArrayUtils.seq_map>


(declare-fun ArrayUtils.seq_map (Term Term Term Term) Term)

(declare-fun Tm_refine_4a193488219f747acf46a37f5644f382 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;f: (_: a -> b) -> s: FStar.Seq.Base.seq a   -> r:     FStar.Seq.Base.seq b       { FStar.Seq.Base.length s = FStar.Seq.Base.length r /\         (forall (i: Prims.nat).             i < FStar.Seq.Base.length s ==> FStar.Seq.Base.index r i == f (FStar.Seq.Base.index s i)         ) }
(declare-fun Tm_arrow_35fd981fe647758cd5a98605c5ac831d () Term)
(declare-fun ArrayUtils.seq_map@tok () Term)


; </end encoding val ArrayUtils.seq_map>


; <Start encoding val ArrayUtils.lemma_map_commutes_with_prefix>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun ArrayUtils.lemma_map_commutes_with_prefix (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun ArrayUtils.lemma_map_commutes_with_prefix@tok () Term)

; </end encoding val ArrayUtils.lemma_map_commutes_with_prefix>


; <Start encoding val ArrayUtils.lemma_map_commutes_with_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun ArrayUtils.lemma_map_commutes_with_snoc (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun ArrayUtils.lemma_map_commutes_with_snoc@tok () Term)

; </end encoding val ArrayUtils.lemma_map_commutes_with_snoc>


; End Externals for module ArrayUtils


; Externals for module FStar.Preorder


; <Start encoding let relation>

(declare-fun FStar.Preorder.relation (Term) Term)

(declare-fun FStar.Preorder.relation@tok () Term)
(declare-fun Tm_arrow_a19f9d49348d4e0038f0ded87d87802f (Term) Term)

; </end encoding let relation>


; <Start encoding let predicate>

(declare-fun FStar.Preorder.predicate (Term) Term)

(declare-fun FStar.Preorder.predicate@tok () Term)


; </end encoding let predicate>


; <Start encoding let reflexive>

(declare-fun FStar.Preorder.reflexive (Term Term) Term)
(declare-fun Tm_arrow_8e677a33afbeb812aa3779b7bdd0131c () Term)
(declare-fun FStar.Preorder.reflexive@tok () Term)

; </end encoding let reflexive>


; <Start encoding let transitive>

(declare-fun FStar.Preorder.transitive (Term Term) Term)

(declare-fun FStar.Preorder.transitive@tok () Term)

; </end encoding let transitive>


; <Start encoding let preorder_rel>

(declare-fun FStar.Preorder.preorder_rel (Term Term) Term)

(declare-fun FStar.Preorder.preorder_rel@tok () Term)

; </end encoding let preorder_rel>


; <Start encoding let preorder>

(declare-fun FStar.Preorder.preorder (Term) Term)

(declare-fun FStar.Preorder.preorder@tok () Term)
(declare-fun Tm_refine_bd10f09297e0e7dc08314f7d9211801c (Term) Term)

; </end encoding let preorder>


; <Start encoding let stable>


(declare-fun FStar.Preorder.stable (Term Term Term) Term)

(declare-fun Tm_arrow_88036d0811eee3361efd6229bae2556d () Term)
(declare-fun FStar.Preorder.stable@tok () Term)


; </end encoding let stable>


; End Externals for module FStar.Preorder


; Externals for interface FStar.Monotonic.Witnessed


; <Start encoding val FStar.Monotonic.Witnessed.witnessed>


(declare-fun FStar.Monotonic.Witnessed.witnessed (Term Term Term) Term)

(declare-fun Tm_arrow_d588830826b7a1087c9fd83547a14841 () Term)
(declare-fun FStar.Monotonic.Witnessed.witnessed@tok () Term)

; </end encoding val FStar.Monotonic.Witnessed.witnessed>


; <Start encoding val FStar.Monotonic.Witnessed.lemma_witnessed_weakening>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_weakening (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_weakening@tok () Term)

; </end encoding val FStar.Monotonic.Witnessed.lemma_witnessed_weakening>


; <Start encoding val FStar.Monotonic.Witnessed.lemma_witnessed_constant>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_constant (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_constant@tok () Term)

; </end encoding val FStar.Monotonic.Witnessed.lemma_witnessed_constant>


; <Start encoding val FStar.Monotonic.Witnessed.lemma_witnessed_nested>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_nested (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_nested@tok () Term)

; </end encoding val FStar.Monotonic.Witnessed.lemma_witnessed_nested>


; <Start encoding val FStar.Monotonic.Witnessed.lemma_witnessed_and>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_and (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_and@tok () Term)

; </end encoding val FStar.Monotonic.Witnessed.lemma_witnessed_and>


; <Start encoding val FStar.Monotonic.Witnessed.lemma_witnessed_or>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_or (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_or@tok () Term)

; </end encoding val FStar.Monotonic.Witnessed.lemma_witnessed_or>


; <Start encoding val FStar.Monotonic.Witnessed.lemma_witnessed_impl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_impl (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_impl@tok () Term)

; </end encoding val FStar.Monotonic.Witnessed.lemma_witnessed_impl>


; <Start encoding val FStar.Monotonic.Witnessed.lemma_witnessed_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_forall (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_forall@tok () Term)

; </end encoding val FStar.Monotonic.Witnessed.lemma_witnessed_forall>


; <Start encoding val FStar.Monotonic.Witnessed.lemma_witnessed_exists>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_exists (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_exists@tok () Term)

; </end encoding val FStar.Monotonic.Witnessed.lemma_witnessed_exists>


; End Externals for interface FStar.Monotonic.Witnessed


; Externals for interface FStar.TSet


; <Skipped #set-options "--initial_fuel 0 --max_fuel 0 --initial_ifuel 0 --max_ifuel 0"/>


; <Start encoding val FStar.TSet.set>

(declare-fun FStar.TSet.set (Term) Term)

(declare-fun FStar.TSet.set@tok () Term)

; </end encoding val FStar.TSet.set>


; <Start encoding val FStar.TSet.equal>

(declare-fun FStar.TSet.equal (Term Term Term) Term)
(declare-fun Tm_arrow_461adcd665973ea611b925a11158df2c () Term)
(declare-fun FStar.TSet.equal@tok () Term)

; </end encoding val FStar.TSet.equal>


; <Start encoding val FStar.TSet.mem>

(declare-fun FStar.TSet.mem (Term Term Term) Term)
(declare-fun Tm_arrow_6bd40494c735add94090089fc1560f3a () Term)
(declare-fun FStar.TSet.mem@tok () Term)

; </end encoding val FStar.TSet.mem>


; <Start encoding val FStar.TSet.empty>

(declare-fun FStar.TSet.empty (Term) Term)
(declare-fun Tm_arrow_7479bde908a771f633d91cf1e6159164 () Term)
(declare-fun FStar.TSet.empty@tok () Term)

; </end encoding val FStar.TSet.empty>


; <Start encoding val FStar.TSet.singleton>

(declare-fun FStar.TSet.singleton (Term Term) Term)
(declare-fun Tm_arrow_efd4130c737a1c63982cd396443713d5 () Term)
(declare-fun FStar.TSet.singleton@tok () Term)

; </end encoding val FStar.TSet.singleton>


; <Start encoding val FStar.TSet.union>

(declare-fun FStar.TSet.union (Term Term Term) Term)
(declare-fun Tm_arrow_3de58fd829d33d9d3ee6c709e8528481 () Term)
(declare-fun FStar.TSet.union@tok () Term)

; </end encoding val FStar.TSet.union>


; <Start encoding val FStar.TSet.intersect>

(declare-fun FStar.TSet.intersect (Term Term Term) Term)

(declare-fun FStar.TSet.intersect@tok () Term)

; </end encoding val FStar.TSet.intersect>


; <Start encoding val FStar.TSet.complement>

(declare-fun FStar.TSet.complement (Term Term) Term)
(declare-fun Tm_arrow_0bfcc001675666a8c38e138bf5ac4ee8 () Term)
(declare-fun FStar.TSet.complement@tok () Term)

; </end encoding val FStar.TSet.complement>


; <Start encoding val FStar.TSet.intension>


(declare-fun FStar.TSet.intension (Term Term) Term)

(declare-fun Tm_arrow_43deeb1307894e15ad1446f8a75a5811 () Term)
(declare-fun FStar.TSet.intension@tok () Term)

; </end encoding val FStar.TSet.intension>


; <Start encoding let subset>

(declare-fun FStar.TSet.subset (Term Term Term) Term)
(declare-fun Tm_arrow_a884d17a435ad7c4eff639e843c2e915 () Term)
(declare-fun FStar.TSet.subset@tok () Term)

; </end encoding let subset>


; <Start encoding val FStar.TSet.mem_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.mem_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.mem_empty@tok () Term)

; </end encoding val FStar.TSet.mem_empty>


; <Start encoding val FStar.TSet.mem_singleton>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.mem_singleton (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.mem_singleton@tok () Term)

; </end encoding val FStar.TSet.mem_singleton>


; <Start encoding val FStar.TSet.mem_union>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.mem_union (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.mem_union@tok () Term)

; </end encoding val FStar.TSet.mem_union>


; <Start encoding val FStar.TSet.mem_intersect>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.mem_intersect (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.mem_intersect@tok () Term)

; </end encoding val FStar.TSet.mem_intersect>


; <Start encoding val FStar.TSet.mem_complement>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.mem_complement (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.mem_complement@tok () Term)

; </end encoding val FStar.TSet.mem_complement>


; <Start encoding val FStar.TSet.mem_subset>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.mem_subset (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.mem_subset@tok () Term)

; </end encoding val FStar.TSet.mem_subset>


; <Start encoding val FStar.TSet.subset_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.subset_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.subset_mem@tok () Term)

; </end encoding val FStar.TSet.subset_mem>


; <Start encoding val FStar.TSet.mem_intension>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.mem_intension (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.mem_intension@tok () Term)


; </end encoding val FStar.TSet.mem_intension>


; <Start encoding val FStar.TSet.lemma_equal_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.lemma_equal_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.lemma_equal_intro@tok () Term)

; </end encoding val FStar.TSet.lemma_equal_intro>


; <Start encoding val FStar.TSet.lemma_equal_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.lemma_equal_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.lemma_equal_elim@tok () Term)

; </end encoding val FStar.TSet.lemma_equal_elim>


; <Start encoding val FStar.TSet.lemma_equal_refl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.lemma_equal_refl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.lemma_equal_refl@tok () Term)

; </end encoding val FStar.TSet.lemma_equal_refl>


; <Start encoding val FStar.TSet.tset_of_set>

(declare-fun FStar.TSet.tset_of_set (Term Term) Term)
(declare-fun Tm_arrow_3cbed28ab0f3b752d3656db155a3e9f3 () Term)
(declare-fun FStar.TSet.tset_of_set@tok () Term)

; </end encoding val FStar.TSet.tset_of_set>


; <Start encoding val FStar.TSet.lemma_mem_tset_of_set>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.lemma_mem_tset_of_set (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.lemma_mem_tset_of_set@tok () Term)

; </end encoding val FStar.TSet.lemma_mem_tset_of_set>


; <Start encoding val FStar.TSet.filter>


(declare-fun FStar.TSet.filter (Term Term Term) Term)

(declare-fun Tm_arrow_1a001071ad6106aec2470a87b194954c () Term)
(declare-fun FStar.TSet.filter@tok () Term)

; </end encoding val FStar.TSet.filter>


; <Start encoding val FStar.TSet.lemma_mem_filter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.lemma_mem_filter (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.lemma_mem_filter@tok () Term)


; </end encoding val FStar.TSet.lemma_mem_filter>


; <Start encoding val FStar.TSet.map>


(declare-fun FStar.TSet.map (Term Term Term Term) Term)

(declare-fun Tm_arrow_8af532fc458491b78200f8bcb1361e90 () Term)
(declare-fun FStar.TSet.map@tok () Term)

; </end encoding val FStar.TSet.map>


; <Start encoding val FStar.TSet.lemma_mem_map>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.lemma_mem_map (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.lemma_mem_map@tok () Term)


; </end encoding val FStar.TSet.lemma_mem_map>


; <Skipped #reset-options/>


; <Start encoding let rec as_set'>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.TSet.as_set_.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.TSet.as_set_.fuel_instrumented_token () Term)
(declare-fun FStar.TSet.as_set_ (Term Term) Term)
(declare-fun FStar.TSet.as_set_@tok () Term)
(declare-fun Tm_arrow_b205d25f357c7c6022ebceb6497753f3 () Term)

; </end encoding let rec as_set'>


; End Externals for interface FStar.TSet


; Externals for interface FStar.Monotonic.Heap


; <Start encoding let set>

(declare-fun FStar.Monotonic.Heap.set (Term) Term)

(declare-fun FStar.Monotonic.Heap.set@tok () Term)

; </end encoding let set>


; <Start encoding let tset>

(declare-fun FStar.Monotonic.Heap.tset (Term) Term)

(declare-fun FStar.Monotonic.Heap.tset@tok () Term)

; </end encoding let tset>


; <Start encoding val FStar.Monotonic.Heap.heap>

(declare-fun FStar.Monotonic.Heap.heap () Term)

; </end encoding val FStar.Monotonic.Heap.heap>


; <Start encoding val FStar.Monotonic.Heap.equal>

(declare-fun FStar.Monotonic.Heap.equal (Term Term) Term)
(declare-fun Tm_arrow_22ea7bfd67f4919a6b048e3792f6aac6 () Term)
(declare-fun FStar.Monotonic.Heap.equal@tok () Term)

; </end encoding val FStar.Monotonic.Heap.equal>


; <Start encoding val FStar.Monotonic.Heap.equal_extensional>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.equal_extensional (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.equal_extensional@tok () Term)

; </end encoding val FStar.Monotonic.Heap.equal_extensional>


; <Start encoding val FStar.Monotonic.Heap.emp>

(declare-fun FStar.Monotonic.Heap.emp (Dummy_sort) Term)

; </end encoding val FStar.Monotonic.Heap.emp>


; <Start encoding val FStar.Monotonic.Heap.next_addr>

(declare-fun FStar.Monotonic.Heap.next_addr (Term) Term)
(declare-fun Tm_ghost_arrow_5f9b7d66eebaf7d00b1d1c8781e1bd33 () Term)
(declare-fun FStar.Monotonic.Heap.next_addr@tok () Term)

; </end encoding val FStar.Monotonic.Heap.next_addr>


; <Start encoding val FStar.Monotonic.Heap.core_mref>

(declare-fun FStar.Monotonic.Heap.core_mref (Term) Term)

(declare-fun FStar.Monotonic.Heap.core_mref@tok () Term)

; </end encoding val FStar.Monotonic.Heap.core_mref>


; <Start encoding let mref>

(declare-fun FStar.Monotonic.Heap.mref (Term Term) Term)
(declare-fun Tm_arrow_5bf0606d629ecb30adc0c556c248cd8a () Term)
(declare-fun FStar.Monotonic.Heap.mref@tok () Term)

; </end encoding let mref>


; <Start encoding val FStar.Monotonic.Heap.addr_of>

(declare-fun FStar.Monotonic.Heap.addr_of (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_3e3805ca9fb6a056cde481ca6e6b2666 () Term)
(declare-fun FStar.Monotonic.Heap.addr_of@tok () Term)

; </end encoding val FStar.Monotonic.Heap.addr_of>


; <Start encoding val FStar.Monotonic.Heap.is_mm>

(declare-fun FStar.Monotonic.Heap.is_mm (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_8181c56eb62b6f09010fd19362ec557f () Term)
(declare-fun FStar.Monotonic.Heap.is_mm@tok () Term)

; </end encoding val FStar.Monotonic.Heap.is_mm>


; <Start encoding let compare_addrs>

(declare-fun FStar.Monotonic.Heap.compare_addrs (Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_d9620af24825960ed2af7182687876b1 () Term)
(declare-fun FStar.Monotonic.Heap.compare_addrs@tok () Term)

; </end encoding let compare_addrs>


; <Start encoding val FStar.Monotonic.Heap.contains>

(declare-fun FStar.Monotonic.Heap.contains (Term Term Term Term) Term)
(declare-fun Tm_arrow_78eae2771402d9ca8cd20442a69b19a1 () Term)
(declare-fun FStar.Monotonic.Heap.contains@tok () Term)

; </end encoding val FStar.Monotonic.Heap.contains>


; <Start encoding val FStar.Monotonic.Heap.addr_unused_in>

(declare-fun FStar.Monotonic.Heap.addr_unused_in (Term Term) Term)
(declare-fun Tm_arrow_5e652491869ddd6d9add00477fe250d4 () Term)
(declare-fun FStar.Monotonic.Heap.addr_unused_in@tok () Term)

; </end encoding val FStar.Monotonic.Heap.addr_unused_in>


; <Start encoding val FStar.Monotonic.Heap.not_addr_unused_in_nullptr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.not_addr_unused_in_nullptr (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.not_addr_unused_in_nullptr@tok () Term)

; </end encoding val FStar.Monotonic.Heap.not_addr_unused_in_nullptr>


; <Start encoding val FStar.Monotonic.Heap.unused_in>

(declare-fun FStar.Monotonic.Heap.unused_in (Term Term Term Term) Term)
(declare-fun Tm_arrow_63db68eb9811874d358b39a3a3a594c0 () Term)
(declare-fun FStar.Monotonic.Heap.unused_in@tok () Term)

; </end encoding val FStar.Monotonic.Heap.unused_in>


; <Start encoding let fresh>

(declare-fun FStar.Monotonic.Heap.fresh (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_516fb5369267798913835a1aff4b7fe3 () Term)
(declare-fun FStar.Monotonic.Heap.fresh@tok () Term)

; </end encoding let fresh>


; <Start encoding let only_t>

(declare-fun FStar.Monotonic.Heap.only_t (Term Term Term) Term)
(declare-fun Tm_arrow_97d9b8894eec5cc757ee6368627567ce () Term)
(declare-fun FStar.Monotonic.Heap.only_t@tok () Term)

; </end encoding let only_t>


; <Start encoding let only>

(declare-fun FStar.Monotonic.Heap.only (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_fe5c1d63e245bf0ffcacbc885af17fc3 () Term)
(declare-fun FStar.Monotonic.Heap.only@tok () Term)

; </end encoding let only>


; <Start encoding let op_Hat_Plus_Plus>

(declare-fun FStar.Monotonic.Heap.op_Hat_Plus_Plus (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_21e6803beb51b9a6b0e4cc69a41b426b () Term)
(declare-fun FStar.Monotonic.Heap.op_Hat_Plus_Plus@tok () Term)

; </end encoding let op_Hat_Plus_Plus>


; <Start encoding let op_Plus_Plus_Hat>

(declare-fun FStar.Monotonic.Heap.op_Plus_Plus_Hat (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_155b4e9b4b7e1cd02500a5483fe79417 () Term)
(declare-fun FStar.Monotonic.Heap.op_Plus_Plus_Hat@tok () Term)

; </end encoding let op_Plus_Plus_Hat>


; <Start encoding let op_Hat_Plus_Hat>

(declare-fun FStar.Monotonic.Heap.op_Hat_Plus_Hat (Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_a3f887bc1beedc82ccf25ac24af9a106 () Term)
(declare-fun FStar.Monotonic.Heap.op_Hat_Plus_Hat@tok () Term)

; </end encoding let op_Hat_Plus_Hat>


; <Start encoding val FStar.Monotonic.Heap.sel_tot>

(declare-fun Tm_refine_60a89cd0c268e7ce38a2aab467325fd8 (Term Term Term) Term)
(declare-fun FStar.Monotonic.Heap.sel_tot (Term Term Term Term) Term)

(declare-fun Tm_arrow_b9c7abd21015083a18544d8f5e4bfa5f () Term)
(declare-fun FStar.Monotonic.Heap.sel_tot@tok () Term)

; </end encoding val FStar.Monotonic.Heap.sel_tot>


; <Start encoding val FStar.Monotonic.Heap.sel>

(declare-fun FStar.Monotonic.Heap.sel (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_ffe8429ce0118fe92246c624b0f48cb8 () Term)
(declare-fun FStar.Monotonic.Heap.sel@tok () Term)

; </end encoding val FStar.Monotonic.Heap.sel>


; <Start encoding val FStar.Monotonic.Heap.upd_tot>


(declare-fun FStar.Monotonic.Heap.upd_tot (Term Term Term Term Term) Term)

(declare-fun Tm_arrow_bc62c38ea3e82ecfe3b8b2ec42ad37db () Term)
(declare-fun FStar.Monotonic.Heap.upd_tot@tok () Term)

; </end encoding val FStar.Monotonic.Heap.upd_tot>


; <Start encoding val FStar.Monotonic.Heap.upd>

(declare-fun FStar.Monotonic.Heap.upd (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_34a9169877528f6cc19628f2fc55c538 () Term)
(declare-fun FStar.Monotonic.Heap.upd@tok () Term)

; </end encoding val FStar.Monotonic.Heap.upd>


; <Start encoding val FStar.Monotonic.Heap.alloc>

(declare-fun FStar.Monotonic.Heap.alloc (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1c0aac8fe904b4d396ec54b136d2ffe7 () Term)
(declare-fun FStar.Monotonic.Heap.alloc@tok () Term)

; </end encoding val FStar.Monotonic.Heap.alloc>


; <Start encoding val FStar.Monotonic.Heap.free_mm>

(declare-fun Tm_refine_5015146880b2d88cf7d4492a6a4488b3 (Term Term Term) Term)
(declare-fun FStar.Monotonic.Heap.free_mm (Term Term Term Term) Term)

(declare-fun Tm_arrow_6ecb62093891266f94b1f3f1a90a448e () Term)
(declare-fun FStar.Monotonic.Heap.free_mm@tok () Term)

; </end encoding val FStar.Monotonic.Heap.free_mm>


; <Start encoding let modifies_t>

(declare-fun FStar.Monotonic.Heap.modifies_t (Term Term Term) Term)
(declare-fun Tm_arrow_a4fe7207a94d4c1647746618fee3b728 () Term)
(declare-fun FStar.Monotonic.Heap.modifies_t@tok () Term)

; </end encoding let modifies_t>


; <Start encoding let modifies>

(declare-fun FStar.Monotonic.Heap.modifies (Term Term Term) Term)
(declare-fun Tm_arrow_46ebd76bd348c127a0b9b24dfad446fc () Term)
(declare-fun FStar.Monotonic.Heap.modifies@tok () Term)

; </end encoding let modifies>


; <Start encoding let equal_dom>

(declare-fun FStar.Monotonic.Heap.equal_dom (Term Term) Term)

(declare-fun FStar.Monotonic.Heap.equal_dom@tok () Term)

; </end encoding let equal_dom>


; <Start encoding val FStar.Monotonic.Heap.lemma_ref_unused_iff_addr_unused>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_ref_unused_iff_addr_unused (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_ref_unused_iff_addr_unused@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_ref_unused_iff_addr_unused>


; <Start encoding val FStar.Monotonic.Heap.lemma_contains_implies_used>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_contains_implies_used (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_contains_implies_used@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_contains_implies_used>


; <Start encoding val FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_types>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_types (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_types@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_types>


; <Start encoding val FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_preorders>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_preorders (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_preorders@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_preorders>


; <Start encoding val FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_mm>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_mm (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_mm@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_mm>


; <Start encoding val FStar.Monotonic.Heap.lemma_distinct_addrs_unused>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_distinct_addrs_unused (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_distinct_addrs_unused@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_distinct_addrs_unused>


; <Start encoding val FStar.Monotonic.Heap.lemma_alloc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_alloc (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_alloc@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_alloc>


; <Start encoding val FStar.Monotonic.Heap.lemma_free_mm_sel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_free_mm_sel (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_free_mm_sel@tok () Term)


; </end encoding val FStar.Monotonic.Heap.lemma_free_mm_sel>


; <Start encoding val FStar.Monotonic.Heap.lemma_free_mm_contains>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_free_mm_contains (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_free_mm_contains@tok () Term)


; </end encoding val FStar.Monotonic.Heap.lemma_free_mm_contains>


; <Start encoding val FStar.Monotonic.Heap.lemma_free_mm_unused>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_free_mm_unused (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_free_mm_unused@tok () Term)


; </end encoding val FStar.Monotonic.Heap.lemma_free_mm_unused>


; <Start encoding val FStar.Monotonic.Heap.lemma_free_addr_unused_in>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_free_addr_unused_in (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_free_addr_unused_in@tok () Term)

(declare-fun Tm_refine_b197fcc3fe1a6a8a07bfa2aebd77a80a () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_free_addr_unused_in>


; <Start encoding val FStar.Monotonic.Heap.lemma_sel_same_addr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_sel_same_addr (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_sel_same_addr@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_sel_same_addr>


; <Start encoding val FStar.Monotonic.Heap.lemma_sel_upd1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_sel_upd1 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_sel_upd1@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_sel_upd1>


; <Start encoding val FStar.Monotonic.Heap.lemma_sel_upd2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_sel_upd2 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_sel_upd2@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_sel_upd2>


; <Start encoding val FStar.Monotonic.Heap.lemma_mref_injectivity>

(declare-fun FStar.Monotonic.Heap.lemma_mref_injectivity () Term)
(declare-fun Tm_refine_e1adf49e5e772ddffa19181e1a812a81 () Term)


; </end encoding val FStar.Monotonic.Heap.lemma_mref_injectivity>


; <Start encoding val FStar.Monotonic.Heap.lemma_in_dom_emp>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_in_dom_emp (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_in_dom_emp@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_in_dom_emp>


; <Start encoding val FStar.Monotonic.Heap.lemma_upd_contains>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_upd_contains (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_upd_contains@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_upd_contains>


; <Start encoding val FStar.Monotonic.Heap.lemma_well_typed_upd_contains>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_well_typed_upd_contains (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_well_typed_upd_contains@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_well_typed_upd_contains>


; <Start encoding val FStar.Monotonic.Heap.lemma_unused_upd_contains>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_unused_upd_contains (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_unused_upd_contains@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_unused_upd_contains>


; <Start encoding val FStar.Monotonic.Heap.lemma_upd_contains_different_addr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_upd_contains_different_addr (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_upd_contains_different_addr@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_upd_contains_different_addr>


; <Start encoding val FStar.Monotonic.Heap.lemma_upd_unused>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_upd_unused (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_upd_unused@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_upd_unused>


; <Start encoding val FStar.Monotonic.Heap.lemma_contains_upd_modifies>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_contains_upd_modifies (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_contains_upd_modifies@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_contains_upd_modifies>


; <Start encoding val FStar.Monotonic.Heap.lemma_unused_upd_modifies>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_unused_upd_modifies (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_unused_upd_modifies@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_unused_upd_modifies>


; <Start encoding val FStar.Monotonic.Heap.lemma_sel_equals_sel_tot_for_contained_refs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_sel_equals_sel_tot_for_contained_refs (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_sel_equals_sel_tot_for_contained_refs@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_sel_equals_sel_tot_for_contained_refs>


; <Start encoding val FStar.Monotonic.Heap.lemma_upd_equals_upd_tot_for_contained_refs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_upd_equals_upd_tot_for_contained_refs (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_upd_equals_upd_tot_for_contained_refs@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_upd_equals_upd_tot_for_contained_refs>


; <Start encoding val FStar.Monotonic.Heap.lemma_modifies_and_equal_dom_sel_diff_addr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_modifies_and_equal_dom_sel_diff_addr (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_modifies_and_equal_dom_sel_diff_addr@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_modifies_and_equal_dom_sel_diff_addr>


; <Start encoding val FStar.Monotonic.Heap.lemma_heap_equality_upd_same_addr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_heap_equality_upd_same_addr (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_heap_equality_upd_same_addr@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_heap_equality_upd_same_addr>


; <Start encoding val FStar.Monotonic.Heap.lemma_heap_equality_cancel_same_mref_upd>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_heap_equality_cancel_same_mref_upd (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_heap_equality_cancel_same_mref_upd@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_heap_equality_cancel_same_mref_upd>


; <Start encoding val FStar.Monotonic.Heap.lemma_heap_equality_upd_with_sel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_heap_equality_upd_with_sel (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_heap_equality_upd_with_sel@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_heap_equality_upd_with_sel>


; <Start encoding val FStar.Monotonic.Heap.lemma_heap_equality_commute_distinct_upds>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_heap_equality_commute_distinct_upds (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_heap_equality_commute_distinct_upds@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_heap_equality_commute_distinct_upds>


; <Start encoding val FStar.Monotonic.Heap.lemma_next_addr_upd_tot>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_upd_tot (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_upd_tot@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_next_addr_upd_tot>


; <Start encoding val FStar.Monotonic.Heap.lemma_next_addr_upd>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_upd (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_upd@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_next_addr_upd>


; <Start encoding val FStar.Monotonic.Heap.lemma_next_addr_alloc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_alloc (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_alloc@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_next_addr_alloc>


; <Start encoding val FStar.Monotonic.Heap.lemma_next_addr_free_mm>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_free_mm (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_free_mm@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_next_addr_free_mm>


; <Start encoding val FStar.Monotonic.Heap.lemma_next_addr_contained_refs_addr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_contained_refs_addr (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_contained_refs_addr@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_next_addr_contained_refs_addr>


; <Start encoding val FStar.Monotonic.Heap.aref>

(declare-fun FStar.Monotonic.Heap.aref () Term)

; </end encoding val FStar.Monotonic.Heap.aref>


; <Start encoding val FStar.Monotonic.Heap.dummy_aref>

(declare-fun FStar.Monotonic.Heap.dummy_aref (Dummy_sort) Term)

; </end encoding val FStar.Monotonic.Heap.dummy_aref>


; <Start encoding val FStar.Monotonic.Heap.aref_equal>

(declare-fun FStar.Monotonic.Heap.aref_equal (Term Term) Term)
(declare-fun Tm_refine_82707a6e3d48caa257bb4bddb01d7d73 (Term Term) Term)
(declare-fun Tm_ghost_arrow_15fb16496d887138d488803245c89d64 () Term)
(declare-fun FStar.Monotonic.Heap.aref_equal@tok () Term)


; </end encoding val FStar.Monotonic.Heap.aref_equal>


; <Start encoding val FStar.Monotonic.Heap.aref_of>

(declare-fun FStar.Monotonic.Heap.aref_of (Term Term Term) Term)
(declare-fun Tm_arrow_52adf65c8447500d70e5098f6c041a65 () Term)
(declare-fun FStar.Monotonic.Heap.aref_of@tok () Term)

; </end encoding val FStar.Monotonic.Heap.aref_of>


; <Start encoding val FStar.Monotonic.Heap.addr_of_aref>

(declare-fun FStar.Monotonic.Heap.addr_of_aref (Term) Term)
(declare-fun Tm_refine_afd51579b90d50ea23e03b743a1fa001 () Term)
(declare-fun Tm_ghost_arrow_168094509145e28b296ce766eea04736 () Term)
(declare-fun FStar.Monotonic.Heap.addr_of_aref@tok () Term)


; </end encoding val FStar.Monotonic.Heap.addr_of_aref>


; <Start encoding val FStar.Monotonic.Heap.addr_of_aref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.addr_of_aref_of (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.addr_of_aref_of@tok () Term)

; </end encoding val FStar.Monotonic.Heap.addr_of_aref_of>


; <Start encoding val FStar.Monotonic.Heap.aref_is_mm>

(declare-fun FStar.Monotonic.Heap.aref_is_mm (Term) Term)
(declare-fun Tm_ghost_arrow_86fca776032c40cedacef7de5d660572 () Term)
(declare-fun FStar.Monotonic.Heap.aref_is_mm@tok () Term)

; </end encoding val FStar.Monotonic.Heap.aref_is_mm>


; <Start encoding val FStar.Monotonic.Heap.is_mm_aref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.is_mm_aref_of (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.is_mm_aref_of@tok () Term)

; </end encoding val FStar.Monotonic.Heap.is_mm_aref_of>


; <Start encoding val FStar.Monotonic.Heap.aref_unused_in>

(declare-fun FStar.Monotonic.Heap.aref_unused_in (Term Term) Term)
(declare-fun Tm_arrow_8227ceb756b15f6c9348698ae3bb9b5e () Term)
(declare-fun FStar.Monotonic.Heap.aref_unused_in@tok () Term)

; </end encoding val FStar.Monotonic.Heap.aref_unused_in>


; <Start encoding val FStar.Monotonic.Heap.unused_in_aref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.unused_in_aref_of (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.unused_in_aref_of@tok () Term)

; </end encoding val FStar.Monotonic.Heap.unused_in_aref_of>


; <Start encoding val FStar.Monotonic.Heap.contains_aref_unused_in>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.contains_aref_unused_in (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.contains_aref_unused_in@tok () Term)

; </end encoding val FStar.Monotonic.Heap.contains_aref_unused_in>


; <Start encoding val FStar.Monotonic.Heap.aref_live_at>

(declare-fun FStar.Monotonic.Heap.aref_live_at (Term Term Term Term) Term)
(declare-fun Tm_arrow_9c4830390b5ceaaec5e76b4f367d6c11 () Term)
(declare-fun FStar.Monotonic.Heap.aref_live_at@tok () Term)

; </end encoding val FStar.Monotonic.Heap.aref_live_at>


; <Start encoding val FStar.Monotonic.Heap.gref_of>

(declare-fun FStar.Monotonic.Heap.gref_of (Term Term Term) Term)
(declare-fun Tm_refine_f871b1cec1676516ecbdd8b1fdf16da7 (Term Term) Term)
(declare-fun Tm_ghost_arrow_b090c641b42392b5ed08e8774610283a () Term)
(declare-fun FStar.Monotonic.Heap.gref_of@tok () Term)


; </end encoding val FStar.Monotonic.Heap.gref_of>


; <Start encoding val FStar.Monotonic.Heap.ref_of>

(declare-fun FStar.Monotonic.Heap.ref_of (Term Term Term Term) Term)
(declare-fun Tm_refine_e9f69f18eb8d91697e49057991573e9f (Term Term Term Term) Term)
(declare-fun Tm_arrow_593ebdf0a0f4ac12ef03a2bedce8e97b () Term)
(declare-fun FStar.Monotonic.Heap.ref_of@tok () Term)


; </end encoding val FStar.Monotonic.Heap.ref_of>


; <Start encoding val FStar.Monotonic.Heap.aref_live_at_aref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.aref_live_at_aref_of (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.aref_live_at_aref_of@tok () Term)

; </end encoding val FStar.Monotonic.Heap.aref_live_at_aref_of>


; <Start encoding val FStar.Monotonic.Heap.contains_gref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.contains_gref_of (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.contains_gref_of@tok () Term)

; </end encoding val FStar.Monotonic.Heap.contains_gref_of>


; <Start encoding val FStar.Monotonic.Heap.aref_of_gref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.aref_of_gref_of (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.aref_of_gref_of@tok () Term)

; </end encoding val FStar.Monotonic.Heap.aref_of_gref_of>


; <Start encoding val FStar.Monotonic.Heap.addr_of_gref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.addr_of_gref_of (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.addr_of_gref_of@tok () Term)

; </end encoding val FStar.Monotonic.Heap.addr_of_gref_of>


; <Start encoding val FStar.Monotonic.Heap.is_mm_gref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.is_mm_gref_of (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.is_mm_gref_of@tok () Term)

; </end encoding val FStar.Monotonic.Heap.is_mm_gref_of>


; <Start encoding val FStar.Monotonic.Heap.unused_in_gref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.unused_in_gref_of (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.unused_in_gref_of@tok () Term)

; </end encoding val FStar.Monotonic.Heap.unused_in_gref_of>


; <Start encoding val FStar.Monotonic.Heap.sel_ref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.sel_ref_of (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.sel_ref_of@tok () Term)

; </end encoding val FStar.Monotonic.Heap.sel_ref_of>


; <Start encoding val FStar.Monotonic.Heap.upd_ref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.upd_ref_of (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.upd_ref_of@tok () Term)

; </end encoding val FStar.Monotonic.Heap.upd_ref_of>


; End Externals for interface FStar.Monotonic.Heap


; Externals for module FStar.Heap


; <Start encoding let trivial_rel>

(declare-fun FStar.Heap.trivial_rel (Term) Term)
(declare-fun Tm_arrow_5e933b4711265943ba4bba734363561b () Term)
(declare-fun FStar.Heap.trivial_rel@tok () Term)

(declare-fun Tm_abs_568747eb5009c1dec504311dee989dc2 (Term) Term)

; </end encoding let trivial_rel>


; <Start encoding let trivial_preorder>

(declare-fun FStar.Heap.trivial_preorder (Term) Term)
(declare-fun Tm_arrow_1a6db055683d4a5b8a00786676e339b5 () Term)
(declare-fun FStar.Heap.trivial_preorder@tok () Term)

; </end encoding let trivial_preorder>


; <Start encoding let ref>

(declare-fun FStar.Heap.ref (Term) Term)

(declare-fun FStar.Heap.ref@tok () Term)

; </end encoding let ref>


; End Externals for module FStar.Heap


; Externals for module FStar.ST


; <Skipped new_effect { GST ... }/>


; <Start encoding let gst_pre>

(declare-fun FStar.ST.gst_pre () Term)

; </end encoding let gst_pre>


; <Start encoding let gst_post'>

(declare-fun FStar.ST.gst_post_ (Term Term) Term)

(declare-fun FStar.ST.gst_post_@tok () Term)

; </end encoding let gst_post'>


; <Start encoding let gst_post>

(declare-fun FStar.ST.gst_post (Term) Term)

(declare-fun FStar.ST.gst_post@tok () Term)

; </end encoding let gst_post>


; <Start encoding let gst_wp>

(declare-fun FStar.ST.gst_wp (Term) Term)

(declare-fun FStar.ST.gst_wp@tok () Term)

; </end encoding let gst_wp>


; <Start encoding let lift_div_gst>

(declare-fun FStar.ST.lift_div_gst (Term Term Term Term) Term)
(declare-fun Tm_arrow_bbaeef6680f54609c0f7c85c1ba1bd3c () Term)
(declare-fun FStar.ST.lift_div_gst@tok () Term)



; </end encoding let lift_div_gst>


; <Skipped sub_effect DIV ~> GST/>


; <Start encoding let heap_rel>

(declare-fun FStar.ST.heap_rel (Term Term) Term)
(declare-fun Tm_arrow_3ffd8da3a1b4fb5a75e097e2a7ead7a9 () Term)
(declare-fun FStar.ST.heap_rel@tok () Term)

; </end encoding let heap_rel>


; <Start encoding val FStar.ST.gst_get>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.gst_get (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.gst_get@tok () Term)

; </end encoding val FStar.ST.gst_get>


; <Start encoding val FStar.ST.gst_put>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.gst_put (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.gst_put@tok () Term)

; </end encoding val FStar.ST.gst_put>


; <Start encoding let heap_predicate>

(declare-fun FStar.ST.heap_predicate () Term)
(declare-fun Tm_arrow_c4185f52507383203d0d6335fd0332a8 () Term)

; </end encoding let heap_predicate>


; <Start encoding let stable>

(declare-fun FStar.ST.stable (Term) Term)
(declare-fun Tm_arrow_6fabddab2e8badc7a54f2fce30469fd3 () Term)
(declare-fun FStar.ST.stable@tok () Term)

; </end encoding let stable>


; <Start encoding let witnessed>

(declare-fun Tm_refine_a11098d99239284f14b49e1dd0266896 () Term)
(declare-fun FStar.ST.witnessed (Term) Term)

(declare-fun Tm_arrow_eda1223bb1d06bd92699e8c3d8f9251d () Term)
(declare-fun FStar.ST.witnessed@tok () Term)

; </end encoding let witnessed>


; <Start encoding val FStar.ST.gst_witness>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.gst_witness (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.gst_witness@tok () Term)

; </end encoding val FStar.ST.gst_witness>


; <Start encoding val FStar.ST.gst_recall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.gst_recall (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.gst_recall@tok () Term)

; </end encoding val FStar.ST.gst_recall>


; <Skipped val FStar.ST.lemma_functoriality/>


; <Start encoding let lemma_functoriality>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.lemma_functoriality (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.lemma_functoriality@tok () Term)

; </end encoding let lemma_functoriality>


; <Start encoding let st_pre>

(declare-fun FStar.ST.st_pre () Term)

; </end encoding let st_pre>


; <Start encoding let st_post'>

(declare-fun FStar.ST.st_post_ (Term Term) Term)

(declare-fun FStar.ST.st_post_@tok () Term)

; </end encoding let st_post'>


; <Start encoding let st_post>

(declare-fun FStar.ST.st_post (Term) Term)

(declare-fun FStar.ST.st_post@tok () Term)

; </end encoding let st_post>


; <Start encoding let st_wp>

(declare-fun FStar.ST.st_wp (Term) Term)

(declare-fun FStar.ST.st_wp@tok () Term)

; </end encoding let st_wp>


; <Skipped new_effect { STATE ... }/>


; <Start encoding let lift_gst_state>

(declare-fun FStar.ST.lift_gst_state (Term Term) Term)
(declare-fun Tm_arrow_9f8aa176b7421939c7ff58d9777d1285 () Term)
(declare-fun FStar.ST.lift_gst_state@tok () Term)

; </end encoding let lift_gst_state>


; <Skipped sub_effect GST ~> STATE/>


; <Skipped effect State a wp = FStar.ST.STATE a/>


; <Skipped effect ST a pre post = FStar.ST.STATE a/>


; <Skipped effect St a = FStar.ST.ST a/>


; <Start encoding let contains_pred>

(declare-fun FStar.ST.contains_pred (Term Term Term Term) Term)

(declare-fun FStar.ST.contains_pred@tok () Term)

; </end encoding let contains_pred>


; <Start encoding let mref>

(declare-fun FStar.ST.mref (Term Term) Term)

(declare-fun FStar.ST.mref@tok () Term)
(declare-fun Tm_refine_e33ef751d600ad1c7f71142479103c47 (Term Term) Term)

; </end encoding let mref>


; <Start encoding let recall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.recall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.recall@tok () Term)

; </end encoding let recall>


; <Start encoding let alloc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.alloc (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.alloc@tok () Term)

; </end encoding let alloc>


; <Start encoding let read>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.read (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.read@tok () Term)

; </end encoding let read>


; <Start encoding let write>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.write (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.write@tok () Term)

; </end encoding let write>


; <Start encoding let get>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.get (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.get@tok () Term)

; </end encoding let get>


; <Start encoding let op_Bang>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.op_Bang (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.op_Bang@tok () Term)

; </end encoding let op_Bang>


; <Start encoding let op_Colon_Equals>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.op_Colon_Equals (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.op_Colon_Equals@tok () Term)

; </end encoding let op_Colon_Equals>


; <Start encoding let ref>

(declare-fun FStar.ST.ref (Term) Term)

(declare-fun FStar.ST.ref@tok () Term)

; </end encoding let ref>


; <Start encoding let modifies_none>

(declare-fun FStar.ST.modifies_none (Term Term) Term)

(declare-fun FStar.ST.modifies_none@tok () Term)

; </end encoding let modifies_none>


; End Externals for module FStar.ST


; Externals for interface MonotonicArray


; <Start encoding val MonotonicArray.t>

(declare-fun MonotonicArray.t (Term Term) Term)

(declare-fun MonotonicArray.t@tok () Term)

; </end encoding val MonotonicArray.t>


; <Start encoding val MonotonicArray.mutable_pred>

(declare-fun MonotonicArray.mutable_pred (Term Term Term) Term)

;;;;;;;;;;;;;;;;x: t a n -> p: FStar.ST.heap_predicate{FStar.ST.stable p}
(declare-fun Tm_arrow_09fc25d15316641be584bb1e0516ce66 () Term)
(declare-fun MonotonicArray.mutable_pred@tok () Term)


; </end encoding val MonotonicArray.mutable_pred>


; <Start encoding val MonotonicArray.freezable_pred>

(declare-fun MonotonicArray.freezable_pred (Term Term Term) Term)


(declare-fun MonotonicArray.freezable_pred@tok () Term)


; </end encoding val MonotonicArray.freezable_pred>


; <Start encoding let farray>

(declare-fun MonotonicArray.farray (Term Term) Term)

(declare-fun MonotonicArray.farray@tok () Term)
(declare-fun Tm_refine_0abd72348a3d48e6b5024703275bc79a (Term Term) Term)

; </end encoding let farray>


; <Start encoding let array>

(declare-fun MonotonicArray.array (Term Term) Term)

(declare-fun MonotonicArray.array@tok () Term)
(declare-fun Tm_refine_f984cba283a0017499e468d307a8fd1d (Term Term) Term)

; </end encoding let array>


; <Start encoding val MonotonicArray.is_full_array>

(declare-fun MonotonicArray.is_full_array (Term Term Term) Term)
;;;;;;;;;;;;;;;;arr: t a n -> Prims.bool
(declare-fun Tm_arrow_a5f2f5d58d861d02e0a515aebc0f816d () Term)
(declare-fun MonotonicArray.is_full_array@tok () Term)

; </end encoding val MonotonicArray.is_full_array>


; <Start encoding val MonotonicArray.array_footprint>

(declare-fun MonotonicArray.array_footprint (Term Term Term) Term)
;;;;;;;;;;;;;;;;arr: t a n -> Prims.GTot (FStar.Set.set Prims.nat)
(declare-fun Tm_ghost_arrow_9a26606f89666ef0b8324dd4eb49bcd3 () Term)
(declare-fun MonotonicArray.array_footprint@tok () Term)

; </end encoding val MonotonicArray.array_footprint>


; <Start encoding val MonotonicArray.contains_array>

(declare-fun MonotonicArray.contains_array (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;h: FStar.Monotonic.Heap.heap -> arr: t a n -> Type
(declare-fun Tm_arrow_95a9ca9863afc925a0f524d00fadf482 () Term)
(declare-fun MonotonicArray.contains_array@tok () Term)

; </end encoding val MonotonicArray.contains_array>


; <Start encoding val MonotonicArray.is_mutable>

(declare-fun MonotonicArray.is_mutable (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;arr: t a n -> h: FStar.Monotonic.Heap.heap -> Type
(declare-fun Tm_arrow_83560f10a5050a31e63ecbeb0e89d5f6 () Term)
(declare-fun MonotonicArray.is_mutable@tok () Term)

; </end encoding val MonotonicArray.is_mutable>


; <Start encoding let fresh_arr>

(declare-fun MonotonicArray.fresh_arr (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;arr: t a n -> h0: FStar.Monotonic.Heap.heap -> h1: FStar.Monotonic.Heap.heap -> Prims.logical
(declare-fun Tm_arrow_8238481365ee847c808b95d0dbffa79c () Term)
(declare-fun MonotonicArray.fresh_arr@tok () Term)

; </end encoding let fresh_arr>


; <Start encoding val MonotonicArray.fcreate>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MonotonicArray.fcreate (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MonotonicArray.fcreate@tok () Term)

; </end encoding val MonotonicArray.fcreate>


; <Start encoding val MonotonicArray.create>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MonotonicArray.create (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MonotonicArray.create@tok () Term)

; </end encoding val MonotonicArray.create>


; <Start encoding let index>

(declare-fun MonotonicArray.index (Term Term Term) Term)
;;;;;;;;;;;;;;;;arr: t a n -> Type
(declare-fun Tm_arrow_e6f8526667b99d97731d4f2c437c293d () Term)
(declare-fun MonotonicArray.index@tok () Term)


; </end encoding let index>


; <Start encoding val MonotonicArray.as_seq>

(declare-fun MonotonicArray.as_seq (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;arr: t a n -> h: FStar.Monotonic.Heap.heap   -> Prims.GTot (FStar.Seq.Base.seq (FStar.Pervasives.Native.option a))
(declare-fun Tm_ghost_arrow_3814b074199f4224dbba68127a2889ed () Term)
(declare-fun MonotonicArray.as_seq@tok () Term)

; </end encoding val MonotonicArray.as_seq>


; <Start encoding val MonotonicArray.lemma_as_seq_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MonotonicArray.lemma_as_seq_length (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MonotonicArray.lemma_as_seq_length@tok () Term)

; </end encoding val MonotonicArray.lemma_as_seq_length>


; <Start encoding val MonotonicArray.init_at_arr>

(declare-fun MonotonicArray.init_at_arr (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;arr: t a n -> i: index arr -> h: FStar.Monotonic.Heap.heap -> Type
(declare-fun Tm_arrow_3c6b31201daca655ae46bb09046bef0c () Term)
(declare-fun MonotonicArray.init_at_arr@tok () Term)

; </end encoding val MonotonicArray.init_at_arr>


; <Start encoding val MonotonicArray.initialized>

(declare-fun MonotonicArray.initialized (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;arr: t a n -> i: index arr -> p: FStar.ST.heap_predicate{FStar.ST.stable p}
(declare-fun Tm_arrow_462a632c82aa449ed8f64cd8168fbe42 () Term)
(declare-fun MonotonicArray.initialized@tok () Term)


; </end encoding val MonotonicArray.initialized>


; <Start encoding val MonotonicArray.init_at>

(declare-fun MonotonicArray.init_at (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;arr: t a n -> i: index arr -> Type
(declare-fun Tm_arrow_5cd185c69d3472d5b074574e1bd7afab () Term)
(declare-fun MonotonicArray.init_at@tok () Term)

; </end encoding val MonotonicArray.init_at>


; <Start encoding val MonotonicArray.frozen_bit>

(declare-fun MonotonicArray.frozen_bit (Term Term Term Term) Term)

(declare-fun MonotonicArray.frozen_bit@tok () Term)

; </end encoding val MonotonicArray.frozen_bit>


; <Start encoding val MonotonicArray.frozen_pred>

(declare-fun MonotonicArray.frozen_pred (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;arr: t a n -> s: FStar.Ghost.erased (FStar.Seq.Base.seq a)   -> p: FStar.ST.heap_predicate{FStar.ST.stable p}
(declare-fun Tm_arrow_565a62bf2327a34d30d8e5a593fc2d77 () Term)
(declare-fun MonotonicArray.frozen_pred@tok () Term)


; </end encoding val MonotonicArray.frozen_pred>


; <Start encoding val MonotonicArray.frozen_with>

(declare-fun MonotonicArray.frozen_with (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;arr: t a n -> s: FStar.Ghost.erased (FStar.Seq.Base.seq a) -> Type
(declare-fun Tm_arrow_b9267d60b4b505cdb058e4da4dce848f () Term)
(declare-fun MonotonicArray.frozen_with@tok () Term)

; </end encoding val MonotonicArray.frozen_with>


; <Start encoding val MonotonicArray.freeze>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MonotonicArray.freeze (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MonotonicArray.freeze@tok () Term)

; </end encoding val MonotonicArray.freeze>


; <Start encoding val MonotonicArray.read>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MonotonicArray.read (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MonotonicArray.read@tok () Term)

; </end encoding val MonotonicArray.read>


; <Start encoding val MonotonicArray.write>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MonotonicArray.write (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MonotonicArray.write@tok () Term)

; </end encoding val MonotonicArray.write>


; <Start encoding val MonotonicArray.fwrite>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MonotonicArray.fwrite (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MonotonicArray.fwrite@tok () Term)

; </end encoding val MonotonicArray.fwrite>


; <Start encoding val MonotonicArray.sub>

(declare-fun Tm_refine_6f684e27d6af9965634108bcfe981953 (Term Term) Term)
(declare-fun MonotonicArray.sub (Term Term Term Term Term) Term)

;;;;;;;;;;;;;;;;arr: t a n -> i: Prims.nat -> len: Prims.nat{i + len <= n} -> t a len
(declare-fun Tm_arrow_016f766169ad41fb077951476152bf92 () Term)
(declare-fun MonotonicArray.sub@tok () Term)

; </end encoding val MonotonicArray.sub>


; <Start encoding let suffix>

(declare-fun Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d (Term) Term)
(declare-fun MonotonicArray.suffix (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;arr: t a n -> i: Prims.nat{i <= n} -> t a (n - i)
(declare-fun Tm_arrow_156d280c2a6cd39459ab5d92ab2a7ea5 () Term)
(declare-fun MonotonicArray.suffix@tok () Term)


; </end encoding let suffix>


; <Start encoding let prefix>


(declare-fun MonotonicArray.prefix (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;arr: t a n -> i: Prims.nat{i <= n} -> t a i
(declare-fun Tm_arrow_95f0c502f18989026fc976da969bc12e () Term)
(declare-fun MonotonicArray.prefix@tok () Term)


; </end encoding let prefix>


; <Start encoding val MonotonicArray.lemma_sub_preserves_array_mutable_flag>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MonotonicArray.lemma_sub_preserves_array_mutable_flag (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MonotonicArray.lemma_sub_preserves_array_mutable_flag@tok () Term)


; </end encoding val MonotonicArray.lemma_sub_preserves_array_mutable_flag>


; <Start encoding val MonotonicArray.lemma_sub_preserves_array_freezable_flag>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MonotonicArray.lemma_sub_preserves_array_freezable_flag (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MonotonicArray.lemma_sub_preserves_array_freezable_flag@tok () Term)


; </end encoding val MonotonicArray.lemma_sub_preserves_array_freezable_flag>


; <Start encoding val MonotonicArray.lemma_sub_is_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MonotonicArray.lemma_sub_is_slice (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MonotonicArray.lemma_sub_is_slice@tok () Term)


; </end encoding val MonotonicArray.lemma_sub_is_slice>


; <Start encoding val MonotonicArray.lemma_sub_footprint>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MonotonicArray.lemma_sub_footprint (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MonotonicArray.lemma_sub_footprint@tok () Term)


; </end encoding val MonotonicArray.lemma_sub_footprint>


; <Start encoding val MonotonicArray.lemma_sub_contains>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MonotonicArray.lemma_sub_contains (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MonotonicArray.lemma_sub_contains@tok () Term)


; </end encoding val MonotonicArray.lemma_sub_contains>


; <Start encoding val MonotonicArray.lemma_sub_is_mutable>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MonotonicArray.lemma_sub_is_mutable (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MonotonicArray.lemma_sub_is_mutable@tok () Term)


; </end encoding val MonotonicArray.lemma_sub_is_mutable>


; <Start encoding val MonotonicArray.lemma_sub_frozen>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MonotonicArray.lemma_sub_frozen (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MonotonicArray.lemma_sub_frozen@tok () Term)

(declare-fun Tm_refine_3878595f5207dee091872a4537eb7af7 (Term Term Term) Term)

; </end encoding val MonotonicArray.lemma_sub_frozen>


; <Start encoding val MonotonicArray.lemma_sub_init_at>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MonotonicArray.lemma_sub_init_at (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MonotonicArray.lemma_sub_init_at@tok () Term)
(declare-fun Tm_refine_81607a3aa49a257c80978da6415b0769 (Term Term Term) Term)
(declare-fun Tm_refine_07d42d481cf119dc0746fa408e885a96 (Term Term Term Term) Term)
(declare-fun Tm_refine_45b45690e95d6d557b24b79ee0491da4 (Term Term Term) Term)

; </end encoding val MonotonicArray.lemma_sub_init_at>


; <Start encoding val MonotonicArray.recall_init>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MonotonicArray.recall_init (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MonotonicArray.recall_init@tok () Term)

; </end encoding val MonotonicArray.recall_init>


; <Start encoding val MonotonicArray.recall_frozen>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MonotonicArray.recall_frozen (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MonotonicArray.recall_frozen@tok () Term)

; </end encoding val MonotonicArray.recall_frozen>


; <Start encoding val MonotonicArray.recall_contains>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MonotonicArray.recall_contains (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MonotonicArray.recall_contains@tok () Term)

; </end encoding val MonotonicArray.recall_contains>


; <Start encoding val MonotonicArray.lemma_frozen_implies_init_at>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MonotonicArray.lemma_frozen_implies_init_at (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MonotonicArray.lemma_frozen_implies_init_at@tok () Term)


; </end encoding val MonotonicArray.lemma_frozen_implies_init_at>


; <Start encoding let all_init_i_j>

(declare-fun Tm_refine_ba560d8a941cf6251ebf4b60a86ab6b7 (Term Term) Term)
(declare-fun MonotonicArray.all_init_i_j (Term Term Term Term Term) Term)

;;;;;;;;;;;;;;;;arr: t a n -> i: Prims.nat -> j: Prims.nat{j >= i /\ j <= n} -> Type
(declare-fun Tm_arrow_9110dceeeacc04e7237de01463e8e04a () Term)
(declare-fun MonotonicArray.all_init_i_j@tok () Term)


; </end encoding let all_init_i_j>


; <Start encoding let all_init>

(declare-fun MonotonicArray.all_init (Term Term Term) Term)

(declare-fun MonotonicArray.all_init@tok () Term)

; </end encoding let all_init>


; <Start encoding let init_arr_in_heap_i_j>


(declare-fun MonotonicArray.init_arr_in_heap_i_j (Term Term Term Term Term Term) Term)

;;;;;;;;;;;;;;;;arr: t a n -> h: FStar.Monotonic.Heap.heap -> i: Prims.nat -> j: Prims.nat{j >= i /\ j <= n} -> Type
(declare-fun Tm_arrow_d1e6fdd72af38822b46ad7f998cbfed7 () Term)
(declare-fun MonotonicArray.init_arr_in_heap_i_j@tok () Term)


; </end encoding let init_arr_in_heap_i_j>


; <Start encoding let init_arr_in_heap>

(declare-fun MonotonicArray.init_arr_in_heap (Term Term Term Term) Term)

(declare-fun MonotonicArray.init_arr_in_heap@tok () Term)

; </end encoding let init_arr_in_heap>


; <Start encoding val MonotonicArray.recall_all_init_i_j>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MonotonicArray.recall_all_init_i_j (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MonotonicArray.recall_all_init_i_j@tok () Term)

; </end encoding val MonotonicArray.recall_all_init_i_j>


; <Start encoding val MonotonicArray.recall_all_init>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MonotonicArray.recall_all_init (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MonotonicArray.recall_all_init@tok () Term)

; </end encoding val MonotonicArray.recall_all_init>


; <Start encoding val MonotonicArray.witness_all_init_i_j>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MonotonicArray.witness_all_init_i_j (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MonotonicArray.witness_all_init_i_j@tok () Term)

; </end encoding val MonotonicArray.witness_all_init_i_j>


; <Start encoding val MonotonicArray.witness_all_init>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MonotonicArray.witness_all_init (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MonotonicArray.witness_all_init@tok () Term)

; </end encoding val MonotonicArray.witness_all_init>


; <Start encoding let as_initialized_seq>

(declare-fun Tm_refine_4183060ba5404f285780b6cf19647e32 (Term Term Term) Term)
(declare-fun MonotonicArray.as_initialized_seq (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;arr: t a n -> h: FStar.Monotonic.Heap.heap{init_arr_in_heap arr h}   -> Prims.GTot (FStar.Seq.Base.seq a)
(declare-fun Tm_ghost_arrow_731f179b625ea26bb9e0e861337eb128 () Term)
(declare-fun MonotonicArray.as_initialized_seq@tok () Term)


; </end encoding let as_initialized_seq>


; <Start encoding let as_initialized_subseq>

(declare-fun Tm_refine_a2bea900bf9c6309aac9131f4b0fc594 (Term Term Term Term Term) Term)
(declare-fun MonotonicArray.as_initialized_subseq (Term Term Term Term Term Term) Term)

;;;;;;;;;;;;;;;;arr: t a n ->     h: FStar.Monotonic.Heap.heap ->     i: Prims.nat ->     j: Prims.nat{j >= i /\ j <= n /\ init_arr_in_heap_i_j arr h i j}   -> Prims.GTot (FStar.Seq.Base.seq a)
(declare-fun Tm_ghost_arrow_cbe657de7c61cb8a28e85dfb233c64eb () Term)
(declare-fun MonotonicArray.as_initialized_subseq@tok () Term)


; </end encoding let as_initialized_subseq>


; <Start encoding val MonotonicArray.read_subseq_i_j>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MonotonicArray.read_subseq_i_j (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MonotonicArray.read_subseq_i_j@tok () Term)

; </end encoding val MonotonicArray.read_subseq_i_j>


; <Start encoding val MonotonicArray.lemma_framing_of_is_mutable>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MonotonicArray.lemma_framing_of_is_mutable (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MonotonicArray.lemma_framing_of_is_mutable@tok () Term)

; </end encoding val MonotonicArray.lemma_framing_of_is_mutable>


; <Start encoding val MonotonicArray.lemma_framing_of_as_seq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MonotonicArray.lemma_framing_of_as_seq (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MonotonicArray.lemma_framing_of_as_seq@tok () Term)

; </end encoding val MonotonicArray.lemma_framing_of_as_seq>


; <Start encoding val MonotonicArray.lemma_all_init_i_j_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MonotonicArray.lemma_all_init_i_j_sub (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MonotonicArray.lemma_all_init_i_j_sub@tok () Term)
(declare-fun Tm_refine_841a7dab4e44e4e07aab6383c1e10f2e (Term Term) Term)


; </end encoding val MonotonicArray.lemma_all_init_i_j_sub>


; <Start encoding val MonotonicArray.disjoint_sibling>

(declare-fun MonotonicArray.disjoint_sibling (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;arr1: t a n1 -> arr2: t a n2 -> Type
(declare-fun Tm_arrow_0bb7e01c4bfa0e0fd7982e1b685a182d () Term)
(declare-fun MonotonicArray.disjoint_sibling@tok () Term)

; </end encoding val MonotonicArray.disjoint_sibling>


; <Start encoding val MonotonicArray.lemma_disjoint_sibling_suffix_prefix>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MonotonicArray.lemma_disjoint_sibling_suffix_prefix (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MonotonicArray.lemma_disjoint_sibling_suffix_prefix@tok () Term)

; </end encoding val MonotonicArray.lemma_disjoint_sibling_suffix_prefix>


; <Start encoding let disjoint_siblings_remain_same>

(declare-fun MonotonicArray.disjoint_siblings_remain_same (Term Term Term Term Term) Term)

(declare-fun MonotonicArray.disjoint_siblings_remain_same@tok () Term)

; </end encoding let disjoint_siblings_remain_same>


; <Start encoding val MonotonicArray.lemma_disjoint_sibling_remain_same_for_unrelated_mods>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MonotonicArray.lemma_disjoint_sibling_remain_same_for_unrelated_mods (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MonotonicArray.lemma_disjoint_sibling_remain_same_for_unrelated_mods@tok () Term)

; </end encoding val MonotonicArray.lemma_disjoint_sibling_remain_same_for_unrelated_mods>


; <Start encoding val MonotonicArray.lemma_disjoint_sibling_remain_same_transitive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MonotonicArray.lemma_disjoint_sibling_remain_same_transitive (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MonotonicArray.lemma_disjoint_sibling_remain_same_transitive@tok () Term)

; </end encoding val MonotonicArray.lemma_disjoint_sibling_remain_same_transitive>


; <Start encoding val MonotonicArray.fill>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MonotonicArray.fill (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MonotonicArray.fill@tok () Term)

; </end encoding val MonotonicArray.fill>


; <Start encoding val MonotonicArray.ffill>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun MonotonicArray.ffill (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun MonotonicArray.ffill@tok () Term)

; </end encoding val MonotonicArray.ffill>


; End Externals for interface MonotonicArray

(push) ;; push{1

; Internals for Protocol


; encoding sigelt let lemma_seq_append_unstable


; <Start encoding let lemma_seq_append_unstable>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Protocol.lemma_seq_append_unstable (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Protocol.lemma_seq_append_unstable@tok () Term)

; </end encoding let lemma_seq_append_unstable>


; encoding sigelt val Protocol.fragment_size


; <Start encoding val Protocol.fragment_size>

(declare-fun Protocol.fragment_size (Dummy_sort) Term)

; </end encoding val Protocol.fragment_size>


; encoding sigelt val Protocol.byte


; <Start encoding val Protocol.byte>

(declare-fun Protocol.byte () Term)

; </end encoding val Protocol.byte>


; encoding sigelt val Protocol.zero_b


; <Start encoding val Protocol.zero_b>

(declare-fun Protocol.zero_b (Dummy_sort) Term)

; </end encoding val Protocol.zero_b>


; encoding sigelt let message


; <Start encoding let message>

(declare-fun Protocol.message () Term)
(declare-fun Tm_refine_8cf65a0e984801514f164a721568601b () Term)

; </end encoding let message>


; encoding sigelt let network_message


; <Start encoding let network_message>

(declare-fun Protocol.network_message () Term)
(declare-fun Tm_refine_84f2654672d0a3698a905d302d0b961d () Term)

; </end encoding let network_message>


; encoding sigelt let randomness


; <Start encoding let randomness>

(declare-fun Protocol.randomness () Term)
;;;;;;;;;;;;;;;;_: Prims.nat -> network_message
(declare-fun Tm_arrow_c4ab2f2abbb10d1c3c06f26d3c3abf61 () Term)

; </end encoding let randomness>


; encoding sigelt val Protocol.xor


; <Start encoding val Protocol.xor>

(declare-fun Protocol.xor (Term Term) Term)
;;;;;;;;;;;;;;;;_: network_message -> _: network_message -> network_message
(declare-fun Tm_arrow_e345df17276cf7d43c6a4d53c9fe098f () Term)
(declare-fun Protocol.xor@tok () Term)

; </end encoding val Protocol.xor>


; encoding sigelt val Protocol.lemma_xor


; <Start encoding val Protocol.lemma_xor>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Protocol.lemma_xor (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Protocol.lemma_xor@tok () Term)

; </end encoding val Protocol.lemma_xor>


; encoding sigelt val Protocol.zeroes


; <Skipped val Protocol.zeroes/>


; encoding sigelt let zeroes


; <Start encoding let zeroes>

(declare-fun Protocol.zeroes (Term) Term)
(declare-fun Tm_refine_837d13d4049ad183b630251f6b46706f (Term) Term)
;;;;;;;;;;;;;;;;n: Prims.nat -> s: FStar.Seq.Base.seq byte {FStar.Seq.Base.length s = n}
(declare-fun Tm_arrow_2973ab8c824a0bf9e34dc463728ce1b5 () Term)
(declare-fun Protocol.zeroes@tok () Term)


; </end encoding let zeroes>


; encoding sigelt let pad


; <Start encoding let pad>

(declare-fun Protocol.pad (Term) Term)
;;;;;;;;;;;;;;;;m: message -> network_message
(declare-fun Tm_arrow_7abdaa3b388dbd16488e320d892a25a8 () Term)
(declare-fun Protocol.pad@tok () Term)

; </end encoding let pad>


; encoding sigelt val Protocol.unpad


; <Start encoding val Protocol.unpad>

(declare-fun Protocol.unpad (Term) Term)
(declare-fun Tm_refine_3b9763d82ad2baac359719326e79aa55 (Term) Term)
;;;;;;;;;;;;;;;;s: network_message   -> r:     (Prims.nat & message)       { FStar.Seq.Base.length (FStar.Pervasives.Native.snd r) = FStar.Pervasives.Native.fst r /\         s == pad (FStar.Pervasives.Native.snd r) }
(declare-fun Tm_arrow_75fad87c7ff23913f31228c2a6fd7b21 () Term)
(declare-fun Protocol.unpad@tok () Term)


; </end encoding val Protocol.unpad>


; encoding sigelt val Protocol.lemma_pad_unpad


; <Start encoding val Protocol.lemma_pad_unpad>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Protocol.lemma_pad_unpad (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Protocol.lemma_pad_unpad@tok () Term)

; </end encoding val Protocol.lemma_pad_unpad>


; encoding sigelt val Protocol.mac


; <Start encoding val Protocol.mac>

(declare-fun Protocol.mac (Term Term) Term)
;;;;;;;;;;;;;;;;cipher: network_message -> i: Prims.nat -> FStar.Seq.Base.seq byte
(declare-fun Tm_arrow_e131d2e4e535aafc97fd4f8b3cc3e5d6 () Term)
(declare-fun Protocol.mac@tok () Term)

; </end encoding val Protocol.mac>


; encoding sigelt type Protocol.entry


; <Start encoding type Protocol.entry>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Protocol.entry (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Protocol.entry@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Protocol.E (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Protocol.E_rand (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Protocol.E_i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Protocol.E_msg (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Protocol.E_cipher (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Protocol.E_tag (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Protocol.E
(declare-fun Protocol.E@tok () Term)
(declare-fun Tm_refine_6261f1452b3e7c2df9d267c7f3d29bd3 (Term Term Term) Term)
(declare-fun Tm_refine_e6768a2f8034f46d4298bc352297ab17 (Term Term) Term)


;;;;;;;;;;;;;;;;i: Prims.nat ->     msg: message ->     cipher: network_message{xor (pad msg) (rand i) == cipher} ->     tag: FStar.Seq.Base.seq byte {tag == mac cipher i}   -> entry rand
(declare-fun Tm_arrow_6cd1800d8aeb0825e5e392136f94324d () Term)

; <start constructor Protocol.entry>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Protocol.entry ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
128)
(exists ((@x0 Term))
 (! (= __@x0
(Protocol.entry @x0))
 
;;no pats
:qid is-Protocol.entry))))

; </end constructor Protocol.entry>


; <start constructor Protocol.E>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Protocol.E ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
137)
(= __@x0
(Protocol.E (Protocol.E_rand __@x0)
(Protocol.E_i __@x0)
(Protocol.E_msg __@x0)
(Protocol.E_cipher __@x0)
(Protocol.E_tag __@x0)))))

; </end constructor Protocol.E>


; </end encoding type Protocol.entry>


; encoding sigelt val Protocol.uu___is_E


; <Start encoding val Protocol.uu___is_E>

(declare-fun Protocol.uu___is_E (Term Term) Term)
;;;;;;;;;;;;;;;;projectee: entry rand -> Prims.bool
(declare-fun Tm_arrow_e47fc37c7cb3cf5a1a254fd2b7a610bc () Term)
(declare-fun Protocol.uu___is_E@tok () Term)

; </end encoding val Protocol.uu___is_E>


; encoding sigelt let uu___is_E


; <Skipped let uu___is_E/>


; encoding sigelt val Protocol.__proj__E__item__i


; <Start encoding val Protocol.__proj__E__item__i>

(declare-fun Protocol.__proj__E__item__i (Term Term) Term)
;;;;;;;;;;;;;;;;projectee: entry rand -> Prims.nat
(declare-fun Tm_arrow_9b5b940f18c03c7444e59140c1354393 () Term)
(declare-fun Protocol.__proj__E__item__i@tok () Term)

; </end encoding val Protocol.__proj__E__item__i>


; encoding sigelt let __proj__E__item__i


; <Skipped let __proj__E__item__i/>


; encoding sigelt val Protocol.__proj__E__item__msg


; <Start encoding val Protocol.__proj__E__item__msg>

(declare-fun Protocol.__proj__E__item__msg (Term Term) Term)
;;;;;;;;;;;;;;;;projectee: entry rand -> message
(declare-fun Tm_arrow_c365b38575451af86ccdb8d0926d39d0 () Term)
(declare-fun Protocol.__proj__E__item__msg@tok () Term)

; </end encoding val Protocol.__proj__E__item__msg>


; encoding sigelt let __proj__E__item__msg


; <Skipped let __proj__E__item__msg/>


; encoding sigelt val Protocol.__proj__E__item__cipher


; <Start encoding val Protocol.__proj__E__item__cipher>

(declare-fun Protocol.__proj__E__item__cipher (Term Term) Term)
(declare-fun Tm_refine_fc5e8c1ea1d73a44adede890f3588579 (Term Term) Term)
;;;;;;;;;;;;;;;;projectee: entry rand   -> cipher: network_message{xor (pad projectee.msg) (rand projectee.i) == cipher}
(declare-fun Tm_arrow_0c657c755035f596d0eab9121565aa88 () Term)
(declare-fun Protocol.__proj__E__item__cipher@tok () Term)


; </end encoding val Protocol.__proj__E__item__cipher>


; encoding sigelt let __proj__E__item__cipher


; <Skipped let __proj__E__item__cipher/>


; encoding sigelt val Protocol.__proj__E__item__tag


; <Start encoding val Protocol.__proj__E__item__tag>

(declare-fun Protocol.__proj__E__item__tag (Term Term) Term)
(declare-fun Tm_refine_816b2eace640393e825c4f39ff9fa479 (Term Term) Term)
;;;;;;;;;;;;;;;;projectee: entry rand -> tag: FStar.Seq.Base.seq byte {tag == mac projectee.cipher projectee.i}
(declare-fun Tm_arrow_2f7fbe14a1d944bed4262138122c830a () Term)
(declare-fun Protocol.__proj__E__item__tag@tok () Term)


; </end encoding val Protocol.__proj__E__item__tag>


; encoding sigelt let __proj__E__item__tag


; <Skipped let __proj__E__item__tag/>


; encoding sigelt let entries


; <Start encoding let entries>

(declare-fun Protocol.entries (Term) Term)
;;;;;;;;;;;;;;;;rand: randomness -> Type
(declare-fun Tm_arrow_163c5a633e56521a1d7a19ca4aac3359 () Term)
(declare-fun Protocol.entries@tok () Term)
(declare-fun Tm_refine_c52766f1ffb36bccccc81ae2f2d192be (Term) Term)

; </end encoding let entries>


; encoding sigelt let is_prefix_of


; <Start encoding let is_prefix_of>

(declare-fun Protocol.is_prefix_of (Term Term Term) Term)

(declare-fun Protocol.is_prefix_of@tok () Term)

; </end encoding let is_prefix_of>


; encoding sigelt let entries_rel


; <Start encoding let entries_rel>

(declare-fun Protocol.entries_rel (Term) Term)
;;;;;;;;;;;;;;;;rand: randomness -> FStar.Preorder.relation (entries rand)
(declare-fun Tm_arrow_f21d0556409fe465a52cbcb37a4d805a () Term)
(declare-fun Protocol.entries_rel@tok () Term)
;;;;;;;;;;;;;;;;es1: entries rand -> es2: entries rand -> Type
(declare-fun Tm_arrow_6b407af9af3e3c176b95011816cf31c0 (Term) Term)
(declare-fun Tm_abs_41efd131336ec34ef1b819bed745d3d1 (Term) Term)

; </end encoding let entries_rel>


; encoding sigelt let entries_pre


; <Start encoding let entries_pre>

(declare-fun Protocol.entries_pre (Term) Term)
;;;;;;;;;;;;;;;;rand: randomness -> FStar.Preorder.preorder (entries rand)
(declare-fun Tm_arrow_dd6ef07c831c24029a556199b3328734 () Term)
(declare-fun Protocol.entries_pre@tok () Term)

; </end encoding let entries_pre>


; encoding sigelt let counter_pred


; <Start encoding let counter_pred>

(declare-fun Protocol.counter_pred (Term Term Term) Term)

;;;;;;;;;;;;;;;;n: Prims.nat -> es_ref: FStar.ST.mref (entries rand) (entries_rel rand)   -> p: FStar.ST.heap_predicate{FStar.ST.stable p}
(declare-fun Tm_arrow_e52c663a0276620d60281a270ca412d3 () Term)
(declare-fun Protocol.counter_pred@tok () Term)


(declare-fun Tm_abs_545607f5016b8a9efe7d1f635f16c449 (Term Term Term) Term)

; </end encoding let counter_pred>


; encoding sigelt let counter_t


; <Start encoding let counter_t>

(declare-fun Protocol.counter_t (Term Term) Term)
;;;;;;;;;;;;;;;;es_ref: FStar.ST.mref (entries rand) (entries_rel rand) -> Type
(declare-fun Tm_arrow_e6fdd65962f2fe3087921e81059a6f84 () Term)
(declare-fun Protocol.counter_t@tok () Term)
(declare-fun Tm_refine_931dcd8377a7c87ea65f2ca091543de1 (Term Term) Term)

; </end encoding let counter_t>


; encoding sigelt let counter_rel


; <Start encoding let counter_rel>

(declare-fun Protocol.counter_rel (Term Term) Term)
;;;;;;;;;;;;;;;;es_ref: FStar.ST.mref (entries rand) (entries_rel rand)   -> FStar.Preorder.relation (counter_t es_ref)
(declare-fun Tm_arrow_f0e8a4fd61ff1e01fe641b58d7d3c8e3 () Term)
(declare-fun Protocol.counter_rel@tok () Term)
;;;;;;;;;;;;;;;;n1: counter_t es_ref -> n2: counter_t es_ref -> Type
(declare-fun Tm_arrow_ec89ee75ecc09ae37ba2c37ec85a4d5a (Term Term) Term)
(declare-fun Tm_abs_7bb1aca7f565f38c176c14dd92322edb (Term Term) Term)

; </end encoding let counter_rel>


; encoding sigelt let counter_pre


; <Start encoding let counter_pre>

(declare-fun Protocol.counter_pre (Term Term) Term)
;;;;;;;;;;;;;;;;es_ref: FStar.ST.mref (entries rand) (entries_rel rand)   -> FStar.Preorder.preorder (counter_t es_ref)
(declare-fun Tm_arrow_8809eaf13afee4a0062f168f8bd27ba4 () Term)
(declare-fun Protocol.counter_pre@tok () Term)

; </end encoding let counter_pre>


; encoding sigelt type Protocol.connection


; <Start encoding type Protocol.connection>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Protocol.connection () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Protocol.S (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Protocol.S_rand (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Protocol.S_entries (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Protocol.S
(declare-fun Protocol.S@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Protocol.R (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Protocol.R_rand (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Protocol.R_entries (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Protocol.R_ctr (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Protocol.R
(declare-fun Protocol.R@tok () Term)
;;;;;;;;;;;;;;;;rand: randomness -> entries: FStar.ST.mref (entries rand) (entries_rel rand) -> connection
(declare-fun Tm_arrow_d291a101666799e25ad33f9a5ee712e5 () Term)
;;;;;;;;;;;;;;;;rand: randomness ->     entries: FStar.ST.mref (entries rand) (entries_rel rand) ->     ctr: FStar.ST.mref (counter_t entries) (counter_pre entries)   -> connection
(declare-fun Tm_arrow_ed89c8833a4905cb26f7f065e574db1c () Term)

; <start constructor Protocol.connection>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Protocol.connection ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
185)
(= __@x0
Protocol.connection)))

; </end constructor Protocol.connection>


; <start constructor Protocol.S>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Protocol.S ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
191)
(= __@x0
(Protocol.S (Protocol.S_rand __@x0)
(Protocol.S_entries __@x0)))))

; </end constructor Protocol.S>


; <start constructor Protocol.R>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Protocol.R ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
196)
(= __@x0
(Protocol.R (Protocol.R_rand __@x0)
(Protocol.R_entries __@x0)
(Protocol.R_ctr __@x0)))))

; </end constructor Protocol.R>


; </end encoding type Protocol.connection>


; encoding sigelt val Protocol.uu___is_S


; <Start encoding val Protocol.uu___is_S>

(declare-fun Protocol.uu___is_S (Term) Term)
;;;;;;;;;;;;;;;;projectee: connection -> Prims.bool
(declare-fun Tm_arrow_3781e88e154abe2aeadcea61b670939c () Term)
(declare-fun Protocol.uu___is_S@tok () Term)

; </end encoding val Protocol.uu___is_S>


; encoding sigelt let uu___is_S


; <Skipped let uu___is_S/>


; encoding sigelt val Protocol.__proj__S__item__rand


; <Start encoding val Protocol.__proj__S__item__rand>

(declare-fun Tm_refine_e6ab7d7d11fd937f30ad6128228c18b5 () Term)
(declare-fun Protocol.__proj__S__item__rand (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: connection{S? _} -> randomness
(declare-fun Tm_arrow_100b784557dc6aedc165521ad8ca7555 () Term)
(declare-fun Protocol.__proj__S__item__rand@tok () Term)

; </end encoding val Protocol.__proj__S__item__rand>


; encoding sigelt let __proj__S__item__rand


; <Skipped let __proj__S__item__rand/>


; encoding sigelt val Protocol.__proj__S__item__entries


; <Start encoding val Protocol.__proj__S__item__entries>


(declare-fun Protocol.__proj__S__item__entries (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: connection{S? _}   -> FStar.ST.mref (entries projectee.rand) (entries_rel projectee.rand)
(declare-fun Tm_arrow_44129f3b053e12ba1ef68ec6f2dedc5c () Term)
(declare-fun Protocol.__proj__S__item__entries@tok () Term)

; </end encoding val Protocol.__proj__S__item__entries>


; encoding sigelt let __proj__S__item__entries


; <Skipped let __proj__S__item__entries/>


; encoding sigelt val Protocol.uu___is_R


; <Start encoding val Protocol.uu___is_R>

(declare-fun Protocol.uu___is_R (Term) Term)

(declare-fun Protocol.uu___is_R@tok () Term)

; </end encoding val Protocol.uu___is_R>


; encoding sigelt let uu___is_R


; <Skipped let uu___is_R/>


; encoding sigelt val Protocol.__proj__R__item__rand


; <Start encoding val Protocol.__proj__R__item__rand>

(declare-fun Tm_refine_1515f8c9bed8836c1665cbcf6953f9bb () Term)
(declare-fun Protocol.__proj__R__item__rand (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: connection{R? _} -> randomness
(declare-fun Tm_arrow_17d7c4586eba7c4d440b709e9696a088 () Term)
(declare-fun Protocol.__proj__R__item__rand@tok () Term)

; </end encoding val Protocol.__proj__R__item__rand>


; encoding sigelt let __proj__R__item__rand


; <Skipped let __proj__R__item__rand/>


; encoding sigelt val Protocol.__proj__R__item__entries


; <Start encoding val Protocol.__proj__R__item__entries>


(declare-fun Protocol.__proj__R__item__entries (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: connection{R? _}   -> FStar.ST.mref (entries projectee.rand) (entries_rel projectee.rand)
(declare-fun Tm_arrow_a23e939c92f94bdee05a6abc61a061e4 () Term)
(declare-fun Protocol.__proj__R__item__entries@tok () Term)

; </end encoding val Protocol.__proj__R__item__entries>


; encoding sigelt let __proj__R__item__entries


; <Skipped let __proj__R__item__entries/>


; encoding sigelt val Protocol.__proj__R__item__ctr


; <Start encoding val Protocol.__proj__R__item__ctr>


(declare-fun Protocol.__proj__R__item__ctr (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: connection{R? _}   -> FStar.ST.mref (counter_t projectee.entries) (counter_pre projectee.entries)
(declare-fun Tm_arrow_25ada138b9d61f47bdfd45551785ac0c () Term)
(declare-fun Protocol.__proj__R__item__ctr@tok () Term)

; </end encoding val Protocol.__proj__R__item__ctr>


; encoding sigelt let __proj__R__item__ctr


; <Skipped let __proj__R__item__ctr/>


; encoding sigelt let rand_of


; <Start encoding let rand_of>

(declare-fun Protocol.rand_of (Term) Term)
;;;;;;;;;;;;;;;;c: connection -> randomness
(declare-fun Tm_arrow_11fff577ff8fbda3c2a0e4a788ce3681 () Term)
(declare-fun Protocol.rand_of@tok () Term)

; </end encoding let rand_of>


; encoding sigelt let entries_of


; <Start encoding let entries_of>

(declare-fun Protocol.entries_of (Term) Term)
;;;;;;;;;;;;;;;;c: connection -> FStar.ST.mref (entries (rand_of c)) (entries_rel (rand_of c))
(declare-fun Tm_arrow_058cd713aaaac8ebea5300679b20ba32 () Term)
(declare-fun Protocol.entries_of@tok () Term)

; </end encoding let entries_of>


; encoding sigelt let live_connection


; <Start encoding let live_connection>

(declare-fun Protocol.live_connection (Term Term) Term)
;;;;;;;;;;;;;;;;h: FStar.Monotonic.Heap.heap -> c: connection -> Type
(declare-fun Tm_arrow_1f49aa015ed09b0f34c19613a0f43ffd () Term)
(declare-fun Protocol.live_connection@tok () Term)

; </end encoding let live_connection>


; encoding sigelt let recall_connection_liveness


; <Start encoding let recall_connection_liveness>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Protocol.recall_connection_liveness (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Protocol.recall_connection_liveness@tok () Term)

; </end encoding let recall_connection_liveness>


; encoding sigelt let lemma_sel_entries_equals_sel_tot_entries


; <Start encoding let lemma_sel_entries_equals_sel_tot_entries>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Protocol.lemma_sel_entries_equals_sel_tot_entries (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Protocol.lemma_sel_entries_equals_sel_tot_entries@tok () Term)

; </end encoding let lemma_sel_entries_equals_sel_tot_entries>


; encoding sigelt let lemma_sel_ctr_ref_equals_sel_tot_ctr_ref


; <Start encoding let lemma_sel_ctr_ref_equals_sel_tot_ctr_ref>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Protocol.lemma_sel_ctr_ref_equals_sel_tot_ctr_ref (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Protocol.lemma_sel_ctr_ref_equals_sel_tot_ctr_ref@tok () Term)


; </end encoding let lemma_sel_ctr_ref_equals_sel_tot_ctr_ref>


; encoding sigelt let log


; <Start encoding let log>

(declare-fun Tm_refine_12e73119c459be812384fdc8e6c9733a (Term) Term)
(declare-fun Protocol.log (Term Term) Term)

;;;;;;;;;;;;;;;;c: connection -> h: FStar.Monotonic.Heap.heap{live_connection h c} -> FStar.Seq.Base.seq message
(declare-fun Tm_arrow_283cfa73efa9327146fa00f1e60c98f0 () Term)
(declare-fun Protocol.log@tok () Term)

;;;;;;;;;;;;;;;;_: entry (rand_of c) -> message
(declare-fun Tm_arrow_bbf9c13f2e1689774c895427eb4d7c9a (Term) Term)
(declare-fun Tm_abs_1f17782d7f15dca3aa2da1fe8e018a7e (Term) Term)

; </end encoding let log>


; encoding sigelt let lemma_prefix_entries_implies_prefix_log


; <Start encoding let lemma_prefix_entries_implies_prefix_log>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Protocol.lemma_prefix_entries_implies_prefix_log (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Protocol.lemma_prefix_entries_implies_prefix_log@tok () Term)
(declare-fun Tm_refine_3d0c21849d5cf8d118afc092733f14a4 (Term Term) Term)

; </end encoding let lemma_prefix_entries_implies_prefix_log>


; encoding sigelt let ctr


; <Start encoding let ctr>


(declare-fun Protocol.ctr (Term Term) Term)

;;;;;;;;;;;;;;;;c: connection -> h: FStar.Monotonic.Heap.heap{live_connection h c} -> Prims.nat
(declare-fun Tm_arrow_95f58183abcb17a389f27e3d37f3c2c0 () Term)
(declare-fun Protocol.ctr@tok () Term)


; </end encoding let ctr>


; encoding sigelt let recall_counter


; <Start encoding let recall_counter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Protocol.recall_counter (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Protocol.recall_counter@tok () Term)

; </end encoding let recall_counter>


; encoding sigelt let snapshot


; <Start encoding let snapshot>


(declare-fun Protocol.snapshot (Term Term) Term)


;;;;;;;;;;;;;;;;c: connection -> h0: FStar.Monotonic.Heap.heap{live_connection h0 c}   -> p: FStar.ST.heap_predicate{FStar.ST.stable p}
(declare-fun Tm_arrow_de94845fba7258da2bd0423bda8b2128 () Term)
(declare-fun Protocol.snapshot@tok () Term)



(declare-fun Tm_abs_eeabe0e6e5ca3e7a109fddadcd4aea2e (Term Term) Term)

; </end encoding let snapshot>


; encoding sigelt let snap


; <Start encoding let snap>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Protocol.snap (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Protocol.snap@tok () Term)

; </end encoding let snap>


; encoding sigelt let iarray


; <Start encoding let iarray>

(declare-fun Protocol.iarray (Term Term) Term)

(declare-fun Protocol.iarray@tok () Term)
(declare-fun Tm_refine_9dd2f7dc4f1c13136a80acee9d90b531 (Term Term) Term)

; </end encoding let iarray>


; encoding sigelt let sender


; <Start encoding let sender>

(declare-fun Protocol.sender (Term) Term)

(declare-fun Protocol.sender@tok () Term)

; </end encoding let sender>


; encoding sigelt let receiver


; <Start encoding let receiver>

(declare-fun Protocol.receiver (Term) Term)

(declare-fun Protocol.receiver@tok () Term)

; </end encoding let receiver>


; encoding sigelt let connection_footprint


; <Start encoding let connection_footprint>

(declare-fun Protocol.connection_footprint (Term) Term)
;;;;;;;;;;;;;;;;c: connection -> Prims.GTot (FStar.Set.set Prims.nat)
(declare-fun Tm_ghost_arrow_30441ca13825c5e85cc31fc6fa8c6428 () Term)
(declare-fun Protocol.connection_footprint@tok () Term)

; </end encoding let connection_footprint>


; encoding sigelt let lemma_snoc_log


; <Start encoding let lemma_snoc_log>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Protocol.lemma_snoc_log (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Protocol.lemma_snoc_log@tok () Term)

; </end encoding let lemma_snoc_log>


; encoding sigelt val Protocol.network_send


; <Start encoding val Protocol.network_send>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Protocol.network_send (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Protocol.network_send@tok () Term)

; </end encoding val Protocol.network_send>


; encoding sigelt #set-options "--z3rlimit 50"


; <Skipped #set-options "--z3rlimit 50"/>


; encoding sigelt let send


; <Start encoding let send>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Protocol.send (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Protocol.send@tok () Term)

; </end encoding let send>


; encoding sigelt let ciphers


; <Start encoding let ciphers>

(declare-fun Protocol.ciphers (Term Term) Term)
;;;;;;;;;;;;;;;;c: connection -> h: FStar.Monotonic.Heap.heap -> Prims.GTot (FStar.Seq.Base.seq network_message)
(declare-fun Tm_ghost_arrow_cc8f89b9c58c70e93e6cf03048605a06 () Term)
(declare-fun Protocol.ciphers@tok () Term)

; </end encoding let ciphers>


; encoding sigelt val Protocol.network_receive


; <Start encoding val Protocol.network_receive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Protocol.network_receive (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Protocol.network_receive@tok () Term)

; </end encoding val Protocol.network_receive>


; encoding sigelt let modifies_r


; <Start encoding let modifies_r>

(declare-fun Tm_refine_e478ac71fa1875d2f6d4c23ab44e0977 () Term)
(declare-fun Protocol.modifies_r (Term Term Term Term Term) Term)

;;;;;;;;;;;;;;;;c: connection{receiver c} ->     arr: MonotonicArray.array byte n ->     h0: FStar.Monotonic.Heap.heap ->     h1: FStar.Monotonic.Heap.heap   -> Type
(declare-fun Tm_arrow_caa8ab0d86fd9e608f8941bebf579412 () Term)
(declare-fun Protocol.modifies_r@tok () Term)


; </end encoding let modifies_r>


; encoding sigelt val Protocol.verify


; <Start encoding val Protocol.verify>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Protocol.verify (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Protocol.verify@tok () Term)

; </end encoding val Protocol.verify>


; encoding sigelt #push-options "--z3rlimit 50"


; <Skipped #push-options "--z3rlimit 50"/>


; encoding sigelt let receive


; <Start encoding let receive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Protocol.receive (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Protocol.receive@tok () Term)

; </end encoding let receive>


; encoding sigelt #pop-options


; <Skipped #pop-options/>


; encoding sigelt let lemma_is_prefix_of_slice


; <Start encoding let lemma_is_prefix_of_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Protocol.lemma_is_prefix_of_slice (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Protocol.lemma_is_prefix_of_slice@tok () Term)
(declare-fun Tm_refine_6472b0a877e3e824d44d3d3f19ad04e0 (Term Term) Term)


; </end encoding let lemma_is_prefix_of_slice>


; encoding sigelt val Protocol.flatten


; <Start encoding val Protocol.flatten>

(declare-fun Protocol.flatten (Term) Term)
;;;;;;;;;;;;;;;;s: FStar.Seq.Base.seq message -> FStar.Seq.Base.seq byte
(declare-fun Tm_arrow_96286a7e0fd6e0de0b9d80b635a84e72 () Term)
(declare-fun Protocol.flatten@tok () Term)

; </end encoding val Protocol.flatten>


; encoding sigelt val Protocol.lemma_flatten_snoc


; <Start encoding val Protocol.lemma_flatten_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Protocol.lemma_flatten_snoc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Protocol.lemma_flatten_snoc@tok () Term)

; </end encoding val Protocol.lemma_flatten_snoc>


; encoding sigelt val Protocol.flatten_empty


; <Start encoding val Protocol.flatten_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Protocol.flatten_empty (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Protocol.flatten_empty@tok () Term)

; </end encoding val Protocol.flatten_empty>


; encoding sigelt let sent_bytes'


; <Start encoding let sent_bytes'>

(declare-fun Tm_refine_571d9f74016be5357787170b42ecf913 (Term) Term)
(declare-fun Protocol.sent_bytes_ (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;file: FStar.Seq.Base.seq byte -> c: connection -> from: Prims.nat -> to: Prims.nat{from <= to}   -> FStar.ST.heap_predicate
(declare-fun Tm_arrow_5e9971af8bac379862fd838c714c44eb () Term)
(declare-fun Protocol.sent_bytes_@tok () Term)


(declare-fun Tm_abs_7f6e09c57851a655e400606396618bbe (Term Term Term Term) Term)

; </end encoding let sent_bytes'>


; encoding sigelt let sent_bytes


; <Start encoding let sent_bytes>


(declare-fun Protocol.sent_bytes (Term Term Term Term) Term)


;;;;;;;;;;;;;;;;file: FStar.Seq.Base.seq byte -> c: connection -> from: Prims.nat -> to: Prims.nat{from <= to}   -> p: FStar.ST.heap_predicate{FStar.ST.stable p}
(declare-fun Tm_arrow_3e187eafe9783f35170bfb0700f6d487 () Term)
(declare-fun Protocol.sent_bytes@tok () Term)



; </end encoding let sent_bytes>


; encoding sigelt let sent


; <Start encoding let sent>

(declare-fun Protocol.sent (Term Term) Term)
;;;;;;;;;;;;;;;;file: FStar.Seq.Base.seq byte -> c: connection -> Prims.logical
(declare-fun Tm_arrow_cb8cfac6fdbab61ac77a5f2aa7d8cd94 () Term)
(declare-fun Protocol.sent@tok () Term)


; </end encoding let sent>


; encoding sigelt #set-options "--z3rlimit 20"


; <Skipped #set-options "--z3rlimit 20"/>


; encoding sigelt let iarray_as_seq


; <Start encoding let iarray_as_seq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Protocol.iarray_as_seq (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Protocol.iarray_as_seq@tok () Term)

; </end encoding let iarray_as_seq>


; encoding sigelt let fully_initialized_in


; <Start encoding let fully_initialized_in>

(declare-fun Protocol.fully_initialized_in (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;x: MonotonicArray.array a n -> h: FStar.Monotonic.Heap.heap -> Prims.logical
(declare-fun Tm_arrow_20a0fa05127326d1da010c79b550dd2f () Term)
(declare-fun Protocol.fully_initialized_in@tok () Term)

; </end encoding let fully_initialized_in>


; encoding sigelt let subseq_suffix


; <Start encoding let subseq_suffix>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Protocol.subseq_suffix (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Protocol.subseq_suffix@tok () Term)

; </end encoding let subseq_suffix>


; encoding sigelt let slice_snoc


; <Start encoding let slice_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Protocol.slice_snoc (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Protocol.slice_snoc@tok () Term)

; </end encoding let slice_snoc>


; encoding sigelt let slice_snoc2


; <Start encoding let slice_snoc2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Protocol.slice_snoc2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Protocol.slice_snoc2@tok () Term)

; </end encoding let slice_snoc2>


; encoding sigelt #push-options "--z3rlimit 100"


; <Skipped #push-options "--z3rlimit 100"/>


; encoding sigelt let append_subseq


; <Start encoding let append_subseq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Protocol.append_subseq (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Protocol.append_subseq@tok () Term)

; </end encoding let append_subseq>


; encoding sigelt #pop-options


; <Skipped #pop-options/>


; encoding sigelt let lemma_sender_connection_ctr_equals_length_log


; <Start encoding let lemma_sender_connection_ctr_equals_length_log>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Protocol.lemma_sender_connection_ctr_equals_length_log (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Protocol.lemma_sender_connection_ctr_equals_length_log@tok () Term)

; </end encoding let lemma_sender_connection_ctr_equals_length_log>


; encoding sigelt #push-options "--z3rlimit 200 --max_fuel 0 --max_ifuel 0"


; <Skipped #push-options "--z3rlimit 200 --max_fuel 0 --max_ifuel 0"/>


; encoding sigelt val Protocol.send_aux


; <Skipped val Protocol.send_aux/>


; encoding sigelt #restart-solver


; <Skipped #restart-solver/>

;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.__cache_version_number__; Namespace Prims
(assert (! (HasType Prims.__cache_version_number__
Prims.int)
:named function_token_typing_Prims.__cache_version_number__))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Monotonic.Heap.lemma_mref_injectivity; Namespace FStar.Monotonic.Heap
(assert (! (HasType FStar.Monotonic.Heap.lemma_mref_injectivity
Tm_refine_e1adf49e5e772ddffa19181e1a812a81)
:named function_token_typing_FStar.Monotonic.Heap.lemma_mref_injectivity))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Monotonic.Heap.lemma_mref_injectivity; Namespace FStar.Monotonic.Heap
(assert (! (HasType FStar.Monotonic.Heap.lemma_mref_injectivity
Tm_refine_e1adf49e5e772ddffa19181e1a812a81)
:named typing_FStar.Monotonic.Heap.lemma_mref_injectivity))
;;;;;;;;;;;;;;;;well-founded ordering on nat (alt)
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Prims.int)
(HasTypeFuel @u0
@x2
Prims.int)
(> (BoxInt_proj_0 @x1)
0)
(>= (BoxInt_proj_0 @x2)
0)
(< (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x1)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
@x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.int) (HasTypeFuel @u0
@x2
Prims.int) (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
@x1)))
:qid well-founded-ordering-on-nat))
:named well-founded-ordering-on-nat))
;;;;;;;;;;;;;;;;unit typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Tm_unit
Prims.unit)
:named unit_typing))
;;;;;;;;;;;;;;;;unit inversion
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.unit)
(= @x1
Tm_unit))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.unit))
:qid unit_inversion))
:named unit_inversion))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (HasType Prims.T@tok
Prims.trivial)
:named typing_tok_Prims.T@tok))
;;;;;;;;;;;;;;;;typing_Tm_abs_7f6e09c57851a655e400606396618bbe
;;; Fact-ids: Name Protocol.sent_bytes'; Namespace Protocol
(assert (! 
;; def=Protocol.fst(336,13-339,44); use=Protocol.fst(336,13-339,44)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_abs_7f6e09c57851a655e400606396618bbe @x0
@x1
@x2
@x3)
Tm_arrow_c4185f52507383203d0d6335fd0332a8)
 

:pattern ((Tm_abs_7f6e09c57851a655e400606396618bbe @x0
@x1
@x2
@x3))
:qid typing_Tm_abs_7f6e09c57851a655e400606396618bbe))

:named typing_Tm_abs_7f6e09c57851a655e400606396618bbe))
;;;;;;;;;;;;;;;;typing_Tm_abs_7bb1aca7f565f38c176c14dd92322edb
;;; Fact-ids: Name Protocol.counter_rel; Namespace Protocol
(assert (! 
;; def=Protocol.fst(96,17-96,31); use=Protocol.fst(96,17-96,31)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_abs_7bb1aca7f565f38c176c14dd92322edb @x0
@x1)
(Tm_arrow_ec89ee75ecc09ae37ba2c37ec85a4d5a @x0
@x1))
 

:pattern ((Tm_abs_7bb1aca7f565f38c176c14dd92322edb @x0
@x1))
:qid typing_Tm_abs_7bb1aca7f565f38c176c14dd92322edb))

:named typing_Tm_abs_7bb1aca7f565f38c176c14dd92322edb))
;;;;;;;;;;;;;;;;typing_Tm_abs_545607f5016b8a9efe7d1f635f16c449
;;; Fact-ids: Name Protocol.counter_pred; Namespace Protocol
(assert (! 
;; def=Protocol.fst(88,13-88,62); use=Protocol.fst(88,13-88,62)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_abs_545607f5016b8a9efe7d1f635f16c449 @x0
@x1
@x2)
Tm_arrow_c4185f52507383203d0d6335fd0332a8)
 

:pattern ((Tm_abs_545607f5016b8a9efe7d1f635f16c449 @x0
@x1
@x2))
:qid typing_Tm_abs_545607f5016b8a9efe7d1f635f16c449))

:named typing_Tm_abs_545607f5016b8a9efe7d1f635f16c449))
;;;;;;;;;;;;;;;;typing_Tm_abs_41efd131336ec34ef1b819bed745d3d1
;;; Fact-ids: Name Protocol.entries_rel; Namespace Protocol
(assert (! 
;; def=Protocol.fst(82,47-82,69); use=Protocol.fst(82,47-82,69)
(forall ((@x0 Term))
 (! (HasType (Tm_abs_41efd131336ec34ef1b819bed745d3d1 @x0)
(Tm_arrow_6b407af9af3e3c176b95011816cf31c0 @x0))
 

:pattern ((Tm_abs_41efd131336ec34ef1b819bed745d3d1 @x0))
:qid typing_Tm_abs_41efd131336ec34ef1b819bed745d3d1))

:named typing_Tm_abs_41efd131336ec34ef1b819bed745d3d1))
;;;;;;;;;;;;;;;;typing_Tm_abs_1f17782d7f15dca3aa2da1fe8e018a7e
;;; Fact-ids: Name Protocol.log; Namespace Protocol
(assert (! 
;; def=Protocol.fst(141,41-141,42); use=Protocol.fst(141,41-141,42)
(forall ((@x0 Term))
 (! (HasType (Tm_abs_1f17782d7f15dca3aa2da1fe8e018a7e @x0)
(Tm_arrow_bbf9c13f2e1689774c895427eb4d7c9a @x0))
 

:pattern ((Tm_abs_1f17782d7f15dca3aa2da1fe8e018a7e @x0))
:qid typing_Tm_abs_1f17782d7f15dca3aa2da1fe8e018a7e))

:named typing_Tm_abs_1f17782d7f15dca3aa2da1fe8e018a7e))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.zeroes; Namespace Protocol
(assert (! 
;; def=Protocol.fst(55,4-55,10); use=Protocol.fst(55,4-55,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.nat)
(HasType (Protocol.zeroes @x0)
(Tm_refine_837d13d4049ad183b630251f6b46706f @x0)))
 

:pattern ((Protocol.zeroes @x0))
:qid typing_Protocol.zeroes))

:named typing_Protocol.zeroes))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.zero_b; Namespace Protocol
(assert (! 
;; def=Protocol.fst(38,11-38,17); use=Protocol.fst(38,11-38,17)
(forall ((@u0 Dummy_sort))
 (! (HasType (Protocol.zero_b @u0)
Protocol.byte)
 

:pattern ((Protocol.zero_b @u0))
:qid typing_Protocol.zero_b))

:named typing_Protocol.zero_b))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.xor; Namespace Protocol
(assert (! 
;; def=Protocol.fst(47,11-47,14); use=Protocol.fst(47,11-47,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Protocol.network_message)
(HasType @x1
Protocol.network_message))
(HasType (Protocol.xor @x0
@x1)
Protocol.network_message))
 

:pattern ((Protocol.xor @x0
@x1))
:qid typing_Protocol.xor))

:named typing_Protocol.xor))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.uu___is_S; Namespace Protocol
(assert (! 
;; def=Protocol.fst(102,4-102,5); use=Protocol.fst(102,4-102,5)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Protocol.connection)
(HasType (Protocol.uu___is_S @x0)
Prims.bool))
 

:pattern ((Protocol.uu___is_S @x0))
:qid typing_Protocol.uu___is_S))

:named typing_Protocol.uu___is_S))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.uu___is_R; Namespace Protocol
(assert (! 
;; def=Protocol.fst(103,4-103,5); use=Protocol.fst(103,4-103,5)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Protocol.connection)
(HasType (Protocol.uu___is_R @x0)
Prims.bool))
 

:pattern ((Protocol.uu___is_R @x0))
:qid typing_Protocol.uu___is_R))

:named typing_Protocol.uu___is_R))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.sent_bytes'; Namespace Protocol
(assert (! 
;; def=Protocol.fst(335,4-335,15); use=Protocol.fst(335,4-335,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
(FStar.Seq.Base.seq Protocol.byte))
(HasType @x1
Protocol.connection)
(HasType @x2
Prims.nat)
(HasType @x3
(Tm_refine_571d9f74016be5357787170b42ecf913 @x2)))
(HasType (Protocol.sent_bytes_ @x0
@x1
@x2
@x3)
FStar.ST.heap_predicate))
 

:pattern ((Protocol.sent_bytes_ @x0
@x1
@x2
@x3))
:qid typing_Protocol.sent_bytes_))

:named typing_Protocol.sent_bytes_))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.sent_bytes; Namespace Protocol
(assert (! 
;; def=Protocol.fst(341,4-341,14); use=Protocol.fst(341,4-341,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
(FStar.Seq.Base.seq Protocol.byte))
(HasType @x1
Protocol.connection)
(HasType @x2
Prims.nat)
(HasType @x3
(Tm_refine_571d9f74016be5357787170b42ecf913 @x2)))
(HasType (Protocol.sent_bytes @x0
@x1
@x2
@x3)
Tm_refine_a11098d99239284f14b49e1dd0266896))
 

:pattern ((Protocol.sent_bytes @x0
@x1
@x2
@x3))
:qid typing_Protocol.sent_bytes))

:named typing_Protocol.sent_bytes))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.sender; Namespace Protocol
(assert (! 
;; def=Protocol.fst(177,4-177,10); use=Protocol.fst(177,4-177,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Protocol.connection)
(HasType (Protocol.sender @x0)
Prims.bool))
 

:pattern ((Protocol.sender @x0))
:qid typing_Protocol.sender))

:named typing_Protocol.sender))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.receiver; Namespace Protocol
(assert (! 
;; def=Protocol.fst(178,4-178,12); use=Protocol.fst(178,4-178,12)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Protocol.connection)
(HasType (Protocol.receiver @x0)
Prims.bool))
 

:pattern ((Protocol.receiver @x0))
:qid typing_Protocol.receiver))

:named typing_Protocol.receiver))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.randomness; Namespace Protocol
(assert (! (HasType Protocol.randomness
Tm_type)
:named typing_Protocol.randomness))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.rand_of; Namespace Protocol
(assert (! 
;; def=Protocol.fst(106,4-106,11); use=Protocol.fst(106,4-106,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Protocol.connection)
(HasType (Protocol.rand_of @x0)
Protocol.randomness))
 

:pattern ((Protocol.rand_of @x0))
:qid typing_Protocol.rand_of))

:named typing_Protocol.rand_of))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.pad; Namespace Protocol
(assert (! 
;; def=Protocol.fst(57,4-57,7); use=Protocol.fst(57,4-57,7)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Protocol.message)
(HasType (Protocol.pad @x0)
Protocol.network_message))
 

:pattern ((Protocol.pad @x0))
:qid typing_Protocol.pad))

:named typing_Protocol.pad))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.network_message; Namespace Protocol
(assert (! (HasType Protocol.network_message
Tm_type)
:named typing_Protocol.network_message))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.message; Namespace Protocol
(assert (! (HasType Protocol.message
Tm_type)
:named typing_Protocol.message))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.mac; Namespace Protocol
(assert (! 
;; def=Protocol.fst(66,11-66,14); use=Protocol.fst(66,11-66,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Protocol.network_message)
(HasType @x1
Prims.nat))
(HasType (Protocol.mac @x0
@x1)
(FStar.Seq.Base.seq Protocol.byte)))
 

:pattern ((Protocol.mac @x0
@x1))
:qid typing_Protocol.mac))

:named typing_Protocol.mac))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.log; Namespace Protocol
(assert (! 
;; def=Protocol.fst(140,4-140,7); use=Protocol.fst(140,4-140,7)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Protocol.connection)
(HasType @x1
(Tm_refine_12e73119c459be812384fdc8e6c9733a @x0)))
(HasType (Protocol.log @x0
@x1)
(FStar.Seq.Base.seq Protocol.message)))
 

:pattern ((Protocol.log @x0
@x1))
:qid typing_Protocol.log))

:named typing_Protocol.log))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.live_connection; Namespace Protocol
(assert (! 
;; def=Protocol.fst(116,4-116,19); use=Protocol.fst(116,4-116,19)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
FStar.Monotonic.Heap.heap)
(HasType @x1
Protocol.connection))
(HasType (Protocol.live_connection @x0
@x1)
Tm_type))
 

:pattern ((Protocol.live_connection @x0
@x1))
:qid typing_Protocol.live_connection))

:named typing_Protocol.live_connection))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.is_prefix_of; Namespace Protocol
(assert (! 
;; def=Protocol.fst(76,4-76,16); use=Protocol.fst(76,4-76,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
(FStar.Seq.Base.seq @x0)))
(HasType (Protocol.is_prefix_of @x0
@x1
@x2)
Tm_type))
 

:pattern ((Protocol.is_prefix_of @x0
@x1
@x2))
:qid typing_Protocol.is_prefix_of))

:named typing_Protocol.is_prefix_of))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.iarray; Namespace Protocol
(assert (! 
;; def=Protocol.fst(175,5-175,11); use=Protocol.fst(175,5-175,11)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat))
(HasType (Protocol.iarray @x0
@x1)
Tm_type))
 

:pattern ((Protocol.iarray @x0
@x1))
:qid typing_Protocol.iarray))

:named typing_Protocol.iarray))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.fully_initialized_in; Namespace Protocol
(assert (! 
;; def=Protocol.fst(357,4-357,24); use=Protocol.fst(357,4-357,24)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.array @x0
@x1))
(HasType @x3
FStar.Monotonic.Heap.heap))
(HasType (Protocol.fully_initialized_in @x0
@x1
@x2
@x3)
Prims.logical))
 

:pattern ((Protocol.fully_initialized_in @x0
@x1
@x2
@x3))
:qid typing_Protocol.fully_initialized_in))

:named typing_Protocol.fully_initialized_in))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.fragment_size; Namespace Protocol
(assert (! 
;; def=Protocol.fst(35,11-35,24); use=Protocol.fst(35,11-35,24)
(forall ((@u0 Dummy_sort))
 (! (HasType (Protocol.fragment_size @u0)
Prims.nat)
 

:pattern ((Protocol.fragment_size @u0))
:qid typing_Protocol.fragment_size))

:named typing_Protocol.fragment_size))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.flatten; Namespace Protocol
(assert (! 
;; def=Protocol.fst(325,11-325,18); use=Protocol.fst(325,11-325,18)
(forall ((@x0 Term))
 (! (implies (HasType @x0
(FStar.Seq.Base.seq Protocol.message))
(HasType (Protocol.flatten @x0)
(FStar.Seq.Base.seq Protocol.byte)))
 

:pattern ((Protocol.flatten @x0))
:qid typing_Protocol.flatten))

:named typing_Protocol.flatten))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.entries_rel; Namespace Protocol
(assert (! 
;; def=Protocol.fst(81,4-81,15); use=Protocol.fst(81,4-81,15)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Protocol.randomness)
(HasType (Protocol.entries_rel @x0)
(FStar.Preorder.relation (Protocol.entries @x0))))
 

:pattern ((Protocol.entries_rel @x0))
:qid typing_Protocol.entries_rel))

:named typing_Protocol.entries_rel))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.entries_of; Namespace Protocol
(assert (! 
;; def=Protocol.fst(111,4-111,14); use=Protocol.fst(111,4-111,14)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Protocol.connection)
(HasType (Protocol.entries_of @x0)
(FStar.ST.mref (Protocol.entries (Protocol.rand_of @x0))
(Protocol.entries_rel (Protocol.rand_of @x0)))))
 

:pattern ((Protocol.entries_of @x0))
:qid typing_Protocol.entries_of))

:named typing_Protocol.entries_of))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.entries; Namespace Protocol
(assert (! 
;; def=Protocol.fst(74,5-74,12); use=Protocol.fst(74,5-74,12)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Protocol.randomness)
(HasType (Protocol.entries @x0)
Tm_type))
 

:pattern ((Protocol.entries @x0))
:qid typing_Protocol.entries))

:named typing_Protocol.entries))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.ctr; Namespace Protocol
(assert (! 
;; def=Protocol.fst(151,4-151,7); use=Protocol.fst(151,4-151,7)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Protocol.connection)
(HasType @x1
(Tm_refine_12e73119c459be812384fdc8e6c9733a @x0)))
(HasType (Protocol.ctr @x0
@x1)
Prims.nat))
 

:pattern ((Protocol.ctr @x0
@x1))
:qid typing_Protocol.ctr))

:named typing_Protocol.ctr))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.counter_t; Namespace Protocol
(assert (! 
;; def=Protocol.fst(91,5-91,14); use=Protocol.fst(91,5-91,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Protocol.randomness)
(HasType @x1
(FStar.ST.mref (Protocol.entries @x0)
(Protocol.entries_rel @x0))))
(HasType (Protocol.counter_t @x0
@x1)
Tm_type))
 

:pattern ((Protocol.counter_t @x0
@x1))
:qid typing_Protocol.counter_t))

:named typing_Protocol.counter_t))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.counter_rel; Namespace Protocol
(assert (! 
;; def=Protocol.fst(95,4-95,15); use=Protocol.fst(95,4-95,15)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Protocol.randomness)
(HasType @x1
(FStar.ST.mref (Protocol.entries @x0)
(Protocol.entries_rel @x0))))
(HasType (Protocol.counter_rel @x0
@x1)
(FStar.Preorder.relation (Protocol.counter_t @x0
@x1))))
 

:pattern ((Protocol.counter_rel @x0
@x1))
:qid typing_Protocol.counter_rel))

:named typing_Protocol.counter_rel))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.counter_pred; Namespace Protocol
(assert (! 
;; def=Protocol.fst(87,4-87,16); use=Protocol.fst(87,4-87,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Protocol.randomness)
(HasType @x1
Prims.nat)
(HasType @x2
(FStar.ST.mref (Protocol.entries @x0)
(Protocol.entries_rel @x0))))
(HasType (Protocol.counter_pred @x0
@x1
@x2)
Tm_refine_a11098d99239284f14b49e1dd0266896))
 

:pattern ((Protocol.counter_pred @x0
@x1
@x2))
:qid typing_Protocol.counter_pred))

:named typing_Protocol.counter_pred))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.counter_pre; Namespace Protocol
(assert (! 
;; def=Protocol.fst(98,4-98,15); use=Protocol.fst(98,4-98,15)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Protocol.randomness)
(HasType @x1
(FStar.ST.mref (Protocol.entries @x0)
(Protocol.entries_rel @x0))))
(HasType (Protocol.counter_pre @x0
@x1)
(FStar.Preorder.preorder (Protocol.counter_t @x0
@x1))))
 

:pattern ((Protocol.counter_pre @x0
@x1))
:qid typing_Protocol.counter_pre))

:named typing_Protocol.counter_pre))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.connection_footprint; Namespace Protocol
(assert (! 
;; def=Protocol.fst(180,4-180,24); use=Protocol.fst(180,4-180,24)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Protocol.connection)
(HasType (Protocol.connection_footprint @x0)
(FStar.Set.set Prims.nat)))
 

:pattern ((Protocol.connection_footprint @x0))
:qid typing_Protocol.connection_footprint))

:named typing_Protocol.connection_footprint))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.byte; Namespace Protocol
(assert (! (HasType Protocol.byte
Tm_type)
:named typing_Protocol.byte))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.__proj__R__item__rand; Namespace Protocol
(assert (! 
;; def=Protocol.fst(103,7-103,11); use=Protocol.fst(103,7-103,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_1515f8c9bed8836c1665cbcf6953f9bb)
(HasType (Protocol.__proj__R__item__rand @x0)
Protocol.randomness))
 

:pattern ((Protocol.__proj__R__item__rand @x0))
:qid typing_Protocol.__proj__R__item__rand))

:named typing_Protocol.__proj__R__item__rand))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.__proj__R__item__entries; Namespace Protocol
(assert (! 
;; def=Protocol.fst(103,26-103,33); use=Protocol.fst(103,26-103,33)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_1515f8c9bed8836c1665cbcf6953f9bb)
(HasType (Protocol.__proj__R__item__entries @x0)
(FStar.ST.mref (Protocol.entries (Protocol.__proj__R__item__rand @x0))
(Protocol.entries_rel (Protocol.__proj__R__item__rand @x0)))))
 

:pattern ((Protocol.__proj__R__item__entries @x0))
:qid typing_Protocol.__proj__R__item__entries))

:named typing_Protocol.__proj__R__item__entries))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.__proj__R__item__ctr; Namespace Protocol
(assert (! 
;; def=Protocol.fst(104,10-104,13); use=Protocol.fst(104,10-104,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_1515f8c9bed8836c1665cbcf6953f9bb)
(HasType (Protocol.__proj__R__item__ctr @x0)
(FStar.ST.mref (Protocol.counter_t (Protocol.__proj__R__item__rand @x0)
(Protocol.__proj__R__item__entries @x0))
(Protocol.counter_pre (Protocol.__proj__R__item__rand @x0)
(Protocol.__proj__R__item__entries @x0)))))
 

:pattern ((Protocol.__proj__R__item__ctr @x0))
:qid typing_Protocol.__proj__R__item__ctr))

:named typing_Protocol.__proj__R__item__ctr))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.__proj__E__item__i; Namespace Protocol
(assert (! 
;; def=Protocol.fst(70,7-70,8); use=Protocol.fst(70,7-70,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Protocol.randomness)
(HasType @x1
(Protocol.entry @x0)))
(HasType (Protocol.__proj__E__item__i @x0
@x1)
Prims.nat))
 

:pattern ((Protocol.__proj__E__item__i @x0
@x1))
:qid typing_Protocol.__proj__E__item__i))

:named typing_Protocol.__proj__E__item__i))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Prims.unit
Prims.eqtype)
:named typing_Prims.unit))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.subtype_of @x0
@x1)
Prims.logical))
 

:pattern ((Prims.subtype_of @x0
@x1))
:qid typing_Prims.subtype_of))

:named typing_Prims.subtype_of))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,5-117,11); use=Prims.fst(117,5-117,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.squash @x0)
Tm_type))
 

:pattern ((Prims.squash @x0))
:qid typing_Prims.squash))

:named typing_Prims.squash))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Prims.prop
Tm_type)
:named typing_Prims.prop))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (HasType Prims.pos
Tm_type)
:named typing_Prims.pos))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.op_Equals_Equals_Equals; Namespace Prims
(assert (! 
;; def=Prims.fst(498,6-498,9); use=Prims.fst(498,6-498,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
@x0)
(HasType @x3
@x1))
(HasType (Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3)
Prims.logical))
 

:pattern ((Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3))
:qid typing_Prims.op_Equals_Equals_Equals))

:named typing_Prims.op_Equals_Equals_Equals))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Prims.nat
Tm_type)
:named typing_Prims.nat))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.min; Namespace Prims
(assert (! 
;; def=Prims.fst(714,4-714,7); use=Prims.fst(714,4-714,7)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.int)
(HasType @x1
Prims.int))
(HasType (Prims.min @x0
@x1)
Prims.int))
 

:pattern ((Prims.min @x0
@x1))
:qid typing_Prims.min))

:named typing_Prims.min))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (HasType Prims.logical
Tm_type)
:named typing_Prims.logical))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_and; Namespace Prims
(assert (! 
;; def=Prims.fst(188,5-188,10); use=Prims.fst(188,5-188,10)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.logical)
(HasType @x1
Prims.logical))
(HasType (Prims.l_and @x0
@x1)
Prims.logical))
 

:pattern ((Prims.l_and @x0
@x1))
:qid typing_Prims.l_and))

:named typing_Prims.l_and))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (HasType Prims.l_True
Prims.logical)
:named typing_Prims.l_True))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (HasType Prims.int
Prims.eqtype)
:named typing_Prims.int))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.hasEq; Namespace Prims
(assert (! 
;; def=Prims.fst(69,5-69,10); use=Prims.fst(69,5-69,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.hasEq @x0)
Tm_type))
 

:pattern ((Prims.hasEq @x0))
:qid typing_Prims.hasEq))

:named typing_Prims.hasEq))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Prims.eqtype
Tm_type)
:named typing_Prims.eqtype))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.eq2; Namespace Prims
(assert (! 
;; def=Prims.fst(175,5-175,8); use=Prims.fst(175,5-175,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0)
(HasType @x2
@x0))
(HasType (Prims.eq2 @x0
@x1
@x2)
Prims.logical))
 

:pattern ((Prims.eq2 @x0
@x1
@x2))
:qid typing_Prims.eq2))

:named typing_Prims.eq2))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (HasType Prims.bool
Prims.eqtype)
:named typing_Prims.bool))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MonotonicArray.t; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(34,4-34,5); use=MonotonicArray.fsti(34,4-34,5)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat))
(HasType (MonotonicArray.t @x0
@x1)
Tm_type))
 

:pattern ((MonotonicArray.t @x0
@x1))
:qid typing_MonotonicArray.t))

:named typing_MonotonicArray.t))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MonotonicArray.suffix; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(166,4-166,10); use=MonotonicArray.fsti(166,4-166,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.t @x0
@x1))
(HasType @x3
(Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x1)))
(HasType (MonotonicArray.suffix @x0
@x1
@x2
@x3)
(MonotonicArray.t @x0
(Prims.op_Subtraction @x1
@x3))))
 

:pattern ((MonotonicArray.suffix @x0
@x1
@x2
@x3))
:qid typing_MonotonicArray.suffix))

:named typing_MonotonicArray.suffix))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MonotonicArray.sub; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(164,4-164,7); use=MonotonicArray.fsti(164,4-164,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.t @x0
@x1))
(HasType @x3
Prims.nat)
(HasType @x4
(Tm_refine_6f684e27d6af9965634108bcfe981953 @x3
@x1)))
(HasType (MonotonicArray.sub @x0
@x1
@x2
@x3
@x4)
(MonotonicArray.t @x0
@x4)))
 

:pattern ((MonotonicArray.sub @x0
@x1
@x2
@x3
@x4))
:qid typing_MonotonicArray.sub))

:named typing_MonotonicArray.sub))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MonotonicArray.mutable_pred; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(36,4-36,16); use=MonotonicArray.fsti(36,4-36,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.t @x0
@x1)))
(HasType (MonotonicArray.mutable_pred @x0
@x1
@x2)
Tm_refine_a11098d99239284f14b49e1dd0266896))
 

:pattern ((MonotonicArray.mutable_pred @x0
@x1
@x2))
:qid typing_MonotonicArray.mutable_pred))

:named typing_MonotonicArray.mutable_pred))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MonotonicArray.init_at; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(111,4-111,11); use=MonotonicArray.fsti(111,4-111,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.t @x0
@x1))
(HasType @x3
(MonotonicArray.index @x0
@x1
@x2)))
(HasType (MonotonicArray.init_at @x0
@x1
@x2
@x3)
Tm_type))
 

:pattern ((MonotonicArray.init_at @x0
@x1
@x2
@x3))
:qid typing_MonotonicArray.init_at))

:named typing_MonotonicArray.init_at))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MonotonicArray.init_arr_in_heap_i_j; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(260,4-260,24); use=MonotonicArray.fsti(260,4-260,24)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.t @x0
@x1))
(HasType @x3
FStar.Monotonic.Heap.heap)
(HasType @x4
Prims.nat)
(HasType @x5
(Tm_refine_ba560d8a941cf6251ebf4b60a86ab6b7 @x4
@x1)))
(HasType (MonotonicArray.init_arr_in_heap_i_j @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
 

:pattern ((MonotonicArray.init_arr_in_heap_i_j @x0
@x1
@x2
@x3
@x4
@x5))
:qid typing_MonotonicArray.init_arr_in_heap_i_j))

:named typing_MonotonicArray.init_arr_in_heap_i_j))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MonotonicArray.init_arr_in_heap; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(263,4-263,20); use=MonotonicArray.fsti(263,4-263,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.t @x0
@x1))
(HasType @x3
FStar.Monotonic.Heap.heap))
(HasType (MonotonicArray.init_arr_in_heap @x0
@x1
@x2
@x3)
Tm_type))
 

:pattern ((MonotonicArray.init_arr_in_heap @x0
@x1
@x2
@x3))
:qid typing_MonotonicArray.init_arr_in_heap))

:named typing_MonotonicArray.init_arr_in_heap))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MonotonicArray.index; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(91,5-91,10); use=MonotonicArray.fsti(91,5-91,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.t @x0
@x1)))
(HasType (MonotonicArray.index @x0
@x1
@x2)
Tm_type))
 

:pattern ((MonotonicArray.index @x0
@x1
@x2))
:qid typing_MonotonicArray.index))

:named typing_MonotonicArray.index))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MonotonicArray.contains_array; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(58,4-58,18); use=MonotonicArray.fsti(58,4-58,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
FStar.Monotonic.Heap.heap)
(HasType @x3
(MonotonicArray.t @x0
@x1)))
(HasType (MonotonicArray.contains_array @x0
@x1
@x2
@x3)
Tm_type))
 

:pattern ((MonotonicArray.contains_array @x0
@x1
@x2
@x3))
:qid typing_MonotonicArray.contains_array))

:named typing_MonotonicArray.contains_array))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MonotonicArray.as_seq; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(96,4-96,10); use=MonotonicArray.fsti(96,4-96,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.t @x0
@x1))
(HasType @x3
FStar.Monotonic.Heap.heap))
(HasType (MonotonicArray.as_seq @x0
@x1
@x2
@x3)
(FStar.Seq.Base.seq (FStar.Pervasives.Native.option @x0))))
 

:pattern ((MonotonicArray.as_seq @x0
@x1
@x2
@x3))
:qid typing_MonotonicArray.as_seq))

:named typing_MonotonicArray.as_seq))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MonotonicArray.as_initialized_subseq; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(288,4-288,25); use=MonotonicArray.fsti(288,4-288,25)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.t @x0
@x1))
(HasType @x3
FStar.Monotonic.Heap.heap)
(HasType @x4
Prims.nat)
(HasType @x5
(Tm_refine_a2bea900bf9c6309aac9131f4b0fc594 @x4
@x1
@x0
@x2
@x3)))
(HasType (MonotonicArray.as_initialized_subseq @x0
@x1
@x2
@x3
@x4
@x5)
(FStar.Seq.Base.seq @x0)))
 

:pattern ((MonotonicArray.as_initialized_subseq @x0
@x1
@x2
@x3
@x4
@x5))
:qid typing_MonotonicArray.as_initialized_subseq))

:named typing_MonotonicArray.as_initialized_subseq))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MonotonicArray.as_initialized_seq; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(282,4-282,22); use=MonotonicArray.fsti(282,4-282,22)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.t @x0
@x1))
(HasType @x3
(Tm_refine_4183060ba5404f285780b6cf19647e32 @x0
@x1
@x2)))
(HasType (MonotonicArray.as_initialized_seq @x0
@x1
@x2
@x3)
(FStar.Seq.Base.seq @x0)))
 

:pattern ((MonotonicArray.as_initialized_seq @x0
@x1
@x2
@x3))
:qid typing_MonotonicArray.as_initialized_seq))

:named typing_MonotonicArray.as_initialized_seq))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MonotonicArray.array_footprint; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(53,4-53,19); use=MonotonicArray.fsti(53,4-53,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.t @x0
@x1)))
(HasType (MonotonicArray.array_footprint @x0
@x1
@x2)
(FStar.Set.set Prims.nat)))
 

:pattern ((MonotonicArray.array_footprint @x0
@x1
@x2))
:qid typing_MonotonicArray.array_footprint))

:named typing_MonotonicArray.array_footprint))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MonotonicArray.array; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(42,5-42,10); use=MonotonicArray.fsti(42,5-42,10)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat))
(HasType (MonotonicArray.array @x0
@x1)
Tm_type))
 

:pattern ((MonotonicArray.array @x0
@x1))
:qid typing_MonotonicArray.array))

:named typing_MonotonicArray.array))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MonotonicArray.all_init_i_j; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(254,4-254,16); use=MonotonicArray.fsti(254,4-254,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.t @x0
@x1))
(HasType @x3
Prims.nat)
(HasType @x4
(Tm_refine_ba560d8a941cf6251ebf4b60a86ab6b7 @x3
@x1)))
(HasType (MonotonicArray.all_init_i_j @x0
@x1
@x2
@x3
@x4)
Tm_type))
 

:pattern ((MonotonicArray.all_init_i_j @x0
@x1
@x2
@x3
@x4))
:qid typing_MonotonicArray.all_init_i_j))

:named typing_MonotonicArray.all_init_i_j))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MonotonicArray.all_init; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(257,4-257,12); use=MonotonicArray.fsti(257,4-257,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.t @x0
@x1)))
(HasType (MonotonicArray.all_init @x0
@x1
@x2)
Tm_type))
 

:pattern ((MonotonicArray.all_init @x0
@x1
@x2))
:qid typing_MonotonicArray.all_init))

:named typing_MonotonicArray.all_init))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.TSet.tset_of_set; Namespace FStar.TSet
(assert (! 
;; def=FStar.TSet.fsti(103,4-103,15); use=FStar.TSet.fsti(103,4-103,15)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0)))
(HasType (FStar.TSet.tset_of_set @x0
@x1)
(FStar.TSet.set @x0)))
 

:pattern ((FStar.TSet.tset_of_set @x0
@x1))
:qid typing_FStar.TSet.tset_of_set))

:named typing_FStar.TSet.tset_of_set))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.TSet.set; Namespace FStar.TSet
(assert (! 
;; def=FStar.TSet.fsti(26,4-26,7); use=FStar.TSet.fsti(26,4-26,7)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.TSet.set @x0)
Tm_type))
 

:pattern ((FStar.TSet.set @x0))
:qid typing_FStar.TSet.set))

:named typing_FStar.TSet.set))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.TSet.mem; Namespace FStar.TSet
(assert (! 
;; def=FStar.TSet.fsti(32,4-32,7); use=FStar.TSet.fsti(32,4-32,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0)
(HasType @x2
(FStar.TSet.set @x0)))
(HasType (FStar.TSet.mem @x0
@x1
@x2)
Prims.prop))
 

:pattern ((FStar.TSet.mem @x0
@x1
@x2))
:qid typing_FStar.TSet.mem))

:named typing_FStar.TSet.mem))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Set.union; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(40,4-40,9); use=FStar.Set.fsti(40,4-40,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
(FStar.Set.set @x0)))
(HasType (FStar.Set.union @x0
@x1
@x2)
(FStar.Set.set @x0)))
 

:pattern ((FStar.Set.union @x0
@x1
@x2))
:qid typing_FStar.Set.union))

:named typing_FStar.Set.union))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Set.singleton; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(37,4-37,13); use=FStar.Set.fsti(37,4-37,13)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
@x0))
(HasType (FStar.Set.singleton @x0
@x1)
(FStar.Set.set @x0)))
 

:pattern ((FStar.Set.singleton @x0
@x1))
:qid typing_FStar.Set.singleton))

:named typing_FStar.Set.singleton))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Set.set; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(22,4-22,7); use=FStar.Set.fsti(22,4-22,7)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.eqtype)
(HasType (FStar.Set.set @x0)
Tm_type))
 

:pattern ((FStar.Set.set @x0))
:qid typing_FStar.Set.set))

:named typing_FStar.Set.set))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Set.mem; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(30,4-30,7); use=FStar.Set.fsti(30,4-30,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
@x0)
(HasType @x2
(FStar.Set.set @x0)))
(HasType (FStar.Set.mem @x0
@x1
@x2)
Prims.bool))
 

:pattern ((FStar.Set.mem @x0
@x1
@x2))
:qid typing_FStar.Set.mem))

:named typing_FStar.Set.mem))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Set.intersect; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(41,4-41,13); use=FStar.Set.fsti(41,4-41,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
(FStar.Set.set @x0)))
(HasType (FStar.Set.intersect @x0
@x1
@x2)
(FStar.Set.set @x0)))
 

:pattern ((FStar.Set.intersect @x0
@x1
@x2))
:qid typing_FStar.Set.intersect))

:named typing_FStar.Set.intersect))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Set.equal; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(25,4-25,9); use=FStar.Set.fsti(25,4-25,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
(FStar.Set.set @x0)))
(HasType (FStar.Set.equal @x0
@x1
@x2)
Tm_type))
 

:pattern ((FStar.Set.equal @x0
@x1
@x2))
:qid typing_FStar.Set.equal))

:named typing_FStar.Set.equal))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Set.empty; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(34,4-34,9); use=FStar.Set.fsti(34,4-34,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.eqtype)
(HasType (FStar.Set.empty @x0)
(FStar.Set.set @x0)))
 

:pattern ((FStar.Set.empty @x0))
:qid typing_FStar.Set.empty))

:named typing_FStar.Set.empty))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Set.disjoint; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(47,4-47,12); use=FStar.Set.fsti(47,4-47,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
(FStar.Set.set @x0)))
(HasType (FStar.Set.disjoint @x0
@x1
@x2)
Tm_type))
 

:pattern ((FStar.Set.disjoint @x0
@x1
@x2))
:qid typing_FStar.Set.disjoint))

:named typing_FStar.Set.disjoint))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Seq.Properties.snoc; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(316,4-316,8); use=FStar.Seq.Properties.fsti(316,4-316,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
@x0))
(HasType (FStar.Seq.Properties.snoc @x0
@x1
@x2)
(FStar.Seq.Base.seq @x0)))
 

:pattern ((FStar.Seq.Properties.snoc @x0
@x1
@x2))
:qid typing_FStar.Seq.Properties.snoc))

:named typing_FStar.Seq.Properties.snoc))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Seq.Base.slice; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(64,4-64,9); use=FStar.Seq.Base.fsti(64,4-64,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
Prims.nat)
(HasType @x3
(Tm_refine_81407705a0828c2c1b1976675443f647 @x2
@x0
@x1)))
(HasType (FStar.Seq.Base.slice @x0
@x1
@x2
@x3)
(FStar.Seq.Base.seq @x0)))
 

:pattern ((FStar.Seq.Base.slice @x0
@x1
@x2
@x3))
:qid typing_FStar.Seq.Base.slice))

:named typing_FStar.Seq.Base.slice))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Seq.Base.seq; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(23,8-23,11); use=FStar.Seq.Base.fsti(23,8-23,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Seq.Base.seq @x0)
Tm_type))
 

:pattern ((FStar.Seq.Base.seq @x0))
:qid typing_FStar.Seq.Base.seq))

:named typing_FStar.Seq.Base.seq))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Seq.Base.length; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(26,4-26,10); use=FStar.Seq.Base.fsti(26,4-26,10)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0)))
(HasType (FStar.Seq.Base.length @x0
@x1)
Prims.nat))
 

:pattern ((FStar.Seq.Base.length @x0
@x1))
:qid typing_FStar.Seq.Base.length))

:named typing_FStar.Seq.Base.length))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Seq.Base.index; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(32,4-32,9); use=FStar.Seq.Base.fsti(32,4-32,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
(Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 @x0
@x1)))
(HasType (FStar.Seq.Base.index @x0
@x1
@x2)
@x0))
 

:pattern ((FStar.Seq.Base.index @x0
@x1
@x2))
:qid typing_FStar.Seq.Base.index))

:named typing_FStar.Seq.Base.index))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Seq.Base.empty; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(46,4-46,9); use=FStar.Seq.Base.fsti(46,4-46,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Seq.Base.empty @x0)
(Tm_refine_b913a3f691ca99086652e0a655e72f17 @x0)))
 

:pattern ((FStar.Seq.Base.empty @x0))
:qid typing_FStar.Seq.Base.empty))

:named typing_FStar.Seq.Base.empty))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Seq.Base.create; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(34,4-34,10); use=FStar.Seq.Base.fsti(34,4-34,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
@x0))
(HasType (FStar.Seq.Base.create @x0
@x1
@x2)
(FStar.Seq.Base.seq @x0)))
 

:pattern ((FStar.Seq.Base.create @x0
@x1
@x2))
:qid typing_FStar.Seq.Base.create))

:named typing_FStar.Seq.Base.create))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Seq.Base.append; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(58,4-58,10); use=FStar.Seq.Base.fsti(58,4-58,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
(FStar.Seq.Base.seq @x0)))
(HasType (FStar.Seq.Base.append @x0
@x1
@x2)
(FStar.Seq.Base.seq @x0)))
 

:pattern ((FStar.Seq.Base.append @x0
@x1
@x2))
:qid typing_FStar.Seq.Base.append))

:named typing_FStar.Seq.Base.append))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.ST.witnessed; Namespace FStar.ST
(assert (! 
;; def=FStar.ST.fst(49,4-49,13); use=FStar.ST.fst(49,4-49,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_a11098d99239284f14b49e1dd0266896)
(HasType (FStar.ST.witnessed @x0)
Tm_type))
 

:pattern ((FStar.ST.witnessed @x0))
:qid typing_FStar.ST.witnessed))

:named typing_FStar.ST.witnessed))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.ST.stable; Namespace FStar.ST
(assert (! 
;; def=FStar.ST.fst(45,4-45,10); use=FStar.ST.fst(45,4-45,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.ST.heap_predicate)
(HasType (FStar.ST.stable @x0)
Prims.logical))
 

:pattern ((FStar.ST.stable @x0))
:qid typing_FStar.ST.stable))

:named typing_FStar.ST.stable))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.ST.mref; Namespace FStar.ST
(assert (! 
;; def=FStar.ST.fst(81,5-81,9); use=FStar.ST.fst(81,5-81,9)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Preorder.preorder @x0)))
(HasType (FStar.ST.mref @x0
@x1)
Tm_type))
 

:pattern ((FStar.ST.mref @x0
@x1))
:qid typing_FStar.ST.mref))

:named typing_FStar.ST.mref))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.ST.heap_rel; Namespace FStar.ST
(assert (! 
;; def=FStar.ST.fst(36,4-36,12); use=FStar.ST.fst(36,4-36,12)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
FStar.Monotonic.Heap.heap)
(HasType @x1
FStar.Monotonic.Heap.heap))
(HasType (FStar.ST.heap_rel @x0
@x1)
Prims.logical))
 

:pattern ((FStar.ST.heap_rel @x0
@x1))
:qid typing_FStar.ST.heap_rel))

:named typing_FStar.ST.heap_rel))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.ST.heap_predicate; Namespace FStar.ST
(assert (! (HasType FStar.ST.heap_predicate
Tm_type)
:named typing_FStar.ST.heap_predicate))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.ST.contains_pred; Namespace FStar.ST
(assert (! 
;; def=FStar.ST.fst(79,4-79,17); use=FStar.ST.fst(79,4-79,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Preorder.preorder @x0))
(HasType @x2
(FStar.Monotonic.Heap.mref @x0
@x1))
(HasType @x3
FStar.Monotonic.Heap.heap))
(HasType (FStar.ST.contains_pred @x0
@x1
@x2
@x3)
Tm_type))
 

:pattern ((FStar.ST.contains_pred @x0
@x1
@x2
@x3))
:qid typing_FStar.ST.contains_pred))

:named typing_FStar.ST.contains_pred))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Preorder.transitive; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(27,4-27,14); use=FStar.Preorder.fst(27,4-27,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Preorder.relation @x0)))
(HasType (FStar.Preorder.transitive @x0
@x1)
Prims.logical))
 

:pattern ((FStar.Preorder.transitive @x0
@x1))
:qid typing_FStar.Preorder.transitive))

:named typing_FStar.Preorder.transitive))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Preorder.relation; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(20,5-20,13); use=FStar.Preorder.fst(20,5-20,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Preorder.relation @x0)
Tm_type))
 

:pattern ((FStar.Preorder.relation @x0))
:qid typing_FStar.Preorder.relation))

:named typing_FStar.Preorder.relation))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Preorder.reflexive; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(24,4-24,13); use=FStar.Preorder.fst(24,4-24,13)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Preorder.relation @x0)))
(HasType (FStar.Preorder.reflexive @x0
@x1)
Prims.logical))
 

:pattern ((FStar.Preorder.reflexive @x0
@x1))
:qid typing_FStar.Preorder.reflexive))

:named typing_FStar.Preorder.reflexive))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Preorder.preorder_rel; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(30,4-30,16); use=FStar.Preorder.fst(30,4-30,16)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Preorder.relation @x0)))
(HasType (FStar.Preorder.preorder_rel @x0
@x1)
Prims.logical))
 

:pattern ((FStar.Preorder.preorder_rel @x0
@x1))
:qid typing_FStar.Preorder.preorder_rel))

:named typing_FStar.Preorder.preorder_rel))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Preorder.preorder; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(33,5-33,13); use=FStar.Preorder.fst(33,5-33,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Preorder.preorder @x0)
Tm_type))
 

:pattern ((FStar.Preorder.preorder @x0))
:qid typing_FStar.Preorder.preorder))

:named typing_FStar.Preorder.preorder))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.st_post_h'; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(442,4-442,14); use=FStar.Pervasives.fsti(442,4-442,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type))
(HasType (FStar.Pervasives.st_post_h_ @x0
@x1
@x2)
Tm_type))
 

:pattern ((FStar.Pervasives.st_post_h_ @x0
@x1
@x2))
:qid typing_FStar.Pervasives.st_post_h_))

:named typing_FStar.Pervasives.st_post_h_))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.st_post_h; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(445,4-445,13); use=FStar.Pervasives.fsti(445,4-445,13)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (FStar.Pervasives.st_post_h @x0
@x1)
Tm_type))
 

:pattern ((FStar.Pervasives.st_post_h @x0
@x1))
:qid typing_FStar.Pervasives.st_post_h))

:named typing_FStar.Pervasives.st_post_h))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Pervasives.Native.option @x0)))
(HasType (FStar.Pervasives.Native.uu___is_Some @x0
@x1)
Prims.bool))
 

:pattern ((FStar.Pervasives.Native.uu___is_Some @x0
@x1))
:qid typing_FStar.Pervasives.Native.uu___is_Some))

:named typing_FStar.Pervasives.Native.uu___is_Some))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_None; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Pervasives.Native.option @x0)))
(HasType (FStar.Pervasives.Native.uu___is_None @x0
@x1)
Prims.bool))
 

:pattern ((FStar.Pervasives.Native.uu___is_None @x0
@x1))
:qid typing_FStar.Pervasives.Native.uu___is_None))

:named typing_FStar.Pervasives.Native.uu___is_None))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Some__item__v; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,11-33,12); use=FStar.Pervasives.Native.fst(33,11-33,12)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x0)))
(HasType (FStar.Pervasives.Native.__proj__Some__item__v @x0
@x1)
@x0))
 

:pattern ((FStar.Pervasives.Native.__proj__Some__item__v @x0
@x1))
:qid typing_FStar.Pervasives.Native.__proj__Some__item__v))

:named typing_FStar.Pervasives.Native.__proj__Some__item__v))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Monotonic.Heap.unused_in; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(56,4-56,13); use=FStar.Monotonic.Heap.fsti(56,4-56,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Preorder.preorder @x0))
(HasType @x2
(FStar.Monotonic.Heap.mref @x0
@x1))
(HasType @x3
FStar.Monotonic.Heap.heap))
(HasType (FStar.Monotonic.Heap.unused_in @x0
@x1
@x2
@x3)
Tm_type))
 

:pattern ((FStar.Monotonic.Heap.unused_in @x0
@x1
@x2
@x3))
:qid typing_FStar.Monotonic.Heap.unused_in))

:named typing_FStar.Monotonic.Heap.unused_in))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Monotonic.Heap.tset; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(24,4-24,8); use=FStar.Monotonic.Heap.fsti(24,4-24,8)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Monotonic.Heap.tset @x0)
Tm_type))
 

:pattern ((FStar.Monotonic.Heap.tset @x0))
:qid typing_FStar.Monotonic.Heap.tset))

:named typing_FStar.Monotonic.Heap.tset))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Monotonic.Heap.set; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(23,4-23,7); use=FStar.Monotonic.Heap.fsti(23,4-23,7)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.eqtype)
(HasType (FStar.Monotonic.Heap.set @x0)
Tm_type))
 

:pattern ((FStar.Monotonic.Heap.set @x0))
:qid typing_FStar.Monotonic.Heap.set))

:named typing_FStar.Monotonic.Heap.set))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Monotonic.Heap.sel_tot; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(72,4-72,11); use=FStar.Monotonic.Heap.fsti(72,4-72,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Preorder.preorder @x0))
(HasType @x2
FStar.Monotonic.Heap.heap)
(HasType @x3
(Tm_refine_60a89cd0c268e7ce38a2aab467325fd8 @x0
@x1
@x2)))
(HasType (FStar.Monotonic.Heap.sel_tot @x0
@x1
@x2
@x3)
@x0))
 

:pattern ((FStar.Monotonic.Heap.sel_tot @x0
@x1
@x2
@x3))
:qid typing_FStar.Monotonic.Heap.sel_tot))

:named typing_FStar.Monotonic.Heap.sel_tot))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Monotonic.Heap.sel; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(74,4-74,7); use=FStar.Monotonic.Heap.fsti(74,4-74,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Preorder.preorder @x0))
(HasType @x2
FStar.Monotonic.Heap.heap)
(HasType @x3
(FStar.Monotonic.Heap.mref @x0
@x1)))
(HasType (FStar.Monotonic.Heap.sel @x0
@x1
@x2
@x3)
@x0))
 

:pattern ((FStar.Monotonic.Heap.sel @x0
@x1
@x2
@x3))
:qid typing_FStar.Monotonic.Heap.sel))

:named typing_FStar.Monotonic.Heap.sel))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Monotonic.Heap.mref; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(41,4-41,8); use=FStar.Monotonic.Heap.fsti(41,4-41,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Preorder.preorder @x0)))
(HasType (FStar.Monotonic.Heap.mref @x0
@x1)
Tm_type))
 

:pattern ((FStar.Monotonic.Heap.mref @x0
@x1))
:qid typing_FStar.Monotonic.Heap.mref))

:named typing_FStar.Monotonic.Heap.mref))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Monotonic.Heap.modifies_t; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(84,4-84,14); use=FStar.Monotonic.Heap.fsti(84,4-84,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
(FStar.Monotonic.Heap.tset Prims.nat))
(HasType @x1
FStar.Monotonic.Heap.heap)
(HasType @x2
FStar.Monotonic.Heap.heap))
(HasType (FStar.Monotonic.Heap.modifies_t @x0
@x1
@x2)
Prims.logical))
 

:pattern ((FStar.Monotonic.Heap.modifies_t @x0
@x1
@x2))
:qid typing_FStar.Monotonic.Heap.modifies_t))

:named typing_FStar.Monotonic.Heap.modifies_t))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Monotonic.Heap.modifies; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(96,4-96,12); use=FStar.Monotonic.Heap.fsti(96,4-96,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
(FStar.Monotonic.Heap.set Prims.nat))
(HasType @x1
FStar.Monotonic.Heap.heap)
(HasType @x2
FStar.Monotonic.Heap.heap))
(HasType (FStar.Monotonic.Heap.modifies @x0
@x1
@x2)
Prims.logical))
 

:pattern ((FStar.Monotonic.Heap.modifies @x0
@x1
@x2))
:qid typing_FStar.Monotonic.Heap.modifies))

:named typing_FStar.Monotonic.Heap.modifies))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Monotonic.Heap.is_mm; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(45,4-45,9); use=FStar.Monotonic.Heap.fsti(45,4-45,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Preorder.preorder @x0))
(HasType @x2
(FStar.Monotonic.Heap.mref @x0
@x1)))
(HasType (FStar.Monotonic.Heap.is_mm @x0
@x1
@x2)
Prims.bool))
 

:pattern ((FStar.Monotonic.Heap.is_mm @x0
@x1
@x2))
:qid typing_FStar.Monotonic.Heap.is_mm))

:named typing_FStar.Monotonic.Heap.is_mm))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Monotonic.Heap.heap; Namespace FStar.Monotonic.Heap
(assert (! (HasType FStar.Monotonic.Heap.heap
Tm_type)
:named typing_FStar.Monotonic.Heap.heap))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Monotonic.Heap.core_mref; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(39,4-39,13); use=FStar.Monotonic.Heap.fsti(39,4-39,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Monotonic.Heap.core_mref @x0)
Tm_type))
 

:pattern ((FStar.Monotonic.Heap.core_mref @x0))
:qid typing_FStar.Monotonic.Heap.core_mref))

:named typing_FStar.Monotonic.Heap.core_mref))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Monotonic.Heap.contains; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(50,4-50,12); use=FStar.Monotonic.Heap.fsti(50,4-50,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Preorder.preorder @x0))
(HasType @x2
FStar.Monotonic.Heap.heap)
(HasType @x3
(FStar.Monotonic.Heap.mref @x0
@x1)))
(HasType (FStar.Monotonic.Heap.contains @x0
@x1
@x2
@x3)
Tm_type))
 

:pattern ((FStar.Monotonic.Heap.contains @x0
@x1
@x2
@x3))
:qid typing_FStar.Monotonic.Heap.contains))

:named typing_FStar.Monotonic.Heap.contains))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Monotonic.Heap.addr_unused_in; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(52,4-52,18); use=FStar.Monotonic.Heap.fsti(52,4-52,18)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
FStar.Monotonic.Heap.heap))
(HasType (FStar.Monotonic.Heap.addr_unused_in @x0
@x1)
Tm_type))
 

:pattern ((FStar.Monotonic.Heap.addr_unused_in @x0
@x1))
:qid typing_FStar.Monotonic.Heap.addr_unused_in))

:named typing_FStar.Monotonic.Heap.addr_unused_in))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Monotonic.Heap.addr_of; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(43,4-43,11); use=FStar.Monotonic.Heap.fsti(43,4-43,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Preorder.preorder @x0))
(HasType @x2
(FStar.Monotonic.Heap.mref @x0
@x1)))
(HasType (FStar.Monotonic.Heap.addr_of @x0
@x1
@x2)
Prims.pos))
 

:pattern ((FStar.Monotonic.Heap.addr_of @x0
@x1
@x2))
:qid typing_FStar.Monotonic.Heap.addr_of))

:named typing_FStar.Monotonic.Heap.addr_of))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name ArrayUtils.some_equivalent_seqs; Namespace ArrayUtils
(assert (! 
;; def=ArrayUtils.fst(35,4-35,24); use=ArrayUtils.fst(35,4-35,24)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq (FStar.Pervasives.Native.option @x0)))
(HasType @x2
(FStar.Seq.Base.seq @x0)))
(HasType (ArrayUtils.some_equivalent_seqs @x0
@x1
@x2)
Tm_type))
 

:pattern ((ArrayUtils.some_equivalent_seqs @x0
@x1
@x2))
:qid typing_ArrayUtils.some_equivalent_seqs))

:named typing_ArrayUtils.some_equivalent_seqs))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name ArrayUtils.seq_map; Namespace ArrayUtils
(assert (! 
;; def=ArrayUtils.fst(115,11-115,18); use=ArrayUtils.fst(115,11-115,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(Tm_arrow_6980332764c4493a7b0df5c02f7aefbe @x1
@x0))
(HasType @x3
(FStar.Seq.Base.seq @x0)))
(HasType (ArrayUtils.seq_map @x0
@x1
@x2
@x3)
(Tm_refine_4a193488219f747acf46a37f5644f382 @x0
@x3
@x1
@x2)))
 

:pattern ((ArrayUtils.seq_map @x0
@x1
@x2
@x3))
:qid typing_ArrayUtils.seq_map))

:named typing_ArrayUtils.seq_map))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name ArrayUtils.init_at_seq; Namespace ArrayUtils
(assert (! 
;; def=ArrayUtils.fst(26,4-26,15); use=ArrayUtils.fst(26,4-26,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq (FStar.Pervasives.Native.option @x0)))
(HasType @x2
(Tm_refine_e2af26714aacb45b5c7237458083cad9 @x0
@x1)))
(HasType (ArrayUtils.init_at_seq @x0
@x1
@x2)
Tm_type))
 

:pattern ((ArrayUtils.init_at_seq @x0
@x1
@x2))
:qid typing_ArrayUtils.init_at_seq))

:named typing_ArrayUtils.init_at_seq))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name ArrayUtils.get_some_equivalent; Namespace ArrayUtils
(assert (! 
;; def=ArrayUtils.fst(42,11-42,30); use=ArrayUtils.fst(42,11-42,30)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and 
;; def=ArrayUtils.fst(44,19-44,31); use=ArrayUtils.fst(44,19-44,31)
(Valid 
;; def=ArrayUtils.fst(44,19-44,31); use=ArrayUtils.fst(44,19-44,31)
(ArrayUtils.all_some @x0
@x1)
)

(HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq (FStar.Pervasives.Native.option @x0))))
(HasType (ArrayUtils.get_some_equivalent @x0
@x1)
(Tm_refine_e50addb6c1bbd8f85fb54bf03b146e15 @x0
@x1)))
 

:pattern ((ArrayUtils.get_some_equivalent @x0
@x1))
:qid typing_ArrayUtils.get_some_equivalent))

:named typing_ArrayUtils.get_some_equivalent))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name ArrayUtils.all_some; Namespace ArrayUtils
(assert (! 
;; def=ArrayUtils.fst(29,4-29,12); use=ArrayUtils.fst(29,4-29,12)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq (FStar.Pervasives.Native.option @x0))))
(HasType (ArrayUtils.all_some @x0
@x1)
Tm_type))
 

:pattern ((ArrayUtils.all_some @x0
@x1))
:qid typing_ArrayUtils.all_some))

:named typing_ArrayUtils.all_some))
;;;;;;;;;;;;;;;;True interpretation
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (Valid Prims.l_True)
:named true_interp))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Protocol.sent_bytes; Namespace Protocol
(assert (! 
;; def=Protocol.fst(341,4-341,14); use=Protocol.fst(341,4-341,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Protocol.sent_bytes@tok
@x0)
@x1)
@x2)
@x3)
(Protocol.sent_bytes @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT Protocol.sent_bytes@tok
@x0)
@x1)
@x2)
@x3))
:qid token_correspondence_Protocol.sent_bytes))

:named token_correspondence_Protocol.sent_bytes))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name Protocol.entry; Namespace Protocol; Name Protocol.E; Namespace Protocol
(assert (! 
;; def=Protocol.fst(69,10-69,15); use=Protocol.fst(69,10-69,15)
(forall ((@x0 Term))
 (! (= (ApplyTT Protocol.entry@tok
@x0)
(Protocol.entry @x0))
 

:pattern ((ApplyTT Protocol.entry@tok
@x0))

:pattern ((Protocol.entry @x0))
:qid token_correspondence_Protocol.entry@tok))

:named token_correspondence_Protocol.entry@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.pair@tok
@x0)
@x1)
(Prims.pair @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.pair@tok
@x0)
@x1))

:pattern ((Prims.pair @x0
@x1))
:qid token_correspondence_Prims.pair@tok))

:named token_correspondence_Prims.pair@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT Prims.equals@tok
@x0)
@x1)
@x2)
(Prims.equals @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT Prims.equals@tok
@x0)
@x1)
@x2))

:pattern ((Prims.equals @x0
@x1
@x2))
:qid token_correspondence_Prims.equals@tok))

:named token_correspondence_Prims.equals@tok))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.ST.contains_pred; Namespace FStar.ST
(assert (! 
;; def=FStar.ST.fst(79,4-79,17); use=FStar.ST.fst(79,4-79,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.ST.contains_pred@tok
@x0)
@x1)
@x2)
@x3)
(FStar.ST.contains_pred @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.ST.contains_pred@tok
@x0)
@x1)
@x2)
@x3))
:qid token_correspondence_FStar.ST.contains_pred))

:named token_correspondence_FStar.ST.contains_pred))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@x0 Term))
 (! (= (ApplyTT FStar.Pervasives.Native.option@tok
@x0)
(FStar.Pervasives.Native.option @x0))
 

:pattern ((ApplyTT FStar.Pervasives.Native.option@tok
@x0))

:pattern ((FStar.Pervasives.Native.option @x0))
:qid token_correspondence_FStar.Pervasives.Native.option@tok))

:named token_correspondence_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name Protocol.connection; Namespace Protocol; Name Protocol.S; Namespace Protocol; Name Protocol.R; Namespace Protocol
(assert (! 
;; def=Protocol.fst(102,4-102,5); use=Protocol.fst(102,4-102,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Protocol.S @x1
@x2)
Protocol.connection)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(Protocol.S @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(Protocol.S @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Protocol.S @x1
@x2)
Protocol.connection))
:qid subterm_ordering_Protocol.S))

:named subterm_ordering_Protocol.S))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name Protocol.connection; Namespace Protocol; Name Protocol.S; Namespace Protocol; Name Protocol.R; Namespace Protocol
(assert (! 
;; def=Protocol.fst(103,4-103,5); use=Protocol.fst(103,4-103,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Protocol.R @x1
@x2
@x3)
Protocol.connection)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(Protocol.R @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(Protocol.R @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(Protocol.R @x1
@x2
@x3)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Protocol.R @x1
@x2
@x3)
Protocol.connection))
:qid subterm_ordering_Protocol.R))

:named subterm_ordering_Protocol.R))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name Protocol.entry; Namespace Protocol; Name Protocol.E; Namespace Protocol
(assert (! 
;; def=Protocol.fst(70,4-70,5); use=Protocol.fst(70,4-70,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Protocol.E @x1
@x2
@x3
@x4
@x5)
(Protocol.entry @x6))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(Protocol.E @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(Protocol.E @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(Protocol.E @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x5
(Protocol.E @x1
@x2
@x3
@x4
@x5)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Protocol.E @x1
@x2
@x3
@x4
@x5)
(Protocol.entry @x6)))
:qid subterm_ordering_Protocol.E))

:named subterm_ordering_Protocol.E))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x5
@x6))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(Prims.Pair @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(Prims.Pair @x1
@x2
@x3
@x4)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x5
@x6)))
:qid subterm_ordering_Prims.Pair))

:named subterm_ordering_Prims.Pair))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Pervasives.Native.Some @x1
@x2))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3)))
:qid subterm_ordering_FStar.Pervasives.Native.Some))

:named subterm_ordering_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name MonotonicArray.array; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(42,31-42,66); use=MonotonicArray.fsti(42,31-42,66)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_f984cba283a0017499e468d307a8fd1d @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_f984cba283a0017499e468d307a8fd1d @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_f984cba283a0017499e468d307a8fd1d))

:named refinement_kinding_Tm_refine_f984cba283a0017499e468d307a8fd1d))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (HasType Tm_refine_f1ecc6ab6882a651504f328937700647
Tm_type)
:named refinement_kinding_Tm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Protocol.__proj__S__item__rand; Namespace Protocol
(assert (! (HasType Tm_refine_e6ab7d7d11fd937f30ad6128228c18b5
Tm_type)
:named refinement_kinding_Tm_refine_e6ab7d7d11fd937f30ad6128228c18b5))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Protocol.entry; Namespace Protocol; Name Protocol.E; Namespace Protocol
(assert (! 
;; def=Protocol.fst(70,91-70,124); use=Protocol.fst(70,91-70,124)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_e6768a2f8034f46d4298bc352297ab17 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_e6768a2f8034f46d4298bc352297ab17 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_e6768a2f8034f46d4298bc352297ab17))

:named refinement_kinding_Tm_refine_e6768a2f8034f46d4298bc352297ab17))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name ArrayUtils.get_some_equivalent; Namespace ArrayUtils
(assert (! 
;; def=ArrayUtils.fst(43,9-43,16); use=ArrayUtils.fst(43,9-43,16)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_e50addb6c1bbd8f85fb54bf03b146e15 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_e50addb6c1bbd8f85fb54bf03b146e15 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_e50addb6c1bbd8f85fb54bf03b146e15))

:named refinement_kinding_Tm_refine_e50addb6c1bbd8f85fb54bf03b146e15))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Protocol.modifies_r; Namespace Protocol
(assert (! (HasType Tm_refine_e478ac71fa1875d2f6d4c23ab44e0977
Tm_type)
:named refinement_kinding_Tm_refine_e478ac71fa1875d2f6d4c23ab44e0977))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.ST.mref; Namespace FStar.ST
(assert (! 
;; def=FStar.ST.fst(81,39-81,104); use=FStar.ST.fst(81,39-81,104)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_e33ef751d600ad1c7f71142479103c47 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_e33ef751d600ad1c7f71142479103c47 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_e33ef751d600ad1c7f71142479103c47))

:named refinement_kinding_Tm_refine_e33ef751d600ad1c7f71142479103c47))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name ArrayUtils.init_at_seq; Namespace ArrayUtils
(assert (! 
;; def=ArrayUtils.fst(26,46-26,67); use=ArrayUtils.fst(26,46-26,67)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_e2af26714aacb45b5c7237458083cad9 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_e2af26714aacb45b5c7237458083cad9 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_e2af26714aacb45b5c7237458083cad9))

:named refinement_kinding_Tm_refine_e2af26714aacb45b5c7237458083cad9))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Monotonic.Heap.lemma_mref_injectivity; Namespace FStar.Monotonic.Heap
(assert (! (HasType Tm_refine_e1adf49e5e772ddffa19181e1a812a81
Tm_type)
:named refinement_kinding_Tm_refine_e1adf49e5e772ddffa19181e1a812a81))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! (HasType Tm_refine_da3062322c9bea8d5b2058386775b91a
Tm_type)
:named refinement_kinding_Tm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Seq.Base.index; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(32,34-32,53); use=FStar.Seq.Base.fsti(32,34-32,53)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55))

:named refinement_kinding_Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_slice; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(158,54-158,84); use=FStar.Seq.Base.fsti(158,54-158,84)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_d3d07693cd71377864ef84dc97d10ec1 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_d3d07693cd71377864ef84dc97d10ec1 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_d3d07693cd71377864ef84dc97d10ec1))

:named refinement_kinding_Tm_refine_d3d07693cd71377864ef84dc97d10ec1))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Protocol.entries; Namespace Protocol
(assert (! 
;; def=Protocol.fst(74,33-74,110); use=Protocol.fst(74,33-74,110)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_c52766f1ffb36bccccc81ae2f2d192be @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_c52766f1ffb36bccccc81ae2f2d192be @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_c52766f1ffb36bccccc81ae2f2d192be))

:named refinement_kinding_Tm_refine_c52766f1ffb36bccccc81ae2f2d192be))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Seq.Base.init_aux; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(36,41-36,57); use=FStar.Seq.Base.fsti(36,41-36,57)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_c1424615841f28cac7fc34e92b7ff33c @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_c1424615841f28cac7fc34e92b7ff33c @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_c1424615841f28cac7fc34e92b7ff33c))

:named refinement_kinding_Tm_refine_c1424615841f28cac7fc34e92b7ff33c))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Preorder.preorder; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(33,25-33,57); use=FStar.Preorder.fst(33,25-33,57)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_bd10f09297e0e7dc08314f7d9211801c @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_bd10f09297e0e7dc08314f7d9211801c @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_bd10f09297e0e7dc08314f7d9211801c))

:named refinement_kinding_Tm_refine_bd10f09297e0e7dc08314f7d9211801c))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name MonotonicArray.all_init_i_j; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(254,57-254,82); use=MonotonicArray.fsti(254,57-254,82)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_ba560d8a941cf6251ebf4b60a86ab6b7 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_ba560d8a941cf6251ebf4b60a86ab6b7 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_ba560d8a941cf6251ebf4b60a86ab6b7))

:named refinement_kinding_Tm_refine_ba560d8a941cf6251ebf4b60a86ab6b7))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Seq.Base.empty; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(46,26-46,49); use=FStar.Seq.Base.fsti(46,26-46,49)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_b913a3f691ca99086652e0a655e72f17 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_b913a3f691ca99086652e0a655e72f17 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_b913a3f691ca99086652e0a655e72f17))

:named refinement_kinding_Tm_refine_b913a3f691ca99086652e0a655e72f17))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Seq.Base.eq_i; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(171,5-171,26); use=FStar.Seq.Base.fsti(171,5-171,26)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_b361ba8089a6e963921008d537e799a1 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_b361ba8089a6e963921008d537e799a1 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_b361ba8089a6e963921008d537e799a1))

:named refinement_kinding_Tm_refine_b361ba8089a6e963921008d537e799a1))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Monotonic.Heap.lemma_free_addr_unused_in; Namespace FStar.Monotonic.Heap
(assert (! (HasType Tm_refine_b197fcc3fe1a6a8a07bfa2aebd77a80a
Tm_type)
:named refinement_kinding_Tm_refine_b197fcc3fe1a6a8a07bfa2aebd77a80a))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Monotonic.Heap.addr_of_aref; Namespace FStar.Monotonic.Heap
(assert (! (HasType Tm_refine_afd51579b90d50ea23e03b743a1fa001
Tm_type)
:named refinement_kinding_Tm_refine_afd51579b90d50ea23e03b743a1fa001))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_app2; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(153,57-153,107); use=FStar.Seq.Base.fsti(153,57-153,107)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_ac201cf927190d39c033967b63cb957b @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_ac201cf927190d39c033967b63cb957b @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_ac201cf927190d39c033967b63cb957b))

:named refinement_kinding_Tm_refine_ac201cf927190d39c033967b63cb957b))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name MonotonicArray.as_initialized_subseq; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(289,10-289,69); use=MonotonicArray.fsti(289,10-289,69)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_a2bea900bf9c6309aac9131f4b0fc594 @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_a2bea900bf9c6309aac9131f4b0fc594 @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_a2bea900bf9c6309aac9131f4b0fc594))

:named refinement_kinding_Tm_refine_a2bea900bf9c6309aac9131f4b0fc594))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.ST.witnessed; Namespace FStar.ST
(assert (! (HasType Tm_refine_a11098d99239284f14b49e1dd0266896
Tm_type)
:named refinement_kinding_Tm_refine_a11098d99239284f14b49e1dd0266896))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Protocol.iarray; Namespace Protocol
(assert (! 
;; def=Protocol.fst(175,32-175,55); use=Protocol.fst(175,32-175,55)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_9dd2f7dc4f1c13136a80acee9d90b531 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_9dd2f7dc4f1c13136a80acee9d90b531 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_9dd2f7dc4f1c13136a80acee9d90b531))

:named refinement_kinding_Tm_refine_9dd2f7dc4f1c13136a80acee9d90b531))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Protocol.counter_t; Namespace Protocol
(assert (! 
;; def=Protocol.fst(92,4-92,44); use=Protocol.fst(92,4-92,44)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_931dcd8377a7c87ea65f2ca091543de1 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_931dcd8377a7c87ea65f2ca091543de1 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_931dcd8377a7c87ea65f2ca091543de1))

:named refinement_kinding_Tm_refine_931dcd8377a7c87ea65f2ca091543de1))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Prims.fst(315,31-315,40)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))

:named refinement_kinding_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Protocol.message; Namespace Protocol
(assert (! (HasType Tm_refine_8cf65a0e984801514f164a721568601b
Tm_type)
:named refinement_kinding_Tm_refine_8cf65a0e984801514f164a721568601b))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Protocol.network_message; Namespace Protocol
(assert (! (HasType Tm_refine_84f2654672d0a3698a905d302d0b961d
Tm_type)
:named refinement_kinding_Tm_refine_84f2654672d0a3698a905d302d0b961d))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name MonotonicArray.lemma_all_init_i_j_sub; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(314,22-314,47); use=MonotonicArray.fsti(314,22-314,47)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_841a7dab4e44e4e07aab6383c1e10f2e @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_841a7dab4e44e4e07aab6383c1e10f2e @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_841a7dab4e44e4e07aab6383c1e10f2e))

:named refinement_kinding_Tm_refine_841a7dab4e44e4e07aab6383c1e10f2e))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Protocol.zeroes; Namespace Protocol
(assert (! 
;; def=Protocol.fst(54,21-54,47); use=Protocol.fst(55,4-55,10)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_837d13d4049ad183b630251f6b46706f @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_837d13d4049ad183b630251f6b46706f @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_837d13d4049ad183b630251f6b46706f))

:named refinement_kinding_Tm_refine_837d13d4049ad183b630251f6b46706f))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name MonotonicArray.lemma_sub_init_at; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(227,34-227,64); use=MonotonicArray.fsti(227,34-227,64)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_81607a3aa49a257c80978da6415b0769 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_81607a3aa49a257c80978da6415b0769 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_81607a3aa49a257c80978da6415b0769))

:named refinement_kinding_Tm_refine_81607a3aa49a257c80978da6415b0769))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Seq.Base.slice; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=FStar.Seq.Base.fsti(64,43-64,73)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_81407705a0828c2c1b1976675443f647 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_81407705a0828c2c1b1976675443f647 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_81407705a0828c2c1b1976675443f647))

:named refinement_kinding_Tm_refine_81407705a0828c2c1b1976675443f647))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name MonotonicArray.suffix; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(166,43-166,58); use=MonotonicArray.fsti(166,43-166,58)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d))

:named refinement_kinding_Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (HasType Tm_refine_774ba3f728d91ead8ef40be66c9802e5
Tm_type)
:named refinement_kinding_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf
Tm_type)
:named refinement_kinding_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name MonotonicArray.sub; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(164,48-164,71); use=MonotonicArray.fsti(164,48-164,71)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_6f684e27d6af9965634108bcfe981953 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_6f684e27d6af9965634108bcfe981953 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_6f684e27d6af9965634108bcfe981953))

:named refinement_kinding_Tm_refine_6f684e27d6af9965634108bcfe981953))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Protocol.lemma_is_prefix_of_slice; Namespace Protocol
(assert (! 
;; def=Protocol.fst(313,24-313,56); use=Protocol.fst(313,24-313,56)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_6472b0a877e3e824d44d3d3f19ad04e0 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_6472b0a877e3e824d44d3d3f19ad04e0 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_6472b0a877e3e824d44d3d3f19ad04e0))

:named refinement_kinding_Tm_refine_6472b0a877e3e824d44d3d3f19ad04e0))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Protocol.entry; Namespace Protocol; Name Protocol.E; Namespace Protocol
(assert (! 
;; def=Protocol.fst(70,31-70,87); use=Protocol.fst(70,31-70,87)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_6261f1452b3e7c2df9d267c7f3d29bd3 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_6261f1452b3e7c2df9d267c7f3d29bd3 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_6261f1452b3e7c2df9d267c7f3d29bd3))

:named refinement_kinding_Tm_refine_6261f1452b3e7c2df9d267c7f3d29bd3))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Monotonic.Heap.sel_tot; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(72,54-72,82); use=FStar.Monotonic.Heap.fsti(72,54-72,82)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_60a89cd0c268e7ce38a2aab467325fd8 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_60a89cd0c268e7ce38a2aab467325fd8 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_60a89cd0c268e7ce38a2aab467325fd8))

:named refinement_kinding_Tm_refine_60a89cd0c268e7ce38a2aab467325fd8))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Protocol.sent_bytes'; Namespace Protocol
(assert (! 
;; def=Protocol.fst(335,58-335,78); use=Protocol.fst(335,58-335,78)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_571d9f74016be5357787170b42ecf913 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_571d9f74016be5357787170b42ecf913 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_571d9f74016be5357787170b42ecf913))

:named refinement_kinding_Tm_refine_571d9f74016be5357787170b42ecf913))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Tm_refine_542f9d4f129664613f2483a6c88bc7c2
Tm_type)
:named refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Some__item__v; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a))

:named refinement_kinding_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name ArrayUtils.seq_map; Namespace ArrayUtils
(assert (! 
;; def=ArrayUtils.fst(117,5-117,108); use=ArrayUtils.fst(117,5-117,108)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_4a193488219f747acf46a37f5644f382 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_4a193488219f747acf46a37f5644f382 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_4a193488219f747acf46a37f5644f382))

:named refinement_kinding_Tm_refine_4a193488219f747acf46a37f5644f382))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name MonotonicArray.lemma_sub_init_at; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(228,24-228,62); use=MonotonicArray.fsti(228,24-228,62)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_45b45690e95d6d557b24b79ee0491da4 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_45b45690e95d6d557b24b79ee0491da4 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_45b45690e95d6d557b24b79ee0491da4))

:named refinement_kinding_Tm_refine_45b45690e95d6d557b24b79ee0491da4))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name MonotonicArray.as_initialized_seq; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(283,34-283,66); use=MonotonicArray.fsti(283,34-283,66)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_4183060ba5404f285780b6cf19647e32 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_4183060ba5404f285780b6cf19647e32 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_4183060ba5404f285780b6cf19647e32))

:named refinement_kinding_Tm_refine_4183060ba5404f285780b6cf19647e32))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Tm_refine_414d0a9f578ab0048252f8c8f552b99f
Tm_type)
:named refinement_kinding_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Protocol.lemma_prefix_entries_implies_prefix_log; Namespace Protocol
(assert (! 
;; def=Protocol.fst(144,27-144,86); use=Protocol.fst(144,27-144,86)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_3d0c21849d5cf8d118afc092733f14a4 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_3d0c21849d5cf8d118afc092733f14a4 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_3d0c21849d5cf8d118afc092733f14a4))

:named refinement_kinding_Tm_refine_3d0c21849d5cf8d118afc092733f14a4))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_slice; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(158,88-158,104); use=FStar.Seq.Base.fsti(158,88-158,104)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8))

:named refinement_kinding_Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,32-117,42); use=Prims.fst(117,32-117,42)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))

:named refinement_kinding_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name ArrayUtils.lemma_is_prefix_of_slice; Namespace ArrayUtils
(assert (! 
;; def=ArrayUtils.fst(109,65-109,102); use=ArrayUtils.fst(109,65-109,102)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_21ba3780ecd4c31fe9f89ff8d60a5f28 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_21ba3780ecd4c31fe9f89ff8d60a5f28 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_21ba3780ecd4c31fe9f89ff8d60a5f28))

:named refinement_kinding_Tm_refine_21ba3780ecd4c31fe9f89ff8d60a5f28))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Seq.Properties.slice_slice; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(625,2-625,40); use=FStar.Seq.Properties.fsti(625,2-625,40)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_1ba8fd8bb363097813064c67740b2de5 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_1ba8fd8bb363097813064c67740b2de5 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_1ba8fd8bb363097813064c67740b2de5))

:named refinement_kinding_Tm_refine_1ba8fd8bb363097813064c67740b2de5))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Seq.Properties.createL_post; Namespace FStar.Seq.Properties
(assert (! (HasType Tm_refine_1780a0fddfda88c43d203b562c6d3f5b
Tm_type)
:named refinement_kinding_Tm_refine_1780a0fddfda88c43d203b562c6d3f5b))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Protocol.__proj__R__item__rand; Namespace Protocol
(assert (! (HasType Tm_refine_1515f8c9bed8836c1665cbcf6953f9bb
Tm_type)
:named refinement_kinding_Tm_refine_1515f8c9bed8836c1665cbcf6953f9bb))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Protocol.log; Namespace Protocol
(assert (! 
;; def=Protocol.fst(140,23-140,54); use=Protocol.fst(140,23-140,54)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_12e73119c459be812384fdc8e6c9733a @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_12e73119c459be812384fdc8e6c9733a @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_12e73119c459be812384fdc8e6c9733a))

:named refinement_kinding_Tm_refine_12e73119c459be812384fdc8e6c9733a))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Seq.Properties.snoc_slice_index; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(585,2-585,36); use=FStar.Seq.Properties.fsti(585,2-585,36)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_095c5722edf0f79bcd7dce7bd084c7b5 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_095c5722edf0f79bcd7dce7bd084c7b5 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_095c5722edf0f79bcd7dce7bd084c7b5))

:named refinement_kinding_Tm_refine_095c5722edf0f79bcd7dce7bd084c7b5))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name MonotonicArray.lemma_sub_init_at; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(228,2-228,23); use=MonotonicArray.fsti(228,2-228,23)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_07d42d481cf119dc0746fa408e885a96 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_07d42d481cf119dc0746fa408e885a96 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_07d42d481cf119dc0746fa408e885a96))

:named refinement_kinding_Tm_refine_07d42d481cf119dc0746fa408e885a96))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (HasType Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f
Tm_type)
:named refinement_kinding_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name MonotonicArray.array; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(42,31-42,66); use=MonotonicArray.fsti(42,31-42,66)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_f984cba283a0017499e468d307a8fd1d @x2
@x3))
(and (HasTypeFuel @u0
@x1
(MonotonicArray.t @x2
@x3))

;; def=MonotonicArray.fsti(42,39-42,65); use=MonotonicArray.fsti(42,39-42,65)
(Valid 
;; def=MonotonicArray.fsti(42,39-42,65); use=MonotonicArray.fsti(42,39-42,65)
(FStar.ST.witnessed (MonotonicArray.mutable_pred @x2
@x3
@x1))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_f984cba283a0017499e468d307a8fd1d @x2
@x3)))
:qid refinement_interpretation_Tm_refine_f984cba283a0017499e468d307a8fd1d))

:named refinement_interpretation_Tm_refine_f984cba283a0017499e468d307a8fd1d))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(772,26-772,42); use=FStar.Pervasives.fsti(772,26-772,42)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_f1ecc6ab6882a651504f328937700647)
false)
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_f1ecc6ab6882a651504f328937700647))
:qid refinement_interpretation_Tm_refine_f1ecc6ab6882a651504f328937700647))

:named refinement_interpretation_Tm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Protocol.__proj__S__item__rand; Namespace Protocol
(assert (! 
;; def=Protocol.fst(102,4-102,5); use=Protocol.fst(102,4-102,5)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_e6ab7d7d11fd937f30ad6128228c18b5)
(and (HasTypeFuel @u0
@x1
Protocol.connection)

;; def=Protocol.fst(102,4-102,5); use=Protocol.fst(102,4-102,5)
(BoxBool_proj_0 (Protocol.uu___is_S @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_e6ab7d7d11fd937f30ad6128228c18b5))
:qid refinement_interpretation_Tm_refine_e6ab7d7d11fd937f30ad6128228c18b5))

:named refinement_interpretation_Tm_refine_e6ab7d7d11fd937f30ad6128228c18b5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Protocol.entry; Namespace Protocol; Name Protocol.E; Namespace Protocol
(assert (! 
;; def=Protocol.fst(70,91-70,124); use=Protocol.fst(70,91-70,124)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_e6768a2f8034f46d4298bc352297ab17 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(FStar.Seq.Base.seq Protocol.byte))

;; def=Protocol.fst(70,104-70,123); use=Protocol.fst(70,104-70,123)
(= @x1
(Protocol.mac @x2
@x3))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_e6768a2f8034f46d4298bc352297ab17 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_e6768a2f8034f46d4298bc352297ab17))

:named refinement_interpretation_Tm_refine_e6768a2f8034f46d4298bc352297ab17))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name ArrayUtils.get_some_equivalent; Namespace ArrayUtils
(assert (! 
;; def=ArrayUtils.fst(43,9-43,16); use=ArrayUtils.fst(43,9-43,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_e50addb6c1bbd8f85fb54bf03b146e15 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(FStar.Seq.Base.seq @x2))

;; def=ArrayUtils.fst(45,22-45,46); use=ArrayUtils.fst(45,22-45,46)
(Valid 
;; def=ArrayUtils.fst(45,22-45,46); use=ArrayUtils.fst(45,22-45,46)
(ArrayUtils.some_equivalent_seqs @x2
@x3
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_e50addb6c1bbd8f85fb54bf03b146e15 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_e50addb6c1bbd8f85fb54bf03b146e15))

:named refinement_interpretation_Tm_refine_e50addb6c1bbd8f85fb54bf03b146e15))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Protocol.modifies_r; Namespace Protocol
(assert (! 
;; def=Protocol.fst(248,24-248,50); use=Protocol.fst(248,24-248,50)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_e478ac71fa1875d2f6d4c23ab44e0977)
(and (HasTypeFuel @u0
@x1
Protocol.connection)

;; def=Protocol.fst(248,38-248,48); use=Protocol.fst(248,38-248,48)
(BoxBool_proj_0 (Protocol.receiver @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_e478ac71fa1875d2f6d4c23ab44e0977))
:qid refinement_interpretation_Tm_refine_e478ac71fa1875d2f6d4c23ab44e0977))

:named refinement_interpretation_Tm_refine_e478ac71fa1875d2f6d4c23ab44e0977))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.ST.mref; Namespace FStar.ST
(assert (! 
;; def=FStar.ST.fst(81,39-81,104); use=FStar.ST.fst(81,39-81,104)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_e33ef751d600ad1c7f71142479103c47 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(FStar.Monotonic.Heap.mref @x2
@x3))

;; def=FStar.ST.fst(81,57-81,72); use=FStar.ST.fst(81,57-81,72)
(= (FStar.Monotonic.Heap.is_mm @x2
@x3
@x1)
(BoxBool false))


;; def=FStar.ST.fst(81,76-81,103); use=FStar.ST.fst(81,76-81,103)
(Valid 
;; def=FStar.ST.fst(81,76-81,103); use=FStar.ST.fst(81,76-81,103)
(FStar.ST.witnessed (ApplyTT (ApplyTT (ApplyTT FStar.ST.contains_pred@tok
@x2)
@x3)
@x1))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_e33ef751d600ad1c7f71142479103c47 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_e33ef751d600ad1c7f71142479103c47))

:named refinement_interpretation_Tm_refine_e33ef751d600ad1c7f71142479103c47))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name ArrayUtils.init_at_seq; Namespace ArrayUtils
(assert (! 
;; def=ArrayUtils.fst(26,46-26,67); use=ArrayUtils.fst(26,46-26,67)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_e2af26714aacb45b5c7237458083cad9 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=ArrayUtils.fst(26,53-26,65); use=ArrayUtils.fst(26,53-26,65)
(< (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (FStar.Seq.Base.length (FStar.Pervasives.Native.option @x2)
@x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_e2af26714aacb45b5c7237458083cad9 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_e2af26714aacb45b5c7237458083cad9))

:named refinement_interpretation_Tm_refine_e2af26714aacb45b5c7237458083cad9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Monotonic.Heap.lemma_mref_injectivity; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(207,3-207,136); use=FStar.Monotonic.Heap.fsti(207,3-207,136)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_e1adf49e5e772ddffa19181e1a812a81)
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=FStar.Monotonic.Heap.fsti(207,11-207,134); use=FStar.Monotonic.Heap.fsti(207,11-207,134)
(forall ((@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
(FStar.Preorder.preorder @x2))
(HasType @x5
(FStar.Preorder.preorder @x3))
(HasType @x6
(FStar.Monotonic.Heap.mref @x2
@x4))
(HasType @x7
(FStar.Monotonic.Heap.mref @x3
@x5))

;; def=FStar.Monotonic.Heap.fsti(207,109-207,116); use=FStar.Monotonic.Heap.fsti(207,109-207,116)
(not 
;; def=FStar.Monotonic.Heap.fsti(207,109-207,116); use=FStar.Monotonic.Heap.fsti(207,109-207,116)
(= @x2
@x3)
)
)

;; def=FStar.Monotonic.Heap.fsti(207,121-207,134); use=FStar.Monotonic.Heap.fsti(207,121-207,134)
(not 
;; def=FStar.Monotonic.Heap.fsti(207,123-207,134); use=FStar.Monotonic.Heap.fsti(207,123-207,134)
(Valid 
;; def=FStar.Monotonic.Heap.fsti(207,123-207,134); use=FStar.Monotonic.Heap.fsti(207,123-207,134)
(Prims.op_Equals_Equals_Equals (FStar.Monotonic.Heap.mref @x2
@x4)
(FStar.Monotonic.Heap.mref @x3
@x5)
@x6
@x7)
)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_e1adf49e5e772ddffa19181e1a812a81.1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_e1adf49e5e772ddffa19181e1a812a81))
:qid refinement_interpretation_Tm_refine_e1adf49e5e772ddffa19181e1a812a81))

:named refinement_interpretation_Tm_refine_e1adf49e5e772ddffa19181e1a812a81))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(533,7-533,12); use=FStar.List.Tot.Base.fst(533,7-533,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_da3062322c9bea8d5b2058386775b91a)
(HasTypeFuel @u0
@x1
Tm_type))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_da3062322c9bea8d5b2058386775b91a))
:qid refinement_interpretation_Tm_refine_da3062322c9bea8d5b2058386775b91a))

:named refinement_interpretation_Tm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Seq.Base.index; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(32,34-32,53); use=FStar.Seq.Base.fsti(32,34-32,53)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=FStar.Seq.Base.fsti(32,40-32,52); use=FStar.Seq.Base.fsti(32,40-32,52)
(< (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (FStar.Seq.Base.length @x2
@x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55))

:named refinement_interpretation_Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_slice; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(158,54-158,84); use=FStar.Seq.Base.fsti(158,54-158,84)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_d3d07693cd71377864ef84dc97d10ec1 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=FStar.Seq.Base.fsti(158,60-158,66); use=FStar.Seq.Base.fsti(158,60-158,66)
(<= (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x1))


;; def=FStar.Seq.Base.fsti(158,70-158,83); use=FStar.Seq.Base.fsti(158,70-158,83)
(<= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (FStar.Seq.Base.length @x3
@x4)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_d3d07693cd71377864ef84dc97d10ec1 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_d3d07693cd71377864ef84dc97d10ec1))

:named refinement_interpretation_Tm_refine_d3d07693cd71377864ef84dc97d10ec1))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Protocol.entries; Namespace Protocol
(assert (! 
;; def=Protocol.fst(74,33-74,110); use=Protocol.fst(74,33-74,110)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_c52766f1ffb36bccccc81ae2f2d192be @x2))
(and (HasTypeFuel @u0
@x1
(FStar.Seq.Base.seq (Protocol.entry @x2)))

;; def=Protocol.fst(74,52-74,109); use=Protocol.fst(74,52-74,109)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.nat)

;; def=Protocol.fst(74,68-74,80); use=Protocol.fst(74,68-74,80)
(< (BoxInt_proj_0 @x3)
(BoxInt_proj_0 (FStar.Seq.Base.length (Protocol.entry @x2)
@x1)))
)

;; def=Protocol.fst(74,85-74,109); use=Protocol.fst(74,85-74,109)
(= (Protocol.__proj__E__item__i @x2
(FStar.Seq.Base.index (Protocol.entry @x2)
@x1
@x3))
@x3)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_c52766f1ffb36bccccc81ae2f2d192be.1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_c52766f1ffb36bccccc81ae2f2d192be @x2)))
:qid refinement_interpretation_Tm_refine_c52766f1ffb36bccccc81ae2f2d192be))

:named refinement_interpretation_Tm_refine_c52766f1ffb36bccccc81ae2f2d192be))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Seq.Base.init_aux; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(36,41-36,57); use=FStar.Seq.Base.fsti(36,41-36,57)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_c1424615841f28cac7fc34e92b7ff33c @x2))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=FStar.Seq.Base.fsti(36,48-36,55); use=FStar.Seq.Base.fsti(36,48-36,55)
(< (BoxInt_proj_0 @x1)
(BoxInt_proj_0 @x2))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_c1424615841f28cac7fc34e92b7ff33c @x2)))
:qid refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c))

:named refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Preorder.preorder; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(33,25-33,57); use=FStar.Preorder.fst(33,25-33,57)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_bd10f09297e0e7dc08314f7d9211801c @x2))
(and (HasTypeFuel @u0
@x1
(FStar.Preorder.relation @x2))

;; def=FStar.Preorder.fst(33,40-33,56); use=FStar.Preorder.fst(33,40-33,56)
(Valid 
;; def=FStar.Preorder.fst(33,40-33,56); use=FStar.Preorder.fst(33,40-33,56)
(FStar.Preorder.preorder_rel @x2
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_bd10f09297e0e7dc08314f7d9211801c @x2)))
:qid refinement_interpretation_Tm_refine_bd10f09297e0e7dc08314f7d9211801c))

:named refinement_interpretation_Tm_refine_bd10f09297e0e7dc08314f7d9211801c))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name MonotonicArray.all_init_i_j; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(254,57-254,82); use=MonotonicArray.fsti(254,57-254,82)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_ba560d8a941cf6251ebf4b60a86ab6b7 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=MonotonicArray.fsti(254,64-254,70); use=MonotonicArray.fsti(254,64-254,70)
(>= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 @x2))


;; def=MonotonicArray.fsti(254,74-254,80); use=MonotonicArray.fsti(254,74-254,80)
(<= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 @x3))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_ba560d8a941cf6251ebf4b60a86ab6b7 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_ba560d8a941cf6251ebf4b60a86ab6b7))

:named refinement_interpretation_Tm_refine_ba560d8a941cf6251ebf4b60a86ab6b7))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Seq.Base.empty; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(46,26-46,49); use=FStar.Seq.Base.fsti(46,26-46,49)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_b913a3f691ca99086652e0a655e72f17 @x2))
(and (HasTypeFuel @u0
@x1
(FStar.Seq.Base.seq @x2))

;; def=FStar.Seq.Base.fsti(46,37-46,47); use=FStar.Seq.Base.fsti(46,37-46,47)
(= (FStar.Seq.Base.length @x2
@x1)
(BoxInt 0))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_b913a3f691ca99086652e0a655e72f17 @x2)))
:qid refinement_interpretation_Tm_refine_b913a3f691ca99086652e0a655e72f17))

:named refinement_interpretation_Tm_refine_b913a3f691ca99086652e0a655e72f17))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Seq.Base.eq_i; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(171,5-171,26); use=FStar.Seq.Base.fsti(171,5-171,26)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_b361ba8089a6e963921008d537e799a1 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=FStar.Seq.Base.fsti(171,11-171,25); use=FStar.Seq.Base.fsti(171,11-171,25)
(<= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (FStar.Seq.Base.length @x2
@x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_b361ba8089a6e963921008d537e799a1 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_b361ba8089a6e963921008d537e799a1))

:named refinement_interpretation_Tm_refine_b361ba8089a6e963921008d537e799a1))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Monotonic.Heap.lemma_free_addr_unused_in; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=Prims.fst(680,11-683,23); use=Prims.fst(680,11-683,23)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_b197fcc3fe1a6a8a07bfa2aebd77a80a)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(680,18-683,23); use=Prims.fst(680,18-683,23)
(or 
;; def=Prims.fst(680,18-680,24); use=Prims.fst(680,18-680,24)
(>= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))


;; def=Prims.fst(683,18-683,23); use=Prims.fst(683,18-683,23)
(> (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_b197fcc3fe1a6a8a07bfa2aebd77a80a))
:qid refinement_interpretation_Tm_refine_b197fcc3fe1a6a8a07bfa2aebd77a80a))

:named refinement_interpretation_Tm_refine_b197fcc3fe1a6a8a07bfa2aebd77a80a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Monotonic.Heap.addr_of_aref; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(324,34-324,53); use=FStar.Monotonic.Heap.fsti(324,34-324,53)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_afd51579b90d50ea23e03b743a1fa001)
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=FStar.Monotonic.Heap.fsti(324,44-324,49); use=FStar.Monotonic.Heap.fsti(324,44-324,49)
(> (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_afd51579b90d50ea23e03b743a1fa001))
:qid refinement_interpretation_Tm_refine_afd51579b90d50ea23e03b743a1fa001))

:named refinement_interpretation_Tm_refine_afd51579b90d50ea23e03b743a1fa001))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_app2; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(153,57-153,107); use=FStar.Seq.Base.fsti(153,57-153,107)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_ac201cf927190d39c033967b63cb957b @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=FStar.Seq.Base.fsti(153,63-153,88); use=FStar.Seq.Base.fsti(153,63-153,88)
(< (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (Prims.op_Addition (FStar.Seq.Base.length @x2
@x3)
(FStar.Seq.Base.length @x2
@x4))))


;; def=FStar.Seq.Base.fsti(153,92-153,106); use=FStar.Seq.Base.fsti(153,92-153,106)
(<= (BoxInt_proj_0 (FStar.Seq.Base.length @x2
@x3))
(BoxInt_proj_0 @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_ac201cf927190d39c033967b63cb957b @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_ac201cf927190d39c033967b63cb957b))

:named refinement_interpretation_Tm_refine_ac201cf927190d39c033967b63cb957b))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name MonotonicArray.as_initialized_subseq; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(289,10-289,69); use=MonotonicArray.fsti(289,10-289,69)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_a2bea900bf9c6309aac9131f4b0fc594 @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=MonotonicArray.fsti(289,17-289,23); use=MonotonicArray.fsti(289,17-289,23)
(>= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 @x2))


;; def=MonotonicArray.fsti(289,27-289,33); use=MonotonicArray.fsti(289,27-289,33)
(<= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 @x3))


;; def=MonotonicArray.fsti(289,37-289,67); use=MonotonicArray.fsti(289,37-289,67)
(Valid 
;; def=MonotonicArray.fsti(289,37-289,67); use=MonotonicArray.fsti(289,37-289,67)
(MonotonicArray.init_arr_in_heap_i_j @x4
@x3
@x5
@x6
@x2
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_a2bea900bf9c6309aac9131f4b0fc594 @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_a2bea900bf9c6309aac9131f4b0fc594))

:named refinement_interpretation_Tm_refine_a2bea900bf9c6309aac9131f4b0fc594))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.ST.witnessed; Namespace FStar.ST
(assert (! 
;; def=FStar.ST.fst(49,14-49,42); use=FStar.ST.fst(49,14-49,42)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_a11098d99239284f14b49e1dd0266896)
(and (HasTypeFuel @u0
@x1
FStar.ST.heap_predicate)

;; def=FStar.ST.fst(49,32-49,40); use=FStar.ST.fst(49,32-49,40)
(Valid 
;; def=FStar.ST.fst(49,32-49,40); use=FStar.ST.fst(49,32-49,40)
(FStar.ST.stable @x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_a11098d99239284f14b49e1dd0266896))
:qid refinement_interpretation_Tm_refine_a11098d99239284f14b49e1dd0266896))

:named refinement_interpretation_Tm_refine_a11098d99239284f14b49e1dd0266896))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Protocol.iarray; Namespace Protocol
(assert (! 
;; def=Protocol.fst(175,32-175,55); use=Protocol.fst(175,32-175,55)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_9dd2f7dc4f1c13136a80acee9d90b531 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(MonotonicArray.array @x2
@x3))

;; def=Protocol.fst(175,44-175,54); use=Protocol.fst(175,44-175,54)
(Valid 
;; def=Protocol.fst(175,44-175,54); use=Protocol.fst(175,44-175,54)
(MonotonicArray.all_init @x2
@x3
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_9dd2f7dc4f1c13136a80acee9d90b531 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_9dd2f7dc4f1c13136a80acee9d90b531))

:named refinement_interpretation_Tm_refine_9dd2f7dc4f1c13136a80acee9d90b531))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Protocol.counter_t; Namespace Protocol
(assert (! 
;; def=Protocol.fst(92,4-92,44); use=Protocol.fst(92,4-92,44)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_931dcd8377a7c87ea65f2ca091543de1 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=Protocol.fst(92,10-92,43); use=Protocol.fst(92,10-92,43)
(Valid 
;; def=Protocol.fst(92,10-92,43); use=Protocol.fst(92,10-92,43)
(FStar.ST.witnessed (Protocol.counter_pred @x2
@x1
@x3))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_931dcd8377a7c87ea65f2ca091543de1 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_931dcd8377a7c87ea65f2ca091543de1))

:named refinement_interpretation_Tm_refine_931dcd8377a7c87ea65f2ca091543de1))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Prims.fst(315,31-315,40)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x2
@x3))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=Prims.fst(315,18-315,21); use=Prims.fst(315,36-315,39)
(Valid 
;; def=Prims.fst(315,18-315,21); use=Prims.fst(315,36-315,39)
@x3
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))

:named refinement_interpretation_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Protocol.message; Namespace Protocol
(assert (! 
;; def=Protocol.fst(40,15-40,52); use=Protocol.fst(40,15-40,52)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_8cf65a0e984801514f164a721568601b)
(and (HasTypeFuel @u0
@x1
(FStar.Seq.Base.seq Protocol.byte))

;; def=Protocol.fst(40,26-40,51); use=Protocol.fst(40,26-40,51)
(<= (BoxInt_proj_0 (FStar.Seq.Base.length Protocol.byte
@x1))
(BoxInt_proj_0 (Protocol.fragment_size Dummy_value)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_8cf65a0e984801514f164a721568601b))
:qid refinement_interpretation_Tm_refine_8cf65a0e984801514f164a721568601b))

:named refinement_interpretation_Tm_refine_8cf65a0e984801514f164a721568601b))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Protocol.network_message; Namespace Protocol
(assert (! 
;; def=Protocol.fst(41,23-41,59); use=Protocol.fst(41,23-41,59)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_84f2654672d0a3698a905d302d0b961d)
(and (HasTypeFuel @u0
@x1
(FStar.Seq.Base.seq Protocol.byte))

;; def=Protocol.fst(41,34-41,58); use=Protocol.fst(41,34-41,58)
(= (FStar.Seq.Base.length Protocol.byte
@x1)
(Protocol.fragment_size Dummy_value))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_84f2654672d0a3698a905d302d0b961d))
:qid refinement_interpretation_Tm_refine_84f2654672d0a3698a905d302d0b961d))

:named refinement_interpretation_Tm_refine_84f2654672d0a3698a905d302d0b961d))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name MonotonicArray.lemma_all_init_i_j_sub; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(314,22-314,47); use=MonotonicArray.fsti(314,22-314,47)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_841a7dab4e44e4e07aab6383c1e10f2e @x2
@x3))
(and (HasTypeFuel @u0
@x1
(MonotonicArray.t @x2
@x3))

;; def=MonotonicArray.fsti(314,33-314,45); use=MonotonicArray.fsti(314,33-314,45)
(Valid 
;; def=MonotonicArray.fsti(314,33-314,45); use=MonotonicArray.fsti(314,33-314,45)
(MonotonicArray.all_init @x2
@x3
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_841a7dab4e44e4e07aab6383c1e10f2e @x2
@x3)))
:qid refinement_interpretation_Tm_refine_841a7dab4e44e4e07aab6383c1e10f2e))

:named refinement_interpretation_Tm_refine_841a7dab4e44e4e07aab6383c1e10f2e))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Protocol.zeroes; Namespace Protocol
(assert (! 
;; def=Protocol.fst(54,21-54,47); use=Protocol.fst(55,4-55,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_837d13d4049ad183b630251f6b46706f @x2))
(and (HasTypeFuel @u0
@x1
(FStar.Seq.Base.seq Protocol.byte))

;; def=Protocol.fst(54,33-54,45); use=Protocol.fst(55,4-55,10)
(= (FStar.Seq.Base.length Protocol.byte
@x1)
@x2)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_837d13d4049ad183b630251f6b46706f @x2)))
:qid refinement_interpretation_Tm_refine_837d13d4049ad183b630251f6b46706f))

:named refinement_interpretation_Tm_refine_837d13d4049ad183b630251f6b46706f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name MonotonicArray.lemma_sub_init_at; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(227,34-227,64); use=MonotonicArray.fsti(227,34-227,64)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_81607a3aa49a257c80978da6415b0769 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
(MonotonicArray.index @x2
@x3
@x4))

;; def=MonotonicArray.fsti(227,47-227,62); use=MonotonicArray.fsti(227,47-227,62)
(Valid 
;; def=MonotonicArray.fsti(227,47-227,62); use=MonotonicArray.fsti(227,47-227,62)
(MonotonicArray.init_at @x2
@x3
@x4
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_81607a3aa49a257c80978da6415b0769 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_81607a3aa49a257c80978da6415b0769))

:named refinement_interpretation_Tm_refine_81607a3aa49a257c80978da6415b0769))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Seq.Base.slice; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=FStar.Seq.Base.fsti(64,43-64,73)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_81407705a0828c2c1b1976675443f647 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.nat)
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x2
@x1))
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x1
(FStar.Seq.Base.length @x3
@x4)))))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_81407705a0828c2c1b1976675443f647 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_81407705a0828c2c1b1976675443f647))

:named refinement_interpretation_Tm_refine_81407705a0828c2c1b1976675443f647))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name MonotonicArray.suffix; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(166,43-166,58); use=MonotonicArray.fsti(166,43-166,58)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x2))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=MonotonicArray.fsti(166,50-166,56); use=MonotonicArray.fsti(166,50-166,56)
(<= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 @x2))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x2)))
:qid refinement_interpretation_Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d))

:named refinement_interpretation_Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! 
;; def=Prims.fst(683,11-683,24); use=Prims.fst(683,11-683,24)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_774ba3f728d91ead8ef40be66c9802e5)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(683,18-683,23); use=Prims.fst(683,18-683,23)
(> (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
:qid refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))

:named refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! 
;; def=Prims.fst(304,12-304,41); use=Prims.fst(304,12-304,41)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf)
(and (HasTypeFuel @u0
@x1
Tm_type)

;; def=Prims.fst(304,21-304,40); use=Prims.fst(304,21-304,40)
(Valid 
;; def=Prims.fst(304,21-304,40); use=Prims.fst(304,21-304,40)
(Prims.subtype_of @x1
Prims.unit)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
:qid refinement_interpretation_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))

:named refinement_interpretation_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name MonotonicArray.sub; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(164,48-164,71); use=MonotonicArray.fsti(164,48-164,71)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_6f684e27d6af9965634108bcfe981953 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=MonotonicArray.fsti(164,57-164,69); use=MonotonicArray.fsti(164,57-164,69)
(<= (BoxInt_proj_0 (Prims.op_Addition @x2
@x1))
(BoxInt_proj_0 @x3))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_6f684e27d6af9965634108bcfe981953 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_6f684e27d6af9965634108bcfe981953))

:named refinement_interpretation_Tm_refine_6f684e27d6af9965634108bcfe981953))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Protocol.lemma_is_prefix_of_slice; Namespace Protocol
(assert (! 
;; def=Protocol.fst(313,24-313,56); use=Protocol.fst(313,24-313,56)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_6472b0a877e3e824d44d3d3f19ad04e0 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(FStar.Seq.Base.seq @x2))

;; def=Protocol.fst(313,34-313,54); use=Protocol.fst(313,34-313,54)
(Valid 
;; def=Protocol.fst(313,34-313,54); use=Protocol.fst(313,34-313,54)
(Protocol.is_prefix_of @x2
@x3
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_6472b0a877e3e824d44d3d3f19ad04e0 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_6472b0a877e3e824d44d3d3f19ad04e0))

:named refinement_interpretation_Tm_refine_6472b0a877e3e824d44d3d3f19ad04e0))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Protocol.entry; Namespace Protocol; Name Protocol.E; Namespace Protocol
(assert (! 
;; def=Protocol.fst(70,31-70,87); use=Protocol.fst(70,31-70,87)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_6261f1452b3e7c2df9d267c7f3d29bd3 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Protocol.network_message)

;; def=Protocol.fst(70,54-70,86); use=Protocol.fst(70,54-70,86)
(= (Protocol.xor (Protocol.pad @x2)
(ApplyTT @x3
@x4))
@x1)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_6261f1452b3e7c2df9d267c7f3d29bd3 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_6261f1452b3e7c2df9d267c7f3d29bd3))

:named refinement_interpretation_Tm_refine_6261f1452b3e7c2df9d267c7f3d29bd3))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Monotonic.Heap.sel_tot; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(72,54-72,82); use=FStar.Monotonic.Heap.fsti(72,54-72,82)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_60a89cd0c268e7ce38a2aab467325fd8 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
(FStar.Monotonic.Heap.mref @x2
@x3))

;; def=FStar.Monotonic.Heap.fsti(72,67-72,81); use=FStar.Monotonic.Heap.fsti(72,67-72,81)
(Valid 
;; def=FStar.Monotonic.Heap.fsti(72,67-72,81); use=FStar.Monotonic.Heap.fsti(72,67-72,81)
(FStar.Monotonic.Heap.contains @x2
@x3
@x4
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_60a89cd0c268e7ce38a2aab467325fd8 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_60a89cd0c268e7ce38a2aab467325fd8))

:named refinement_interpretation_Tm_refine_60a89cd0c268e7ce38a2aab467325fd8))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Protocol.sent_bytes'; Namespace Protocol
(assert (! 
;; def=Protocol.fst(335,58-335,78); use=Protocol.fst(335,58-335,78)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_571d9f74016be5357787170b42ecf913 @x2))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=Protocol.fst(335,66-335,76); use=Protocol.fst(335,66-335,76)
(<= (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_571d9f74016be5357787170b42ecf913 @x2)))
:qid refinement_interpretation_Tm_refine_571d9f74016be5357787170b42ecf913))

:named refinement_interpretation_Tm_refine_571d9f74016be5357787170b42ecf913))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! 
;; def=Prims.fst(680,11-680,25); use=Prims.fst(680,11-680,25)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_542f9d4f129664613f2483a6c88bc7c2)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(680,18-680,24); use=Prims.fst(680,18-680,24)
(>= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
:qid refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))

:named refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Some__item__v; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x2))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.option @x2))

;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x2
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x2)))
:qid refinement_interpretation_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a))

:named refinement_interpretation_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name ArrayUtils.seq_map; Namespace ArrayUtils
(assert (! 
;; def=ArrayUtils.fst(117,5-117,108); use=ArrayUtils.fst(117,5-117,108)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_4a193488219f747acf46a37f5644f382 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
(FStar.Seq.Base.seq @x4))

;; def=ArrayUtils.fst(117,14-117,33); use=ArrayUtils.fst(117,14-117,33)
(= (FStar.Seq.Base.length @x2
@x3)
(FStar.Seq.Base.length @x4
@x1))


;; def=ArrayUtils.fst(117,37-117,106); use=ArrayUtils.fst(117,37-117,106)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.nat)

;; def=ArrayUtils.fst(117,54-117,66); use=ArrayUtils.fst(117,54-117,66)
(< (BoxInt_proj_0 @x6)
(BoxInt_proj_0 (FStar.Seq.Base.length @x2
@x3)))
)

;; def=ArrayUtils.fst(117,71-117,105); use=ArrayUtils.fst(117,71-117,105)
(= (FStar.Seq.Base.index @x4
@x1
@x6)
(ApplyTT @x5
(FStar.Seq.Base.index @x2
@x3
@x6)))
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_4a193488219f747acf46a37f5644f382.1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_4a193488219f747acf46a37f5644f382 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_4a193488219f747acf46a37f5644f382))

:named refinement_interpretation_Tm_refine_4a193488219f747acf46a37f5644f382))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name MonotonicArray.lemma_sub_init_at; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(228,24-228,62); use=MonotonicArray.fsti(228,24-228,62)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_45b45690e95d6d557b24b79ee0491da4 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=MonotonicArray.fsti(228,33-228,45); use=MonotonicArray.fsti(228,33-228,45)
(<= (BoxInt_proj_0 (Prims.op_Addition @x2
@x1))
(BoxInt_proj_0 @x3))


;; def=MonotonicArray.fsti(228,49-228,60); use=MonotonicArray.fsti(228,49-228,60)
(> (BoxInt_proj_0 (Prims.op_Addition @x2
@x1))
(BoxInt_proj_0 @x4))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_45b45690e95d6d557b24b79ee0491da4 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_45b45690e95d6d557b24b79ee0491da4))

:named refinement_interpretation_Tm_refine_45b45690e95d6d557b24b79ee0491da4))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name MonotonicArray.as_initialized_seq; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(283,34-283,66); use=MonotonicArray.fsti(283,34-283,66)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_4183060ba5404f285780b6cf19647e32 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
FStar.Monotonic.Heap.heap)

;; def=MonotonicArray.fsti(283,42-283,64); use=MonotonicArray.fsti(283,42-283,64)
(Valid 
;; def=MonotonicArray.fsti(283,42-283,64); use=MonotonicArray.fsti(283,42-283,64)
(MonotonicArray.init_arr_in_heap @x2
@x3
@x4
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_4183060ba5404f285780b6cf19647e32 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_4183060ba5404f285780b6cf19647e32))

:named refinement_interpretation_Tm_refine_4183060ba5404f285780b6cf19647e32))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! 
;; def=Prims.fst(73,14-73,31); use=Prims.fst(73,14-73,31)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_414d0a9f578ab0048252f8c8f552b99f)
(and (HasTypeFuel @u0
@x1
Tm_type)

;; def=Prims.fst(73,23-73,30); use=Prims.fst(73,23-73,30)
(Valid 
;; def=Prims.fst(73,23-73,30); use=Prims.fst(73,23-73,30)
(Prims.hasEq @x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
:qid refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))

:named refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Protocol.lemma_prefix_entries_implies_prefix_log; Namespace Protocol
(assert (! 
;; def=Protocol.fst(144,27-144,86); use=Protocol.fst(144,27-144,86)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_3d0c21849d5cf8d118afc092733f14a4 @x2
@x3))
(and (HasTypeFuel @u0
@x1
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(144,36-144,58); use=Protocol.fst(144,36-144,58)
(Valid 
;; def=Protocol.fst(144,36-144,58); use=Protocol.fst(144,36-144,58)
(Protocol.live_connection @x2
@x3)
)


;; def=Protocol.fst(144,62-144,84); use=Protocol.fst(144,62-144,84)
(Valid 
;; def=Protocol.fst(144,62-144,84); use=Protocol.fst(144,62-144,84)
(Protocol.live_connection @x1
@x3)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_3d0c21849d5cf8d118afc092733f14a4 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_3d0c21849d5cf8d118afc092733f14a4))

:named refinement_interpretation_Tm_refine_3d0c21849d5cf8d118afc092733f14a4))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_slice; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(158,88-158,104); use=FStar.Seq.Base.fsti(158,88-158,104)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=FStar.Seq.Base.fsti(158,94-158,103); use=FStar.Seq.Base.fsti(158,94-158,103)
(< (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (Prims.op_Subtraction @x2
@x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8))

:named refinement_interpretation_Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,32-117,42); use=Prims.fst(117,32-117,42)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(117,13-117,14); use=Prims.fst(117,40-117,41)
(Valid 
;; def=Prims.fst(117,13-117,14); use=Prims.fst(117,40-117,41)
@x2
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x2)))
:qid refinement_interpretation_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))

:named refinement_interpretation_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name ArrayUtils.lemma_is_prefix_of_slice; Namespace ArrayUtils
(assert (! 
;; def=ArrayUtils.fst(109,65-109,102); use=ArrayUtils.fst(109,65-109,102)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_21ba3780ecd4c31fe9f89ff8d60a5f28 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=ArrayUtils.fst(109,72-109,78); use=ArrayUtils.fst(109,72-109,78)
(>= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 @x2))


;; def=ArrayUtils.fst(109,82-109,100); use=ArrayUtils.fst(109,82-109,100)
(<= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (FStar.Seq.Base.length @x3
@x4)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_21ba3780ecd4c31fe9f89ff8d60a5f28 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_21ba3780ecd4c31fe9f89ff8d60a5f28))

:named refinement_interpretation_Tm_refine_21ba3780ecd4c31fe9f89ff8d60a5f28))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Seq.Properties.slice_slice; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(625,2-625,40); use=FStar.Seq.Properties.fsti(625,2-625,40)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_1ba8fd8bb363097813064c67740b2de5 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=FStar.Seq.Properties.fsti(625,12-625,20); use=FStar.Seq.Properties.fsti(625,12-625,20)
(<= (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x1))


;; def=FStar.Seq.Properties.fsti(625,24-625,37); use=FStar.Seq.Properties.fsti(625,24-625,37)
(<= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (Prims.op_Subtraction @x3
@x4)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_1ba8fd8bb363097813064c67740b2de5 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_1ba8fd8bb363097813064c67740b2de5))

:named refinement_interpretation_Tm_refine_1ba8fd8bb363097813064c67740b2de5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Seq.Properties.createL_post; Namespace FStar.Seq.Properties
(assert (! 
;; def=Prims.fst(680,11-680,25); use=Prims.fst(680,11-680,25)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_1780a0fddfda88c43d203b562c6d3f5b)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (Prims.op_GreaterThanOrEqual @x1
(BoxInt 0))
(BoxBool true))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_1780a0fddfda88c43d203b562c6d3f5b))
:qid refinement_interpretation_Tm_refine_1780a0fddfda88c43d203b562c6d3f5b))

:named refinement_interpretation_Tm_refine_1780a0fddfda88c43d203b562c6d3f5b))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Protocol.__proj__R__item__rand; Namespace Protocol
(assert (! 
;; def=Protocol.fst(103,4-103,5); use=Protocol.fst(103,4-103,5)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_1515f8c9bed8836c1665cbcf6953f9bb)
(and (HasTypeFuel @u0
@x1
Protocol.connection)

;; def=Protocol.fst(103,4-103,5); use=Protocol.fst(103,4-103,5)
(BoxBool_proj_0 (Protocol.uu___is_R @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_1515f8c9bed8836c1665cbcf6953f9bb))
:qid refinement_interpretation_Tm_refine_1515f8c9bed8836c1665cbcf6953f9bb))

:named refinement_interpretation_Tm_refine_1515f8c9bed8836c1665cbcf6953f9bb))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Protocol.log; Namespace Protocol
(assert (! 
;; def=Protocol.fst(140,23-140,54); use=Protocol.fst(140,23-140,54)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_12e73119c459be812384fdc8e6c9733a @x2))
(and (HasTypeFuel @u0
@x1
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(140,31-140,52); use=Protocol.fst(140,31-140,52)
(Valid 
;; def=Protocol.fst(140,31-140,52); use=Protocol.fst(140,31-140,52)
(Protocol.live_connection @x1
@x2)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_12e73119c459be812384fdc8e6c9733a @x2)))
:qid refinement_interpretation_Tm_refine_12e73119c459be812384fdc8e6c9733a))

:named refinement_interpretation_Tm_refine_12e73119c459be812384fdc8e6c9733a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Seq.Properties.snoc_slice_index; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(585,2-585,36); use=FStar.Seq.Properties.fsti(585,2-585,36)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_095c5722edf0f79bcd7dce7bd084c7b5 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=FStar.Seq.Properties.fsti(585,11-585,17); use=FStar.Seq.Properties.fsti(585,11-585,17)
(<= (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x1))


;; def=FStar.Seq.Properties.fsti(585,21-585,33); use=FStar.Seq.Properties.fsti(585,21-585,33)
(< (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (FStar.Seq.Base.length @x3
@x4)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_095c5722edf0f79bcd7dce7bd084c7b5 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_095c5722edf0f79bcd7dce7bd084c7b5))

:named refinement_interpretation_Tm_refine_095c5722edf0f79bcd7dce7bd084c7b5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name MonotonicArray.lemma_sub_init_at; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(228,2-228,23); use=MonotonicArray.fsti(228,2-228,23)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_07d42d481cf119dc0746fa408e885a96 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
(MonotonicArray.index @x2
@x3
@x4))

;; def=MonotonicArray.fsti(228,15-228,21); use=MonotonicArray.fsti(228,15-228,21)
(<= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 @x5))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_07d42d481cf119dc0746fa408e885a96 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_07d42d481cf119dc0746fa408e885a96))

:named refinement_interpretation_Tm_refine_07d42d481cf119dc0746fa408e885a96))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! 
;; def=Prims.fst(686,15-686,29); use=Prims.fst(686,15-686,29)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(686,22-686,28); use=Prims.fst(686,22-686,28)
(not (= @x1
(BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
:qid refinement_interpretation_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))

:named refinement_interpretation_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Protocol.connection; Namespace Protocol; Name Protocol.S; Namespace Protocol; Name Protocol.R; Namespace Protocol
(assert (! 
;; def=Protocol.fst(102,4-102,5); use=Protocol.fst(102,4-102,5)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Protocol.S_rand (Protocol.S @x0
@x1))
@x0)
 

:pattern ((Protocol.S @x0
@x1))
:qid projection_inverse_Protocol.S_rand))

:named projection_inverse_Protocol.S_rand))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Protocol.connection; Namespace Protocol; Name Protocol.S; Namespace Protocol; Name Protocol.R; Namespace Protocol
(assert (! 
;; def=Protocol.fst(102,4-102,5); use=Protocol.fst(102,4-102,5)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Protocol.S_entries (Protocol.S @x0
@x1))
@x1)
 

:pattern ((Protocol.S @x0
@x1))
:qid projection_inverse_Protocol.S_entries))

:named projection_inverse_Protocol.S_entries))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Protocol.connection; Namespace Protocol; Name Protocol.S; Namespace Protocol; Name Protocol.R; Namespace Protocol
(assert (! 
;; def=Protocol.fst(103,4-103,5); use=Protocol.fst(103,4-103,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Protocol.R_rand (Protocol.R @x0
@x1
@x2))
@x0)
 

:pattern ((Protocol.R @x0
@x1
@x2))
:qid projection_inverse_Protocol.R_rand))

:named projection_inverse_Protocol.R_rand))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Protocol.connection; Namespace Protocol; Name Protocol.S; Namespace Protocol; Name Protocol.R; Namespace Protocol
(assert (! 
;; def=Protocol.fst(103,4-103,5); use=Protocol.fst(103,4-103,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Protocol.R_entries (Protocol.R @x0
@x1
@x2))
@x1)
 

:pattern ((Protocol.R @x0
@x1
@x2))
:qid projection_inverse_Protocol.R_entries))

:named projection_inverse_Protocol.R_entries))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Protocol.connection; Namespace Protocol; Name Protocol.S; Namespace Protocol; Name Protocol.R; Namespace Protocol
(assert (! 
;; def=Protocol.fst(103,4-103,5); use=Protocol.fst(103,4-103,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Protocol.R_ctr (Protocol.R @x0
@x1
@x2))
@x2)
 

:pattern ((Protocol.R @x0
@x1
@x2))
:qid projection_inverse_Protocol.R_ctr))

:named projection_inverse_Protocol.R_ctr))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Protocol.entry; Namespace Protocol; Name Protocol.E; Namespace Protocol
(assert (! 
;; def=Protocol.fst(70,4-70,5); use=Protocol.fst(70,4-70,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (Protocol.E_tag (Protocol.E @x0
@x1
@x2
@x3
@x4))
@x4)
 

:pattern ((Protocol.E @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_Protocol.E_tag))

:named projection_inverse_Protocol.E_tag))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Protocol.entry; Namespace Protocol; Name Protocol.E; Namespace Protocol
(assert (! 
;; def=Protocol.fst(70,4-70,5); use=Protocol.fst(70,4-70,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (Protocol.E_rand (Protocol.E @x0
@x1
@x2
@x3
@x4))
@x0)
 

:pattern ((Protocol.E @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_Protocol.E_rand))

:named projection_inverse_Protocol.E_rand))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Protocol.entry; Namespace Protocol; Name Protocol.E; Namespace Protocol
(assert (! 
;; def=Protocol.fst(70,4-70,5); use=Protocol.fst(70,4-70,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (Protocol.E_msg (Protocol.E @x0
@x1
@x2
@x3
@x4))
@x2)
 

:pattern ((Protocol.E @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_Protocol.E_msg))

:named projection_inverse_Protocol.E_msg))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Protocol.entry; Namespace Protocol; Name Protocol.E; Namespace Protocol
(assert (! 
;; def=Protocol.fst(70,4-70,5); use=Protocol.fst(70,4-70,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (Protocol.E_i (Protocol.E @x0
@x1
@x2
@x3
@x4))
@x1)
 

:pattern ((Protocol.E @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_Protocol.E_i))

:named projection_inverse_Protocol.E_i))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Protocol.entry; Namespace Protocol; Name Protocol.E; Namespace Protocol
(assert (! 
;; def=Protocol.fst(70,4-70,5); use=Protocol.fst(70,4-70,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (Protocol.E_cipher (Protocol.E @x0
@x1
@x2
@x3
@x4))
@x3)
 

:pattern ((Protocol.E @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_Protocol.E_cipher))

:named projection_inverse_Protocol.E_cipher))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Pair_q (Prims.Pair @x0
@x1
@x2
@x3))
@x1)
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Pair_q))

:named projection_inverse_Prims.Pair_q))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Pair_p (Prims.Pair @x0
@x1
@x2
@x3))
@x0)
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Pair_p))

:named projection_inverse_Prims.Pair_p))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Pair__2 (Prims.Pair @x0
@x1
@x2
@x3))
@x3)
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Pair__2))

:named projection_inverse_Prims.Pair__2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Pair__1 (Prims.Pair @x0
@x1
@x2
@x3))
@x2)
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Pair__1))

:named projection_inverse_Prims.Pair__1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.Some_v (FStar.Pervasives.Native.Some @x0
@x1))
@x1)
 

:pattern ((FStar.Pervasives.Native.Some @x0
@x1))
:qid projection_inverse_FStar.Pervasives.Native.Some_v))

:named projection_inverse_FStar.Pervasives.Native.Some_v))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.Some_a (FStar.Pervasives.Native.Some @x0
@x1))
@x0)
 

:pattern ((FStar.Pervasives.Native.Some @x0
@x1))
:qid projection_inverse_FStar.Pervasives.Native.Some_a))

:named projection_inverse_FStar.Pervasives.Native.Some_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@x0 Term))
 (! (= (FStar.Pervasives.Native.None_a (FStar.Pervasives.Native.None @x0))
@x0)
 

:pattern ((FStar.Pervasives.Native.None @x0))
:qid projection_inverse_FStar.Pervasives.Native.None_a))

:named projection_inverse_FStar.Pervasives.Native.None_a))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name Protocol.__proj__R__item__rand; Namespace Protocol
(assert (! 
;; def=Protocol.fst(103,7-103,11); use=Protocol.fst(103,7-103,11)
(forall ((@x0 Term))
 (! (= (Protocol.__proj__R__item__rand @x0)
(Protocol.R_rand @x0))
 

:pattern ((Protocol.__proj__R__item__rand @x0))
:qid proj_equation_Protocol.R_rand))

:named proj_equation_Protocol.R_rand))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name Protocol.__proj__R__item__entries; Namespace Protocol
(assert (! 
;; def=Protocol.fst(103,26-103,33); use=Protocol.fst(103,26-103,33)
(forall ((@x0 Term))
 (! (= (Protocol.__proj__R__item__entries @x0)
(Protocol.R_entries @x0))
 

:pattern ((Protocol.__proj__R__item__entries @x0))
:qid proj_equation_Protocol.R_entries))

:named proj_equation_Protocol.R_entries))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name Protocol.__proj__R__item__ctr; Namespace Protocol
(assert (! 
;; def=Protocol.fst(104,10-104,13); use=Protocol.fst(104,10-104,13)
(forall ((@x0 Term))
 (! (= (Protocol.__proj__R__item__ctr @x0)
(Protocol.R_ctr @x0))
 

:pattern ((Protocol.__proj__R__item__ctr @x0))
:qid proj_equation_Protocol.R_ctr))

:named proj_equation_Protocol.R_ctr))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name Protocol.__proj__E__item__i; Namespace Protocol
(assert (! 
;; def=Protocol.fst(70,7-70,8); use=Protocol.fst(70,7-70,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Protocol.__proj__E__item__i @x0
@x1)
(Protocol.E_i @x1))
 

:pattern ((Protocol.__proj__E__item__i @x0
@x1))
:qid proj_equation_Protocol.E_i))

:named proj_equation_Protocol.E_i))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Some__item__v; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,11-33,12); use=FStar.Pervasives.Native.fst(33,11-33,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.__proj__Some__item__v @x0
@x1)
(FStar.Pervasives.Native.Some_v @x1))
 

:pattern ((FStar.Pervasives.Native.__proj__Some__item__v @x0
@x1))
:qid proj_equation_FStar.Pervasives.Native.Some_v))

:named proj_equation_FStar.Pervasives.Native.Some_v))
;;; Fact-ids: Name Prims.op_Subtraction; Namespace Prims
(assert (! 
;; def=Prims.fst(546,4-546,18); use=Prims.fst(546,4-546,18)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_Subtraction @x0
@x1)
(BoxInt (- (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_Subtraction @x0
@x1))
:qid primitive_Prims.op_Subtraction))

:named primitive_Prims.op_Subtraction))
;;; Fact-ids: Name Prims.op_LessThanOrEqual; Namespace Prims
(assert (! 
;; def=Prims.fst(564,4-564,22); use=Prims.fst(564,4-564,22)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_LessThanOrEqual @x0
@x1)
(BoxBool (<= (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_LessThanOrEqual @x0
@x1))
:qid primitive_Prims.op_LessThanOrEqual))

:named primitive_Prims.op_LessThanOrEqual))
;;; Fact-ids: Name Prims.op_GreaterThanOrEqual; Namespace Prims
(assert (! 
;; def=Prims.fst(576,4-576,25); use=Prims.fst(576,4-576,25)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_GreaterThanOrEqual @x0
@x1)
(BoxBool (>= (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_GreaterThanOrEqual @x0
@x1))
:qid primitive_Prims.op_GreaterThanOrEqual))

:named primitive_Prims.op_GreaterThanOrEqual))
;;; Fact-ids: Name Prims.op_Equality; Namespace Prims
(assert (! 
;; def=Prims.fst(588,4-588,15); use=Prims.fst(588,4-588,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.op_Equality @x0
@x1
@x2)
(BoxBool (= @x1
@x2)))
 

:pattern ((Prims.op_Equality @x0
@x1
@x2))
:qid primitive_Prims.op_Equality))

:named primitive_Prims.op_Equality))
;;; Fact-ids: Name Prims.op_BarBar; Namespace Prims
(assert (! 
;; def=Prims.fst(528,4-528,13); use=Prims.fst(528,4-528,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_BarBar @x0
@x1)
(BoxBool (or (BoxBool_proj_0 @x0)
(BoxBool_proj_0 @x1))))
 

:pattern ((Prims.op_BarBar @x0
@x1))
:qid primitive_Prims.op_BarBar))

:named primitive_Prims.op_BarBar))
;;; Fact-ids: Name Prims.op_AmpAmp; Namespace Prims
(assert (! 
;; def=Prims.fst(522,4-522,13); use=Prims.fst(522,4-522,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_AmpAmp @x0
@x1)
(BoxBool (and (BoxBool_proj_0 @x0)
(BoxBool_proj_0 @x1))))
 

:pattern ((Prims.op_AmpAmp @x0
@x1))
:qid primitive_Prims.op_AmpAmp))

:named primitive_Prims.op_AmpAmp))
;;; Fact-ids: Name Prims.op_Addition; Namespace Prims
(assert (! 
;; def=Prims.fst(552,4-552,15); use=Prims.fst(552,4-552,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_Addition @x0
@x1)
(BoxInt (+ (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_Addition @x0
@x1))
:qid primitive_Prims.op_Addition))

:named primitive_Prims.op_Addition))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name Protocol.entry; Namespace Protocol; Name Protocol.E; Namespace Protocol
(assert (! (is-Tm_arrow (PreType Protocol.entry@tok))
:named pre_kinding_Protocol.entry@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! (is-Tm_arrow (PreType Prims.pair@tok))
:named pre_kinding_Prims.pair@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! (is-Tm_arrow (PreType Prims.equals@tok))
:named pre_kinding_Prims.equals@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (is-Tm_arrow (PreType FStar.Pervasives.Native.option@tok))
:named pre_kinding_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;Lemma: Protocol.lemma_xor
;;; Fact-ids: Name Protocol.lemma_xor; Namespace Protocol
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Protocol.network_message)
(HasType @x1
Protocol.network_message))

;; def=Protocol.fst(51,9-51,31); use=Protocol.fst(51,9-51,31)
(= (Protocol.xor (Protocol.xor @x0
@x1)
@x1)
@x0)
)
 

:pattern ((Protocol.xor (Protocol.xor @x0
@x1)
@x1))
:qid lemma_Protocol.lemma_xor))
:named lemma_Protocol.lemma_xor))
;;;;;;;;;;;;;;;;Lemma: Protocol.lemma_sel_entries_equals_sel_tot_entries
;;; Fact-ids: Name Protocol.lemma_sel_entries_equals_sel_tot_entries; Namespace Protocol
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Protocol.connection)
(HasType @x1
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(128,19-128,42); use=Protocol.fst(128,19-128,42)
(Valid 
;; def=Protocol.fst(128,19-128,42); use=Protocol.fst(128,19-128,42)
(Protocol.live_connection @x1
@x0)
)
)

;; def=Protocol.fst(129,19-129,69); use=Protocol.fst(129,19-129,69)
(= (FStar.Monotonic.Heap.sel_tot (Protocol.entries (Protocol.rand_of @x0))
(Protocol.entries_rel (Protocol.rand_of @x0))
@x1
(Protocol.entries_of @x0))
(FStar.Monotonic.Heap.sel (Protocol.entries (Protocol.rand_of @x0))
(Protocol.entries_rel (Protocol.rand_of @x0))
@x1
(Protocol.entries_of @x0)))
)
 

:pattern ((FStar.Monotonic.Heap.sel_tot (Protocol.entries (Protocol.rand_of @x0))
(Protocol.entries_rel (Protocol.rand_of @x0))
@x1
(Protocol.entries_of @x0)))
:qid lemma_Protocol.lemma_sel_entries_equals_sel_tot_entries))
:named lemma_Protocol.lemma_sel_entries_equals_sel_tot_entries))
;;;;;;;;;;;;;;;;Lemma: Protocol.lemma_sel_ctr_ref_equals_sel_tot_ctr_ref
;;; Fact-ids: Name Protocol.lemma_sel_ctr_ref_equals_sel_tot_ctr_ref; Namespace Protocol
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_refine_1515f8c9bed8836c1665cbcf6953f9bb)
(HasType @x1
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(134,19-134,42); use=Protocol.fst(134,19-134,42)
(Valid 
;; def=Protocol.fst(134,19-134,42); use=Protocol.fst(134,19-134,42)
(Protocol.live_connection @x1
@x0)
)
)
(let ((@lb2 @x0))
(ite (is-Protocol.R @lb2)

;; def=Protocol.fst(135,45-135,79); use=Protocol.fst(135,45-135,79)
(= (FStar.Monotonic.Heap.sel_tot (Protocol.counter_t (Protocol.R_rand @lb2)
(Protocol.R_entries @lb2))
(Protocol.counter_pre (Protocol.R_rand @lb2)
(Protocol.R_entries @lb2))
@x1
(Protocol.R_ctr @lb2))
(FStar.Monotonic.Heap.sel (Protocol.counter_t (Protocol.R_rand @lb2)
(Protocol.R_entries @lb2))
(Protocol.counter_pre (Protocol.R_rand @lb2)
(Protocol.R_entries @lb2))
@x1
(Protocol.R_ctr @lb2)))

Unreachable)))
 

:pattern ((FStar.Monotonic.Heap.sel_tot (Protocol.counter_t (Protocol.__proj__R__item__rand @x0)
(Protocol.__proj__R__item__entries @x0))
(Protocol.counter_pre (Protocol.__proj__R__item__rand @x0)
(Protocol.__proj__R__item__entries @x0))
@x1
(Protocol.__proj__R__item__ctr @x0)))
:qid lemma_Protocol.lemma_sel_ctr_ref_equals_sel_tot_ctr_ref))
:named lemma_Protocol.lemma_sel_ctr_ref_equals_sel_tot_ctr_ref))
;;;;;;;;;;;;;;;;Lemma: Protocol.lemma_prefix_entries_implies_prefix_log
;;; Fact-ids: Name Protocol.lemma_prefix_entries_implies_prefix_log; Namespace Protocol
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Protocol.connection)
(HasType @x1
FStar.Monotonic.Heap.heap)
(HasType @x2
(Tm_refine_3d0c21849d5cf8d118afc092733f14a4 @x1
@x0))

;; def=Protocol.fst(145,19-145,79); use=Protocol.fst(145,19-145,79)
(Valid 
;; def=Protocol.fst(145,19-145,79); use=Protocol.fst(145,19-145,79)
(Protocol.is_prefix_of (Protocol.entry (Protocol.rand_of @x0))
(FStar.Monotonic.Heap.sel (Protocol.entries (Protocol.rand_of @x0))
(Protocol.entries_rel (Protocol.rand_of @x0))
@x1
(Protocol.entries_of @x0))
(FStar.Monotonic.Heap.sel (Protocol.entries (Protocol.rand_of @x0))
(Protocol.entries_rel (Protocol.rand_of @x0))
@x2
(Protocol.entries_of @x0)))
)
)

;; def=Protocol.fst(146,12-146,46); use=Protocol.fst(146,12-146,46)
(Valid 
;; def=Protocol.fst(146,12-146,46); use=Protocol.fst(146,12-146,46)
(Protocol.is_prefix_of Protocol.message
(Protocol.log @x0
@x1)
(Protocol.log @x0
@x2))
)
)
 

:pattern ((Protocol.log @x0
@x1) (Protocol.log @x0
@x2))
:qid lemma_Protocol.lemma_prefix_entries_implies_prefix_log))
:named lemma_Protocol.lemma_prefix_entries_implies_prefix_log))
;;;;;;;;;;;;;;;;Lemma: Protocol.lemma_is_prefix_of_slice
;;; Fact-ids: Name Protocol.lemma_is_prefix_of_slice; Namespace Protocol
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
(Tm_refine_6472b0a877e3e824d44d3d3f19ad04e0 @x0
@x1))
(HasType @x3
Prims.nat)
(HasType @x4
(Tm_refine_21ba3780ecd4c31fe9f89ff8d60a5f28 @x3
@x0
@x1)))

;; def=Protocol.fst(315,19-315,57); use=Protocol.fst(315,19-315,57)
(= (FStar.Seq.Base.slice @x0
@x1
@x3
@x4)
(FStar.Seq.Base.slice @x0
@x2
@x3
@x4))
)
 

:pattern ((Protocol.is_prefix_of @x0
@x1
@x2) (FStar.Seq.Base.slice @x0
@x1
@x3
@x4) (FStar.Seq.Base.slice @x0
@x2
@x3
@x4))
:qid lemma_Protocol.lemma_is_prefix_of_slice))
:named lemma_Protocol.lemma_is_prefix_of_slice))
;;;;;;;;;;;;;;;;Lemma: MonotonicArray.lemma_sub_preserves_array_mutable_flag
;;; Fact-ids: Name MonotonicArray.lemma_sub_preserves_array_mutable_flag; Namespace MonotonicArray
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.t @x0
@x1))
(HasType @x3
Prims.nat)
(HasType @x4
(Tm_refine_6f684e27d6af9965634108bcfe981953 @x3
@x1))

;; def=MonotonicArray.fsti(170,19-170,49); use=MonotonicArray.fsti(170,19-170,49)
(Valid 
;; def=MonotonicArray.fsti(170,19-170,49); use=MonotonicArray.fsti(170,19-170,49)
(FStar.ST.witnessed (MonotonicArray.mutable_pred @x0
@x1
@x2))
)
)

;; def=MonotonicArray.fsti(171,19-171,61); use=MonotonicArray.fsti(171,19-171,61)
(Valid 
;; def=MonotonicArray.fsti(171,19-171,61); use=MonotonicArray.fsti(171,19-171,61)
(FStar.ST.witnessed (MonotonicArray.mutable_pred @x0
@x4
(MonotonicArray.sub @x0
@x1
@x2
@x3
@x4)))
)
)
 

:pattern ((FStar.ST.witnessed (MonotonicArray.mutable_pred @x0
@x4
(MonotonicArray.sub @x0
@x1
@x2
@x3
@x4))))
:qid lemma_MonotonicArray.lemma_sub_preserves_array_mutable_flag))
:named lemma_MonotonicArray.lemma_sub_preserves_array_mutable_flag))
;;;;;;;;;;;;;;;;Lemma: MonotonicArray.lemma_sub_is_slice
;;; Fact-ids: Name MonotonicArray.lemma_sub_is_slice; Namespace MonotonicArray
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.t @x0
@x1))
(HasType @x3
Prims.nat)
(HasType @x4
(Tm_refine_6f684e27d6af9965634108bcfe981953 @x3
@x1))
(HasType @x5
FStar.Monotonic.Heap.heap))

;; def=MonotonicArray.fsti(181,19-181,85); use=MonotonicArray.fsti(181,19-181,85)
(= (MonotonicArray.as_seq @x0
@x4
(MonotonicArray.sub @x0
@x1
@x2
@x3
@x4)
@x5)
(FStar.Seq.Base.slice (FStar.Pervasives.Native.option @x0)
(MonotonicArray.as_seq @x0
@x1
@x2
@x5)
@x3
(Prims.op_Addition @x3
@x4)))
)
 

:pattern ((MonotonicArray.as_seq @x0
@x4
(MonotonicArray.sub @x0
@x1
@x2
@x3
@x4)
@x5))
:qid lemma_MonotonicArray.lemma_sub_is_slice))
:named lemma_MonotonicArray.lemma_sub_is_slice))
;;;;;;;;;;;;;;;;Lemma: MonotonicArray.lemma_sub_init_at
;;; Fact-ids: Name MonotonicArray.lemma_sub_init_at; Namespace MonotonicArray
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.t @x0
@x1))
(HasType @x3
(Tm_refine_81607a3aa49a257c80978da6415b0769 @x0
@x1
@x2))
(HasType @x4
(Tm_refine_07d42d481cf119dc0746fa408e885a96 @x0
@x1
@x2
@x3))
(HasType @x5
(Tm_refine_45b45690e95d6d557b24b79ee0491da4 @x4
@x1
@x3)))

;; def=MonotonicArray.fsti(230,19-230,54); use=MonotonicArray.fsti(230,19-230,54)
(Valid 
;; def=MonotonicArray.fsti(230,19-230,54); use=MonotonicArray.fsti(230,19-230,54)
(MonotonicArray.init_at @x0
@x5
(MonotonicArray.sub @x0
@x1
@x2
@x4
@x5)
(Prims.op_Subtraction @x3
@x4))
)
)
 

:pattern ((MonotonicArray.init_at @x0
@x1
@x2
@x3) (MonotonicArray.sub @x0
@x1
@x2
@x4
@x5))
:qid lemma_MonotonicArray.lemma_sub_init_at))
:named lemma_MonotonicArray.lemma_sub_init_at))
;;;;;;;;;;;;;;;;Lemma: MonotonicArray.lemma_sub_footprint
;;; Fact-ids: Name MonotonicArray.lemma_sub_footprint; Namespace MonotonicArray
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.t @x0
@x1))
(HasType @x3
Prims.nat)
(HasType @x4
(Tm_refine_6f684e27d6af9965634108bcfe981953 @x3
@x1)))

;; def=MonotonicArray.fsti(191,19-191,62); use=MonotonicArray.fsti(191,19-191,62)
(= (MonotonicArray.array_footprint @x0
@x1
@x2)
(MonotonicArray.array_footprint @x0
@x4
(MonotonicArray.sub @x0
@x1
@x2
@x3
@x4)))
)
 

:pattern ((MonotonicArray.array_footprint @x0
@x4
(MonotonicArray.sub @x0
@x1
@x2
@x3
@x4)))
:qid lemma_MonotonicArray.lemma_sub_footprint))
:named lemma_MonotonicArray.lemma_sub_footprint))
;;;;;;;;;;;;;;;;Lemma: MonotonicArray.lemma_sub_contains
;;; Fact-ids: Name MonotonicArray.lemma_sub_contains; Namespace MonotonicArray
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.t @x0
@x1))
(HasType @x3
Prims.nat)
(HasType @x4
(Tm_refine_6f684e27d6af9965634108bcfe981953 @x3
@x1))
(HasType @x5
FStar.Monotonic.Heap.heap))

;; def=MonotonicArray.fsti(201,13-201,64); use=MonotonicArray.fsti(201,13-201,64)
(iff 
;; def=MonotonicArray.fsti(201,13-201,35); use=MonotonicArray.fsti(201,13-201,35)
(Valid 
;; def=MonotonicArray.fsti(201,13-201,35); use=MonotonicArray.fsti(201,13-201,35)
(MonotonicArray.contains_array @x0
@x1
@x5
@x2)
)


;; def=MonotonicArray.fsti(201,41-201,64); use=MonotonicArray.fsti(201,41-201,64)
(Valid 
;; def=MonotonicArray.fsti(201,41-201,64); use=MonotonicArray.fsti(201,41-201,64)
(MonotonicArray.contains_array @x0
@x4
@x5
(MonotonicArray.sub @x0
@x1
@x2
@x3
@x4))
)
)
)
 

:pattern ((MonotonicArray.contains_array @x0
@x4
@x5
(MonotonicArray.sub @x0
@x1
@x2
@x3
@x4)))
:qid lemma_MonotonicArray.lemma_sub_contains))
:named lemma_MonotonicArray.lemma_sub_contains))
;;;;;;;;;;;;;;;;Lemma: MonotonicArray.lemma_framing_of_as_seq
;;; Fact-ids: Name MonotonicArray.lemma_framing_of_as_seq; Namespace MonotonicArray
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.t @x0
@x1))
(HasType @x3
FStar.Monotonic.Heap.heap)
(HasType @x4
FStar.Monotonic.Heap.heap)
(HasType @x5
(FStar.Set.set Prims.nat))

;; def=MonotonicArray.fsti(309,20-309,36); use=MonotonicArray.fsti(309,20-309,36)
(Valid 
;; def=MonotonicArray.fsti(309,20-309,36); use=MonotonicArray.fsti(309,20-309,36)
(FStar.Monotonic.Heap.modifies @x5
@x3
@x4)
)


;; def=MonotonicArray.fsti(309,40-309,76); use=MonotonicArray.fsti(309,40-309,76)
(Valid 
;; def=MonotonicArray.fsti(309,40-309,76); use=MonotonicArray.fsti(309,40-309,76)
(FStar.Set.disjoint Prims.nat
@x5
(MonotonicArray.array_footprint @x0
@x1
@x2))
)


;; def=MonotonicArray.fsti(309,80-309,103); use=MonotonicArray.fsti(309,80-309,103)
(Valid 
;; def=MonotonicArray.fsti(309,80-309,103); use=MonotonicArray.fsti(309,80-309,103)
(MonotonicArray.contains_array @x0
@x1
@x3
@x2)
)
)

;; def=MonotonicArray.fsti(310,19-310,51); use=MonotonicArray.fsti(310,19-310,51)
(= (MonotonicArray.as_seq @x0
@x1
@x2
@x3)
(MonotonicArray.as_seq @x0
@x1
@x2
@x4))
)
 

:pattern ((FStar.Monotonic.Heap.modifies @x5
@x3
@x4) (MonotonicArray.as_seq @x0
@x1
@x2
@x3))
:qid lemma_MonotonicArray.lemma_framing_of_as_seq))
:named lemma_MonotonicArray.lemma_framing_of_as_seq))
;;;;;;;;;;;;;;;;Lemma: MonotonicArray.lemma_as_seq_length
;;; Fact-ids: Name MonotonicArray.lemma_as_seq_length; Namespace MonotonicArray
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.t @x0
@x1))
(HasType @x3
FStar.Monotonic.Heap.heap))

;; def=MonotonicArray.fsti(101,19-101,50); use=MonotonicArray.fsti(101,19-101,50)
(= (FStar.Seq.Base.length (FStar.Pervasives.Native.option @x0)
(MonotonicArray.as_seq @x0
@x1
@x2
@x3))
@x1)
)
 

:pattern ((FStar.Seq.Base.length (FStar.Pervasives.Native.option @x0)
(MonotonicArray.as_seq @x0
@x1
@x2
@x3)))
:qid lemma_MonotonicArray.lemma_as_seq_length))
:named lemma_MonotonicArray.lemma_as_seq_length))
;;;;;;;;;;;;;;;;Lemma: MonotonicArray.lemma_all_init_i_j_sub
;;; Fact-ids: Name MonotonicArray.lemma_all_init_i_j_sub; Namespace MonotonicArray
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(Tm_refine_841a7dab4e44e4e07aab6383c1e10f2e @x0
@x1))
(HasType @x3
Prims.nat)
(HasType @x4
(Tm_refine_6f684e27d6af9965634108bcfe981953 @x3
@x1)))

;; def=MonotonicArray.fsti(316,19-316,45); use=MonotonicArray.fsti(316,19-316,45)
(Valid 
;; def=MonotonicArray.fsti(316,19-316,45); use=MonotonicArray.fsti(316,19-316,45)
(MonotonicArray.all_init @x0
@x4
(MonotonicArray.sub @x0
@x1
@x2
@x3
@x4))
)
)
 

:pattern ((MonotonicArray.all_init @x0
@x1
@x2) (MonotonicArray.sub @x0
@x1
@x2
@x3
@x4))
:qid lemma_MonotonicArray.lemma_all_init_i_j_sub))
:named lemma_MonotonicArray.lemma_all_init_i_j_sub))
;;;;;;;;;;;;;;;;Lemma: FStar.TSet.lemma_mem_tset_of_set
;;; Fact-ids: Name FStar.TSet.lemma_mem_tset_of_set; Namespace FStar.TSet
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
@x0))

;; def=FStar.TSet.fsti(107,19-107,59); use=FStar.TSet.fsti(107,19-107,59)
(iff 
;; def=FStar.TSet.fsti(107,20-107,31); use=FStar.TSet.fsti(107,20-107,31)
(BoxBool_proj_0 (FStar.Set.mem @x0
@x2
@x1))


;; def=FStar.TSet.fsti(107,37-107,58); use=FStar.TSet.fsti(107,37-107,58)
(Valid 
;; def=FStar.TSet.fsti(107,37-107,58); use=FStar.TSet.fsti(107,37-107,58)
(FStar.TSet.mem @x0
@x2
(FStar.TSet.tset_of_set @x0
@x1))
)
)
)
 

:pattern ((FStar.TSet.mem @x0
@x2
(FStar.TSet.tset_of_set @x0
@x1)))
:qid lemma_FStar.TSet.lemma_mem_tset_of_set))
:named lemma_FStar.TSet.lemma_mem_tset_of_set))
;;;;;;;;;;;;;;;;Lemma: FStar.Set.mem_union
;;; Fact-ids: Name FStar.Set.mem_union; Namespace FStar.Set
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
@x0)
(HasType @x2
(FStar.Set.set @x0))
(HasType @x3
(FStar.Set.set @x0)))

;; def=FStar.Set.fsti(72,12-72,58); use=FStar.Set.fsti(72,12-72,58)
(= (FStar.Set.mem @x0
@x1
(FStar.Set.union @x0
@x2
@x3))
(Prims.op_BarBar (FStar.Set.mem @x0
@x1
@x2)
(FStar.Set.mem @x0
@x1
@x3)))
)
 

:pattern ((FStar.Set.mem @x0
@x1
(FStar.Set.union @x0
@x2
@x3)))
:qid lemma_FStar.Set.mem_union))
:named lemma_FStar.Set.mem_union))
;;;;;;;;;;;;;;;;Lemma: FStar.Set.mem_singleton
;;; Fact-ids: Name FStar.Set.mem_singleton; Namespace FStar.Set
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
@x0)
(HasType @x2
@x0))

;; def=FStar.Set.fsti(67,12-67,41); use=FStar.Set.fsti(67,12-67,41)
(= (FStar.Set.mem @x0
@x2
(FStar.Set.singleton @x0
@x1))
(Prims.op_Equality @x0
@x1
@x2))
)
 

:pattern ((FStar.Set.mem @x0
@x2
(FStar.Set.singleton @x0
@x1)))
:qid lemma_FStar.Set.mem_singleton))
:named lemma_FStar.Set.mem_singleton))
;;;;;;;;;;;;;;;;Lemma: FStar.Set.mem_intersect
;;; Fact-ids: Name FStar.Set.mem_intersect; Namespace FStar.Set
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
@x0)
(HasType @x2
(FStar.Set.set @x0))
(HasType @x3
(FStar.Set.set @x0)))

;; def=FStar.Set.fsti(77,12-77,62); use=FStar.Set.fsti(77,12-77,62)
(= (FStar.Set.mem @x0
@x1
(FStar.Set.intersect @x0
@x2
@x3))
(Prims.op_AmpAmp (FStar.Set.mem @x0
@x1
@x2)
(FStar.Set.mem @x0
@x1
@x3)))
)
 

:pattern ((FStar.Set.mem @x0
@x1
(FStar.Set.intersect @x0
@x2
@x3)))
:qid lemma_FStar.Set.mem_intersect))
:named lemma_FStar.Set.mem_intersect))
;;;;;;;;;;;;;;;;Lemma: FStar.Set.mem_empty
;;; Fact-ids: Name FStar.Set.mem_empty; Namespace FStar.Set
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
@x0))
(not (BoxBool_proj_0 (FStar.Set.mem @x0
@x1
(FStar.Set.empty @x0)))))
 

:pattern ((FStar.Set.mem @x0
@x1
(FStar.Set.empty @x0)))
:qid lemma_FStar.Set.mem_empty))
:named lemma_FStar.Set.mem_empty))
;;;;;;;;;;;;;;;;Lemma: FStar.Set.lemma_equal_refl
;;; Fact-ids: Name FStar.Set.lemma_equal_refl; Namespace FStar.Set
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
(FStar.Set.set @x0))

;; def=FStar.Set.fsti(111,14-111,24); use=FStar.Set.fsti(111,14-111,24)
(= @x1
@x2)
)

;; def=FStar.Set.fsti(112,14-112,27); use=FStar.Set.fsti(112,14-112,27)
(Valid 
;; def=FStar.Set.fsti(112,14-112,27); use=FStar.Set.fsti(112,14-112,27)
(FStar.Set.equal @x0
@x1
@x2)
)
)
 

:pattern ((FStar.Set.equal @x0
@x1
@x2))
:qid lemma_FStar.Set.lemma_equal_refl))
:named lemma_FStar.Set.lemma_equal_refl))
;;;;;;;;;;;;;;;;Lemma: FStar.Set.lemma_equal_intro
;;; Fact-ids: Name FStar.Set.lemma_equal_intro; Namespace FStar.Set
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
(FStar.Set.set @x0))

;; def=FStar.Set.fsti(101,15-101,46); use=FStar.Set.fsti(101,15-101,46)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x0)

;; def=FStar.Set.fsti(101,26-101,45); use=FStar.Set.fsti(101,26-101,45)
(= (FStar.Set.mem @x0
@x3
@x1)
(FStar.Set.mem @x0
@x3
@x2))
)
 
;;no pats
:qid lemma_FStar.Set.lemma_equal_intro.1))
)

;; def=FStar.Set.fsti(102,13-102,26); use=FStar.Set.fsti(102,13-102,26)
(Valid 
;; def=FStar.Set.fsti(102,13-102,26); use=FStar.Set.fsti(102,13-102,26)
(FStar.Set.equal @x0
@x1
@x2)
)
)
 

:pattern ((FStar.Set.equal @x0
@x1
@x2))
:qid lemma_FStar.Set.lemma_equal_intro))
:named lemma_FStar.Set.lemma_equal_intro))
;;;;;;;;;;;;;;;;Lemma: FStar.Set.lemma_equal_elim
;;; Fact-ids: Name FStar.Set.lemma_equal_elim; Namespace FStar.Set
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
(FStar.Set.set @x0))

;; def=FStar.Set.fsti(106,14-106,27); use=FStar.Set.fsti(106,14-106,27)
(Valid 
;; def=FStar.Set.fsti(106,14-106,27); use=FStar.Set.fsti(106,14-106,27)
(FStar.Set.equal @x0
@x1
@x2)
)
)

;; def=FStar.Set.fsti(107,14-107,24); use=FStar.Set.fsti(107,14-107,24)
(= @x1
@x2)
)
 

:pattern ((FStar.Set.equal @x0
@x1
@x2))
:qid lemma_FStar.Set.lemma_equal_elim))
:named lemma_FStar.Set.lemma_equal_elim))
;;;;;;;;;;;;;;;;Lemma: FStar.Set.disjoint_not_in_both
;;; Fact-ids: Name FStar.Set.disjoint_not_in_both; Namespace FStar.Set
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
(FStar.Set.set @x0))

;; def=FStar.Set.fsti(117,16-117,32); use=FStar.Set.fsti(117,16-117,32)
(Valid 
;; def=FStar.Set.fsti(117,16-117,32); use=FStar.Set.fsti(117,16-117,32)
(FStar.Set.disjoint @x0
@x1
@x2)
)
)

;; def=FStar.Set.fsti(118,15-118,90); use=FStar.Set.fsti(118,15-118,90)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
@x0)

;; def=FStar.Set.fsti(118,65-118,73); use=FStar.Set.fsti(118,65-118,73)
(BoxBool_proj_0 (FStar.Set.mem @x0
@x3
@x1))
)

;; def=FStar.Set.fsti(118,78-118,89); use=FStar.Set.fsti(118,78-118,89)
(not 
;; def=FStar.Set.fsti(118,79-118,89); use=FStar.Set.fsti(118,79-118,89)
(BoxBool_proj_0 (FStar.Set.mem @x0
@x3
@x2))
)
)
 

:pattern ((FStar.Set.mem @x0
@x3
@x1))

:pattern ((FStar.Set.mem @x0
@x3
@x2))
:qid lemma_FStar.Set.disjoint_not_in_both.1))
)
 

:pattern ((FStar.Set.disjoint @x0
@x1
@x2))
:qid lemma_FStar.Set.disjoint_not_in_both))
:named lemma_FStar.Set.disjoint_not_in_both))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Properties.snoc_slice_index
;;; Fact-ids: Name FStar.Seq.Properties.snoc_slice_index; Namespace FStar.Seq.Properties
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
Prims.nat)
(HasType @x3
(Tm_refine_095c5722edf0f79bcd7dce7bd084c7b5 @x2
@x0
@x1)))

;; def=FStar.Seq.Properties.fsti(588,11-588,64); use=FStar.Seq.Properties.fsti(588,11-588,64)
(= (FStar.Seq.Properties.snoc @x0
(FStar.Seq.Base.slice @x0
@x1
@x2
@x3)
(FStar.Seq.Base.index @x0
@x1
@x3))
(FStar.Seq.Base.slice @x0
@x1
@x2
(Prims.op_Addition @x3
(BoxInt 1))))
)
 

:pattern ((FStar.Seq.Properties.snoc @x0
(FStar.Seq.Base.slice @x0
@x1
@x2
@x3)
(FStar.Seq.Base.index @x0
@x1
@x3)))
:qid lemma_FStar.Seq.Properties.snoc_slice_index))
:named lemma_FStar.Seq.Properties.snoc_slice_index))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Properties.slice_slice
;;; Fact-ids: Name FStar.Seq.Properties.slice_slice; Namespace FStar.Seq.Properties
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
Prims.nat)
(HasType @x3
(Tm_refine_d3d07693cd71377864ef84dc97d10ec1 @x2
@x0
@x1))
(HasType @x4
Prims.nat)
(HasType @x5
(Tm_refine_1ba8fd8bb363097813064c67740b2de5 @x4
@x3
@x2)))

;; def=FStar.Seq.Properties.fsti(628,11-628,71); use=FStar.Seq.Properties.fsti(628,11-628,71)
(= (FStar.Seq.Base.slice @x0
(FStar.Seq.Base.slice @x0
@x1
@x2
@x3)
@x4
@x5)
(FStar.Seq.Base.slice @x0
@x1
(Prims.op_Addition @x2
@x4)
(Prims.op_Addition @x2
@x5)))
)
 

:pattern ((FStar.Seq.Base.slice @x0
(FStar.Seq.Base.slice @x0
@x1
@x2
@x3)
@x4
@x5))
:qid lemma_FStar.Seq.Properties.slice_slice))
:named lemma_FStar.Seq.Properties.slice_slice))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Properties.slice_length
;;; Fact-ids: Name FStar.Seq.Properties.slice_length; Namespace FStar.Seq.Properties
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0)))

;; def=FStar.Seq.Properties.fsti(616,11-616,38); use=FStar.Seq.Properties.fsti(616,11-616,38)
(= (FStar.Seq.Base.slice @x0
@x1
(BoxInt 0)
(FStar.Seq.Base.length @x0
@x1))
@x1)
)
 

:pattern ((FStar.Seq.Base.slice @x0
@x1
(BoxInt 0)
(FStar.Seq.Base.length @x0
@x1)))
:qid lemma_FStar.Seq.Properties.slice_length))
:named lemma_FStar.Seq.Properties.slice_length))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Properties.slice_is_empty
;;; Fact-ids: Name FStar.Seq.Properties.slice_is_empty; Namespace FStar.Seq.Properties
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
(Tm_refine_b361ba8089a6e963921008d537e799a1 @x0
@x1)))

;; def=FStar.Seq.Properties.fsti(608,11-608,37); use=FStar.Seq.Properties.fsti(608,11-608,37)
(= (FStar.Seq.Base.slice @x0
@x1
@x2
@x2)
(FStar.Seq.Base.empty @x0))
)
 

:pattern ((FStar.Seq.Base.slice @x0
@x1
@x2
@x2))
:qid lemma_FStar.Seq.Properties.slice_is_empty))
:named lemma_FStar.Seq.Properties.slice_is_empty))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Base.lemma_len_slice
;;; Fact-ids: Name FStar.Seq.Base.lemma_len_slice; Namespace FStar.Seq.Base
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
Prims.nat)
(HasType @x3
(Tm_refine_81407705a0828c2c1b1976675443f647 @x2
@x0
@x1)))

;; def=FStar.Seq.Base.fsti(129,11-129,41); use=FStar.Seq.Base.fsti(129,11-129,41)
(= (FStar.Seq.Base.length @x0
(FStar.Seq.Base.slice @x0
@x1
@x2
@x3))
(Prims.op_Subtraction @x3
@x2))
)
 

:pattern ((FStar.Seq.Base.length @x0
(FStar.Seq.Base.slice @x0
@x1
@x2
@x3)))
:qid lemma_FStar.Seq.Base.lemma_len_slice))
:named lemma_FStar.Seq.Base.lemma_len_slice))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Base.lemma_len_append
;;; Fact-ids: Name FStar.Seq.Base.lemma_len_append; Namespace FStar.Seq.Base
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
(FStar.Seq.Base.seq @x0)))

;; def=FStar.Seq.Base.fsti(124,11-124,58); use=FStar.Seq.Base.fsti(124,11-124,58)
(= (FStar.Seq.Base.length @x0
(FStar.Seq.Base.append @x0
@x1
@x2))
(Prims.op_Addition (FStar.Seq.Base.length @x0
@x1)
(FStar.Seq.Base.length @x0
@x2)))
)
 

:pattern ((FStar.Seq.Base.length @x0
(FStar.Seq.Base.append @x0
@x1
@x2)))
:qid lemma_FStar.Seq.Base.lemma_len_append))
:named lemma_FStar.Seq.Base.lemma_len_append))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Base.lemma_index_slice
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_slice; Namespace FStar.Seq.Base
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
Prims.nat)
(HasType @x3
(Tm_refine_d3d07693cd71377864ef84dc97d10ec1 @x2
@x0
@x1))
(HasType @x4
(Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8 @x3
@x2)))

;; def=FStar.Seq.Base.fsti(160,11-160,53); use=FStar.Seq.Base.fsti(160,11-160,53)
(= (FStar.Seq.Base.index @x0
(FStar.Seq.Base.slice @x0
@x1
@x2
@x3)
@x4)
(FStar.Seq.Base.index @x0
@x1
(Prims.op_Addition @x4
@x2)))
)
 

:pattern ((FStar.Seq.Base.index @x0
(FStar.Seq.Base.slice @x0
@x1
@x2
@x3)
@x4))
:qid lemma_FStar.Seq.Base.lemma_index_slice))
:named lemma_FStar.Seq.Base.lemma_index_slice))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Base.lemma_index_create
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_create; Namespace FStar.Seq.Base
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
@x0)
(HasType @x3
(Tm_refine_c1424615841f28cac7fc34e92b7ff33c @x1)))

;; def=FStar.Seq.Base.fsti(135,11-135,38); use=FStar.Seq.Base.fsti(135,11-135,38)
(= (FStar.Seq.Base.index @x0
(FStar.Seq.Base.create @x0
@x1
@x2)
@x3)
@x2)
)
 

:pattern ((FStar.Seq.Base.index @x0
(FStar.Seq.Base.create @x0
@x1
@x2)
@x3))
:qid lemma_FStar.Seq.Base.lemma_index_create))
:named lemma_FStar.Seq.Base.lemma_index_create))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Base.lemma_index_app2
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_app2; Namespace FStar.Seq.Base
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
(FStar.Seq.Base.seq @x0))
(HasType @x3
(Tm_refine_ac201cf927190d39c033967b63cb957b @x0
@x1
@x2)))

;; def=FStar.Seq.Base.fsti(155,11-155,63); use=FStar.Seq.Base.fsti(155,11-155,63)
(= (FStar.Seq.Base.index @x0
(FStar.Seq.Base.append @x0
@x1
@x2)
@x3)
(FStar.Seq.Base.index @x0
@x2
(Prims.op_Subtraction @x3
(FStar.Seq.Base.length @x0
@x1))))
)
 

:pattern ((FStar.Seq.Base.index @x0
(FStar.Seq.Base.append @x0
@x1
@x2)
@x3))
:qid lemma_FStar.Seq.Base.lemma_index_app2))
:named lemma_FStar.Seq.Base.lemma_index_app2))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Base.lemma_index_app1
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_app1; Namespace FStar.Seq.Base
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
(FStar.Seq.Base.seq @x0))
(HasType @x3
(Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 @x0
@x1)))

;; def=FStar.Seq.Base.fsti(150,11-150,49); use=FStar.Seq.Base.fsti(150,11-150,49)
(= (FStar.Seq.Base.index @x0
(FStar.Seq.Base.append @x0
@x1
@x2)
@x3)
(FStar.Seq.Base.index @x0
@x1
@x3))
)
 

:pattern ((FStar.Seq.Base.index @x0
(FStar.Seq.Base.append @x0
@x1
@x2)
@x3))
:qid lemma_FStar.Seq.Base.lemma_index_app1))
:named lemma_FStar.Seq.Base.lemma_index_app1))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Base.lemma_create_len
;;; Fact-ids: Name FStar.Seq.Base.lemma_create_len; Namespace FStar.Seq.Base
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
@x0))

;; def=FStar.Seq.Base.fsti(94,11-94,36); use=FStar.Seq.Base.fsti(94,11-94,36)
(= (FStar.Seq.Base.length @x0
(FStar.Seq.Base.create @x0
@x1
@x2))
@x1)
)
 

:pattern ((FStar.Seq.Base.length @x0
(FStar.Seq.Base.create @x0
@x1
@x2)))
:qid lemma_FStar.Seq.Base.lemma_create_len))
:named lemma_FStar.Seq.Base.lemma_create_len))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Base.hasEq_lemma
;;; Fact-ids: Name FStar.Seq.Base.hasEq_lemma; Namespace FStar.Seq.Base
(assert (! (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_type)

;; def=FStar.Seq.Base.fsti(163,43-163,52); use=FStar.Seq.Base.fsti(163,43-163,52)
(Valid 
;; def=FStar.Seq.Base.fsti(163,43-163,52); use=FStar.Seq.Base.fsti(163,43-163,52)
(Prims.hasEq @x0)
)
)

;; def=FStar.Seq.Base.fsti(163,63-163,78); use=FStar.Seq.Base.fsti(163,63-163,78)
(Valid 
;; def=FStar.Seq.Base.fsti(163,63-163,78); use=FStar.Seq.Base.fsti(163,63-163,78)
(Prims.hasEq (FStar.Seq.Base.seq @x0))
)
)
 

:pattern ((Prims.hasEq (FStar.Seq.Base.seq @x0)))
:qid lemma_FStar.Seq.Base.hasEq_lemma))
:named lemma_FStar.Seq.Base.hasEq_lemma))
;;;;;;;;;;;;;;;;Lemma: FStar.Pervasives.invertOption
;;; Fact-ids: Name FStar.Pervasives.invertOption; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)

;; def=FStar.Pervasives.fsti(727,37-727,79); use=FStar.Pervasives.fsti(727,37-727,79)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.Pervasives.Native.option @x0))

;; def=FStar.Pervasives.fsti(727,60-727,78); use=FStar.Pervasives.fsti(727,60-727,78)
(or 
;; def=FStar.Pervasives.fsti(727,60-727,67); use=FStar.Pervasives.fsti(727,60-727,67)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None @x0
@x1))


;; def=FStar.Pervasives.fsti(727,71-727,78); use=FStar.Pervasives.fsti(727,71-727,78)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x0
@x1))
)
)
 
;;no pats
:qid lemma_FStar.Pervasives.invertOption.1))
)
 

:pattern ((FStar.Pervasives.Native.option @x0))
:qid lemma_FStar.Pervasives.invertOption))
:named lemma_FStar.Pervasives.invertOption))
;;;;;;;;;;;;;;;;Lemma: FStar.Monotonic.Heap.lemma_sel_same_addr
;;; Fact-ids: Name FStar.Monotonic.Heap.lemma_sel_same_addr; Namespace FStar.Monotonic.Heap
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Preorder.preorder @x0))
(HasType @x2
FStar.Monotonic.Heap.heap)
(HasType @x3
(FStar.Monotonic.Heap.mref @x0
@x1))
(HasType @x4
(FStar.Monotonic.Heap.mref @x0
@x1))

;; def=FStar.Monotonic.Heap.fsti(186,20-186,35); use=FStar.Monotonic.Heap.fsti(186,20-186,35)
(Valid 
;; def=FStar.Monotonic.Heap.fsti(186,20-186,35); use=FStar.Monotonic.Heap.fsti(186,20-186,35)
(FStar.Monotonic.Heap.contains @x0
@x1
@x2
@x3)
)


;; def=FStar.Monotonic.Heap.fsti(186,39-186,62); use=FStar.Monotonic.Heap.fsti(186,39-186,62)
(= (FStar.Monotonic.Heap.addr_of @x0
@x1
@x3)
(FStar.Monotonic.Heap.addr_of @x0
@x1
@x4))


;; def=FStar.Monotonic.Heap.fsti(186,66-186,86); use=FStar.Monotonic.Heap.fsti(186,66-186,86)
(= (FStar.Monotonic.Heap.is_mm @x0
@x1
@x3)
(FStar.Monotonic.Heap.is_mm @x0
@x1
@x4))
)

;; def=FStar.Monotonic.Heap.fsti(187,19-187,60); use=FStar.Monotonic.Heap.fsti(187,19-187,60)
(and 
;; def=FStar.Monotonic.Heap.fsti(187,20-187,35); use=FStar.Monotonic.Heap.fsti(187,20-187,35)
(Valid 
;; def=FStar.Monotonic.Heap.fsti(187,20-187,35); use=FStar.Monotonic.Heap.fsti(187,20-187,35)
(FStar.Monotonic.Heap.contains @x0
@x1
@x2
@x4)
)


;; def=FStar.Monotonic.Heap.fsti(187,39-187,59); use=FStar.Monotonic.Heap.fsti(187,39-187,59)
(= (FStar.Monotonic.Heap.sel @x0
@x1
@x2
@x3)
(FStar.Monotonic.Heap.sel @x0
@x1
@x2
@x4))
)
)
 

:pattern ((FStar.Monotonic.Heap.sel @x0
@x1
@x2
@x3) (FStar.Monotonic.Heap.sel @x0
@x1
@x2
@x4))

:pattern ((FStar.Monotonic.Heap.contains @x0
@x1
@x2
@x3) (FStar.Monotonic.Heap.contains @x0
@x1
@x2
@x4))
:qid lemma_FStar.Monotonic.Heap.lemma_sel_same_addr))
:named lemma_FStar.Monotonic.Heap.lemma_sel_same_addr))
;;;;;;;;;;;;;;;;Lemma: FStar.Monotonic.Heap.lemma_ref_unused_iff_addr_unused
;;; Fact-ids: Name FStar.Monotonic.Heap.lemma_ref_unused_iff_addr_unused; Namespace FStar.Monotonic.Heap
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Preorder.preorder @x0))
(HasType @x2
FStar.Monotonic.Heap.heap)
(HasType @x3
(FStar.Monotonic.Heap.mref @x0
@x1)))

;; def=FStar.Monotonic.Heap.fsti(108,19-108,70); use=FStar.Monotonic.Heap.fsti(108,19-108,70)
(iff 
;; def=FStar.Monotonic.Heap.fsti(108,20-108,35); use=FStar.Monotonic.Heap.fsti(108,20-108,35)
(Valid 
;; def=FStar.Monotonic.Heap.fsti(108,20-108,35); use=FStar.Monotonic.Heap.fsti(108,20-108,35)
(FStar.Monotonic.Heap.unused_in @x0
@x1
@x3
@x2)
)


;; def=FStar.Monotonic.Heap.fsti(108,41-108,69); use=FStar.Monotonic.Heap.fsti(108,41-108,69)
(Valid 
;; def=FStar.Monotonic.Heap.fsti(108,41-108,69); use=FStar.Monotonic.Heap.fsti(108,41-108,69)
(FStar.Monotonic.Heap.addr_unused_in (FStar.Monotonic.Heap.addr_of @x0
@x1
@x3)
@x2)
)
)
)
 

:pattern ((FStar.Monotonic.Heap.unused_in @x0
@x1
@x3
@x2))

:pattern ((FStar.Monotonic.Heap.addr_unused_in (FStar.Monotonic.Heap.addr_of @x0
@x1
@x3)
@x2))
:qid lemma_FStar.Monotonic.Heap.lemma_ref_unused_iff_addr_unused))
:named lemma_FStar.Monotonic.Heap.lemma_ref_unused_iff_addr_unused))
;;;;;;;;;;;;;;;;Lemma: FStar.Monotonic.Heap.lemma_distinct_addrs_unused
;;; Fact-ids: Name FStar.Monotonic.Heap.lemma_distinct_addrs_unused; Namespace FStar.Monotonic.Heap
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Preorder.preorder @x0))
(HasType @x3
(FStar.Preorder.preorder @x1))
(HasType @x4
FStar.Monotonic.Heap.heap)
(HasType @x5
(FStar.Monotonic.Heap.mref @x0
@x2))
(HasType @x6
(FStar.Monotonic.Heap.mref @x1
@x3))

;; def=FStar.Monotonic.Heap.fsti(139,20-139,36); use=FStar.Monotonic.Heap.fsti(139,20-139,36)
(Valid 
;; def=FStar.Monotonic.Heap.fsti(139,20-139,36); use=FStar.Monotonic.Heap.fsti(139,20-139,36)
(FStar.Monotonic.Heap.unused_in @x0
@x2
@x5
@x4)
)


;; def=FStar.Monotonic.Heap.fsti(139,40-139,60); use=FStar.Monotonic.Heap.fsti(139,40-139,60)
(not 
;; def=FStar.Monotonic.Heap.fsti(139,42-139,60); use=FStar.Monotonic.Heap.fsti(139,42-139,60)
(Valid 
;; def=FStar.Monotonic.Heap.fsti(139,42-139,60); use=FStar.Monotonic.Heap.fsti(139,42-139,60)
(FStar.Monotonic.Heap.unused_in @x1
@x3
@x6
@x4)
)
)
)

;; def=FStar.Monotonic.Heap.fsti(140,19-140,64); use=FStar.Monotonic.Heap.fsti(140,19-140,64)
(and 
;; def=FStar.Monotonic.Heap.fsti(140,20-140,44); use=FStar.Monotonic.Heap.fsti(140,20-140,44)
(not (= (FStar.Monotonic.Heap.addr_of @x0
@x2
@x5)
(FStar.Monotonic.Heap.addr_of @x1
@x3
@x6)))


;; def=FStar.Monotonic.Heap.fsti(140,48-140,63); use=FStar.Monotonic.Heap.fsti(140,48-140,63)
(not 
;; def=FStar.Monotonic.Heap.fsti(140,51-140,62); use=FStar.Monotonic.Heap.fsti(140,51-140,62)
(Valid 
;; def=FStar.Monotonic.Heap.fsti(140,51-140,62); use=FStar.Monotonic.Heap.fsti(140,51-140,62)
(Prims.op_Equals_Equals_Equals (FStar.Monotonic.Heap.mref @x0
@x2)
(FStar.Monotonic.Heap.mref @x1
@x3)
@x5
@x6)
)
)
)
)
 

:pattern ((FStar.Monotonic.Heap.unused_in @x0
@x2
@x5
@x4) (FStar.Monotonic.Heap.unused_in @x1
@x3
@x6
@x4))
:qid lemma_FStar.Monotonic.Heap.lemma_distinct_addrs_unused))
:named lemma_FStar.Monotonic.Heap.lemma_distinct_addrs_unused))
;;;;;;;;;;;;;;;;Lemma: FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_types
;;; Fact-ids: Name FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_types; Namespace FStar.Monotonic.Heap
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Preorder.preorder @x0))
(HasType @x3
(FStar.Preorder.preorder @x1))
(HasType @x4
FStar.Monotonic.Heap.heap)
(HasType @x5
(FStar.Monotonic.Heap.mref @x0
@x2))
(HasType @x6
(FStar.Monotonic.Heap.mref @x1
@x3))

;; def=FStar.Monotonic.Heap.fsti(118,20-118,27); use=FStar.Monotonic.Heap.fsti(118,20-118,27)
(not 
;; def=FStar.Monotonic.Heap.fsti(118,20-118,27); use=FStar.Monotonic.Heap.fsti(118,20-118,27)
(= @x0
@x1)
)


;; def=FStar.Monotonic.Heap.fsti(118,31-118,46); use=FStar.Monotonic.Heap.fsti(118,31-118,46)
(Valid 
;; def=FStar.Monotonic.Heap.fsti(118,31-118,46); use=FStar.Monotonic.Heap.fsti(118,31-118,46)
(FStar.Monotonic.Heap.contains @x0
@x2
@x4
@x5)
)


;; def=FStar.Monotonic.Heap.fsti(118,50-118,65); use=FStar.Monotonic.Heap.fsti(118,50-118,65)
(Valid 
;; def=FStar.Monotonic.Heap.fsti(118,50-118,65); use=FStar.Monotonic.Heap.fsti(118,50-118,65)
(FStar.Monotonic.Heap.contains @x1
@x3
@x4
@x6)
)
)

;; def=FStar.Monotonic.Heap.fsti(119,19-119,45); use=FStar.Monotonic.Heap.fsti(119,19-119,45)
(not (= (FStar.Monotonic.Heap.addr_of @x0
@x2
@x5)
(FStar.Monotonic.Heap.addr_of @x1
@x3
@x6)))
)
 

:pattern ((FStar.Monotonic.Heap.contains @x0
@x2
@x4
@x5) (FStar.Monotonic.Heap.contains @x1
@x3
@x4
@x6))
:qid lemma_FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_types))
:named lemma_FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_types))
;;;;;;;;;;;;;;;;Lemma: FStar.Monotonic.Heap.lemma_contains_implies_used
;;; Fact-ids: Name FStar.Monotonic.Heap.lemma_contains_implies_used; Namespace FStar.Monotonic.Heap
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Preorder.preorder @x0))
(HasType @x2
FStar.Monotonic.Heap.heap)
(HasType @x3
(FStar.Monotonic.Heap.mref @x0
@x1))

;; def=FStar.Monotonic.Heap.fsti(112,19-112,35); use=FStar.Monotonic.Heap.fsti(112,19-112,35)
(Valid 
;; def=FStar.Monotonic.Heap.fsti(112,19-112,35); use=FStar.Monotonic.Heap.fsti(112,19-112,35)
(FStar.Monotonic.Heap.contains @x0
@x1
@x2
@x3)
)
)

;; def=FStar.Monotonic.Heap.fsti(113,19-113,40); use=FStar.Monotonic.Heap.fsti(113,19-113,40)
(not 
;; def=FStar.Monotonic.Heap.fsti(113,22-113,39); use=FStar.Monotonic.Heap.fsti(113,22-113,39)
(Valid 
;; def=FStar.Monotonic.Heap.fsti(113,22-113,39); use=FStar.Monotonic.Heap.fsti(113,22-113,39)
(FStar.Monotonic.Heap.unused_in @x0
@x1
@x3
@x2)
)
)
)
 

:pattern ((FStar.Monotonic.Heap.contains @x0
@x1
@x2
@x3))

:pattern ((FStar.Monotonic.Heap.unused_in @x0
@x1
@x3
@x2))
:qid lemma_FStar.Monotonic.Heap.lemma_contains_implies_used))
:named lemma_FStar.Monotonic.Heap.lemma_contains_implies_used))
;;;;;;;;;;;;;;;;Lemma: ArrayUtils.lemma_get_some_equivalent_snoc
;;; Fact-ids: Name ArrayUtils.lemma_get_some_equivalent_snoc; Namespace ArrayUtils
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq (FStar.Pervasives.Native.option @x0)))
(HasType @x2
(FStar.Pervasives.Native.option @x0))

;; def=ArrayUtils.fst(62,20-62,30); use=ArrayUtils.fst(62,20-62,30)
(Valid 
;; def=ArrayUtils.fst(62,20-62,30); use=ArrayUtils.fst(62,20-62,30)
(ArrayUtils.all_some @x0
@x1)
)


;; def=ArrayUtils.fst(62,34-62,41); use=ArrayUtils.fst(62,34-62,41)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x0
@x2))
)

;; def=ArrayUtils.fst(63,19-64,88); use=ArrayUtils.fst(63,19-64,88)
(and 
;; def=ArrayUtils.fst(63,20-63,30); use=ArrayUtils.fst(63,20-63,30)
(Valid 
;; def=ArrayUtils.fst(63,20-63,30); use=ArrayUtils.fst(63,20-63,30)
(ArrayUtils.all_some @x0
@x1)
)


;; def=ArrayUtils.fst(63,34-63,41); use=ArrayUtils.fst(63,34-63,41)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x0
@x2))


;; def=ArrayUtils.fst(64,13-64,87); use=ArrayUtils.fst(64,13-64,87)
(= (ArrayUtils.get_some_equivalent @x0
(FStar.Seq.Properties.snoc (FStar.Pervasives.Native.option @x0)
@x1
@x2))
(FStar.Seq.Properties.snoc @x0
(ArrayUtils.get_some_equivalent @x0
@x1)
(FStar.Pervasives.Native.__proj__Some__item__v @x0
@x2)))
)
)
 

:pattern ((ArrayUtils.get_some_equivalent @x0
(FStar.Seq.Properties.snoc (FStar.Pervasives.Native.option @x0)
@x1
@x2)))

:pattern ((FStar.Seq.Properties.snoc @x0
(ArrayUtils.get_some_equivalent @x0
@x1)
(FStar.Pervasives.Native.__proj__Some__item__v @x0
@x2)))
:qid lemma_ArrayUtils.lemma_get_some_equivalent_snoc))
:named lemma_ArrayUtils.lemma_get_some_equivalent_snoc))
;;;;;;;;;;;;;;;;Lemma: ArrayUtils.lemma_get_some_equivalent_slice
;;; Fact-ids: Name ArrayUtils.lemma_get_some_equivalent_slice; Namespace ArrayUtils
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq (FStar.Pervasives.Native.option @x0)))
(HasType @x2
Prims.nat)
(HasType @x3
Prims.nat)

;; def=ArrayUtils.fst(74,20-74,30); use=ArrayUtils.fst(74,20-74,30)
(Valid 
;; def=ArrayUtils.fst(74,20-74,30); use=ArrayUtils.fst(74,20-74,30)
(ArrayUtils.all_some @x0
@x1)
)


;; def=ArrayUtils.fst(74,34-74,40); use=ArrayUtils.fst(74,34-74,40)
(>= (BoxInt_proj_0 @x3)
(BoxInt_proj_0 @x2))


;; def=ArrayUtils.fst(74,44-74,61); use=ArrayUtils.fst(74,44-74,61)
(<= (BoxInt_proj_0 @x3)
(BoxInt_proj_0 (FStar.Seq.Base.length (FStar.Pervasives.Native.option @x0)
@x1)))
)

;; def=ArrayUtils.fst(75,19-76,84); use=ArrayUtils.fst(75,19-76,84)
(and 
;; def=ArrayUtils.fst(75,20-75,30); use=ArrayUtils.fst(75,20-75,30)
(Valid 
;; def=ArrayUtils.fst(75,20-75,30); use=ArrayUtils.fst(75,20-75,30)
(ArrayUtils.all_some @x0
@x1)
)


;; def=ArrayUtils.fst(75,34-75,40); use=ArrayUtils.fst(75,34-75,40)
(>= (BoxInt_proj_0 @x3)
(BoxInt_proj_0 @x2))


;; def=ArrayUtils.fst(75,44-75,61); use=ArrayUtils.fst(75,44-75,61)
(<= (BoxInt_proj_0 @x3)
(BoxInt_proj_0 (FStar.Seq.Base.length (FStar.Pervasives.Native.option @x0)
@x1)))


;; def=ArrayUtils.fst(76,13-76,83); use=ArrayUtils.fst(76,13-76,83)
(= (ArrayUtils.get_some_equivalent @x0
(FStar.Seq.Base.slice (FStar.Pervasives.Native.option @x0)
@x1
@x2
@x3))
(FStar.Seq.Base.slice @x0
(ArrayUtils.get_some_equivalent @x0
@x1)
@x2
@x3))
)
)
 

:pattern ((ArrayUtils.get_some_equivalent @x0
(FStar.Seq.Base.slice (FStar.Pervasives.Native.option @x0)
@x1
@x2
@x3)))

:pattern ((FStar.Seq.Base.slice @x0
(ArrayUtils.get_some_equivalent @x0
@x1)
@x2
@x3))
:qid lemma_ArrayUtils.lemma_get_some_equivalent_slice))
:named lemma_ArrayUtils.lemma_get_some_equivalent_slice))
;;;;;;;;;;;;;;;;Lemma: ArrayUtils.lemma_get_some_equivalent_length
;;; Fact-ids: Name ArrayUtils.lemma_get_some_equivalent_length; Namespace ArrayUtils
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq (FStar.Pervasives.Native.option @x0)))

;; def=ArrayUtils.fst(48,19-48,31); use=ArrayUtils.fst(48,19-48,31)
(Valid 
;; def=ArrayUtils.fst(48,19-48,31); use=ArrayUtils.fst(48,19-48,31)
(ArrayUtils.all_some @x0
@x1)
)
)

;; def=ArrayUtils.fst(49,19-50,56); use=ArrayUtils.fst(49,19-50,56)
(and 
;; def=ArrayUtils.fst(49,20-49,30); use=ArrayUtils.fst(49,20-49,30)
(Valid 
;; def=ArrayUtils.fst(49,20-49,30); use=ArrayUtils.fst(49,20-49,30)
(ArrayUtils.all_some @x0
@x1)
)


;; def=ArrayUtils.fst(50,13-50,55); use=ArrayUtils.fst(50,13-50,55)
(= (FStar.Seq.Base.length @x0
(ArrayUtils.get_some_equivalent @x0
@x1))
(FStar.Seq.Base.length (FStar.Pervasives.Native.option @x0)
@x1))
)
)
 

:pattern ((FStar.Seq.Base.length @x0
(ArrayUtils.get_some_equivalent @x0
@x1)))
:qid lemma_ArrayUtils.lemma_get_some_equivalent_length))
:named lemma_ArrayUtils.lemma_get_some_equivalent_length))
;;;;;;;;;;;;;;;;Lemma: ArrayUtils.lemma_get_some_equivalent_index
;;; Fact-ids: Name ArrayUtils.lemma_get_some_equivalent_index; Namespace ArrayUtils
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq (FStar.Pervasives.Native.option @x0)))
(HasType @x2
Prims.nat)

;; def=ArrayUtils.fst(55,20-55,30); use=ArrayUtils.fst(55,20-55,30)
(Valid 
;; def=ArrayUtils.fst(55,20-55,30); use=ArrayUtils.fst(55,20-55,30)
(ArrayUtils.all_some @x0
@x1)
)


;; def=ArrayUtils.fst(55,34-55,46); use=ArrayUtils.fst(55,34-55,46)
(< (BoxInt_proj_0 @x2)
(BoxInt_proj_0 (FStar.Seq.Base.length (FStar.Pervasives.Native.option @x0)
@x1)))
)

;; def=ArrayUtils.fst(56,19-57,86); use=ArrayUtils.fst(56,19-57,86)
(and 
;; def=ArrayUtils.fst(56,20-56,30); use=ArrayUtils.fst(56,20-56,30)
(Valid 
;; def=ArrayUtils.fst(56,20-56,30); use=ArrayUtils.fst(56,20-56,30)
(ArrayUtils.all_some @x0
@x1)
)


;; def=ArrayUtils.fst(56,34-56,46); use=ArrayUtils.fst(56,34-56,46)
(< (BoxInt_proj_0 @x2)
(BoxInt_proj_0 (FStar.Seq.Base.length (FStar.Pervasives.Native.option @x0)
@x1)))


;; def=ArrayUtils.fst(57,13-57,30); use=ArrayUtils.fst(57,13-57,30)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x0
(FStar.Seq.Base.index (FStar.Pervasives.Native.option @x0)
@x1
@x2)))


;; def=ArrayUtils.fst(57,34-57,85); use=ArrayUtils.fst(57,34-57,85)
(= (FStar.Pervasives.Native.Some @x0
(FStar.Seq.Base.index @x0
(ArrayUtils.get_some_equivalent @x0
@x1)
@x2))
(FStar.Seq.Base.index (FStar.Pervasives.Native.option @x0)
@x1
@x2))
)
)
 

:pattern ((FStar.Seq.Base.index @x0
(ArrayUtils.get_some_equivalent @x0
@x1)
@x2))
:qid lemma_ArrayUtils.lemma_get_some_equivalent_index))
:named lemma_ArrayUtils.lemma_get_some_equivalent_index))
;;;;;;;;;;;;;;;;Lemma: ArrayUtils.lemma_get_some_equivalent_append
;;; Fact-ids: Name ArrayUtils.lemma_get_some_equivalent_append; Namespace ArrayUtils
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq (FStar.Pervasives.Native.option @x0)))
(HasType @x2
(FStar.Seq.Base.seq (FStar.Pervasives.Native.option @x0)))

;; def=ArrayUtils.fst(68,20-68,31); use=ArrayUtils.fst(68,20-68,31)
(Valid 
;; def=ArrayUtils.fst(68,20-68,31); use=ArrayUtils.fst(68,20-68,31)
(ArrayUtils.all_some @x0
@x1)
)


;; def=ArrayUtils.fst(68,35-68,46); use=ArrayUtils.fst(68,35-68,46)
(Valid 
;; def=ArrayUtils.fst(68,35-68,46); use=ArrayUtils.fst(68,35-68,46)
(ArrayUtils.all_some @x0
@x2)
)
)

;; def=ArrayUtils.fst(69,19-70,108); use=ArrayUtils.fst(69,19-70,108)
(and 
;; def=ArrayUtils.fst(69,20-69,31); use=ArrayUtils.fst(69,20-69,31)
(Valid 
;; def=ArrayUtils.fst(69,20-69,31); use=ArrayUtils.fst(69,20-69,31)
(ArrayUtils.all_some @x0
@x1)
)


;; def=ArrayUtils.fst(69,35-69,46); use=ArrayUtils.fst(69,35-69,46)
(Valid 
;; def=ArrayUtils.fst(69,35-69,46); use=ArrayUtils.fst(69,35-69,46)
(ArrayUtils.all_some @x0
@x2)
)


;; def=ArrayUtils.fst(70,13-70,107); use=ArrayUtils.fst(70,13-70,107)
(= (ArrayUtils.get_some_equivalent @x0
(FStar.Seq.Base.append (FStar.Pervasives.Native.option @x0)
@x1
@x2))
(FStar.Seq.Base.append @x0
(ArrayUtils.get_some_equivalent @x0
@x1)
(ArrayUtils.get_some_equivalent @x0
@x2)))
)
)
 

:pattern ((ArrayUtils.get_some_equivalent @x0
(FStar.Seq.Base.append (FStar.Pervasives.Native.option @x0)
@x1
@x2)))

:pattern ((FStar.Seq.Base.append @x0
(ArrayUtils.get_some_equivalent @x0
@x1)
(ArrayUtils.get_some_equivalent @x0
@x2)))
:qid lemma_ArrayUtils.lemma_get_some_equivalent_append))
:named lemma_ArrayUtils.lemma_get_some_equivalent_append))
;;;;;;;;;;;;;;;;/\ interpretation
;;; Fact-ids: Name Prims.l_and; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (and (Valid @x0)
(Valid @x1))
(Valid (Prims.l_and @x0
@x1)))
 

:pattern ((Prims.l_and @x0
@x1))
:qid l_and-interp))
:named l_and-interp))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_ec89ee75ecc09ae37ba2c37ec85a4d5a
;;; Fact-ids: Name Protocol.counter_rel; Namespace Protocol
(assert (! 
;; def=Protocol.fst(95,93-95,111); use=Protocol.fst(95,93-95,111)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_ec89ee75ecc09ae37ba2c37ec85a4d5a @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_ec89ee75ecc09ae37ba2c37ec85a4d5a @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_ec89ee75ecc09ae37ba2c37ec85a4d5a))

:named kinding_Tm_arrow_ec89ee75ecc09ae37ba2c37ec85a4d5a))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_c4ab2f2abbb10d1c3c06f26d3c3abf61
;;; Fact-ids: Name Protocol.randomness; Namespace Protocol
(assert (! (HasType Tm_arrow_c4ab2f2abbb10d1c3c06f26d3c3abf61
Tm_type)
:named kinding_Tm_arrow_c4ab2f2abbb10d1c3c06f26d3c3abf61))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_c4185f52507383203d0d6335fd0332a8
;;; Fact-ids: Name FStar.ST.heap_predicate; Namespace FStar.ST
(assert (! (HasType Tm_arrow_c4185f52507383203d0d6335fd0332a8
Tm_type)
:named kinding_Tm_arrow_c4185f52507383203d0d6335fd0332a8))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_bbf9c13f2e1689774c895427eb4d7c9a
;;; Fact-ids: Name Protocol.log; Namespace Protocol
(assert (! 
;; def=Protocol.fst(70,20-71,20); use=Protocol.fst(141,13-141,20)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_bbf9c13f2e1689774c895427eb4d7c9a @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_bbf9c13f2e1689774c895427eb4d7c9a @x0)
Tm_type))
:qid kinding_Tm_arrow_bbf9c13f2e1689774c895427eb4d7c9a))

:named kinding_Tm_arrow_bbf9c13f2e1689774c895427eb4d7c9a))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f
;;; Fact-ids: Name FStar.Preorder.relation; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(20,15-20,40); use=FStar.Preorder.fst(20,25-20,40)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_a19f9d49348d4e0038f0ded87d87802f @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_a19f9d49348d4e0038f0ded87d87802f @x0)
Tm_type))
:qid kinding_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f))

:named kinding_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_6b407af9af3e3c176b95011816cf31c0
;;; Fact-ids: Name Protocol.entries_rel; Namespace Protocol
(assert (! 
;; def=Protocol.fst(82,11-82,42); use=Protocol.fst(82,11-82,42)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_6b407af9af3e3c176b95011816cf31c0 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_6b407af9af3e3c176b95011816cf31c0 @x0)
Tm_type))
:qid kinding_Tm_arrow_6b407af9af3e3c176b95011816cf31c0))

:named kinding_Tm_arrow_6b407af9af3e3c176b95011816cf31c0))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_6980332764c4493a7b0df5c02f7aefbe
;;; Fact-ids: Name FStar.Classical.impl_intro_tot; Namespace FStar.Classical
(assert (! 
;; def=FStar.Classical.fsti(69,21-69,25); use=FStar.Classical.fsti(69,40-69,50)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_6980332764c4493a7b0df5c02f7aefbe @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_6980332764c4493a7b0df5c02f7aefbe @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_6980332764c4493a7b0df5c02f7aefbe))

:named kinding_Tm_arrow_6980332764c4493a7b0df5c02f7aefbe))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_63db68eb9811874d358b39a3a3a594c0
;;; Fact-ids: Name FStar.Monotonic.Heap.unused_in; Namespace FStar.Monotonic.Heap
(assert (! (HasType Tm_arrow_63db68eb9811874d358b39a3a3a594c0
Tm_type)
:named kinding_Tm_arrow_63db68eb9811874d358b39a3a3a594c0))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_3e187eafe9783f35170bfb0700f6d487
;;; Fact-ids: Name Protocol.sent_bytes; Namespace Protocol
(assert (! (HasType Tm_arrow_3e187eafe9783f35170bfb0700f6d487
Tm_type)
:named kinding_Tm_arrow_3e187eafe9783f35170bfb0700f6d487))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_14435f7112db17792f8cd33f8f7ea859
;;; Fact-ids: Name FStar.Pervasives.st_post_h'; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(442,21-442,67); use=FStar.Pervasives.fsti(442,36-442,67)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_arrow_14435f7112db17792f8cd33f8f7ea859 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_arrow_14435f7112db17792f8cd33f8f7ea859 @x0
@x1
@x2)
Tm_type))
:qid kinding_Tm_arrow_14435f7112db17792f8cd33f8f7ea859))

:named kinding_Tm_arrow_14435f7112db17792f8cd33f8f7ea859))
;;; Fact-ids: Name Protocol.entry; Namespace Protocol; Name Protocol.E; Namespace Protocol
(assert (! (and (IsTotFun Protocol.entry@tok)

;; def=Protocol.fst(69,10-69,15); use=Protocol.fst(69,10-69,15)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Protocol.randomness)
(HasType (Protocol.entry @x0)
Tm_type))
 

:pattern ((Protocol.entry @x0))
:qid kinding_Protocol.entry@tok))
)
:named kinding_Protocol.entry@tok))
;;; Fact-ids: Name Protocol.connection; Namespace Protocol; Name Protocol.S; Namespace Protocol; Name Protocol.R; Namespace Protocol
(assert (! (HasType Protocol.connection
Tm_type)
:named kinding_Protocol.connection@tok))
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (HasType Prims.trivial
Tm_type)
:named kinding_Prims.trivial@tok))
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! (and (IsTotFun Prims.pair@tok)

;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Prims.pair@tok
@x0))
 

:pattern ((ApplyTT Prims.pair@tok
@x0))
:qid kinding_Prims.pair@tok))


;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.pair @x0
@x1)
Tm_type))
 

:pattern ((Prims.pair @x0
@x1))
:qid kinding_Prims.pair@tok.1))
)
:named kinding_Prims.pair@tok))
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! (and (IsTotFun Prims.equals@tok)

;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Prims.equals@tok
@x0))
 

:pattern ((ApplyTT Prims.equals@tok
@x0))
:qid kinding_Prims.equals@tok))


;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@x0 Term) (@x1 Term))
 (! (IsTotFun (ApplyTT (ApplyTT Prims.equals@tok
@x0)
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.equals@tok
@x0)
@x1))
:qid kinding_Prims.equals@tok.1))


;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0)
(HasType @x2
@x0))
(HasType (Prims.equals @x0
@x1
@x2)
Tm_type))
 

:pattern ((Prims.equals @x0
@x1
@x2))
:qid kinding_Prims.equals@tok.2))
)
:named kinding_Prims.equals@tok))
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (and (IsTotFun FStar.Pervasives.Native.option@tok)

;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Pervasives.Native.option @x0)
Tm_type))
 

:pattern ((FStar.Pervasives.Native.option @x0))
:qid kinding_FStar.Pervasives.Native.option@tok))
)
:named kinding_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_7f6e09c57851a655e400606396618bbe
;;; Fact-ids: Name Protocol.sent_bytes'; Namespace Protocol
(assert (! 
;; def=Protocol.fst(336,13-339,44); use=Protocol.fst(336,13-339,44)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (Tm_abs_7f6e09c57851a655e400606396618bbe @x1
@x2
@x3
@x4)
@x0)
(Prims.l_and (Protocol.live_connection @x0
@x1)
(Prims.l_and (Prims.b2t (Prims.op_LessThanOrEqual @x2
(FStar.Seq.Base.length Protocol.message
(Protocol.log @x1
@x0))))
(Prims.eq2 (FStar.Seq.Base.seq Protocol.byte)
@x3
(Protocol.flatten (FStar.Seq.Base.slice Protocol.message
(Protocol.log @x1
@x0)
@x4
@x2))))))
 

:pattern ((ApplyTT (Tm_abs_7f6e09c57851a655e400606396618bbe @x1
@x2
@x3
@x4)
@x0))
:qid interpretation_Tm_abs_7f6e09c57851a655e400606396618bbe))

:named interpretation_Tm_abs_7f6e09c57851a655e400606396618bbe))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_7bb1aca7f565f38c176c14dd92322edb
;;; Fact-ids: Name Protocol.counter_rel; Namespace Protocol
(assert (! 
;; def=Protocol.fst(96,17-96,31); use=Protocol.fst(96,17-96,31)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (Tm_abs_7bb1aca7f565f38c176c14dd92322edb @x2
@x3)
@x0)
@x1)
(Prims.b2t (Prims.op_LessThanOrEqual @x0
@x1)))
 

:pattern ((ApplyTT (ApplyTT (Tm_abs_7bb1aca7f565f38c176c14dd92322edb @x2
@x3)
@x0)
@x1))
:qid interpretation_Tm_abs_7bb1aca7f565f38c176c14dd92322edb))

:named interpretation_Tm_abs_7bb1aca7f565f38c176c14dd92322edb))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_545607f5016b8a9efe7d1f635f16c449
;;; Fact-ids: Name Protocol.counter_pred; Namespace Protocol
(assert (! 
;; def=Protocol.fst(88,13-88,62); use=Protocol.fst(88,13-88,62)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (Tm_abs_545607f5016b8a9efe7d1f635f16c449 @x1
@x2
@x3)
@x0)
(Prims.l_and (FStar.Monotonic.Heap.contains (Protocol.entries @x1)
(Protocol.entries_rel @x1)
@x0
@x2)
(Prims.b2t (Prims.op_LessThanOrEqual @x3
(FStar.Seq.Base.length (Protocol.entry @x1)
(FStar.Monotonic.Heap.sel (Protocol.entries @x1)
(Protocol.entries_rel @x1)
@x0
@x2))))))
 

:pattern ((ApplyTT (Tm_abs_545607f5016b8a9efe7d1f635f16c449 @x1
@x2
@x3)
@x0))
:qid interpretation_Tm_abs_545607f5016b8a9efe7d1f635f16c449))

:named interpretation_Tm_abs_545607f5016b8a9efe7d1f635f16c449))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_41efd131336ec34ef1b819bed745d3d1
;;; Fact-ids: Name Protocol.entries_rel; Namespace Protocol
(assert (! 
;; def=Protocol.fst(82,47-82,69); use=Protocol.fst(82,47-82,69)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (Tm_abs_41efd131336ec34ef1b819bed745d3d1 @x2)
@x0)
@x1)
(Protocol.is_prefix_of (Protocol.entry @x2)
@x0
@x1))
 

:pattern ((ApplyTT (ApplyTT (Tm_abs_41efd131336ec34ef1b819bed745d3d1 @x2)
@x0)
@x1))
:qid interpretation_Tm_abs_41efd131336ec34ef1b819bed745d3d1))

:named interpretation_Tm_abs_41efd131336ec34ef1b819bed745d3d1))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_1f17782d7f15dca3aa2da1fe8e018a7e
;;; Fact-ids: Name Protocol.log; Namespace Protocol
(assert (! 
;; def=Protocol.fst(141,41-141,42); use=Protocol.fst(141,41-141,42)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (Tm_abs_1f17782d7f15dca3aa2da1fe8e018a7e @x1)
@x0)
(let ((@lb2 @x0))
(Protocol.E_msg @lb2)))
 

:pattern ((ApplyTT (Tm_abs_1f17782d7f15dca3aa2da1fe8e018a7e @x1)
@x0))
:qid interpretation_Tm_abs_1f17782d7f15dca3aa2da1fe8e018a7e))

:named interpretation_Tm_abs_1f17782d7f15dca3aa2da1fe8e018a7e))
;;;;;;;;;;;;;;;;int typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Int))
 (! (HasType (BoxInt @u0)
Prims.int)
 

:pattern ((BoxInt @u0))
:qid int_typing))
:named int_typing))
;;;;;;;;;;;;;;;;int inversion
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.int)
(is-BoxInt @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.int))
:qid int_inversion))
:named int_inversion))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f984cba283a0017499e468d307a8fd1d
;;; Fact-ids: Name MonotonicArray.array; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(42,31-42,66); use=MonotonicArray.fsti(42,31-42,66)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_f984cba283a0017499e468d307a8fd1d @x0
@x1)))
(Valid (Prims.hasEq (MonotonicArray.t @x0
@x1))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_f984cba283a0017499e468d307a8fd1d @x0
@x1))))
:qid haseqTm_refine_f984cba283a0017499e468d307a8fd1d))

:named haseqTm_refine_f984cba283a0017499e468d307a8fd1d))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f1ecc6ab6882a651504f328937700647
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (iff (Valid (Prims.hasEq Tm_refine_f1ecc6ab6882a651504f328937700647))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e6ab7d7d11fd937f30ad6128228c18b5
;;; Fact-ids: Name Protocol.__proj__S__item__rand; Namespace Protocol
(assert (! (iff (Valid (Prims.hasEq Tm_refine_e6ab7d7d11fd937f30ad6128228c18b5))
(Valid (Prims.hasEq Protocol.connection)))
:named haseqTm_refine_e6ab7d7d11fd937f30ad6128228c18b5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e6768a2f8034f46d4298bc352297ab17
;;; Fact-ids: Name Protocol.entry; Namespace Protocol; Name Protocol.E; Namespace Protocol
(assert (! 
;; def=Protocol.fst(70,91-70,124); use=Protocol.fst(70,91-70,124)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_e6768a2f8034f46d4298bc352297ab17 @x0
@x1)))
(Valid (Prims.hasEq (FStar.Seq.Base.seq Protocol.byte))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_e6768a2f8034f46d4298bc352297ab17 @x0
@x1))))
:qid haseqTm_refine_e6768a2f8034f46d4298bc352297ab17))

:named haseqTm_refine_e6768a2f8034f46d4298bc352297ab17))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e50addb6c1bbd8f85fb54bf03b146e15
;;; Fact-ids: Name ArrayUtils.get_some_equivalent; Namespace ArrayUtils
(assert (! 
;; def=ArrayUtils.fst(43,9-43,16); use=ArrayUtils.fst(43,9-43,16)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_e50addb6c1bbd8f85fb54bf03b146e15 @x0
@x1)))
(Valid (Prims.hasEq (FStar.Seq.Base.seq @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_e50addb6c1bbd8f85fb54bf03b146e15 @x0
@x1))))
:qid haseqTm_refine_e50addb6c1bbd8f85fb54bf03b146e15))

:named haseqTm_refine_e50addb6c1bbd8f85fb54bf03b146e15))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e478ac71fa1875d2f6d4c23ab44e0977
;;; Fact-ids: Name Protocol.modifies_r; Namespace Protocol
(assert (! (iff (Valid (Prims.hasEq Tm_refine_e478ac71fa1875d2f6d4c23ab44e0977))
(Valid (Prims.hasEq Protocol.connection)))
:named haseqTm_refine_e478ac71fa1875d2f6d4c23ab44e0977))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e33ef751d600ad1c7f71142479103c47
;;; Fact-ids: Name FStar.ST.mref; Namespace FStar.ST
(assert (! 
;; def=FStar.ST.fst(81,39-81,104); use=FStar.ST.fst(81,39-81,104)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_e33ef751d600ad1c7f71142479103c47 @x0
@x1)))
(Valid (Prims.hasEq (FStar.Monotonic.Heap.mref @x0
@x1))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_e33ef751d600ad1c7f71142479103c47 @x0
@x1))))
:qid haseqTm_refine_e33ef751d600ad1c7f71142479103c47))

:named haseqTm_refine_e33ef751d600ad1c7f71142479103c47))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e2af26714aacb45b5c7237458083cad9
;;; Fact-ids: Name ArrayUtils.init_at_seq; Namespace ArrayUtils
(assert (! 
;; def=ArrayUtils.fst(26,46-26,67); use=ArrayUtils.fst(26,46-26,67)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_e2af26714aacb45b5c7237458083cad9 @x0
@x1)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_e2af26714aacb45b5c7237458083cad9 @x0
@x1))))
:qid haseqTm_refine_e2af26714aacb45b5c7237458083cad9))

:named haseqTm_refine_e2af26714aacb45b5c7237458083cad9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e1adf49e5e772ddffa19181e1a812a81
;;; Fact-ids: Name FStar.Monotonic.Heap.lemma_mref_injectivity; Namespace FStar.Monotonic.Heap
(assert (! (iff (Valid (Prims.hasEq Tm_refine_e1adf49e5e772ddffa19181e1a812a81))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_e1adf49e5e772ddffa19181e1a812a81))
;;;;;;;;;;;;;;;;haseq for Tm_refine_da3062322c9bea8d5b2058386775b91a
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! (iff (Valid (Prims.hasEq Tm_refine_da3062322c9bea8d5b2058386775b91a))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55
;;; Fact-ids: Name FStar.Seq.Base.index; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(32,34-32,53); use=FStar.Seq.Base.fsti(32,34-32,53)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 @x0
@x1)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 @x0
@x1))))
:qid haseqTm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55))

:named haseqTm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55))
;;;;;;;;;;;;;;;;haseq for Tm_refine_d3d07693cd71377864ef84dc97d10ec1
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_slice; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(158,54-158,84); use=FStar.Seq.Base.fsti(158,54-158,84)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_d3d07693cd71377864ef84dc97d10ec1 @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_d3d07693cd71377864ef84dc97d10ec1 @x0
@x1
@x2))))
:qid haseqTm_refine_d3d07693cd71377864ef84dc97d10ec1))

:named haseqTm_refine_d3d07693cd71377864ef84dc97d10ec1))
;;;;;;;;;;;;;;;;haseq for Tm_refine_c52766f1ffb36bccccc81ae2f2d192be
;;; Fact-ids: Name Protocol.entries; Namespace Protocol
(assert (! 
;; def=Protocol.fst(74,33-74,110); use=Protocol.fst(74,33-74,110)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_c52766f1ffb36bccccc81ae2f2d192be @x0)))
(Valid (Prims.hasEq (FStar.Seq.Base.seq (Protocol.entry @x0)))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_c52766f1ffb36bccccc81ae2f2d192be @x0))))
:qid haseqTm_refine_c52766f1ffb36bccccc81ae2f2d192be))

:named haseqTm_refine_c52766f1ffb36bccccc81ae2f2d192be))
;;;;;;;;;;;;;;;;haseq for Tm_refine_c1424615841f28cac7fc34e92b7ff33c
;;; Fact-ids: Name FStar.Seq.Base.init_aux; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(36,41-36,57); use=FStar.Seq.Base.fsti(36,41-36,57)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_c1424615841f28cac7fc34e92b7ff33c @x0)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_c1424615841f28cac7fc34e92b7ff33c @x0))))
:qid haseqTm_refine_c1424615841f28cac7fc34e92b7ff33c))

:named haseqTm_refine_c1424615841f28cac7fc34e92b7ff33c))
;;;;;;;;;;;;;;;;haseq for Tm_refine_bd10f09297e0e7dc08314f7d9211801c
;;; Fact-ids: Name FStar.Preorder.preorder; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(33,25-33,57); use=FStar.Preorder.fst(33,25-33,57)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_bd10f09297e0e7dc08314f7d9211801c @x0)))
(Valid (Prims.hasEq (FStar.Preorder.relation @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_bd10f09297e0e7dc08314f7d9211801c @x0))))
:qid haseqTm_refine_bd10f09297e0e7dc08314f7d9211801c))

:named haseqTm_refine_bd10f09297e0e7dc08314f7d9211801c))
;;;;;;;;;;;;;;;;haseq for Tm_refine_ba560d8a941cf6251ebf4b60a86ab6b7
;;; Fact-ids: Name MonotonicArray.all_init_i_j; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(254,57-254,82); use=MonotonicArray.fsti(254,57-254,82)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_ba560d8a941cf6251ebf4b60a86ab6b7 @x0
@x1)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_ba560d8a941cf6251ebf4b60a86ab6b7 @x0
@x1))))
:qid haseqTm_refine_ba560d8a941cf6251ebf4b60a86ab6b7))

:named haseqTm_refine_ba560d8a941cf6251ebf4b60a86ab6b7))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b913a3f691ca99086652e0a655e72f17
;;; Fact-ids: Name FStar.Seq.Base.empty; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(46,26-46,49); use=FStar.Seq.Base.fsti(46,26-46,49)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_b913a3f691ca99086652e0a655e72f17 @x0)))
(Valid (Prims.hasEq (FStar.Seq.Base.seq @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_b913a3f691ca99086652e0a655e72f17 @x0))))
:qid haseqTm_refine_b913a3f691ca99086652e0a655e72f17))

:named haseqTm_refine_b913a3f691ca99086652e0a655e72f17))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b361ba8089a6e963921008d537e799a1
;;; Fact-ids: Name FStar.Seq.Base.eq_i; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(171,5-171,26); use=FStar.Seq.Base.fsti(171,5-171,26)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_b361ba8089a6e963921008d537e799a1 @x0
@x1)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_b361ba8089a6e963921008d537e799a1 @x0
@x1))))
:qid haseqTm_refine_b361ba8089a6e963921008d537e799a1))

:named haseqTm_refine_b361ba8089a6e963921008d537e799a1))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b197fcc3fe1a6a8a07bfa2aebd77a80a
;;; Fact-ids: Name FStar.Monotonic.Heap.lemma_free_addr_unused_in; Namespace FStar.Monotonic.Heap
(assert (! (iff (Valid (Prims.hasEq Tm_refine_b197fcc3fe1a6a8a07bfa2aebd77a80a))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_b197fcc3fe1a6a8a07bfa2aebd77a80a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_afd51579b90d50ea23e03b743a1fa001
;;; Fact-ids: Name FStar.Monotonic.Heap.addr_of_aref; Namespace FStar.Monotonic.Heap
(assert (! (iff (Valid (Prims.hasEq Tm_refine_afd51579b90d50ea23e03b743a1fa001))
(Valid (Prims.hasEq Prims.nat)))
:named haseqTm_refine_afd51579b90d50ea23e03b743a1fa001))
;;;;;;;;;;;;;;;;haseq for Tm_refine_ac201cf927190d39c033967b63cb957b
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_app2; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(153,57-153,107); use=FStar.Seq.Base.fsti(153,57-153,107)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_ac201cf927190d39c033967b63cb957b @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_ac201cf927190d39c033967b63cb957b @x0
@x1
@x2))))
:qid haseqTm_refine_ac201cf927190d39c033967b63cb957b))

:named haseqTm_refine_ac201cf927190d39c033967b63cb957b))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a2bea900bf9c6309aac9131f4b0fc594
;;; Fact-ids: Name MonotonicArray.as_initialized_subseq; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(289,10-289,69); use=MonotonicArray.fsti(289,10-289,69)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_a2bea900bf9c6309aac9131f4b0fc594 @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_a2bea900bf9c6309aac9131f4b0fc594 @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_a2bea900bf9c6309aac9131f4b0fc594))

:named haseqTm_refine_a2bea900bf9c6309aac9131f4b0fc594))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a11098d99239284f14b49e1dd0266896
;;; Fact-ids: Name FStar.ST.witnessed; Namespace FStar.ST
(assert (! (iff (Valid (Prims.hasEq Tm_refine_a11098d99239284f14b49e1dd0266896))
(Valid (Prims.hasEq FStar.ST.heap_predicate)))
:named haseqTm_refine_a11098d99239284f14b49e1dd0266896))
;;;;;;;;;;;;;;;;haseq for Tm_refine_9dd2f7dc4f1c13136a80acee9d90b531
;;; Fact-ids: Name Protocol.iarray; Namespace Protocol
(assert (! 
;; def=Protocol.fst(175,32-175,55); use=Protocol.fst(175,32-175,55)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_9dd2f7dc4f1c13136a80acee9d90b531 @x0
@x1)))
(Valid (Prims.hasEq (MonotonicArray.array @x0
@x1))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_9dd2f7dc4f1c13136a80acee9d90b531 @x0
@x1))))
:qid haseqTm_refine_9dd2f7dc4f1c13136a80acee9d90b531))

:named haseqTm_refine_9dd2f7dc4f1c13136a80acee9d90b531))
;;;;;;;;;;;;;;;;haseq for Tm_refine_931dcd8377a7c87ea65f2ca091543de1
;;; Fact-ids: Name Protocol.counter_t; Namespace Protocol
(assert (! 
;; def=Protocol.fst(92,4-92,44); use=Protocol.fst(92,4-92,44)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_931dcd8377a7c87ea65f2ca091543de1 @x0
@x1)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_931dcd8377a7c87ea65f2ca091543de1 @x0
@x1))))
:qid haseqTm_refine_931dcd8377a7c87ea65f2ca091543de1))

:named haseqTm_refine_931dcd8377a7c87ea65f2ca091543de1))
;;;;;;;;;;;;;;;;haseq for Tm_refine_8d65e998a07dd53ec478e27017d9dba5
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Prims.fst(315,31-315,40)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1))))
:qid haseqTm_refine_8d65e998a07dd53ec478e27017d9dba5))

:named haseqTm_refine_8d65e998a07dd53ec478e27017d9dba5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_8cf65a0e984801514f164a721568601b
;;; Fact-ids: Name Protocol.message; Namespace Protocol
(assert (! (iff (Valid (Prims.hasEq Tm_refine_8cf65a0e984801514f164a721568601b))
(Valid (Prims.hasEq (FStar.Seq.Base.seq Protocol.byte))))
:named haseqTm_refine_8cf65a0e984801514f164a721568601b))
;;;;;;;;;;;;;;;;haseq for Tm_refine_84f2654672d0a3698a905d302d0b961d
;;; Fact-ids: Name Protocol.network_message; Namespace Protocol
(assert (! (iff (Valid (Prims.hasEq Tm_refine_84f2654672d0a3698a905d302d0b961d))
(Valid (Prims.hasEq (FStar.Seq.Base.seq Protocol.byte))))
:named haseqTm_refine_84f2654672d0a3698a905d302d0b961d))
;;;;;;;;;;;;;;;;haseq for Tm_refine_841a7dab4e44e4e07aab6383c1e10f2e
;;; Fact-ids: Name MonotonicArray.lemma_all_init_i_j_sub; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(314,22-314,47); use=MonotonicArray.fsti(314,22-314,47)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_841a7dab4e44e4e07aab6383c1e10f2e @x0
@x1)))
(Valid (Prims.hasEq (MonotonicArray.t @x0
@x1))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_841a7dab4e44e4e07aab6383c1e10f2e @x0
@x1))))
:qid haseqTm_refine_841a7dab4e44e4e07aab6383c1e10f2e))

:named haseqTm_refine_841a7dab4e44e4e07aab6383c1e10f2e))
;;;;;;;;;;;;;;;;haseq for Tm_refine_837d13d4049ad183b630251f6b46706f
;;; Fact-ids: Name Protocol.zeroes; Namespace Protocol
(assert (! 
;; def=Protocol.fst(54,21-54,47); use=Protocol.fst(55,4-55,10)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_837d13d4049ad183b630251f6b46706f @x0)))
(Valid (Prims.hasEq (FStar.Seq.Base.seq Protocol.byte))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_837d13d4049ad183b630251f6b46706f @x0))))
:qid haseqTm_refine_837d13d4049ad183b630251f6b46706f))

:named haseqTm_refine_837d13d4049ad183b630251f6b46706f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_81607a3aa49a257c80978da6415b0769
;;; Fact-ids: Name MonotonicArray.lemma_sub_init_at; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(227,34-227,64); use=MonotonicArray.fsti(227,34-227,64)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_81607a3aa49a257c80978da6415b0769 @x0
@x1
@x2)))
(Valid (Prims.hasEq (MonotonicArray.index @x0
@x1
@x2))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_81607a3aa49a257c80978da6415b0769 @x0
@x1
@x2))))
:qid haseqTm_refine_81607a3aa49a257c80978da6415b0769))

:named haseqTm_refine_81607a3aa49a257c80978da6415b0769))
;;;;;;;;;;;;;;;;haseq for Tm_refine_81407705a0828c2c1b1976675443f647
;;; Fact-ids: Name FStar.Seq.Base.slice; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=FStar.Seq.Base.fsti(64,43-64,73)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_81407705a0828c2c1b1976675443f647 @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_81407705a0828c2c1b1976675443f647 @x0
@x1
@x2))))
:qid haseqTm_refine_81407705a0828c2c1b1976675443f647))

:named haseqTm_refine_81407705a0828c2c1b1976675443f647))
;;;;;;;;;;;;;;;;haseq for Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d
;;; Fact-ids: Name MonotonicArray.suffix; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(166,43-166,58); use=MonotonicArray.fsti(166,43-166,58)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x0)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x0))))
:qid haseqTm_refine_7e0b9b2dbca36eab00de093c1b701c6d))

:named haseqTm_refine_7e0b9b2dbca36eab00de093c1b701c6d))
;;;;;;;;;;;;;;;;haseq for Tm_refine_774ba3f728d91ead8ef40be66c9802e5
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;haseq for Tm_refine_6f684e27d6af9965634108bcfe981953
;;; Fact-ids: Name MonotonicArray.sub; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(164,48-164,71); use=MonotonicArray.fsti(164,48-164,71)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_6f684e27d6af9965634108bcfe981953 @x0
@x1)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_6f684e27d6af9965634108bcfe981953 @x0
@x1))))
:qid haseqTm_refine_6f684e27d6af9965634108bcfe981953))

:named haseqTm_refine_6f684e27d6af9965634108bcfe981953))
;;;;;;;;;;;;;;;;haseq for Tm_refine_6472b0a877e3e824d44d3d3f19ad04e0
;;; Fact-ids: Name Protocol.lemma_is_prefix_of_slice; Namespace Protocol
(assert (! 
;; def=Protocol.fst(313,24-313,56); use=Protocol.fst(313,24-313,56)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_6472b0a877e3e824d44d3d3f19ad04e0 @x0
@x1)))
(Valid (Prims.hasEq (FStar.Seq.Base.seq @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_6472b0a877e3e824d44d3d3f19ad04e0 @x0
@x1))))
:qid haseqTm_refine_6472b0a877e3e824d44d3d3f19ad04e0))

:named haseqTm_refine_6472b0a877e3e824d44d3d3f19ad04e0))
;;;;;;;;;;;;;;;;haseq for Tm_refine_6261f1452b3e7c2df9d267c7f3d29bd3
;;; Fact-ids: Name Protocol.entry; Namespace Protocol; Name Protocol.E; Namespace Protocol
(assert (! 
;; def=Protocol.fst(70,31-70,87); use=Protocol.fst(70,31-70,87)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_6261f1452b3e7c2df9d267c7f3d29bd3 @x0
@x1
@x2)))
(Valid (Prims.hasEq Protocol.network_message)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_6261f1452b3e7c2df9d267c7f3d29bd3 @x0
@x1
@x2))))
:qid haseqTm_refine_6261f1452b3e7c2df9d267c7f3d29bd3))

:named haseqTm_refine_6261f1452b3e7c2df9d267c7f3d29bd3))
;;;;;;;;;;;;;;;;haseq for Tm_refine_60a89cd0c268e7ce38a2aab467325fd8
;;; Fact-ids: Name FStar.Monotonic.Heap.sel_tot; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(72,54-72,82); use=FStar.Monotonic.Heap.fsti(72,54-72,82)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_60a89cd0c268e7ce38a2aab467325fd8 @x0
@x1
@x2)))
(Valid (Prims.hasEq (FStar.Monotonic.Heap.mref @x0
@x1))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_60a89cd0c268e7ce38a2aab467325fd8 @x0
@x1
@x2))))
:qid haseqTm_refine_60a89cd0c268e7ce38a2aab467325fd8))

:named haseqTm_refine_60a89cd0c268e7ce38a2aab467325fd8))
;;;;;;;;;;;;;;;;haseq for Tm_refine_571d9f74016be5357787170b42ecf913
;;; Fact-ids: Name Protocol.sent_bytes'; Namespace Protocol
(assert (! 
;; def=Protocol.fst(335,58-335,78); use=Protocol.fst(335,58-335,78)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_571d9f74016be5357787170b42ecf913 @x0)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_571d9f74016be5357787170b42ecf913 @x0))))
:qid haseqTm_refine_571d9f74016be5357787170b42ecf913))

:named haseqTm_refine_571d9f74016be5357787170b42ecf913))
;;;;;;;;;;;;;;;;haseq for Tm_refine_542f9d4f129664613f2483a6c88bc7c2
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4d5241eb6fe198666a8101195bbd4a2a
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Some__item__v; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x0)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.option @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x0))))
:qid haseqTm_refine_4d5241eb6fe198666a8101195bbd4a2a))

:named haseqTm_refine_4d5241eb6fe198666a8101195bbd4a2a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4a193488219f747acf46a37f5644f382
;;; Fact-ids: Name ArrayUtils.seq_map; Namespace ArrayUtils
(assert (! 
;; def=ArrayUtils.fst(117,5-117,108); use=ArrayUtils.fst(117,5-117,108)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_4a193488219f747acf46a37f5644f382 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq (FStar.Seq.Base.seq @x2))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_4a193488219f747acf46a37f5644f382 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_4a193488219f747acf46a37f5644f382))

:named haseqTm_refine_4a193488219f747acf46a37f5644f382))
;;;;;;;;;;;;;;;;haseq for Tm_refine_45b45690e95d6d557b24b79ee0491da4
;;; Fact-ids: Name MonotonicArray.lemma_sub_init_at; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(228,24-228,62); use=MonotonicArray.fsti(228,24-228,62)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_45b45690e95d6d557b24b79ee0491da4 @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_45b45690e95d6d557b24b79ee0491da4 @x0
@x1
@x2))))
:qid haseqTm_refine_45b45690e95d6d557b24b79ee0491da4))

:named haseqTm_refine_45b45690e95d6d557b24b79ee0491da4))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4183060ba5404f285780b6cf19647e32
;;; Fact-ids: Name MonotonicArray.as_initialized_seq; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(283,34-283,66); use=MonotonicArray.fsti(283,34-283,66)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_4183060ba5404f285780b6cf19647e32 @x0
@x1
@x2)))
(Valid (Prims.hasEq FStar.Monotonic.Heap.heap)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_4183060ba5404f285780b6cf19647e32 @x0
@x1
@x2))))
:qid haseqTm_refine_4183060ba5404f285780b6cf19647e32))

:named haseqTm_refine_4183060ba5404f285780b6cf19647e32))
;;;;;;;;;;;;;;;;haseq for Tm_refine_414d0a9f578ab0048252f8c8f552b99f
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_3d0c21849d5cf8d118afc092733f14a4
;;; Fact-ids: Name Protocol.lemma_prefix_entries_implies_prefix_log; Namespace Protocol
(assert (! 
;; def=Protocol.fst(144,27-144,86); use=Protocol.fst(144,27-144,86)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_3d0c21849d5cf8d118afc092733f14a4 @x0
@x1)))
(Valid (Prims.hasEq FStar.Monotonic.Heap.heap)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_3d0c21849d5cf8d118afc092733f14a4 @x0
@x1))))
:qid haseqTm_refine_3d0c21849d5cf8d118afc092733f14a4))

:named haseqTm_refine_3d0c21849d5cf8d118afc092733f14a4))
;;;;;;;;;;;;;;;;haseq for Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_slice; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(158,88-158,104); use=FStar.Seq.Base.fsti(158,88-158,104)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8 @x0
@x1)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8 @x0
@x1))))
:qid haseqTm_refine_35a0739c434508f48d0bb1d5cd5df9e8))

:named haseqTm_refine_35a0739c434508f48d0bb1d5cd5df9e8))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2de20c066034c13bf76e9c0b94f4806c
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,32-117,42); use=Prims.fst(117,32-117,42)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0))))
:qid haseqTm_refine_2de20c066034c13bf76e9c0b94f4806c))

:named haseqTm_refine_2de20c066034c13bf76e9c0b94f4806c))
;;;;;;;;;;;;;;;;haseq for Tm_refine_21ba3780ecd4c31fe9f89ff8d60a5f28
;;; Fact-ids: Name ArrayUtils.lemma_is_prefix_of_slice; Namespace ArrayUtils
(assert (! 
;; def=ArrayUtils.fst(109,65-109,102); use=ArrayUtils.fst(109,65-109,102)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_21ba3780ecd4c31fe9f89ff8d60a5f28 @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_21ba3780ecd4c31fe9f89ff8d60a5f28 @x0
@x1
@x2))))
:qid haseqTm_refine_21ba3780ecd4c31fe9f89ff8d60a5f28))

:named haseqTm_refine_21ba3780ecd4c31fe9f89ff8d60a5f28))
;;;;;;;;;;;;;;;;haseq for Tm_refine_1ba8fd8bb363097813064c67740b2de5
;;; Fact-ids: Name FStar.Seq.Properties.slice_slice; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(625,2-625,40); use=FStar.Seq.Properties.fsti(625,2-625,40)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_1ba8fd8bb363097813064c67740b2de5 @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_1ba8fd8bb363097813064c67740b2de5 @x0
@x1
@x2))))
:qid haseqTm_refine_1ba8fd8bb363097813064c67740b2de5))

:named haseqTm_refine_1ba8fd8bb363097813064c67740b2de5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_1780a0fddfda88c43d203b562c6d3f5b
;;; Fact-ids: Name FStar.Seq.Properties.createL_post; Namespace FStar.Seq.Properties
(assert (! (iff (Valid (Prims.hasEq Tm_refine_1780a0fddfda88c43d203b562c6d3f5b))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_1780a0fddfda88c43d203b562c6d3f5b))
;;;;;;;;;;;;;;;;haseq for Tm_refine_1515f8c9bed8836c1665cbcf6953f9bb
;;; Fact-ids: Name Protocol.__proj__R__item__rand; Namespace Protocol
(assert (! (iff (Valid (Prims.hasEq Tm_refine_1515f8c9bed8836c1665cbcf6953f9bb))
(Valid (Prims.hasEq Protocol.connection)))
:named haseqTm_refine_1515f8c9bed8836c1665cbcf6953f9bb))
;;;;;;;;;;;;;;;;haseq for Tm_refine_12e73119c459be812384fdc8e6c9733a
;;; Fact-ids: Name Protocol.log; Namespace Protocol
(assert (! 
;; def=Protocol.fst(140,23-140,54); use=Protocol.fst(140,23-140,54)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_12e73119c459be812384fdc8e6c9733a @x0)))
(Valid (Prims.hasEq FStar.Monotonic.Heap.heap)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_12e73119c459be812384fdc8e6c9733a @x0))))
:qid haseqTm_refine_12e73119c459be812384fdc8e6c9733a))

:named haseqTm_refine_12e73119c459be812384fdc8e6c9733a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_095c5722edf0f79bcd7dce7bd084c7b5
;;; Fact-ids: Name FStar.Seq.Properties.snoc_slice_index; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(585,2-585,36); use=FStar.Seq.Properties.fsti(585,2-585,36)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_095c5722edf0f79bcd7dce7bd084c7b5 @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_095c5722edf0f79bcd7dce7bd084c7b5 @x0
@x1
@x2))))
:qid haseqTm_refine_095c5722edf0f79bcd7dce7bd084c7b5))

:named haseqTm_refine_095c5722edf0f79bcd7dce7bd084c7b5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_07d42d481cf119dc0746fa408e885a96
;;; Fact-ids: Name MonotonicArray.lemma_sub_init_at; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(228,2-228,23); use=MonotonicArray.fsti(228,2-228,23)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_07d42d481cf119dc0746fa408e885a96 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq (MonotonicArray.index @x0
@x1
@x2))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_07d42d481cf119dc0746fa408e885a96 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_07d42d481cf119dc0746fa408e885a96))

:named haseqTm_refine_07d42d481cf119dc0746fa408e885a96))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Protocol.sent_bytes; Namespace Protocol
(assert (! 
;; def=Protocol.fst(341,4-341,14); use=Protocol.fst(341,4-341,14)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType Protocol.sent_bytes@tok
Tm_arrow_3e187eafe9783f35170bfb0700f6d487))

;; def=Protocol.fst(341,4-341,14); use=Protocol.fst(341,4-341,14)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Protocol.sent_bytes@tok
@x1)
@x2)
@x3)
@x4)
(Protocol.sent_bytes @x1
@x2
@x3
@x4))
 

:pattern ((Protocol.sent_bytes @x1
@x2
@x3
@x4))
:qid function_token_typing_Protocol.sent_bytes.1))
)
 

:pattern ((ApplyTT @x0
Protocol.sent_bytes@tok))
:qid function_token_typing_Protocol.sent_bytes))

:named function_token_typing_Protocol.sent_bytes))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Protocol.randomness; Namespace Protocol
(assert (! (HasType Protocol.randomness
Tm_type)
:named function_token_typing_Protocol.randomness))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Protocol.network_message; Namespace Protocol
(assert (! (HasType Protocol.network_message
Tm_type)
:named function_token_typing_Protocol.network_message))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Protocol.message; Namespace Protocol
(assert (! (HasType Protocol.message
Tm_type)
:named function_token_typing_Protocol.message))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Protocol.byte; Namespace Protocol
(assert (! (HasType Protocol.byte
Tm_type)
:named function_token_typing_Protocol.byte))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Prims.unit
Prims.eqtype)
:named function_token_typing_Prims.unit))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Prims.prop
Tm_type)
:named function_token_typing_Prims.prop))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (HasType Prims.pos
Tm_type)
:named function_token_typing_Prims.pos))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Prims.nat
Tm_type)
:named function_token_typing_Prims.nat))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (HasType Prims.logical
Tm_type)
:named function_token_typing_Prims.logical))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (HasType Prims.l_True
Prims.logical)
:named function_token_typing_Prims.l_True))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (HasType Prims.int
Prims.eqtype)
:named function_token_typing_Prims.int))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Prims.eqtype
Tm_type)
:named function_token_typing_Prims.eqtype))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (HasType Prims.bool
Prims.eqtype)
:named function_token_typing_Prims.bool))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.ST.heap_predicate; Namespace FStar.ST
(assert (! (HasType FStar.ST.heap_predicate
Tm_type)
:named function_token_typing_FStar.ST.heap_predicate))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.ST.contains_pred; Namespace FStar.ST
(assert (! 
;; def=FStar.ST.fst(79,4-79,17); use=FStar.ST.fst(79,4-79,17)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType FStar.ST.contains_pred@tok
Tm_arrow_63db68eb9811874d358b39a3a3a594c0))

;; def=FStar.ST.fst(79,4-79,17); use=FStar.ST.fst(79,4-79,17)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.ST.contains_pred@tok
@x1)
@x2)
@x3)
@x4)
(FStar.ST.contains_pred @x1
@x2
@x3
@x4))
 

:pattern ((FStar.ST.contains_pred @x1
@x2
@x3
@x4))
:qid function_token_typing_FStar.ST.contains_pred.1))
)
 

:pattern ((ApplyTT @x0
FStar.ST.contains_pred@tok))
:qid function_token_typing_FStar.ST.contains_pred))

:named function_token_typing_FStar.ST.contains_pred))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Monotonic.Heap.heap; Namespace FStar.Monotonic.Heap
(assert (! (HasType FStar.Monotonic.Heap.heap
Tm_type)
:named function_token_typing_FStar.Monotonic.Heap.heap))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Protocol.entry; Namespace Protocol; Name Protocol.E; Namespace Protocol
(assert (! 
;; def=Protocol.fst(69,10-69,15); use=Protocol.fst(69,10-69,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Protocol.entry @x2))
(and (is-Protocol.E @x1)
(= @x2
(Protocol.E_rand @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(Protocol.entry @x2)))
:qid fuel_guarded_inversion_Protocol.entry))

:named fuel_guarded_inversion_Protocol.entry))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Protocol.connection; Namespace Protocol; Name Protocol.S; Namespace Protocol; Name Protocol.R; Namespace Protocol
(assert (! 
;; def=Protocol.fst(101,10-101,20); use=Protocol.fst(101,10-101,20)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
Protocol.connection)
(or (is-Protocol.S @x1)
(is-Protocol.R @x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
Protocol.connection))
:qid fuel_guarded_inversion_Protocol.connection))

:named fuel_guarded_inversion_Protocol.connection))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! 
;; def=Prims.fst(91,5-91,12); use=Prims.fst(91,5-91,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.trivial)
(is-Prims.T @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.trivial))
:qid fuel_guarded_inversion_Prims.trivial))

:named fuel_guarded_inversion_Prims.trivial))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Prims.pair @x2
@x3))
(and (is-Prims.Pair @x1)
(= @x2
(Prims.Pair_p @x1))
(= @x3
(Prims.Pair_q @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(Prims.pair @x2
@x3)))
:qid fuel_guarded_inversion_Prims.pair))

:named fuel_guarded_inversion_Prims.pair))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Prims.equals @x2
@x3
@x4))
(is-Prims.Refl @x1))
 

:pattern ((HasTypeFuel @u0
@x1
(Prims.equals @x2
@x3
@x4)))
:qid fuel_guarded_inversion_Prims.equals))

:named fuel_guarded_inversion_Prims.equals))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(FStar.Pervasives.Native.option @x2))
(or (and (is-FStar.Pervasives.Native.None @x1)
(= @x2
(FStar.Pervasives.Native.None_a @x1)))
(and (is-FStar.Pervasives.Native.Some @x1)
(= @x2
(FStar.Pervasives.Native.Some_a @x1)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(FStar.Pervasives.Native.option @x2)))
:qid fuel_guarded_inversion_FStar.Pervasives.Native.option))

:named fuel_guarded_inversion_FStar.Pervasives.Native.option))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Protocol.entry; Namespace Protocol; Name Protocol.E; Namespace Protocol
(assert (! (= 129
(Term_constr_id Protocol.entry@tok))
:named fresh_token_Protocol.entry@tok))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! (= 151
(Term_constr_id Prims.pair@tok))
:named fresh_token_Prims.pair@tok))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! (= 135
(Term_constr_id Prims.equals@tok))
:named fresh_token_Prims.equals@tok))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (= 102
(Term_constr_id FStar.Pervasives.Native.option@tok))
:named fresh_token_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;Equation for Protocol.zeroes
;;; Fact-ids: Name Protocol.zeroes; Namespace Protocol
(assert (! 
;; def=Protocol.fst(55,4-55,10); use=Protocol.fst(55,4-55,10)
(forall ((@x0 Term))
 (! (= (Protocol.zeroes @x0)
(FStar.Seq.Base.create Protocol.byte
@x0
(Protocol.zero_b Dummy_value)))
 

:pattern ((Protocol.zeroes @x0))
:qid equation_Protocol.zeroes))

:named equation_Protocol.zeroes))
;;;;;;;;;;;;;;;;Equation for Protocol.sent_bytes'
;;; Fact-ids: Name Protocol.sent_bytes'; Namespace Protocol
(assert (! 
;; def=Protocol.fst(335,4-335,15); use=Protocol.fst(335,4-335,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Protocol.sent_bytes_ @x0
@x1
@x2
@x3)
(Tm_abs_7f6e09c57851a655e400606396618bbe @x1
@x3
@x0
@x2))
 

:pattern ((Protocol.sent_bytes_ @x0
@x1
@x2
@x3))
:qid equation_Protocol.sent_bytes_))

:named equation_Protocol.sent_bytes_))
;;;;;;;;;;;;;;;;Equation for Protocol.sent_bytes
;;; Fact-ids: Name Protocol.sent_bytes; Namespace Protocol
(assert (! 
;; def=Protocol.fst(341,4-341,14); use=Protocol.fst(341,4-341,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Protocol.sent_bytes @x0
@x1
@x2
@x3)
(Protocol.sent_bytes_ @x0
@x1
@x2
@x3))
 

:pattern ((Protocol.sent_bytes @x0
@x1
@x2
@x3))
:qid equation_Protocol.sent_bytes))

:named equation_Protocol.sent_bytes))
;;;;;;;;;;;;;;;;Equation for Protocol.sender
;;; Fact-ids: Name Protocol.sender; Namespace Protocol
(assert (! 
;; def=Protocol.fst(177,4-177,10); use=Protocol.fst(177,4-177,10)
(forall ((@x0 Term))
 (! (= (Protocol.sender @x0)
(Protocol.uu___is_S @x0))
 

:pattern ((Protocol.sender @x0))
:qid equation_Protocol.sender))

:named equation_Protocol.sender))
;;;;;;;;;;;;;;;;Equation for Protocol.receiver
;;; Fact-ids: Name Protocol.receiver; Namespace Protocol
(assert (! 
;; def=Protocol.fst(178,4-178,12); use=Protocol.fst(178,4-178,12)
(forall ((@x0 Term))
 (! (= (Protocol.receiver @x0)
(Protocol.uu___is_R @x0))
 

:pattern ((Protocol.receiver @x0))
:qid equation_Protocol.receiver))

:named equation_Protocol.receiver))
;;;;;;;;;;;;;;;;Equation for Protocol.randomness
;;; Fact-ids: Name Protocol.randomness; Namespace Protocol
(assert (! (= Protocol.randomness
Tm_arrow_c4ab2f2abbb10d1c3c06f26d3c3abf61)
:named equation_Protocol.randomness))
;;;;;;;;;;;;;;;;Equation for Protocol.rand_of
;;; Fact-ids: Name Protocol.rand_of; Namespace Protocol
(assert (! 
;; def=Protocol.fst(106,4-106,11); use=Protocol.fst(106,4-106,11)
(forall ((@x0 Term))
 (! (= (Protocol.rand_of @x0)
(let ((@lb1 @x0))
(ite (is-Protocol.S @lb1)
(Protocol.S_rand @lb1)
(ite (is-Protocol.R @lb1)
(Protocol.R_rand @lb1)
Tm_unit))))
 

:pattern ((Protocol.rand_of @x0))
:qid equation_Protocol.rand_of))

:named equation_Protocol.rand_of))
;;;;;;;;;;;;;;;;Equation for Protocol.pad
;;; Fact-ids: Name Protocol.pad; Namespace Protocol
(assert (! 
;; def=Protocol.fst(57,4-57,7); use=Protocol.fst(57,4-57,7)
(forall ((@x0 Term))
 (! (= (Protocol.pad @x0)
(FStar.Seq.Base.append Protocol.byte
@x0
(Protocol.zeroes (Prims.op_Subtraction (Protocol.fragment_size Dummy_value)
(FStar.Seq.Base.length Protocol.byte
@x0)))))
 

:pattern ((Protocol.pad @x0))
:qid equation_Protocol.pad))

:named equation_Protocol.pad))
;;;;;;;;;;;;;;;;Equation for Protocol.network_message
;;; Fact-ids: Name Protocol.network_message; Namespace Protocol
(assert (! (= Protocol.network_message
Tm_refine_84f2654672d0a3698a905d302d0b961d)
:named equation_Protocol.network_message))
;;;;;;;;;;;;;;;;Equation for Protocol.message
;;; Fact-ids: Name Protocol.message; Namespace Protocol
(assert (! (= Protocol.message
Tm_refine_8cf65a0e984801514f164a721568601b)
:named equation_Protocol.message))
;;;;;;;;;;;;;;;;Equation for Protocol.log
;;; Fact-ids: Name Protocol.log; Namespace Protocol
(assert (! 
;; def=Protocol.fst(140,4-140,7); use=Protocol.fst(140,4-140,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Protocol.log @x0
@x1)
(ArrayUtils.seq_map (Protocol.entry (Protocol.rand_of @x0))
Protocol.message
(Tm_abs_1f17782d7f15dca3aa2da1fe8e018a7e @x0)
(FStar.Monotonic.Heap.sel_tot (Protocol.entries (Protocol.rand_of @x0))
(Protocol.entries_rel (Protocol.rand_of @x0))
@x1
(Protocol.entries_of @x0))))
 

:pattern ((Protocol.log @x0
@x1))
:qid equation_Protocol.log))

:named equation_Protocol.log))
;;;;;;;;;;;;;;;;Equation for Protocol.live_connection
;;; Fact-ids: Name Protocol.live_connection; Namespace Protocol
(assert (! 
;; def=Protocol.fst(116,4-116,19); use=Protocol.fst(116,4-116,19)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Protocol.live_connection @x0
@x1)
(let ((@lb2 @x1))
(ite (is-Protocol.S @lb2)
(FStar.Monotonic.Heap.contains (Protocol.entries (Protocol.S_rand @lb2))
(Protocol.entries_rel (Protocol.S_rand @lb2))
@x0
(Protocol.S_entries @lb2))
(ite (is-Protocol.R @lb2)
(Prims.l_and (FStar.Monotonic.Heap.contains (Protocol.entries (Protocol.R_rand @lb2))
(Protocol.entries_rel (Protocol.R_rand @lb2))
@x0
(Protocol.R_entries @lb2))
(FStar.Monotonic.Heap.contains (Protocol.counter_t (Protocol.R_rand @lb2)
(Protocol.R_entries @lb2))
(Protocol.counter_pre (Protocol.R_rand @lb2)
(Protocol.R_entries @lb2))
@x0
(Protocol.R_ctr @lb2)))
Tm_unit))))
 

:pattern ((Protocol.live_connection @x0
@x1))
:qid equation_Protocol.live_connection))

:named equation_Protocol.live_connection))
;;;;;;;;;;;;;;;;Equation for Protocol.is_prefix_of
;;; Fact-ids: Name Protocol.is_prefix_of; Namespace Protocol
(assert (! 
;; def=Protocol.fst(76,4-76,16); use=Protocol.fst(76,4-76,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Valid (Protocol.is_prefix_of @x0
@x1
@x2))

;; def=Protocol.fst(77,4-78,72); use=Protocol.fst(77,4-78,72)
(and 
;; def=Protocol.fst(77,4-77,26); use=Protocol.fst(77,4-77,26)
(<= (BoxInt_proj_0 (FStar.Seq.Base.length @x0
@x1))
(BoxInt_proj_0 (FStar.Seq.Base.length @x0
@x2)))


;; def=Protocol.fst(78,4-78,72); use=Protocol.fst(78,4-78,72)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.nat)

;; def=Protocol.fst(78,21-78,34); use=Protocol.fst(78,21-78,34)
(< (BoxInt_proj_0 @x3)
(BoxInt_proj_0 (FStar.Seq.Base.length @x0
@x1)))
)

;; def=Protocol.fst(78,39-78,71); use=Protocol.fst(78,39-78,71)
(= (FStar.Seq.Base.index @x0
@x1
@x3)
(FStar.Seq.Base.index @x0
@x2
@x3))
)
 
;;no pats
:qid equation_Protocol.is_prefix_of.1))
)
)
 

:pattern ((Protocol.is_prefix_of @x0
@x1
@x2))
:qid equation_Protocol.is_prefix_of))

:named equation_Protocol.is_prefix_of))
;;;;;;;;;;;;;;;;Equation for Protocol.iarray
;;; Fact-ids: Name Protocol.iarray; Namespace Protocol
(assert (! 
;; def=Protocol.fst(175,5-175,11); use=Protocol.fst(175,5-175,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Protocol.iarray @x0
@x1)
(Tm_refine_9dd2f7dc4f1c13136a80acee9d90b531 @x0
@x1))
 

:pattern ((Protocol.iarray @x0
@x1))
:qid equation_Protocol.iarray))

:named equation_Protocol.iarray))
;;;;;;;;;;;;;;;;Equation for Protocol.fully_initialized_in
;;; Fact-ids: Name Protocol.fully_initialized_in; Namespace Protocol
(assert (! 
;; def=Protocol.fst(357,4-357,24); use=Protocol.fst(357,4-357,24)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Valid (Protocol.fully_initialized_in @x0
@x1
@x2
@x3))

;; def=Protocol.fst(358,2-359,62); use=Protocol.fst(358,2-359,62)
(and 
;; def=Protocol.fst(358,2-358,22); use=Protocol.fst(358,2-358,22)
(Valid 
;; def=Protocol.fst(358,2-358,22); use=Protocol.fst(358,2-358,22)
(MonotonicArray.contains_array @x0
@x1
@x3
@x2)
)


;; def=Protocol.fst(359,2-359,62); use=Protocol.fst(359,2-359,62)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.nat)

;; def=Protocol.fst(359,19-359,24); use=Protocol.fst(359,19-359,24)
(< (BoxInt_proj_0 @x4)
(BoxInt_proj_0 @x1))
)

;; def=Protocol.fst(359,29-359,61); use=Protocol.fst(359,29-359,61)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x0
(FStar.Seq.Base.index (FStar.Pervasives.Native.option @x0)
(MonotonicArray.as_seq @x0
@x1
@x2
@x3)
@x4)))
)
 
;;no pats
:qid equation_Protocol.fully_initialized_in.1))
)
)
 

:pattern ((Protocol.fully_initialized_in @x0
@x1
@x2
@x3))
:qid equation_Protocol.fully_initialized_in))

:named equation_Protocol.fully_initialized_in))
;;;;;;;;;;;;;;;;Equation for Protocol.entries_rel
;;; Fact-ids: Name Protocol.entries_rel; Namespace Protocol
(assert (! 
;; def=Protocol.fst(81,4-81,15); use=Protocol.fst(81,4-81,15)
(forall ((@x0 Term))
 (! (= (Protocol.entries_rel @x0)
(Tm_abs_41efd131336ec34ef1b819bed745d3d1 @x0))
 

:pattern ((Protocol.entries_rel @x0))
:qid equation_Protocol.entries_rel))

:named equation_Protocol.entries_rel))
;;;;;;;;;;;;;;;;Equation for Protocol.entries_of
;;; Fact-ids: Name Protocol.entries_of; Namespace Protocol
(assert (! 
;; def=Protocol.fst(111,4-111,14); use=Protocol.fst(111,4-111,14)
(forall ((@x0 Term))
 (! (= (Protocol.entries_of @x0)
(let ((@lb1 @x0))
(ite (is-Protocol.S @lb1)
(Protocol.S_entries @lb1)
(ite (is-Protocol.R @lb1)
(Protocol.R_entries @lb1)
Tm_unit))))
 

:pattern ((Protocol.entries_of @x0))
:qid equation_Protocol.entries_of))

:named equation_Protocol.entries_of))
;;;;;;;;;;;;;;;;Equation for Protocol.entries
;;; Fact-ids: Name Protocol.entries; Namespace Protocol
(assert (! 
;; def=Protocol.fst(74,5-74,12); use=Protocol.fst(74,5-74,12)
(forall ((@x0 Term))
 (! (= (Protocol.entries @x0)
(Tm_refine_c52766f1ffb36bccccc81ae2f2d192be @x0))
 

:pattern ((Protocol.entries @x0))
:qid equation_Protocol.entries))

:named equation_Protocol.entries))
;;;;;;;;;;;;;;;;Equation for Protocol.ctr
;;; Fact-ids: Name Protocol.ctr; Namespace Protocol
(assert (! 
;; def=Protocol.fst(151,4-151,7); use=Protocol.fst(151,4-151,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Protocol.ctr @x0
@x1)
(let ((@lb2 (Protocol.uu___is_S @x0)))
(ite (= @lb2
(BoxBool true))
(FStar.Seq.Base.length (Protocol.entry (Protocol.rand_of @x0))
(FStar.Monotonic.Heap.sel_tot (Protocol.entries (Protocol.rand_of @x0))
(Protocol.entries_rel (Protocol.rand_of @x0))
@x1
(Protocol.entries_of @x0)))
(FStar.Monotonic.Heap.sel_tot (Protocol.counter_t (Protocol.__proj__R__item__rand @x0)
(Protocol.__proj__R__item__entries @x0))
(Protocol.counter_pre (Protocol.__proj__R__item__rand @x0)
(Protocol.__proj__R__item__entries @x0))
@x1
(Protocol.__proj__R__item__ctr @x0)))))
 

:pattern ((Protocol.ctr @x0
@x1))
:qid equation_Protocol.ctr))

:named equation_Protocol.ctr))
;;;;;;;;;;;;;;;;Equation for Protocol.counter_t
;;; Fact-ids: Name Protocol.counter_t; Namespace Protocol
(assert (! 
;; def=Protocol.fst(91,5-91,14); use=Protocol.fst(91,5-91,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Protocol.counter_t @x0
@x1)
(Tm_refine_931dcd8377a7c87ea65f2ca091543de1 @x0
@x1))
 

:pattern ((Protocol.counter_t @x0
@x1))
:qid equation_Protocol.counter_t))

:named equation_Protocol.counter_t))
;;;;;;;;;;;;;;;;Equation for Protocol.counter_rel
;;; Fact-ids: Name Protocol.counter_rel; Namespace Protocol
(assert (! 
;; def=Protocol.fst(95,4-95,15); use=Protocol.fst(95,4-95,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Protocol.counter_rel @x0
@x1)
(Tm_abs_7bb1aca7f565f38c176c14dd92322edb @x1
@x0))
 

:pattern ((Protocol.counter_rel @x0
@x1))
:qid equation_Protocol.counter_rel))

:named equation_Protocol.counter_rel))
;;;;;;;;;;;;;;;;Equation for Protocol.counter_pred
;;; Fact-ids: Name Protocol.counter_pred; Namespace Protocol
(assert (! 
;; def=Protocol.fst(87,4-87,16); use=Protocol.fst(87,4-87,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Protocol.counter_pred @x0
@x1
@x2)
(Tm_abs_545607f5016b8a9efe7d1f635f16c449 @x0
@x2
@x1))
 

:pattern ((Protocol.counter_pred @x0
@x1
@x2))
:qid equation_Protocol.counter_pred))

:named equation_Protocol.counter_pred))
;;;;;;;;;;;;;;;;Equation for Protocol.counter_pre
;;; Fact-ids: Name Protocol.counter_pre; Namespace Protocol
(assert (! 
;; def=Protocol.fst(98,4-98,15); use=Protocol.fst(98,4-98,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Protocol.counter_pre @x0
@x1)
(Protocol.counter_rel @x0
@x1))
 

:pattern ((Protocol.counter_pre @x0
@x1))
:qid equation_Protocol.counter_pre))

:named equation_Protocol.counter_pre))
;;;;;;;;;;;;;;;;Equation for Protocol.connection_footprint
;;; Fact-ids: Name Protocol.connection_footprint; Namespace Protocol
(assert (! 
;; def=Protocol.fst(180,4-180,24); use=Protocol.fst(180,4-180,24)
(forall ((@x0 Term))
 (! (= (Protocol.connection_footprint @x0)
(let ((@lb1 @x0))
(ite (is-Protocol.S @lb1)
(FStar.Set.singleton Prims.nat
(FStar.Monotonic.Heap.addr_of (Protocol.entries (Protocol.S_rand @lb1))
(Protocol.entries_rel (Protocol.S_rand @lb1))
(Protocol.S_entries @lb1)))
(ite (is-Protocol.R @lb1)
(FStar.Set.union Prims.nat
(FStar.Set.singleton Prims.nat
(FStar.Monotonic.Heap.addr_of (Protocol.entries (Protocol.R_rand @lb1))
(Protocol.entries_rel (Protocol.R_rand @lb1))
(Protocol.R_entries @lb1)))
(FStar.Set.singleton Prims.nat
(FStar.Monotonic.Heap.addr_of (Protocol.counter_t (Protocol.R_rand @lb1)
(Protocol.R_entries @lb1))
(Protocol.counter_pre (Protocol.R_rand @lb1)
(Protocol.R_entries @lb1))
(Protocol.R_ctr @lb1))))
Tm_unit))))
 

:pattern ((Protocol.connection_footprint @x0))
:qid equation_Protocol.connection_footprint))

:named equation_Protocol.connection_footprint))
;;;;;;;;;;;;;;;;Equation for Prims.subtype_of
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (Prims.subtype_of @x0
@x1))

;; def=Prims.fst(291,31-291,60); use=Prims.fst(291,31-291,60)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x0)
(HasType @x2
@x1))
 
;;no pats
:qid equation_Prims.subtype_of.1))
)
 

:pattern ((Prims.subtype_of @x0
@x1))
:qid equation_Prims.subtype_of))

:named equation_Prims.subtype_of))
;;;;;;;;;;;;;;;;Equation for Prims.squash
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,5-117,11); use=Prims.fst(117,5-117,11)
(forall ((@x0 Term))
 (! (= (Prims.squash @x0)
(Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0))
 

:pattern ((Prims.squash @x0))
:qid equation_Prims.squash))

:named equation_Prims.squash))
;;;;;;;;;;;;;;;;Equation for Prims.prop
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (= Prims.prop
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf)
:named equation_Prims.prop))
;;;;;;;;;;;;;;;;Equation for Prims.pos
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (= Prims.pos
Tm_refine_774ba3f728d91ead8ef40be66c9802e5)
:named equation_Prims.pos))
;;;;;;;;;;;;;;;;Equation for Prims.op_Equals_Equals_Equals
;;; Fact-ids: Name Prims.op_Equals_Equals_Equals; Namespace Prims
(assert (! 
;; def=Prims.fst(498,6-498,9); use=Prims.fst(498,6-498,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Valid (Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3))

;; def=Prims.fst(498,52-498,68); use=Prims.fst(498,52-498,68)
(and 
;; def=Prims.fst(498,52-498,58); use=Prims.fst(498,52-498,58)
(= @x0
@x1)


;; def=Prims.fst(498,62-498,68); use=Prims.fst(498,62-498,68)
(= @x2
@x3)
)
)
 

:pattern ((Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3))
:qid equation_Prims.op_Equals_Equals_Equals))

:named equation_Prims.op_Equals_Equals_Equals))
;;;;;;;;;;;;;;;;Equation for Prims.nat
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (= Prims.nat
Tm_refine_542f9d4f129664613f2483a6c88bc7c2)
:named equation_Prims.nat))
;;;;;;;;;;;;;;;;Equation for Prims.min
;;; Fact-ids: Name Prims.min; Namespace Prims
(assert (! 
;; def=Prims.fst(714,4-714,7); use=Prims.fst(714,4-714,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.min @x0
@x1)
(let ((@lb2 (Prims.op_LessThanOrEqual @x0
@x1)))
(ite (= @lb2
(BoxBool true))
@x0
@x1)))
 

:pattern ((Prims.min @x0
@x1))
:qid equation_Prims.min))

:named equation_Prims.min))
;;;;;;;;;;;;;;;;Equation for Prims.logical
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (= Prims.logical
Tm_type)
:named equation_Prims.logical))
;;;;;;;;;;;;;;;;Equation for Prims.l_and
;;; Fact-ids: Name Prims.l_and; Namespace Prims
(assert (! 
;; def=Prims.fst(188,5-188,10); use=Prims.fst(188,5-188,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.l_and @x0
@x1)
(Prims.squash (Prims.pair @x0
@x1)))
 

:pattern ((Prims.l_and @x0
@x1))
:qid equation_Prims.l_and))

:named equation_Prims.l_and))
;;;;;;;;;;;;;;;;Equation for Prims.l_True
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (= Prims.l_True
(Prims.squash Prims.trivial))
:named equation_Prims.l_True))
;;;;;;;;;;;;;;;;Equation for Prims.eqtype
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (= Prims.eqtype
Tm_refine_414d0a9f578ab0048252f8c8f552b99f)
:named equation_Prims.eqtype))
;;;;;;;;;;;;;;;;Equation for Prims.eq2
;;; Fact-ids: Name Prims.eq2; Namespace Prims
(assert (! 
;; def=Prims.fst(175,5-175,8); use=Prims.fst(175,5-175,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.eq2 @x0
@x1
@x2)
(Prims.squash (Prims.equals @x0
@x1
@x2)))
 

:pattern ((Prims.eq2 @x0
@x1
@x2))
:qid equation_Prims.eq2))

:named equation_Prims.eq2))
;;;;;;;;;;;;;;;;Equation for MonotonicArray.suffix
;;; Fact-ids: Name MonotonicArray.suffix; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(166,4-166,10); use=MonotonicArray.fsti(166,4-166,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (MonotonicArray.suffix @x0
@x1
@x2
@x3)
(MonotonicArray.sub @x0
@x1
@x2
@x3
(Prims.op_Subtraction @x1
@x3)))
 

:pattern ((MonotonicArray.suffix @x0
@x1
@x2
@x3))
:qid equation_MonotonicArray.suffix))

:named equation_MonotonicArray.suffix))
;;;;;;;;;;;;;;;;Equation for MonotonicArray.init_arr_in_heap_i_j
;;; Fact-ids: Name MonotonicArray.init_arr_in_heap_i_j; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(260,4-260,24); use=MonotonicArray.fsti(260,4-260,24)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (Valid (MonotonicArray.init_arr_in_heap_i_j @x0
@x1
@x2
@x3
@x4
@x5))

;; def=MonotonicArray.fsti(261,4-261,70); use=MonotonicArray.fsti(261,4-261,70)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.nat)

;; def=MonotonicArray.fsti(261,21-261,27); use=MonotonicArray.fsti(261,21-261,27)
(>= (BoxInt_proj_0 @x6)
(BoxInt_proj_0 @x4))


;; def=MonotonicArray.fsti(261,31-261,36); use=MonotonicArray.fsti(261,31-261,36)
(< (BoxInt_proj_0 @x6)
(BoxInt_proj_0 @x5))
)

;; def=MonotonicArray.fsti(261,42-261,70); use=MonotonicArray.fsti(261,42-261,70)
(Valid 
;; def=MonotonicArray.fsti(261,42-261,70); use=MonotonicArray.fsti(261,42-261,70)
(ArrayUtils.init_at_seq @x0
(MonotonicArray.as_seq @x0
@x1
@x2
@x3)
@x6)
)
)
 
;;no pats
:qid equation_MonotonicArray.init_arr_in_heap_i_j.1))
)
 

:pattern ((MonotonicArray.init_arr_in_heap_i_j @x0
@x1
@x2
@x3
@x4
@x5))
:qid equation_MonotonicArray.init_arr_in_heap_i_j))

:named equation_MonotonicArray.init_arr_in_heap_i_j))
;;;;;;;;;;;;;;;;Equation for MonotonicArray.init_arr_in_heap
;;; Fact-ids: Name MonotonicArray.init_arr_in_heap; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(263,4-263,20); use=MonotonicArray.fsti(263,4-263,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (MonotonicArray.init_arr_in_heap @x0
@x1
@x2
@x3)
(MonotonicArray.init_arr_in_heap_i_j @x0
@x1
@x2
@x3
(BoxInt 0)
@x1))
 

:pattern ((MonotonicArray.init_arr_in_heap @x0
@x1
@x2
@x3))
:qid equation_MonotonicArray.init_arr_in_heap))

:named equation_MonotonicArray.init_arr_in_heap))
;;;;;;;;;;;;;;;;Equation for MonotonicArray.index
;;; Fact-ids: Name MonotonicArray.index; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(91,5-91,10); use=MonotonicArray.fsti(91,5-91,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (MonotonicArray.index @x0
@x1
@x2)
(Tm_refine_c1424615841f28cac7fc34e92b7ff33c @x1))
 

:pattern ((MonotonicArray.index @x0
@x1
@x2))
:qid equation_MonotonicArray.index))

:named equation_MonotonicArray.index))
;;;;;;;;;;;;;;;;Equation for MonotonicArray.as_initialized_subseq
;;; Fact-ids: Name MonotonicArray.as_initialized_subseq; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(288,4-288,25); use=MonotonicArray.fsti(288,4-288,25)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (MonotonicArray.as_initialized_subseq @x0
@x1
@x2
@x3
@x4
@x5)
(ArrayUtils.get_some_equivalent @x0
(FStar.Seq.Base.slice (FStar.Pervasives.Native.option @x0)
(MonotonicArray.as_seq @x0
@x1
@x2
@x3)
@x4
@x5)))
 

:pattern ((MonotonicArray.as_initialized_subseq @x0
@x1
@x2
@x3
@x4
@x5))
:qid equation_MonotonicArray.as_initialized_subseq))

:named equation_MonotonicArray.as_initialized_subseq))
;;;;;;;;;;;;;;;;Equation for MonotonicArray.as_initialized_seq
;;; Fact-ids: Name MonotonicArray.as_initialized_seq; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(282,4-282,22); use=MonotonicArray.fsti(282,4-282,22)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (MonotonicArray.as_initialized_seq @x0
@x1
@x2
@x3)
(ArrayUtils.get_some_equivalent @x0
(MonotonicArray.as_seq @x0
@x1
@x2
@x3)))
 

:pattern ((MonotonicArray.as_initialized_seq @x0
@x1
@x2
@x3))
:qid equation_MonotonicArray.as_initialized_seq))

:named equation_MonotonicArray.as_initialized_seq))
;;;;;;;;;;;;;;;;Equation for MonotonicArray.array
;;; Fact-ids: Name MonotonicArray.array; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(42,5-42,10); use=MonotonicArray.fsti(42,5-42,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (MonotonicArray.array @x0
@x1)
(Tm_refine_f984cba283a0017499e468d307a8fd1d @x0
@x1))
 

:pattern ((MonotonicArray.array @x0
@x1))
:qid equation_MonotonicArray.array))

:named equation_MonotonicArray.array))
;;;;;;;;;;;;;;;;Equation for MonotonicArray.all_init_i_j
;;; Fact-ids: Name MonotonicArray.all_init_i_j; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(254,4-254,16); use=MonotonicArray.fsti(254,4-254,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (Valid (MonotonicArray.all_init_i_j @x0
@x1
@x2
@x3
@x4))

;; def=MonotonicArray.fsti(255,4-255,55); use=MonotonicArray.fsti(255,4-255,55)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.nat)

;; def=MonotonicArray.fsti(255,20-255,26); use=MonotonicArray.fsti(255,20-255,26)
(>= (BoxInt_proj_0 @x5)
(BoxInt_proj_0 @x3))


;; def=MonotonicArray.fsti(255,30-255,35); use=MonotonicArray.fsti(255,30-255,35)
(< (BoxInt_proj_0 @x5)
(BoxInt_proj_0 @x4))
)

;; def=MonotonicArray.fsti(255,40-255,55); use=MonotonicArray.fsti(255,40-255,55)
(Valid 
;; def=MonotonicArray.fsti(255,40-255,55); use=MonotonicArray.fsti(255,40-255,55)
(MonotonicArray.init_at @x0
@x1
@x2
@x5)
)
)
 
;;no pats
:qid equation_MonotonicArray.all_init_i_j.1))
)
 

:pattern ((MonotonicArray.all_init_i_j @x0
@x1
@x2
@x3
@x4))
:qid equation_MonotonicArray.all_init_i_j))

:named equation_MonotonicArray.all_init_i_j))
;;;;;;;;;;;;;;;;Equation for MonotonicArray.all_init
;;; Fact-ids: Name MonotonicArray.all_init; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(257,4-257,12); use=MonotonicArray.fsti(257,4-257,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (MonotonicArray.all_init @x0
@x1
@x2)
(MonotonicArray.all_init_i_j @x0
@x1
@x2
(BoxInt 0)
@x1))
 

:pattern ((MonotonicArray.all_init @x0
@x1
@x2))
:qid equation_MonotonicArray.all_init))

:named equation_MonotonicArray.all_init))
;;;;;;;;;;;;;;;;Equation for FStar.Set.disjoint
;;; Fact-ids: Name FStar.Set.disjoint; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(47,4-47,12); use=FStar.Set.fsti(47,4-47,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Set.disjoint @x0
@x1
@x2)
(FStar.Set.equal @x0
(FStar.Set.intersect @x0
@x1
@x2)
(FStar.Set.empty @x0)))
 

:pattern ((FStar.Set.disjoint @x0
@x1
@x2))
:qid equation_FStar.Set.disjoint))

:named equation_FStar.Set.disjoint))
;;;;;;;;;;;;;;;;Equation for FStar.Seq.Properties.snoc
;;; Fact-ids: Name FStar.Seq.Properties.snoc; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(316,4-316,8); use=FStar.Seq.Properties.fsti(316,4-316,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Seq.Properties.snoc @x0
@x1
@x2)
(FStar.Seq.Base.append @x0
@x1
(FStar.Seq.Base.create @x0
(BoxInt 1)
@x2)))
 

:pattern ((FStar.Seq.Properties.snoc @x0
@x1
@x2))
:qid equation_FStar.Seq.Properties.snoc))

:named equation_FStar.Seq.Properties.snoc))
;;;;;;;;;;;;;;;;Equation for FStar.ST.stable
;;; Fact-ids: Name FStar.ST.stable; Namespace FStar.ST
(assert (! 
;; def=FStar.ST.fst(45,4-45,10); use=FStar.ST.fst(45,4-45,10)
(forall ((@x0 Term))
 (! (= (Valid (FStar.ST.stable @x0))

;; def=FStar.ST.fst(46,2-46,63); use=FStar.ST.fst(46,2-46,63)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
FStar.Monotonic.Heap.heap)
(HasType @x2
FStar.Monotonic.Heap.heap)

;; def=FStar.ST.fst(46,31-46,35); use=FStar.ST.fst(46,31-46,35)
(Valid 
;; def=FStar.ST.fst(46,31-46,35); use=FStar.ST.fst(46,31-46,35)
(ApplyTT @x0
@x1)
)


;; def=FStar.ST.fst(46,39-46,53); use=FStar.ST.fst(46,39-46,53)
(Valid 
;; def=FStar.ST.fst(46,39-46,53); use=FStar.ST.fst(46,39-46,53)
(FStar.ST.heap_rel @x1
@x2)
)
)

;; def=FStar.ST.fst(46,59-46,63); use=FStar.ST.fst(46,59-46,63)
(Valid 
;; def=FStar.ST.fst(46,59-46,63); use=FStar.ST.fst(46,59-46,63)
(ApplyTT @x0
@x2)
)
)
 
;;no pats
:qid equation_FStar.ST.stable.1))
)
 

:pattern ((FStar.ST.stable @x0))
:qid equation_FStar.ST.stable))

:named equation_FStar.ST.stable))
;;;;;;;;;;;;;;;;Equation for FStar.ST.mref
;;; Fact-ids: Name FStar.ST.mref; Namespace FStar.ST
(assert (! 
;; def=FStar.ST.fst(81,5-81,9); use=FStar.ST.fst(81,5-81,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.ST.mref @x0
@x1)
(Tm_refine_e33ef751d600ad1c7f71142479103c47 @x0
@x1))
 

:pattern ((FStar.ST.mref @x0
@x1))
:qid equation_FStar.ST.mref))

:named equation_FStar.ST.mref))
;;;;;;;;;;;;;;;;Equation for FStar.ST.heap_rel
;;; Fact-ids: Name FStar.ST.heap_rel; Namespace FStar.ST
(assert (! 
;; def=FStar.ST.fst(36,4-36,12); use=FStar.ST.fst(36,4-36,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (FStar.ST.heap_rel @x0
@x1))

;; def=FStar.ST.fst(37,2-38,93); use=FStar.ST.fst(37,2-38,93)
(forall ((@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x2
Tm_type)
(HasType @x3
(FStar.Preorder.preorder @x2))
(HasType @x4
(FStar.Monotonic.Heap.mref @x2
@x3))

;; def=FStar.ST.fst(37,52-37,67); use=FStar.ST.fst(37,52-37,67)
(Valid 
;; def=FStar.ST.fst(37,52-37,67); use=FStar.ST.fst(37,52-37,67)
(FStar.Monotonic.Heap.contains @x2
@x3
@x0
@x4)
)
)

;; def=FStar.ST.fst(38,47-38,93); use=FStar.ST.fst(38,47-38,93)
(and 
;; def=FStar.ST.fst(38,48-38,63); use=FStar.ST.fst(38,48-38,63)
(Valid 
;; def=FStar.ST.fst(38,48-38,63); use=FStar.ST.fst(38,48-38,63)
(FStar.Monotonic.Heap.contains @x2
@x3
@x1
@x4)
)


;; def=FStar.ST.fst(38,67-38,92); use=FStar.ST.fst(38,67-38,92)
(Valid 
;; def=FStar.ST.fst(38,67-38,92); use=FStar.ST.fst(38,67-38,92)
(ApplyTT (ApplyTT @x3
(FStar.Monotonic.Heap.sel @x2
@x3
@x0
@x4))
(FStar.Monotonic.Heap.sel @x2
@x3
@x1
@x4))
)
)
)
 
;;no pats
:qid equation_FStar.ST.heap_rel.1))
)
 

:pattern ((FStar.ST.heap_rel @x0
@x1))
:qid equation_FStar.ST.heap_rel))

:named equation_FStar.ST.heap_rel))
;;;;;;;;;;;;;;;;Equation for FStar.ST.heap_predicate
;;; Fact-ids: Name FStar.ST.heap_predicate; Namespace FStar.ST
(assert (! (= FStar.ST.heap_predicate
Tm_arrow_c4185f52507383203d0d6335fd0332a8)
:named equation_FStar.ST.heap_predicate))
;;;;;;;;;;;;;;;;Equation for FStar.ST.contains_pred
;;; Fact-ids: Name FStar.ST.contains_pred; Namespace FStar.ST
(assert (! 
;; def=FStar.ST.fst(79,4-79,17); use=FStar.ST.fst(79,4-79,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.ST.contains_pred @x0
@x1
@x2
@x3)
(FStar.Monotonic.Heap.contains @x0
@x1
@x3
@x2))
 

:pattern ((FStar.ST.contains_pred @x0
@x1
@x2
@x3))
:qid equation_FStar.ST.contains_pred))

:named equation_FStar.ST.contains_pred))
;;;;;;;;;;;;;;;;Equation for FStar.Preorder.transitive
;;; Fact-ids: Name FStar.Preorder.transitive; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(27,4-27,14); use=FStar.Preorder.fst(27,4-27,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (FStar.Preorder.transitive @x0
@x1))

;; def=FStar.Preorder.fst(28,2-28,60); use=FStar.Preorder.fst(28,2-28,60)
(forall ((@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x2
@x0)
(HasType @x3
@x0)
(HasType @x4
@x0)

;; def=FStar.Preorder.fst(28,29-28,36); use=FStar.Preorder.fst(28,29-28,36)
(Valid 
;; def=FStar.Preorder.fst(28,29-28,36); use=FStar.Preorder.fst(28,29-28,36)
(ApplyTT (ApplyTT @x1
@x2)
@x3)
)


;; def=FStar.Preorder.fst(28,40-28,47); use=FStar.Preorder.fst(28,40-28,47)
(Valid 
;; def=FStar.Preorder.fst(28,40-28,47); use=FStar.Preorder.fst(28,40-28,47)
(ApplyTT (ApplyTT @x1
@x3)
@x4)
)
)

;; def=FStar.Preorder.fst(28,53-28,60); use=FStar.Preorder.fst(28,53-28,60)
(Valid 
;; def=FStar.Preorder.fst(28,53-28,60); use=FStar.Preorder.fst(28,53-28,60)
(ApplyTT (ApplyTT @x1
@x2)
@x4)
)
)
 
;;no pats
:qid equation_FStar.Preorder.transitive.1))
)
 

:pattern ((FStar.Preorder.transitive @x0
@x1))
:qid equation_FStar.Preorder.transitive))

:named equation_FStar.Preorder.transitive))
;;;;;;;;;;;;;;;;Equation for FStar.Preorder.relation
;;; Fact-ids: Name FStar.Preorder.relation; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(20,5-20,13); use=FStar.Preorder.fst(20,5-20,13)
(forall ((@x0 Term))
 (! (= (FStar.Preorder.relation @x0)
(Tm_arrow_a19f9d49348d4e0038f0ded87d87802f @x0))
 

:pattern ((FStar.Preorder.relation @x0))
:qid equation_FStar.Preorder.relation))

:named equation_FStar.Preorder.relation))
;;;;;;;;;;;;;;;;Equation for FStar.Preorder.reflexive
;;; Fact-ids: Name FStar.Preorder.reflexive; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(24,4-24,13); use=FStar.Preorder.fst(24,4-24,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (FStar.Preorder.reflexive @x0
@x1))

;; def=FStar.Preorder.fst(25,2-25,23); use=FStar.Preorder.fst(25,2-25,23)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x0)

;; def=FStar.Preorder.fst(25,16-25,23); use=FStar.Preorder.fst(25,16-25,23)
(Valid 
;; def=FStar.Preorder.fst(25,16-25,23); use=FStar.Preorder.fst(25,16-25,23)
(ApplyTT (ApplyTT @x1
@x2)
@x2)
)
)
 
;;no pats
:qid equation_FStar.Preorder.reflexive.1))
)
 

:pattern ((FStar.Preorder.reflexive @x0
@x1))
:qid equation_FStar.Preorder.reflexive))

:named equation_FStar.Preorder.reflexive))
;;;;;;;;;;;;;;;;Equation for FStar.Preorder.preorder_rel
;;; Fact-ids: Name FStar.Preorder.preorder_rel; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(30,4-30,16); use=FStar.Preorder.fst(30,4-30,16)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (FStar.Preorder.preorder_rel @x0
@x1))

;; def=FStar.Preorder.fst(31,2-31,33); use=FStar.Preorder.fst(31,2-31,33)
(and 
;; def=FStar.Preorder.fst(31,2-31,15); use=FStar.Preorder.fst(31,2-31,15)
(Valid 
;; def=FStar.Preorder.fst(31,2-31,15); use=FStar.Preorder.fst(31,2-31,15)
(FStar.Preorder.reflexive @x0
@x1)
)


;; def=FStar.Preorder.fst(31,19-31,33); use=FStar.Preorder.fst(31,19-31,33)
(Valid 
;; def=FStar.Preorder.fst(31,19-31,33); use=FStar.Preorder.fst(31,19-31,33)
(FStar.Preorder.transitive @x0
@x1)
)
)
)
 

:pattern ((FStar.Preorder.preorder_rel @x0
@x1))
:qid equation_FStar.Preorder.preorder_rel))

:named equation_FStar.Preorder.preorder_rel))
;;;;;;;;;;;;;;;;Equation for FStar.Preorder.preorder
;;; Fact-ids: Name FStar.Preorder.preorder; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(33,5-33,13); use=FStar.Preorder.fst(33,5-33,13)
(forall ((@x0 Term))
 (! (= (FStar.Preorder.preorder @x0)
(Tm_refine_bd10f09297e0e7dc08314f7d9211801c @x0))
 

:pattern ((FStar.Preorder.preorder @x0))
:qid equation_FStar.Preorder.preorder))

:named equation_FStar.Preorder.preorder))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.st_post_h'
;;; Fact-ids: Name FStar.Pervasives.st_post_h'; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(442,4-442,14); use=FStar.Pervasives.fsti(442,4-442,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.st_post_h_ @x0
@x1
@x2)
(Tm_arrow_14435f7112db17792f8cd33f8f7ea859 @x2
@x0
@x1))
 

:pattern ((FStar.Pervasives.st_post_h_ @x0
@x1
@x2))
:qid equation_FStar.Pervasives.st_post_h_))

:named equation_FStar.Pervasives.st_post_h_))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.st_post_h
;;; Fact-ids: Name FStar.Pervasives.st_post_h; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(445,4-445,13); use=FStar.Pervasives.fsti(445,4-445,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.st_post_h @x0
@x1)
(FStar.Pervasives.st_post_h_ @x0
@x1
Prims.l_True))
 

:pattern ((FStar.Pervasives.st_post_h @x0
@x1))
:qid equation_FStar.Pervasives.st_post_h))

:named equation_FStar.Pervasives.st_post_h))
;;;;;;;;;;;;;;;;Equation for FStar.Monotonic.Heap.tset
;;; Fact-ids: Name FStar.Monotonic.Heap.tset; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(24,4-24,8); use=FStar.Monotonic.Heap.fsti(24,4-24,8)
(forall ((@x0 Term))
 (! (= (FStar.Monotonic.Heap.tset @x0)
(FStar.TSet.set @x0))
 

:pattern ((FStar.Monotonic.Heap.tset @x0))
:qid equation_FStar.Monotonic.Heap.tset))

:named equation_FStar.Monotonic.Heap.tset))
;;;;;;;;;;;;;;;;Equation for FStar.Monotonic.Heap.set
;;; Fact-ids: Name FStar.Monotonic.Heap.set; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(23,4-23,7); use=FStar.Monotonic.Heap.fsti(23,4-23,7)
(forall ((@x0 Term))
 (! (= (FStar.Monotonic.Heap.set @x0)
(FStar.Set.set @x0))
 

:pattern ((FStar.Monotonic.Heap.set @x0))
:qid equation_FStar.Monotonic.Heap.set))

:named equation_FStar.Monotonic.Heap.set))
;;;;;;;;;;;;;;;;Equation for FStar.Monotonic.Heap.mref
;;; Fact-ids: Name FStar.Monotonic.Heap.mref; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(41,4-41,8); use=FStar.Monotonic.Heap.fsti(41,4-41,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Monotonic.Heap.mref @x0
@x1)
(FStar.Monotonic.Heap.core_mref @x0))
 

:pattern ((FStar.Monotonic.Heap.mref @x0
@x1))
:qid equation_FStar.Monotonic.Heap.mref))

:named equation_FStar.Monotonic.Heap.mref))
;;;;;;;;;;;;;;;;Equation for FStar.Monotonic.Heap.modifies_t
;;; Fact-ids: Name FStar.Monotonic.Heap.modifies_t; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(84,4-84,14); use=FStar.Monotonic.Heap.fsti(84,4-84,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Valid (FStar.Monotonic.Heap.modifies_t @x0
@x1
@x2))

;; def=FStar.Monotonic.Heap.fsti(85,2-93,3); use=FStar.Monotonic.Heap.fsti(85,2-93,3)
(and 
;; def=FStar.Monotonic.Heap.fsti(85,2-86,104); use=FStar.Monotonic.Heap.fsti(85,2-86,104)
(forall ((@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x3
Tm_type)
(HasType @x4
(FStar.Preorder.preorder @x3))
(HasType @x5
(FStar.Monotonic.Heap.mref @x3
@x4))

;; def=FStar.Monotonic.Heap.fsti(86,32-86,58); use=FStar.Monotonic.Heap.fsti(86,32-86,58)
(not 
;; def=FStar.Monotonic.Heap.fsti(86,35-86,57); use=FStar.Monotonic.Heap.fsti(86,35-86,57)
(Valid 
;; def=FStar.Monotonic.Heap.fsti(86,35-86,57); use=FStar.Monotonic.Heap.fsti(86,35-86,57)
(FStar.TSet.mem Prims.nat
(FStar.Monotonic.Heap.addr_of @x3
@x4
@x5)
@x0)
)
)


;; def=FStar.Monotonic.Heap.fsti(86,62-86,77); use=FStar.Monotonic.Heap.fsti(86,62-86,77)
(Valid 
;; def=FStar.Monotonic.Heap.fsti(86,62-86,77); use=FStar.Monotonic.Heap.fsti(86,62-86,77)
(FStar.Monotonic.Heap.contains @x3
@x4
@x1
@x5)
)
)

;; def=FStar.Monotonic.Heap.fsti(86,83-86,103); use=FStar.Monotonic.Heap.fsti(86,83-86,103)
(= (FStar.Monotonic.Heap.sel @x3
@x4
@x2
@x5)
(FStar.Monotonic.Heap.sel @x3
@x4
@x1
@x5))
)
 

:pattern ((FStar.Monotonic.Heap.sel @x3
@x4
@x2
@x5))
:qid equation_FStar.Monotonic.Heap.modifies_t.1))


;; def=FStar.Monotonic.Heap.fsti(87,2-88,67); use=FStar.Monotonic.Heap.fsti(87,2-88,67)
(forall ((@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x3
Tm_type)
(HasType @x4
(FStar.Preorder.preorder @x3))
(HasType @x5
(FStar.Monotonic.Heap.mref @x3
@x4))

;; def=FStar.Monotonic.Heap.fsti(88,31-88,46); use=FStar.Monotonic.Heap.fsti(88,31-88,46)
(Valid 
;; def=FStar.Monotonic.Heap.fsti(88,31-88,46); use=FStar.Monotonic.Heap.fsti(88,31-88,46)
(FStar.Monotonic.Heap.contains @x3
@x4
@x1
@x5)
)
)

;; def=FStar.Monotonic.Heap.fsti(88,51-88,66); use=FStar.Monotonic.Heap.fsti(88,51-88,66)
(Valid 
;; def=FStar.Monotonic.Heap.fsti(88,51-88,66); use=FStar.Monotonic.Heap.fsti(88,51-88,66)
(FStar.Monotonic.Heap.contains @x3
@x4
@x2
@x5)
)
)
 

:pattern ((FStar.Monotonic.Heap.contains @x3
@x4
@x2
@x5))
:qid equation_FStar.Monotonic.Heap.modifies_t.2))


;; def=FStar.Monotonic.Heap.fsti(89,2-90,69); use=FStar.Monotonic.Heap.fsti(89,2-90,69)
(forall ((@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x3
Tm_type)
(HasType @x4
(FStar.Preorder.preorder @x3))
(HasType @x5
(FStar.Monotonic.Heap.mref @x3
@x4))

;; def=FStar.Monotonic.Heap.fsti(90,31-90,47); use=FStar.Monotonic.Heap.fsti(90,31-90,47)
(Valid 
;; def=FStar.Monotonic.Heap.fsti(90,31-90,47); use=FStar.Monotonic.Heap.fsti(90,31-90,47)
(FStar.Monotonic.Heap.unused_in @x3
@x4
@x5
@x2)
)
)

;; def=FStar.Monotonic.Heap.fsti(90,52-90,68); use=FStar.Monotonic.Heap.fsti(90,52-90,68)
(Valid 
;; def=FStar.Monotonic.Heap.fsti(90,52-90,68); use=FStar.Monotonic.Heap.fsti(90,52-90,68)
(FStar.Monotonic.Heap.unused_in @x3
@x4
@x5
@x1)
)
)
 

:pattern ((FStar.Monotonic.Heap.unused_in @x3
@x4
@x5
@x1))
:qid equation_FStar.Monotonic.Heap.modifies_t.3))


;; def=FStar.Monotonic.Heap.fsti(91,2-93,3); use=FStar.Monotonic.Heap.fsti(91,2-93,3)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.nat)

;; def=FStar.Monotonic.Heap.fsti(92,4-92,25); use=FStar.Monotonic.Heap.fsti(92,4-92,25)
(Valid 
;; def=FStar.Monotonic.Heap.fsti(92,4-92,25); use=FStar.Monotonic.Heap.fsti(92,4-92,25)
(FStar.Monotonic.Heap.addr_unused_in @x3
@x2)
)
)

;; def=FStar.Monotonic.Heap.fsti(92,30-92,51); use=FStar.Monotonic.Heap.fsti(92,30-92,51)
(Valid 
;; def=FStar.Monotonic.Heap.fsti(92,30-92,51); use=FStar.Monotonic.Heap.fsti(92,30-92,51)
(FStar.Monotonic.Heap.addr_unused_in @x3
@x1)
)
)
 

:pattern ((FStar.Monotonic.Heap.addr_unused_in @x3
@x1))
:qid equation_FStar.Monotonic.Heap.modifies_t.4))
)
)
 

:pattern ((FStar.Monotonic.Heap.modifies_t @x0
@x1
@x2))
:qid equation_FStar.Monotonic.Heap.modifies_t))

:named equation_FStar.Monotonic.Heap.modifies_t))
;;;;;;;;;;;;;;;;Equation for FStar.Monotonic.Heap.modifies
;;; Fact-ids: Name FStar.Monotonic.Heap.modifies; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(96,4-96,12); use=FStar.Monotonic.Heap.fsti(96,4-96,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Valid (FStar.Monotonic.Heap.modifies @x0
@x1
@x2))

;; def=FStar.Monotonic.Heap.fsti(96,47-96,82); use=FStar.Monotonic.Heap.fsti(96,47-96,82)
(Valid 
;; def=FStar.Monotonic.Heap.fsti(96,47-96,82); use=FStar.Monotonic.Heap.fsti(96,47-96,82)
(FStar.Monotonic.Heap.modifies_t (FStar.TSet.tset_of_set Prims.nat
@x0)
@x1
@x2)
)
)
 

:pattern ((FStar.Monotonic.Heap.modifies @x0
@x1
@x2))
:qid equation_FStar.Monotonic.Heap.modifies))

:named equation_FStar.Monotonic.Heap.modifies))
;;;;;;;;;;;;;;;;Equation for ArrayUtils.some_equivalent_seqs
;;; Fact-ids: Name ArrayUtils.some_equivalent_seqs; Namespace ArrayUtils
(assert (! 
;; def=ArrayUtils.fst(35,4-35,24); use=ArrayUtils.fst(35,4-35,24)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Valid (ArrayUtils.some_equivalent_seqs @x0
@x1
@x2))

;; def=ArrayUtils.fst(36,4-37,83); use=ArrayUtils.fst(36,4-37,83)
(and 
;; def=ArrayUtils.fst(36,4-36,36); use=ArrayUtils.fst(36,4-36,36)
(= (FStar.Seq.Base.length (FStar.Pervasives.Native.option @x0)
@x1)
(FStar.Seq.Base.length @x0
@x2))


;; def=ArrayUtils.fst(37,4-37,83); use=ArrayUtils.fst(37,4-37,83)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.nat)

;; def=ArrayUtils.fst(37,21-37,38); use=ArrayUtils.fst(37,21-37,38)
(< (BoxInt_proj_0 @x3)
(BoxInt_proj_0 (FStar.Seq.Base.length (FStar.Pervasives.Native.option @x0)
@x1)))
)

;; def=ArrayUtils.fst(37,43-37,82); use=ArrayUtils.fst(37,43-37,82)
(= (FStar.Pervasives.Native.Some @x0
(FStar.Seq.Base.index @x0
@x2
@x3))
(FStar.Seq.Base.index (FStar.Pervasives.Native.option @x0)
@x1
@x3))
)
 
;;no pats
:qid equation_ArrayUtils.some_equivalent_seqs.1))
)
)
 

:pattern ((ArrayUtils.some_equivalent_seqs @x0
@x1
@x2))
:qid equation_ArrayUtils.some_equivalent_seqs))

:named equation_ArrayUtils.some_equivalent_seqs))
;;;;;;;;;;;;;;;;Equation for ArrayUtils.init_at_seq
;;; Fact-ids: Name ArrayUtils.init_at_seq; Namespace ArrayUtils
(assert (! 
;; def=ArrayUtils.fst(26,4-26,15); use=ArrayUtils.fst(26,4-26,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ArrayUtils.init_at_seq @x0
@x1
@x2)
(Prims.b2t (FStar.Pervasives.Native.uu___is_Some @x0
(FStar.Seq.Base.index (FStar.Pervasives.Native.option @x0)
@x1
@x2))))
 

:pattern ((ArrayUtils.init_at_seq @x0
@x1
@x2))
:qid equation_ArrayUtils.init_at_seq))

:named equation_ArrayUtils.init_at_seq))
;;;;;;;;;;;;;;;;Equation for ArrayUtils.all_some
;;; Fact-ids: Name ArrayUtils.all_some; Namespace ArrayUtils
(assert (! 
;; def=ArrayUtils.fst(29,4-29,12); use=ArrayUtils.fst(29,4-29,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (ArrayUtils.all_some @x0
@x1))

;; def=ArrayUtils.fst(30,4-30,54); use=ArrayUtils.fst(30,4-30,54)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
Prims.nat)

;; def=ArrayUtils.fst(30,20-30,32); use=ArrayUtils.fst(30,20-30,32)
(< (BoxInt_proj_0 @x2)
(BoxInt_proj_0 (FStar.Seq.Base.length (FStar.Pervasives.Native.option @x0)
@x1)))
)

;; def=ArrayUtils.fst(30,37-30,54); use=ArrayUtils.fst(30,37-30,54)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x0
(FStar.Seq.Base.index (FStar.Pervasives.Native.option @x0)
@x1
@x2)))
)
 
;;no pats
:qid equation_ArrayUtils.all_some.1))
)
 

:pattern ((ArrayUtils.all_some @x0
@x1))
:qid equation_ArrayUtils.all_some))

:named equation_ArrayUtils.all_some))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (= Prims.T@tok
Prims.T)
:named equality_tok_Prims.T@tok))
;;;;;;;;;;;;;;;;Eq2 interpretation
;;; Fact-ids: Name Prims.eq2; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (= @x1
@x2)
(Valid (Prims.eq2 @x0
@x1
@x2)))
 

:pattern ((Prims.eq2 @x0
@x1
@x2))
:qid eq2-interp))
:named eq2-interp))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name Protocol.uu___is_S; Namespace Protocol
(assert (! 
;; def=Protocol.fst(102,4-102,5); use=Protocol.fst(102,4-102,5)
(forall ((@x0 Term))
 (! (= (Protocol.uu___is_S @x0)
(BoxBool (is-Protocol.S @x0)))
 

:pattern ((Protocol.uu___is_S @x0))
:qid disc_equation_Protocol.S))

:named disc_equation_Protocol.S))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name Protocol.uu___is_R; Namespace Protocol
(assert (! 
;; def=Protocol.fst(103,4-103,5); use=Protocol.fst(103,4-103,5)
(forall ((@x0 Term))
 (! (= (Protocol.uu___is_R @x0)
(BoxBool (is-Protocol.R @x0)))
 

:pattern ((Protocol.uu___is_R @x0))
:qid disc_equation_Protocol.R))

:named disc_equation_Protocol.R))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.uu___is_Some @x0
@x1)
(BoxBool (is-FStar.Pervasives.Native.Some @x1)))
 

:pattern ((FStar.Pervasives.Native.uu___is_Some @x0
@x1))
:qid disc_equation_FStar.Pervasives.Native.Some))

:named disc_equation_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_None; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.uu___is_None @x0
@x1)
(BoxBool (is-FStar.Pervasives.Native.None @x1)))
 

:pattern ((FStar.Pervasives.Native.uu___is_None @x0
@x1))
:qid disc_equation_FStar.Pervasives.Native.None))

:named disc_equation_FStar.Pervasives.Native.None))
;;;;;;;;;;;;;;;;Prop-typing for Protocol.is_prefix_of
;;; Fact-ids: Name Protocol.is_prefix_of; Namespace Protocol
(assert (! 
;; def=Protocol.fst(76,4-76,16); use=Protocol.fst(76,4-76,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
(FStar.Seq.Base.seq @x0)))
(Valid (Prims.subtype_of (Protocol.is_prefix_of @x0
@x1
@x2)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Protocol.is_prefix_of @x0
@x1
@x2)
Prims.unit))
:qid defn_equation_Protocol.is_prefix_of))

:named defn_equation_Protocol.is_prefix_of))
;;;;;;;;;;;;;;;;Prop-typing for Protocol.fully_initialized_in
;;; Fact-ids: Name Protocol.fully_initialized_in; Namespace Protocol
(assert (! 
;; def=Protocol.fst(357,4-357,24); use=Protocol.fst(357,4-357,24)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.array @x0
@x1))
(HasType @x3
FStar.Monotonic.Heap.heap))
(Valid (Prims.subtype_of (Protocol.fully_initialized_in @x0
@x1
@x2
@x3)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Protocol.fully_initialized_in @x0
@x1
@x2
@x3)
Prims.unit))
:qid defn_equation_Protocol.fully_initialized_in))

:named defn_equation_Protocol.fully_initialized_in))
;;;;;;;;;;;;;;;;Prop-typing for Prims.subtype_of
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(Valid (Prims.subtype_of (Prims.subtype_of @x0
@x1)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Prims.subtype_of @x0
@x1)
Prims.unit))
:qid defn_equation_Prims.subtype_of))

:named defn_equation_Prims.subtype_of))
;;;;;;;;;;;;;;;;Prop-typing for Prims.op_Equals_Equals_Equals
;;; Fact-ids: Name Prims.op_Equals_Equals_Equals; Namespace Prims
(assert (! 
;; def=Prims.fst(498,6-498,9); use=Prims.fst(498,6-498,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
@x0)
(HasType @x3
@x1))
(Valid (Prims.subtype_of (Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3)
Prims.unit))
:qid defn_equation_Prims.op_Equals_Equals_Equals))

:named defn_equation_Prims.op_Equals_Equals_Equals))
;;;;;;;;;;;;;;;;Prop-typing for MonotonicArray.init_arr_in_heap_i_j
;;; Fact-ids: Name MonotonicArray.init_arr_in_heap_i_j; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(260,4-260,24); use=MonotonicArray.fsti(260,4-260,24)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.t @x0
@x1))
(HasType @x3
FStar.Monotonic.Heap.heap)
(HasType @x4
Prims.nat)
(HasType @x5
(Tm_refine_ba560d8a941cf6251ebf4b60a86ab6b7 @x4
@x1)))
(Valid (Prims.subtype_of (MonotonicArray.init_arr_in_heap_i_j @x0
@x1
@x2
@x3
@x4
@x5)
Prims.unit)))
 

:pattern ((Prims.subtype_of (MonotonicArray.init_arr_in_heap_i_j @x0
@x1
@x2
@x3
@x4
@x5)
Prims.unit))
:qid defn_equation_MonotonicArray.init_arr_in_heap_i_j))

:named defn_equation_MonotonicArray.init_arr_in_heap_i_j))
;;;;;;;;;;;;;;;;Prop-typing for MonotonicArray.all_init_i_j
;;; Fact-ids: Name MonotonicArray.all_init_i_j; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(254,4-254,16); use=MonotonicArray.fsti(254,4-254,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.t @x0
@x1))
(HasType @x3
Prims.nat)
(HasType @x4
(Tm_refine_ba560d8a941cf6251ebf4b60a86ab6b7 @x3
@x1)))
(Valid (Prims.subtype_of (MonotonicArray.all_init_i_j @x0
@x1
@x2
@x3
@x4)
Prims.unit)))
 

:pattern ((Prims.subtype_of (MonotonicArray.all_init_i_j @x0
@x1
@x2
@x3
@x4)
Prims.unit))
:qid defn_equation_MonotonicArray.all_init_i_j))

:named defn_equation_MonotonicArray.all_init_i_j))
;;;;;;;;;;;;;;;;Prop-typing for FStar.ST.stable
;;; Fact-ids: Name FStar.ST.stable; Namespace FStar.ST
(assert (! 
;; def=FStar.ST.fst(45,4-45,10); use=FStar.ST.fst(45,4-45,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.ST.heap_predicate)
(Valid (Prims.subtype_of (FStar.ST.stable @x0)
Prims.unit)))
 

:pattern ((Prims.subtype_of (FStar.ST.stable @x0)
Prims.unit))
:qid defn_equation_FStar.ST.stable))

:named defn_equation_FStar.ST.stable))
;;;;;;;;;;;;;;;;Prop-typing for FStar.ST.heap_rel
;;; Fact-ids: Name FStar.ST.heap_rel; Namespace FStar.ST
(assert (! 
;; def=FStar.ST.fst(36,4-36,12); use=FStar.ST.fst(36,4-36,12)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
FStar.Monotonic.Heap.heap)
(HasType @x1
FStar.Monotonic.Heap.heap))
(Valid (Prims.subtype_of (FStar.ST.heap_rel @x0
@x1)
Prims.unit)))
 

:pattern ((Prims.subtype_of (FStar.ST.heap_rel @x0
@x1)
Prims.unit))
:qid defn_equation_FStar.ST.heap_rel))

:named defn_equation_FStar.ST.heap_rel))
;;;;;;;;;;;;;;;;Prop-typing for FStar.Preorder.transitive
;;; Fact-ids: Name FStar.Preorder.transitive; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(27,4-27,14); use=FStar.Preorder.fst(27,4-27,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Preorder.relation @x0)))
(Valid (Prims.subtype_of (FStar.Preorder.transitive @x0
@x1)
Prims.unit)))
 

:pattern ((Prims.subtype_of (FStar.Preorder.transitive @x0
@x1)
Prims.unit))
:qid defn_equation_FStar.Preorder.transitive))

:named defn_equation_FStar.Preorder.transitive))
;;;;;;;;;;;;;;;;Prop-typing for FStar.Preorder.reflexive
;;; Fact-ids: Name FStar.Preorder.reflexive; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(24,4-24,13); use=FStar.Preorder.fst(24,4-24,13)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Preorder.relation @x0)))
(Valid (Prims.subtype_of (FStar.Preorder.reflexive @x0
@x1)
Prims.unit)))
 

:pattern ((Prims.subtype_of (FStar.Preorder.reflexive @x0
@x1)
Prims.unit))
:qid defn_equation_FStar.Preorder.reflexive))

:named defn_equation_FStar.Preorder.reflexive))
;;;;;;;;;;;;;;;;Prop-typing for FStar.Preorder.preorder_rel
;;; Fact-ids: Name FStar.Preorder.preorder_rel; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(30,4-30,16); use=FStar.Preorder.fst(30,4-30,16)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Preorder.relation @x0)))
(Valid (Prims.subtype_of (FStar.Preorder.preorder_rel @x0
@x1)
Prims.unit)))
 

:pattern ((Prims.subtype_of (FStar.Preorder.preorder_rel @x0
@x1)
Prims.unit))
:qid defn_equation_FStar.Preorder.preorder_rel))

:named defn_equation_FStar.Preorder.preorder_rel))
;;;;;;;;;;;;;;;;Prop-typing for FStar.Monotonic.Heap.modifies_t
;;; Fact-ids: Name FStar.Monotonic.Heap.modifies_t; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(84,4-84,14); use=FStar.Monotonic.Heap.fsti(84,4-84,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
(FStar.Monotonic.Heap.tset Prims.nat))
(HasType @x1
FStar.Monotonic.Heap.heap)
(HasType @x2
FStar.Monotonic.Heap.heap))
(Valid (Prims.subtype_of (FStar.Monotonic.Heap.modifies_t @x0
@x1
@x2)
Prims.unit)))
 

:pattern ((Prims.subtype_of (FStar.Monotonic.Heap.modifies_t @x0
@x1
@x2)
Prims.unit))
:qid defn_equation_FStar.Monotonic.Heap.modifies_t))

:named defn_equation_FStar.Monotonic.Heap.modifies_t))
;;;;;;;;;;;;;;;;Equation for FStar.Monotonic.Heap.modifies
;;; Fact-ids: Name FStar.Monotonic.Heap.modifies; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(96,4-96,12); use=FStar.Monotonic.Heap.fsti(96,4-96,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Monotonic.Heap.modifies @x0
@x1
@x2)
(FStar.Monotonic.Heap.modifies_t (FStar.TSet.tset_of_set Prims.nat
@x0)
@x1
@x2))
 

:pattern ((Prims.subtype_of (FStar.Monotonic.Heap.modifies @x0
@x1
@x2)
Prims.unit))
:qid defn_equation_FStar.Monotonic.Heap.modifies))

:named defn_equation_FStar.Monotonic.Heap.modifies))
;;;;;;;;;;;;;;;;Prop-typing for ArrayUtils.some_equivalent_seqs
;;; Fact-ids: Name ArrayUtils.some_equivalent_seqs; Namespace ArrayUtils
(assert (! 
;; def=ArrayUtils.fst(35,4-35,24); use=ArrayUtils.fst(35,4-35,24)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq (FStar.Pervasives.Native.option @x0)))
(HasType @x2
(FStar.Seq.Base.seq @x0)))
(Valid (Prims.subtype_of (ArrayUtils.some_equivalent_seqs @x0
@x1
@x2)
Prims.unit)))
 

:pattern ((Prims.subtype_of (ArrayUtils.some_equivalent_seqs @x0
@x1
@x2)
Prims.unit))
:qid defn_equation_ArrayUtils.some_equivalent_seqs))

:named defn_equation_ArrayUtils.some_equivalent_seqs))
;;;;;;;;;;;;;;;;Prop-typing for ArrayUtils.all_some
;;; Fact-ids: Name ArrayUtils.all_some; Namespace ArrayUtils
(assert (! 
;; def=ArrayUtils.fst(29,4-29,12); use=ArrayUtils.fst(29,4-29,12)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq (FStar.Pervasives.Native.option @x0))))
(Valid (Prims.subtype_of (ArrayUtils.all_some @x0
@x1)
Prims.unit)))
 

:pattern ((Prims.subtype_of (ArrayUtils.all_some @x0
@x1)
Prims.unit))
:qid defn_equation_ArrayUtils.all_some))

:named defn_equation_ArrayUtils.all_some))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Protocol.connection; Namespace Protocol; Name Protocol.S; Namespace Protocol; Name Protocol.R; Namespace Protocol
(assert (! 
;; def=Protocol.fst(102,4-102,5); use=Protocol.fst(102,4-102,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Protocol.randomness)
(HasTypeFuel @u0
@x2
(FStar.ST.mref (Protocol.entries @x1)
(Protocol.entries_rel @x1))))
(HasTypeFuel @u0
(Protocol.S @x1
@x2)
Protocol.connection))
 

:pattern ((HasTypeFuel @u0
(Protocol.S @x1
@x2)
Protocol.connection))
:qid data_typing_intro_Protocol.S@tok))

:named data_typing_intro_Protocol.S@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Protocol.connection; Namespace Protocol; Name Protocol.S; Namespace Protocol; Name Protocol.R; Namespace Protocol
(assert (! 
;; def=Protocol.fst(103,4-103,5); use=Protocol.fst(103,4-103,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Protocol.randomness)
(HasTypeFuel @u0
@x2
(FStar.ST.mref (Protocol.entries @x1)
(Protocol.entries_rel @x1)))
(HasTypeFuel @u0
@x3
(FStar.ST.mref (Protocol.counter_t @x1
@x2)
(Protocol.counter_pre @x1
@x2))))
(HasTypeFuel @u0
(Protocol.R @x1
@x2
@x3)
Protocol.connection))
 

:pattern ((HasTypeFuel @u0
(Protocol.R @x1
@x2
@x3)
Protocol.connection))
:qid data_typing_intro_Protocol.R@tok))

:named data_typing_intro_Protocol.R@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Protocol.entry; Namespace Protocol; Name Protocol.E; Namespace Protocol
(assert (! 
;; def=Protocol.fst(70,4-70,5); use=Protocol.fst(70,4-70,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Protocol.randomness)
(HasTypeFuel @u0
@x2
Prims.nat)
(HasTypeFuel @u0
@x3
Protocol.message)
(HasTypeFuel @u0
@x4
(Tm_refine_6261f1452b3e7c2df9d267c7f3d29bd3 @x3
@x1
@x2))
(HasTypeFuel @u0
@x5
(Tm_refine_e6768a2f8034f46d4298bc352297ab17 @x4
@x2)))
(HasTypeFuel @u0
(Protocol.E @x1
@x2
@x3
@x4
@x5)
(Protocol.entry @x1)))
 

:pattern ((HasTypeFuel @u0
(Protocol.E @x1
@x2
@x3
@x4
@x5)
(Protocol.entry @x1)))
:qid data_typing_intro_Protocol.E@tok))

:named data_typing_intro_Protocol.E@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! 
;; def=Prims.fst(91,17-91,18); use=Prims.fst(91,17-91,18)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
Prims.T
Prims.trivial)
 

:pattern ((HasTypeFuel @u0
Prims.T
Prims.trivial))
:qid data_typing_intro_Prims.T@tok))

:named data_typing_intro_Prims.T@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,46-165,50); use=Prims.fst(165,46-165,50)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
@x1)
(= @x2
@x3))
(HasTypeFuel @u0
(Prims.Refl @x1
@x2)
(Prims.equals @x1
@x2
@x3)))
 

:pattern ((HasTypeFuel @u0
(Prims.Refl @x1
@x2)
(Prims.equals @x1
@x2
@x3)))
:qid data_typing_intro_Prims.Refl@tok))

:named data_typing_intro_Prims.Refl@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x1)
(HasTypeFuel @u0
@x4
@x2))
(HasTypeFuel @u0
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x1
@x2)))
:qid data_typing_intro_Prims.Pair@tok))

:named data_typing_intro_Prims.Pair@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
@x1))
(HasTypeFuel @u0
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x1)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x1)))
:qid data_typing_intro_FStar.Pervasives.Native.Some@tok))

:named data_typing_intro_FStar.Pervasives.Native.Some@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x1)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x1)))
:qid data_typing_intro_FStar.Pervasives.Native.None@tok))

:named data_typing_intro_FStar.Pervasives.Native.None@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Protocol.connection; Namespace Protocol; Name Protocol.S; Namespace Protocol; Name Protocol.R; Namespace Protocol
(assert (! 
;; def=Protocol.fst(102,4-102,5); use=Protocol.fst(102,4-102,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Protocol.S @x1
@x2)
Protocol.connection)
(and (HasTypeFuel @u0
@x1
Protocol.randomness)
(HasTypeFuel @u0
@x2
(FStar.ST.mref (Protocol.entries @x1)
(Protocol.entries_rel @x1)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Protocol.S @x1
@x2)
Protocol.connection))
:qid data_elim_Protocol.S))

:named data_elim_Protocol.S))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Protocol.connection; Namespace Protocol; Name Protocol.S; Namespace Protocol; Name Protocol.R; Namespace Protocol
(assert (! 
;; def=Protocol.fst(103,4-103,5); use=Protocol.fst(103,4-103,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Protocol.R @x1
@x2
@x3)
Protocol.connection)
(and (HasTypeFuel @u0
@x1
Protocol.randomness)
(HasTypeFuel @u0
@x2
(FStar.ST.mref (Protocol.entries @x1)
(Protocol.entries_rel @x1)))
(HasTypeFuel @u0
@x3
(FStar.ST.mref (Protocol.counter_t @x1
@x2)
(Protocol.counter_pre @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Protocol.R @x1
@x2
@x3)
Protocol.connection))
:qid data_elim_Protocol.R))

:named data_elim_Protocol.R))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Protocol.entry; Namespace Protocol; Name Protocol.E; Namespace Protocol
(assert (! 
;; def=Protocol.fst(70,4-70,5); use=Protocol.fst(70,4-70,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Protocol.E @x1
@x2
@x3
@x4
@x5)
(Protocol.entry @x6))
(and (HasTypeFuel @u0
@x6
Protocol.randomness)
(HasTypeFuel @u0
@x2
Prims.nat)
(HasTypeFuel @u0
@x3
Protocol.message)
(HasTypeFuel @u0
@x4
(Tm_refine_6261f1452b3e7c2df9d267c7f3d29bd3 @x3
@x6
@x2))
(HasTypeFuel @u0
@x5
(Tm_refine_e6768a2f8034f46d4298bc352297ab17 @x4
@x2))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Protocol.E @x1
@x2
@x3
@x4
@x5)
(Protocol.entry @x6)))
:qid data_elim_Protocol.E))

:named data_elim_Protocol.E))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,46-165,50); use=Prims.fst(165,46-165,50)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Refl @x1
@x2)
(Prims.equals @x3
@x4
@x5))
(and (= @x4
@x5)
(HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x4
@x3)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Refl @x1
@x2)
(Prims.equals @x3
@x4
@x5)))
:qid data_elim_Prims.Refl))

:named data_elim_Prims.Refl))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x5
@x6))
(and (HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x6
Tm_type)
(HasTypeFuel @u0
@x3
@x5)
(HasTypeFuel @u0
@x4
@x6)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x5
@x6)))
:qid data_elim_Prims.Pair))

:named data_elim_Prims.Pair))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3))
(and (HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x2
@x3)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3)))
:qid data_elim_FStar.Pervasives.Native.Some))

:named data_elim_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x2))
(HasTypeFuel @u0
@x2
Tm_type))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x2)))
:qid data_elim_FStar.Pervasives.Native.None))

:named data_elim_FStar.Pervasives.Native.None))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Protocol.entry; Namespace Protocol; Name Protocol.E; Namespace Protocol
(assert (! 
;; def=Protocol.fst(69,10-69,15); use=Protocol.fst(69,10-69,15)
(forall ((@x0 Term))
 (! (= 128
(Term_constr_id (Protocol.entry @x0)))
 

:pattern ((Protocol.entry @x0))
:qid constructor_distinct_Protocol.entry))

:named constructor_distinct_Protocol.entry))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Protocol.connection; Namespace Protocol; Name Protocol.S; Namespace Protocol; Name Protocol.R; Namespace Protocol
(assert (! (= 185
(Term_constr_id Protocol.connection))
:named constructor_distinct_Protocol.connection))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Protocol.byte; Namespace Protocol
(assert (! (= 105
(Term_constr_id Protocol.byte))
:named constructor_distinct_Protocol.byte))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Protocol.connection; Namespace Protocol; Name Protocol.S; Namespace Protocol; Name Protocol.R; Namespace Protocol
(assert (! 
;; def=Protocol.fst(102,4-102,5); use=Protocol.fst(102,4-102,5)
(forall ((@x0 Term) (@x1 Term))
 (! (= 191
(Term_constr_id (Protocol.S @x0
@x1)))
 

:pattern ((Protocol.S @x0
@x1))
:qid constructor_distinct_Protocol.S))

:named constructor_distinct_Protocol.S))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Protocol.connection; Namespace Protocol; Name Protocol.S; Namespace Protocol; Name Protocol.R; Namespace Protocol
(assert (! 
;; def=Protocol.fst(103,4-103,5); use=Protocol.fst(103,4-103,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 196
(Term_constr_id (Protocol.R @x0
@x1
@x2)))
 

:pattern ((Protocol.R @x0
@x1
@x2))
:qid constructor_distinct_Protocol.R))

:named constructor_distinct_Protocol.R))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Protocol.entry; Namespace Protocol; Name Protocol.E; Namespace Protocol
(assert (! 
;; def=Protocol.fst(70,4-70,5); use=Protocol.fst(70,4-70,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= 137
(Term_constr_id (Protocol.E @x0
@x1
@x2
@x3
@x4)))
 

:pattern ((Protocol.E @x0
@x1
@x2
@x3
@x4))
:qid constructor_distinct_Protocol.E))

:named constructor_distinct_Protocol.E))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (= 125
(Term_constr_id Prims.unit))
:named constructor_distinct_Prims.unit))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (= 116
(Term_constr_id Prims.trivial))
:named constructor_distinct_Prims.trivial))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= 150
(Term_constr_id (Prims.pair @x0
@x1)))
 

:pattern ((Prims.pair @x0
@x1))
:qid constructor_distinct_Prims.pair))

:named constructor_distinct_Prims.pair))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (= 303
(Term_constr_id Prims.int))
:named constructor_distinct_Prims.int))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 134
(Term_constr_id (Prims.equals @x0
@x1
@x2)))
 

:pattern ((Prims.equals @x0
@x1
@x2))
:qid constructor_distinct_Prims.equals))

:named constructor_distinct_Prims.equals))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (= 107
(Term_constr_id Prims.bool))
:named constructor_distinct_Prims.bool))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (= 122
(Term_constr_id Prims.T))
:named constructor_distinct_Prims.T))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,46-165,50); use=Prims.fst(165,46-165,50)
(forall ((@x0 Term) (@x1 Term))
 (! (= 141
(Term_constr_id (Prims.Refl @x0
@x1)))
 

:pattern ((Prims.Refl @x0
@x1))
:qid constructor_distinct_Prims.Refl))

:named constructor_distinct_Prims.Refl))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 157
(Term_constr_id (Prims.Pair @x0
@x1
@x2
@x3)))
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid constructor_distinct_Prims.Pair))

:named constructor_distinct_Prims.Pair))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Seq.Base.seq; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(23,8-23,11); use=FStar.Seq.Base.fsti(23,8-23,11)
(forall ((@x0 Term))
 (! (= 103
(Term_constr_id (FStar.Seq.Base.seq @x0)))
 

:pattern ((FStar.Seq.Base.seq @x0))
:qid constructor_distinct_FStar.Seq.Base.seq))

:named constructor_distinct_FStar.Seq.Base.seq))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@x0 Term))
 (! (= 101
(Term_constr_id (FStar.Pervasives.Native.option @x0)))
 

:pattern ((FStar.Pervasives.Native.option @x0))
:qid constructor_distinct_FStar.Pervasives.Native.option))

:named constructor_distinct_FStar.Pervasives.Native.option))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= 113
(Term_constr_id (FStar.Pervasives.Native.Some @x0
@x1)))
 

:pattern ((FStar.Pervasives.Native.Some @x0
@x1))
:qid constructor_distinct_FStar.Pervasives.Native.Some))

:named constructor_distinct_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@x0 Term))
 (! (= 108
(Term_constr_id (FStar.Pervasives.Native.None @x0)))
 

:pattern ((FStar.Pervasives.Native.None @x0))
:qid constructor_distinct_FStar.Pervasives.Native.None))

:named constructor_distinct_FStar.Pervasives.Native.None))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Monotonic.Heap.core_mref; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(39,4-39,13); use=FStar.Monotonic.Heap.fsti(39,4-39,13)
(forall ((@x0 Term))
 (! (= 111
(Term_constr_id (FStar.Monotonic.Heap.core_mref @x0)))
 

:pattern ((FStar.Monotonic.Heap.core_mref @x0))
:qid constructor_distinct_FStar.Monotonic.Heap.core_mref))

:named constructor_distinct_FStar.Monotonic.Heap.core_mref))
;;;;;;;;;;;;;;;;Constructor base
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,46-165,50); use=Prims.fst(165,46-165,50)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (is-Prims.Refl (Prims.Refl @x0
@x1))
(= (Prims.Refl @x0
@x1)
Prims.Refl@base))
 

:pattern ((Prims.Refl @x0
@x1))
:qid constructor_base_Prims.Refl))

:named constructor_base_Prims.Refl))
;;;;;;;;;;;;;;;;bool typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (forall ((@u0 Bool))
 (! (HasType (BoxBool @u0)
Prims.bool)
 

:pattern ((BoxBool @u0))
:qid bool_typing))
:named bool_typing))
;;;;;;;;;;;;;;;;bool inversion
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.bool)
(is-BoxBool @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.bool))
:qid bool_inversion))
:named bool_inversion))
;;;;;;;;;;;;;;;;b2t typing
;;; Fact-ids: Name Prims.b2t; Namespace Prims
(assert (! 
;; def=Prims.fst(180,5-180,8); use=Prims.fst(180,5-180,8)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.bool)
(HasType (Prims.b2t @x0)
Tm_type))
 

:pattern ((Prims.b2t @x0))
:qid b2t_typing))

:named b2t_typing))
;;;;;;;;;;;;;;;;b2t def
;;; Fact-ids: Name Prims.b2t; Namespace Prims
(assert (! 
;; def=Prims.fst(180,5-180,8); use=Prims.fst(180,5-180,8)
(forall ((@x0 Term))
 (! (= (Valid (Prims.b2t @x0))
(BoxBool_proj_0 @x0))
 

:pattern ((Prims.b2t @x0))
:qid b2t_def))

:named b2t_def))
;;;;;;;;;;;;;;;;Assumption: FStar.Pervasives.Native.option__uu___haseq
;;; Fact-ids: Name FStar.Pervasives.Native.option__uu___haseq; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_type)
(Valid (Prims.hasEq @x0)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.option @x0))))
 

:pattern ((Prims.hasEq (FStar.Pervasives.Native.option @x0)))
:qid assumption_FStar.Pervasives.Native.option__uu___haseq))
:named assumption_FStar.Pervasives.Native.option__uu___haseq))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Protocol.byte; Namespace Protocol
(assert (! 
;; def=Protocol.fst(37,5-37,9); use=Protocol.fst(37,5-37,9)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Protocol.byte)
(= Protocol.byte
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Protocol.byte))
:qid Protocol_pretyping_d1978c882b530b60e372963c3ccf3dc6))

:named Protocol_pretyping_d1978c882b530b60e372963c3ccf3dc6))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Protocol.connection; Namespace Protocol; Name Protocol.S; Namespace Protocol; Name Protocol.R; Namespace Protocol
(assert (! 
;; def=Protocol.fst(101,10-101,20); use=Protocol.fst(101,10-101,20)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Protocol.connection)
(= Protocol.connection
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Protocol.connection))
:qid Protocol_pretyping_34672ec4dc78ee898571237f460966af))

:named Protocol_pretyping_34672ec4dc78ee898571237f460966af))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Protocol.entry; Namespace Protocol; Name Protocol.E; Namespace Protocol
(assert (! 
;; def=Protocol.fst(69,10-69,15); use=Protocol.fst(69,10-69,15)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(Protocol.entry @x2))
(= (Protocol.entry @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(Protocol.entry @x2)))
:qid Protocol_pretyping_1b7ce9bc18f5b04d6286344857a697eb))

:named Protocol_pretyping_1b7ce9bc18f5b04d6286344857a697eb))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Protocol.counter_rel; Namespace Protocol
(assert (! 
;; def=Protocol.fst(95,93-95,111); use=Protocol.fst(95,93-95,111)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_ec89ee75ecc09ae37ba2c37ec85a4d5a @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_ec89ee75ecc09ae37ba2c37ec85a4d5a @x2
@x3)))
:qid Protocol_pre_typing_Tm_arrow_ec89ee75ecc09ae37ba2c37ec85a4d5a))

:named Protocol_pre_typing_Tm_arrow_ec89ee75ecc09ae37ba2c37ec85a4d5a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Protocol.randomness; Namespace Protocol
(assert (! 
;; def=Protocol.fst(44,18-44,40); use=Protocol.fst(44,18-44,40)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_c4ab2f2abbb10d1c3c06f26d3c3abf61)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_c4ab2f2abbb10d1c3c06f26d3c3abf61))
:qid Protocol_pre_typing_Tm_arrow_c4ab2f2abbb10d1c3c06f26d3c3abf61))

:named Protocol_pre_typing_Tm_arrow_c4ab2f2abbb10d1c3c06f26d3c3abf61))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Protocol.log; Namespace Protocol
(assert (! 
;; def=Protocol.fst(70,20-71,20); use=Protocol.fst(141,13-141,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_bbf9c13f2e1689774c895427eb4d7c9a @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_bbf9c13f2e1689774c895427eb4d7c9a @x2)))
:qid Protocol_pre_typing_Tm_arrow_bbf9c13f2e1689774c895427eb4d7c9a))

:named Protocol_pre_typing_Tm_arrow_bbf9c13f2e1689774c895427eb4d7c9a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Protocol.entries_rel; Namespace Protocol
(assert (! 
;; def=Protocol.fst(82,11-82,42); use=Protocol.fst(82,11-82,42)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_6b407af9af3e3c176b95011816cf31c0 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_6b407af9af3e3c176b95011816cf31c0 @x2)))
:qid Protocol_pre_typing_Tm_arrow_6b407af9af3e3c176b95011816cf31c0))

:named Protocol_pre_typing_Tm_arrow_6b407af9af3e3c176b95011816cf31c0))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Protocol.sent_bytes; Namespace Protocol
(assert (! 
;; def=Protocol.fst(341,21-341,107); use=Protocol.fst(341,21-341,107)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_3e187eafe9783f35170bfb0700f6d487)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_3e187eafe9783f35170bfb0700f6d487))
:qid Protocol_pre_typing_Tm_arrow_3e187eafe9783f35170bfb0700f6d487))

:named Protocol_pre_typing_Tm_arrow_3e187eafe9783f35170bfb0700f6d487))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_ec89ee75ecc09ae37ba2c37ec85a4d5a
;;; Fact-ids: Name Protocol.counter_rel; Namespace Protocol
(assert (! 
;; def=Protocol.fst(95,93-95,111); use=Protocol.fst(95,93-95,111)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_ec89ee75ecc09ae37ba2c37ec85a4d5a @x1
@x2))
(and 
;; def=Protocol.fst(95,93-95,111); use=Protocol.fst(95,93-95,111)
(forall ((@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x3
(Protocol.counter_t @x2
@x1))
(HasType @x4
(Protocol.counter_t @x2
@x1)))
(HasType (ApplyTT (ApplyTT @x0
@x3)
@x4)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT @x0
@x3)
@x4))
:qid Protocol_interpretation_Tm_arrow_ec89ee75ecc09ae37ba2c37ec85a4d5a.1))

(IsTotFun @x0)

;; def=Protocol.fst(95,93-95,111); use=Protocol.fst(95,93-95,111)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Protocol.counter_t @x2
@x1))
(IsTotFun (ApplyTT @x0
@x3)))
 

:pattern ((ApplyTT @x0
@x3))
:qid Protocol_interpretation_Tm_arrow_ec89ee75ecc09ae37ba2c37ec85a4d5a.2))
))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_ec89ee75ecc09ae37ba2c37ec85a4d5a @x1
@x2)))
:qid Protocol_interpretation_Tm_arrow_ec89ee75ecc09ae37ba2c37ec85a4d5a))

:named Protocol_interpretation_Tm_arrow_ec89ee75ecc09ae37ba2c37ec85a4d5a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_c4ab2f2abbb10d1c3c06f26d3c3abf61
;;; Fact-ids: Name Protocol.randomness; Namespace Protocol
(assert (! 
;; def=Protocol.fst(44,18-44,40); use=Protocol.fst(44,18-44,40)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_c4ab2f2abbb10d1c3c06f26d3c3abf61)
(and 
;; def=Protocol.fst(44,18-44,40); use=Protocol.fst(44,18-44,40)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.nat)
(HasType (ApplyTT @x0
@x1)
Protocol.network_message))
 

:pattern ((ApplyTT @x0
@x1))
:qid Protocol_interpretation_Tm_arrow_c4ab2f2abbb10d1c3c06f26d3c3abf61.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_c4ab2f2abbb10d1c3c06f26d3c3abf61))
:qid Protocol_interpretation_Tm_arrow_c4ab2f2abbb10d1c3c06f26d3c3abf61))

:named Protocol_interpretation_Tm_arrow_c4ab2f2abbb10d1c3c06f26d3c3abf61))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_bbf9c13f2e1689774c895427eb4d7c9a
;;; Fact-ids: Name Protocol.log; Namespace Protocol
(assert (! 
;; def=Protocol.fst(70,20-71,20); use=Protocol.fst(141,13-141,20)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_bbf9c13f2e1689774c895427eb4d7c9a @x1))
(and 
;; def=Protocol.fst(70,20-71,20); use=Protocol.fst(141,13-141,20)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(Protocol.entry (Protocol.rand_of @x1)))
(HasType (ApplyTT @x0
@x2)
Protocol.message))
 

:pattern ((ApplyTT @x0
@x2))
:qid Protocol_interpretation_Tm_arrow_bbf9c13f2e1689774c895427eb4d7c9a.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_bbf9c13f2e1689774c895427eb4d7c9a @x1)))
:qid Protocol_interpretation_Tm_arrow_bbf9c13f2e1689774c895427eb4d7c9a))

:named Protocol_interpretation_Tm_arrow_bbf9c13f2e1689774c895427eb4d7c9a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_6b407af9af3e3c176b95011816cf31c0
;;; Fact-ids: Name Protocol.entries_rel; Namespace Protocol
(assert (! 
;; def=Protocol.fst(82,11-82,42); use=Protocol.fst(82,11-82,42)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_6b407af9af3e3c176b95011816cf31c0 @x1))
(and 
;; def=Protocol.fst(82,11-82,42); use=Protocol.fst(82,11-82,42)
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
(Protocol.entries @x1))
(HasType @x3
(Protocol.entries @x1)))
(HasType (ApplyTT (ApplyTT @x0
@x2)
@x3)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT @x0
@x2)
@x3))
:qid Protocol_interpretation_Tm_arrow_6b407af9af3e3c176b95011816cf31c0.1))

(IsTotFun @x0)

;; def=Protocol.fst(82,11-82,42); use=Protocol.fst(82,11-82,42)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(Protocol.entries @x1))
(IsTotFun (ApplyTT @x0
@x2)))
 

:pattern ((ApplyTT @x0
@x2))
:qid Protocol_interpretation_Tm_arrow_6b407af9af3e3c176b95011816cf31c0.2))
))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_6b407af9af3e3c176b95011816cf31c0 @x1)))
:qid Protocol_interpretation_Tm_arrow_6b407af9af3e3c176b95011816cf31c0))

:named Protocol_interpretation_Tm_arrow_6b407af9af3e3c176b95011816cf31c0))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_3e187eafe9783f35170bfb0700f6d487
;;; Fact-ids: Name Protocol.sent_bytes; Namespace Protocol
(assert (! 
;; def=Protocol.fst(341,21-341,107); use=Protocol.fst(341,21-341,107)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_3e187eafe9783f35170bfb0700f6d487)
(and 
;; def=Protocol.fst(341,21-341,107); use=Protocol.fst(341,21-341,107)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
(FStar.Seq.Base.seq Protocol.byte))
(HasType @x2
Protocol.connection)
(HasType @x3
Prims.nat)
(HasType @x4
(Tm_refine_571d9f74016be5357787170b42ecf913 @x3)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
Tm_refine_a11098d99239284f14b49e1dd0266896))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid Protocol_interpretation_Tm_arrow_3e187eafe9783f35170bfb0700f6d487.1))

(IsTotFun @x0)

;; def=Protocol.fst(341,21-341,107); use=Protocol.fst(341,21-341,107)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.Seq.Base.seq Protocol.byte))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Protocol_interpretation_Tm_arrow_3e187eafe9783f35170bfb0700f6d487.2))


;; def=Protocol.fst(341,21-341,107); use=Protocol.fst(341,21-341,107)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
(FStar.Seq.Base.seq Protocol.byte))
(HasType @x2
Protocol.connection))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Protocol_interpretation_Tm_arrow_3e187eafe9783f35170bfb0700f6d487.3))


;; def=Protocol.fst(341,21-341,107); use=Protocol.fst(341,21-341,107)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
(FStar.Seq.Base.seq Protocol.byte))
(HasType @x2
Protocol.connection)
(HasType @x3
Prims.nat))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid Protocol_interpretation_Tm_arrow_3e187eafe9783f35170bfb0700f6d487.4))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_3e187eafe9783f35170bfb0700f6d487))
:qid Protocol_interpretation_Tm_arrow_3e187eafe9783f35170bfb0700f6d487))

:named Protocol_interpretation_Tm_arrow_3e187eafe9783f35170bfb0700f6d487))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! 
;; def=Prims.fst(96,5-96,9); use=Prims.fst(96,5-96,9)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.unit)
(= Prims.unit
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.unit))
:qid Prims_pretyping_f8666440faa91836cc5a13998af863fc))

:named Prims_pretyping_f8666440faa91836cc5a13998af863fc))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! 
;; def=Prims.fst(80,5-80,9); use=Prims.fst(80,5-80,9)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.bool)
(= Prims.bool
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.bool))
:qid Prims_pretyping_f537159ed795b314b4e58c260361ae86))

:named Prims_pretyping_f537159ed795b314b4e58c260361ae86))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! 
;; def=Prims.fst(91,5-91,12); use=Prims.fst(91,5-91,12)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.trivial)
(= Prims.trivial
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.trivial))
:qid Prims_pretyping_e8ffb7d227a1bbf69407a8d2ad2c4c83))

:named Prims_pretyping_e8ffb7d227a1bbf69407a8d2ad2c4c83))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u1
@x0
(Prims.pair @x2
@x3))
(= (Prims.pair @x2
@x3)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(Prims.pair @x2
@x3)))
:qid Prims_pretyping_b7882067459c08225ce8e64864e7b31f))

:named Prims_pretyping_b7882067459c08225ce8e64864e7b31f))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u1
@x0
(Prims.equals @x2
@x3
@x4))
(= (Term_constr_id (Prims.equals @x2
@x3
@x4))
(Term_constr_id (PreType @x0))))
 

:pattern ((HasTypeFuel @u1
@x0
(Prims.equals @x2
@x3
@x4)))
:qid Prims_pretyping_b2d64ca214b8828a9eba2c140aea0816))

:named Prims_pretyping_b2d64ca214b8828a9eba2c140aea0816))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! 
;; def=Prims.fst(514,5-514,8); use=Prims.fst(514,5-514,8)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.int)
(= Prims.int
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.int))
:qid Prims_pretyping_ae567c2fb75be05905677af440075565))

:named Prims_pretyping_ae567c2fb75be05905677af440075565))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Seq.Base.seq; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(23,8-23,11); use=FStar.Seq.Base.fsti(23,8-23,11)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Seq.Base.seq @x2))
(= (FStar.Seq.Base.seq @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Seq.Base.seq @x2)))
:qid FStar.Seq.Base_pretyping_7efa52b424e80c83ad68a652aa3561e4))

:named FStar.Seq.Base_pretyping_7efa52b424e80c83ad68a652aa3561e4))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.ST.heap_predicate; Namespace FStar.ST
(assert (! 
;; def=FStar.ST.fst(43,22-43,35); use=FStar.ST.fst(43,22-43,35)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_c4185f52507383203d0d6335fd0332a8)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_c4185f52507383203d0d6335fd0332a8))
:qid FStar.ST_pre_typing_Tm_arrow_c4185f52507383203d0d6335fd0332a8))

:named FStar.ST_pre_typing_Tm_arrow_c4185f52507383203d0d6335fd0332a8))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_c4185f52507383203d0d6335fd0332a8
;;; Fact-ids: Name FStar.ST.heap_predicate; Namespace FStar.ST
(assert (! 
;; def=FStar.ST.fst(43,22-43,35); use=FStar.ST.fst(43,22-43,35)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_c4185f52507383203d0d6335fd0332a8)
(and 
;; def=FStar.ST.fst(43,22-43,35); use=FStar.ST.fst(43,22-43,35)
(forall ((@x1 Term))
 (! (implies (HasType @x1
FStar.Monotonic.Heap.heap)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid FStar.ST_interpretation_Tm_arrow_c4185f52507383203d0d6335fd0332a8.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_c4185f52507383203d0d6335fd0332a8))
:qid FStar.ST_interpretation_Tm_arrow_c4185f52507383203d0d6335fd0332a8))

:named FStar.ST_interpretation_Tm_arrow_c4185f52507383203d0d6335fd0332a8))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Preorder.relation; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(20,15-20,40); use=FStar.Preorder.fst(20,25-20,40)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_a19f9d49348d4e0038f0ded87d87802f @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_a19f9d49348d4e0038f0ded87d87802f @x2)))
:qid FStar.Preorder_pre_typing_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f))

:named FStar.Preorder_pre_typing_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f
;;; Fact-ids: Name FStar.Preorder.relation; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(20,15-20,40); use=FStar.Preorder.fst(20,25-20,40)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_a19f9d49348d4e0038f0ded87d87802f @x1))
(and 
;; def=FStar.Preorder.fst(20,15-20,40); use=FStar.Preorder.fst(20,25-20,40)
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
@x1)
(HasType @x3
@x1))
(HasType (ApplyTT (ApplyTT @x0
@x2)
@x3)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT @x0
@x2)
@x3))
:qid FStar.Preorder_interpretation_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f.1))

(IsTotFun @x0)

;; def=FStar.Preorder.fst(20,15-20,40); use=FStar.Preorder.fst(20,25-20,40)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x1)
(IsTotFun (ApplyTT @x0
@x2)))
 

:pattern ((ApplyTT @x0
@x2))
:qid FStar.Preorder_interpretation_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f.2))
))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_a19f9d49348d4e0038f0ded87d87802f @x1)))
:qid FStar.Preorder_interpretation_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f))

:named FStar.Preorder_interpretation_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.st_post_h'; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(442,21-442,67); use=FStar.Pervasives.fsti(442,36-442,67)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_14435f7112db17792f8cd33f8f7ea859 @x2
@x3
@x4))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_14435f7112db17792f8cd33f8f7ea859 @x2
@x3
@x4)))
:qid FStar.Pervasives_pre_typing_Tm_arrow_14435f7112db17792f8cd33f8f7ea859))

:named FStar.Pervasives_pre_typing_Tm_arrow_14435f7112db17792f8cd33f8f7ea859))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_14435f7112db17792f8cd33f8f7ea859
;;; Fact-ids: Name FStar.Pervasives.st_post_h'; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(442,21-442,67); use=FStar.Pervasives.fsti(442,36-442,67)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_14435f7112db17792f8cd33f8f7ea859 @x1
@x2
@x3))
(and 
;; def=FStar.Pervasives.fsti(442,21-442,67); use=FStar.Pervasives.fsti(442,36-442,67)
(forall ((@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x4
@x3)
(HasType @x5
(Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x2
@x1)))
(HasType (ApplyTT (ApplyTT @x0
@x4)
@x5)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT @x0
@x4)
@x5))
:qid FStar.Pervasives_interpretation_Tm_arrow_14435f7112db17792f8cd33f8f7ea859.1))

(IsTotFun @x0)

;; def=FStar.Pervasives.fsti(442,21-442,67); use=FStar.Pervasives.fsti(442,36-442,67)
(forall ((@x4 Term))
 (! (implies (HasType @x4
@x3)
(IsTotFun (ApplyTT @x0
@x4)))
 

:pattern ((ApplyTT @x0
@x4))
:qid FStar.Pervasives_interpretation_Tm_arrow_14435f7112db17792f8cd33f8f7ea859.2))
))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_14435f7112db17792f8cd33f8f7ea859 @x1
@x2
@x3)))
:qid FStar.Pervasives_interpretation_Tm_arrow_14435f7112db17792f8cd33f8f7ea859))

:named FStar.Pervasives_interpretation_Tm_arrow_14435f7112db17792f8cd33f8f7ea859))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.option @x2))
(= (FStar.Pervasives.Native.option @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.option @x2)))
:qid FStar.Pervasives.Native_pretyping_b53dbd183c526bc5d0f20d7b966ae125))

:named FStar.Pervasives.Native_pretyping_b53dbd183c526bc5d0f20d7b966ae125))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Monotonic.Heap.core_mref; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(39,4-39,13); use=FStar.Monotonic.Heap.fsti(39,4-39,13)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Monotonic.Heap.core_mref @x2))
(= (FStar.Monotonic.Heap.core_mref @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Monotonic.Heap.core_mref @x2)))
:qid FStar.Monotonic.Heap_pretyping_67b0ade1260a0985dfe99d32b2574a59))

:named FStar.Monotonic.Heap_pretyping_67b0ade1260a0985dfe99d32b2574a59))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Monotonic.Heap.unused_in; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(56,18-56,73); use=FStar.Monotonic.Heap.fsti(56,18-56,73)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_63db68eb9811874d358b39a3a3a594c0)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_63db68eb9811874d358b39a3a3a594c0))
:qid FStar.Monotonic.Heap_pre_typing_Tm_arrow_63db68eb9811874d358b39a3a3a594c0))

:named FStar.Monotonic.Heap_pre_typing_Tm_arrow_63db68eb9811874d358b39a3a3a594c0))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_63db68eb9811874d358b39a3a3a594c0
;;; Fact-ids: Name FStar.Monotonic.Heap.unused_in; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(56,18-56,73); use=FStar.Monotonic.Heap.fsti(56,18-56,73)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_63db68eb9811874d358b39a3a3a594c0)
(and 
;; def=FStar.Monotonic.Heap.fsti(56,18-56,73); use=FStar.Monotonic.Heap.fsti(56,18-56,73)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(FStar.Preorder.preorder @x1))
(HasType @x3
(FStar.Monotonic.Heap.mref @x1
@x2))
(HasType @x4
FStar.Monotonic.Heap.heap))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid FStar.Monotonic.Heap_interpretation_Tm_arrow_63db68eb9811874d358b39a3a3a594c0.1))

(IsTotFun @x0)

;; def=FStar.Monotonic.Heap.fsti(56,18-56,73); use=FStar.Monotonic.Heap.fsti(56,18-56,73)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Tm_type)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid FStar.Monotonic.Heap_interpretation_Tm_arrow_63db68eb9811874d358b39a3a3a594c0.2))


;; def=FStar.Monotonic.Heap.fsti(56,18-56,73); use=FStar.Monotonic.Heap.fsti(56,18-56,73)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(FStar.Preorder.preorder @x1)))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid FStar.Monotonic.Heap_interpretation_Tm_arrow_63db68eb9811874d358b39a3a3a594c0.3))


;; def=FStar.Monotonic.Heap.fsti(56,18-56,73); use=FStar.Monotonic.Heap.fsti(56,18-56,73)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(FStar.Preorder.preorder @x1))
(HasType @x3
(FStar.Monotonic.Heap.mref @x1
@x2)))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid FStar.Monotonic.Heap_interpretation_Tm_arrow_63db68eb9811874d358b39a3a3a594c0.4))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_63db68eb9811874d358b39a3a3a594c0))
:qid FStar.Monotonic.Heap_interpretation_Tm_arrow_63db68eb9811874d358b39a3a3a594c0))

:named FStar.Monotonic.Heap_interpretation_Tm_arrow_63db68eb9811874d358b39a3a3a594c0))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Classical.impl_intro_tot; Namespace FStar.Classical
(assert (! 
;; def=FStar.Classical.fsti(69,21-69,25); use=FStar.Classical.fsti(69,40-69,50)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_6980332764c4493a7b0df5c02f7aefbe @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_6980332764c4493a7b0df5c02f7aefbe @x2
@x3)))
:qid FStar.Classical_pre_typing_Tm_arrow_6980332764c4493a7b0df5c02f7aefbe))

:named FStar.Classical_pre_typing_Tm_arrow_6980332764c4493a7b0df5c02f7aefbe))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_6980332764c4493a7b0df5c02f7aefbe
;;; Fact-ids: Name FStar.Classical.impl_intro_tot; Namespace FStar.Classical
(assert (! 
;; def=FStar.Classical.fsti(69,21-69,25); use=FStar.Classical.fsti(69,40-69,50)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_6980332764c4493a7b0df5c02f7aefbe @x1
@x2))
(and 
;; def=FStar.Classical.fsti(69,21-69,25); use=FStar.Classical.fsti(69,40-69,50)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)
(HasType (ApplyTT @x0
@x3)
@x1))
 

:pattern ((ApplyTT @x0
@x3))
:qid FStar.Classical_interpretation_Tm_arrow_6980332764c4493a7b0df5c02f7aefbe.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_6980332764c4493a7b0df5c02f7aefbe @x1
@x2)))
:qid FStar.Classical_interpretation_Tm_arrow_6980332764c4493a7b0df5c02f7aefbe))

:named FStar.Classical_interpretation_Tm_arrow_6980332764c4493a7b0df5c02f7aefbe))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.ST.mref; Namespace FStar.ST
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.ST.contains_pred@tok))
:named @kick_partial_app_ecc2873331cbcc22dfae3795dcb55413))
(push) ;; push{2

; Starting query at Protocol.fst(431,8-469,42)

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Protocol.send_aux (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Protocol.send_aux@tok () Term)
(declare-fun label_85 () Bool)
(declare-fun label_84 () Bool)
(declare-fun label_83 () Bool)
(declare-fun label_82 () Bool)
(declare-fun label_81 () Bool)
(declare-fun label_80 () Bool)
(declare-fun label_79 () Bool)
(declare-fun label_78 () Bool)
(declare-fun label_77 () Bool)
(declare-fun label_76 () Bool)
(declare-fun label_75 () Bool)
(declare-fun label_74 () Bool)
(declare-fun label_73 () Bool)
(declare-fun label_72 () Bool)
(declare-fun label_71 () Bool)
(declare-fun label_70 () Bool)
(declare-fun label_69 () Bool)
(declare-fun label_68 () Bool)
(declare-fun label_67 () Bool)
(declare-fun label_66 () Bool)
(declare-fun label_65 () Bool)
(declare-fun label_64 () Bool)
(declare-fun label_63 () Bool)
(declare-fun label_62 () Bool)
(declare-fun label_61 () Bool)
(declare-fun label_60 () Bool)
(declare-fun label_59 () Bool)
(declare-fun label_58 () Bool)
(declare-fun label_57 () Bool)
(declare-fun label_56 () Bool)
(declare-fun label_55 () Bool)
(declare-fun label_54 () Bool)
(declare-fun label_53 () Bool)
(declare-fun label_52 () Bool)
(declare-fun label_51 () Bool)
(declare-fun label_50 () Bool)
(declare-fun label_49 () Bool)
(declare-fun label_48 () Bool)
(declare-fun label_47 () Bool)
(declare-fun label_46 () Bool)
(declare-fun label_45 () Bool)
(declare-fun label_44 () Bool)
(declare-fun label_43 () Bool)
(declare-fun label_42 () Bool)
(declare-fun label_41 () Bool)
(declare-fun label_40 () Bool)
(declare-fun label_39 () Bool)
(declare-fun label_38 () Bool)
(declare-fun label_37 () Bool)
(declare-fun label_36 () Bool)
(declare-fun label_35 () Bool)
(declare-fun label_34 () Bool)
(declare-fun label_33 () Bool)
(declare-fun label_32 () Bool)
(declare-fun label_31 () Bool)
(declare-fun label_30 () Bool)
(declare-fun label_29 () Bool)
(declare-fun label_28 () Bool)
(declare-fun label_27 () Bool)
(declare-fun label_26 () Bool)
(declare-fun label_25 () Bool)
(declare-fun label_24 () Bool)
(declare-fun label_23 () Bool)
(declare-fun label_22 () Bool)
(declare-fun label_21 () Bool)
(declare-fun label_20 () Bool)
(declare-fun label_19 () Bool)
(declare-fun label_18 () Bool)
(declare-fun label_17 () Bool)
(declare-fun label_16 () Bool)
(declare-fun label_15 () Bool)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_377d0118686d11596ae874abd2ea7677 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(414,10-414,98); use=Protocol.fst(430,8-430,16)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_377d0118686d11596ae874abd2ea7677 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_377d0118686d11596ae874abd2ea7677 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_377d0118686d11596ae874abd2ea7677))

:named refinement_kinding_Tm_refine_377d0118686d11596ae874abd2ea7677))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(414,10-414,98); use=Protocol.fst(430,8-430,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_377d0118686d11596ae874abd2ea7677 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Protocol.connection)

;; def=Protocol.fst(414,24-414,32); use=Protocol.fst(430,8-430,16)
(BoxBool_proj_0 (Protocol.sender @x1))


;; def=Protocol.fst(414,36-414,96); use=Protocol.fst(430,8-430,16)
(Valid 
;; def=Protocol.fst(414,36-414,96); use=Protocol.fst(430,8-430,16)
(FStar.Set.disjoint Prims.nat
(Protocol.connection_footprint @x1)
(MonotonicArray.array_footprint Protocol.byte
@x2
@x3))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_377d0118686d11596ae874abd2ea7677 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_377d0118686d11596ae874abd2ea7677))

:named refinement_interpretation_Tm_refine_377d0118686d11596ae874abd2ea7677))
;;;;;;;;;;;;;;;;haseq for Tm_refine_377d0118686d11596ae874abd2ea7677
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(414,10-414,98); use=Protocol.fst(430,8-430,16)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_377d0118686d11596ae874abd2ea7677 @x0
@x1)))
(Valid (Prims.hasEq Protocol.connection)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_377d0118686d11596ae874abd2ea7677 @x0
@x1))))
:qid haseqTm_refine_377d0118686d11596ae874abd2ea7677))

:named haseqTm_refine_377d0118686d11596ae874abd2ea7677))



(declare-fun Tm_refine_2f2e27baf4b7704087f9df5373c6260b (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=MonotonicArray.fsti(289,10-289,69); use=Protocol.fst(450,29-450,50)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_2f2e27baf4b7704087f9df5373c6260b @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_2f2e27baf4b7704087f9df5373c6260b @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_2f2e27baf4b7704087f9df5373c6260b))

:named refinement_kinding_Tm_refine_2f2e27baf4b7704087f9df5373c6260b))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=MonotonicArray.fsti(289,10-289,69); use=Protocol.fst(450,29-450,50)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_2f2e27baf4b7704087f9df5373c6260b @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=MonotonicArray.fsti(289,17-289,23); use=Protocol.fst(450,29-450,50)
(>= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 @x2))


;; def=MonotonicArray.fsti(289,27-289,33); use=Protocol.fst(450,29-450,50)
(<= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 @x3))


;; def=MonotonicArray.fsti(289,37-289,67); use=Protocol.fst(450,29-450,50)
(Valid 
;; def=MonotonicArray.fsti(289,37-289,67); use=Protocol.fst(450,29-450,50)
(MonotonicArray.init_arr_in_heap_i_j Protocol.byte
@x3
@x4
@x5
@x2
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_2f2e27baf4b7704087f9df5373c6260b @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_2f2e27baf4b7704087f9df5373c6260b))

:named refinement_interpretation_Tm_refine_2f2e27baf4b7704087f9df5373c6260b))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2f2e27baf4b7704087f9df5373c6260b
;;; Fact-ids: 
(assert (! 
;; def=MonotonicArray.fsti(289,10-289,69); use=Protocol.fst(450,29-450,50)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_2f2e27baf4b7704087f9df5373c6260b @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_2f2e27baf4b7704087f9df5373c6260b @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_2f2e27baf4b7704087f9df5373c6260b))

:named haseqTm_refine_2f2e27baf4b7704087f9df5373c6260b))
(declare-fun Tm_refine_2fb9520fc69973bb980150207c8c3ef0 (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(368,45-368,83); use=Protocol.fst(453,12-453,22)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_2fb9520fc69973bb980150207c8c3ef0 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_2fb9520fc69973bb980150207c8c3ef0 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_2fb9520fc69973bb980150207c8c3ef0))

:named refinement_kinding_Tm_refine_2fb9520fc69973bb980150207c8c3ef0))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(368,45-368,83); use=Protocol.fst(453,12-453,22)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_2fb9520fc69973bb980150207c8c3ef0 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=Protocol.fst(368,53-368,61); use=Protocol.fst(453,12-453,22)
(<= (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x1))


;; def=Protocol.fst(368,65-368,81); use=Protocol.fst(453,12-453,22)
(<= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (FStar.Seq.Base.length Protocol.message
(Protocol.log @x3
@x4))))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_2fb9520fc69973bb980150207c8c3ef0 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_2fb9520fc69973bb980150207c8c3ef0))

:named refinement_interpretation_Tm_refine_2fb9520fc69973bb980150207c8c3ef0))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2fb9520fc69973bb980150207c8c3ef0
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(368,45-368,83); use=Protocol.fst(453,12-453,22)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_2fb9520fc69973bb980150207c8c3ef0 @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_2fb9520fc69973bb980150207c8c3ef0 @x0
@x1
@x2))))
:qid haseqTm_refine_2fb9520fc69973bb980150207c8c3ef0))

:named haseqTm_refine_2fb9520fc69973bb980150207c8c3ef0))



(declare-fun Tm_refine_e715f3c5973534a16bc883ef65d67e29 (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=MonotonicArray.fsti(289,10-289,69); use=Protocol.fst(461,21-461,42)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_e715f3c5973534a16bc883ef65d67e29 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_e715f3c5973534a16bc883ef65d67e29 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_e715f3c5973534a16bc883ef65d67e29))

:named refinement_kinding_Tm_refine_e715f3c5973534a16bc883ef65d67e29))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=MonotonicArray.fsti(289,10-289,69); use=Protocol.fst(461,21-461,42)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_e715f3c5973534a16bc883ef65d67e29 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=MonotonicArray.fsti(289,17-289,23); use=Protocol.fst(461,21-461,42)
(>= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))


;; def=MonotonicArray.fsti(289,27-289,33); use=Protocol.fst(461,21-461,42)
(<= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 @x2))


;; def=MonotonicArray.fsti(289,37-289,67); use=Protocol.fst(461,21-461,42)
(Valid 
;; def=MonotonicArray.fsti(289,37-289,67); use=Protocol.fst(461,21-461,42)
(MonotonicArray.init_arr_in_heap_i_j Protocol.byte
@x2
@x3
@x4
(BoxInt 0)
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_e715f3c5973534a16bc883ef65d67e29 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_e715f3c5973534a16bc883ef65d67e29))

:named refinement_interpretation_Tm_refine_e715f3c5973534a16bc883ef65d67e29))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e715f3c5973534a16bc883ef65d67e29
;;; Fact-ids: 
(assert (! 
;; def=MonotonicArray.fsti(289,10-289,69); use=Protocol.fst(461,21-461,42)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_e715f3c5973534a16bc883ef65d67e29 @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_e715f3c5973534a16bc883ef65d67e29 @x0
@x1
@x2))))
:qid haseqTm_refine_e715f3c5973534a16bc883ef65d67e29))

:named haseqTm_refine_e715f3c5973534a16bc883ef65d67e29))
(declare-fun Tm_refine_3f488ea3a355f76c02bba79a4548889c (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=Protocol.fst(464,39-464,44)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_3f488ea3a355f76c02bba79a4548889c @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_3f488ea3a355f76c02bba79a4548889c @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_3f488ea3a355f76c02bba79a4548889c))

:named refinement_kinding_Tm_refine_3f488ea3a355f76c02bba79a4548889c))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=Protocol.fst(464,39-464,44)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_3f488ea3a355f76c02bba79a4548889c @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.nat)
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x2
@x1))
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x1
(FStar.Seq.Base.length Protocol.message
(Protocol.log @x3
@x4))))))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_3f488ea3a355f76c02bba79a4548889c @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_3f488ea3a355f76c02bba79a4548889c))

:named refinement_interpretation_Tm_refine_3f488ea3a355f76c02bba79a4548889c))
;;;;;;;;;;;;;;;;haseq for Tm_refine_3f488ea3a355f76c02bba79a4548889c
;;; Fact-ids: 
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=Protocol.fst(464,39-464,44)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_3f488ea3a355f76c02bba79a4548889c @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_3f488ea3a355f76c02bba79a4548889c @x0
@x1
@x2))))
:qid haseqTm_refine_3f488ea3a355f76c02bba79a4548889c))

:named haseqTm_refine_3f488ea3a355f76c02bba79a4548889c))




;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: 
(assert (! (Valid (ApplyTT __uu__PartialApp
Protocol.sent_bytes@tok))
:named @kick_partial_app_09d2656020e371bea4bd24f5fe33a2b3))



(declare-fun Tm_refine_58fa7036de540210b95296146042b45b (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.ST.fst(75,66-75,73); use=Protocol.fst(469,9-469,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (HasType (Tm_refine_58fa7036de540210b95296146042b45b @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type)
 

:pattern ((HasType (Tm_refine_58fa7036de540210b95296146042b45b @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type))
:qid refinement_kinding_Tm_refine_58fa7036de540210b95296146042b45b))

:named refinement_kinding_Tm_refine_58fa7036de540210b95296146042b45b))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.ST.fst(75,66-75,73); use=Protocol.fst(469,9-469,17)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_58fa7036de540210b95296146042b45b @x2
@x3
@x4
@x5
@x6
@x7
@x8))
(and (HasTypeFuel @u0
@x1
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(419,22-419,52); use=Protocol.fst(469,9-469,17)
(Valid 
;; def=Protocol.fst(419,22-419,52); use=Protocol.fst(469,9-469,17)
(Protocol.fully_initialized_in Protocol.byte
@x2
@x3
@x4)
)


;; def=Protocol.fst(420,22-420,44); use=Protocol.fst(469,9-469,17)
(Valid 
;; def=Protocol.fst(420,22-420,44); use=Protocol.fst(469,9-469,17)
(Protocol.live_connection @x4
@x5)
)


;; def=Protocol.fst(421,22-421,38); use=Protocol.fst(469,9-469,17)
(<= (BoxInt_proj_0 @x6)
(BoxInt_proj_0 (Protocol.ctr @x5
@x4)))


;; def=Protocol.fst(422,22-422,91); use=Protocol.fst(469,9-469,17)
(Valid 
;; def=Protocol.fst(422,22-422,91); use=Protocol.fst(469,9-469,17)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Protocol.sent_bytes@tok
(MonotonicArray.as_initialized_subseq Protocol.byte
@x2
@x3
@x4
(BoxInt 0)
(Prims.op_Addition @x7
@x8)))
@x5)
@x6)
(Protocol.ctr @x5
@x4))
@x4)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_58fa7036de540210b95296146042b45b @x2
@x3
@x4
@x5
@x6
@x7
@x8)))
:qid refinement_interpretation_Tm_refine_58fa7036de540210b95296146042b45b))

:named refinement_interpretation_Tm_refine_58fa7036de540210b95296146042b45b))
;;;;;;;;;;;;;;;;haseq for Tm_refine_58fa7036de540210b95296146042b45b
;;; Fact-ids: 
(assert (! 
;; def=FStar.ST.fst(75,66-75,73); use=Protocol.fst(469,9-469,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_58fa7036de540210b95296146042b45b @x0
@x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Prims.hasEq FStar.Monotonic.Heap.heap)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_58fa7036de540210b95296146042b45b @x0
@x1
@x2
@x3
@x4
@x5
@x6))))
:qid haseqTm_refine_58fa7036de540210b95296146042b45b))

:named haseqTm_refine_58fa7036de540210b95296146042b45b))





(declare-fun Tm_refine_9c53eb855ade94a7b7c9e39b74b4706d (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.ST.fst(75,66-75,73); use=Protocol.fst(431,8-469,42)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_refine_9c53eb855ade94a7b7c9e39b74b4706d @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type)
 

:pattern ((HasType (Tm_refine_9c53eb855ade94a7b7c9e39b74b4706d @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
:qid refinement_kinding_Tm_refine_9c53eb855ade94a7b7c9e39b74b4706d))

:named refinement_kinding_Tm_refine_9c53eb855ade94a7b7c9e39b74b4706d))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.ST.fst(75,66-75,73); use=Protocol.fst(431,8-469,42)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_9c53eb855ade94a7b7c9e39b74b4706d @x2
@x3
@x4
@x5
@x6
@x7))
(and (HasTypeFuel @u0
@x1
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(419,22-419,52); use=Protocol.fst(431,8-469,42)
(Valid 
;; def=Protocol.fst(419,22-419,52); use=Protocol.fst(431,8-469,42)
(Protocol.fully_initialized_in Protocol.byte
@x2
@x3
@x4)
)


;; def=Protocol.fst(420,22-420,44); use=Protocol.fst(431,8-469,42)
(Valid 
;; def=Protocol.fst(420,22-420,44); use=Protocol.fst(431,8-469,42)
(Protocol.live_connection @x4
@x5)
)


;; def=Protocol.fst(421,22-421,38); use=Protocol.fst(431,8-469,42)
(<= (BoxInt_proj_0 @x6)
(BoxInt_proj_0 (Protocol.ctr @x5
@x4)))


;; def=Protocol.fst(422,22-422,91); use=Protocol.fst(431,8-469,42)
(Valid 
;; def=Protocol.fst(422,22-422,91); use=Protocol.fst(431,8-469,42)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Protocol.sent_bytes@tok
(MonotonicArray.as_initialized_subseq Protocol.byte
@x2
@x3
@x4
(BoxInt 0)
@x7))
@x5)
@x6)
(Protocol.ctr @x5
@x4))
@x4)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_9c53eb855ade94a7b7c9e39b74b4706d @x2
@x3
@x4
@x5
@x6
@x7)))
:qid refinement_interpretation_Tm_refine_9c53eb855ade94a7b7c9e39b74b4706d))

:named refinement_interpretation_Tm_refine_9c53eb855ade94a7b7c9e39b74b4706d))
;;;;;;;;;;;;;;;;haseq for Tm_refine_9c53eb855ade94a7b7c9e39b74b4706d
;;; Fact-ids: 
(assert (! 
;; def=FStar.ST.fst(75,66-75,73); use=Protocol.fst(431,8-469,42)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_9c53eb855ade94a7b7c9e39b74b4706d @x0
@x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.hasEq FStar.Monotonic.Heap.heap)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_9c53eb855ade94a7b7c9e39b74b4706d @x0
@x1
@x2
@x3
@x4
@x5))))
:qid haseqTm_refine_9c53eb855ade94a7b7c9e39b74b4706d))

:named haseqTm_refine_9c53eb855ade94a7b7c9e39b74b4706d))


; Encoding query formula : forall (n: Prims.nat)
;   (file: Protocol.iarray Protocol.byte n)
;   (c:
;   Protocol.connection
;     { Protocol.sender c /\
;       FStar.Set.disjoint (Protocol.connection_footprint c) (MonotonicArray.array_footprint file) })
;   (from: Prims.nat)
;   (pos: Prims.nat{pos <= n}).
;   (*  - Could not prove post-condition
; *)
;   forall (p: FStar.Pervasives.st_post_h FStar.Monotonic.Heap.heap Prims.unit)
;     (h: FStar.Monotonic.Heap.heap).
;     Protocol.fully_initialized_in file h /\ Protocol.live_connection h c /\ from <= Protocol.ctr c h /\
;     Protocol.sent_bytes (MonotonicArray.as_initialized_subseq file h 0 pos)
;       c
;       from
;       (Protocol.ctr c h)
;       h /\
;     (forall (a: Prims.unit)
;         (h1:
;         _:
;         FStar.Monotonic.Heap.heap
;           { Protocol.fully_initialized_in file h /\ Protocol.live_connection h c /\
;             from <= Protocol.ctr c h /\
;             Protocol.sent_bytes (MonotonicArray.as_initialized_subseq file h 0 pos)
;               c
;               from
;               (Protocol.ctr c h)
;               h }).
;         FStar.Monotonic.Heap.modifies (Protocol.connection_footprint c) h h1 /\
;         Protocol.live_connection h1 c /\ from <= Protocol.ctr c h1 /\
;         (forall (k: Prims.nat).
;             k < n ==> Some? (FStar.Seq.Base.index (MonotonicArray.as_seq file h) k)) /\
;         Protocol.sent_bytes (MonotonicArray.as_initialized_seq file h) c from (Protocol.ctr c h1) h1 ==>
;         p a h1) ==>
;     Prims.hasEq Prims.nat /\
;     (forall (any_result: Type0).
;         Prims.nat == any_result ==>
;         (forall (any_result: Prims.bool).
;             pos = n == any_result ==>
;             (forall (k: FStar.Pervasives.st_post_h FStar.Monotonic.Heap.heap Prims.unit).
;                 (forall (x: Prims.unit) (h: FStar.Monotonic.Heap.heap).
;                     {:pattern Prims.guard_free (k x h)}
;                     p x h ==> k x h) ==>
;                 (pos = n == true ==> (forall (any_result: Prims.unit). k any_result h)) /\
;                 (~(pos = n = true) ==>
;                   (forall (b: Prims.bool).
;                       pos = n == b ==>
;                       n - pos >= 0 /\
;                       (forall (any_result: MonotonicArray.t Protocol.byte (n - pos)).
;                           MonotonicArray.suffix file pos == any_result ==>
;                           (FStar.ST.witnessed (MonotonicArray.mutable_pred file) /\
;                             MonotonicArray.all_init file ==>
;                             MonotonicArray.all_init file) /\
;                           (forall (any_result: Protocol.iarray Protocol.byte n).
;                               file == any_result ==>
;                               n - pos >= 0 /\ pos + (n - pos) <= n /\
;                               (forall (return_val: len: Prims.nat{pos + len <= n}).
;                                   return_val == n - pos ==>
;                                   (forall (pure_result: Prims.unit).
;                                       MonotonicArray.all_init (MonotonicArray.sub file pos (n - pos)
;                                         ) ==>
;                                       (forall (a: FStar.Monotonic.Heap.heap)
;                                           (h1: FStar.Monotonic.Heap.heap).
;                                           h == h1 /\ a == h1 ==>
;                                           (forall (a: FStar.Seq.Base.seq Protocol.byte)
;                                               (h1: FStar.Monotonic.Heap.heap).
;                                               h1 == h1 /\
;                                               (forall (k: Prims.nat).
;                                                   k < n ==>
;                                                   Some? (FStar.Seq.Base.index (MonotonicArray.as_seq
;                                                             file
;                                                             h1)
;                                                         k)) /\
;                                               a == MonotonicArray.as_initialized_subseq file h1 0 n /\
;                                               a == MonotonicArray.as_initialized_seq file h1 ==>
;                                               Prims.auto_squash (Protocol.live_connection a c) /\
;                                               (forall (any_result: FStar.Monotonic.Heap.heap).
;                                                   a == any_result ==>
;                                                   (forall (any_result:
;                                                       FStar.Seq.Base.seq Protocol.message).
;                                                       Protocol.log c a == any_result ==>
;                                                       n - pos >= 0 /\
;                                                       (forall (return_val: Prims.nat).
;                                                           return_val == n - pos ==>
;                                                           FStar.ST.witnessed (MonotonicArray.mutable_pred
;                                                                 (MonotonicArray.suffix file pos)) /\
;                                                           MonotonicArray.all_init (MonotonicArray.suffix
;                                                                 file
;                                                                 pos) /\
;                                                           (forall (any_result:
;                                                               MonotonicArray.t Protocol.byte
;                                                                 (n - pos)).
;                                                               MonotonicArray.suffix file pos ==
;                                                               any_result ==>
;                                                               (Protocol.sender c /\
;                                                                 FStar.Set.disjoint (Protocol.connection_footprint
;                                                                       c)
;                                                                   (MonotonicArray.array_footprint file
;                                                                     ) ==>
;                                                                 Protocol.sender c) /\
;                                                               (forall (any_result:
;                                                                   c:
;                                                                   Protocol.connection
;                                                                     { Protocol.sender c /\
;                                                                       FStar.Set.disjoint (Protocol.connection_footprint
;                                                                             c)
;                                                                         (MonotonicArray.array_footprint
;                                                                             file) }).
;                                                                   c == any_result ==>
;                                                                   (forall (a: Prims.nat)
;                                                                       (h1:
;                                                                       FStar.Monotonic.Heap.heap).
;                                                                       FStar.Monotonic.Heap.modifies (
;                                                                           Protocol.connection_footprint
;                                                                             c)
;                                                                         h1
;                                                                         h1 /\
;                                                                       Protocol.live_connection h1 c /\
;                                                                       Protocol.live_connection h1 c /\
;                                                                       a <=
;                                                                       Prims.min (n - pos)
;                                                                         Protocol.fragment_size /\
;                                                                       Protocol.ctr c h1 =
;                                                                       Protocol.ctr c h1 + 1 /\
;                                                                       (forall (i: Prims.nat).
;                                                                           i < n - pos ==>
;                                                                           Some? (FStar.Seq.Base.index
;                                                                                 (MonotonicArray.as_seq
;                                                                                     (MonotonicArray.suffix
;                                                                                         file
;                                                                                         pos)
;                                                                                     h1)
;                                                                                 i)) /\
;                                                                       Protocol.log c h1 ==
;                                                                       FStar.Seq.Properties.snoc (Protocol.log
;                                                                             c
;                                                                             h1)
;                                                                         (MonotonicArray.as_initialized_subseq
;                                                                             (MonotonicArray.suffix file
;                                                                                 pos)
;                                                                             h1
;                                                                             0
;                                                                             a) ==>
;                                                                       (forall (a:
;                                                                           FStar.Monotonic.Heap.heap)
;                                                                           (h1:
;                                                                           FStar.Monotonic.Heap.heap)
;                                                                         .
;                                                                           h1 == h1 /\ a == h1 ==>
;                                                                           Prims.auto_squash (Protocol.live_connection
;                                                                                 a
;                                                                                 c) /\
;                                                                           (forall (any_result:
;                                                                               FStar.Monotonic.Heap.heap)
;                                                                             .
;                                                                               a == any_result ==>
;                                                                               (forall (any_result:
;                                                                                   FStar.Seq.Base.seq
;                                                                                     Protocol.message)
;                                                                                 .
;                                                                                   Protocol.log c a ==
;                                                                                   any_result ==>
;                                                                                   (forall (a:
;                                                                                       FStar.Seq.Base.seq
;                                                                                         Protocol.byte
;                                                                                       )
;                                                                                       (h1:
;                                                                                       FStar.Monotonic.Heap.heap)
;                                                                                     .
;                                                                                       h1 == h1 /\
;                                                                                       (forall (k:
;                                                                                           Prims.nat)
;                                                                                         .
;                                                                                           k < n ==>
;                                                                                           Some? (FStar.Seq.Base.index
;                                                                                                 (MonotonicArray.as_seq
;                                                                                                     file
;                                                                                                     h1
;                                                                                                   )
;                                                                                                 k)) /\
;                                                                                       a ==
;                                                                                       MonotonicArray.as_initialized_subseq
;                                                                                         file
;                                                                                         h1
;                                                                                         0
;                                                                                         n /\
;                                                                                       a ==
;                                                                                       MonotonicArray.as_initialized_seq
;                                                                                         file
;                                                                                         h1 ==>
;                                                                                       a == a /\
;                                                                                       (forall (pure_result:
;                                                                                           Prims.unit)
;                                                                                         .
;                                                                                           a == a ==>
;                                                                                           (forall (a:
;                                                                                               Prims.unit)
;                                                                                               (h1:
;                                                                                               FStar.Monotonic.Heap.heap)
;                                                                                             .
;                                                                                               h1 ==
;                                                                                               h1 /\
;                                                                                               MonotonicArray.contains_array
;                                                                                                 h1
;                                                                                                 file ==>
;                                                                                               Prims.auto_squash
;                                                                                                 (Protocol.live_connection
;                                                                                                     a
;                                                                                                     c
;                                                                                                   ) /\
;                                                                                               (forall
;                                                                                                   (any_result:
;                                                                                                   FStar.Monotonic.Heap.heap)
;                                                                                                 .
;                                                                                                   a ==
;                                                                                                   any_result ==>
;                                                                                                   (forall
;                                                                                                       (any_result:
;                                                                                                       Prims.nat)
;                                                                                                     .
;                                                                                                       Protocol.ctr
;                                                                                                         c
;                                                                                                         a
;                                                                                                        ==
;                                                                                                       any_result ==>
;                                                                                                       (
;                                                                                                         forall
;                                                                                                           (return_val:
;                                                                                                           Prims.nat)
;                                                                                                         .
;                                                                                                           return_val ==
;                                                                                                           Protocol.ctr
;                                                                                                             c
;                                                                                                             a
;                                                                                                            ==>
;                                                                                                           Protocol.ctr
;                                                                                                             c
;                                                                                                             a
;                                                                                                            ==
;                                                                                                           return_val ==>
;                                                                                                           (
;                                                                                                             forall
;                                                                                                               (any_result:
;                                                                                                               Prims.bool)
;                                                                                                             .
;                                                                                                               from <=
;                                                                                                               Protocol.ctr
;                                                                                                                 c
;                                                                                                                 a
;                                                                                                                ==
;                                                                                                               any_result ==>
;                                                                                                               (
;                                                                                                                 forall
;                                                                                                                   (any_result:
;                                                                                                                   Prims.logical)
;                                                                                                                 .
;                                                                                                                   from <=
;                                                                                                                   Protocol.ctr
;                                                                                                                     c
;                                                                                                                     a
;                                                                                                                    ==
;                                                                                                                   any_result ==>
;                                                                                                                   from <=
;                                                                                                                   Protocol.ctr
;                                                                                                                     c
;                                                                                                                     a
;                                                                                                                    /\
;                                                                                                                   (
;                                                                                                                     forall
;                                                                                                                       (pure_result:
;                                                                                                                       Prims.unit)
;                                                                                                                     .
;                                                                                                                       from <=
;                                                                                                                       Protocol.ctr
;                                                                                                                         c
;                                                                                                                         a
;                                                                                                                        ==>
;                                                                                                                       Protocol.fully_initialized_in
;                                                                                                                         file
;                                                                                                                         a
;                                                                                                                        /\
;                                                                                                                       (
;                                                                                                                         forall
;                                                                                                                           (pure_result:
;                                                                                                                           Prims.unit)
;                                                                                                                         .
;                                                                                                                           Protocol.fully_initialized_in
;                                                                                                                             file
;                                                                                                                             a
;                                                                                                                            ==>
;                                                                                                                           Protocol.live_connection
;                                                                                                                             a
;                                                                                                                             c
;                                                                                                                            /\
;                                                                                                                           (
;                                                                                                                             forall
;                                                                                                                               (pure_result:
;                                                                                                                               Prims.unit)
;                                                                                                                             .
;                                                                                                                               Protocol.live_connection
;                                                                                                                                 a
;                                                                                                                                 c
;                                                                                                                                ==>
;                                                                                                                               n -
;                                                                                                                               pos >=
;                                                                                                                               0 /\
;                                                                                                                               (
;                                                                                                                                 forall
;                                                                                                                                   (return_val:
;                                                                                                                                   Prims.nat)
;                                                                                                                                 .
;                                                                                                                                   return_val ==
;                                                                                                                                   n -
;                                                                                                                                   pos ==>
;                                                                                                                                   a >=
;                                                                                                                                   0 /\
;                                                                                                                                   a <=
;                                                                                                                                   n -
;                                                                                                                                   pos /\
;                                                                                                                                   MonotonicArray.init_arr_in_heap_i_j
;                                                                                                                                     (
;                                                                                                                                       MonotonicArray.suffix
;                                                                                                                                         file
;                                                                                                                                         pos
; 
;                                                                                                                                     )
;                                                                                                                                     a
;                                                                                                                                     0
;                                                                                                                                     a
;                                                                                                                                    /\
;                                                                                                                                   (
;                                                                                                                                     forall
;                                                                                                                                       (any_result:
;                                                                                                                                       Prims.nat)
;                                                                                                                                     .
;                                                                                                                                       a ==
;                                                                                                                                       any_result ==>
;                                                                                                                                       (
;                                                                                                                                         forall
;                                                                                                                                           (any_result:
;                                                                                                                                           FStar.Seq.Base.seq
;                                                                                                                                             Protocol.byte
;                                                                                                                                           )
;                                                                                                                                         .
;                                                                                                                                           MonotonicArray.as_initialized_subseq
;                                                                                                                                             (
;                                                                                                                                               MonotonicArray.suffix
;                                                                                                                                                 file
;                                                                                                                                                 pos
; 
;                                                                                                                                             )
;                                                                                                                                             a
;                                                                                                                                             0
;                                                                                                                                             a
;                                                                                                                                            ==
;                                                                                                                                           any_result ==>
;                                                                                                                                           pos +
;                                                                                                                                           a >=
;                                                                                                                                           0 /\
;                                                                                                                                           (
;                                                                                                                                             pos +
;                                                                                                                                             a >=
;                                                                                                                                             pos
;                                                                                                                                           ) /\
;                                                                                                                                           (
;                                                                                                                                             pos +
;                                                                                                                                             a <=
;                                                                                                                                             n
;                                                                                                                                           ) /\
;                                                                                                                                           MonotonicArray.init_arr_in_heap_i_j
;                                                                                                                                             file
;                                                                                                                                             a
;                                                                                                                                             pos
;                                                                                                                                             (
;                                                                                                                                               pos +
;                                                                                                                                               a
;                                                                                                                                             )
;                                                                                                                                            /\
;                                                                                                                                           (
;                                                                                                                                             forall
;                                                                                                                                               (return_val:
;                                                                                                                                               j:
;                                                                                                                                               Prims.nat
;                                                                                                                                                 {
;                                                                                                                                                   j >=
;                                                                                                                                                   pos /\
;                                                                                                                                                   j <=
;                                                                                                                                                   n /\
;                                                                                                                                                   MonotonicArray.init_arr_in_heap_i_j
;                                                                                                                                                     file
;                                                                                                                                                     a
;                                                                                                                                                     pos
;                                                                                                                                                     j
; 
;                                                                                                                                                 })
;                                                                                                                                             .
;                                                                                                                                               return_val ==
;                                                                                                                                               pos +
;                                                                                                                                               a ==>
;                                                                                                                                               (
;                                                                                                                                                 forall
;                                                                                                                                                   (any_result:
;                                                                                                                                                   FStar.Seq.Base.seq
;                                                                                                                                                     Protocol.byte
;                                                                                                                                                   )
;                                                                                                                                                 .
;                                                                                                                                                   MonotonicArray.as_initialized_subseq
;                                                                                                                                                     file
;                                                                                                                                                     a
;                                                                                                                                                     pos
;                                                                                                                                                     (
;                                                                                                                                                       pos +
;                                                                                                                                                       a
;                                                                                                                                                     )
;                                                                                                                                                    ==
;                                                                                                                                                   any_result ==>
;                                                                                                                                                   FStar.Seq.Base.length
;                                                                                                                                                     (
;                                                                                                                                                       MonotonicArray.as_initialized_subseq
;                                                                                                                                                         (
;                                                                                                                                                           MonotonicArray.suffix
;                                                                                                                                                             file
;                                                                                                                                                             pos
; 
;                                                                                                                                                         )
;                                                                                                                                                         a
;                                                                                                                                                         0
;                                                                                                                                                         a
; 
;                                                                                                                                                     )
;                                                                                                                                                    <=
;                                                                                                                                                   Protocol.fragment_size /\
;                                                                                                                                                   (
;                                                                                                                                                     forall
;                                                                                                                                                       (any_result:
;                                                                                                                                                       FStar.Seq.Base.seq
;                                                                                                                                                         Protocol.byte
;                                                                                                                                                       )
;                                                                                                                                                     .
;                                                                                                                                                       MonotonicArray.as_initialized_subseq
;                                                                                                                                                         (
;                                                                                                                                                           MonotonicArray.suffix
;                                                                                                                                                             file
;                                                                                                                                                             pos
; 
;                                                                                                                                                         )
;                                                                                                                                                         a
;                                                                                                                                                         0
;                                                                                                                                                         a
;                                                                                                                                                        ==
;                                                                                                                                                       any_result ==>
;                                                                                                                                                       (
;                                                                                                                                                         forall
;                                                                                                                                                           (any_result:
;                                                                                                                                                           FStar.Seq.Base.seq
;                                                                                                                                                             Protocol.message
;                                                                                                                                                           )
;                                                                                                                                                         .
;                                                                                                                                                           FStar.Seq.Properties.snoc
;                                                                                                                                                             (
;                                                                                                                                                               Protocol.log
;                                                                                                                                                                 c
;                                                                                                                                                                 a
; 
;                                                                                                                                                             )
;                                                                                                                                                             (
;                                                                                                                                                               MonotonicArray.as_initialized_subseq
;                                                                                                                                                                 (
;                                                                                                                                                                   MonotonicArray.suffix
;                                                                                                                                                                     file
;                                                                                                                                                                     pos
; 
;                                                                                                                                                                 )
;                                                                                                                                                                 a
;                                                                                                                                                                 0
;                                                                                                                                                                 a
; 
;                                                                                                                                                             )
;                                                                                                                                                            ==
;                                                                                                                                                           any_result ==>
;                                                                                                                                                           (
;                                                                                                                                                             forall
;                                                                                                                                                               (any_result:
;                                                                                                                                                               Prims.logical)
;                                                                                                                                                             .
;                                                                                                                                                               Protocol.log
;                                                                                                                                                                 c
;                                                                                                                                                                 a
;                                                                                                                                                                ==
;                                                                                                                                                               FStar.Seq.Properties.snoc
;                                                                                                                                                                 (
;                                                                                                                                                                   Protocol.log
;                                                                                                                                                                     c
;                                                                                                                                                                     a
; 
;                                                                                                                                                                 )
;                                                                                                                                                                 (
;                                                                                                                                                                   MonotonicArray.as_initialized_subseq
;                                                                                                                                                                     (
;                                                                                                                                                                       MonotonicArray.suffix
;                                                                                                                                                                         file
;                                                                                                                                                                         pos
; 
;                                                                                                                                                                     )
;                                                                                                                                                                     a
;                                                                                                                                                                     0
;                                                                                                                                                                     a
; 
;                                                                                                                                                                 )
;                                                                                                                                                                ==
;                                                                                                                                                               any_result ==>
;                                                                                                                                                               Protocol.log
;                                                                                                                                                                 c
;                                                                                                                                                                 a
;                                                                                                                                                                ==
;                                                                                                                                                               FStar.Seq.Properties.snoc
;                                                                                                                                                                 (
;                                                                                                                                                                   Protocol.log
;                                                                                                                                                                     c
;                                                                                                                                                                     a
; 
;                                                                                                                                                                 )
;                                                                                                                                                                 (
;                                                                                                                                                                   MonotonicArray.as_initialized_subseq
;                                                                                                                                                                     (
;                                                                                                                                                                       MonotonicArray.suffix
;                                                                                                                                                                         file
;                                                                                                                                                                         pos
; 
;                                                                                                                                                                     )
;                                                                                                                                                                     a
;                                                                                                                                                                     0
;                                                                                                                                                                     a
; 
;                                                                                                                                                                 )
;                                                                                                                                                                /\
;                                                                                                                                                               (
;                                                                                                                                                                 forall
;                                                                                                                                                                   (pure_result:
;                                                                                                                                                                   Prims.unit)
;                                                                                                                                                                 .
;                                                                                                                                                                   Protocol.log
;                                                                                                                                                                     c
;                                                                                                                                                                     a
;                                                                                                                                                                    ==
;                                                                                                                                                                   FStar.Seq.Properties.snoc
;                                                                                                                                                                     (
;                                                                                                                                                                       Protocol.log
;                                                                                                                                                                         c
;                                                                                                                                                                         a
; 
;                                                                                                                                                                     )
;                                                                                                                                                                     (
;                                                                                                                                                                       MonotonicArray.as_initialized_subseq
;                                                                                                                                                                         (
;                                                                                                                                                                           MonotonicArray.suffix
;                                                                                                                                                                             file
;                                                                                                                                                                             pos
; 
;                                                                                                                                                                         )
;                                                                                                                                                                         a
;                                                                                                                                                                         0
;                                                                                                                                                                         a
; 
;                                                                                                                                                                     )
;                                                                                                                                                                    ==>
;                                                                                                                                                                   pos +
;                                                                                                                                                                   a <=
;                                                                                                                                                                   n /\
;                                                                                                                                                                   (
;                                                                                                                                                                     forall
;                                                                                                                                                                       (any_result:
;                                                                                                                                                                       Prims.nat)
;                                                                                                                                                                     .
;                                                                                                                                                                       a ==
;                                                                                                                                                                       any_result ==>
;                                                                                                                                                                       Prims.auto_squash
;                                                                                                                                                                         (
;                                                                                                                                                                           Protocol.fully_initialized_in
;                                                                                                                                                                             file
;                                                                                                                                                                             a
; 
;                                                                                                                                                                         )
;                                                                                                                                                                        /\
;                                                                                                                                                                       (
;                                                                                                                                                                         forall
;                                                                                                                                                                           (any_result:
;                                                                                                                                                                           FStar.Monotonic.Heap.heap)
;                                                                                                                                                                         .
;                                                                                                                                                                           a ==
;                                                                                                                                                                           any_result ==>
;                                                                                                                                                                           (
;                                                                                                                                                                             forall
;                                                                                                                                                                               (pure_result:
;                                                                                                                                                                               Prims.unit)
;                                                                                                                                                                             .
;                                                                                                                                                                               MonotonicArray.as_initialized_subseq
;                                                                                                                                                                                 (
;                                                                                                                                                                                   MonotonicArray.suffix
;                                                                                                                                                                                     file
;                                                                                                                                                                                     pos
; 
;                                                                                                                                                                                 )
;                                                                                                                                                                                 a
;                                                                                                                                                                                 0
;                                                                                                                                                                                 a
;                                                                                                                                                                                ==
;                                                                                                                                                                               MonotonicArray.as_initialized_subseq
;                                                                                                                                                                                 file
;                                                                                                                                                                                 a
;                                                                                                                                                                                 pos
;                                                                                                                                                                                 (
;                                                                                                                                                                                   pos +
;                                                                                                                                                                                   a
;                                                                                                                                                                                 )
;                                                                                                                                                                                ==>
;                                                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                                                 (
;                                                                                                                                                                                   MonotonicArray.as_initialized_subseq
;                                                                                                                                                                                     (
;                                                                                                                                                                                       MonotonicArray.suffix
;                                                                                                                                                                                         file
;                                                                                                                                                                                         pos
; 
;                                                                                                                                                                                     )
;                                                                                                                                                                                     a
;                                                                                                                                                                                     0
;                                                                                                                                                                                     a
; 
;                                                                                                                                                                                 )
;                                                                                                                                                                                <=
;                                                                                                                                                                               Protocol.fragment_size /\
;                                                                                                                                                                               (
;                                                                                                                                                                                 forall
;                                                                                                                                                                                   (any_result:
;                                                                                                                                                                                   FStar.Seq.Base.seq
;                                                                                                                                                                                     Protocol.byte
;                                                                                                                                                                                   )
;                                                                                                                                                                                 .
;                                                                                                                                                                                   MonotonicArray.as_initialized_subseq
;                                                                                                                                                                                     (
;                                                                                                                                                                                       MonotonicArray.suffix
;                                                                                                                                                                                         file
;                                                                                                                                                                                         pos
; 
;                                                                                                                                                                                     )
;                                                                                                                                                                                     a
;                                                                                                                                                                                     0
;                                                                                                                                                                                     a
;                                                                                                                                                                                    ==
;                                                                                                                                                                                   any_result ==>
;                                                                                                                                                                                   Prims.auto_squash
;                                                                                                                                                                                     (
;                                                                                                                                                                                       Protocol.live_connection
;                                                                                                                                                                                         a
;                                                                                                                                                                                         c
; 
;                                                                                                                                                                                     )
;                                                                                                                                                                                    /\
;                                                                                                                                                                                   (
;                                                                                                                                                                                     forall
;                                                                                                                                                                                       (any_result:
;                                                                                                                                                                                       FStar.Monotonic.Heap.heap)
;                                                                                                                                                                                     .
;                                                                                                                                                                                       a ==
;                                                                                                                                                                                       any_result ==>
;                                                                                                                                                                                       (
;                                                                                                                                                                                         forall
;                                                                                                                                                                                           (any_result:
;                                                                                                                                                                                           Prims.nat)
;                                                                                                                                                                                         .
;                                                                                                                                                                                           Protocol.ctr
;                                                                                                                                                                                             c
;                                                                                                                                                                                             a
;                                                                                                                                                                                            ==
;                                                                                                                                                                                           any_result ==>
;                                                                                                                                                                                           from <=
;                                                                                                                                                                                           Protocol.ctr
;                                                                                                                                                                                             c
;                                                                                                                                                                                             a
;                                                                                                                                                                                            /\
;                                                                                                                                                                                           Protocol.ctr
;                                                                                                                                                                                             c
;                                                                                                                                                                                             a
;                                                                                                                                                                                            <=
;                                                                                                                                                                                           FStar.Seq.Base.length
;                                                                                                                                                                                             (
;                                                                                                                                                                                               Protocol.log
;                                                                                                                                                                                                 c
;                                                                                                                                                                                                 a
; 
;                                                                                                                                                                                             )
;                                                                                                                                                                                            /\
;                                                                                                                                                                                           (
;                                                                                                                                                                                             forall
;                                                                                                                                                                                               (return_val:
;                                                                                                                                                                                               to:
;                                                                                                                                                                                               Prims.nat
;                                                                                                                                                                                                 {
;                                                                                                                                                                                                   from <=
;                                                                                                                                                                                                   to /\
;                                                                                                                                                                                                   to <=
;                                                                                                                                                                                                   FStar.Seq.Base.length
;                                                                                                                                                                                                     (
;                                                                                                                                                                                                       Protocol.log
;                                                                                                                                                                                                         c
;                                                                                                                                                                                                         a
; 
;                                                                                                                                                                                                     )
; 
;                                                                                                                                                                                                 })
;                                                                                                                                                                                             .
;                                                                                                                                                                                               return_val ==
;                                                                                                                                                                                               Protocol.ctr
;                                                                                                                                                                                                 c
;                                                                                                                                                                                                 a
;                                                                                                                                                                                                ==>
;                                                                                                                                                                                               Protocol.ctr
;                                                                                                                                                                                                 c
;                                                                                                                                                                                                 a
;                                                                                                                                                                                                ==
;                                                                                                                                                                                               return_val ==>
;                                                                                                                                                                                               (
;                                                                                                                                                                                                 forall
;                                                                                                                                                                                                   (pure_result:
;                                                                                                                                                                                                   Prims.unit)
;                                                                                                                                                                                                 .
;                                                                                                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                                                                                                     (
;                                                                                                                                                                                                       Protocol.log
;                                                                                                                                                                                                         c
;                                                                                                                                                                                                         a
; 
;                                                                                                                                                                                                     )
;                                                                                                                                                                                                     from
;                                                                                                                                                                                                     (
;                                                                                                                                                                                                       Protocol.ctr
;                                                                                                                                                                                                         c
;                                                                                                                                                                                                         a
; 
;                                                                                                                                                                                                     )
;                                                                                                                                                                                                    ==
;                                                                                                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                                                                                                     (
;                                                                                                                                                                                                       FStar.Seq.Properties.snoc
;                                                                                                                                                                                                         (
;                                                                                                                                                                                                           Protocol.log
;                                                                                                                                                                                                             c
;                                                                                                                                                                                                             a
; 
;                                                                                                                                                                                                         )
;                                                                                                                                                                                                         (
;                                                                                                                                                                                                           MonotonicArray.as_initialized_subseq
;                                                                                                                                                                                                             (
;                                                                                                                                                                                                               MonotonicArray.suffix
;                                                                                                                                                                                                                 file
;                                                                                                                                                                                                                 pos
; 
;                                                                                                                                                                                                             )
;                                                                                                                                                                                                             a
;                                                                                                                                                                                                             0
;                                                                                                                                                                                                             a
; 
;                                                                                                                                                                                                         )
; 
;                                                                                                                                                                                                     )
;                                                                                                                                                                                                     from
;                                                                                                                                                                                                     (
;                                                                                                                                                                                                       Protocol.ctr
;                                                                                                                                                                                                         c
;                                                                                                                                                                                                         a
; 
;                                                                                                                                                                                                     )
;                                                                                                                                                                                                    ==>
;                                                                                                                                                                                                   FStar.Seq.Base.length
;                                                                                                                                                                                                     (
;                                                                                                                                                                                                       MonotonicArray.as_initialized_subseq
;                                                                                                                                                                                                         (
;                                                                                                                                                                                                           MonotonicArray.suffix
;                                                                                                                                                                                                             file
;                                                                                                                                                                                                             pos
; 
;                                                                                                                                                                                                         )
;                                                                                                                                                                                                         a
;                                                                                                                                                                                                         0
;                                                                                                                                                                                                         a
; 
;                                                                                                                                                                                                     )
;                                                                                                                                                                                                    <=
;                                                                                                                                                                                                   Protocol.fragment_size /\
;                                                                                                                                                                                                   (
;                                                                                                                                                                                                     forall
;                                                                                                                                                                                                       (any_result:
;                                                                                                                                                                                                       FStar.Seq.Base.seq
;                                                                                                                                                                                                         Protocol.byte
;                                                                                                                                                                                                       )
;                                                                                                                                                                                                     .
;                                                                                                                                                                                                       MonotonicArray.as_initialized_subseq
;                                                                                                                                                                                                         (
;                                                                                                                                                                                                           MonotonicArray.suffix
;                                                                                                                                                                                                             file
;                                                                                                                                                                                                             pos
; 
;                                                                                                                                                                                                         )
;                                                                                                                                                                                                         a
;                                                                                                                                                                                                         0
;                                                                                                                                                                                                         a
;                                                                                                                                                                                                        ==
;                                                                                                                                                                                                       any_result ==>
;                                                                                                                                                                                                       from <=
;                                                                                                                                                                                                       FStar.Seq.Base.length
;                                                                                                                                                                                                         (
;                                                                                                                                                                                                           Protocol.log
;                                                                                                                                                                                                             c
;                                                                                                                                                                                                             a
; 
;                                                                                                                                                                                                         )
;                                                                                                                                                                                                        /\
;                                                                                                                                                                                                       (
;                                                                                                                                                                                                         forall
;                                                                                                                                                                                                           (any_result:
;                                                                                                                                                                                                           Prims.nat)
;                                                                                                                                                                                                         .
;                                                                                                                                                                                                           from ==
;                                                                                                                                                                                                           any_result ==>
;                                                                                                                                                                                                           (
;                                                                                                                                                                                                             forall
;                                                                                                                                                                                                               (pure_result:
;                                                                                                                                                                                                               Prims.unit)
;                                                                                                                                                                                                             .
;                                                                                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                   FStar.Seq.Properties.snoc
;                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                       Protocol.log
;                                                                                                                                                                                                                         c
;                                                                                                                                                                                                                         a
; 
;                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                       MonotonicArray.as_initialized_subseq
;                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                           MonotonicArray.suffix
;                                                                                                                                                                                                                             file
;                                                                                                                                                                                                                             pos
; 
;                                                                                                                                                                                                                         )
;                                                                                                                                                                                                                         a
;                                                                                                                                                                                                                         0
;                                                                                                                                                                                                                         a
; 
;                                                                                                                                                                                                                     )
; 
;                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                 from
;                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                   FStar.Seq.Base.length
;                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                       Protocol.log
;                                                                                                                                                                                                                         c
;                                                                                                                                                                                                                         a
; 
;                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                    +
;                                                                                                                                                                                                                   1
;                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                ==
;                                                                                                                                                                                                               FStar.Seq.Properties.snoc
;                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                       Protocol.log
;                                                                                                                                                                                                                         c
;                                                                                                                                                                                                                         a
; 
;                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                     from
;                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                       FStar.Seq.Base.length
;                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                           Protocol.log
;                                                                                                                                                                                                                             c
;                                                                                                                                                                                                                             a
; 
;                                                                                                                                                                                                                         )
; 
;                                                                                                                                                                                                                     )
; 
;                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                   MonotonicArray.as_initialized_subseq
;                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                       MonotonicArray.suffix
;                                                                                                                                                                                                                         file
;                                                                                                                                                                                                                         pos
; 
;                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                     a
;                                                                                                                                                                                                                     0
;                                                                                                                                                                                                                     a
; 
;                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                ==>
;                                                                                                                                                                                                               Prims.auto_squash
;                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                   Protocol.live_connection
;                                                                                                                                                                                                                     a
;                                                                                                                                                                                                                     c
; 
;                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                /\
;                                                                                                                                                                                                               (
;                                                                                                                                                                                                                 forall
;                                                                                                                                                                                                                   (any_result:
;                                                                                                                                                                                                                   FStar.Monotonic.Heap.heap)
;                                                                                                                                                                                                                 .
;                                                                                                                                                                                                                   a ==
;                                                                                                                                                                                                                   any_result ==>
;                                                                                                                                                                                                                   (
;                                                                                                                                                                                                                     forall
;                                                                                                                                                                                                                       (any_result:
;                                                                                                                                                                                                                       Prims.nat)
;                                                                                                                                                                                                                     .
;                                                                                                                                                                                                                       Protocol.ctr
;                                                                                                                                                                                                                         c
;                                                                                                                                                                                                                         a
;                                                                                                                                                                                                                        ==
;                                                                                                                                                                                                                       any_result ==>
;                                                                                                                                                                                                                       (
;                                                                                                                                                                                                                         forall
;                                                                                                                                                                                                                           (return_val:
;                                                                                                                                                                                                                           Prims.nat)
;                                                                                                                                                                                                                         .
;                                                                                                                                                                                                                           return_val ==
;                                                                                                                                                                                                                           Protocol.ctr
;                                                                                                                                                                                                                             c
;                                                                                                                                                                                                                             a
;                                                                                                                                                                                                                            ==>
;                                                                                                                                                                                                                           Protocol.ctr
;                                                                                                                                                                                                                             c
;                                                                                                                                                                                                                             a
;                                                                                                                                                                                                                            ==
;                                                                                                                                                                                                                           return_val ==>
;                                                                                                                                                                                                                           (
;                                                                                                                                                                                                                             forall
;                                                                                                                                                                                                                               (any_result:
;                                                                                                                                                                                                                               Prims.int)
;                                                                                                                                                                                                                             .
;                                                                                                                                                                                                                               Protocol.ctr
;                                                                                                                                                                                                                                 c
;                                                                                                                                                                                                                                 a
;                                                                                                                                                                                                                                +
;                                                                                                                                                                                                                               1 ==
;                                                                                                                                                                                                                               any_result ==>
;                                                                                                                                                                                                                               Prims.auto_squash
;                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                   Protocol.live_connection
;                                                                                                                                                                                                                                     a
;                                                                                                                                                                                                                                     c
; 
;                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                /\
;                                                                                                                                                                                                                               (
;                                                                                                                                                                                                                                 forall
;                                                                                                                                                                                                                                   (any_result:
;                                                                                                                                                                                                                                   FStar.Monotonic.Heap.heap)
;                                                                                                                                                                                                                                 .
;                                                                                                                                                                                                                                   a ==
;                                                                                                                                                                                                                                   any_result ==>
;                                                                                                                                                                                                                                   (
;                                                                                                                                                                                                                                     forall
;                                                                                                                                                                                                                                       (any_result:
;                                                                                                                                                                                                                                       Prims.nat)
;                                                                                                                                                                                                                                     .
;                                                                                                                                                                                                                                       Protocol.ctr
;                                                                                                                                                                                                                                         c
;                                                                                                                                                                                                                                         a
;                                                                                                                                                                                                                                        ==
;                                                                                                                                                                                                                                       any_result ==>
;                                                                                                                                                                                                                                       (
;                                                                                                                                                                                                                                         forall
;                                                                                                                                                                                                                                           (return_val:
;                                                                                                                                                                                                                                           Prims.nat)
;                                                                                                                                                                                                                                         .
;                                                                                                                                                                                                                                           return_val ==
;                                                                                                                                                                                                                                           Protocol.ctr
;                                                                                                                                                                                                                                             c
;                                                                                                                                                                                                                                             a
;                                                                                                                                                                                                                                            ==>
;                                                                                                                                                                                                                                           Protocol.ctr
;                                                                                                                                                                                                                                             c
;                                                                                                                                                                                                                                             a
;                                                                                                                                                                                                                                            ==
;                                                                                                                                                                                                                                           return_val ==>
;                                                                                                                                                                                                                                           (
;                                                                                                                                                                                                                                             forall
;                                                                                                                                                                                                                                               (any_result:
;                                                                                                                                                                                                                                               Prims.bool)
;                                                                                                                                                                                                                                             .
;                                                                                                                                                                                                                                               Protocol.ctr
;                                                                                                                                                                                                                                                 c
;                                                                                                                                                                                                                                                 a
;                                                                                                                                                                                                                                                +
;                                                                                                                                                                                                                                               1 =
;                                                                                                                                                                                                                                               Protocol.ctr
;                                                                                                                                                                                                                                                 c
;                                                                                                                                                                                                                                                 a
;                                                                                                                                                                                                                                                ==
;                                                                                                                                                                                                                                               any_result ==>
;                                                                                                                                                                                                                                               (
;                                                                                                                                                                                                                                                 forall
;                                                                                                                                                                                                                                                   (any_result:
;                                                                                                                                                                                                                                                   Prims.logical)
;                                                                                                                                                                                                                                                 .
;                                                                                                                                                                                                                                                   Protocol.ctr
;                                                                                                                                                                                                                                                     c
;                                                                                                                                                                                                                                                     a
;                                                                                                                                                                                                                                                    +
;                                                                                                                                                                                                                                                   1 =
;                                                                                                                                                                                                                                                   Protocol.ctr
;                                                                                                                                                                                                                                                     c
;                                                                                                                                                                                                                                                     a
;                                                                                                                                                                                                                                                    ==
;                                                                                                                                                                                                                                                   any_result ==>
;                                                                                                                                                                                                                                                   Protocol.ctr
;                                                                                                                                                                                                                                                     c
;                                                                                                                                                                                                                                                     a
;                                                                                                                                                                                                                                                    +
;                                                                                                                                                                                                                                                   1 =
;                                                                                                                                                                                                                                                   Protocol.ctr
;                                                                                                                                                                                                                                                     c
;                                                                                                                                                                                                                                                     a
;                                                                                                                                                                                                                                                    /\
;                                                                                                                                                                                                                                                   (
;                                                                                                                                                                                                                                                     forall
;                                                                                                                                                                                                                                                       (pure_result:
;                                                                                                                                                                                                                                                       Prims.unit)
;                                                                                                                                                                                                                                                     .
;                                                                                                                                                                                                                                                       Protocol.ctr
;                                                                                                                                                                                                                                                         c
;                                                                                                                                                                                                                                                         a
;                                                                                                                                                                                                                                                        +
;                                                                                                                                                                                                                                                       1 =
;                                                                                                                                                                                                                                                       Protocol.ctr
;                                                                                                                                                                                                                                                         c
;                                                                                                                                                                                                                                                         a
;                                                                                                                                                                                                                                                        ==>
;                                                                                                                                                                                                                                                       (
;                                                                                                                                                                                                                                                         Protocol.sender
;                                                                                                                                                                                                                                                           c
;                                                                                                                                                                                                                                                          /\
;                                                                                                                                                                                                                                                         FStar.Set.disjoint
;                                                                                                                                                                                                                                                           (
;                                                                                                                                                                                                                                                             Protocol.connection_footprint
;                                                                                                                                                                                                                                                               c
; 
;                                                                                                                                                                                                                                                           )
;                                                                                                                                                                                                                                                           (
;                                                                                                                                                                                                                                                             MonotonicArray.array_footprint
;                                                                                                                                                                                                                                                               file
; 
;                                                                                                                                                                                                                                                           )
;                                                                                                                                                                                                                                                          ==>
;                                                                                                                                                                                                                                                         Protocol.sender
;                                                                                                                                                                                                                                                           c
; 
;                                                                                                                                                                                                                                                       ) /\
;                                                                                                                                                                                                                                                       (
;                                                                                                                                                                                                                                                         forall
;                                                                                                                                                                                                                                                           (any_result:
;                                                                                                                                                                                                                                                           c:
;                                                                                                                                                                                                                                                           Protocol.connection
;                                                                                                                                                                                                                                                             {
;                                                                                                                                                                                                                                                               Protocol.sender
;                                                                                                                                                                                                                                                                 c
;                                                                                                                                                                                                                                                                /\
;                                                                                                                                                                                                                                                               FStar.Set.disjoint
;                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                   Protocol.connection_footprint
;                                                                                                                                                                                                                                                                     c
; 
;                                                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                   MonotonicArray.array_footprint
;                                                                                                                                                                                                                                                                     file
; 
;                                                                                                                                                                                                                                                                 )
; 
;                                                                                                                                                                                                                                                             })
;                                                                                                                                                                                                                                                         .
;                                                                                                                                                                                                                                                           c ==
;                                                                                                                                                                                                                                                           any_result ==>
;                                                                                                                                                                                                                                                           Prims.auto_squash
;                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                               Protocol.live_connection
;                                                                                                                                                                                                                                                                 a
;                                                                                                                                                                                                                                                                 c
; 
;                                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                                            /\
;                                                                                                                                                                                                                                                           (
;                                                                                                                                                                                                                                                             forall
;                                                                                                                                                                                                                                                               (any_result:
;                                                                                                                                                                                                                                                               FStar.Monotonic.Heap.heap)
;                                                                                                                                                                                                                                                             .
;                                                                                                                                                                                                                                                               a ==
;                                                                                                                                                                                                                                                               any_result ==>
;                                                                                                                                                                                                                                                               (
;                                                                                                                                                                                                                                                                 forall
;                                                                                                                                                                                                                                                                   (pure_result:
;                                                                                                                                                                                                                                                                   Prims.unit)
;                                                                                                                                                                                                                                                                 .
;                                                                                                                                                                                                                                                                   Protocol.ctr
;                                                                                                                                                                                                                                                                     c
;                                                                                                                                                                                                                                                                     a
;                                                                                                                                                                                                                                                                    ==
;                                                                                                                                                                                                                                                                   FStar.Seq.Base.length
;                                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                                       Protocol.log
;                                                                                                                                                                                                                                                                         c
;                                                                                                                                                                                                                                                                         a
; 
;                                                                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                                                                    ==>
;                                                                                                                                                                                                                                                                   (
;                                                                                                                                                                                                                                                                     Protocol.sender
;                                                                                                                                                                                                                                                                       c
;                                                                                                                                                                                                                                                                      /\
;                                                                                                                                                                                                                                                                     FStar.Set.disjoint
;                                                                                                                                                                                                                                                                       (
;                                                                                                                                                                                                                                                                         Protocol.connection_footprint
;                                                                                                                                                                                                                                                                           c
; 
;                                                                                                                                                                                                                                                                       )
;                                                                                                                                                                                                                                                                       (
;                                                                                                                                                                                                                                                                         MonotonicArray.array_footprint
;                                                                                                                                                                                                                                                                           file
; 
;                                                                                                                                                                                                                                                                       )
;                                                                                                                                                                                                                                                                      ==>
;                                                                                                                                                                                                                                                                     Protocol.sender
;                                                                                                                                                                                                                                                                       c
; 
;                                                                                                                                                                                                                                                                   ) /\
;                                                                                                                                                                                                                                                                   (
;                                                                                                                                                                                                                                                                     forall
;                                                                                                                                                                                                                                                                       (any_result:
;                                                                                                                                                                                                                                                                       c:
;                                                                                                                                                                                                                                                                       Protocol.connection
;                                                                                                                                                                                                                                                                         {
;                                                                                                                                                                                                                                                                           Protocol.sender
;                                                                                                                                                                                                                                                                             c
;                                                                                                                                                                                                                                                                            /\
;                                                                                                                                                                                                                                                                           FStar.Set.disjoint
;                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                               Protocol.connection_footprint
;                                                                                                                                                                                                                                                                                 c
; 
;                                                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                               MonotonicArray.array_footprint
;                                                                                                                                                                                                                                                                                 file
; 
;                                                                                                                                                                                                                                                                             )
; 
;                                                                                                                                                                                                                                                                         })
;                                                                                                                                                                                                                                                                     .
;                                                                                                                                                                                                                                                                       c ==
;                                                                                                                                                                                                                                                                       any_result ==>
;                                                                                                                                                                                                                                                                       Prims.auto_squash
;                                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                                           Protocol.live_connection
;                                                                                                                                                                                                                                                                             a
;                                                                                                                                                                                                                                                                             c
; 
;                                                                                                                                                                                                                                                                         )
;                                                                                                                                                                                                                                                                        /\
;                                                                                                                                                                                                                                                                       (
;                                                                                                                                                                                                                                                                         forall
;                                                                                                                                                                                                                                                                           (any_result:
;                                                                                                                                                                                                                                                                           FStar.Monotonic.Heap.heap)
;                                                                                                                                                                                                                                                                         .
;                                                                                                                                                                                                                                                                           a ==
;                                                                                                                                                                                                                                                                           any_result ==>
;                                                                                                                                                                                                                                                                           (
;                                                                                                                                                                                                                                                                             forall
;                                                                                                                                                                                                                                                                               (pure_result:
;                                                                                                                                                                                                                                                                               Prims.unit)
;                                                                                                                                                                                                                                                                             .
;                                                                                                                                                                                                                                                                               Protocol.ctr
;                                                                                                                                                                                                                                                                                 c
;                                                                                                                                                                                                                                                                                 a
;                                                                                                                                                                                                                                                                                ==
;                                                                                                                                                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                                   Protocol.log
;                                                                                                                                                                                                                                                                                     c
;                                                                                                                                                                                                                                                                                     a
; 
;                                                                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                                                                ==>
;                                                                                                                                                                                                                                                                               Prims.hasEq
;                                                                                                                                                                                                                                                                                 Prims.nat
;                                                                                                                                                                                                                                                                                /\
;                                                                                                                                                                                                                                                                               (
;                                                                                                                                                                                                                                                                                 forall
;                                                                                                                                                                                                                                                                                   (any_result:
;                                                                                                                                                                                                                                                                                   Type0)
;                                                                                                                                                                                                                                                                                 .
;                                                                                                                                                                                                                                                                                   Prims.nat ==
;                                                                                                                                                                                                                                                                                   any_result ==>
;                                                                                                                                                                                                                                                                                   Prims.auto_squash
;                                                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                                                       Protocol.live_connection
;                                                                                                                                                                                                                                                                                         a
;                                                                                                                                                                                                                                                                                         c
; 
;                                                                                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                                                                                    /\
;                                                                                                                                                                                                                                                                                   (
;                                                                                                                                                                                                                                                                                     forall
;                                                                                                                                                                                                                                                                                       (any_result:
;                                                                                                                                                                                                                                                                                       FStar.Monotonic.Heap.heap)
;                                                                                                                                                                                                                                                                                     .
;                                                                                                                                                                                                                                                                                       a ==
;                                                                                                                                                                                                                                                                                       any_result ==>
;                                                                                                                                                                                                                                                                                       (
;                                                                                                                                                                                                                                                                                         forall
;                                                                                                                                                                                                                                                                                           (any_result:
;                                                                                                                                                                                                                                                                                           Prims.nat)
;                                                                                                                                                                                                                                                                                         .
;                                                                                                                                                                                                                                                                                           Protocol.ctr
;                                                                                                                                                                                                                                                                                             c
;                                                                                                                                                                                                                                                                                             a
;                                                                                                                                                                                                                                                                                            ==
;                                                                                                                                                                                                                                                                                           any_result ==>
;                                                                                                                                                                                                                                                                                           (
;                                                                                                                                                                                                                                                                                             forall
;                                                                                                                                                                                                                                                                                               (any_result:
;                                                                                                                                                                                                                                                                                               Prims.bool)
;                                                                                                                                                                                                                                                                                             .
;                                                                                                                                                                                                                                                                                               Protocol.ctr
;                                                                                                                                                                                                                                                                                                 c
;                                                                                                                                                                                                                                                                                                 a
;                                                                                                                                                                                                                                                                                                =
;                                                                                                                                                                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                                                   Protocol.log
;                                                                                                                                                                                                                                                                                                     c
;                                                                                                                                                                                                                                                                                                     a
; 
;                                                                                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                                                                                ==
;                                                                                                                                                                                                                                                                                               any_result ==>
;                                                                                                                                                                                                                                                                                               (
;                                                                                                                                                                                                                                                                                                 forall
;                                                                                                                                                                                                                                                                                                   (any_result:
;                                                                                                                                                                                                                                                                                                   Prims.logical)
;                                                                                                                                                                                                                                                                                                 .
;                                                                                                                                                                                                                                                                                                   Protocol.ctr
;                                                                                                                                                                                                                                                                                                     c
;                                                                                                                                                                                                                                                                                                     a
;                                                                                                                                                                                                                                                                                                    =
;                                                                                                                                                                                                                                                                                                   FStar.Seq.Base.length
;                                                                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                                                                       Protocol.log
;                                                                                                                                                                                                                                                                                                         c
;                                                                                                                                                                                                                                                                                                         a
; 
;                                                                                                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                                                                                                    ==
;                                                                                                                                                                                                                                                                                                   any_result ==>
;                                                                                                                                                                                                                                                                                                   Protocol.ctr
;                                                                                                                                                                                                                                                                                                     c
;                                                                                                                                                                                                                                                                                                     a
;                                                                                                                                                                                                                                                                                                    =
;                                                                                                                                                                                                                                                                                                   FStar.Seq.Base.length
;                                                                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                                                                       Protocol.log
;                                                                                                                                                                                                                                                                                                         c
;                                                                                                                                                                                                                                                                                                         a
; 
;                                                                                                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                                                                                                    /\
;                                                                                                                                                                                                                                                                                                   (
;                                                                                                                                                                                                                                                                                                     forall
;                                                                                                                                                                                                                                                                                                       (pure_result:
;                                                                                                                                                                                                                                                                                                       Prims.unit)
;                                                                                                                                                                                                                                                                                                     .
;                                                                                                                                                                                                                                                                                                       Protocol.ctr
;                                                                                                                                                                                                                                                                                                         c
;                                                                                                                                                                                                                                                                                                         a
;                                                                                                                                                                                                                                                                                                        =
;                                                                                                                                                                                                                                                                                                       FStar.Seq.Base.length
;                                                                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                                                                           Protocol.log
;                                                                                                                                                                                                                                                                                                             c
;                                                                                                                                                                                                                                                                                                             a
; 
;                                                                                                                                                                                                                                                                                                         )
;                                                                                                                                                                                                                                                                                                        ==>
;                                                                                                                                                                                                                                                                                                       Prims.hasEq
;                                                                                                                                                                                                                                                                                                         Prims.nat
;                                                                                                                                                                                                                                                                                                        /\
;                                                                                                                                                                                                                                                                                                       (
;                                                                                                                                                                                                                                                                                                         forall
;                                                                                                                                                                                                                                                                                                           (any_result:
;                                                                                                                                                                                                                                                                                                           Type0)
;                                                                                                                                                                                                                                                                                                         .
;                                                                                                                                                                                                                                                                                                           Prims.nat ==
;                                                                                                                                                                                                                                                                                                           any_result ==>
;                                                                                                                                                                                                                                                                                                           Prims.auto_squash
;                                                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                                                               Protocol.live_connection
;                                                                                                                                                                                                                                                                                                                 a
;                                                                                                                                                                                                                                                                                                                 c
; 
;                                                                                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                                                                                            /\
;                                                                                                                                                                                                                                                                                                           (
;                                                                                                                                                                                                                                                                                                             forall
;                                                                                                                                                                                                                                                                                                               (any_result:
;                                                                                                                                                                                                                                                                                                               FStar.Monotonic.Heap.heap)
;                                                                                                                                                                                                                                                                                                             .
;                                                                                                                                                                                                                                                                                                               a ==
;                                                                                                                                                                                                                                                                                                               any_result ==>
;                                                                                                                                                                                                                                                                                                               (
;                                                                                                                                                                                                                                                                                                                 forall
;                                                                                                                                                                                                                                                                                                                   (any_result:
;                                                                                                                                                                                                                                                                                                                   Prims.nat)
;                                                                                                                                                                                                                                                                                                                 .
;                                                                                                                                                                                                                                                                                                                   Protocol.ctr
;                                                                                                                                                                                                                                                                                                                     c
;                                                                                                                                                                                                                                                                                                                     a
;                                                                                                                                                                                                                                                                                                                    ==
;                                                                                                                                                                                                                                                                                                                   any_result ==>
;                                                                                                                                                                                                                                                                                                                   (
;                                                                                                                                                                                                                                                                                                                     forall
;                                                                                                                                                                                                                                                                                                                       (any_result:
;                                                                                                                                                                                                                                                                                                                       Prims.bool)
;                                                                                                                                                                                                                                                                                                                     .
;                                                                                                                                                                                                                                                                                                                       Protocol.ctr
;                                                                                                                                                                                                                                                                                                                         c
;                                                                                                                                                                                                                                                                                                                         a
;                                                                                                                                                                                                                                                                                                                        =
;                                                                                                                                                                                                                                                                                                                       FStar.Seq.Base.length
;                                                                                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                                                                                           Protocol.log
;                                                                                                                                                                                                                                                                                                                             c
;                                                                                                                                                                                                                                                                                                                             a
; 
;                                                                                                                                                                                                                                                                                                                         )
;                                                                                                                                                                                                                                                                                                                        ==
;                                                                                                                                                                                                                                                                                                                       any_result ==>
;                                                                                                                                                                                                                                                                                                                       (
;                                                                                                                                                                                                                                                                                                                         forall
;                                                                                                                                                                                                                                                                                                                           (any_result:
;                                                                                                                                                                                                                                                                                                                           Prims.logical)
;                                                                                                                                                                                                                                                                                                                         .
;                                                                                                                                                                                                                                                                                                                           Protocol.ctr
;                                                                                                                                                                                                                                                                                                                             c
;                                                                                                                                                                                                                                                                                                                             a
;                                                                                                                                                                                                                                                                                                                            =
;                                                                                                                                                                                                                                                                                                                           FStar.Seq.Base.length
;                                                                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                                                                               Protocol.log
;                                                                                                                                                                                                                                                                                                                                 c
;                                                                                                                                                                                                                                                                                                                                 a
; 
;                                                                                                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                                                                                                            ==
;                                                                                                                                                                                                                                                                                                                           any_result ==>
;                                                                                                                                                                                                                                                                                                                           Protocol.ctr
;                                                                                                                                                                                                                                                                                                                             c
;                                                                                                                                                                                                                                                                                                                             a
;                                                                                                                                                                                                                                                                                                                            =
;                                                                                                                                                                                                                                                                                                                           FStar.Seq.Base.length
;                                                                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                                                                               Protocol.log
;                                                                                                                                                                                                                                                                                                                                 c
;                                                                                                                                                                                                                                                                                                                                 a
; 
;                                                                                                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                                                                                                            /\
;                                                                                                                                                                                                                                                                                                                           (
;                                                                                                                                                                                                                                                                                                                             forall
;                                                                                                                                                                                                                                                                                                                               (pure_result:
;                                                                                                                                                                                                                                                                                                                               Prims.unit)
;                                                                                                                                                                                                                                                                                                                             .
;                                                                                                                                                                                                                                                                                                                               Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                 c
;                                                                                                                                                                                                                                                                                                                                 a
;                                                                                                                                                                                                                                                                                                                                =
;                                                                                                                                                                                                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                                                                                   Protocol.log
;                                                                                                                                                                                                                                                                                                                                     c
;                                                                                                                                                                                                                                                                                                                                     a
; 
;                                                                                                                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                                                                                                                ==>
;                                                                                                                                                                                                                                                                                                                               (
;                                                                                                                                                                                                                                                                                                                                 pos <=
;                                                                                                                                                                                                                                                                                                                                 n ==>
;                                                                                                                                                                                                                                                                                                                                 pos >=
;                                                                                                                                                                                                                                                                                                                                 0 /\
;                                                                                                                                                                                                                                                                                                                                 pos <=
;                                                                                                                                                                                                                                                                                                                                 n /\
;                                                                                                                                                                                                                                                                                                                                 MonotonicArray.init_arr_in_heap_i_j
;                                                                                                                                                                                                                                                                                                                                   file
;                                                                                                                                                                                                                                                                                                                                   a
;                                                                                                                                                                                                                                                                                                                                   0
;                                                                                                                                                                                                                                                                                                                                   pos
; 
;                                                                                                                                                                                                                                                                                                                               ) /\
;                                                                                                                                                                                                                                                                                                                               (
;                                                                                                                                                                                                                                                                                                                                 forall
;                                                                                                                                                                                                                                                                                                                                   (any_result:
;                                                                                                                                                                                                                                                                                                                                   pos:
;                                                                                                                                                                                                                                                                                                                                   Prims.nat
;                                                                                                                                                                                                                                                                                                                                     {
;                                                                                                                                                                                                                                                                                                                                       pos <=
;                                                                                                                                                                                                                                                                                                                                       n
;                                                                                                                                                                                                                                                                                                                                     })
;                                                                                                                                                                                                                                                                                                                                 .
;                                                                                                                                                                                                                                                                                                                                   pos ==
;                                                                                                                                                                                                                                                                                                                                   any_result ==>
;                                                                                                                                                                                                                                                                                                                                   (
;                                                                                                                                                                                                                                                                                                                                     forall
;                                                                                                                                                                                                                                                                                                                                       (any_result:
;                                                                                                                                                                                                                                                                                                                                       FStar.Seq.Base.seq
;                                                                                                                                                                                                                                                                                                                                         Protocol.byte
;                                                                                                                                                                                                                                                                                                                                       )
;                                                                                                                                                                                                                                                                                                                                     .
;                                                                                                                                                                                                                                                                                                                                       MonotonicArray.as_initialized_subseq
;                                                                                                                                                                                                                                                                                                                                         file
;                                                                                                                                                                                                                                                                                                                                         a
;                                                                                                                                                                                                                                                                                                                                         0
;                                                                                                                                                                                                                                                                                                                                         pos
;                                                                                                                                                                                                                                                                                                                                        ==
;                                                                                                                                                                                                                                                                                                                                       any_result ==>
;                                                                                                                                                                                                                                                                                                                                       pos +
;                                                                                                                                                                                                                                                                                                                                       a >=
;                                                                                                                                                                                                                                                                                                                                       0 /\
;                                                                                                                                                                                                                                                                                                                                       (
;                                                                                                                                                                                                                                                                                                                                         pos +
;                                                                                                                                                                                                                                                                                                                                         a >=
;                                                                                                                                                                                                                                                                                                                                         0
;                                                                                                                                                                                                                                                                                                                                       ) /\
;                                                                                                                                                                                                                                                                                                                                       (
;                                                                                                                                                                                                                                                                                                                                         pos +
;                                                                                                                                                                                                                                                                                                                                         a <=
;                                                                                                                                                                                                                                                                                                                                         n
;                                                                                                                                                                                                                                                                                                                                       ) /\
;                                                                                                                                                                                                                                                                                                                                       MonotonicArray.init_arr_in_heap_i_j
;                                                                                                                                                                                                                                                                                                                                         file
;                                                                                                                                                                                                                                                                                                                                         a
;                                                                                                                                                                                                                                                                                                                                         0
;                                                                                                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                                                                                                           pos +
;                                                                                                                                                                                                                                                                                                                                           a
;                                                                                                                                                                                                                                                                                                                                         )
;                                                                                                                                                                                                                                                                                                                                        /\
;                                                                                                                                                                                                                                                                                                                                       (
;                                                                                                                                                                                                                                                                                                                                         forall
;                                                                                                                                                                                                                                                                                                                                           (return_val:
;                                                                                                                                                                                                                                                                                                                                           j:
;                                                                                                                                                                                                                                                                                                                                           Prims.nat
;                                                                                                                                                                                                                                                                                                                                             {
;                                                                                                                                                                                                                                                                                                                                               j >=
;                                                                                                                                                                                                                                                                                                                                               0 /\
;                                                                                                                                                                                                                                                                                                                                               j <=
;                                                                                                                                                                                                                                                                                                                                               n /\
;                                                                                                                                                                                                                                                                                                                                               MonotonicArray.init_arr_in_heap_i_j
;                                                                                                                                                                                                                                                                                                                                                 file
;                                                                                                                                                                                                                                                                                                                                                 a
;                                                                                                                                                                                                                                                                                                                                                 0
;                                                                                                                                                                                                                                                                                                                                                 j
; 
;                                                                                                                                                                                                                                                                                                                                             })
;                                                                                                                                                                                                                                                                                                                                         .
;                                                                                                                                                                                                                                                                                                                                           return_val ==
;                                                                                                                                                                                                                                                                                                                                           pos +
;                                                                                                                                                                                                                                                                                                                                           a ==>
;                                                                                                                                                                                                                                                                                                                                           (
;                                                                                                                                                                                                                                                                                                                                             forall
;                                                                                                                                                                                                                                                                                                                                               (any_result:
;                                                                                                                                                                                                                                                                                                                                               FStar.Seq.Base.seq
;                                                                                                                                                                                                                                                                                                                                                 Protocol.byte
;                                                                                                                                                                                                                                                                                                                                               )
;                                                                                                                                                                                                                                                                                                                                             .
;                                                                                                                                                                                                                                                                                                                                               MonotonicArray.as_initialized_subseq
;                                                                                                                                                                                                                                                                                                                                                 file
;                                                                                                                                                                                                                                                                                                                                                 a
;                                                                                                                                                                                                                                                                                                                                                 0
;                                                                                                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                                                                                                   pos +
;                                                                                                                                                                                                                                                                                                                                                   a
;                                                                                                                                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                                                                                                                                ==
;                                                                                                                                                                                                                                                                                                                                               any_result ==>
;                                                                                                                                                                                                                                                                                                                                               pos +
;                                                                                                                                                                                                                                                                                                                                               a <=
;                                                                                                                                                                                                                                                                                                                                               n /\
;                                                                                                                                                                                                                                                                                                                                               (
;                                                                                                                                                                                                                                                                                                                                                 forall
;                                                                                                                                                                                                                                                                                                                                                   (any_result:
;                                                                                                                                                                                                                                                                                                                                                   Prims.nat)
;                                                                                                                                                                                                                                                                                                                                                 .
;                                                                                                                                                                                                                                                                                                                                                   a ==
;                                                                                                                                                                                                                                                                                                                                                   any_result ==>
;                                                                                                                                                                                                                                                                                                                                                   Prims.auto_squash
;                                                                                                                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                                                                                                                       Protocol.fully_initialized_in
;                                                                                                                                                                                                                                                                                                                                                         file
;                                                                                                                                                                                                                                                                                                                                                         a
; 
;                                                                                                                                                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                                                                                                                                                    /\
;                                                                                                                                                                                                                                                                                                                                                   (
;                                                                                                                                                                                                                                                                                                                                                     forall
;                                                                                                                                                                                                                                                                                                                                                       (any_result:
;                                                                                                                                                                                                                                                                                                                                                       FStar.Monotonic.Heap.heap)
;                                                                                                                                                                                                                                                                                                                                                     .
;                                                                                                                                                                                                                                                                                                                                                       a ==
;                                                                                                                                                                                                                                                                                                                                                       any_result ==>
;                                                                                                                                                                                                                                                                                                                                                       (
;                                                                                                                                                                                                                                                                                                                                                         forall
;                                                                                                                                                                                                                                                                                                                                                           (pure_result:
;                                                                                                                                                                                                                                                                                                                                                           Prims.unit)
;                                                                                                                                                                                                                                                                                                                                                         .
;                                                                                                                                                                                                                                                                                                                                                           MonotonicArray.as_initialized_subseq
;                                                                                                                                                                                                                                                                                                                                                             file
;                                                                                                                                                                                                                                                                                                                                                             a
;                                                                                                                                                                                                                                                                                                                                                             0
;                                                                                                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                                                                                                               pos +
;                                                                                                                                                                                                                                                                                                                                                               a
;                                                                                                                                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                                                                                                                                            ==
;                                                                                                                                                                                                                                                                                                                                                           FStar.Seq.Base.append
;                                                                                                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                                                                                                               MonotonicArray.as_initialized_subseq
;                                                                                                                                                                                                                                                                                                                                                                 file
;                                                                                                                                                                                                                                                                                                                                                                 a
;                                                                                                                                                                                                                                                                                                                                                                 0
;                                                                                                                                                                                                                                                                                                                                                                 pos
; 
;                                                                                                                                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                                                                                                               MonotonicArray.as_initialized_subseq
;                                                                                                                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                                                                                                                   MonotonicArray.suffix
;                                                                                                                                                                                                                                                                                                                                                                     file
;                                                                                                                                                                                                                                                                                                                                                                     pos
; 
;                                                                                                                                                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                                                                                                                                                 a
;                                                                                                                                                                                                                                                                                                                                                                 0
;                                                                                                                                                                                                                                                                                                                                                                 a
; 
;                                                                                                                                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                                                                                                                                            ==>
;                                                                                                                                                                                                                                                                                                                                                           MonotonicArray.as_initialized_subseq
;                                                                                                                                                                                                                                                                                                                                                             file
;                                                                                                                                                                                                                                                                                                                                                             a
;                                                                                                                                                                                                                                                                                                                                                             0
;                                                                                                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                                                                                                               pos +
;                                                                                                                                                                                                                                                                                                                                                               a
;                                                                                                                                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                                                                                                                                            ==
;                                                                                                                                                                                                                                                                                                                                                           FStar.Seq.Base.append
;                                                                                                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                                                                                                               MonotonicArray.as_initialized_subseq
;                                                                                                                                                                                                                                                                                                                                                                 file
;                                                                                                                                                                                                                                                                                                                                                                 a
;                                                                                                                                                                                                                                                                                                                                                                 0
;                                                                                                                                                                                                                                                                                                                                                                 pos
; 
;                                                                                                                                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                                                                                                               MonotonicArray.as_initialized_subseq
;                                                                                                                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                                                                                                                   MonotonicArray.suffix
;                                                                                                                                                                                                                                                                                                                                                                     file
;                                                                                                                                                                                                                                                                                                                                                                     pos
; 
;                                                                                                                                                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                                                                                                                                                 a
;                                                                                                                                                                                                                                                                                                                                                                 0
;                                                                                                                                                                                                                                                                                                                                                                 a
; 
;                                                                                                                                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                                                                                                                                            /\
;                                                                                                                                                                                                                                                                                                                                                           (
;                                                                                                                                                                                                                                                                                                                                                             forall
;                                                                                                                                                                                                                                                                                                                                                               (pure_result:
;                                                                                                                                                                                                                                                                                                                                                               Prims.unit)
;                                                                                                                                                                                                                                                                                                                                                             .
;                                                                                                                                                                                                                                                                                                                                                               MonotonicArray.as_initialized_subseq
;                                                                                                                                                                                                                                                                                                                                                                 file
;                                                                                                                                                                                                                                                                                                                                                                 a
;                                                                                                                                                                                                                                                                                                                                                                 0
;                                                                                                                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                                                                                                                   pos +
;                                                                                                                                                                                                                                                                                                                                                                   a
;                                                                                                                                                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                                                                                                                                                ==
;                                                                                                                                                                                                                                                                                                                                                               FStar.Seq.Base.append
;                                                                                                                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                                                                                                                   MonotonicArray.as_initialized_subseq
;                                                                                                                                                                                                                                                                                                                                                                     file
;                                                                                                                                                                                                                                                                                                                                                                     a
;                                                                                                                                                                                                                                                                                                                                                                     0
;                                                                                                                                                                                                                                                                                                                                                                     pos
; 
;                                                                                                                                                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                                                                                                                   MonotonicArray.as_initialized_subseq
;                                                                                                                                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                                                                                                                                       MonotonicArray.suffix
;                                                                                                                                                                                                                                                                                                                                                                         file
;                                                                                                                                                                                                                                                                                                                                                                         pos
; 
;                                                                                                                                                                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                                                                                                                                                                     a
;                                                                                                                                                                                                                                                                                                                                                                     0
;                                                                                                                                                                                                                                                                                                                                                                     a
; 
;                                                                                                                                                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                                                                                                                                                ==>
;                                                                                                                                                                                                                                                                                                                                                               Prims.auto_squash
;                                                                                                                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                                                                                                                   Protocol.live_connection
;                                                                                                                                                                                                                                                                                                                                                                     a
;                                                                                                                                                                                                                                                                                                                                                                     c
; 
;                                                                                                                                                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                                                                                                                                                /\
;                                                                                                                                                                                                                                                                                                                                                               (
;                                                                                                                                                                                                                                                                                                                                                                 forall
;                                                                                                                                                                                                                                                                                                                                                                   (any_result:
;                                                                                                                                                                                                                                                                                                                                                                   FStar.Monotonic.Heap.heap)
;                                                                                                                                                                                                                                                                                                                                                                 .
;                                                                                                                                                                                                                                                                                                                                                                   a ==
;                                                                                                                                                                                                                                                                                                                                                                   any_result ==>
;                                                                                                                                                                                                                                                                                                                                                                   (
;                                                                                                                                                                                                                                                                                                                                                                     forall
;                                                                                                                                                                                                                                                                                                                                                                       (any_result:
;                                                                                                                                                                                                                                                                                                                                                                       Prims.nat)
;                                                                                                                                                                                                                                                                                                                                                                     .
;                                                                                                                                                                                                                                                                                                                                                                       Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                         c
;                                                                                                                                                                                                                                                                                                                                                                         a
;                                                                                                                                                                                                                                                                                                                                                                        ==
;                                                                                                                                                                                                                                                                                                                                                                       any_result ==>
;                                                                                                                                                                                                                                                                                                                                                                       from <=
;                                                                                                                                                                                                                                                                                                                                                                       Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                         c
;                                                                                                                                                                                                                                                                                                                                                                         a
;                                                                                                                                                                                                                                                                                                                                                                        &&
;                                                                                                                                                                                                                                                                                                                                                                       Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                         c
;                                                                                                                                                                                                                                                                                                                                                                         a
;                                                                                                                                                                                                                                                                                                                                                                        <=
;                                                                                                                                                                                                                                                                                                                                                                       FStar.Seq.Base.length
;                                                                                                                                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                                                                                                                                           Protocol.log
;                                                                                                                                                                                                                                                                                                                                                                             c
;                                                                                                                                                                                                                                                                                                                                                                             a
; 
;                                                                                                                                                                                                                                                                                                                                                                         )
;                                                                                                                                                                                                                                                                                                                                                                        /\
;                                                                                                                                                                                                                                                                                                                                                                       (
;                                                                                                                                                                                                                                                                                                                                                                         forall
;                                                                                                                                                                                                                                                                                                                                                                           (return_val:
;                                                                                                                                                                                                                                                                                                                                                                           j:
;                                                                                                                                                                                                                                                                                                                                                                           Prims.nat
;                                                                                                                                                                                                                                                                                                                                                                             {
;                                                                                                                                                                                                                                                                                                                                                                               from <=
;                                                                                                                                                                                                                                                                                                                                                                               j &&
;                                                                                                                                                                                                                                                                                                                                                                               j <=
;                                                                                                                                                                                                                                                                                                                                                                               FStar.Seq.Base.length
;                                                                                                                                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                                                                                                                                   Protocol.log
;                                                                                                                                                                                                                                                                                                                                                                                     c
;                                                                                                                                                                                                                                                                                                                                                                                     a
; 
;                                                                                                                                                                                                                                                                                                                                                                                 )
; 
;                                                                                                                                                                                                                                                                                                                                                                             })
;                                                                                                                                                                                                                                                                                                                                                                         .
;                                                                                                                                                                                                                                                                                                                                                                           return_val ==
;                                                                                                                                                                                                                                                                                                                                                                           Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                             c
;                                                                                                                                                                                                                                                                                                                                                                             a
;                                                                                                                                                                                                                                                                                                                                                                            ==>
;                                                                                                                                                                                                                                                                                                                                                                           Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                             c
;                                                                                                                                                                                                                                                                                                                                                                             a
;                                                                                                                                                                                                                                                                                                                                                                            ==
;                                                                                                                                                                                                                                                                                                                                                                           return_val ==>
;                                                                                                                                                                                                                                                                                                                                                                           (
;                                                                                                                                                                                                                                                                                                                                                                             forall
;                                                                                                                                                                                                                                                                                                                                                                               (any_result:
;                                                                                                                                                                                                                                                                                                                                                                               FStar.Seq.Base.seq
;                                                                                                                                                                                                                                                                                                                                                                                 Protocol.message
;                                                                                                                                                                                                                                                                                                                                                                               )
;                                                                                                                                                                                                                                                                                                                                                                             .
;                                                                                                                                                                                                                                                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                                                                                                                                   Protocol.log
;                                                                                                                                                                                                                                                                                                                                                                                     c
;                                                                                                                                                                                                                                                                                                                                                                                     a
; 
;                                                                                                                                                                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                                                                                                                                                                 from
;                                                                                                                                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                                                                                                                                   Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                                     c
;                                                                                                                                                                                                                                                                                                                                                                                     a
; 
;                                                                                                                                                                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                                                                                                                                                                ==
;                                                                                                                                                                                                                                                                                                                                                                               any_result ==>
;                                                                                                                                                                                                                                                                                                                                                                               (
;                                                                                                                                                                                                                                                                                                                                                                                 forall
;                                                                                                                                                                                                                                                                                                                                                                                   (any_result:
;                                                                                                                                                                                                                                                                                                                                                                                   FStar.Seq.Base.seq
;                                                                                                                                                                                                                                                                                                                                                                                     Protocol.byte
;                                                                                                                                                                                                                                                                                                                                                                                   )
;                                                                                                                                                                                                                                                                                                                                                                                 .
;                                                                                                                                                                                                                                                                                                                                                                                   Protocol.flatten
;                                                                                                                                                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                                                                                                                                                       FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                                                                                                                                                           Protocol.log
;                                                                                                                                                                                                                                                                                                                                                                                             c
;                                                                                                                                                                                                                                                                                                                                                                                             a
; 
;                                                                                                                                                                                                                                                                                                                                                                                         )
;                                                                                                                                                                                                                                                                                                                                                                                         from
;                                                                                                                                                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                                                                                                                                                           Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                                             c
;                                                                                                                                                                                                                                                                                                                                                                                             a
; 
;                                                                                                                                                                                                                                                                                                                                                                                         )
; 
;                                                                                                                                                                                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                                                                                                                                                                                    ==
;                                                                                                                                                                                                                                                                                                                                                                                   any_result ==>
;                                                                                                                                                                                                                                                                                                                                                                                   (
;                                                                                                                                                                                                                                                                                                                                                                                     forall
;                                                                                                                                                                                                                                                                                                                                                                                       (any_result:
;                                                                                                                                                                                                                                                                                                                                                                                       Prims.logical)
;                                                                                                                                                                                                                                                                                                                                                                                     .
;                                                                                                                                                                                                                                                                                                                                                                                       MonotonicArray.as_initialized_subseq
;                                                                                                                                                                                                                                                                                                                                                                                         file
;                                                                                                                                                                                                                                                                                                                                                                                         a
;                                                                                                                                                                                                                                                                                                                                                                                         0
;                                                                                                                                                                                                                                                                                                                                                                                         pos
;                                                                                                                                                                                                                                                                                                                                                                                        ==
;                                                                                                                                                                                                                                                                                                                                                                                       Protocol.flatten
;                                                                                                                                                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                                                                                                                                               Protocol.log
;                                                                                                                                                                                                                                                                                                                                                                                                 c
;                                                                                                                                                                                                                                                                                                                                                                                                 a
; 
;                                                                                                                                                                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                                                                                                                                                                             from
;                                                                                                                                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                                                                                                                                               Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                                                 c
;                                                                                                                                                                                                                                                                                                                                                                                                 a
; 
;                                                                                                                                                                                                                                                                                                                                                                                             )
; 
;                                                                                                                                                                                                                                                                                                                                                                                         )
;                                                                                                                                                                                                                                                                                                                                                                                        ==
;                                                                                                                                                                                                                                                                                                                                                                                       any_result ==>
;                                                                                                                                                                                                                                                                                                                                                                                       MonotonicArray.as_initialized_subseq
;                                                                                                                                                                                                                                                                                                                                                                                         file
;                                                                                                                                                                                                                                                                                                                                                                                         a
;                                                                                                                                                                                                                                                                                                                                                                                         0
;                                                                                                                                                                                                                                                                                                                                                                                         pos
;                                                                                                                                                                                                                                                                                                                                                                                        ==
;                                                                                                                                                                                                                                                                                                                                                                                       Protocol.flatten
;                                                                                                                                                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                                                                                                                                               Protocol.log
;                                                                                                                                                                                                                                                                                                                                                                                                 c
;                                                                                                                                                                                                                                                                                                                                                                                                 a
; 
;                                                                                                                                                                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                                                                                                                                                                             from
;                                                                                                                                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                                                                                                                                               Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                                                 c
;                                                                                                                                                                                                                                                                                                                                                                                                 a
; 
;                                                                                                                                                                                                                                                                                                                                                                                             )
; 
;                                                                                                                                                                                                                                                                                                                                                                                         )
;                                                                                                                                                                                                                                                                                                                                                                                        /\
;                                                                                                                                                                                                                                                                                                                                                                                       (
;                                                                                                                                                                                                                                                                                                                                                                                         forall
;                                                                                                                                                                                                                                                                                                                                                                                           (pure_result:
;                                                                                                                                                                                                                                                                                                                                                                                           Prims.unit)
;                                                                                                                                                                                                                                                                                                                                                                                         .
;                                                                                                                                                                                                                                                                                                                                                                                           MonotonicArray.as_initialized_subseq
;                                                                                                                                                                                                                                                                                                                                                                                             file
;                                                                                                                                                                                                                                                                                                                                                                                             a
;                                                                                                                                                                                                                                                                                                                                                                                             0
;                                                                                                                                                                                                                                                                                                                                                                                             pos
;                                                                                                                                                                                                                                                                                                                                                                                            ==
;                                                                                                                                                                                                                                                                                                                                                                                           Protocol.flatten
;                                                                                                                                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                                                                                                                                                   Protocol.log
;                                                                                                                                                                                                                                                                                                                                                                                                     c
;                                                                                                                                                                                                                                                                                                                                                                                                     a
; 
;                                                                                                                                                                                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                                                                                                                                                                                 from
;                                                                                                                                                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                                                                                                                                                   Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                                                     c
;                                                                                                                                                                                                                                                                                                                                                                                                     a
; 
;                                                                                                                                                                                                                                                                                                                                                                                                 )
; 
;                                                                                                                                                                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                                                                                                                                                                            ==>
;                                                                                                                                                                                                                                                                                                                                                                                           Prims.auto_squash
;                                                                                                                                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                                                                                                                                               Protocol.live_connection
;                                                                                                                                                                                                                                                                                                                                                                                                 a
;                                                                                                                                                                                                                                                                                                                                                                                                 c
; 
;                                                                                                                                                                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                                                                                                                                                                            /\
;                                                                                                                                                                                                                                                                                                                                                                                           (
;                                                                                                                                                                                                                                                                                                                                                                                             forall
;                                                                                                                                                                                                                                                                                                                                                                                               (any_result:
;                                                                                                                                                                                                                                                                                                                                                                                               FStar.Monotonic.Heap.heap)
;                                                                                                                                                                                                                                                                                                                                                                                             .
;                                                                                                                                                                                                                                                                                                                                                                                               a ==
;                                                                                                                                                                                                                                                                                                                                                                                               any_result ==>
;                                                                                                                                                                                                                                                                                                                                                                                               (
;                                                                                                                                                                                                                                                                                                                                                                                                 forall
;                                                                                                                                                                                                                                                                                                                                                                                                   (any_result:
;                                                                                                                                                                                                                                                                                                                                                                                                   Prims.nat)
;                                                                                                                                                                                                                                                                                                                                                                                                 .
;                                                                                                                                                                                                                                                                                                                                                                                                   Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                                                     c
;                                                                                                                                                                                                                                                                                                                                                                                                     a
;                                                                                                                                                                                                                                                                                                                                                                                                    ==
;                                                                                                                                                                                                                                                                                                                                                                                                   any_result ==>
;                                                                                                                                                                                                                                                                                                                                                                                                   from <=
;                                                                                                                                                                                                                                                                                                                                                                                                   Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                                                     c
;                                                                                                                                                                                                                                                                                                                                                                                                     a
;                                                                                                                                                                                                                                                                                                                                                                                                    &&
;                                                                                                                                                                                                                                                                                                                                                                                                   Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                                                     c
;                                                                                                                                                                                                                                                                                                                                                                                                     a
;                                                                                                                                                                                                                                                                                                                                                                                                    <=
;                                                                                                                                                                                                                                                                                                                                                                                                   FStar.Seq.Base.length
;                                                                                                                                                                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                                                                                                                                                                       Protocol.log
;                                                                                                                                                                                                                                                                                                                                                                                                         c
;                                                                                                                                                                                                                                                                                                                                                                                                         a
; 
;                                                                                                                                                                                                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                                                                                                                                                                                                    /\
;                                                                                                                                                                                                                                                                                                                                                                                                   (
;                                                                                                                                                                                                                                                                                                                                                                                                     forall
;                                                                                                                                                                                                                                                                                                                                                                                                       (return_val:
;                                                                                                                                                                                                                                                                                                                                                                                                       j:
;                                                                                                                                                                                                                                                                                                                                                                                                       Prims.nat
;                                                                                                                                                                                                                                                                                                                                                                                                         {
;                                                                                                                                                                                                                                                                                                                                                                                                           from <=
;                                                                                                                                                                                                                                                                                                                                                                                                           j &&
;                                                                                                                                                                                                                                                                                                                                                                                                           j <=
;                                                                                                                                                                                                                                                                                                                                                                                                           FStar.Seq.Base.length
;                                                                                                                                                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                                                                                                                                                               Protocol.log
;                                                                                                                                                                                                                                                                                                                                                                                                                 c
;                                                                                                                                                                                                                                                                                                                                                                                                                 a
; 
;                                                                                                                                                                                                                                                                                                                                                                                                             )
; 
;                                                                                                                                                                                                                                                                                                                                                                                                         })
;                                                                                                                                                                                                                                                                                                                                                                                                     .
;                                                                                                                                                                                                                                                                                                                                                                                                       return_val ==
;                                                                                                                                                                                                                                                                                                                                                                                                       Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                                                         c
;                                                                                                                                                                                                                                                                                                                                                                                                         a
;                                                                                                                                                                                                                                                                                                                                                                                                        ==>
;                                                                                                                                                                                                                                                                                                                                                                                                       Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                                                         c
;                                                                                                                                                                                                                                                                                                                                                                                                         a
;                                                                                                                                                                                                                                                                                                                                                                                                        ==
;                                                                                                                                                                                                                                                                                                                                                                                                       return_val ==>
;                                                                                                                                                                                                                                                                                                                                                                                                       (
;                                                                                                                                                                                                                                                                                                                                                                                                         forall
;                                                                                                                                                                                                                                                                                                                                                                                                           (any_result:
;                                                                                                                                                                                                                                                                                                                                                                                                           FStar.Seq.Base.seq
;                                                                                                                                                                                                                                                                                                                                                                                                             Protocol.message
;                                                                                                                                                                                                                                                                                                                                                                                                           )
;                                                                                                                                                                                                                                                                                                                                                                                                         .
;                                                                                                                                                                                                                                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                                                                                                                                                               Protocol.log
;                                                                                                                                                                                                                                                                                                                                                                                                                 c
;                                                                                                                                                                                                                                                                                                                                                                                                                 a
; 
;                                                                                                                                                                                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                                                                                                                                                                                             from
;                                                                                                                                                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                                                                                                                                                               Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                                                                 c
;                                                                                                                                                                                                                                                                                                                                                                                                                 a
; 
;                                                                                                                                                                                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                                                                                                                                                                                            ==
;                                                                                                                                                                                                                                                                                                                                                                                                           any_result ==>
;                                                                                                                                                                                                                                                                                                                                                                                                           FStar.Seq.Base.length
;                                                                                                                                                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                                                                                                                                                               MonotonicArray.as_initialized_subseq
;                                                                                                                                                                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                                                                                                                                                                   MonotonicArray.suffix
;                                                                                                                                                                                                                                                                                                                                                                                                                     file
;                                                                                                                                                                                                                                                                                                                                                                                                                     pos
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                                                                                                                                                                                                 a
;                                                                                                                                                                                                                                                                                                                                                                                                                 0
;                                                                                                                                                                                                                                                                                                                                                                                                                 a
; 
;                                                                                                                                                                                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                                                                                                                                                                                            <=
;                                                                                                                                                                                                                                                                                                                                                                                                           Protocol.fragment_size /\
;                                                                                                                                                                                                                                                                                                                                                                                                           (
;                                                                                                                                                                                                                                                                                                                                                                                                             forall
;                                                                                                                                                                                                                                                                                                                                                                                                               (any_result:
;                                                                                                                                                                                                                                                                                                                                                                                                               FStar.Seq.Base.seq
;                                                                                                                                                                                                                                                                                                                                                                                                                 Protocol.byte
;                                                                                                                                                                                                                                                                                                                                                                                                               )
;                                                                                                                                                                                                                                                                                                                                                                                                             .
;                                                                                                                                                                                                                                                                                                                                                                                                               MonotonicArray.as_initialized_subseq
;                                                                                                                                                                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                                                                                                                                                                   MonotonicArray.suffix
;                                                                                                                                                                                                                                                                                                                                                                                                                     file
;                                                                                                                                                                                                                                                                                                                                                                                                                     pos
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                                                                                                                                                                                                 a
;                                                                                                                                                                                                                                                                                                                                                                                                                 0
;                                                                                                                                                                                                                                                                                                                                                                                                                 a
;                                                                                                                                                                                                                                                                                                                                                                                                                ==
;                                                                                                                                                                                                                                                                                                                                                                                                               any_result ==>
;                                                                                                                                                                                                                                                                                                                                                                                                               (
;                                                                                                                                                                                                                                                                                                                                                                                                                 forall
;                                                                                                                                                                                                                                                                                                                                                                                                                   (pure_result:
;                                                                                                                                                                                                                                                                                                                                                                                                                   Prims.unit)
;                                                                                                                                                                                                                                                                                                                                                                                                                 .
;                                                                                                                                                                                                                                                                                                                                                                                                                   Protocol.flatten
;                                                                                                                                                                                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                                                                                                                                                                                       FStar.Seq.Properties.snoc
;                                                                                                                                                                                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                                                                                                                                                                               Protocol.log
;                                                                                                                                                                                                                                                                                                                                                                                                                                 c
;                                                                                                                                                                                                                                                                                                                                                                                                                                 a
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                                                                                                                                                                                                             from
;                                                                                                                                                                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                                                                                                                                                                               Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                                                                                 c
;                                                                                                                                                                                                                                                                                                                                                                                                                                 a
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                             )
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                         )
;                                                                                                                                                                                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                                                                                                                                                                                           MonotonicArray.as_initialized_subseq
;                                                                                                                                                                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                                                                                                                                                                               MonotonicArray.suffix
;                                                                                                                                                                                                                                                                                                                                                                                                                                 file
;                                                                                                                                                                                                                                                                                                                                                                                                                                 pos
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                                                                                                                                                                                                             a
;                                                                                                                                                                                                                                                                                                                                                                                                                             0
;                                                                                                                                                                                                                                                                                                                                                                                                                             a
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                         )
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                                                                                                                                                                                                                    ==
;                                                                                                                                                                                                                                                                                                                                                                                                                   FStar.Seq.Base.append
;                                                                                                                                                                                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                                                                                                                                                                                       Protocol.flatten
;                                                                                                                                                                                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                                                                                                                                                                               Protocol.log
;                                                                                                                                                                                                                                                                                                                                                                                                                                 c
;                                                                                                                                                                                                                                                                                                                                                                                                                                 a
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                                                                                                                                                                                                             from
;                                                                                                                                                                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                                                                                                                                                                               Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                                                                                 c
;                                                                                                                                                                                                                                                                                                                                                                                                                                 a
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                             )
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                         )
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                                                                                                                                                                                       MonotonicArray.as_initialized_subseq
;                                                                                                                                                                                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                                                                                                                                                                                           MonotonicArray.suffix
;                                                                                                                                                                                                                                                                                                                                                                                                                             file
;                                                                                                                                                                                                                                                                                                                                                                                                                             pos
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                         )
;                                                                                                                                                                                                                                                                                                                                                                                                                         a
;                                                                                                                                                                                                                                                                                                                                                                                                                         0
;                                                                                                                                                                                                                                                                                                                                                                                                                         a
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                                                                                                                                                                                                                    ==>
;                                                                                                                                                                                                                                                                                                                                                                                                                   Prims.auto_squash
;                                                                                                                                                                                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                                                                                                                                                                                       Protocol.live_connection
;                                                                                                                                                                                                                                                                                                                                                                                                                         a
;                                                                                                                                                                                                                                                                                                                                                                                                                         c
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                                                                                                                                                                                                                    /\
;                                                                                                                                                                                                                                                                                                                                                                                                                   (
;                                                                                                                                                                                                                                                                                                                                                                                                                     forall
;                                                                                                                                                                                                                                                                                                                                                                                                                       (any_result:
;                                                                                                                                                                                                                                                                                                                                                                                                                       FStar.Monotonic.Heap.heap)
;                                                                                                                                                                                                                                                                                                                                                                                                                     .
;                                                                                                                                                                                                                                                                                                                                                                                                                       a ==
;                                                                                                                                                                                                                                                                                                                                                                                                                       any_result ==>
;                                                                                                                                                                                                                                                                                                                                                                                                                       (
;                                                                                                                                                                                                                                                                                                                                                                                                                         forall
;                                                                                                                                                                                                                                                                                                                                                                                                                           (any_result:
;                                                                                                                                                                                                                                                                                                                                                                                                                           Prims.nat)
;                                                                                                                                                                                                                                                                                                                                                                                                                         .
;                                                                                                                                                                                                                                                                                                                                                                                                                           Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                                                                             c
;                                                                                                                                                                                                                                                                                                                                                                                                                             a
;                                                                                                                                                                                                                                                                                                                                                                                                                            ==
;                                                                                                                                                                                                                                                                                                                                                                                                                           any_result ==>
;                                                                                                                                                                                                                                                                                                                                                                                                                           from <=
;                                                                                                                                                                                                                                                                                                                                                                                                                           Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                                                                             c
;                                                                                                                                                                                                                                                                                                                                                                                                                             a
;                                                                                                                                                                                                                                                                                                                                                                                                                            &&
;                                                                                                                                                                                                                                                                                                                                                                                                                           Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                                                                             c
;                                                                                                                                                                                                                                                                                                                                                                                                                             a
;                                                                                                                                                                                                                                                                                                                                                                                                                            <=
;                                                                                                                                                                                                                                                                                                                                                                                                                           FStar.Seq.Base.length
;                                                                                                                                                                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                                                                                                                                                                               Protocol.log
;                                                                                                                                                                                                                                                                                                                                                                                                                                 c
;                                                                                                                                                                                                                                                                                                                                                                                                                                 a
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                                                                                                                                                                                                            /\
;                                                                                                                                                                                                                                                                                                                                                                                                                           (
;                                                                                                                                                                                                                                                                                                                                                                                                                             forall
;                                                                                                                                                                                                                                                                                                                                                                                                                               (return_val:
;                                                                                                                                                                                                                                                                                                                                                                                                                               j:
;                                                                                                                                                                                                                                                                                                                                                                                                                               Prims.nat
;                                                                                                                                                                                                                                                                                                                                                                                                                                 {
;                                                                                                                                                                                                                                                                                                                                                                                                                                   from <=
;                                                                                                                                                                                                                                                                                                                                                                                                                                   j &&
;                                                                                                                                                                                                                                                                                                                                                                                                                                   j <=
;                                                                                                                                                                                                                                                                                                                                                                                                                                   FStar.Seq.Base.length
;                                                                                                                                                                                                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                                                                                                                                                                                                       Protocol.log
;                                                                                                                                                                                                                                                                                                                                                                                                                                         c
;                                                                                                                                                                                                                                                                                                                                                                                                                                         a
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                                     )
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                                 })
;                                                                                                                                                                                                                                                                                                                                                                                                                             .
;                                                                                                                                                                                                                                                                                                                                                                                                                               return_val ==
;                                                                                                                                                                                                                                                                                                                                                                                                                               Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                                                                                 c
;                                                                                                                                                                                                                                                                                                                                                                                                                                 a
;                                                                                                                                                                                                                                                                                                                                                                                                                                ==>
;                                                                                                                                                                                                                                                                                                                                                                                                                               Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                                                                                 c
;                                                                                                                                                                                                                                                                                                                                                                                                                                 a
;                                                                                                                                                                                                                                                                                                                                                                                                                                ==
;                                                                                                                                                                                                                                                                                                                                                                                                                               return_val ==>
;                                                                                                                                                                                                                                                                                                                                                                                                                               (
;                                                                                                                                                                                                                                                                                                                                                                                                                                 forall
;                                                                                                                                                                                                                                                                                                                                                                                                                                   (any_result:
;                                                                                                                                                                                                                                                                                                                                                                                                                                   FStar.Seq.Base.seq
;                                                                                                                                                                                                                                                                                                                                                                                                                                     Protocol.message
;                                                                                                                                                                                                                                                                                                                                                                                                                                   )
;                                                                                                                                                                                                                                                                                                                                                                                                                                 .
;                                                                                                                                                                                                                                                                                                                                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                                                                                                                                                                                                       Protocol.log
;                                                                                                                                                                                                                                                                                                                                                                                                                                         c
;                                                                                                                                                                                                                                                                                                                                                                                                                                         a
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                                                                                                                                                                                                                                     from
;                                                                                                                                                                                                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                                                                                                                                                                                                       Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                                                                                         c
;                                                                                                                                                                                                                                                                                                                                                                                                                                         a
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                                                                                                                                                                                                                                    ==
;                                                                                                                                                                                                                                                                                                                                                                                                                                   any_result ==>
;                                                                                                                                                                                                                                                                                                                                                                                                                                   (
;                                                                                                                                                                                                                                                                                                                                                                                                                                     forall
;                                                                                                                                                                                                                                                                                                                                                                                                                                       (any_result:
;                                                                                                                                                                                                                                                                                                                                                                                                                                       FStar.Seq.Base.seq
;                                                                                                                                                                                                                                                                                                                                                                                                                                         Protocol.byte
;                                                                                                                                                                                                                                                                                                                                                                                                                                       )
;                                                                                                                                                                                                                                                                                                                                                                                                                                     .
;                                                                                                                                                                                                                                                                                                                                                                                                                                       Protocol.flatten
;                                                                                                                                                                                                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                                                                                                                                                                                                           FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                                                                                                                                                                                               Protocol.log
;                                                                                                                                                                                                                                                                                                                                                                                                                                                 c
;                                                                                                                                                                                                                                                                                                                                                                                                                                                 a
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                                                                                                                                                                                                                             from
;                                                                                                                                                                                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                                                                                                                                                                                               Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                                                                                                 c
;                                                                                                                                                                                                                                                                                                                                                                                                                                                 a
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                                             )
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                                         )
;                                                                                                                                                                                                                                                                                                                                                                                                                                        ==
;                                                                                                                                                                                                                                                                                                                                                                                                                                       any_result ==>
;                                                                                                                                                                                                                                                                                                                                                                                                                                       (
;                                                                                                                                                                                                                                                                                                                                                                                                                                         forall
;                                                                                                                                                                                                                                                                                                                                                                                                                                           (any_result:
;                                                                                                                                                                                                                                                                                                                                                                                                                                           Prims.logical)
;                                                                                                                                                                                                                                                                                                                                                                                                                                         .
;                                                                                                                                                                                                                                                                                                                                                                                                                                           MonotonicArray.as_initialized_subseq
;                                                                                                                                                                                                                                                                                                                                                                                                                                             file
;                                                                                                                                                                                                                                                                                                                                                                                                                                             a
;                                                                                                                                                                                                                                                                                                                                                                                                                                             0
;                                                                                                                                                                                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                                                                                                                                                                                               pos +
;                                                                                                                                                                                                                                                                                                                                                                                                                                               a
;                                                                                                                                                                                                                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                                                                                                                                                                                                                            ==
;                                                                                                                                                                                                                                                                                                                                                                                                                                           Protocol.flatten
;                                                                                                                                                                                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                                                                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                   Protocol.log
;                                                                                                                                                                                                                                                                                                                                                                                                                                                     c
;                                                                                                                                                                                                                                                                                                                                                                                                                                                     a
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                                                                                                                                                                                                                                 from
;                                                                                                                                                                                                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                   Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                                                                                                     c
;                                                                                                                                                                                                                                                                                                                                                                                                                                                     a
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                                                 )
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                                                                                                                                                                                                                            ==
;                                                                                                                                                                                                                                                                                                                                                                                                                                           any_result ==>
;                                                                                                                                                                                                                                                                                                                                                                                                                                           MonotonicArray.as_initialized_subseq
;                                                                                                                                                                                                                                                                                                                                                                                                                                             file
;                                                                                                                                                                                                                                                                                                                                                                                                                                             a
;                                                                                                                                                                                                                                                                                                                                                                                                                                             0
;                                                                                                                                                                                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                                                                                                                                                                                               pos +
;                                                                                                                                                                                                                                                                                                                                                                                                                                               a
;                                                                                                                                                                                                                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                                                                                                                                                                                                                            ==
;                                                                                                                                                                                                                                                                                                                                                                                                                                           Protocol.flatten
;                                                                                                                                                                                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                                                                                                                                                                                               FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                   Protocol.log
;                                                                                                                                                                                                                                                                                                                                                                                                                                                     c
;                                                                                                                                                                                                                                                                                                                                                                                                                                                     a
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                                                                                                                                                                                                                                 from
;                                                                                                                                                                                                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                   Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                                                                                                     c
;                                                                                                                                                                                                                                                                                                                                                                                                                                                     a
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                                                 )
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                                                                                                                                                                                                                            /\
;                                                                                                                                                                                                                                                                                                                                                                                                                                           (
;                                                                                                                                                                                                                                                                                                                                                                                                                                             forall
;                                                                                                                                                                                                                                                                                                                                                                                                                                               (pure_result:
;                                                                                                                                                                                                                                                                                                                                                                                                                                               Prims.unit)
;                                                                                                                                                                                                                                                                                                                                                                                                                                             .
;                                                                                                                                                                                                                                                                                                                                                                                                                                               MonotonicArray.as_initialized_subseq
;                                                                                                                                                                                                                                                                                                                                                                                                                                                 file
;                                                                                                                                                                                                                                                                                                                                                                                                                                                 a
;                                                                                                                                                                                                                                                                                                                                                                                                                                                 0
;                                                                                                                                                                                                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                   pos +
;                                                                                                                                                                                                                                                                                                                                                                                                                                                   a
;                                                                                                                                                                                                                                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                                                                                                                                                                                                                                ==
;                                                                                                                                                                                                                                                                                                                                                                                                                                               Protocol.flatten
;                                                                                                                                                                                                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                   FStar.Seq.Base.slice
;                                                                                                                                                                                                                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                       Protocol.log
;                                                                                                                                                                                                                                                                                                                                                                                                                                                         c
;                                                                                                                                                                                                                                                                                                                                                                                                                                                         a
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                                                                                                                                                                                                                                                     from
;                                                                                                                                                                                                                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                       Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                                                                                                         c
;                                                                                                                                                                                                                                                                                                                                                                                                                                                         a
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                                                     )
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                                                                                                                                                                                                                                ==>
;                                                                                                                                                                                                                                                                                                                                                                                                                                               Prims.auto_squash
;                                                                                                                                                                                                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                   Protocol.live_connection
;                                                                                                                                                                                                                                                                                                                                                                                                                                                     a
;                                                                                                                                                                                                                                                                                                                                                                                                                                                     c
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                                                                                                                                                                                                                                /\
;                                                                                                                                                                                                                                                                                                                                                                                                                                               (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                 forall
;                                                                                                                                                                                                                                                                                                                                                                                                                                                   (any_result:
;                                                                                                                                                                                                                                                                                                                                                                                                                                                   FStar.Monotonic.Heap.heap)
;                                                                                                                                                                                                                                                                                                                                                                                                                                                 .
;                                                                                                                                                                                                                                                                                                                                                                                                                                                   a ==
;                                                                                                                                                                                                                                                                                                                                                                                                                                                   any_result ==>
;                                                                                                                                                                                                                                                                                                                                                                                                                                                   (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                     forall
;                                                                                                                                                                                                                                                                                                                                                                                                                                                       (any_result:
;                                                                                                                                                                                                                                                                                                                                                                                                                                                       Prims.nat)
;                                                                                                                                                                                                                                                                                                                                                                                                                                                     .
;                                                                                                                                                                                                                                                                                                                                                                                                                                                       Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                                                                                                         c
;                                                                                                                                                                                                                                                                                                                                                                                                                                                         a
;                                                                                                                                                                                                                                                                                                                                                                                                                                                        ==
;                                                                                                                                                                                                                                                                                                                                                                                                                                                       any_result ==>
;                                                                                                                                                                                                                                                                                                                                                                                                                                                       from <=
;                                                                                                                                                                                                                                                                                                                                                                                                                                                       Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                                                                                                         c
;                                                                                                                                                                                                                                                                                                                                                                                                                                                         a
;                                                                                                                                                                                                                                                                                                                                                                                                                                                        /\
;                                                                                                                                                                                                                                                                                                                                                                                                                                                       (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                         forall
;                                                                                                                                                                                                                                                                                                                                                                                                                                                           (return_val:
;                                                                                                                                                                                                                                                                                                                                                                                                                                                           to:
;                                                                                                                                                                                                                                                                                                                                                                                                                                                           Prims.nat
;                                                                                                                                                                                                                                                                                                                                                                                                                                                             {
;                                                                                                                                                                                                                                                                                                                                                                                                                                                               from <=
;                                                                                                                                                                                                                                                                                                                                                                                                                                                               to
;                                                                                                                                                                                                                                                                                                                                                                                                                                                             })
;                                                                                                                                                                                                                                                                                                                                                                                                                                                         .
;                                                                                                                                                                                                                                                                                                                                                                                                                                                           return_val ==
;                                                                                                                                                                                                                                                                                                                                                                                                                                                           Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                                                                                                             c
;                                                                                                                                                                                                                                                                                                                                                                                                                                                             a
;                                                                                                                                                                                                                                                                                                                                                                                                                                                            ==>
;                                                                                                                                                                                                                                                                                                                                                                                                                                                           Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                                                                                                             c
;                                                                                                                                                                                                                                                                                                                                                                                                                                                             a
;                                                                                                                                                                                                                                                                                                                                                                                                                                                            ==
;                                                                                                                                                                                                                                                                                                                                                                                                                                                           return_val ==>
;                                                                                                                                                                                                                                                                                                                                                                                                                                                           (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                             forall
;                                                                                                                                                                                                                                                                                                                                                                                                                                                               (any_result:
;                                                                                                                                                                                                                                                                                                                                                                                                                                                               p:
;                                                                                                                                                                                                                                                                                                                                                                                                                                                               FStar.ST.heap_predicate
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                 {
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                   FStar.ST.stable
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                     p
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                 })
;                                                                                                                                                                                                                                                                                                                                                                                                                                                               (any_result:
;                                                                                                                                                                                                                                                                                                                                                                                                                                                               Type0)
;                                                                                                                                                                                                                                                                                                                                                                                                                                                             .
;                                                                                                                                                                                                                                                                                                                                                                                                                                                               Protocol.sent_bytes
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                   MonotonicArray.as_initialized_subseq
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                     file
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                     a
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                     0
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                       pos +
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                       a
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                     )
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                 c
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                 from
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                     c
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                     a
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                 a
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                ==
;                                                                                                                                                                                                                                                                                                                                                                                                                                                               any_result ==>
;                                                                                                                                                                                                                                                                                                                                                                                                                                                               Protocol.sent_bytes
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                   MonotonicArray.as_initialized_subseq
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                     file
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                     a
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                     0
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                       pos +
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                       a
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                     )
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                 c
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                 from
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                     c
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                     a
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                 a
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                /\
;                                                                                                                                                                                                                                                                                                                                                                                                                                                               (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                 forall
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                   (pure_result:
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Prims.unit)
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                 .
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Protocol.sent_bytes
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                       MonotonicArray.as_initialized_subseq
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                         file
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                         a
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                         0
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                           pos +
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                           a
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                         )
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                     c
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                     from
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                         c
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                         a
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                     a
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ==>
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                   pos +
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                   a >=
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                   0 /\
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                   pos +
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                   a <=
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                   n /\
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                   (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                     forall
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                       (return_val:
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                       pos:
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Prims.nat
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                         {
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                           pos <=
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                           n
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                         })
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                     .
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                       return_val ==
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                       pos +
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                       a ==>
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Protocol.fully_initialized_in
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                         file
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                         h1
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                        /\
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Protocol.live_connection
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                         h1
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                         c
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                        /\
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                       from <=
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                         c
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                         h1
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                        /\
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Protocol.sent_bytes
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                           MonotonicArray.as_initialized_subseq
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                             file
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                             h1
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                             0
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                               pos +
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                               a
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                             )
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                         )
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                         c
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                         from
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                             c
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                             h1
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                         )
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                         h1
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                        /\
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                       (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                         forall
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (a:
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Prims.unit)
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (h1:
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                           _:
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                           FStar.Monotonic.Heap.heap
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                             {
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Protocol.fully_initialized_in
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 file
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 h1
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                /\
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Protocol.live_connection
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 h1
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 c
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                /\
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                               from <=
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 c
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 h1
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                /\
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Protocol.sent_bytes
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   MonotonicArray.as_initialized_subseq
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     file
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     h1
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     0
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       pos +
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       a
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     )
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 c
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 from
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     c
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     h1
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 h1
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                             })
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                         .
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                           FStar.Monotonic.Heap.modifies
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Protocol.connection_footprint
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 c
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                             h1
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                             h1
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                            /\
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Protocol.live_connection
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                             h1
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                             c
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                            /\
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                           from <=
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                             c
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                             h1
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                            /\
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                             forall
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                               (k:
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Prims.nat)
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                             .
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                               k <
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                               n ==>
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Some?
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   FStar.Seq.Base.index
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       MonotonicArray.as_seq
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         file
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         h1
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     k
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 )
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ) /\
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Protocol.sent_bytes
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                               MonotonicArray.as_initialized_seq
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 file
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 h1
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                             c
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                             from
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Protocol.ctr
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 c
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 h1
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                             h1
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ==>
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                           k
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                             a
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                             h1
; 
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                       )
;                                                                                                                                                                                                                                                                                                                                                                                                                                                                   )
;                                                                                                                                                                                                                                                                                                                                                                                                                                                               )
;                                                                                                                                                                                                                                                                                                                                                                                                                                                           )
;                                                                                                                                                                                                                                                                                                                                                                                                                                                       )
;                                                                                                                                                                                                                                                                                                                                                                                                                                                   )
;                                                                                                                                                                                                                                                                                                                                                                                                                                               )
;                                                                                                                                                                                                                                                                                                                                                                                                                                           )
;                                                                                                                                                                                                                                                                                                                                                                                                                                       )
;                                                                                                                                                                                                                                                                                                                                                                                                                                   )
;                                                                                                                                                                                                                                                                                                                                                                                                                               )
;                                                                                                                                                                                                                                                                                                                                                                                                                           )
;                                                                                                                                                                                                                                                                                                                                                                                                                       )
;                                                                                                                                                                                                                                                                                                                                                                                                                   )
;                                                                                                                                                                                                                                                                                                                                                                                                               )
;                                                                                                                                                                                                                                                                                                                                                                                                           )
;                                                                                                                                                                                                                                                                                                                                                                                                       )
;                                                                                                                                                                                                                                                                                                                                                                                                   )
;                                                                                                                                                                                                                                                                                                                                                                                               )
;                                                                                                                                                                                                                                                                                                                                                                                           )
;                                                                                                                                                                                                                                                                                                                                                                                       )
;                                                                                                                                                                                                                                                                                                                                                                                   )
;                                                                                                                                                                                                                                                                                                                                                                               )
;                                                                                                                                                                                                                                                                                                                                                                           )
;                                                                                                                                                                                                                                                                                                                                                                       )
;                                                                                                                                                                                                                                                                                                                                                                   )
;                                                                                                                                                                                                                                                                                                                                                               )
;                                                                                                                                                                                                                                                                                                                                                           )
;                                                                                                                                                                                                                                                                                                                                                       )
;                                                                                                                                                                                                                                                                                                                                                   )
;                                                                                                                                                                                                                                                                                                                                               )
;                                                                                                                                                                                                                                                                                                                                           )
;                                                                                                                                                                                                                                                                                                                                       )
;                                                                                                                                                                                                                                                                                                                                   )
;                                                                                                                                                                                                                                                                                                                               )
;                                                                                                                                                                                                                                                                                                                           )
;                                                                                                                                                                                                                                                                                                                       )
;                                                                                                                                                                                                                                                                                                                   )
;                                                                                                                                                                                                                                                                                                               )
;                                                                                                                                                                                                                                                                                                           )
;                                                                                                                                                                                                                                                                                                       )
;                                                                                                                                                                                                                                                                                                   )
;                                                                                                                                                                                                                                                                                               )
;                                                                                                                                                                                                                                                                                           )
;                                                                                                                                                                                                                                                                                       )
;                                                                                                                                                                                                                                                                                   )
;                                                                                                                                                                                                                                                                               )
;                                                                                                                                                                                                                                                                           )
;                                                                                                                                                                                                                                                                       )
;                                                                                                                                                                                                                                                                   )
;                                                                                                                                                                                                                                                               )
;                                                                                                                                                                                                                                                           )
;                                                                                                                                                                                                                                                       )
;                                                                                                                                                                                                                                                   )
;                                                                                                                                                                                                                                               )
;                                                                                                                                                                                                                                           )
;                                                                                                                                                                                                                                       )
;                                                                                                                                                                                                                                   )
;                                                                                                                                                                                                                               )
;                                                                                                                                                                                                                           )
;                                                                                                                                                                                                                       )
;                                                                                                                                                                                                                   )
;                                                                                                                                                                                                               )
;                                                                                                                                                                                                           )
;                                                                                                                                                                                                       )
;                                                                                                                                                                                                   )
;                                                                                                                                                                                               )
;                                                                                                                                                                                           )
;                                                                                                                                                                                       )
;                                                                                                                                                                                   )
;                                                                                                                                                                               )
;                                                                                                                                                                           )
;                                                                                                                                                                       )
;                                                                                                                                                                   )
;                                                                                                                                                               )
;                                                                                                                                                           )
;                                                                                                                                                       )
;                                                                                                                                                   )
;                                                                                                                                               )
;                                                                                                                                           )
;                                                                                                                                       )
;                                                                                                                                   )
;                                                                                                                               )
;                                                                                                                           )
;                                                                                                                       )
;                                                                                                                   )
;                                                                                                               )
;                                                                                                           )
;                                                                                                       )
;                                                                                                   ))
;                                                                                           ))))))))))
;                                                   )))))))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec send_aux`

(push) ;; push{0

; <fuel='0' ifuel='0'>

;;; Fact-ids: 
(assert (! (= MaxFuel
ZFuel)
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
ZFuel)
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
(Protocol.iarray Protocol.byte
@x0))
(HasType @x2
(Tm_refine_377d0118686d11596ae874abd2ea7677 @x0
@x1))
(HasType @x3
Prims.nat)
(HasType @x4
(Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x0)))

;; def=FStar.Pervasives.fsti(484,2-484,63); use=FStar.Pervasives.fsti(503,15-503,26)
(forall ((@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x5
(FStar.Pervasives.st_post_h FStar.Monotonic.Heap.heap
Prims.unit))
(HasType @x6
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(419,22-419,52); use=Protocol.fst(431,8-469,42)
(Valid 
;; def=Protocol.fst(419,22-419,52); use=Protocol.fst(431,8-469,42)
(Protocol.fully_initialized_in Protocol.byte
@x0
@x1
@x6)
)


;; def=Protocol.fst(420,22-420,44); use=Protocol.fst(431,8-469,42)
(Valid 
;; def=Protocol.fst(420,22-420,44); use=Protocol.fst(431,8-469,42)
(Protocol.live_connection @x6
@x2)
)


;; def=Protocol.fst(421,22-421,38); use=Protocol.fst(431,8-469,42)
(<= (BoxInt_proj_0 @x3)
(BoxInt_proj_0 (Protocol.ctr @x2
@x6)))


;; def=Protocol.fst(422,22-422,91); use=Protocol.fst(431,8-469,42)
(Valid 
;; def=Protocol.fst(422,22-422,91); use=Protocol.fst(431,8-469,42)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Protocol.sent_bytes@tok
(MonotonicArray.as_initialized_subseq Protocol.byte
@x0
@x1
@x6
(BoxInt 0)
@x4))
@x2)
@x3)
(Protocol.ctr @x2
@x6))
@x6)
)


;; def=FStar.ST.fst(76,50-76,87); use=Protocol.fst(431,8-469,42)
(forall ((@x7 Term) (@x8 Term))
 (! (implies (and (or label_1
(HasType @x7
Prims.unit))
(or label_2
(HasType @x8
(Tm_refine_9c53eb855ade94a7b7c9e39b74b4706d @x0
@x1
@x6
@x2
@x3
@x4)))

;; def=Protocol.fst(424,22-424,61); use=Protocol.fst(431,8-469,42)
(or label_3

;; def=Protocol.fst(424,22-424,61); use=Protocol.fst(431,8-469,42)
(Valid 
;; def=Protocol.fst(424,22-424,61); use=Protocol.fst(431,8-469,42)
(FStar.Monotonic.Heap.modifies (Protocol.connection_footprint @x2)
@x6
@x8)
)
)


;; def=Protocol.fst(425,22-425,44); use=Protocol.fst(431,8-469,42)
(or label_4

;; def=Protocol.fst(425,22-425,44); use=Protocol.fst(431,8-469,42)
(Valid 
;; def=Protocol.fst(425,22-425,44); use=Protocol.fst(431,8-469,42)
(Protocol.live_connection @x8
@x2)
)
)


;; def=Protocol.fst(426,22-426,38); use=Protocol.fst(431,8-469,42)
(or label_5

;; def=Protocol.fst(426,22-426,38); use=Protocol.fst(431,8-469,42)
(<= (BoxInt_proj_0 @x3)
(BoxInt_proj_0 (Protocol.ctr @x2
@x8)))
)


;; def=Protocol.fst(427,22-427,86); use=Protocol.fst(431,8-469,42)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.nat)

;; def=Protocol.fst(427,39-427,44); use=Protocol.fst(431,8-469,42)
(< (BoxInt_proj_0 @x9)
(BoxInt_proj_0 @x0))
)

;; def=Protocol.fst(427,49-427,85); use=Protocol.fst(431,8-469,42)
(or label_6

;; def=Protocol.fst(427,49-427,85); use=Protocol.fst(431,8-469,42)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some Protocol.byte
(FStar.Seq.Base.index (FStar.Pervasives.Native.option Protocol.byte)
(MonotonicArray.as_seq Protocol.byte
@x0
@x1
@x6)
@x9)))
)
)
 
;;no pats
:qid @query.3))


;; def=Protocol.fst(428,22-428,82); use=Protocol.fst(431,8-469,42)
(or label_7

;; def=Protocol.fst(428,22-428,82); use=Protocol.fst(431,8-469,42)
(Valid 
;; def=Protocol.fst(428,22-428,82); use=Protocol.fst(431,8-469,42)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Protocol.sent_bytes@tok
(MonotonicArray.as_initialized_seq Protocol.byte
@x0
@x1
@x6))
@x2)
@x3)
(Protocol.ctr @x2
@x8))
@x8)
)
)
)

;; def=FStar.ST.fst(76,80-76,86); use=Protocol.fst(431,8-469,42)
(Valid 
;; def=FStar.ST.fst(76,80-76,86); use=Protocol.fst(431,8-469,42)
(ApplyTT (ApplyTT @x5
@x7)
@x8)
)
)
 

:pattern (
;; def=FStar.ST.fst(76,80-76,86); use=Protocol.fst(431,8-469,42)
(Valid 
;; def=FStar.ST.fst(76,80-76,86); use=Protocol.fst(431,8-469,42)
(ApplyTT (ApplyTT @x5
@x7)
@x8)
)
)
:qid @query.2))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Prims.fst(73,23-73,30); use=Protocol.fst(431,11-431,14)
(or label_8

;; def=Prims.fst(73,23-73,30); use=Protocol.fst(431,11-431,14)
(Valid 
;; def=Prims.fst(73,23-73,30); use=Protocol.fst(431,11-431,14)
(Prims.hasEq Prims.nat)
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Tm_type)

;; def=Prims.fst(588,31-588,32); use=Protocol.fst(431,8-469,42)
(= Prims.nat
@x7)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.bool)

;; def=Protocol.fst(431,11-431,18); use=Protocol.fst(431,11-431,18)
(= (Prims.op_Equality Prims.nat
@x4
@x0)
@x8)
)

;; def=FStar.Pervasives.fsti(478,2-479,93); use=Protocol.fst(431,8-469,42)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(FStar.Pervasives.st_post_h FStar.Monotonic.Heap.heap
Prims.unit))

;; def=FStar.Pervasives.fsti(478,2-479,93); use=Protocol.fst(431,8-469,42)
(forall ((@x10 Term) (@x11 Term))
 (! (implies 
;; def=FStar.Pervasives.fsti(479,62-479,70); use=Protocol.fst(431,8-469,42)
(Valid 
;; def=FStar.Pervasives.fsti(479,62-479,70); use=Protocol.fst(431,8-469,42)
(ApplyTT (ApplyTT @x5
@x10)
@x11)
)


;; def=FStar.Pervasives.fsti(479,75-479,80); use=Protocol.fst(431,8-469,42)
(Valid 
;; def=FStar.Pervasives.fsti(479,75-479,80); use=Protocol.fst(431,8-469,42)
(ApplyTT (ApplyTT @x9
@x10)
@x11)
)
)
 :weight 0


:pattern ((ApplyTT (ApplyTT @x9
@x10)
@x11))
:qid @query.7))
)

;; def=FStar.Pervasives.fsti(472,7-472,50); use=Protocol.fst(431,8-469,42)
(and (implies 
;; def=Protocol.fst(431,11-431,18); use=Protocol.fst(431,11-431,18)
(= (Prims.op_Equality Prims.nat
@x4
@x0)
(BoxBool true))


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x10 Term))
 (! (implies (HasType @x10
Prims.unit)

;; def=FStar.ST.fst(33,87-33,92); use=Protocol.fst(431,8-469,42)
(Valid 
;; def=FStar.ST.fst(33,87-33,92); use=Protocol.fst(431,8-469,42)
(ApplyTT (ApplyTT @x9
@x10)
@x6)
)
)
 
;;no pats
:qid @query.8))
)
(implies 
;; def=FStar.Pervasives.fsti(472,27-472,29); use=Protocol.fst(431,8-469,42)
(not 
;; def=Protocol.fst(431,11-431,18); use=Protocol.fst(431,11-431,18)
(= (Prims.op_Equality Prims.nat
@x4
@x0)
(BoxBool true))
)


;; def=FStar.Pervasives.fsti(489,2-489,27); use=Protocol.fst(431,8-469,42)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.bool)

;; def=Protocol.fst(431,11-469,42); use=Protocol.fst(431,11-469,42)
(= (Prims.op_Equality Prims.nat
@x4
@x0)
@x10)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(433,25-433,31)
(or label_9

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(433,25-433,31)
(>= (BoxInt_proj_0 (Prims.op_Subtraction @x0
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(MonotonicArray.t Protocol.byte
(Prims.op_Subtraction @x0
@x4)))

;; def=Protocol.fst(433,14-433,40); use=Protocol.fst(433,14-433,40)
(= (MonotonicArray.suffix Protocol.byte
@x0
@x1
@x4)
@x11)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and (implies 
;; def=Protocol.fst(175,44-175,54); use=Protocol.fst(434,33-434,37)
(and 
;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(434,33-434,37)
(Valid 
;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(434,33-434,37)
(FStar.ST.witnessed (MonotonicArray.mutable_pred Protocol.byte
@x0
@x1))
)


;; def=Protocol.fst(175,44-175,54); use=Protocol.fst(434,33-434,37)
(Valid 
;; def=Protocol.fst(175,44-175,54); use=Protocol.fst(434,33-434,37)
(MonotonicArray.all_init Protocol.byte
@x0
@x1)
)
)


;; def=MonotonicArray.fsti(314,33-314,45); use=Protocol.fst(434,33-434,37)
(or label_10

;; def=MonotonicArray.fsti(314,33-314,45); use=Protocol.fst(434,33-434,37)
(Valid 
;; def=MonotonicArray.fsti(314,33-314,45); use=Protocol.fst(434,33-434,37)
(MonotonicArray.all_init Protocol.byte
@x0
@x1)
)
)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
(Protocol.iarray Protocol.byte
@x0))

;; def=MonotonicArray.fsti(314,23-314,26); use=Protocol.fst(431,8-469,42)
(= @x1
@x12)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(434,42-434,51)
(or label_11

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(434,42-434,51)
(>= (BoxInt_proj_0 (Prims.op_Subtraction @x0
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=MonotonicArray.fsti(314,65-314,77); use=Protocol.fst(434,42-434,51)
(or label_12

;; def=MonotonicArray.fsti(314,65-314,77); use=Protocol.fst(434,42-434,51)
(<= (BoxInt_proj_0 (Prims.op_Addition @x4
(Prims.op_Subtraction @x0
@x4)))
(BoxInt_proj_0 @x0))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(431,8-469,42)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(Tm_refine_6f684e27d6af9965634108bcfe981953 @x4
@x0))

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(431,8-469,42)
(= @x13
(Prims.op_Subtraction @x0
@x4))
)

;; def=Prims.fst(441,36-441,97); use=Protocol.fst(434,10-434,32)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
Prims.unit)

;; def=MonotonicArray.fsti(316,19-316,45); use=Protocol.fst(434,10-434,32)
(Valid 
;; def=MonotonicArray.fsti(316,19-316,45); use=Protocol.fst(434,10-434,32)
(MonotonicArray.all_init Protocol.byte
(Prims.op_Subtraction @x0
@x4)
(MonotonicArray.sub Protocol.byte
@x0
@x1
@x4
(Prims.op_Subtraction @x0
@x4)))
)
)

;; def=FStar.ST.fst(76,50-76,87); use=Protocol.fst(436,22-436,25)
(forall ((@x15 Term) (@x16 Term))
 (! (implies (and (HasType @x15
FStar.Monotonic.Heap.heap)
(HasType @x16
FStar.Monotonic.Heap.heap)

;; def=FStar.ST.fst(116,58-116,64); use=Protocol.fst(436,22-436,25)
(= @x6
@x16)


;; def=FStar.ST.fst(116,68-116,73); use=Protocol.fst(436,22-436,25)
(= @x15
@x16)
)

;; def=FStar.ST.fst(76,50-76,87); use=Protocol.fst(437,28-437,41)
(forall ((@x17 Term) (@x18 Term))
 (! (implies (and (HasType @x17
(FStar.Seq.Base.seq Protocol.byte))
(HasType @x18
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(351,14-351,20); use=Protocol.fst(437,28-437,41)
(= @x16
@x18)


;; def=Protocol.fst(352,14-352,75); use=Protocol.fst(437,28-437,41)
(forall ((@x19 Term))
 (! (implies (and (HasType @x19
Prims.nat)

;; def=Protocol.fst(352,31-352,36); use=Protocol.fst(437,28-437,41)
(< (BoxInt_proj_0 @x19)
(BoxInt_proj_0 @x0))
)

;; def=Protocol.fst(352,41-352,74); use=Protocol.fst(437,28-437,41)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some Protocol.byte
(FStar.Seq.Base.index (FStar.Pervasives.Native.option Protocol.byte)
(MonotonicArray.as_seq Protocol.byte
@x0
@x1
@x16)
@x19)))
)
 
;;no pats
:qid @query.16))


;; def=Protocol.fst(353,14-353,49); use=Protocol.fst(437,28-437,41)
(= @x17
(MonotonicArray.as_initialized_subseq Protocol.byte
@x0
@x1
@x16
(BoxInt 0)
@x0))


;; def=Protocol.fst(354,7-354,35); use=Protocol.fst(437,28-437,41)
(= @x17
(MonotonicArray.as_initialized_seq Protocol.byte
@x0
@x1
@x16))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Protocol.fst(140,31-140,52); use=Protocol.fst(438,27-438,29)
(or label_13

;; def=Protocol.fst(140,31-140,52); use=Protocol.fst(438,27-438,29)
(Valid 
;; def=Protocol.fst(140,31-140,52); use=Protocol.fst(438,27-438,29)
(Protocol.live_connection @x15
@x2)
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x19 Term))
 (! (implies (and (HasType @x19
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(140,24-436,16); use=Protocol.fst(431,8-469,42)
(= @x15
@x19)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x20 Term))
 (! (implies (and (HasType @x20
(FStar.Seq.Base.seq Protocol.message))

;; def=Protocol.fst(438,14-438,29); use=Protocol.fst(438,14-438,29)
(= (Protocol.log @x2
@x15)
@x20)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(439,26-439,34)
(or label_14

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(439,26-439,34)
(>= (BoxInt_proj_0 (Prims.op_Subtraction @x0
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(431,8-469,42)
(forall ((@x21 Term))
 (! (implies (and (HasType @x21
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(431,8-469,42)
(= @x21
(Prims.op_Subtraction @x0
@x4))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(439,26-439,34)
(or label_15

;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(439,26-439,34)
(Valid 
;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(439,26-439,34)
(FStar.ST.witnessed (MonotonicArray.mutable_pred Protocol.byte
(Prims.op_Subtraction @x0
@x4)
(MonotonicArray.suffix Protocol.byte
@x0
@x1
@x4)))
)
)


;; def=Protocol.fst(175,44-175,54); use=Protocol.fst(439,26-439,34)
(or label_16

;; def=Protocol.fst(175,44-175,54); use=Protocol.fst(439,26-439,34)
(Valid 
;; def=Protocol.fst(175,44-175,54); use=Protocol.fst(439,26-439,34)
(MonotonicArray.all_init Protocol.byte
(Prims.op_Subtraction @x0
@x4)
(MonotonicArray.suffix Protocol.byte
@x0
@x1
@x4))
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
(MonotonicArray.t Protocol.byte
(Prims.op_Subtraction @x0
@x4)))

;; def=Protocol.fst(206,19-433,22); use=Protocol.fst(431,8-469,42)
(= (MonotonicArray.suffix Protocol.byte
@x0
@x1
@x4)
@x22)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and (implies 
;; def=Protocol.fst(414,24-414,96); use=Protocol.fst(439,35-439,36)
(and 
;; def=Protocol.fst(414,24-414,32); use=Protocol.fst(439,35-439,36)
(BoxBool_proj_0 (Protocol.sender @x2))


;; def=Protocol.fst(414,36-414,96); use=Protocol.fst(439,35-439,36)
(Valid 
;; def=Protocol.fst(414,36-414,96); use=Protocol.fst(439,35-439,36)
(FStar.Set.disjoint Prims.nat
(Protocol.connection_footprint @x2)
(MonotonicArray.array_footprint Protocol.byte
@x0
@x1))
)
)


;; def=Protocol.fst(206,52-206,60); use=Protocol.fst(439,35-439,36)
(or label_17

;; def=Protocol.fst(206,52-206,60); use=Protocol.fst(439,35-439,36)
(BoxBool_proj_0 (Protocol.sender @x2))
)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x23 Term))
 (! (implies (and (HasType @x23
(Tm_refine_377d0118686d11596ae874abd2ea7677 @x0
@x1))

;; def=Protocol.fst(206,39-430,26); use=Protocol.fst(431,8-469,42)
(= @x2
@x23)
)

;; def=FStar.ST.fst(76,50-76,87); use=Protocol.fst(439,21-439,25)
(forall ((@x24 Term) (@x25 Term))
 (! (implies (and (HasType @x24
Prims.nat)
(HasType @x25
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(208,37-208,76); use=Protocol.fst(439,21-439,25)
(Valid 
;; def=Protocol.fst(208,37-208,76); use=Protocol.fst(439,21-439,25)
(FStar.Monotonic.Heap.modifies (Protocol.connection_footprint @x2)
@x18
@x25)
)


;; def=Protocol.fst(209,27-209,49); use=Protocol.fst(439,21-439,25)
(Valid 
;; def=Protocol.fst(209,27-209,49); use=Protocol.fst(439,21-439,25)
(Protocol.live_connection @x18
@x2)
)


;; def=Protocol.fst(210,6-210,28); use=Protocol.fst(439,21-439,25)
(Valid 
;; def=Protocol.fst(210,6-210,28); use=Protocol.fst(439,21-439,25)
(Protocol.live_connection @x25
@x2)
)


;; def=Protocol.fst(211,27-211,54); use=Protocol.fst(439,21-439,25)
(<= (BoxInt_proj_0 @x24)
(BoxInt_proj_0 (Prims.min (Prims.op_Subtraction @x0
@x4)
(Protocol.fragment_size Dummy_value))))


;; def=Protocol.fst(212,6-212,29); use=Protocol.fst(439,21-439,25)
(= (Protocol.ctr @x2
@x25)
(Prims.op_Addition (Protocol.ctr @x2
@x18)
(BoxInt 1)))


;; def=Protocol.fst(213,6-213,69); use=Protocol.fst(439,21-439,25)
(forall ((@x26 Term))
 (! (implies (and (HasType @x26
Prims.nat)

;; def=Protocol.fst(213,23-213,28); use=Protocol.fst(439,21-439,25)
(< (BoxInt_proj_0 @x26)
(BoxInt_proj_0 (Prims.op_Subtraction @x0
@x4)))
)

;; def=Protocol.fst(213,33-213,68); use=Protocol.fst(439,21-439,25)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some Protocol.byte
(FStar.Seq.Base.index (FStar.Pervasives.Native.option Protocol.byte)
(MonotonicArray.as_seq Protocol.byte
(Prims.op_Subtraction @x0
@x4)
(MonotonicArray.suffix Protocol.byte
@x0
@x1
@x4)
@x18)
@x26)))
)
 
;;no pats
:qid @query.23))


;; def=Protocol.fst(214,34-214,99); use=Protocol.fst(439,21-439,25)
(= (Protocol.log @x2
@x25)
(FStar.Seq.Properties.snoc Protocol.message
(Protocol.log @x2
@x18)
(MonotonicArray.as_initialized_subseq Protocol.byte
(Prims.op_Subtraction @x0
@x4)
(MonotonicArray.suffix Protocol.byte
@x0
@x1
@x4)
@x18
(BoxInt 0)
@x24)))
)

;; def=FStar.ST.fst(76,50-76,87); use=Protocol.fst(440,22-440,25)
(forall ((@x26 Term) (@x27 Term))
 (! (implies (and (HasType @x26
FStar.Monotonic.Heap.heap)
(HasType @x27
FStar.Monotonic.Heap.heap)

;; def=FStar.ST.fst(116,58-116,64); use=Protocol.fst(440,22-440,25)
(= @x25
@x27)


;; def=FStar.ST.fst(116,68-116,73); use=Protocol.fst(440,22-440,25)
(= @x26
@x27)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Protocol.fst(140,31-140,52); use=Protocol.fst(441,27-441,29)
(or label_18

;; def=Protocol.fst(140,31-140,52); use=Protocol.fst(441,27-441,29)
(Valid 
;; def=Protocol.fst(140,31-140,52); use=Protocol.fst(441,27-441,29)
(Protocol.live_connection @x26
@x2)
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x28 Term))
 (! (implies (and (HasType @x28
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(140,24-440,16); use=Protocol.fst(431,8-469,42)
(= @x26
@x28)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x29 Term))
 (! (implies (and (HasType @x29
(FStar.Seq.Base.seq Protocol.message))

;; def=Protocol.fst(441,14-441,29); use=Protocol.fst(441,14-441,29)
(= (Protocol.log @x2
@x26)
@x29)
)

;; def=FStar.ST.fst(76,50-76,87); use=Protocol.fst(442,28-442,41)
(forall ((@x30 Term) (@x31 Term))
 (! (implies (and (HasType @x30
(FStar.Seq.Base.seq Protocol.byte))
(HasType @x31
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(351,14-351,20); use=Protocol.fst(442,28-442,41)
(= @x27
@x31)


;; def=Protocol.fst(352,14-352,75); use=Protocol.fst(442,28-442,41)
(forall ((@x32 Term))
 (! (implies (and (HasType @x32
Prims.nat)

;; def=Protocol.fst(352,31-352,36); use=Protocol.fst(442,28-442,41)
(< (BoxInt_proj_0 @x32)
(BoxInt_proj_0 @x0))
)

;; def=Protocol.fst(352,41-352,74); use=Protocol.fst(442,28-442,41)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some Protocol.byte
(FStar.Seq.Base.index (FStar.Pervasives.Native.option Protocol.byte)
(MonotonicArray.as_seq Protocol.byte
@x0
@x1
@x27)
@x32)))
)
 
;;no pats
:qid @query.28))


;; def=Protocol.fst(353,14-353,49); use=Protocol.fst(442,28-442,41)
(= @x30
(MonotonicArray.as_initialized_subseq Protocol.byte
@x0
@x1
@x27
(BoxInt 0)
@x0))


;; def=Protocol.fst(354,7-354,35); use=Protocol.fst(442,28-442,41)
(= @x30
(MonotonicArray.as_initialized_seq Protocol.byte
@x0
@x1
@x27))
)

;; def=Prims.fst(441,29-441,97); use=Protocol.fst(443,10-443,16)
(and 
;; def=Protocol.fst(443,17-443,45); use=Protocol.fst(443,10-443,16)
(or label_19

;; def=Protocol.fst(443,17-443,45); use=Protocol.fst(443,10-443,16)
(= @x17
@x30)
)


;; def=Prims.fst(441,36-441,97); use=Protocol.fst(443,10-443,16)
(forall ((@x32 Term))
 (! (implies (and (HasType @x32
Prims.unit)

;; def=Protocol.fst(443,17-443,45); use=Protocol.fst(443,10-443,16)
(= @x17
@x30)
)

;; def=FStar.ST.fst(76,50-76,87); use=Protocol.fst(444,10-444,25)
(forall ((@x33 Term) (@x34 Term))
 (! (implies (and (HasType @x33
Prims.unit)
(HasType @x34
FStar.Monotonic.Heap.heap)

;; def=MonotonicArray.fsti(244,37-244,45); use=Protocol.fst(444,10-444,25)
(= @x31
@x34)


;; def=MonotonicArray.fsti(244,49-244,72); use=Protocol.fst(444,10-444,25)
(Valid 
;; def=MonotonicArray.fsti(244,49-244,72); use=Protocol.fst(444,10-444,25)
(MonotonicArray.contains_array Protocol.byte
@x0
@x31
@x1)
)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(445,32-445,34)
(or label_20

;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(445,32-445,34)
(Valid 
;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(445,32-445,34)
(Protocol.live_connection @x26
@x2)
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x35 Term))
 (! (implies (and (HasType @x35
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(151,24-440,16); use=Protocol.fst(431,8-469,42)
(= @x26
@x35)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x36 Term))
 (! (implies (and (HasType @x36
Prims.nat)

;; def=Protocol.fst(151,60-445,34); use=Protocol.fst(445,26-445,34)
(= (Protocol.ctr @x2
@x26)
@x36)
)

;; def=Prims.fst(356,2-356,58); use=Protocol.fst(431,8-469,42)
(forall ((@x37 Term))
 (! (implies (and (HasType @x37
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(431,8-469,42)
(= @x37
(Protocol.ctr @x2
@x26))


;; def=dummy(0,0-0,0); use=Protocol.fst(431,8-469,42)
(= (Protocol.ctr @x2
@x26)
@x37)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x38 Term))
 (! (implies (and (HasType @x38
Prims.bool)

;; def=Prims.fst(180,10-180,11); use=Protocol.fst(431,8-469,42)
(= (Prims.op_LessThanOrEqual @x3
(Protocol.ctr @x2
@x26))
@x38)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x39 Term))
 (! (implies (and (HasType @x39
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=Protocol.fst(431,8-469,42)
(= (Prims.b2t (Prims.op_LessThanOrEqual @x3
(Protocol.ctr @x2
@x26)))
@x39)
)

;; def=Prims.fst(441,29-441,97); use=Protocol.fst(445,10-445,16)
(and 
;; def=Protocol.fst(445,17-445,35); use=Protocol.fst(445,10-445,16)
(or label_21

;; def=Protocol.fst(445,17-445,35); use=Protocol.fst(445,10-445,16)
(<= (BoxInt_proj_0 @x3)
(BoxInt_proj_0 (Protocol.ctr @x2
@x26)))
)


;; def=Prims.fst(441,36-441,97); use=Protocol.fst(445,10-445,16)
(forall ((@x40 Term))
 (! (implies (and (HasType @x40
Prims.unit)

;; def=Protocol.fst(445,17-445,35); use=Protocol.fst(445,10-445,16)
(<= (BoxInt_proj_0 @x3)
(BoxInt_proj_0 (Protocol.ctr @x2
@x26)))
)

;; def=Prims.fst(441,29-441,97); use=Protocol.fst(446,10-446,16)
(and 
;; def=Protocol.fst(446,17-446,49); use=Protocol.fst(446,10-446,16)
(or label_22

;; def=Protocol.fst(446,17-446,49); use=Protocol.fst(446,10-446,16)
(Valid 
;; def=Protocol.fst(446,17-446,49); use=Protocol.fst(446,10-446,16)
(Protocol.fully_initialized_in Protocol.byte
@x0
@x1
@x26)
)
)


;; def=Prims.fst(441,36-441,97); use=Protocol.fst(446,10-446,16)
(forall ((@x41 Term))
 (! (implies (and (HasType @x41
Prims.unit)

;; def=Protocol.fst(446,17-446,49); use=Protocol.fst(446,10-446,16)
(Valid 
;; def=Protocol.fst(446,17-446,49); use=Protocol.fst(446,10-446,16)
(Protocol.fully_initialized_in Protocol.byte
@x0
@x1
@x26)
)
)

;; def=Prims.fst(441,29-441,97); use=Protocol.fst(447,10-447,16)
(and 
;; def=Protocol.fst(447,17-447,41); use=Protocol.fst(447,10-447,16)
(or label_23

;; def=Protocol.fst(447,17-447,41); use=Protocol.fst(447,10-447,16)
(Valid 
;; def=Protocol.fst(447,17-447,41); use=Protocol.fst(447,10-447,16)
(Protocol.live_connection @x26
@x2)
)
)


;; def=Prims.fst(441,36-441,97); use=Protocol.fst(447,10-447,16)
(forall ((@x42 Term))
 (! (implies (and (HasType @x42
Prims.unit)

;; def=Protocol.fst(447,17-447,41); use=Protocol.fst(447,10-447,16)
(Valid 
;; def=Protocol.fst(447,17-447,41); use=Protocol.fst(447,10-447,16)
(Protocol.live_connection @x26
@x2)
)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(449,50-449,58)
(or label_24

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(449,50-449,58)
(>= (BoxInt_proj_0 (Prims.op_Subtraction @x0
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(431,8-469,42)
(forall ((@x43 Term))
 (! (implies (and (HasType @x43
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(431,8-469,42)
(= @x43
(Prims.op_Subtraction @x0
@x4))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=MonotonicArray.fsti(289,17-289,23); use=Protocol.fst(449,64-449,68)
(or label_25

;; def=MonotonicArray.fsti(289,17-289,23); use=Protocol.fst(449,64-449,68)
(>= (BoxInt_proj_0 @x24)
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=MonotonicArray.fsti(289,27-289,33); use=Protocol.fst(449,64-449,68)
(or label_26

;; def=MonotonicArray.fsti(289,27-289,33); use=Protocol.fst(449,64-449,68)
(<= (BoxInt_proj_0 @x24)
(BoxInt_proj_0 (Prims.op_Subtraction @x0
@x4)))
)


;; def=MonotonicArray.fsti(289,37-289,67); use=Protocol.fst(449,64-449,68)
(or label_27

;; def=MonotonicArray.fsti(289,37-289,67); use=Protocol.fst(449,64-449,68)
(Valid 
;; def=MonotonicArray.fsti(289,37-289,67); use=Protocol.fst(449,64-449,68)
(MonotonicArray.init_arr_in_heap_i_j Protocol.byte
(Prims.op_Subtraction @x0
@x4)
(MonotonicArray.suffix Protocol.byte
@x0
@x1
@x4)
@x15
(BoxInt 0)
@x24)
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x44 Term))
 (! (implies (and (HasType @x44
Prims.nat)

;; def=MonotonicArray.fsti(289,11-289,12); use=Protocol.fst(431,8-469,42)
(= @x24
@x44)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x45 Term))
 (! (implies (and (HasType @x45
(FStar.Seq.Base.seq Protocol.byte))

;; def=Protocol.fst(449,16-449,68); use=Protocol.fst(449,16-449,68)
(= (MonotonicArray.as_initialized_subseq Protocol.byte
(Prims.op_Subtraction @x0
@x4)
(MonotonicArray.suffix Protocol.byte
@x0
@x1
@x4)
@x15
(BoxInt 0)
@x24)
@x45)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(450,63-450,75)
(or label_28

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(450,63-450,75)
(>= (BoxInt_proj_0 (Prims.op_Addition @x4
@x24))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=MonotonicArray.fsti(289,17-289,23); use=Protocol.fst(450,63-450,75)
(or label_29

;; def=MonotonicArray.fsti(289,17-289,23); use=Protocol.fst(450,63-450,75)
(>= (BoxInt_proj_0 (Prims.op_Addition @x4
@x24))
(BoxInt_proj_0 @x4))
)


;; def=MonotonicArray.fsti(289,27-289,33); use=Protocol.fst(450,63-450,75)
(or label_30

;; def=MonotonicArray.fsti(289,27-289,33); use=Protocol.fst(450,63-450,75)
(<= (BoxInt_proj_0 (Prims.op_Addition @x4
@x24))
(BoxInt_proj_0 @x0))
)


;; def=MonotonicArray.fsti(289,37-289,67); use=Protocol.fst(450,63-450,75)
(or label_31

;; def=MonotonicArray.fsti(289,37-289,67); use=Protocol.fst(450,63-450,75)
(Valid 
;; def=MonotonicArray.fsti(289,37-289,67); use=Protocol.fst(450,63-450,75)
(MonotonicArray.init_arr_in_heap_i_j Protocol.byte
@x0
@x1
@x15
@x4
(Prims.op_Addition @x4
@x24))
)
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(431,8-469,42)
(forall ((@x46 Term))
 (! (implies (and (HasType @x46
(Tm_refine_2f2e27baf4b7704087f9df5373c6260b @x4
@x0
@x1
@x15))

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(431,8-469,42)
(= @x46
(Prims.op_Addition @x4
@x24))
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x47 Term))
 (! (implies (and (HasType @x47
(FStar.Seq.Base.seq Protocol.byte))

;; def=Protocol.fst(450,16-450,75); use=Protocol.fst(450,16-450,75)
(= (MonotonicArray.as_initialized_subseq Protocol.byte
@x0
@x1
@x15
@x4
(Prims.op_Addition @x4
@x24))
@x47)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Protocol.fst(40,26-40,51); use=Protocol.fst(451,38-451,47)
(or label_32

;; def=Protocol.fst(40,26-40,51); use=Protocol.fst(451,38-451,47)
(<= (BoxInt_proj_0 (FStar.Seq.Base.length Protocol.byte
(MonotonicArray.as_initialized_subseq Protocol.byte
(Prims.op_Subtraction @x0
@x4)
(MonotonicArray.suffix Protocol.byte
@x0
@x1
@x4)
@x15
(BoxInt 0)
@x24)))
(BoxInt_proj_0 (Protocol.fragment_size Dummy_value)))
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x48 Term))
 (! (implies (and (HasType @x48
(FStar.Seq.Base.seq Protocol.byte))

;; def=FStar.Seq.Properties.fsti(316,30-316,31); use=Protocol.fst(431,8-469,42)
(= (MonotonicArray.as_initialized_subseq Protocol.byte
(Prims.op_Subtraction @x0
@x4)
(MonotonicArray.suffix Protocol.byte
@x0
@x1
@x4)
@x15
(BoxInt 0)
@x24)
@x48)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x49 Term))
 (! (implies (and (HasType @x49
(FStar.Seq.Base.seq Protocol.message))

;; def=Prims.fst(175,42-175,43); use=Protocol.fst(431,8-469,42)
(= (FStar.Seq.Properties.snoc Protocol.message
(Protocol.log @x2
@x15)
(MonotonicArray.as_initialized_subseq Protocol.byte
(Prims.op_Subtraction @x0
@x4)
(MonotonicArray.suffix Protocol.byte
@x0
@x1
@x4)
@x15
(BoxInt 0)
@x24))
@x49)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x50 Term))
 (! (implies (and (HasType @x50
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=Protocol.fst(431,8-469,42)
(= (Prims.eq2 (FStar.Seq.Base.seq Protocol.message)
(Protocol.log @x2
@x26)
(FStar.Seq.Properties.snoc Protocol.message
(Protocol.log @x2
@x15)
(MonotonicArray.as_initialized_subseq Protocol.byte
(Prims.op_Subtraction @x0
@x4)
(MonotonicArray.suffix Protocol.byte
@x0
@x1
@x4)
@x15
(BoxInt 0)
@x24)))
@x50)
)

;; def=Prims.fst(441,29-441,97); use=Protocol.fst(451,12-451,18)
(and 
;; def=Protocol.fst(451,19-451,48); use=Protocol.fst(451,12-451,18)
(or label_33

;; def=Protocol.fst(451,19-451,48); use=Protocol.fst(451,12-451,18)
(= (Protocol.log @x2
@x26)
(FStar.Seq.Properties.snoc Protocol.message
(Protocol.log @x2
@x15)
(MonotonicArray.as_initialized_subseq Protocol.byte
(Prims.op_Subtraction @x0
@x4)
(MonotonicArray.suffix Protocol.byte
@x0
@x1
@x4)
@x15
(BoxInt 0)
@x24)))
)


;; def=Prims.fst(441,36-441,97); use=Protocol.fst(451,12-451,18)
(forall ((@x51 Term))
 (! (implies (and (HasType @x51
Prims.unit)

;; def=Protocol.fst(451,19-451,48); use=Protocol.fst(451,12-451,18)
(= (Protocol.log @x2
@x26)
(FStar.Seq.Properties.snoc Protocol.message
(Protocol.log @x2
@x15)
(MonotonicArray.as_initialized_subseq Protocol.byte
(Prims.op_Subtraction @x0
@x4)
(MonotonicArray.suffix Protocol.byte
@x0
@x1
@x4)
@x15
(BoxInt 0)
@x24)))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Protocol.fst(361,60-361,74); use=Protocol.fst(452,35-452,39)
(or label_34

;; def=Protocol.fst(361,60-361,74); use=Protocol.fst(452,35-452,39)
(<= (BoxInt_proj_0 (Prims.op_Addition @x4
@x24))
(BoxInt_proj_0 @x0))
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x52 Term))
 (! (implies (and (HasType @x52
Prims.nat)

;; def=Protocol.fst(361,50-439,18); use=Protocol.fst(431,8-469,42)
(= @x24
@x52)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Protocol.fst(362,12-362,38); use=Protocol.fst(452,40-452,42)
(or label_35

;; def=Protocol.fst(362,12-362,38); use=Protocol.fst(452,40-452,42)
(Valid 
;; def=Protocol.fst(362,12-362,38); use=Protocol.fst(452,40-452,42)
(Protocol.fully_initialized_in Protocol.byte
@x0
@x1
@x15)
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x53 Term))
 (! (implies (and (HasType @x53
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(362,5-436,16); use=Protocol.fst(431,8-469,42)
(= @x15
@x53)
)

;; def=Prims.fst(441,36-441,97); use=Protocol.fst(452,12-452,25)
(forall ((@x54 Term))
 (! (implies (and (HasType @x54
Prims.unit)

;; def=Protocol.fst(363,11-364,56); use=Protocol.fst(452,12-452,25)
(= (MonotonicArray.as_initialized_subseq Protocol.byte
(Prims.op_Subtraction @x0
@x4)
(MonotonicArray.suffix Protocol.byte
@x0
@x1
@x4)
@x15
(BoxInt 0)
@x24)
(MonotonicArray.as_initialized_subseq Protocol.byte
@x0
@x1
@x15
@x4
(Prims.op_Addition @x4
@x24)))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Protocol.fst(40,26-40,51); use=Protocol.fst(453,28-453,37)
(or label_36

;; def=Protocol.fst(40,26-40,51); use=Protocol.fst(453,28-453,37)
(<= (BoxInt_proj_0 (FStar.Seq.Base.length Protocol.byte
(MonotonicArray.as_initialized_subseq Protocol.byte
(Prims.op_Subtraction @x0
@x4)
(MonotonicArray.suffix Protocol.byte
@x0
@x1
@x4)
@x15
(BoxInt 0)
@x24)))
(BoxInt_proj_0 (Protocol.fragment_size Dummy_value)))
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x55 Term))
 (! (implies (and (HasType @x55
(FStar.Seq.Base.seq Protocol.byte))

;; def=Protocol.fst(368,29-449,25); use=Protocol.fst(431,8-469,42)
(= (MonotonicArray.as_initialized_subseq Protocol.byte
(Prims.op_Subtraction @x0
@x4)
(MonotonicArray.suffix Protocol.byte
@x0
@x1
@x4)
@x15
(BoxInt 0)
@x24)
@x55)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(453,50-453,52)
(or label_37

;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(453,50-453,52)
(Valid 
;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(453,50-453,52)
(Protocol.live_connection @x15
@x2)
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x56 Term))
 (! (implies (and (HasType @x56
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(151,24-436,16); use=Protocol.fst(431,8-469,42)
(= @x15
@x56)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x57 Term))
 (! (implies (and (HasType @x57
Prims.nat)

;; def=Protocol.fst(368,45-453,53); use=Protocol.fst(453,12-453,53)
(= (Protocol.ctr @x2
@x15)
@x57)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Protocol.fst(368,53-368,61); use=Protocol.fst(453,43-453,53)
(or label_38

;; def=Protocol.fst(368,53-368,61); use=Protocol.fst(453,43-453,53)
(<= (BoxInt_proj_0 @x3)
(BoxInt_proj_0 (Protocol.ctr @x2
@x15)))
)


;; def=Protocol.fst(368,65-368,81); use=Protocol.fst(453,43-453,53)
(or label_39

;; def=Protocol.fst(368,65-368,81); use=Protocol.fst(453,43-453,53)
(<= (BoxInt_proj_0 (Protocol.ctr @x2
@x15))
(BoxInt_proj_0 (FStar.Seq.Base.length Protocol.message
(Protocol.log @x2
@x15))))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(431,8-469,42)
(forall ((@x58 Term))
 (! (implies (and (HasType @x58
(Tm_refine_2fb9520fc69973bb980150207c8c3ef0 @x3
@x2
@x15))

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(431,8-469,42)
(= @x58
(Protocol.ctr @x2
@x15))


;; def=Protocol.fst(368,46-453,53); use=Protocol.fst(431,8-469,42)
(= (Protocol.ctr @x2
@x15)
@x58)
)

;; def=Prims.fst(441,36-441,97); use=Protocol.fst(453,12-453,22)
(forall ((@x59 Term))
 (! (implies (and (HasType @x59
Prims.unit)

;; def=Protocol.fst(369,10-369,55); use=Protocol.fst(453,12-453,22)
(= (FStar.Seq.Base.slice Protocol.message
(Protocol.log @x2
@x15)
@x3
(Protocol.ctr @x2
@x15))
(FStar.Seq.Base.slice Protocol.message
(FStar.Seq.Properties.snoc Protocol.message
(Protocol.log @x2
@x15)
(MonotonicArray.as_initialized_subseq Protocol.byte
(Prims.op_Subtraction @x0
@x4)
(MonotonicArray.suffix Protocol.byte
@x0
@x1
@x4)
@x15
(BoxInt 0)
@x24))
@x3
(Protocol.ctr @x2
@x15)))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Protocol.fst(40,26-40,51); use=Protocol.fst(454,29-454,38)
(or label_40

;; def=Protocol.fst(40,26-40,51); use=Protocol.fst(454,29-454,38)
(<= (BoxInt_proj_0 (FStar.Seq.Base.length Protocol.byte
(MonotonicArray.as_initialized_subseq Protocol.byte
(Prims.op_Subtraction @x0
@x4)
(MonotonicArray.suffix Protocol.byte
@x0
@x1
@x4)
@x15
(BoxInt 0)
@x24)))
(BoxInt_proj_0 (Protocol.fragment_size Dummy_value)))
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x60 Term))
 (! (implies (and (HasType @x60
(FStar.Seq.Base.seq Protocol.byte))

;; def=Protocol.fst(372,30-449,25); use=Protocol.fst(431,8-469,42)
(= (MonotonicArray.as_initialized_subseq Protocol.byte
(Prims.op_Subtraction @x0
@x4)
(MonotonicArray.suffix Protocol.byte
@x0
@x1
@x4)
@x15
(BoxInt 0)
@x24)
@x60)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Protocol.fst(372,45-372,65); use=Protocol.fst(454,39-454,43)
(or label_41

;; def=Protocol.fst(372,45-372,65); use=Protocol.fst(454,39-454,43)
(<= (BoxInt_proj_0 @x3)
(BoxInt_proj_0 (FStar.Seq.Base.length Protocol.message
(Protocol.log @x2
@x15))))
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x61 Term))
 (! (implies (and (HasType @x61
Prims.nat)

;; def=Protocol.fst(372,36-430,31); use=Protocol.fst(431,8-469,42)
(= @x3
@x61)
)

;; def=Prims.fst(441,36-441,97); use=Protocol.fst(454,12-454,23)
(forall ((@x62 Term))
 (! (implies (and (HasType @x62
Prims.unit)

;; def=Protocol.fst(373,10-373,92); use=Protocol.fst(454,12-454,23)
(= (FStar.Seq.Base.slice Protocol.message
(FStar.Seq.Properties.snoc Protocol.message
(Protocol.log @x2
@x15)
(MonotonicArray.as_initialized_subseq Protocol.byte
(Prims.op_Subtraction @x0
@x4)
(MonotonicArray.suffix Protocol.byte
@x0
@x1
@x4)
@x15
(BoxInt 0)
@x24))
@x3
(Prims.op_Addition (FStar.Seq.Base.length Protocol.message
(Protocol.log @x2
@x15))
(BoxInt 1)))
(FStar.Seq.Properties.snoc Protocol.message
(FStar.Seq.Base.slice Protocol.message
(Protocol.log @x2
@x15)
@x3
(FStar.Seq.Base.length Protocol.message
(Protocol.log @x2
@x15)))
(MonotonicArray.as_initialized_subseq Protocol.byte
(Prims.op_Subtraction @x0
@x4)
(MonotonicArray.suffix Protocol.byte
@x0
@x1
@x4)
@x15
(BoxInt 0)
@x24)))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(455,26-455,28)
(or label_42

;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(455,26-455,28)
(Valid 
;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(455,26-455,28)
(Protocol.live_connection @x15
@x2)
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x63 Term))
 (! (implies (and (HasType @x63
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(151,24-436,16); use=Protocol.fst(431,8-469,42)
(= @x15
@x63)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x64 Term))
 (! (implies (and (HasType @x64
Prims.nat)

;; def=Protocol.fst(151,60-455,28); use=Protocol.fst(455,20-455,28)
(= (Protocol.ctr @x2
@x15)
@x64)
)

;; def=Prims.fst(356,2-356,58); use=Protocol.fst(431,8-469,42)
(forall ((@x65 Term))
 (! (implies (and (HasType @x65
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(431,8-469,42)
(= @x65
(Protocol.ctr @x2
@x15))


;; def=dummy(0,0-0,0); use=Protocol.fst(431,8-469,42)
(= (Protocol.ctr @x2
@x15)
@x65)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x66 Term))
 (! (implies (and (HasType @x66
Prims.int)

;; def=dummy(0,0-0,0); use=Protocol.fst(431,8-469,42)
(= (Prims.op_Addition (Protocol.ctr @x2
@x15)
(BoxInt 1))
@x66)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(455,41-455,43)
(or label_43

;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(455,41-455,43)
(Valid 
;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(455,41-455,43)
(Protocol.live_connection @x26
@x2)
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x67 Term))
 (! (implies (and (HasType @x67
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(151,24-440,16); use=Protocol.fst(431,8-469,42)
(= @x26
@x67)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x68 Term))
 (! (implies (and (HasType @x68
Prims.nat)

;; def=Protocol.fst(151,60-455,43); use=Protocol.fst(455,35-455,43)
(= (Protocol.ctr @x2
@x26)
@x68)
)

;; def=Prims.fst(356,2-356,58); use=Protocol.fst(431,8-469,42)
(forall ((@x69 Term))
 (! (implies (and (HasType @x69
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(431,8-469,42)
(= @x69
(Protocol.ctr @x2
@x26))


;; def=dummy(0,0-0,0); use=Protocol.fst(431,8-469,42)
(= (Protocol.ctr @x2
@x26)
@x69)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x70 Term))
 (! (implies (and (HasType @x70
Prims.bool)

;; def=Prims.fst(180,10-180,11); use=Protocol.fst(431,8-469,42)
(= (Prims.op_Equality Prims.int
(Prims.op_Addition (Protocol.ctr @x2
@x15)
(BoxInt 1))
(Protocol.ctr @x2
@x26))
@x70)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x71 Term))
 (! (implies (and (HasType @x71
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=Protocol.fst(431,8-469,42)
(= (Prims.b2t (Prims.op_Equality Prims.int
(Prims.op_Addition (Protocol.ctr @x2
@x15)
(BoxInt 1))
(Protocol.ctr @x2
@x26)))
@x71)
)

;; def=Prims.fst(441,29-441,97); use=Protocol.fst(455,12-455,18)
(and 
;; def=Protocol.fst(455,19-455,44); use=Protocol.fst(455,12-455,18)
(or label_44

;; def=Protocol.fst(455,19-455,44); use=Protocol.fst(455,12-455,18)
(= (Prims.op_Addition (Protocol.ctr @x2
@x15)
(BoxInt 1))
(Protocol.ctr @x2
@x26))
)


;; def=Prims.fst(441,36-441,97); use=Protocol.fst(455,12-455,18)
(forall ((@x72 Term))
 (! (implies (and (HasType @x72
Prims.unit)

;; def=Protocol.fst(455,19-455,44); use=Protocol.fst(455,12-455,18)
(= (Prims.op_Addition (Protocol.ctr @x2
@x15)
(BoxInt 1))
(Protocol.ctr @x2
@x26))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and (implies 
;; def=Protocol.fst(414,24-414,96); use=Protocol.fst(456,51-456,52)
(and 
;; def=Protocol.fst(414,24-414,32); use=Protocol.fst(456,51-456,52)
(BoxBool_proj_0 (Protocol.sender @x2))


;; def=Protocol.fst(414,36-414,96); use=Protocol.fst(456,51-456,52)
(Valid 
;; def=Protocol.fst(414,36-414,96); use=Protocol.fst(456,51-456,52)
(FStar.Set.disjoint Prims.nat
(Protocol.connection_footprint @x2)
(MonotonicArray.array_footprint Protocol.byte
@x0
@x1))
)
)


;; def=Protocol.fst(406,16-406,24); use=Protocol.fst(456,51-456,52)
(or label_45

;; def=Protocol.fst(406,16-406,24); use=Protocol.fst(456,51-456,52)
(BoxBool_proj_0 (Protocol.sender @x2))
)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x73 Term))
 (! (implies (and (HasType @x73
(Tm_refine_377d0118686d11596ae874abd2ea7677 @x0
@x1))

;; def=Protocol.fst(406,3-430,26); use=Protocol.fst(431,8-469,42)
(= @x2
@x73)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Protocol.fst(406,35-406,56); use=Protocol.fst(456,53-456,55)
(or label_46

;; def=Protocol.fst(406,35-406,56); use=Protocol.fst(456,53-456,55)
(Valid 
;; def=Protocol.fst(406,35-406,56); use=Protocol.fst(456,53-456,55)
(Protocol.live_connection @x15
@x2)
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x74 Term))
 (! (implies (and (HasType @x74
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(406,28-436,16); use=Protocol.fst(431,8-469,42)
(= @x15
@x74)
)

;; def=Prims.fst(441,36-441,97); use=Protocol.fst(456,5-456,50)
(forall ((@x75 Term))
 (! (implies (and (HasType @x75
Prims.unit)

;; def=Protocol.fst(407,9-407,42); use=Protocol.fst(456,5-456,50)
(= (Protocol.ctr @x2
@x15)
(FStar.Seq.Base.length Protocol.message
(Protocol.log @x2
@x15)))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and (implies 
;; def=Protocol.fst(414,24-414,96); use=Protocol.fst(457,51-457,52)
(and 
;; def=Protocol.fst(414,24-414,32); use=Protocol.fst(457,51-457,52)
(BoxBool_proj_0 (Protocol.sender @x2))


;; def=Protocol.fst(414,36-414,96); use=Protocol.fst(457,51-457,52)
(Valid 
;; def=Protocol.fst(414,36-414,96); use=Protocol.fst(457,51-457,52)
(FStar.Set.disjoint Prims.nat
(Protocol.connection_footprint @x2)
(MonotonicArray.array_footprint Protocol.byte
@x0
@x1))
)
)


;; def=Protocol.fst(406,16-406,24); use=Protocol.fst(457,51-457,52)
(or label_47

;; def=Protocol.fst(406,16-406,24); use=Protocol.fst(457,51-457,52)
(BoxBool_proj_0 (Protocol.sender @x2))
)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x76 Term))
 (! (implies (and (HasType @x76
(Tm_refine_377d0118686d11596ae874abd2ea7677 @x0
@x1))

;; def=Protocol.fst(406,3-430,26); use=Protocol.fst(431,8-469,42)
(= @x2
@x76)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Protocol.fst(406,35-406,56); use=Protocol.fst(457,53-457,55)
(or label_48

;; def=Protocol.fst(406,35-406,56); use=Protocol.fst(457,53-457,55)
(Valid 
;; def=Protocol.fst(406,35-406,56); use=Protocol.fst(457,53-457,55)
(Protocol.live_connection @x26
@x2)
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x77 Term))
 (! (implies (and (HasType @x77
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(406,28-440,16); use=Protocol.fst(431,8-469,42)
(= @x26
@x77)
)

;; def=Prims.fst(441,36-441,97); use=Protocol.fst(457,5-457,50)
(forall ((@x78 Term))
 (! (implies (and (HasType @x78
Prims.unit)

;; def=Protocol.fst(407,9-407,42); use=Protocol.fst(457,5-457,50)
(= (Protocol.ctr @x2
@x26)
(FStar.Seq.Base.length Protocol.message
(Protocol.log @x2
@x26)))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Prims.fst(73,23-73,30); use=Protocol.fst(458,13-458,16)
(or label_49

;; def=Prims.fst(73,23-73,30); use=Protocol.fst(458,13-458,16)
(Valid 
;; def=Prims.fst(73,23-73,30); use=Protocol.fst(458,13-458,16)
(Prims.hasEq Prims.nat)
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x79 Term))
 (! (implies (and (HasType @x79
Tm_type)

;; def=Prims.fst(588,31-588,32); use=Protocol.fst(431,8-469,42)
(= Prims.nat
@x79)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(458,19-458,21)
(or label_50

;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(458,19-458,21)
(Valid 
;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(458,19-458,21)
(Protocol.live_connection @x15
@x2)
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x80 Term))
 (! (implies (and (HasType @x80
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(151,24-436,16); use=Protocol.fst(431,8-469,42)
(= @x15
@x80)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x81 Term))
 (! (implies (and (HasType @x81
Prims.nat)

;; def=dummy(0,0-0,0); use=Protocol.fst(431,8-469,42)
(= (Protocol.ctr @x2
@x15)
@x81)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x82 Term))
 (! (implies (and (HasType @x82
Prims.bool)

;; def=Prims.fst(180,10-180,11); use=Protocol.fst(431,8-469,42)
(= (Prims.op_Equality Prims.nat
(Protocol.ctr @x2
@x15)
(FStar.Seq.Base.length Protocol.message
(Protocol.log @x2
@x15)))
@x82)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x83 Term))
 (! (implies (and (HasType @x83
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=Protocol.fst(431,8-469,42)
(= (Prims.b2t (Prims.op_Equality Prims.nat
(Protocol.ctr @x2
@x15)
(FStar.Seq.Base.length Protocol.message
(Protocol.log @x2
@x15))))
@x83)
)

;; def=Prims.fst(441,29-441,97); use=Protocol.fst(458,5-458,11)
(and 
;; def=Protocol.fst(458,12-458,40); use=Protocol.fst(458,5-458,11)
(or label_51

;; def=Protocol.fst(458,12-458,40); use=Protocol.fst(458,5-458,11)
(= (Protocol.ctr @x2
@x15)
(FStar.Seq.Base.length Protocol.message
(Protocol.log @x2
@x15)))
)


;; def=Prims.fst(441,36-441,97); use=Protocol.fst(458,5-458,11)
(forall ((@x84 Term))
 (! (implies (and (HasType @x84
Prims.unit)

;; def=Protocol.fst(458,12-458,40); use=Protocol.fst(458,5-458,11)
(= (Protocol.ctr @x2
@x15)
(FStar.Seq.Base.length Protocol.message
(Protocol.log @x2
@x15)))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Prims.fst(73,23-73,30); use=Protocol.fst(459,35-459,41)
(or label_52

;; def=Prims.fst(73,23-73,30); use=Protocol.fst(459,35-459,41)
(Valid 
;; def=Prims.fst(73,23-73,30); use=Protocol.fst(459,35-459,41)
(Prims.hasEq Prims.nat)
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x85 Term))
 (! (implies (and (HasType @x85
Tm_type)

;; def=Prims.fst(588,31-588,32); use=Protocol.fst(431,8-469,42)
(= Prims.nat
@x85)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(459,26-459,28)
(or label_53

;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(459,26-459,28)
(Valid 
;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(459,26-459,28)
(Protocol.live_connection @x26
@x2)
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x86 Term))
 (! (implies (and (HasType @x86
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(151,24-440,16); use=Protocol.fst(431,8-469,42)
(= @x26
@x86)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x87 Term))
 (! (implies (and (HasType @x87
Prims.nat)

;; def=dummy(0,0-0,0); use=Protocol.fst(431,8-469,42)
(= (Protocol.ctr @x2
@x26)
@x87)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x88 Term))
 (! (implies (and (HasType @x88
Prims.bool)

;; def=Prims.fst(180,10-180,11); use=Protocol.fst(431,8-469,42)
(= (Prims.op_Equality Prims.nat
(Protocol.ctr @x2
@x26)
(FStar.Seq.Base.length Protocol.message
(Protocol.log @x2
@x26)))
@x88)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x89 Term))
 (! (implies (and (HasType @x89
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=Protocol.fst(431,8-469,42)
(= (Prims.b2t (Prims.op_Equality Prims.nat
(Protocol.ctr @x2
@x26)
(FStar.Seq.Base.length Protocol.message
(Protocol.log @x2
@x26))))
@x89)
)

;; def=Prims.fst(441,29-441,97); use=Protocol.fst(459,12-459,18)
(and 
;; def=Protocol.fst(459,19-459,47); use=Protocol.fst(459,12-459,18)
(or label_54

;; def=Protocol.fst(459,19-459,47); use=Protocol.fst(459,12-459,18)
(= (Protocol.ctr @x2
@x26)
(FStar.Seq.Base.length Protocol.message
(Protocol.log @x2
@x26)))
)


;; def=Prims.fst(441,36-441,97); use=Protocol.fst(459,12-459,18)
(forall ((@x90 Term))
 (! (implies (and (HasType @x90
Prims.unit)

;; def=Protocol.fst(459,19-459,47); use=Protocol.fst(459,12-459,18)
(= (Protocol.ctr @x2
@x26)
(FStar.Seq.Base.length Protocol.message
(Protocol.log @x2
@x26)))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and (implies 
;; def=Protocol.fst(416,19-416,27); use=Protocol.fst(460,53-460,56)
(<= (BoxInt_proj_0 @x4)
(BoxInt_proj_0 @x0))


;; def=MonotonicArray.fsti(289,17-289,67); use=Protocol.fst(460,53-460,56)
(and 
;; def=MonotonicArray.fsti(289,17-289,23); use=Protocol.fst(460,53-460,56)
(or label_55

;; def=MonotonicArray.fsti(289,17-289,23); use=Protocol.fst(460,53-460,56)
(>= (BoxInt_proj_0 @x4)
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=MonotonicArray.fsti(289,27-289,33); use=Protocol.fst(460,53-460,56)
(or label_56

;; def=MonotonicArray.fsti(289,27-289,33); use=Protocol.fst(460,53-460,56)
(<= (BoxInt_proj_0 @x4)
(BoxInt_proj_0 @x0))
)


;; def=MonotonicArray.fsti(289,37-289,67); use=Protocol.fst(460,53-460,56)
(or label_57

;; def=MonotonicArray.fsti(289,37-289,67); use=Protocol.fst(460,53-460,56)
(Valid 
;; def=MonotonicArray.fsti(289,37-289,67); use=Protocol.fst(460,53-460,56)
(MonotonicArray.init_arr_in_heap_i_j Protocol.byte
@x0
@x1
@x26
(BoxInt 0)
@x4)
)
)
)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x91 Term))
 (! (implies (and (HasType @x91
(Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x0))

;; def=MonotonicArray.fsti(289,11-289,12); use=Protocol.fst(431,8-469,42)
(= @x4
@x91)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x92 Term))
 (! (implies (and (HasType @x92
(FStar.Seq.Base.seq Protocol.byte))

;; def=Protocol.fst(460,16-460,56); use=Protocol.fst(460,16-460,56)
(= (MonotonicArray.as_initialized_subseq Protocol.byte
@x0
@x1
@x26
(BoxInt 0)
@x4)
@x92)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(461,53-461,65)
(or label_58

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(461,53-461,65)
(>= (BoxInt_proj_0 (Prims.op_Addition @x4
@x24))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=MonotonicArray.fsti(289,17-289,23); use=Protocol.fst(461,53-461,65)
(or label_59

;; def=MonotonicArray.fsti(289,17-289,23); use=Protocol.fst(461,53-461,65)
(>= (BoxInt_proj_0 (Prims.op_Addition @x4
@x24))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=MonotonicArray.fsti(289,27-289,33); use=Protocol.fst(461,53-461,65)
(or label_60

;; def=MonotonicArray.fsti(289,27-289,33); use=Protocol.fst(461,53-461,65)
(<= (BoxInt_proj_0 (Prims.op_Addition @x4
@x24))
(BoxInt_proj_0 @x0))
)


;; def=MonotonicArray.fsti(289,37-289,67); use=Protocol.fst(461,53-461,65)
(or label_61

;; def=MonotonicArray.fsti(289,37-289,67); use=Protocol.fst(461,53-461,65)
(Valid 
;; def=MonotonicArray.fsti(289,37-289,67); use=Protocol.fst(461,53-461,65)
(MonotonicArray.init_arr_in_heap_i_j Protocol.byte
@x0
@x1
@x26
(BoxInt 0)
(Prims.op_Addition @x4
@x24))
)
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(431,8-469,42)
(forall ((@x93 Term))
 (! (implies (and (HasType @x93
(Tm_refine_e715f3c5973534a16bc883ef65d67e29 @x0
@x1
@x26))

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(431,8-469,42)
(= @x93
(Prims.op_Addition @x4
@x24))
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x94 Term))
 (! (implies (and (HasType @x94
(FStar.Seq.Base.seq Protocol.byte))

;; def=Protocol.fst(461,16-461,65); use=Protocol.fst(461,16-461,65)
(= (MonotonicArray.as_initialized_subseq Protocol.byte
@x0
@x1
@x26
(BoxInt 0)
(Prims.op_Addition @x4
@x24))
@x94)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Protocol.fst(377,59-377,74); use=Protocol.fst(462,35-462,39)
(or label_62

;; def=Protocol.fst(377,59-377,74); use=Protocol.fst(462,35-462,39)
(<= (BoxInt_proj_0 (Prims.op_Addition @x4
@x24))
(BoxInt_proj_0 @x0))
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x95 Term))
 (! (implies (and (HasType @x95
Prims.nat)

;; def=Protocol.fst(377,50-439,18); use=Protocol.fst(431,8-469,42)
(= @x24
@x95)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Protocol.fst(377,85-377,111); use=Protocol.fst(462,40-462,42)
(or label_63

;; def=Protocol.fst(377,85-377,111); use=Protocol.fst(462,40-462,42)
(Valid 
;; def=Protocol.fst(377,85-377,111); use=Protocol.fst(462,40-462,42)
(Protocol.fully_initialized_in Protocol.byte
@x0
@x1
@x26)
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x96 Term))
 (! (implies (and (HasType @x96
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(377,78-440,16); use=Protocol.fst(431,8-469,42)
(= @x26
@x96)
)

;; def=Prims.fst(441,36-441,97); use=Protocol.fst(462,12-462,25)
(forall ((@x97 Term))
 (! (implies (and (HasType @x97
Prims.unit)

;; def=Protocol.fst(382,13-382,38); use=Protocol.fst(462,12-462,25)
(= (MonotonicArray.as_initialized_subseq Protocol.byte
@x0
@x1
@x26
(BoxInt 0)
(Prims.op_Addition @x4
@x24))
(FStar.Seq.Base.append Protocol.byte
(MonotonicArray.as_initialized_subseq Protocol.byte
@x0
@x1
@x26
(BoxInt 0)
@x4)
(MonotonicArray.as_initialized_subseq Protocol.byte
(Prims.op_Subtraction @x0
@x4)
(MonotonicArray.suffix Protocol.byte
@x0
@x1
@x4)
@x26
(BoxInt 0)
@x24)))
)

;; def=Prims.fst(441,29-441,97); use=Protocol.fst(463,12-463,18)
(and 
;; def=Protocol.fst(463,19-463,46); use=Protocol.fst(463,12-463,18)
(or label_64

;; def=Protocol.fst(463,19-463,46); use=Protocol.fst(463,12-463,18)
(= (MonotonicArray.as_initialized_subseq Protocol.byte
@x0
@x1
@x26
(BoxInt 0)
(Prims.op_Addition @x4
@x24))
(FStar.Seq.Base.append Protocol.byte
(MonotonicArray.as_initialized_subseq Protocol.byte
@x0
@x1
@x26
(BoxInt 0)
@x4)
(MonotonicArray.as_initialized_subseq Protocol.byte
(Prims.op_Subtraction @x0
@x4)
(MonotonicArray.suffix Protocol.byte
@x0
@x1
@x4)
@x15
(BoxInt 0)
@x24)))
)


;; def=Prims.fst(441,36-441,97); use=Protocol.fst(463,12-463,18)
(forall ((@x98 Term))
 (! (implies (and (HasType @x98
Prims.unit)

;; def=Protocol.fst(463,19-463,46); use=Protocol.fst(463,12-463,18)
(= (MonotonicArray.as_initialized_subseq Protocol.byte
@x0
@x1
@x26
(BoxInt 0)
(Prims.op_Addition @x4
@x24))
(FStar.Seq.Base.append Protocol.byte
(MonotonicArray.as_initialized_subseq Protocol.byte
@x0
@x1
@x26
(BoxInt 0)
@x4)
(MonotonicArray.as_initialized_subseq Protocol.byte
(Prims.op_Subtraction @x0
@x4)
(MonotonicArray.suffix Protocol.byte
@x0
@x1
@x4)
@x15
(BoxInt 0)
@x24)))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(464,62-464,64)
(or label_65

;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(464,62-464,64)
(Valid 
;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(464,62-464,64)
(Protocol.live_connection @x15
@x2)
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x99 Term))
 (! (implies (and (HasType @x99
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(151,24-436,16); use=Protocol.fst(431,8-469,42)
(= @x15
@x99)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x100 Term))
 (! (implies (and (HasType @x100
Prims.nat)

;; def=FStar.Seq.Base.fsti(64,43-64,73); use=Protocol.fst(464,39-464,65)
(= (Protocol.ctr @x2
@x15)
@x100)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Protocol.fst(464,55-464,65); use=Protocol.fst(464,55-464,65)
(or label_66
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x3
(Protocol.ctr @x2
@x15))))


;; def=Protocol.fst(464,55-464,65); use=Protocol.fst(464,55-464,65)
(or label_67
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (Protocol.ctr @x2
@x15)
(FStar.Seq.Base.length Protocol.message
(Protocol.log @x2
@x15)))))


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(431,8-469,42)
(forall ((@x101 Term))
 (! (implies (and (HasType @x101
(Tm_refine_3f488ea3a355f76c02bba79a4548889c @x3
@x2
@x15))

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(431,8-469,42)
(= @x101
(Protocol.ctr @x2
@x15))


;; def=FStar.Seq.Base.fsti(64,43-64,44); use=Protocol.fst(431,8-469,42)
(= (Protocol.ctr @x2
@x15)
@x101)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x102 Term))
 (! (implies (and (HasType @x102
(FStar.Seq.Base.seq Protocol.message))

;; def=Protocol.fst(325,20-464,66); use=Protocol.fst(431,8-469,42)
(= (FStar.Seq.Base.slice Protocol.message
(Protocol.log @x2
@x15)
@x3
(Protocol.ctr @x2
@x15))
@x102)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x103 Term))
 (! (implies (and (HasType @x103
(FStar.Seq.Base.seq Protocol.byte))

;; def=Prims.fst(175,42-175,43); use=Protocol.fst(431,8-469,42)
(= (Protocol.flatten (FStar.Seq.Base.slice Protocol.message
(Protocol.log @x2
@x15)
@x3
(Protocol.ctr @x2
@x15)))
@x103)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x104 Term))
 (! (implies (and (HasType @x104
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=Protocol.fst(431,8-469,42)
(= (Prims.eq2 (FStar.Seq.Base.seq Protocol.byte)
(MonotonicArray.as_initialized_subseq Protocol.byte
@x0
@x1
@x26
(BoxInt 0)
@x4)
(Protocol.flatten (FStar.Seq.Base.slice Protocol.message
(Protocol.log @x2
@x15)
@x3
(Protocol.ctr @x2
@x15))))
@x104)
)

;; def=Prims.fst(441,29-441,97); use=Protocol.fst(464,12-464,18)
(and 
;; def=Protocol.fst(464,19-464,67); use=Protocol.fst(464,12-464,18)
(or label_68

;; def=Protocol.fst(464,19-464,67); use=Protocol.fst(464,12-464,18)
(= (MonotonicArray.as_initialized_subseq Protocol.byte
@x0
@x1
@x26
(BoxInt 0)
@x4)
(Protocol.flatten (FStar.Seq.Base.slice Protocol.message
(Protocol.log @x2
@x15)
@x3
(Protocol.ctr @x2
@x15))))
)


;; def=Prims.fst(441,36-441,97); use=Protocol.fst(464,12-464,18)
(forall ((@x105 Term))
 (! (implies (and (HasType @x105
Prims.unit)

;; def=Protocol.fst(464,19-464,67); use=Protocol.fst(464,12-464,18)
(= (MonotonicArray.as_initialized_subseq Protocol.byte
@x0
@x1
@x26
(BoxInt 0)
@x4)
(Protocol.flatten (FStar.Seq.Base.slice Protocol.message
(Protocol.log @x2
@x15)
@x3
(Protocol.ctr @x2
@x15))))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(465,59-465,61)
(or label_69

;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(465,59-465,61)
(Valid 
;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(465,59-465,61)
(Protocol.live_connection @x15
@x2)
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x106 Term))
 (! (implies (and (HasType @x106
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(151,24-436,16); use=Protocol.fst(431,8-469,42)
(= @x15
@x106)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x107 Term))
 (! (implies (and (HasType @x107
Prims.nat)

;; def=FStar.Seq.Base.fsti(64,43-64,73); use=Protocol.fst(465,36-465,62)
(= (Protocol.ctr @x2
@x15)
@x107)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Protocol.fst(465,52-465,62); use=Protocol.fst(465,52-465,62)
(or label_70
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x3
(Protocol.ctr @x2
@x15))))


;; def=Protocol.fst(465,52-465,62); use=Protocol.fst(465,52-465,62)
(or label_71
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (Protocol.ctr @x2
@x15)
(FStar.Seq.Base.length Protocol.message
(Protocol.log @x2
@x15)))))


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(431,8-469,42)
(forall ((@x108 Term))
 (! (implies (and (HasType @x108
(Tm_refine_3f488ea3a355f76c02bba79a4548889c @x3
@x2
@x15))

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(431,8-469,42)
(= @x108
(Protocol.ctr @x2
@x15))


;; def=FStar.Seq.Base.fsti(64,43-64,44); use=Protocol.fst(431,8-469,42)
(= (Protocol.ctr @x2
@x15)
@x108)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x109 Term))
 (! (implies (and (HasType @x109
(FStar.Seq.Base.seq Protocol.message))

;; def=Protocol.fst(327,31-465,63); use=Protocol.fst(431,8-469,42)
(= (FStar.Seq.Base.slice Protocol.message
(Protocol.log @x2
@x15)
@x3
(Protocol.ctr @x2
@x15))
@x109)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Protocol.fst(40,26-40,51); use=Protocol.fst(465,64-465,73)
(or label_72

;; def=Protocol.fst(40,26-40,51); use=Protocol.fst(465,64-465,73)
(<= (BoxInt_proj_0 (FStar.Seq.Base.length Protocol.byte
(MonotonicArray.as_initialized_subseq Protocol.byte
(Prims.op_Subtraction @x0
@x4)
(MonotonicArray.suffix Protocol.byte
@x0
@x1
@x4)
@x15
(BoxInt 0)
@x24)))
(BoxInt_proj_0 (Protocol.fragment_size Dummy_value)))
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x110 Term))
 (! (implies (and (HasType @x110
(FStar.Seq.Base.seq Protocol.byte))

;; def=Protocol.fst(327,47-449,25); use=Protocol.fst(431,8-469,42)
(= (MonotonicArray.as_initialized_subseq Protocol.byte
(Prims.op_Subtraction @x0
@x4)
(MonotonicArray.suffix Protocol.byte
@x0
@x1
@x4)
@x15
(BoxInt 0)
@x24)
@x110)
)

;; def=Prims.fst(441,36-441,97); use=Protocol.fst(465,12-465,30)
(forall ((@x111 Term))
 (! (implies (and (HasType @x111
Prims.unit)

;; def=Protocol.fst(329,19-329,63); use=Protocol.fst(465,12-465,30)
(= (Protocol.flatten (FStar.Seq.Properties.snoc Protocol.message
(FStar.Seq.Base.slice Protocol.message
(Protocol.log @x2
@x15)
@x3
(Protocol.ctr @x2
@x15))
(MonotonicArray.as_initialized_subseq Protocol.byte
(Prims.op_Subtraction @x0
@x4)
(MonotonicArray.suffix Protocol.byte
@x0
@x1
@x4)
@x15
(BoxInt 0)
@x24)))
(FStar.Seq.Base.append Protocol.byte
(Protocol.flatten (FStar.Seq.Base.slice Protocol.message
(Protocol.log @x2
@x15)
@x3
(Protocol.ctr @x2
@x15)))
(MonotonicArray.as_initialized_subseq Protocol.byte
(Prims.op_Subtraction @x0
@x4)
(MonotonicArray.suffix Protocol.byte
@x0
@x1
@x4)
@x15
(BoxInt 0)
@x24)))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(466,62-466,64)
(or label_73

;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(466,62-466,64)
(Valid 
;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(466,62-466,64)
(Protocol.live_connection @x26
@x2)
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x112 Term))
 (! (implies (and (HasType @x112
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(151,24-440,16); use=Protocol.fst(431,8-469,42)
(= @x26
@x112)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x113 Term))
 (! (implies (and (HasType @x113
Prims.nat)

;; def=FStar.Seq.Base.fsti(64,43-64,73); use=Protocol.fst(466,39-466,65)
(= (Protocol.ctr @x2
@x26)
@x113)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Protocol.fst(466,55-466,65); use=Protocol.fst(466,55-466,65)
(or label_74
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x3
(Protocol.ctr @x2
@x26))))


;; def=Protocol.fst(466,55-466,65); use=Protocol.fst(466,55-466,65)
(or label_75
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (Protocol.ctr @x2
@x26)
(FStar.Seq.Base.length Protocol.message
(Protocol.log @x2
@x26)))))


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(431,8-469,42)
(forall ((@x114 Term))
 (! (implies (and (HasType @x114
(Tm_refine_3f488ea3a355f76c02bba79a4548889c @x3
@x2
@x26))

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(431,8-469,42)
(= @x114
(Protocol.ctr @x2
@x26))


;; def=FStar.Seq.Base.fsti(64,43-64,44); use=Protocol.fst(431,8-469,42)
(= (Protocol.ctr @x2
@x26)
@x114)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x115 Term))
 (! (implies (and (HasType @x115
(FStar.Seq.Base.seq Protocol.message))

;; def=Protocol.fst(325,20-466,66); use=Protocol.fst(431,8-469,42)
(= (FStar.Seq.Base.slice Protocol.message
(Protocol.log @x2
@x26)
@x3
(Protocol.ctr @x2
@x26))
@x115)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x116 Term))
 (! (implies (and (HasType @x116
(FStar.Seq.Base.seq Protocol.byte))

;; def=Prims.fst(175,42-175,43); use=Protocol.fst(431,8-469,42)
(= (Protocol.flatten (FStar.Seq.Base.slice Protocol.message
(Protocol.log @x2
@x26)
@x3
(Protocol.ctr @x2
@x26)))
@x116)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x117 Term))
 (! (implies (and (HasType @x117
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=Protocol.fst(431,8-469,42)
(= (Prims.eq2 (FStar.Seq.Base.seq Protocol.byte)
(MonotonicArray.as_initialized_subseq Protocol.byte
@x0
@x1
@x26
(BoxInt 0)
(Prims.op_Addition @x4
@x24))
(Protocol.flatten (FStar.Seq.Base.slice Protocol.message
(Protocol.log @x2
@x26)
@x3
(Protocol.ctr @x2
@x26))))
@x117)
)

;; def=Prims.fst(441,29-441,97); use=Protocol.fst(466,12-466,18)
(and 
;; def=Protocol.fst(466,19-466,67); use=Protocol.fst(466,12-466,18)
(or label_76

;; def=Protocol.fst(466,19-466,67); use=Protocol.fst(466,12-466,18)
(= (MonotonicArray.as_initialized_subseq Protocol.byte
@x0
@x1
@x26
(BoxInt 0)
(Prims.op_Addition @x4
@x24))
(Protocol.flatten (FStar.Seq.Base.slice Protocol.message
(Protocol.log @x2
@x26)
@x3
(Protocol.ctr @x2
@x26))))
)


;; def=Prims.fst(441,36-441,97); use=Protocol.fst(466,12-466,18)
(forall ((@x118 Term))
 (! (implies (and (HasType @x118
Prims.unit)

;; def=Protocol.fst(466,19-466,67); use=Protocol.fst(466,12-466,18)
(= (MonotonicArray.as_initialized_subseq Protocol.byte
@x0
@x1
@x26
(BoxInt 0)
(Prims.op_Addition @x4
@x24))
(Protocol.flatten (FStar.Seq.Base.slice Protocol.message
(Protocol.log @x2
@x26)
@x3
(Protocol.ctr @x2
@x26))))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(467,48-467,50)
(or label_77

;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(467,48-467,50)
(Valid 
;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(467,48-467,50)
(Protocol.live_connection @x26
@x2)
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x119 Term))
 (! (implies (and (HasType @x119
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(151,24-440,16); use=Protocol.fst(431,8-469,42)
(= @x26
@x119)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x120 Term))
 (! (implies (and (HasType @x120
Prims.nat)

;; def=Protocol.fst(341,57-467,51); use=Protocol.fst(467,20-467,51)
(= (Protocol.ctr @x2
@x26)
@x120)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Protocol.fst(341,65-341,75); use=Protocol.fst(467,41-467,51)
(or label_78

;; def=Protocol.fst(341,65-341,75); use=Protocol.fst(467,41-467,51)
(<= (BoxInt_proj_0 @x3)
(BoxInt_proj_0 (Protocol.ctr @x2
@x26)))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(431,8-469,42)
(forall ((@x121 Term))
 (! (implies (and (HasType @x121
(Tm_refine_571d9f74016be5357787170b42ecf913 @x3))

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(431,8-469,42)
(= @x121
(Protocol.ctr @x2
@x26))


;; def=Protocol.fst(341,58-467,51); use=Protocol.fst(431,8-469,42)
(= (Protocol.ctr @x2
@x26)
@x121)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x122 Term))
 (! (implies (HasType @x122
Tm_refine_a11098d99239284f14b49e1dd0266896)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(431,8-469,42)
(forall ((@x123 Term))
 (! (implies (and (HasType @x123
Tm_type)

;; def=Prims.fst(672,13-672,14); use=Protocol.fst(431,8-469,42)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Protocol.sent_bytes@tok
(MonotonicArray.as_initialized_subseq Protocol.byte
@x0
@x1
@x26
(BoxInt 0)
(Prims.op_Addition @x4
@x24)))
@x2)
@x3)
(Protocol.ctr @x2
@x26))
@x26)
@x123)
)

;; def=Prims.fst(441,29-441,97); use=Protocol.fst(467,12-467,18)
(and 
;; def=Protocol.fst(467,19-467,55); use=Protocol.fst(467,12-467,18)
(or label_79

;; def=Protocol.fst(467,19-467,55); use=Protocol.fst(467,12-467,18)
(Valid 
;; def=Protocol.fst(467,19-467,55); use=Protocol.fst(467,12-467,18)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Protocol.sent_bytes@tok
(MonotonicArray.as_initialized_subseq Protocol.byte
@x0
@x1
@x26
(BoxInt 0)
(Prims.op_Addition @x4
@x24)))
@x2)
@x3)
(Protocol.ctr @x2
@x26))
@x26)
)
)


;; def=Prims.fst(441,36-441,97); use=Protocol.fst(467,12-467,18)
(forall ((@x124 Term))
 (! (implies (and (HasType @x124
Prims.unit)

;; def=Protocol.fst(467,19-467,55); use=Protocol.fst(467,12-467,18)
(Valid 
;; def=Protocol.fst(467,19-467,55); use=Protocol.fst(467,12-467,18)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Protocol.sent_bytes@tok
(MonotonicArray.as_initialized_subseq Protocol.byte
@x0
@x1
@x26
(BoxInt 0)
(Prims.op_Addition @x4
@x24)))
@x2)
@x3)
(Protocol.ctr @x2
@x26))
@x26)
)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(431,8-469,42)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(469,30-469,42)
(or label_80

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(469,30-469,42)
(>= (BoxInt_proj_0 (Prims.op_Addition @x4
@x24))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Protocol.fst(416,19-416,27); use=Protocol.fst(469,30-469,42)
(or label_81

;; def=Protocol.fst(416,19-416,27); use=Protocol.fst(469,30-469,42)
(<= (BoxInt_proj_0 (Prims.op_Addition @x4
@x24))
(BoxInt_proj_0 @x0))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(431,8-469,42)
(forall ((@x125 Term))
 (! (implies (and (HasType @x125
(Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x0))

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(431,8-469,42)
(= @x125
(Prims.op_Addition @x4
@x24))
)

;; def=FStar.ST.fst(76,41-76,87); use=Protocol.fst(469,9-469,17)
(and 
;; def=Protocol.fst(419,22-419,52); use=Protocol.fst(469,9-469,17)
(or label_82

;; def=Protocol.fst(419,22-419,52); use=Protocol.fst(469,9-469,17)
(Valid 
;; def=Protocol.fst(419,22-419,52); use=Protocol.fst(469,9-469,17)
(Protocol.fully_initialized_in Protocol.byte
@x0
@x1
@x34)
)
)


;; def=Protocol.fst(420,22-420,44); use=Protocol.fst(469,9-469,17)
(or label_83

;; def=Protocol.fst(420,22-420,44); use=Protocol.fst(469,9-469,17)
(Valid 
;; def=Protocol.fst(420,22-420,44); use=Protocol.fst(469,9-469,17)
(Protocol.live_connection @x34
@x2)
)
)


;; def=Protocol.fst(421,22-421,38); use=Protocol.fst(469,9-469,17)
(or label_84

;; def=Protocol.fst(421,22-421,38); use=Protocol.fst(469,9-469,17)
(<= (BoxInt_proj_0 @x3)
(BoxInt_proj_0 (Protocol.ctr @x2
@x34)))
)


;; def=Protocol.fst(422,22-422,91); use=Protocol.fst(469,9-469,17)
(or label_85

;; def=Protocol.fst(422,22-422,91); use=Protocol.fst(469,9-469,17)
(Valid 
;; def=Protocol.fst(422,22-422,91); use=Protocol.fst(469,9-469,17)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Protocol.sent_bytes@tok
(MonotonicArray.as_initialized_subseq Protocol.byte
@x0
@x1
@x34
(BoxInt 0)
(Prims.op_Addition @x4
@x24)))
@x2)
@x3)
(Protocol.ctr @x2
@x34))
@x34)
)
)


;; def=FStar.ST.fst(76,50-76,87); use=Protocol.fst(469,9-469,17)
(forall ((@x126 Term) (@x127 Term))
 (! (implies (and (HasType @x126
Prims.unit)
(HasType @x127
(Tm_refine_58fa7036de540210b95296146042b45b @x0
@x1
@x34
@x2
@x3
@x4
@x24))

;; def=Protocol.fst(424,22-424,61); use=Protocol.fst(469,9-469,17)
(Valid 
;; def=Protocol.fst(424,22-424,61); use=Protocol.fst(469,9-469,17)
(FStar.Monotonic.Heap.modifies (Protocol.connection_footprint @x2)
@x34
@x127)
)


;; def=Protocol.fst(425,22-425,44); use=Protocol.fst(469,9-469,17)
(Valid 
;; def=Protocol.fst(425,22-425,44); use=Protocol.fst(469,9-469,17)
(Protocol.live_connection @x127
@x2)
)


;; def=Protocol.fst(426,22-426,38); use=Protocol.fst(469,9-469,17)
(<= (BoxInt_proj_0 @x3)
(BoxInt_proj_0 (Protocol.ctr @x2
@x127)))


;; def=Protocol.fst(427,22-427,86); use=Protocol.fst(469,9-469,17)
(forall ((@x128 Term))
 (! (implies (and (HasType @x128
Prims.nat)

;; def=Protocol.fst(427,39-427,44); use=Protocol.fst(469,9-469,17)
(< (BoxInt_proj_0 @x128)
(BoxInt_proj_0 @x0))
)

;; def=Protocol.fst(427,49-427,85); use=Protocol.fst(469,9-469,17)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some Protocol.byte
(FStar.Seq.Base.index (FStar.Pervasives.Native.option Protocol.byte)
(MonotonicArray.as_seq Protocol.byte
@x0
@x1
@x34)
@x128)))
)
 
;;no pats
:qid @query.123))


;; def=Protocol.fst(428,22-428,82); use=Protocol.fst(469,9-469,17)
(Valid 
;; def=Protocol.fst(428,22-428,82); use=Protocol.fst(469,9-469,17)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Protocol.sent_bytes@tok
(MonotonicArray.as_initialized_seq Protocol.byte
@x0
@x1
@x34))
@x2)
@x3)
(Protocol.ctr @x2
@x127))
@x127)
)
)

;; def=FStar.ST.fst(76,80-76,86); use=Protocol.fst(469,9-469,17)
(Valid 
;; def=FStar.ST.fst(76,80-76,86); use=Protocol.fst(469,9-469,17)
(ApplyTT (ApplyTT @x9
@x126)
@x127)
)
)
 
;;no pats
:qid @query.122))
)
)
 
;;no pats
:qid @query.121))
)
)
 
;;no pats
:qid @query.120))
)
)
 
;;no pats
:qid @query.119))
)
 
;;no pats
:qid @query.118))
)
 
;;no pats
:qid @query.117))
)
)
 
;;no pats
:qid @query.116))
)
 
;;no pats
:qid @query.115))
)
)
 
;;no pats
:qid @query.114))
)
)
 
;;no pats
:qid @query.113))
)
 
;;no pats
:qid @query.112))
)
 
;;no pats
:qid @query.111))
)
 
;;no pats
:qid @query.110))
)
)
 
;;no pats
:qid @query.109))
)
 
;;no pats
:qid @query.108))
)
)
 
;;no pats
:qid @query.107))
)
 
;;no pats
:qid @query.106))
)
)
 
;;no pats
:qid @query.105))
)
 
;;no pats
:qid @query.104))
)
)
 
;;no pats
:qid @query.103))
)
 
;;no pats
:qid @query.102))
)
)
 
;;no pats
:qid @query.101))
)
)
 
;;no pats
:qid @query.100))
)
 
;;no pats
:qid @query.99))
)
 
;;no pats
:qid @query.98))
)
 
;;no pats
:qid @query.97))
)
)
 
;;no pats
:qid @query.96))
)
 
;;no pats
:qid @query.95))
)
)
 
;;no pats
:qid @query.94))
)
)
 
;;no pats
:qid @query.93))
)
 
;;no pats
:qid @query.92))
)
)
 
;;no pats
:qid @query.91))
)
)
 
;;no pats
:qid @query.90))
)
 
;;no pats
:qid @query.89))
)
)
 
;;no pats
:qid @query.88))
)
 
;;no pats
:qid @query.87))
)
)
 
;;no pats
:qid @query.86))
)
)
 
;;no pats
:qid @query.85))
)
 
;;no pats
:qid @query.84))
)
 
;;no pats
:qid @query.83))
)
 
;;no pats
:qid @query.82))
)
)
 
;;no pats
:qid @query.81))
)
)
 
;;no pats
:qid @query.80))
)
)
 
;;no pats
:qid @query.79))
)
 
;;no pats
:qid @query.78))
)
 
;;no pats
:qid @query.77))
)
 
;;no pats
:qid @query.76))
)
)
 
;;no pats
:qid @query.75))
)
)
 
;;no pats
:qid @query.74))
)
 
;;no pats
:qid @query.73))
)
)
 
;;no pats
:qid @query.72))
)
)
 
;;no pats
:qid @query.71))
)
 
;;no pats
:qid @query.70))
)
)
 
;;no pats
:qid @query.69))
)
)
 
;;no pats
:qid @query.68))
)
)
 
;;no pats
:qid @query.67))
)
 
;;no pats
:qid @query.66))
)
 
;;no pats
:qid @query.65))
)
 
;;no pats
:qid @query.64))
)
 
;;no pats
:qid @query.63))
)
)
 
;;no pats
:qid @query.62))
)
 
;;no pats
:qid @query.61))
)
 
;;no pats
:qid @query.60))
)
 
;;no pats
:qid @query.59))
)
)
 
;;no pats
:qid @query.58))
)
 
;;no pats
:qid @query.57))
)
)
 
;;no pats
:qid @query.56))
)
)
 
;;no pats
:qid @query.55))
)
 
;;no pats
:qid @query.54))
)
)
 
;;no pats
:qid @query.53))
)
 
;;no pats
:qid @query.52))
)
)
 
;;no pats
:qid @query.51))
)
)
 
;;no pats
:qid @query.50))
)
 
;;no pats
:qid @query.49))
)
)
 
;;no pats
:qid @query.48))
)
)
 
;;no pats
:qid @query.47))
)
)
 
;;no pats
:qid @query.46))
)
 
;;no pats
:qid @query.45))
)
 
;;no pats
:qid @query.44))
)
)
 
;;no pats
:qid @query.43))
)
 
;;no pats
:qid @query.42))
)
)
 
;;no pats
:qid @query.41))
)
 
;;no pats
:qid @query.40))
)
)
 
;;no pats
:qid @query.39))
)
)
 
;;no pats
:qid @query.38))
)
)
 
;;no pats
:qid @query.37))
)
)
 
;;no pats
:qid @query.36))
)
)
 
;;no pats
:qid @query.35))
)
 
;;no pats
:qid @query.34))
)
 
;;no pats
:qid @query.33))
)
 
;;no pats
:qid @query.32))
)
 
;;no pats
:qid @query.31))
)
)
 
;;no pats
:qid @query.30))
)
 
;;no pats
:qid @query.29))
)
)
 
;;no pats
:qid @query.27))
)
 
;;no pats
:qid @query.26))
)
 
;;no pats
:qid @query.25))
)
)
 
;;no pats
:qid @query.24))
)
 
;;no pats
:qid @query.22))
)
 
;;no pats
:qid @query.21))
)
)
 
;;no pats
:qid @query.20))
)
)
 
;;no pats
:qid @query.19))
)
)
 
;;no pats
:qid @query.18))
)
 
;;no pats
:qid @query.17))
)
)
 
;;no pats
:qid @query.15))
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.9))
))
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 108931200)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_85")
(eval label_85)
(echo "label_84")
(eval label_84)
(echo "label_83")
(eval label_83)
(echo "label_82")
(eval label_82)
(echo "label_81")
(eval label_81)
(echo "label_80")
(eval label_80)
(echo "label_79")
(eval label_79)
(echo "label_78")
(eval label_78)
(echo "label_77")
(eval label_77)
(echo "label_76")
(eval label_76)
(echo "label_75")
(eval label_75)
(echo "label_74")
(eval label_74)
(echo "label_73")
(eval label_73)
(echo "label_72")
(eval label_72)
(echo "label_71")
(eval label_71)
(echo "label_70")
(eval label_70)
(echo "label_69")
(eval label_69)
(echo "label_68")
(eval label_68)
(echo "label_67")
(eval label_67)
(echo "label_66")
(eval label_66)
(echo "label_65")
(eval label_65)
(echo "label_64")
(eval label_64)
(echo "label_63")
(eval label_63)
(echo "label_62")
(eval label_62)
(echo "label_61")
(eval label_61)
(echo "label_60")
(eval label_60)
(echo "label_59")
(eval label_59)
(echo "label_58")
(eval label_58)
(echo "label_57")
(eval label_57)
(echo "label_56")
(eval label_56)
(echo "label_55")
(eval label_55)
(echo "label_54")
(eval label_54)
(echo "label_53")
(eval label_53)
(echo "label_52")
(eval label_52)
(echo "label_51")
(eval label_51)
(echo "label_50")
(eval label_50)
(echo "label_49")
(eval label_49)
(echo "label_48")
(eval label_48)
(echo "label_47")
(eval label_47)
(echo "label_46")
(eval label_46)
(echo "label_45")
(eval label_45)
(echo "label_44")
(eval label_44)
(echo "label_43")
(eval label_43)
(echo "label_42")
(eval label_42)
(echo "label_41")
(eval label_41)
(echo "label_40")
(eval label_40)
(echo "label_39")
(eval label_39)
(echo "label_38")
(eval label_38)
(echo "label_37")
(eval label_37)
(echo "label_36")
(eval label_36)
(echo "label_35")
(eval label_35)
(echo "label_34")
(eval label_34)
(echo "label_33")
(eval label_33)
(echo "label_32")
(eval label_32)
(echo "label_31")
(eval label_31)
(echo "label_30")
(eval label_30)
(echo "label_29")
(eval label_29)
(echo "label_28")
(eval label_28)
(echo "label_27")
(eval label_27)
(echo "label_26")
(eval label_26)
(echo "label_25")
(eval label_25)
(echo "label_24")
(eval label_24)
(echo "label_23")
(eval label_23)
(echo "label_22")
(eval label_22)
(echo "label_21")
(eval label_21)
(echo "label_20")
(eval label_20)
(echo "label_19")
(eval label_19)
(echo "label_18")
(eval label_18)
(echo "label_17")
(eval label_17)
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Protocol.send_aux, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, FStar.Classical_interpretation_Tm_arrow_6980332764c4493a7b0df5c02f7aefbe, FStar.Seq.Base_pretyping_7efa52b424e80c83ad68a652aa3561e4, Protocol_interpretation_Tm_arrow_bbf9c13f2e1689774c895427eb4d7c9a, b2t_def, disc_equation_Protocol.S, eq2-interp, equation_ArrayUtils.all_some, equation_ArrayUtils.init_at_seq, equation_ArrayUtils.some_equivalent_seqs, equation_FStar.Monotonic.Heap.modifies, equation_FStar.Monotonic.Heap.modifies_t, equation_FStar.Preorder.preorder, equation_FStar.Preorder.preorder_rel, equation_FStar.Preorder.reflexive, equation_FStar.Preorder.transitive, equation_FStar.ST.mref, equation_MonotonicArray.array, equation_MonotonicArray.as_initialized_seq, equation_MonotonicArray.as_initialized_subseq, equation_MonotonicArray.init_arr_in_heap_i_j, equation_MonotonicArray.suffix, equation_Prims.eqtype, equation_Prims.min, equation_Prims.nat, equation_Protocol.connection_footprint, equation_Protocol.ctr, equation_Protocol.entries, equation_Protocol.entries_rel, equation_Protocol.fully_initialized_in, equation_Protocol.iarray, equation_Protocol.is_prefix_of, equation_Protocol.live_connection, equation_Protocol.log, equation_Protocol.message, equation_Protocol.sender, equation_Protocol.sent_bytes, equation_Protocol.sent_bytes_, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, int_inversion, int_typing, interpretation_Tm_abs_41efd131336ec34ef1b819bed745d3d1, interpretation_Tm_abs_7f6e09c57851a655e400606396618bbe, kinding_FStar.Pervasives.Native.option@tok, kinding_Protocol.entry@tok, l_and-interp, lemma_ArrayUtils.lemma_get_some_equivalent_slice, lemma_FStar.Seq.Base.lemma_len_slice, lemma_FStar.Seq.Properties.slice_length, lemma_MonotonicArray.lemma_as_seq_length, lemma_MonotonicArray.lemma_framing_of_as_seq, lemma_MonotonicArray.lemma_sub_is_slice, lemma_MonotonicArray.lemma_sub_preserves_array_mutable_flag, lemma_Protocol.lemma_sel_entries_equals_sel_tot_entries, primitive_Prims.op_Addition, primitive_Prims.op_Equality, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_2f2e27baf4b7704087f9df5373c6260b, refinement_interpretation_Tm_refine_377d0118686d11596ae874abd2ea7677, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_4a193488219f747acf46a37f5644f382, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_58fa7036de540210b95296146042b45b, refinement_interpretation_Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d, refinement_interpretation_Tm_refine_81407705a0828c2c1b1976675443f647, refinement_interpretation_Tm_refine_9c53eb855ade94a7b7c9e39b74b4706d, refinement_interpretation_Tm_refine_9dd2f7dc4f1c13136a80acee9d90b531, refinement_interpretation_Tm_refine_bd10f09297e0e7dc08314f7d9211801c, refinement_interpretation_Tm_refine_c52766f1ffb36bccccc81ae2f2d192be, refinement_interpretation_Tm_refine_e33ef751d600ad1c7f71142479103c47, refinement_interpretation_Tm_refine_e50addb6c1bbd8f85fb54bf03b146e15, refinement_interpretation_Tm_refine_f984cba283a0017499e468d307a8fd1d, refinement_kinding_Tm_refine_8cf65a0e984801514f164a721568601b, token_correspondence_Protocol.sent_bytes, typing_ArrayUtils.get_some_equivalent, typing_ArrayUtils.seq_map, typing_FStar.Monotonic.Heap.sel, typing_FStar.Seq.Base.length, typing_FStar.Seq.Base.slice, typing_MonotonicArray.as_seq, typing_Prims.int, typing_Protocol.byte, typing_Protocol.connection_footprint, typing_Protocol.entries, typing_Protocol.entries_of, typing_Protocol.entries_rel, typing_Protocol.fragment_size, typing_Protocol.rand_of, typing_Tm_abs_1f17782d7f15dca3aa2da1fe8e018a7e

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at Protocol.fst(430,0-469,42)

(declare-fun label_1 () Bool)

; Encoding query formula : forall (n: Prims.nat) (file: Protocol.iarray Protocol.byte n) (c: Protocol.connection).
;   Protocol.sender c ==> Prims.hasEq Prims.nat


; Context: While encoding a query
; While typechecking the top-level declaration `let rec send_aux`

(push) ;; push{0

; <fuel='0' ifuel='0'>

;;; Fact-ids: 
(assert (! (= MaxFuel
ZFuel)
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
ZFuel)
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=Protocol.fst(430,0-469,42)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
(Protocol.iarray Protocol.byte
@x0))
(HasType @x2
Protocol.connection)

;; def=Protocol.fst(414,24-414,32); use=Protocol.fst(430,8-430,16)
(BoxBool_proj_0 (Protocol.sender @x2))
)

;; def=Prims.fst(73,23-73,30); use=Protocol.fst(430,8-430,16)
(or label_1

;; def=Prims.fst(73,23-73,30); use=Protocol.fst(430,8-430,16)
(Valid 
;; def=Prims.fst(73,23-73,30); use=Protocol.fst(430,8-430,16)
(Prims.hasEq Prims.nat)
)
)
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 108931200)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Protocol.send_aux, 3)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Prims.eqtype, equation_Prims.nat, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec send_aux


; <Start encoding let rec send_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Protocol.send_aux (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Protocol.send_aux@tok () Term)

; </end encoding let rec send_aux>


; encoding sigelt #pop-options


; <Skipped #pop-options/>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.sent; Namespace Protocol
(assert (! 
;; def=Protocol.fst(344,4-344,8); use=Protocol.fst(344,4-344,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
(FStar.Seq.Base.seq Protocol.byte))
(HasType @x1
Protocol.connection))
(HasType (Protocol.sent @x0
@x1)
Prims.logical))
 

:pattern ((Protocol.sent @x0
@x1))
:qid typing_Protocol.sent))

:named typing_Protocol.sent))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Seq.Base.equal; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(166,4-166,9); use=FStar.Seq.Base.fsti(166,4-166,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
(FStar.Seq.Base.seq @x0)))
(HasType (FStar.Seq.Base.equal @x0
@x1
@x2)
Prims.prop))
 

:pattern ((FStar.Seq.Base.equal @x0
@x1
@x2))
:qid typing_FStar.Seq.Base.equal))

:named typing_FStar.Seq.Base.equal))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Base.lemma_eq_refl
;;; Fact-ids: Name FStar.Seq.Base.lemma_eq_refl; Namespace FStar.Seq.Base
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
(FStar.Seq.Base.seq @x0))

;; def=FStar.Seq.Base.fsti(183,15-183,25); use=FStar.Seq.Base.fsti(183,15-183,25)
(= @x1
@x2)
)

;; def=FStar.Seq.Base.fsti(184,14-184,27); use=FStar.Seq.Base.fsti(184,14-184,27)
(Valid 
;; def=FStar.Seq.Base.fsti(184,14-184,27); use=FStar.Seq.Base.fsti(184,14-184,27)
(FStar.Seq.Base.equal @x0
@x1
@x2)
)
)
 

:pattern ((FStar.Seq.Base.equal @x0
@x1
@x2))
:qid lemma_FStar.Seq.Base.lemma_eq_refl))
:named lemma_FStar.Seq.Base.lemma_eq_refl))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Base.lemma_eq_intro
;;; Fact-ids: Name FStar.Seq.Base.lemma_eq_intro; Namespace FStar.Seq.Base
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
(FStar.Seq.Base.seq @x0))

;; def=FStar.Seq.Base.fsti(177,16-177,37); use=FStar.Seq.Base.fsti(177,16-177,37)
(= (FStar.Seq.Base.length @x0
@x1)
(FStar.Seq.Base.length @x0
@x2))


;; def=FStar.Seq.Base.fsti(178,18-178,114); use=FStar.Seq.Base.fsti(178,18-178,114)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 @x0
@x1))

;; def=FStar.Seq.Base.fsti(178,87-178,113); use=FStar.Seq.Base.fsti(178,87-178,113)
(= (FStar.Seq.Base.index @x0
@x1
@x3)
(FStar.Seq.Base.index @x0
@x2
@x3))
)
 

:pattern ((FStar.Seq.Base.index @x0
@x1
@x3) (FStar.Seq.Base.index @x0
@x2
@x3))
:qid lemma_FStar.Seq.Base.lemma_eq_intro.1))
)

;; def=FStar.Seq.Base.fsti(179,14-179,27); use=FStar.Seq.Base.fsti(179,14-179,27)
(Valid 
;; def=FStar.Seq.Base.fsti(179,14-179,27); use=FStar.Seq.Base.fsti(179,14-179,27)
(FStar.Seq.Base.equal @x0
@x1
@x2)
)
)
 

:pattern ((FStar.Seq.Base.equal @x0
@x1
@x2))
:qid lemma_FStar.Seq.Base.lemma_eq_intro))
:named lemma_FStar.Seq.Base.lemma_eq_intro))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Base.lemma_eq_elim
;;; Fact-ids: Name FStar.Seq.Base.lemma_eq_elim; Namespace FStar.Seq.Base
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
(FStar.Seq.Base.seq @x0))

;; def=FStar.Seq.Base.fsti(188,15-188,28); use=FStar.Seq.Base.fsti(188,15-188,28)
(Valid 
;; def=FStar.Seq.Base.fsti(188,15-188,28); use=FStar.Seq.Base.fsti(188,15-188,28)
(FStar.Seq.Base.equal @x0
@x1
@x2)
)
)

;; def=FStar.Seq.Base.fsti(189,14-189,22); use=FStar.Seq.Base.fsti(189,14-189,22)
(= @x1
@x2)
)
 

:pattern ((FStar.Seq.Base.equal @x0
@x1
@x2))
:qid lemma_FStar.Seq.Base.lemma_eq_elim))
:named lemma_FStar.Seq.Base.lemma_eq_elim))
;;;;;;;;;;;;;;;;Equation for Protocol.sent
;;; Fact-ids: Name Protocol.sent; Namespace Protocol
(assert (! 
;; def=Protocol.fst(344,4-344,8); use=Protocol.fst(344,4-344,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (Protocol.sent @x0
@x1))

;; def=Protocol.fst(345,2-345,79); use=Protocol.fst(345,2-345,79)
(exists ((@x2 Term) (@x3 Term))
 (! (and (HasType @x2
Prims.nat)
(HasType @x3
(Tm_refine_571d9f74016be5357787170b42ecf913 @x2))

;; def=Protocol.fst(345,42-345,79); use=Protocol.fst(345,42-345,79)
(Valid 
;; def=Protocol.fst(345,42-345,79); use=Protocol.fst(345,42-345,79)
(FStar.ST.witnessed (Protocol.sent_bytes @x0
@x1
@x2
@x3))
)
)
 
;;no pats
:qid equation_Protocol.sent.1))
)
 

:pattern ((Protocol.sent @x0
@x1))
:qid equation_Protocol.sent))

:named equation_Protocol.sent))
;;;;;;;;;;;;;;;;Prop-typing for Protocol.sent
;;; Fact-ids: Name Protocol.sent; Namespace Protocol
(assert (! 
;; def=Protocol.fst(344,4-344,8); use=Protocol.fst(344,4-344,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
(FStar.Seq.Base.seq Protocol.byte))
(HasType @x1
Protocol.connection))
(Valid (Prims.subtype_of (Protocol.sent @x0
@x1)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Protocol.sent @x0
@x1)
Prims.unit))
:qid defn_equation_Protocol.sent))

:named defn_equation_Protocol.sent))
(push) ;; push{2

; Starting query at Protocol.fst(479,3-493,31)

(declare-fun label_28 () Bool)
(declare-fun label_27 () Bool)
(declare-fun label_26 () Bool)
(declare-fun label_25 () Bool)
(declare-fun label_24 () Bool)
(declare-fun label_23 () Bool)
(declare-fun label_22 () Bool)
(declare-fun label_21 () Bool)
(declare-fun label_20 () Bool)
(declare-fun label_19 () Bool)
(declare-fun label_18 () Bool)
(declare-fun label_17 () Bool)
(declare-fun label_16 () Bool)
(declare-fun label_15 () Bool)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_377d0118686d11596ae874abd2ea7677 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(471,44-471,132); use=Protocol.fst(471,44-471,132)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_377d0118686d11596ae874abd2ea7677 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_377d0118686d11596ae874abd2ea7677 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_377d0118686d11596ae874abd2ea7677))

:named refinement_kinding_Tm_refine_377d0118686d11596ae874abd2ea7677))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(471,44-471,132); use=Protocol.fst(471,44-471,132)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_377d0118686d11596ae874abd2ea7677 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Protocol.connection)

;; def=Protocol.fst(471,58-471,66); use=Protocol.fst(471,58-471,66)
(BoxBool_proj_0 (Protocol.sender @x1))


;; def=Protocol.fst(471,70-471,130); use=Protocol.fst(471,70-471,130)
(Valid 
;; def=Protocol.fst(471,70-471,130); use=Protocol.fst(471,70-471,130)
(FStar.Set.disjoint Prims.nat
(Protocol.connection_footprint @x1)
(MonotonicArray.array_footprint Protocol.byte
@x2
@x3))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_377d0118686d11596ae874abd2ea7677 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_377d0118686d11596ae874abd2ea7677))

:named refinement_interpretation_Tm_refine_377d0118686d11596ae874abd2ea7677))
;;;;;;;;;;;;;;;;haseq for Tm_refine_377d0118686d11596ae874abd2ea7677
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(471,44-471,132); use=Protocol.fst(471,44-471,132)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_377d0118686d11596ae874abd2ea7677 @x0
@x1)))
(Valid (Prims.hasEq Protocol.connection)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_377d0118686d11596ae874abd2ea7677 @x0
@x1))))
:qid haseqTm_refine_377d0118686d11596ae874abd2ea7677))

:named haseqTm_refine_377d0118686d11596ae874abd2ea7677))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: 
(assert (! (Valid (ApplyTT __uu__PartialApp
Protocol.sent_bytes@tok))
:named @kick_partial_app_09d2656020e371bea4bd24f5fe33a2b3))

(declare-fun Tm_refine_8ad69a1f48acc6b64971d03a0053572b (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.ST.fst(75,66-75,73); use=Protocol.fst(488,4-488,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_8ad69a1f48acc6b64971d03a0053572b @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_8ad69a1f48acc6b64971d03a0053572b @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_8ad69a1f48acc6b64971d03a0053572b))

:named refinement_kinding_Tm_refine_8ad69a1f48acc6b64971d03a0053572b))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.ST.fst(75,66-75,73); use=Protocol.fst(488,4-488,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_8ad69a1f48acc6b64971d03a0053572b @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(419,22-419,52); use=Protocol.fst(488,4-488,12)
(Valid 
;; def=Protocol.fst(419,22-419,52); use=Protocol.fst(488,4-488,12)
(Protocol.fully_initialized_in Protocol.byte
@x2
@x3
@x4)
)


;; def=Protocol.fst(420,22-420,44); use=Protocol.fst(488,4-488,12)
(Valid 
;; def=Protocol.fst(420,22-420,44); use=Protocol.fst(488,4-488,12)
(Protocol.live_connection @x4
@x5)
)


;; def=Protocol.fst(421,22-421,38); use=Protocol.fst(488,4-488,12)
(<= (BoxInt_proj_0 (Protocol.ctr @x5
@x6))
(BoxInt_proj_0 (Protocol.ctr @x5
@x4)))


;; def=Protocol.fst(422,22-422,91); use=Protocol.fst(488,4-488,12)
(Valid 
;; def=Protocol.fst(422,22-422,91); use=Protocol.fst(488,4-488,12)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Protocol.sent_bytes@tok
(MonotonicArray.as_initialized_subseq Protocol.byte
@x2
@x3
@x4
(BoxInt 0)
(BoxInt 0)))
@x5)
(Protocol.ctr @x5
@x6))
(Protocol.ctr @x5
@x4))
@x4)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_8ad69a1f48acc6b64971d03a0053572b @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_8ad69a1f48acc6b64971d03a0053572b))

:named refinement_interpretation_Tm_refine_8ad69a1f48acc6b64971d03a0053572b))
;;;;;;;;;;;;;;;;haseq for Tm_refine_8ad69a1f48acc6b64971d03a0053572b
;;; Fact-ids: 
(assert (! 
;; def=FStar.ST.fst(75,66-75,73); use=Protocol.fst(488,4-488,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_8ad69a1f48acc6b64971d03a0053572b @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq FStar.Monotonic.Heap.heap)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_8ad69a1f48acc6b64971d03a0053572b @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_8ad69a1f48acc6b64971d03a0053572b))

:named haseqTm_refine_8ad69a1f48acc6b64971d03a0053572b))
(declare-fun Tm_refine_8aa7b1af5b127279eb2d5d83cea01cbf (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(341,57-341,77); use=Protocol.fst(492,17-492,27)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_8aa7b1af5b127279eb2d5d83cea01cbf @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_8aa7b1af5b127279eb2d5d83cea01cbf @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_8aa7b1af5b127279eb2d5d83cea01cbf))

:named refinement_kinding_Tm_refine_8aa7b1af5b127279eb2d5d83cea01cbf))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(341,57-341,77); use=Protocol.fst(492,17-492,27)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_8aa7b1af5b127279eb2d5d83cea01cbf @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=Protocol.fst(341,65-341,75); use=Protocol.fst(492,17-492,27)
(<= (BoxInt_proj_0 (Protocol.ctr @x2
@x3))
(BoxInt_proj_0 @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_8aa7b1af5b127279eb2d5d83cea01cbf @x2
@x3)))
:qid refinement_interpretation_Tm_refine_8aa7b1af5b127279eb2d5d83cea01cbf))

:named refinement_interpretation_Tm_refine_8aa7b1af5b127279eb2d5d83cea01cbf))
;;;;;;;;;;;;;;;;haseq for Tm_refine_8aa7b1af5b127279eb2d5d83cea01cbf
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(341,57-341,77); use=Protocol.fst(492,17-492,27)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_8aa7b1af5b127279eb2d5d83cea01cbf @x0
@x1)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_8aa7b1af5b127279eb2d5d83cea01cbf @x0
@x1))))
:qid haseqTm_refine_8aa7b1af5b127279eb2d5d83cea01cbf))

:named haseqTm_refine_8aa7b1af5b127279eb2d5d83cea01cbf))





; Encoding query formula : forall (n: Prims.nat)
;   (file: Protocol.iarray Protocol.byte n)
;   (c:
;   Protocol.connection
;     { Protocol.sender c /\
;       FStar.Set.disjoint (Protocol.connection_footprint c) (MonotonicArray.array_footprint file) }).
;   (forall (h0: FStar.Monotonic.Heap.heap) (_: Prims.unit) (h1: FStar.Monotonic.Heap.heap).
;       (*  - Could not prove post-condition
; *)
;       (FStar.Monotonic.Heap.modifies (Protocol.connection_footprint c) h0 h1 /\
;         Protocol.live_connection h1 c ==>
;         (forall (k: Prims.nat).
;             k < n ==>
;             (forall (any_result: FStar.Seq.Base.seq (FStar.Pervasives.Native.option Protocol.byte)).
;                 MonotonicArray.as_seq file h0 == any_result ==>
;                 k < FStar.Seq.Base.length (MonotonicArray.as_seq file h0)))) /\
;       (FStar.Monotonic.Heap.modifies (Protocol.connection_footprint c) h0 h1 /\
;         Protocol.live_connection h1 c /\
;         (forall (k: Prims.nat).
;             k < n ==> Some? (FStar.Seq.Base.index (MonotonicArray.as_seq file h0) k)) ==>
;         Prims.auto_squash (MonotonicArray.init_arr_in_heap file h0))) /\
;   (forall (p: FStar.Pervasives.st_post_h FStar.Monotonic.Heap.heap Prims.unit)
;       (h: FStar.Monotonic.Heap.heap).
;       (forall (a: Prims.unit) (h1: FStar.Monotonic.Heap.heap).
;           FStar.Monotonic.Heap.modifies (Protocol.connection_footprint c) h h1 /\
;           Protocol.live_connection h1 c /\
;           (forall (k: Prims.nat).
;               k < n ==> Some? (FStar.Seq.Base.index (MonotonicArray.as_seq file h) k)) /\
;           Protocol.sent (MonotonicArray.as_initialized_seq file h) c ==>
;           p a h1) ==>
;       (forall (a: FStar.Monotonic.Heap.heap) (h1: FStar.Monotonic.Heap.heap).
;           h == h1 /\ a == h1 ==>
;           (FStar.ST.witnessed (MonotonicArray.mutable_pred file) /\ MonotonicArray.all_init file ==>
;             MonotonicArray.all_init file) /\
;           (forall (any_result: Protocol.iarray Protocol.byte n).
;               file == any_result ==>
;               (forall (a: Prims.unit) (h1: FStar.Monotonic.Heap.heap).
;                   h1 == h1 /\ MonotonicArray.init_arr_in_heap file h1 ==>
;                   (forall (a: Prims.unit) (h1: FStar.Monotonic.Heap.heap).
;                       h1 == h1 /\ MonotonicArray.contains_array h1 file ==>
;                       (forall (a: Prims.unit) (h1: FStar.Monotonic.Heap.heap).
;                           h1 == h1 /\ Protocol.live_connection h1 c ==>
;                           (forall (a: FStar.Seq.Base.seq Protocol.byte)
;                               (h1: FStar.Monotonic.Heap.heap).
;                               h1 == h1 /\
;                               (forall (k: Prims.nat).
;                                   k < n ==>
;                                   Some? (FStar.Seq.Base.index (MonotonicArray.as_seq file h1) k)) /\
;                               a == MonotonicArray.as_initialized_subseq file h1 0 n /\
;                               a == MonotonicArray.as_initialized_seq file h1 ==>
;                               Prims.auto_squash (Protocol.live_connection a c) /\
;                               (forall (any_result: FStar.Monotonic.Heap.heap).
;                                   a == any_result ==>
;                                   (forall (any_result: Prims.nat).
;                                       Protocol.ctr c a == any_result ==>
;                                       0 <= n /\ MonotonicArray.init_arr_in_heap_i_j file a 0 0 /\
;                                       (forall (any_result: Prims.int).
;                                           0 == any_result ==>
;                                           (forall (any_result: FStar.Seq.Base.seq Protocol.byte).
;                                               MonotonicArray.as_initialized_subseq file a 0 0 ==
;                                               any_result ==>
;                                               (forall (any_result: Prims.prop).
;                                                   FStar.Seq.Base.equal (MonotonicArray.as_initialized_subseq
;                                                         file
;                                                         a
;                                                         0
;                                                         0)
;                                                     seq![] ==
;                                                   any_result ==>
;                                                   (forall (return_val: Prims.prop).
;                                                       return_val ==
;                                                       FStar.Seq.Base.equal (MonotonicArray.as_initialized_subseq
;                                                             file
;                                                             a
;                                                             0
;                                                             0)
;                                                         seq![] ==>
;                                                       FStar.Seq.Base.equal (MonotonicArray.as_initialized_subseq
;                                                             file
;                                                             a
;                                                             0
;                                                             0)
;                                                         seq![] ==
;                                                       return_val ==>
;                                                       FStar.Seq.Base.equal (MonotonicArray.as_initialized_subseq
;                                                             file
;                                                             a
;                                                             0
;                                                             0)
;                                                         seq![] /\
;                                                       (forall (pure_result: Prims.unit).
;                                                           FStar.Seq.Base.equal (MonotonicArray.as_initialized_subseq
;                                                                 file
;                                                                 a
;                                                                 0
;                                                                 0)
;                                                             seq![] ==>
;                                                           (forall (pure_result: Prims.unit).
;                                                               Protocol.flatten seq![] == seq![] ==>
;                                                               Prims.auto_squash (Protocol.live_connection
;                                                                     a
;                                                                     c) /\
;                                                               (forall (any_result:
;                                                                   FStar.Monotonic.Heap.heap).
;                                                                   a == any_result ==>
;                                                                   (forall (any_result:
;                                                                       FStar.Seq.Base.seq Protocol.message
;                                                                       ).
;                                                                       Protocol.log c a == any_result ==>
;                                                                       Protocol.ctr c a <=
;                                                                       Protocol.ctr c a &&
;                                                                       Protocol.ctr c a <=
;                                                                       FStar.Seq.Base.length (Protocol.log
;                                                                             c
;                                                                             a) /\
;                                                                       (forall (any_result:
;                                                                           Prims.nat).
;                                                                           Protocol.ctr c a ==
;                                                                           any_result ==>
;                                                                           (forall (any_result:
;                                                                               FStar.Seq.Base.seq Protocol.message
;                                                                               ).
;                                                                               FStar.Seq.Base.slice (Protocol.log
;                                                                                     c
;                                                                                     a)
;                                                                                 (Protocol.ctr c a)
;                                                                                 (Protocol.ctr c a) ==
;                                                                               any_result ==>
;                                                                               (forall (any_result:
;                                                                                   FStar.Seq.Base.seq
;                                                                                     Protocol.byte).
;                                                                                   Protocol.flatten (FStar.Seq.Base.slice
;                                                                                         (Protocol.log
;                                                                                             c
;                                                                                             a)
;                                                                                         (Protocol.ctr
;                                                                                             c
;                                                                                             a)
;                                                                                         (Protocol.ctr
;                                                                                             c
;                                                                                             a)) ==
;                                                                                   any_result ==>
;                                                                                   (forall (any_result:
;                                                                                       Prims.prop).
;                                                                                       FStar.Seq.Base.equal
;                                                                                         (Protocol.flatten
;                                                                                             (FStar.Seq.Base.slice
;                                                                                                 (Protocol.log
;                                                                                                     c
;                                                                                                     a
;                                                                                                   )
;                                                                                                 (Protocol.ctr
;                                                                                                     c
;                                                                                                     a
;                                                                                                   )
;                                                                                                 (Protocol.ctr
;                                                                                                     c
;                                                                                                     a
;                                                                                                   ))
;                                                                                         )
;                                                                                         seq![] ==
;                                                                                       any_result ==>
;                                                                                       (forall (return_val:
;                                                                                           Prims.prop)
;                                                                                         .
;                                                                                           return_val ==
;                                                                                           FStar.Seq.Base.equal
;                                                                                             (Protocol.flatten
;                                                                                                 (FStar.Seq.Base.slice
;                                                                                                     (
;                                                                                                       Protocol.log
;                                                                                                         c
;                                                                                                         a
; 
;                                                                                                     )
;                                                                                                     (
;                                                                                                       Protocol.ctr
;                                                                                                         c
;                                                                                                         a
; 
;                                                                                                     )
;                                                                                                     (
;                                                                                                       Protocol.ctr
;                                                                                                         c
;                                                                                                         a
; 
;                                                                                                     )
;                                                                                                   ))
;                                                                                             seq![] ==>
;                                                                                           FStar.Seq.Base.equal
;                                                                                             (Protocol.flatten
;                                                                                                 (FStar.Seq.Base.slice
;                                                                                                     (
;                                                                                                       Protocol.log
;                                                                                                         c
;                                                                                                         a
; 
;                                                                                                     )
;                                                                                                     (
;                                                                                                       Protocol.ctr
;                                                                                                         c
;                                                                                                         a
; 
;                                                                                                     )
;                                                                                                     (
;                                                                                                       Protocol.ctr
;                                                                                                         c
;                                                                                                         a
; 
;                                                                                                     )
;                                                                                                   ))
;                                                                                             seq![] ==
;                                                                                           return_val ==>
;                                                                                           FStar.Seq.Base.equal
;                                                                                             (Protocol.flatten
;                                                                                                 (FStar.Seq.Base.slice
;                                                                                                     (
;                                                                                                       Protocol.log
;                                                                                                         c
;                                                                                                         a
; 
;                                                                                                     )
;                                                                                                     (
;                                                                                                       Protocol.ctr
;                                                                                                         c
;                                                                                                         a
; 
;                                                                                                     )
;                                                                                                     (
;                                                                                                       Protocol.ctr
;                                                                                                         c
;                                                                                                         a
; 
;                                                                                                     )
;                                                                                                   ))
;                                                                                             seq![] /\
;                                                                                           (forall (pure_result:
;                                                                                               Prims.unit)
;                                                                                             .
;                                                                                               FStar.Seq.Base.equal
;                                                                                                 (Protocol.flatten
;                                                                                                     (
;                                                                                                       FStar.Seq.Base.slice
;                                                                                                         (
;                                                                                                           Protocol.log
;                                                                                                             c
;                                                                                                             a
; 
;                                                                                                         )
;                                                                                                         (
;                                                                                                           Protocol.ctr
;                                                                                                             c
;                                                                                                             a
; 
;                                                                                                         )
;                                                                                                         (
;                                                                                                           Protocol.ctr
;                                                                                                             c
;                                                                                                             a
; 
;                                                                                                         )
; 
;                                                                                                     )
;                                                                                                   )
;                                                                                                 seq![
; 
;                                                                                                 ] ==>
;                                                                                               0 <= n /\
;                                                                                               (forall
;                                                                                                   (any_result:
;                                                                                                   Prims.int)
;                                                                                                 .
;                                                                                                   0 ==
;                                                                                                   any_result ==>
;                                                                                                   Protocol.fully_initialized_in
;                                                                                                     file
;                                                                                                     h1
;                                                                                                    /\
;                                                                                                   Protocol.live_connection
;                                                                                                     h1
;                                                                                                     c
;                                                                                                    /\
;                                                                                                   Protocol.ctr
;                                                                                                     c
;                                                                                                     a
;                                                                                                    <=
;                                                                                                   Protocol.ctr
;                                                                                                     c
;                                                                                                     h1
;                                                                                                    /\
;                                                                                                   Protocol.sent_bytes
;                                                                                                     (
;                                                                                                       MonotonicArray.as_initialized_subseq
;                                                                                                         file
;                                                                                                         h1
;                                                                                                         0
;                                                                                                         0
; 
;                                                                                                     )
;                                                                                                     c
;                                                                                                     (
;                                                                                                       Protocol.ctr
;                                                                                                         c
;                                                                                                         a
; 
;                                                                                                     )
;                                                                                                     (
;                                                                                                       Protocol.ctr
;                                                                                                         c
;                                                                                                         h1
; 
;                                                                                                     )
;                                                                                                     h1
;                                                                                                    /\
;                                                                                                   (forall
;                                                                                                       (a:
;                                                                                                       Prims.unit)
;                                                                                                       (h1:
;                                                                                                       _:
;                                                                                                       FStar.Monotonic.Heap.heap
;                                                                                                         {
;                                                                                                           Protocol.fully_initialized_in
;                                                                                                             file
;                                                                                                             h1
;                                                                                                            /\
;                                                                                                           Protocol.live_connection
;                                                                                                             h1
;                                                                                                             c
;                                                                                                            /\
;                                                                                                           Protocol.ctr
;                                                                                                             c
;                                                                                                             a
;                                                                                                            <=
;                                                                                                           Protocol.ctr
;                                                                                                             c
;                                                                                                             h1
;                                                                                                            /\
;                                                                                                           Protocol.sent_bytes
;                                                                                                             (
;                                                                                                               MonotonicArray.as_initialized_subseq
;                                                                                                                 file
;                                                                                                                 h1
;                                                                                                                 0
;                                                                                                                 0
; 
;                                                                                                             )
;                                                                                                             c
;                                                                                                             (
;                                                                                                               Protocol.ctr
;                                                                                                                 c
;                                                                                                                 a
; 
;                                                                                                             )
;                                                                                                             (
;                                                                                                               Protocol.ctr
;                                                                                                                 c
;                                                                                                                 h1
; 
;                                                                                                             )
;                                                                                                             h1
; 
;                                                                                                         })
;                                                                                                     .
;                                                                                                       FStar.Monotonic.Heap.modifies
;                                                                                                         (
;                                                                                                           Protocol.connection_footprint
;                                                                                                             c
; 
;                                                                                                         )
;                                                                                                         h1
;                                                                                                         h1
;                                                                                                        /\
;                                                                                                       Protocol.live_connection
;                                                                                                         h1
;                                                                                                         c
;                                                                                                        /\
;                                                                                                       Protocol.ctr
;                                                                                                         c
;                                                                                                         a
;                                                                                                        <=
;                                                                                                       Protocol.ctr
;                                                                                                         c
;                                                                                                         h1
;                                                                                                        /\
;                                                                                                       (
;                                                                                                         forall
;                                                                                                           (k:
;                                                                                                           Prims.nat)
;                                                                                                         .
;                                                                                                           k <
;                                                                                                           n ==>
;                                                                                                           Some?
;                                                                                                             (
;                                                                                                               FStar.Seq.Base.index
;                                                                                                                 (
;                                                                                                                   MonotonicArray.as_seq
;                                                                                                                     file
;                                                                                                                     h1
; 
;                                                                                                                 )
;                                                                                                                 k
; 
;                                                                                                             )
; 
;                                                                                                       ) /\
;                                                                                                       Protocol.sent_bytes
;                                                                                                         (
;                                                                                                           MonotonicArray.as_initialized_seq
;                                                                                                             file
;                                                                                                             h1
; 
;                                                                                                         )
;                                                                                                         c
;                                                                                                         (
;                                                                                                           Protocol.ctr
;                                                                                                             c
;                                                                                                             a
; 
;                                                                                                         )
;                                                                                                         (
;                                                                                                           Protocol.ctr
;                                                                                                             c
;                                                                                                             h1
; 
;                                                                                                         )
;                                                                                                         h1
;                                                                                                        ==>
;                                                                                                       (
;                                                                                                         forall
;                                                                                                           (a:
;                                                                                                           FStar.Monotonic.Heap.heap)
;                                                                                                           (h1:
;                                                                                                           FStar.Monotonic.Heap.heap)
;                                                                                                         .
;                                                                                                           h1 ==
;                                                                                                           h1 /\
;                                                                                                           a ==
;                                                                                                           h1 ==>
;                                                                                                           (
;                                                                                                             forall
;                                                                                                               (a:
;                                                                                                               FStar.Seq.Base.seq
;                                                                                                                 Protocol.byte
;                                                                                                               )
;                                                                                                               (h1:
;                                                                                                               FStar.Monotonic.Heap.heap)
;                                                                                                             .
;                                                                                                               h1 ==
;                                                                                                               h1 /\
;                                                                                                               (
;                                                                                                                 forall
;                                                                                                                   (k:
;                                                                                                                   Prims.nat)
;                                                                                                                 .
;                                                                                                                   k <
;                                                                                                                   n ==>
;                                                                                                                   Some?
;                                                                                                                     (
;                                                                                                                       FStar.Seq.Base.index
;                                                                                                                         (
;                                                                                                                           MonotonicArray.as_seq
;                                                                                                                             file
;                                                                                                                             h1
; 
;                                                                                                                         )
;                                                                                                                         k
; 
;                                                                                                                     )
; 
;                                                                                                               ) /\
;                                                                                                               a ==
;                                                                                                               MonotonicArray.as_initialized_subseq
;                                                                                                                 file
;                                                                                                                 h1
;                                                                                                                 0
;                                                                                                                 n
;                                                                                                                /\
;                                                                                                               a ==
;                                                                                                               MonotonicArray.as_initialized_seq
;                                                                                                                 file
;                                                                                                                 h1
;                                                                                                                ==>
;                                                                                                               a ==
;                                                                                                               a /\
;                                                                                                               (
;                                                                                                                 forall
;                                                                                                                   (pure_result:
;                                                                                                                   Prims.unit)
;                                                                                                                 .
;                                                                                                                   a ==
;                                                                                                                   a ==>
;                                                                                                                   Prims.auto_squash
;                                                                                                                     (
;                                                                                                                       Protocol.live_connection
;                                                                                                                         a
;                                                                                                                         c
; 
;                                                                                                                     )
;                                                                                                                    /\
;                                                                                                                   (
;                                                                                                                     forall
;                                                                                                                       (any_result:
;                                                                                                                       FStar.Monotonic.Heap.heap)
;                                                                                                                     .
;                                                                                                                       a ==
;                                                                                                                       any_result ==>
;                                                                                                                       (
;                                                                                                                         forall
;                                                                                                                           (any_result:
;                                                                                                                           Prims.nat)
;                                                                                                                         .
;                                                                                                                           Protocol.ctr
;                                                                                                                             c
;                                                                                                                             a
;                                                                                                                            ==
;                                                                                                                           any_result ==>
;                                                                                                                           Protocol.ctr
;                                                                                                                             c
;                                                                                                                             a
;                                                                                                                            <=
;                                                                                                                           Protocol.ctr
;                                                                                                                             c
;                                                                                                                             a
;                                                                                                                            /\
;                                                                                                                           (
;                                                                                                                             forall
;                                                                                                                               (return_val:
;                                                                                                                               to:
;                                                                                                                               Prims.nat
;                                                                                                                                 {
;                                                                                                                                   Protocol.ctr
;                                                                                                                                     c
;                                                                                                                                     a
;                                                                                                                                    <=
;                                                                                                                                   to
;                                                                                                                                 })
;                                                                                                                             .
;                                                                                                                               return_val ==
;                                                                                                                               Protocol.ctr
;                                                                                                                                 c
;                                                                                                                                 a
;                                                                                                                                ==>
;                                                                                                                               Protocol.ctr
;                                                                                                                                 c
;                                                                                                                                 a
;                                                                                                                                ==
;                                                                                                                               return_val ==>
;                                                                                                                               (
;                                                                                                                                 forall
;                                                                                                                                   (any_result:
;                                                                                                                                   p:
;                                                                                                                                   FStar.ST.heap_predicate
;                                                                                                                                     {
;                                                                                                                                       FStar.ST.stable
;                                                                                                                                         p
; 
;                                                                                                                                     })
;                                                                                                                                 .
;                                                                                                                                   Protocol.sent_bytes
;                                                                                                                                     a
;                                                                                                                                     c
;                                                                                                                                     (
;                                                                                                                                       Protocol.ctr
;                                                                                                                                         c
;                                                                                                                                         a
; 
;                                                                                                                                     )
;                                                                                                                                     (
;                                                                                                                                       Protocol.ctr
;                                                                                                                                         c
;                                                                                                                                         a
; 
;                                                                                                                                     )
;                                                                                                                                    ==
;                                                                                                                                   any_result ==>
;                                                                                                                                   (
;                                                                                                                                     forall
;                                                                                                                                       (return_val:
;                                                                                                                                       p:
;                                                                                                                                       FStar.ST.heap_predicate
;                                                                                                                                         {
;                                                                                                                                           FStar.ST.stable
;                                                                                                                                             p
; 
;                                                                                                                                         })
;                                                                                                                                     .
;                                                                                                                                       return_val ==
;                                                                                                                                       Protocol.sent_bytes
;                                                                                                                                         a
;                                                                                                                                         c
;                                                                                                                                         (
;                                                                                                                                           Protocol.ctr
;                                                                                                                                             c
;                                                                                                                                             a
; 
;                                                                                                                                         )
;                                                                                                                                         (
;                                                                                                                                           Protocol.ctr
;                                                                                                                                             c
;                                                                                                                                             a
; 
;                                                                                                                                         )
;                                                                                                                                        ==>
;                                                                                                                                       Protocol.sent_bytes
;                                                                                                                                         a
;                                                                                                                                         c
;                                                                                                                                         (
;                                                                                                                                           Protocol.ctr
;                                                                                                                                             c
;                                                                                                                                             a
; 
;                                                                                                                                         )
;                                                                                                                                         (
;                                                                                                                                           Protocol.ctr
;                                                                                                                                             c
;                                                                                                                                             a
; 
;                                                                                                                                         )
;                                                                                                                                        ==
;                                                                                                                                       return_val ==>
;                                                                                                                                       FStar.ST.stable
;                                                                                                                                         (
;                                                                                                                                           Protocol.sent_bytes
;                                                                                                                                             a
;                                                                                                                                             c
;                                                                                                                                             (
;                                                                                                                                               Protocol.ctr
;                                                                                                                                                 c
;                                                                                                                                                 a
; 
;                                                                                                                                             )
;                                                                                                                                             (
;                                                                                                                                               Protocol.ctr
;                                                                                                                                                 c
;                                                                                                                                                 a
; 
;                                                                                                                                             )
; 
;                                                                                                                                         )
;                                                                                                                                        /\
;                                                                                                                                       Protocol.sent_bytes
;                                                                                                                                         a
;                                                                                                                                         c
;                                                                                                                                         (
;                                                                                                                                           Protocol.ctr
;                                                                                                                                             c
;                                                                                                                                             a
; 
;                                                                                                                                         )
;                                                                                                                                         (
;                                                                                                                                           Protocol.ctr
;                                                                                                                                             c
;                                                                                                                                             a
; 
;                                                                                                                                         )
;                                                                                                                                         h1
;                                                                                                                                        /\
;                                                                                                                                       (
;                                                                                                                                         FStar.ST.witnessed
;                                                                                                                                           (
;                                                                                                                                             Protocol.sent_bytes
;                                                                                                                                               a
;                                                                                                                                               c
;                                                                                                                                               (
;                                                                                                                                                 Protocol.ctr
;                                                                                                                                                   c
;                                                                                                                                                   a
; 
;                                                                                                                                               )
;                                                                                                                                               (
;                                                                                                                                                 Protocol.ctr
;                                                                                                                                                   c
;                                                                                                                                                   a
; 
;                                                                                                                                               )
; 
;                                                                                                                                           )
;                                                                                                                                          ==>
;                                                                                                                                         Protocol.sent
;                                                                                                                                           a
;                                                                                                                                           c
;                                                                                                                                          /\
;                                                                                                                                         (
;                                                                                                                                           forall
;                                                                                                                                             (pure_result:
;                                                                                                                                             Prims.unit)
;                                                                                                                                           .
;                                                                                                                                             Protocol.sent
;                                                                                                                                               a
;                                                                                                                                               c
;                                                                                                                                              ==>
;                                                                                                                                             p
;                                                                                                                                               pure_result
;                                                                                                                                               h1
; 
;                                                                                                                                         )
;                                                                                                                                       )
;                                                                                                                                   )
;                                                                                                                               )
;                                                                                                                           )
;                                                                                                                       )
;                                                                                                                   )
;                                                                                                               )
;                                                                                                           )
;                                                                                                       )
;                                                                                                   ))
;                                                                                           ))))))))))
;                                                   )))))))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let send_file`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
(Protocol.iarray Protocol.byte
@x0))
(HasType @x2
(Tm_refine_377d0118686d11596ae874abd2ea7677 @x0
@x1)))

;; def=FStar.Pervasives.fsti(484,2-484,63); use=FStar.Pervasives.fsti(503,15-503,26)
(and 
;; def=dummy(0,0-0,0); use=Protocol.fst(479,3-493,31)
(forall ((@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x3
FStar.Monotonic.Heap.heap)
(HasType @x4
Prims.unit)
(HasType @x5
FStar.Monotonic.Heap.heap))

;; def=Protocol.fst(474,21-477,86); use=Protocol.fst(479,3-493,31)
(and (implies 
;; def=Protocol.fst(475,22-476,44); use=Protocol.fst(479,3-493,31)
(and 
;; def=Protocol.fst(475,22-475,61); use=Protocol.fst(479,3-493,31)
(Valid 
;; def=Protocol.fst(475,22-475,61); use=Protocol.fst(479,3-493,31)
(FStar.Monotonic.Heap.modifies (Protocol.connection_footprint @x2)
@x3
@x5)
)


;; def=Protocol.fst(476,22-476,44); use=Protocol.fst(479,3-493,31)
(Valid 
;; def=Protocol.fst(476,22-476,44); use=Protocol.fst(479,3-493,31)
(Protocol.live_connection @x5
@x2)
)
)


;; def=dummy(0,0-0,0); use=Protocol.fst(479,3-493,31)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.nat)

;; def=Protocol.fst(477,39-477,44); use=Protocol.fst(479,3-493,31)
(< (BoxInt_proj_0 @x6)
(BoxInt_proj_0 @x0))
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(479,3-493,31)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(FStar.Seq.Base.seq (FStar.Pervasives.Native.option Protocol.byte)))

;; def=FStar.Seq.Base.fsti(32,23-32,24); use=Protocol.fst(479,3-493,31)
(= (MonotonicArray.as_seq Protocol.byte
@x0
@x1
@x3)
@x7)
)

;; def=FStar.Seq.Base.fsti(32,40-32,52); use=Protocol.fst(477,83-477,84)
(or label_1

;; def=FStar.Seq.Base.fsti(32,40-32,52); use=Protocol.fst(479,3-493,31)
(< (BoxInt_proj_0 @x6)
(BoxInt_proj_0 (FStar.Seq.Base.length (FStar.Pervasives.Native.option Protocol.byte)
(MonotonicArray.as_seq Protocol.byte
@x0
@x1
@x3))))
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
)
(implies 
;; def=Protocol.fst(475,22-477,86); use=Protocol.fst(479,3-493,31)
(and 
;; def=Protocol.fst(475,22-475,61); use=Protocol.fst(479,3-493,31)
(Valid 
;; def=Protocol.fst(475,22-475,61); use=Protocol.fst(479,3-493,31)
(FStar.Monotonic.Heap.modifies (Protocol.connection_footprint @x2)
@x3
@x5)
)


;; def=Protocol.fst(476,22-476,44); use=Protocol.fst(479,3-493,31)
(Valid 
;; def=Protocol.fst(476,22-476,44); use=Protocol.fst(479,3-493,31)
(Protocol.live_connection @x5
@x2)
)


;; def=Protocol.fst(477,22-477,86); use=Protocol.fst(479,3-493,31)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.nat)

;; def=Protocol.fst(477,39-477,44); use=Protocol.fst(479,3-493,31)
(< (BoxInt_proj_0 @x6)
(BoxInt_proj_0 @x0))
)

;; def=Protocol.fst(477,49-477,85); use=Protocol.fst(479,3-493,31)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some Protocol.byte
(FStar.Seq.Base.index (FStar.Pervasives.Native.option Protocol.byte)
(MonotonicArray.as_seq Protocol.byte
@x0
@x1
@x3)
@x6)))
)
 
;;no pats
:qid @query.4))
)


;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(478,52-478,54)
(or label_2

;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(479,3-493,31)
(Valid 
;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(479,3-493,31)
(MonotonicArray.init_arr_in_heap Protocol.byte
@x0
@x1
@x3)
)
)
))
)
 
;;no pats
:qid @query.1))


;; def=FStar.Pervasives.fsti(484,2-484,63); use=FStar.Pervasives.fsti(503,15-503,26)
(forall ((@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x3
(FStar.Pervasives.st_post_h FStar.Monotonic.Heap.heap
Prims.unit))
(HasType @x4
FStar.Monotonic.Heap.heap)

;; def=FStar.ST.fst(76,50-76,87); use=Protocol.fst(479,3-493,31)
(forall ((@x5 Term) (@x6 Term))
 (! (implies (and (or label_3
(HasType @x5
Prims.unit))
(or label_4
(HasType @x6
FStar.Monotonic.Heap.heap))

;; def=Protocol.fst(475,22-475,61); use=Protocol.fst(479,3-493,31)
(or label_5

;; def=Protocol.fst(475,22-475,61); use=Protocol.fst(479,3-493,31)
(Valid 
;; def=Protocol.fst(475,22-475,61); use=Protocol.fst(479,3-493,31)
(FStar.Monotonic.Heap.modifies (Protocol.connection_footprint @x2)
@x4
@x6)
)
)


;; def=Protocol.fst(476,22-476,44); use=Protocol.fst(479,3-493,31)
(or label_6

;; def=Protocol.fst(476,22-476,44); use=Protocol.fst(479,3-493,31)
(Valid 
;; def=Protocol.fst(476,22-476,44); use=Protocol.fst(479,3-493,31)
(Protocol.live_connection @x6
@x2)
)
)


;; def=Protocol.fst(477,22-477,86); use=Protocol.fst(479,3-493,31)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.nat)

;; def=Protocol.fst(477,39-477,44); use=Protocol.fst(479,3-493,31)
(< (BoxInt_proj_0 @x7)
(BoxInt_proj_0 @x0))
)

;; def=Protocol.fst(477,49-477,85); use=Protocol.fst(479,3-493,31)
(or label_7

;; def=Protocol.fst(477,49-477,85); use=Protocol.fst(479,3-493,31)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some Protocol.byte
(FStar.Seq.Base.index (FStar.Pervasives.Native.option Protocol.byte)
(MonotonicArray.as_seq Protocol.byte
@x0
@x1
@x4)
@x7)))
)
)
 
;;no pats
:qid @query.7))


;; def=Protocol.fst(478,22-478,57); use=Protocol.fst(479,3-493,31)
(or label_8

;; def=Protocol.fst(478,22-478,57); use=Protocol.fst(479,3-493,31)
(Valid 
;; def=Protocol.fst(478,22-478,57); use=Protocol.fst(479,3-493,31)
(Protocol.sent (MonotonicArray.as_initialized_seq Protocol.byte
@x0
@x1
@x4)
@x2)
)
)
)

;; def=FStar.ST.fst(76,80-76,86); use=Protocol.fst(479,3-493,31)
(Valid 
;; def=FStar.ST.fst(76,80-76,86); use=Protocol.fst(479,3-493,31)
(ApplyTT (ApplyTT @x3
@x5)
@x6)
)
)
 

:pattern (
;; def=FStar.ST.fst(76,80-76,86); use=Protocol.fst(479,3-493,31)
(Valid 
;; def=FStar.ST.fst(76,80-76,86); use=Protocol.fst(479,3-493,31)
(ApplyTT (ApplyTT @x3
@x5)
@x6)
)
)
:qid @query.6))
)

;; def=FStar.ST.fst(76,50-76,87); use=Protocol.fst(479,16-479,19)
(forall ((@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x5
FStar.Monotonic.Heap.heap)
(HasType @x6
FStar.Monotonic.Heap.heap)

;; def=FStar.ST.fst(116,58-116,64); use=Protocol.fst(479,16-479,19)
(= @x4
@x6)


;; def=FStar.ST.fst(116,68-116,73); use=Protocol.fst(479,16-479,19)
(= @x5
@x6)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(479,3-493,31)
(and (implies 
;; def=Protocol.fst(175,44-175,54); use=Protocol.fst(480,20-480,24)
(and 
;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(480,20-480,24)
(Valid 
;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(480,20-480,24)
(FStar.ST.witnessed (MonotonicArray.mutable_pred Protocol.byte
@x0
@x1))
)


;; def=Protocol.fst(175,44-175,54); use=Protocol.fst(480,20-480,24)
(Valid 
;; def=Protocol.fst(175,44-175,54); use=Protocol.fst(480,20-480,24)
(MonotonicArray.all_init Protocol.byte
@x0
@x1)
)
)


;; def=MonotonicArray.fsti(270,51-270,63); use=Protocol.fst(480,20-480,24)
(or label_9

;; def=MonotonicArray.fsti(270,51-270,63); use=Protocol.fst(480,20-480,24)
(Valid 
;; def=MonotonicArray.fsti(270,51-270,63); use=Protocol.fst(480,20-480,24)
(MonotonicArray.all_init Protocol.byte
@x0
@x1)
)
)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(479,3-493,31)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(Protocol.iarray Protocol.byte
@x0))

;; def=MonotonicArray.fsti(270,41-270,44); use=Protocol.fst(479,3-493,31)
(= @x1
@x7)
)

;; def=FStar.ST.fst(76,50-76,87); use=Protocol.fst(480,4-480,19)
(forall ((@x8 Term) (@x9 Term))
 (! (implies (and (HasType @x8
Prims.unit)
(HasType @x9
FStar.Monotonic.Heap.heap)

;; def=MonotonicArray.fsti(272,37-272,45); use=Protocol.fst(480,4-480,19)
(= @x6
@x9)


;; def=MonotonicArray.fsti(272,49-272,72); use=Protocol.fst(480,4-480,19)
(Valid 
;; def=MonotonicArray.fsti(272,49-272,72); use=Protocol.fst(480,4-480,19)
(MonotonicArray.init_arr_in_heap Protocol.byte
@x0
@x1
@x6)
)
)

;; def=FStar.ST.fst(76,50-76,87); use=Protocol.fst(481,4-481,19)
(forall ((@x10 Term) (@x11 Term))
 (! (implies (and (HasType @x10
Prims.unit)
(HasType @x11
FStar.Monotonic.Heap.heap)

;; def=MonotonicArray.fsti(244,37-244,45); use=Protocol.fst(481,4-481,19)
(= @x9
@x11)


;; def=MonotonicArray.fsti(244,49-244,72); use=Protocol.fst(481,4-481,19)
(Valid 
;; def=MonotonicArray.fsti(244,49-244,72); use=Protocol.fst(481,4-481,19)
(MonotonicArray.contains_array Protocol.byte
@x0
@x9
@x1)
)
)

;; def=FStar.ST.fst(76,50-76,87); use=Protocol.fst(482,4-482,30)
(forall ((@x12 Term) (@x13 Term))
 (! (implies (and (HasType @x12
Prims.unit)
(HasType @x13
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(122,64-122,72); use=Protocol.fst(482,4-482,30)
(= @x11
@x13)


;; def=Protocol.fst(122,76-122,98); use=Protocol.fst(482,4-482,30)
(Valid 
;; def=Protocol.fst(122,76-122,98); use=Protocol.fst(482,4-482,30)
(Protocol.live_connection @x11
@x2)
)
)

;; def=FStar.ST.fst(76,50-76,87); use=Protocol.fst(483,22-483,35)
(forall ((@x14 Term) (@x15 Term))
 (! (implies (and (HasType @x14
(FStar.Seq.Base.seq Protocol.byte))
(HasType @x15
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(351,14-351,20); use=Protocol.fst(483,22-483,35)
(= @x13
@x15)


;; def=Protocol.fst(352,14-352,75); use=Protocol.fst(483,22-483,35)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
Prims.nat)

;; def=Protocol.fst(352,31-352,36); use=Protocol.fst(483,22-483,35)
(< (BoxInt_proj_0 @x16)
(BoxInt_proj_0 @x0))
)

;; def=Protocol.fst(352,41-352,74); use=Protocol.fst(483,22-483,35)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some Protocol.byte
(FStar.Seq.Base.index (FStar.Pervasives.Native.option Protocol.byte)
(MonotonicArray.as_seq Protocol.byte
@x0
@x1
@x13)
@x16)))
)
 
;;no pats
:qid @query.14))


;; def=Protocol.fst(353,14-353,49); use=Protocol.fst(483,22-483,35)
(= @x14
(MonotonicArray.as_initialized_subseq Protocol.byte
@x0
@x1
@x13
(BoxInt 0)
@x0))


;; def=Protocol.fst(354,7-354,35); use=Protocol.fst(483,22-483,35)
(= @x14
(MonotonicArray.as_initialized_seq Protocol.byte
@x0
@x1
@x13))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(479,3-493,31)
(and 
;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(484,21-484,23)
(or label_10

;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(484,21-484,23)
(Valid 
;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(484,21-484,23)
(Protocol.live_connection @x5
@x2)
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(479,3-493,31)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(151,24-479,10); use=Protocol.fst(479,3-493,31)
(= @x5
@x16)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(479,3-493,31)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Prims.nat)

;; def=Protocol.fst(484,8-484,23); use=Protocol.fst(484,8-484,23)
(= (Protocol.ctr @x2
@x5)
@x17)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(479,3-493,31)
(and 
;; def=MonotonicArray.fsti(289,27-289,33); use=Protocol.fst(485,55-485,56)
(or label_11

;; def=MonotonicArray.fsti(289,27-289,33); use=Protocol.fst(485,55-485,56)
(<= (BoxInt_proj_0 (BoxInt 0))
(BoxInt_proj_0 @x0))
)


;; def=MonotonicArray.fsti(289,37-289,67); use=Protocol.fst(485,55-485,56)
(or label_12

;; def=MonotonicArray.fsti(289,37-289,67); use=Protocol.fst(485,55-485,56)
(Valid 
;; def=MonotonicArray.fsti(289,37-289,67); use=Protocol.fst(485,55-485,56)
(MonotonicArray.init_arr_in_heap_i_j Protocol.byte
@x0
@x1
@x5
(BoxInt 0)
(BoxInt 0))
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(479,3-493,31)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
Prims.int)

;; def=MonotonicArray.fsti(289,11-289,12); use=Protocol.fst(479,3-493,31)
(= (BoxInt 0)
@x18)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(479,3-493,31)
(forall ((@x19 Term))
 (! (implies (and (HasType @x19
(FStar.Seq.Base.seq Protocol.byte))

;; def=FStar.Seq.Base.fsti(166,21-166,23); use=Protocol.fst(479,3-493,31)
(= (MonotonicArray.as_initialized_subseq Protocol.byte
@x0
@x1
@x5
(BoxInt 0)
(BoxInt 0))
@x19)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(479,3-493,31)
(forall ((@x20 Term))
 (! (implies (and (HasType @x20
Prims.prop)

;; def=FStar.Seq.Base.fsti(166,48-166,52); use=Protocol.fst(485,11-485,68)
(= (FStar.Seq.Base.equal Protocol.byte
(MonotonicArray.as_initialized_subseq Protocol.byte
@x0
@x1
@x5
(BoxInt 0)
(BoxInt 0))
(FStar.Seq.Base.empty Protocol.byte))
@x20)
)

;; def=Prims.fst(356,2-356,58); use=Protocol.fst(479,3-493,31)
(forall ((@x21 Term))
 (! (implies (and (HasType @x21
Prims.prop)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(479,3-493,31)
(= @x21
(FStar.Seq.Base.equal Protocol.byte
(MonotonicArray.as_initialized_subseq Protocol.byte
@x0
@x1
@x5
(BoxInt 0)
(BoxInt 0))
(FStar.Seq.Base.empty Protocol.byte)))


;; def=Prims.fst(672,13-672,14); use=Protocol.fst(479,3-493,31)
(= (FStar.Seq.Base.equal Protocol.byte
(MonotonicArray.as_initialized_subseq Protocol.byte
@x0
@x1
@x5
(BoxInt 0)
(BoxInt 0))
(FStar.Seq.Base.empty Protocol.byte))
@x21)
)

;; def=Prims.fst(441,29-441,97); use=Protocol.fst(485,4-485,10)
(and 
;; def=Protocol.fst(485,11-485,68); use=Protocol.fst(485,4-485,10)
(or label_13

;; def=Protocol.fst(485,11-485,68); use=Protocol.fst(485,4-485,10)
(Valid 
;; def=Protocol.fst(485,11-485,68); use=Protocol.fst(485,4-485,10)
(FStar.Seq.Base.equal Protocol.byte
(MonotonicArray.as_initialized_subseq Protocol.byte
@x0
@x1
@x5
(BoxInt 0)
(BoxInt 0))
(FStar.Seq.Base.empty Protocol.byte))
)
)


;; def=Prims.fst(441,36-441,97); use=Protocol.fst(485,4-485,10)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
Prims.unit)

;; def=Protocol.fst(485,11-485,68); use=Protocol.fst(485,4-485,10)
(Valid 
;; def=Protocol.fst(485,11-485,68); use=Protocol.fst(485,4-485,10)
(FStar.Seq.Base.equal Protocol.byte
(MonotonicArray.as_initialized_subseq Protocol.byte
@x0
@x1
@x5
(BoxInt 0)
(BoxInt 0))
(FStar.Seq.Base.empty Protocol.byte))
)
)

;; def=Prims.fst(441,36-441,97); use=Protocol.fst(486,4-486,17)
(forall ((@x23 Term))
 (! (implies (and (HasType @x23
Prims.unit)

;; def=Protocol.fst(331,42-331,74); use=Protocol.fst(486,4-486,17)
(= (Protocol.flatten (FStar.Seq.Base.empty Protocol.message))
(FStar.Seq.Base.empty Protocol.byte))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(479,3-493,31)
(and 
;; def=Protocol.fst(140,31-140,52); use=Protocol.fst(487,49-487,51)
(or label_14

;; def=Protocol.fst(140,31-140,52); use=Protocol.fst(487,49-487,51)
(Valid 
;; def=Protocol.fst(140,31-140,52); use=Protocol.fst(487,49-487,51)
(Protocol.live_connection @x5
@x2)
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(479,3-493,31)
(forall ((@x24 Term))
 (! (implies (and (HasType @x24
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(140,24-479,10); use=Protocol.fst(479,3-493,31)
(= @x5
@x24)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(479,3-493,31)
(forall ((@x25 Term))
 (! (implies (and (HasType @x25
(FStar.Seq.Base.seq Protocol.message))

;; def=FStar.Seq.Base.fsti(64,23-64,24); use=Protocol.fst(479,3-493,31)
(= (Protocol.log @x2
@x5)
@x25)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(479,3-493,31)
(and 
;; def=Protocol.fst(484,8-484,12); use=Protocol.fst(487,58-487,62)
(or label_15
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (Protocol.ctr @x2
@x5)
(Protocol.ctr @x2
@x5))))


;; def=Protocol.fst(484,8-484,12); use=Protocol.fst(487,58-487,62)
(or label_16
(BoxBool_proj_0 (Prims.op_LessThanOrEqual (Protocol.ctr @x2
@x5)
(FStar.Seq.Base.length Protocol.message
(Protocol.log @x2
@x5)))))


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(479,3-493,31)
(forall ((@x26 Term))
 (! (implies (and (HasType @x26
Prims.nat)

;; def=FStar.Seq.Base.fsti(64,43-64,44); use=Protocol.fst(479,3-493,31)
(= (Protocol.ctr @x2
@x5)
@x26)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(479,3-493,31)
(forall ((@x27 Term))
 (! (implies (and (HasType @x27
(FStar.Seq.Base.seq Protocol.message))

;; def=Protocol.fst(325,20-487,63); use=Protocol.fst(479,3-493,31)
(= (FStar.Seq.Base.slice Protocol.message
(Protocol.log @x2
@x5)
(Protocol.ctr @x2
@x5)
(Protocol.ctr @x2
@x5))
@x27)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(479,3-493,31)
(forall ((@x28 Term))
 (! (implies (and (HasType @x28
(FStar.Seq.Base.seq Protocol.byte))

;; def=FStar.Seq.Base.fsti(166,21-166,23); use=Protocol.fst(479,3-493,31)
(= (Protocol.flatten (FStar.Seq.Base.slice Protocol.message
(Protocol.log @x2
@x5)
(Protocol.ctr @x2
@x5)
(Protocol.ctr @x2
@x5)))
@x28)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(479,3-493,31)
(forall ((@x29 Term))
 (! (implies (and (HasType @x29
Prims.prop)

;; def=FStar.Seq.Base.fsti(166,48-166,52); use=Protocol.fst(487,11-487,75)
(= (FStar.Seq.Base.equal Protocol.byte
(Protocol.flatten (FStar.Seq.Base.slice Protocol.message
(Protocol.log @x2
@x5)
(Protocol.ctr @x2
@x5)
(Protocol.ctr @x2
@x5)))
(FStar.Seq.Base.empty Protocol.byte))
@x29)
)

;; def=Prims.fst(356,2-356,58); use=Protocol.fst(479,3-493,31)
(forall ((@x30 Term))
 (! (implies (and (HasType @x30
Prims.prop)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(479,3-493,31)
(= @x30
(FStar.Seq.Base.equal Protocol.byte
(Protocol.flatten (FStar.Seq.Base.slice Protocol.message
(Protocol.log @x2
@x5)
(Protocol.ctr @x2
@x5)
(Protocol.ctr @x2
@x5)))
(FStar.Seq.Base.empty Protocol.byte)))


;; def=Prims.fst(672,13-672,14); use=Protocol.fst(479,3-493,31)
(= (FStar.Seq.Base.equal Protocol.byte
(Protocol.flatten (FStar.Seq.Base.slice Protocol.message
(Protocol.log @x2
@x5)
(Protocol.ctr @x2
@x5)
(Protocol.ctr @x2
@x5)))
(FStar.Seq.Base.empty Protocol.byte))
@x30)
)

;; def=Prims.fst(441,29-441,97); use=Protocol.fst(487,4-487,10)
(and 
;; def=Protocol.fst(487,11-487,75); use=Protocol.fst(487,4-487,10)
(or label_17

;; def=Protocol.fst(487,11-487,75); use=Protocol.fst(487,4-487,10)
(Valid 
;; def=Protocol.fst(487,11-487,75); use=Protocol.fst(487,4-487,10)
(FStar.Seq.Base.equal Protocol.byte
(Protocol.flatten (FStar.Seq.Base.slice Protocol.message
(Protocol.log @x2
@x5)
(Protocol.ctr @x2
@x5)
(Protocol.ctr @x2
@x5)))
(FStar.Seq.Base.empty Protocol.byte))
)
)


;; def=Prims.fst(441,36-441,97); use=Protocol.fst(487,4-487,10)
(forall ((@x31 Term))
 (! (implies (and (HasType @x31
Prims.unit)

;; def=Protocol.fst(487,11-487,75); use=Protocol.fst(487,4-487,10)
(Valid 
;; def=Protocol.fst(487,11-487,75); use=Protocol.fst(487,4-487,10)
(FStar.Seq.Base.equal Protocol.byte
(Protocol.flatten (FStar.Seq.Base.slice Protocol.message
(Protocol.log @x2
@x5)
(Protocol.ctr @x2
@x5)
(Protocol.ctr @x2
@x5)))
(FStar.Seq.Base.empty Protocol.byte))
)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(479,3-493,31)
(and 
;; def=Protocol.fst(416,19-416,27); use=Protocol.fst(488,25-488,26)
(or label_18

;; def=Protocol.fst(416,19-416,27); use=Protocol.fst(488,25-488,26)
(<= (BoxInt_proj_0 (BoxInt 0))
(BoxInt_proj_0 @x0))
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(479,3-493,31)
(forall ((@x32 Term))
 (! (implies (and (HasType @x32
Prims.int)

;; def=Protocol.fst(416,11-488,26); use=Protocol.fst(479,3-493,31)
(= (BoxInt 0)
@x32)
)

;; def=FStar.ST.fst(76,41-76,87); use=Protocol.fst(488,4-488,12)
(and 
;; def=Protocol.fst(419,22-419,52); use=Protocol.fst(488,4-488,12)
(or label_19

;; def=Protocol.fst(419,22-419,52); use=Protocol.fst(488,4-488,12)
(Valid 
;; def=Protocol.fst(419,22-419,52); use=Protocol.fst(488,4-488,12)
(Protocol.fully_initialized_in Protocol.byte
@x0
@x1
@x15)
)
)


;; def=Protocol.fst(420,22-420,44); use=Protocol.fst(488,4-488,12)
(or label_20

;; def=Protocol.fst(420,22-420,44); use=Protocol.fst(488,4-488,12)
(Valid 
;; def=Protocol.fst(420,22-420,44); use=Protocol.fst(488,4-488,12)
(Protocol.live_connection @x15
@x2)
)
)


;; def=Protocol.fst(421,22-421,38); use=Protocol.fst(488,4-488,12)
(or label_21

;; def=Protocol.fst(421,22-421,38); use=Protocol.fst(488,4-488,12)
(<= (BoxInt_proj_0 (Protocol.ctr @x2
@x5))
(BoxInt_proj_0 (Protocol.ctr @x2
@x15)))
)


;; def=Protocol.fst(422,22-422,91); use=Protocol.fst(488,4-488,12)
(or label_22

;; def=Protocol.fst(422,22-422,91); use=Protocol.fst(488,4-488,12)
(Valid 
;; def=Protocol.fst(422,22-422,91); use=Protocol.fst(488,4-488,12)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Protocol.sent_bytes@tok
(MonotonicArray.as_initialized_subseq Protocol.byte
@x0
@x1
@x15
(BoxInt 0)
(BoxInt 0)))
@x2)
(Protocol.ctr @x2
@x5))
(Protocol.ctr @x2
@x15))
@x15)
)
)


;; def=FStar.ST.fst(76,50-76,87); use=Protocol.fst(488,4-488,12)
(forall ((@x33 Term) (@x34 Term))
 (! (implies (and (HasType @x33
Prims.unit)
(HasType @x34
(Tm_refine_8ad69a1f48acc6b64971d03a0053572b @x0
@x1
@x15
@x2
@x5))

;; def=Protocol.fst(424,22-424,61); use=Protocol.fst(488,4-488,12)
(Valid 
;; def=Protocol.fst(424,22-424,61); use=Protocol.fst(488,4-488,12)
(FStar.Monotonic.Heap.modifies (Protocol.connection_footprint @x2)
@x15
@x34)
)


;; def=Protocol.fst(425,22-425,44); use=Protocol.fst(488,4-488,12)
(Valid 
;; def=Protocol.fst(425,22-425,44); use=Protocol.fst(488,4-488,12)
(Protocol.live_connection @x34
@x2)
)


;; def=Protocol.fst(426,22-426,38); use=Protocol.fst(488,4-488,12)
(<= (BoxInt_proj_0 (Protocol.ctr @x2
@x5))
(BoxInt_proj_0 (Protocol.ctr @x2
@x34)))


;; def=Protocol.fst(427,22-427,86); use=Protocol.fst(488,4-488,12)
(forall ((@x35 Term))
 (! (implies (and (HasType @x35
Prims.nat)

;; def=Protocol.fst(427,39-427,44); use=Protocol.fst(488,4-488,12)
(< (BoxInt_proj_0 @x35)
(BoxInt_proj_0 @x0))
)

;; def=Protocol.fst(427,49-427,85); use=Protocol.fst(488,4-488,12)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some Protocol.byte
(FStar.Seq.Base.index (FStar.Pervasives.Native.option Protocol.byte)
(MonotonicArray.as_seq Protocol.byte
@x0
@x1
@x15)
@x35)))
)
 
;;no pats
:qid @query.33))


;; def=Protocol.fst(428,22-428,82); use=Protocol.fst(488,4-488,12)
(Valid 
;; def=Protocol.fst(428,22-428,82); use=Protocol.fst(488,4-488,12)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Protocol.sent_bytes@tok
(MonotonicArray.as_initialized_seq Protocol.byte
@x0
@x1
@x15))
@x2)
(Protocol.ctr @x2
@x5))
(Protocol.ctr @x2
@x34))
@x34)
)
)

;; def=FStar.ST.fst(76,50-76,87); use=Protocol.fst(489,16-489,19)
(forall ((@x35 Term) (@x36 Term))
 (! (implies (and (HasType @x35
FStar.Monotonic.Heap.heap)
(HasType @x36
FStar.Monotonic.Heap.heap)

;; def=FStar.ST.fst(116,58-116,64); use=Protocol.fst(489,16-489,19)
(= @x34
@x36)


;; def=FStar.ST.fst(116,68-116,73); use=Protocol.fst(489,16-489,19)
(= @x35
@x36)
)

;; def=FStar.ST.fst(76,50-76,87); use=Protocol.fst(490,22-490,35)
(forall ((@x37 Term) (@x38 Term))
 (! (implies (and (HasType @x37
(FStar.Seq.Base.seq Protocol.byte))
(HasType @x38
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(351,14-351,20); use=Protocol.fst(490,22-490,35)
(= @x36
@x38)


;; def=Protocol.fst(352,14-352,75); use=Protocol.fst(490,22-490,35)
(forall ((@x39 Term))
 (! (implies (and (HasType @x39
Prims.nat)

;; def=Protocol.fst(352,31-352,36); use=Protocol.fst(490,22-490,35)
(< (BoxInt_proj_0 @x39)
(BoxInt_proj_0 @x0))
)

;; def=Protocol.fst(352,41-352,74); use=Protocol.fst(490,22-490,35)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some Protocol.byte
(FStar.Seq.Base.index (FStar.Pervasives.Native.option Protocol.byte)
(MonotonicArray.as_seq Protocol.byte
@x0
@x1
@x36)
@x39)))
)
 
;;no pats
:qid @query.36))


;; def=Protocol.fst(353,14-353,49); use=Protocol.fst(490,22-490,35)
(= @x37
(MonotonicArray.as_initialized_subseq Protocol.byte
@x0
@x1
@x36
(BoxInt 0)
@x0))


;; def=Protocol.fst(354,7-354,35); use=Protocol.fst(490,22-490,35)
(= @x37
(MonotonicArray.as_initialized_seq Protocol.byte
@x0
@x1
@x36))
)

;; def=Prims.fst(441,29-441,97); use=Protocol.fst(491,4-491,10)
(and 
;; def=Protocol.fst(491,11-491,39); use=Protocol.fst(491,4-491,10)
(or label_23

;; def=Protocol.fst(491,11-491,39); use=Protocol.fst(491,4-491,10)
(= @x14
@x37)
)


;; def=Prims.fst(441,36-441,97); use=Protocol.fst(491,4-491,10)
(forall ((@x39 Term))
 (! (implies (and (HasType @x39
Prims.unit)

;; def=Protocol.fst(491,11-491,39); use=Protocol.fst(491,4-491,10)
(= @x14
@x37)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(479,3-493,31)
(and 
;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(492,54-492,56)
(or label_24

;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(492,54-492,56)
(Valid 
;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(492,54-492,56)
(Protocol.live_connection @x35
@x2)
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(479,3-493,31)
(forall ((@x40 Term))
 (! (implies (and (HasType @x40
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(151,24-489,10); use=Protocol.fst(479,3-493,31)
(= @x35
@x40)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(479,3-493,31)
(forall ((@x41 Term))
 (! (implies (and (HasType @x41
Prims.nat)

;; def=Protocol.fst(341,57-492,57); use=Protocol.fst(492,17-492,57)
(= (Protocol.ctr @x2
@x35)
@x41)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(479,3-493,31)
(and 
;; def=Protocol.fst(341,65-341,75); use=Protocol.fst(492,47-492,57)
(or label_25

;; def=Protocol.fst(341,65-341,75); use=Protocol.fst(492,47-492,57)
(<= (BoxInt_proj_0 (Protocol.ctr @x2
@x5))
(BoxInt_proj_0 (Protocol.ctr @x2
@x35)))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(479,3-493,31)
(forall ((@x42 Term))
 (! (implies (and (HasType @x42
(Tm_refine_8aa7b1af5b127279eb2d5d83cea01cbf @x2
@x5))

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(479,3-493,31)
(= @x42
(Protocol.ctr @x2
@x35))


;; def=Protocol.fst(341,58-492,57); use=Protocol.fst(479,3-493,31)
(= (Protocol.ctr @x2
@x35)
@x42)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(479,3-493,31)
(forall ((@x43 Term))
 (! (implies (and (HasType @x43
Tm_refine_a11098d99239284f14b49e1dd0266896)

;; def=Protocol.fst(341,79-492,58); use=Protocol.fst(492,16-492,58)
(= (Protocol.sent_bytes @x14
@x2
(Protocol.ctr @x2
@x5)
(Protocol.ctr @x2
@x35))
@x43)
)

;; def=Prims.fst(356,2-356,58); use=Protocol.fst(479,3-493,31)
(forall ((@x44 Term))
 (! (implies (and (HasType @x44
Tm_refine_a11098d99239284f14b49e1dd0266896)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(479,3-493,31)
(= @x44
(Protocol.sent_bytes @x14
@x2
(Protocol.ctr @x2
@x5)
(Protocol.ctr @x2
@x35)))


;; def=FStar.ST.fst(51,24-51,25); use=Protocol.fst(479,3-493,31)
(= (Protocol.sent_bytes @x14
@x2
(Protocol.ctr @x2
@x5)
(Protocol.ctr @x2
@x35))
@x44)
)

;; def=FStar.ST.fst(51,69-51,117); use=Protocol.fst(492,4-492,15)
(and 
;; def=FStar.ST.fst(51,69-51,77); use=Protocol.fst(492,4-492,15)
(or label_26

;; def=FStar.ST.fst(51,69-51,77); use=Protocol.fst(492,4-492,15)
(Valid 
;; def=FStar.ST.fst(51,69-51,77); use=Protocol.fst(492,4-492,15)
(FStar.ST.stable (Protocol.sent_bytes @x14
@x2
(Protocol.ctr @x2
@x5)
(Protocol.ctr @x2
@x35)))
)
)


;; def=FStar.ST.fst(51,81-51,85); use=Protocol.fst(492,4-492,15)
(or label_27

;; def=FStar.ST.fst(51,81-51,85); use=Protocol.fst(492,4-492,15)
(Valid 
;; def=FStar.ST.fst(51,81-51,85); use=Protocol.fst(492,4-492,15)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Protocol.sent_bytes@tok
@x14)
@x2)
(Protocol.ctr @x2
@x5))
(Protocol.ctr @x2
@x35))
@x38)
)
)

(implies 
;; def=FStar.ST.fst(51,90-51,101); use=Protocol.fst(492,4-492,15)
(Valid 
;; def=FStar.ST.fst(51,90-51,101); use=Protocol.fst(492,4-492,15)
(FStar.ST.witnessed (Protocol.sent_bytes @x14
@x2
(Protocol.ctr @x2
@x5)
(Protocol.ctr @x2
@x35)))
)


;; def=Prims.fst(441,29-441,97); use=Protocol.fst(493,4-493,10)
(and 
;; def=Protocol.fst(493,11-493,31); use=Protocol.fst(493,4-493,10)
(or label_28

;; def=Protocol.fst(493,11-493,31); use=Protocol.fst(493,4-493,10)
(Valid 
;; def=Protocol.fst(493,11-493,31); use=Protocol.fst(493,4-493,10)
(Protocol.sent @x14
@x2)
)
)


;; def=Prims.fst(441,36-441,97); use=Protocol.fst(493,4-493,10)
(forall ((@x45 Term))
 (! (implies (and (HasType @x45
Prims.unit)

;; def=Protocol.fst(493,11-493,31); use=Protocol.fst(493,4-493,10)
(Valid 
;; def=Protocol.fst(493,11-493,31); use=Protocol.fst(493,4-493,10)
(Protocol.sent @x14
@x2)
)
)

;; def=FStar.ST.fst(33,87-33,92); use=Protocol.fst(479,3-493,31)
(Valid 
;; def=FStar.ST.fst(33,87-33,92); use=Protocol.fst(479,3-493,31)
(ApplyTT (ApplyTT @x3
@x45)
@x38)
)
)
 
;;no pats
:qid @query.43))
)
))
)
 
;;no pats
:qid @query.42))
)
 
;;no pats
:qid @query.41))
)
 
;;no pats
:qid @query.40))
)
)
 
;;no pats
:qid @query.39))
)
 
;;no pats
:qid @query.38))
)
)
 
;;no pats
:qid @query.37))
)
)
 
;;no pats
:qid @query.35))
)
 
;;no pats
:qid @query.34))
)
 
;;no pats
:qid @query.32))
)
)
 
;;no pats
:qid @query.31))
)
)
 
;;no pats
:qid @query.30))
)
)
 
;;no pats
:qid @query.29))
)
 
;;no pats
:qid @query.28))
)
 
;;no pats
:qid @query.27))
)
 
;;no pats
:qid @query.26))
)
 
;;no pats
:qid @query.25))
)
)
 
;;no pats
:qid @query.24))
)
 
;;no pats
:qid @query.23))
)
)
 
;;no pats
:qid @query.22))
)
 
;;no pats
:qid @query.21))
)
)
 
;;no pats
:qid @query.20))
)
 
;;no pats
:qid @query.19))
)
 
;;no pats
:qid @query.18))
)
 
;;no pats
:qid @query.17))
)
)
 
;;no pats
:qid @query.16))
)
 
;;no pats
:qid @query.15))
)
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.5))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_28")
(eval label_28)
(echo "label_27")
(eval label_27)
(echo "label_26")
(eval label_26)
(echo "label_25")
(eval label_25)
(echo "label_24")
(eval label_24)
(echo "label_23")
(eval label_23)
(echo "label_22")
(eval label_22)
(echo "label_21")
(eval label_21)
(echo "label_20")
(eval label_20)
(echo "label_19")
(eval label_19)
(echo "label_18")
(eval label_18)
(echo "label_17")
(eval label_17)
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Protocol.send_file, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, FStar.Classical_interpretation_Tm_arrow_6980332764c4493a7b0df5c02f7aefbe, FStar.Seq.Base_pretyping_7efa52b424e80c83ad68a652aa3561e4, Protocol_interpretation_Tm_arrow_bbf9c13f2e1689774c895427eb4d7c9a, b2t_def, bool_inversion, disc_equation_Protocol.S, eq2-interp, equation_ArrayUtils.all_some, equation_ArrayUtils.init_at_seq, equation_ArrayUtils.some_equivalent_seqs, equation_FStar.Preorder.preorder, equation_FStar.Preorder.preorder_rel, equation_FStar.Preorder.reflexive, equation_FStar.Preorder.transitive, equation_FStar.ST.mref, equation_MonotonicArray.array, equation_MonotonicArray.as_initialized_seq, equation_MonotonicArray.as_initialized_subseq, equation_MonotonicArray.init_arr_in_heap, equation_MonotonicArray.init_arr_in_heap_i_j, equation_Prims.nat, equation_Protocol.connection_footprint, equation_Protocol.ctr, equation_Protocol.entries, equation_Protocol.entries_of, equation_Protocol.entries_rel, equation_Protocol.fully_initialized_in, equation_Protocol.iarray, equation_Protocol.is_prefix_of, equation_Protocol.log, equation_Protocol.message, equation_Protocol.rand_of, equation_Protocol.sender, equation_Protocol.sent, equation_Protocol.sent_bytes, equation_Protocol.sent_bytes_, int_inversion, interpretation_Tm_abs_41efd131336ec34ef1b819bed745d3d1, interpretation_Tm_abs_7f6e09c57851a655e400606396618bbe, kinding_FStar.Pervasives.Native.option@tok, kinding_Protocol.entry@tok, l_and-interp, lemma_ArrayUtils.lemma_get_some_equivalent_slice, lemma_FStar.Seq.Base.lemma_eq_refl, lemma_FStar.Seq.Properties.slice_is_empty, lemma_FStar.Seq.Properties.slice_length, lemma_MonotonicArray.lemma_as_seq_length, lemma_MonotonicArray.lemma_framing_of_as_seq, lemma_Protocol.lemma_sel_entries_equals_sel_tot_entries, primitive_Prims.op_LessThanOrEqual, projection_inverse_BoxBool_proj_0, refinement_interpretation_Tm_refine_377d0118686d11596ae874abd2ea7677, refinement_interpretation_Tm_refine_4a193488219f747acf46a37f5644f382, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_571d9f74016be5357787170b42ecf913, refinement_interpretation_Tm_refine_8aa7b1af5b127279eb2d5d83cea01cbf, refinement_interpretation_Tm_refine_9dd2f7dc4f1c13136a80acee9d90b531, refinement_interpretation_Tm_refine_a11098d99239284f14b49e1dd0266896, refinement_interpretation_Tm_refine_b361ba8089a6e963921008d537e799a1, refinement_interpretation_Tm_refine_b913a3f691ca99086652e0a655e72f17, refinement_interpretation_Tm_refine_bd10f09297e0e7dc08314f7d9211801c, refinement_interpretation_Tm_refine_c52766f1ffb36bccccc81ae2f2d192be, refinement_interpretation_Tm_refine_e33ef751d600ad1c7f71142479103c47, refinement_interpretation_Tm_refine_e50addb6c1bbd8f85fb54bf03b146e15, refinement_interpretation_Tm_refine_f984cba283a0017499e468d307a8fd1d, refinement_kinding_Tm_refine_8cf65a0e984801514f164a721568601b, token_correspondence_Protocol.sent_bytes, typing_ArrayUtils.get_some_equivalent, typing_ArrayUtils.seq_map, typing_FStar.Monotonic.Heap.sel, typing_FStar.Seq.Base.empty, typing_FStar.Seq.Base.length, typing_MonotonicArray.as_seq, typing_Protocol.byte, typing_Protocol.connection_footprint, typing_Protocol.entries, typing_Protocol.entries_of, typing_Protocol.entries_rel, typing_Protocol.rand_of, typing_Protocol.sender, typing_Tm_abs_1f17782d7f15dca3aa2da1fe8e018a7e

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at Protocol.fst(471,0-493,31)

(declare-fun label_1 () Bool)

; Encoding query formula : forall (n: Prims.nat) (file: Protocol.iarray Protocol.byte n).
;   (*  - Subtyping check failed
;   - Expected type Type0 got type Type0
; *)
;   forall (c: Protocol.connection). Protocol.sender c ==> Prims.hasEq Prims.nat


; Context: While encoding a query
; While checking for top-level effects
; While typechecking the top-level declaration `let send_file`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
(Protocol.iarray Protocol.byte
@x0)))

;; def=dummy(0,0-0,0); use=Protocol.fst(479,3-493,31)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
Protocol.connection)

;; def=Protocol.fst(471,58-471,66); use=Protocol.fst(479,3-493,31)
(BoxBool_proj_0 (Protocol.sender @x2))
)

;; def=Prims.fst(73,23-73,30); use=Protocol.fst(471,84-471,104)
(or label_1

;; def=Prims.fst(73,23-73,30); use=Protocol.fst(479,3-493,31)
(Valid 
;; def=Prims.fst(73,23-73,30); use=Protocol.fst(479,3-493,31)
(Prims.hasEq Prims.nat)
)
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Protocol.send_file, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Prims.eqtype, equation_Prims.nat, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let send_file


; <Start encoding let send_file>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Protocol.send_file (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Protocol.send_file@tok () Term)

; </end encoding let send_file>

(push) ;; push{2

; Starting query at Protocol.fst(496,4-497,38)

(declare-fun label_1 () Bool)

; Encoding query formula : forall (n: Prims.nat)
;   (file: Protocol.iarray Protocol.byte n)
;   (c: Protocol.connection)
;   (h: FStar.Monotonic.Heap.heap).
;   (*  - Could not prove post-condition
; *)
;   Protocol.fully_initialized_in file h ==>
;   Prims.auto_squash (MonotonicArray.init_arr_in_heap file h)


; Context: While encoding a query
; While typechecking the top-level declaration `let received`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
(Protocol.iarray Protocol.byte
@x0))
(HasType @x2
Protocol.connection)
(HasType @x3
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(496,4-496,33); use=Protocol.fst(496,4-496,33)
(Valid 
;; def=Protocol.fst(496,4-496,33); use=Protocol.fst(496,4-496,33)
(Protocol.fully_initialized_in Protocol.byte
@x0
@x1
@x3)
)
)

;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(497,34-497,35)
(or label_1

;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(497,34-497,35)
(Valid 
;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(497,34-497,35)
(MonotonicArray.init_arr_in_heap Protocol.byte
@x0
@x1
@x3)
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Protocol.received, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query, b2t_def, equation_ArrayUtils.init_at_seq, equation_MonotonicArray.init_arr_in_heap, equation_MonotonicArray.init_arr_in_heap_i_j, equation_Protocol.fully_initialized_in

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let received


; <Start encoding let received>

(declare-fun Protocol.received (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;file: iarray byte n -> c: connection -> h: FStar.Monotonic.Heap.heap -> Prims.logical
(declare-fun Tm_arrow_3258deb00b0ca3f3ea055705092e37a1 () Term)
(declare-fun Protocol.received@tok () Term)

; </end encoding let received>


; encoding sigelt #push-options "--z3rlimit_factor 4"


; <Skipped #push-options "--z3rlimit_factor 4"/>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,4-315,14); use=Prims.fst(315,4-315,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.pure_post_ @x0
@x1)
Tm_type))
 

:pattern ((Prims.pure_post_ @x0
@x1))
:qid typing_Prims.pure_post_))

:named typing_Prims.pure_post_))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pure_post; Namespace Prims
(assert (! 
;; def=Prims.fst(316,4-316,13); use=Prims.fst(316,4-316,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.pure_post @x0)
Tm_type))
 

:pattern ((Prims.pure_post @x0))
:qid typing_Prims.pure_post))

:named typing_Prims.pure_post))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name MonotonicArray.prefix; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(167,4-167,10); use=MonotonicArray.fsti(167,4-167,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.t @x0
@x1))
(HasType @x3
(Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x1)))
(HasType (MonotonicArray.prefix @x0
@x1
@x2
@x3)
(MonotonicArray.t @x0
@x3)))
 

:pattern ((MonotonicArray.prefix @x0
@x1
@x2
@x3))
:qid typing_MonotonicArray.prefix))

:named typing_MonotonicArray.prefix))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))

:named kinding_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))
;;;;;;;;;;;;;;;;Equation for Prims.pure_post'
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,4-315,14); use=Prims.fst(315,4-315,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.pure_post_ @x0
@x1)
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x1
@x0))
 

:pattern ((Prims.pure_post_ @x0
@x1))
:qid equation_Prims.pure_post_))

:named equation_Prims.pure_post_))
;;;;;;;;;;;;;;;;Equation for Prims.pure_post
;;; Fact-ids: Name Prims.pure_post; Namespace Prims
(assert (! 
;; def=Prims.fst(316,4-316,13); use=Prims.fst(316,4-316,13)
(forall ((@x0 Term))
 (! (= (Prims.pure_post @x0)
(Prims.pure_post_ @x0
Prims.l_True))
 

:pattern ((Prims.pure_post @x0))
:qid equation_Prims.pure_post))

:named equation_Prims.pure_post))
;;;;;;;;;;;;;;;;Equation for MonotonicArray.prefix
;;; Fact-ids: Name MonotonicArray.prefix; Namespace MonotonicArray
(assert (! 
;; def=MonotonicArray.fsti(167,4-167,10); use=MonotonicArray.fsti(167,4-167,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (MonotonicArray.prefix @x0
@x1
@x2
@x3)
(MonotonicArray.sub @x0
@x1
@x2
(BoxInt 0)
@x3))
 

:pattern ((MonotonicArray.prefix @x0
@x1
@x2
@x3))
:qid equation_MonotonicArray.prefix))

:named equation_MonotonicArray.prefix))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x2
@x3)))
:qid Prims_pre_typing_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))

:named Prims_pre_typing_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x1
@x2))
(and 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x2
@x1))
(HasType (ApplyTT @x0
@x3)
Tm_type))
 

:pattern ((ApplyTT @x0
@x3))
:qid Prims_interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x1
@x2)))
:qid Prims_interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))

:named Prims_interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))
(push) ;; push{2

; Starting query at Protocol.fst(508,5-508,7)

(declare-fun label_16 () Bool)
(declare-fun label_15 () Bool)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

(declare-fun Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
Tm_type)
:named refinement_kinding_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,4-507,51); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasTypeFuel @u0
@x1
Prims.unit))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
:qid refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

:named refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))


; Encoding query formula : forall (a: Type)
;   (n: Prims.nat)
;   (f: MonotonicArray.array a n)
;   (pos: Prims.nat)
;   (next: Prims.nat{pos + next <= n})
;   (h: FStar.Monotonic.Heap.heap).
;   (forall (_: Prims.squash Prims.l_True).
;       (*  - Could not prove post-condition
; *)
;       pos <= n /\
;       (forall (any_result: Prims.nat).
;           pos == any_result ==>
;           (forall (any_result: MonotonicArray.t a pos).
;               MonotonicArray.prefix f pos == any_result ==>
;               pos + next >= 0 /\
;               (pos + next >= 0) /\ (pos + next <= n) /\
;               (forall (return_val: i: Prims.nat{i <= n}).
;                   return_val == pos + next ==>
;                   (forall (any_result: MonotonicArray.t a (pos + next)).
;                       MonotonicArray.prefix f (pos + next) == any_result ==>
;                       pos + next >= 0 /\
;                       (forall (return_val: Prims.nat).
;                           return_val == pos + next ==>
;                           Prims.auto_squash (FStar.ST.witnessed (MonotonicArray.mutable_pred (MonotonicArray.prefix
;                                         f
;                                         (pos + next))))) /\
;                       (Protocol.fully_initialized_in (MonotonicArray.prefix f (pos + next)) h ==>
;                         Prims.auto_squash (MonotonicArray.init_arr_in_heap (MonotonicArray.prefix f
;                                   pos)
;                               h) /\
;                         (forall (any_result: FStar.Monotonic.Heap.heap).
;                             h == any_result ==>
;                             (forall (any_result: FStar.Seq.Base.seq a).
;                                 MonotonicArray.as_initialized_seq (MonotonicArray.prefix f pos) h ==
;                                 any_result ==>
;                                 pos + next >= 0 /\
;                                 (forall (return_val: Prims.nat).
;                                     return_val == pos + next ==>
;                                     Prims.auto_squash (MonotonicArray.init_arr_in_heap (MonotonicArray.prefix
;                                               f
;                                               (pos + next))
;                                           h) /\
;                                     (forall (any_result: FStar.Monotonic.Heap.heap).
;                                         h == any_result ==>
;                                         (forall (any_result: FStar.Seq.Base.seq a).
;                                             MonotonicArray.as_initialized_seq (MonotonicArray.prefix
;                                                   f
;                                                   (pos + next))
;                                               h ==
;                                             any_result ==>
;                                             n - pos >= 0 /\
;                                             (forall (return_val: Prims.nat).
;                                                 return_val == n - pos ==>
;                                                 pos <= n /\
;                                                 (forall (any_result: Prims.nat).
;                                                     pos == any_result ==>
;                                                     (forall (any_result:
;                                                         MonotonicArray.t a (n - pos)).
;                                                         MonotonicArray.suffix f pos == any_result ==>
;                                                         pos + next <= n ==>
;                                                         next >= 0 /\ next <= n - pos /\
;                                                         MonotonicArray.init_arr_in_heap_i_j (MonotonicArray.suffix
;                                                               f
;                                                               pos)
;                                                           h
;                                                           0
;                                                           next)))))))))))))) /\
;   (forall (p: Prims.pure_post Prims.unit).
;       (forall (pure_result: Prims.unit).
;           (Protocol.fully_initialized_in (MonotonicArray.prefix f (pos + next)) h ==>
;             FStar.Seq.Base.equal (MonotonicArray.as_initialized_seq (MonotonicArray.prefix f
;                       (pos + next))
;                   h)
;               (FStar.Seq.Base.append (MonotonicArray.as_initialized_seq (MonotonicArray.prefix f pos
;                       )
;                       h)
;                   (MonotonicArray.as_initialized_subseq (MonotonicArray.suffix f pos) h 0 next))) ==>
;           p pure_result) ==>
;       (forall (any_result: Prims.unit). p any_result))


; Context: While encoding a query
; While typechecking the top-level declaration `let append_filled`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.array @x0
@x1))
(HasType @x3
Prims.nat)
(HasType @x4
(Tm_refine_6f684e27d6af9965634108bcfe981953 @x3
@x1))
(HasType @x5
FStar.Monotonic.Heap.heap))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(and 
;; def=dummy(0,0-0,0); use=Protocol.fst(508,5-508,7)
(forall ((@x6 Term))
 (! (implies (HasType @x6
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(508,5-508,7)
(and 
;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(501,29-501,32)
(or label_1

;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(508,5-508,7)
(<= (BoxInt_proj_0 @x3)
(BoxInt_proj_0 @x1))
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(508,5-508,7)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.nat)

;; def=MonotonicArray.fsti(167,44-167,45); use=Protocol.fst(508,5-508,7)
(= @x3
@x7)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(508,5-508,7)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(MonotonicArray.t @x0
@x3))

;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.prefix @x0
@x1
@x2
@x3)
@x8)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(508,5-508,7)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(502,29-502,41)
(or label_2

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(508,5-508,7)
(>= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(680,18-680,24); use=Protocol.fst(502,29-502,41)
(or label_3

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(508,5-508,7)
(>= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(502,29-502,41)
(or label_4

;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(508,5-508,7)
(<= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 @x1))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(508,5-508,7)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x1))

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(= @x9
(Prims.op_Addition @x3
@x4))
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(508,5-508,7)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(MonotonicArray.t @x0
(Prims.op_Addition @x3
@x4)))

;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x10)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(508,5-508,7)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(503,11-503,13)
(or label_5

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(508,5-508,7)
(>= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(508,5-508,7)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(= @x11
(Prims.op_Addition @x3
@x4))
)

;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(503,11-503,13)
(or label_6

;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(508,5-508,7)
(FStar.ST.witnessed (MonotonicArray.mutable_pred @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))))
)
)
)
 
;;no pats
:qid @query.6))

(implies 
;; def=Protocol.fst(503,11-503,38); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=Protocol.fst(503,11-503,38); use=Protocol.fst(508,5-508,7)
(Protocol.fully_initialized_in @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)
)


;; def=Prims.fst(459,77-459,89); use=Protocol.fst(508,5-508,7)
(and 
;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(504,42-504,43)
(or label_7

;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(508,5-508,7)
(MonotonicArray.init_arr_in_heap @x0
@x3
(MonotonicArray.prefix @x0
@x1
@x2
@x3)
@x5)
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(508,5-508,7)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
FStar.Monotonic.Heap.heap)

;; def=MonotonicArray.fsti(283,35-283,36); use=Protocol.fst(508,5-508,7)
(= @x5
@x11)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(508,5-508,7)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
(FStar.Seq.Base.seq @x0))

;; def=Protocol.fst(504,15-504,43); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.as_initialized_seq @x0
@x3
(MonotonicArray.prefix @x0
@x1
@x2
@x3)
@x5)
@x12)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(508,5-508,7)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(505,39-505,41)
(or label_8

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(508,5-508,7)
(>= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(508,5-508,7)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(= @x13
(Prims.op_Addition @x3
@x4))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(508,5-508,7)
(and 
;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(505,42-505,43)
(or label_9

;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(508,5-508,7)
(MonotonicArray.init_arr_in_heap @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(508,5-508,7)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
FStar.Monotonic.Heap.heap)

;; def=MonotonicArray.fsti(283,35-283,36); use=Protocol.fst(508,5-508,7)
(= @x5
@x14)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(508,5-508,7)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
(FStar.Seq.Base.seq @x0))

;; def=Protocol.fst(505,15-505,43); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.as_initialized_seq @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)
@x15)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(508,5-508,7)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(506,54-506,60)
(or label_10

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(508,5-508,7)
(>= (BoxInt_proj_0 (Prims.op_Subtraction @x1
@x3))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(508,5-508,7)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(= @x16
(Prims.op_Subtraction @x1
@x3))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(508,5-508,7)
(and 
;; def=MonotonicArray.fsti(166,50-166,56); use=Protocol.fst(506,63-506,66)
(or label_11

;; def=MonotonicArray.fsti(166,50-166,56); use=Protocol.fst(508,5-508,7)
(<= (BoxInt_proj_0 @x3)
(BoxInt_proj_0 @x1))
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(508,5-508,7)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Prims.nat)

;; def=MonotonicArray.fsti(166,44-166,45); use=Protocol.fst(508,5-508,7)
(= @x3
@x17)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(508,5-508,7)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(MonotonicArray.t @x0
(Prims.op_Subtraction @x1
@x3)))

;; def=MonotonicArray.fsti(288,47-288,50); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.suffix @x0
@x1
@x2
@x3)
@x18)


;; def=Protocol.fst(500,58-500,73); use=Protocol.fst(508,5-508,7)
(<= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 @x1))
)

;; def=MonotonicArray.fsti(289,17-289,67); use=Protocol.fst(508,5-508,7)
(and 
;; def=MonotonicArray.fsti(289,17-289,23); use=Protocol.fst(506,72-506,76)
(or label_12

;; def=MonotonicArray.fsti(289,17-289,23); use=Protocol.fst(508,5-508,7)
(>= (BoxInt_proj_0 @x4)
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=MonotonicArray.fsti(289,27-289,33); use=Protocol.fst(506,72-506,76)
(or label_13

;; def=MonotonicArray.fsti(289,27-289,33); use=Protocol.fst(508,5-508,7)
(<= (BoxInt_proj_0 @x4)
(BoxInt_proj_0 (Prims.op_Subtraction @x1
@x3)))
)


;; def=MonotonicArray.fsti(289,37-289,67); use=Protocol.fst(506,72-506,76)
(or label_14

;; def=MonotonicArray.fsti(289,37-289,67); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=MonotonicArray.fsti(289,37-289,67); use=Protocol.fst(508,5-508,7)
(MonotonicArray.init_arr_in_heap_i_j @x0
(Prims.op_Subtraction @x1
@x3)
(MonotonicArray.suffix @x0
@x1
@x2
@x3)
@x5
(BoxInt 0)
@x4)
)
)
)
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))
)
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.9))
)
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
)
)
 
;;no pats
:qid @query.1))


;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=Protocol.fst(508,5-508,7)
(forall ((@x7 Term))
 (! (implies (and (or label_15
(HasType @x7
Prims.unit))
(implies 
;; def=Protocol.fst(503,11-503,38); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=Protocol.fst(503,11-503,38); use=Protocol.fst(508,5-508,7)
(Protocol.fully_initialized_in @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)
)


;; def=Protocol.fst(507,11-507,49); use=Protocol.fst(508,5-508,7)
(or label_16

;; def=Protocol.fst(507,11-507,49); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=Protocol.fst(507,11-507,49); use=Protocol.fst(508,5-508,7)
(FStar.Seq.Base.equal @x0
(MonotonicArray.as_initialized_seq @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)
(FStar.Seq.Base.append @x0
(MonotonicArray.as_initialized_seq @x0
@x3
(MonotonicArray.prefix @x0
@x1
@x2
@x3)
@x5)
(MonotonicArray.as_initialized_subseq @x0
(Prims.op_Subtraction @x1
@x3)
(MonotonicArray.suffix @x0
@x1
@x2
@x3)
@x5
(BoxInt 0)
@x4)))
)
)
))

;; def=Prims.fst(441,83-441,96); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Protocol.fst(508,5-508,7)
(ApplyTT @x6
@x7)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Protocol.fst(508,5-508,7)
(ApplyTT @x6
@x7)
)
)
:qid @query.16))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x7 Term))
 (! (implies (HasType @x7
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(ApplyTT @x6
@x7)
)
)
 
;;no pats
:qid @query.17))
)
 
;;no pats
:qid @query.15))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 43572480)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Protocol.append_filled, 1)
; STATUS: unknown because canceled

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(push) ;; push{0

; <fuel='2' ifuel='2'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel (SFuel ZFuel)))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.array @x0
@x1))
(HasType @x3
Prims.nat)
(HasType @x4
(Tm_refine_6f684e27d6af9965634108bcfe981953 @x3
@x1))
(HasType @x5
FStar.Monotonic.Heap.heap))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(and 
;; def=dummy(0,0-0,0); use=Protocol.fst(508,5-508,7)
(forall ((@x6 Term))
 (! (implies (HasType @x6
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(508,5-508,7)
(and 
;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(501,29-501,32)
(or label_1

;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(508,5-508,7)
(<= (BoxInt_proj_0 @x3)
(BoxInt_proj_0 @x1))
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(508,5-508,7)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.nat)

;; def=MonotonicArray.fsti(167,44-167,45); use=Protocol.fst(508,5-508,7)
(= @x3
@x7)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(508,5-508,7)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(MonotonicArray.t @x0
@x3))

;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.prefix @x0
@x1
@x2
@x3)
@x8)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(508,5-508,7)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(502,29-502,41)
(or label_2

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(508,5-508,7)
(>= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(680,18-680,24); use=Protocol.fst(502,29-502,41)
(or label_3

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(508,5-508,7)
(>= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(502,29-502,41)
(or label_4

;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(508,5-508,7)
(<= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 @x1))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(508,5-508,7)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x1))

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(= @x9
(Prims.op_Addition @x3
@x4))
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(508,5-508,7)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(MonotonicArray.t @x0
(Prims.op_Addition @x3
@x4)))

;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x10)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(508,5-508,7)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(503,11-503,13)
(or label_5

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(508,5-508,7)
(>= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(508,5-508,7)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(= @x11
(Prims.op_Addition @x3
@x4))
)

;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(503,11-503,13)
(or label_6

;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(508,5-508,7)
(FStar.ST.witnessed (MonotonicArray.mutable_pred @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))))
)
)
)
 
;;no pats
:qid @query.6))

(implies 
;; def=Protocol.fst(503,11-503,38); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=Protocol.fst(503,11-503,38); use=Protocol.fst(508,5-508,7)
(Protocol.fully_initialized_in @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)
)


;; def=Prims.fst(459,77-459,89); use=Protocol.fst(508,5-508,7)
(and 
;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(504,42-504,43)
(or label_7

;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(508,5-508,7)
(MonotonicArray.init_arr_in_heap @x0
@x3
(MonotonicArray.prefix @x0
@x1
@x2
@x3)
@x5)
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(508,5-508,7)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
FStar.Monotonic.Heap.heap)

;; def=MonotonicArray.fsti(283,35-283,36); use=Protocol.fst(508,5-508,7)
(= @x5
@x11)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(508,5-508,7)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
(FStar.Seq.Base.seq @x0))

;; def=Protocol.fst(504,15-504,43); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.as_initialized_seq @x0
@x3
(MonotonicArray.prefix @x0
@x1
@x2
@x3)
@x5)
@x12)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(508,5-508,7)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(505,39-505,41)
(or label_8

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(508,5-508,7)
(>= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(508,5-508,7)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(= @x13
(Prims.op_Addition @x3
@x4))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(508,5-508,7)
(and 
;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(505,42-505,43)
(or label_9

;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(508,5-508,7)
(MonotonicArray.init_arr_in_heap @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(508,5-508,7)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
FStar.Monotonic.Heap.heap)

;; def=MonotonicArray.fsti(283,35-283,36); use=Protocol.fst(508,5-508,7)
(= @x5
@x14)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(508,5-508,7)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
(FStar.Seq.Base.seq @x0))

;; def=Protocol.fst(505,15-505,43); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.as_initialized_seq @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)
@x15)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(508,5-508,7)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(506,54-506,60)
(or label_10

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(508,5-508,7)
(>= (BoxInt_proj_0 (Prims.op_Subtraction @x1
@x3))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(508,5-508,7)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(= @x16
(Prims.op_Subtraction @x1
@x3))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(508,5-508,7)
(and 
;; def=MonotonicArray.fsti(166,50-166,56); use=Protocol.fst(506,63-506,66)
(or label_11

;; def=MonotonicArray.fsti(166,50-166,56); use=Protocol.fst(508,5-508,7)
(<= (BoxInt_proj_0 @x3)
(BoxInt_proj_0 @x1))
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(508,5-508,7)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Prims.nat)

;; def=MonotonicArray.fsti(166,44-166,45); use=Protocol.fst(508,5-508,7)
(= @x3
@x17)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(508,5-508,7)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(MonotonicArray.t @x0
(Prims.op_Subtraction @x1
@x3)))

;; def=MonotonicArray.fsti(288,47-288,50); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.suffix @x0
@x1
@x2
@x3)
@x18)


;; def=Protocol.fst(500,58-500,73); use=Protocol.fst(508,5-508,7)
(<= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 @x1))
)

;; def=MonotonicArray.fsti(289,17-289,67); use=Protocol.fst(508,5-508,7)
(and 
;; def=MonotonicArray.fsti(289,17-289,23); use=Protocol.fst(506,72-506,76)
(or label_12

;; def=MonotonicArray.fsti(289,17-289,23); use=Protocol.fst(508,5-508,7)
(>= (BoxInt_proj_0 @x4)
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=MonotonicArray.fsti(289,27-289,33); use=Protocol.fst(506,72-506,76)
(or label_13

;; def=MonotonicArray.fsti(289,27-289,33); use=Protocol.fst(508,5-508,7)
(<= (BoxInt_proj_0 @x4)
(BoxInt_proj_0 (Prims.op_Subtraction @x1
@x3)))
)


;; def=MonotonicArray.fsti(289,37-289,67); use=Protocol.fst(506,72-506,76)
(or label_14

;; def=MonotonicArray.fsti(289,37-289,67); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=MonotonicArray.fsti(289,37-289,67); use=Protocol.fst(508,5-508,7)
(MonotonicArray.init_arr_in_heap_i_j @x0
(Prims.op_Subtraction @x1
@x3)
(MonotonicArray.suffix @x0
@x1
@x2
@x3)
@x5
(BoxInt 0)
@x4)
)
)
)
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))
)
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.9))
)
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
)
)
 
;;no pats
:qid @query.1))


;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=Protocol.fst(508,5-508,7)
(forall ((@x7 Term))
 (! (implies (and (or label_15
(HasType @x7
Prims.unit))
(implies 
;; def=Protocol.fst(503,11-503,38); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=Protocol.fst(503,11-503,38); use=Protocol.fst(508,5-508,7)
(Protocol.fully_initialized_in @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)
)


;; def=Protocol.fst(507,11-507,49); use=Protocol.fst(508,5-508,7)
(or label_16

;; def=Protocol.fst(507,11-507,49); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=Protocol.fst(507,11-507,49); use=Protocol.fst(508,5-508,7)
(FStar.Seq.Base.equal @x0
(MonotonicArray.as_initialized_seq @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)
(FStar.Seq.Base.append @x0
(MonotonicArray.as_initialized_seq @x0
@x3
(MonotonicArray.prefix @x0
@x1
@x2
@x3)
@x5)
(MonotonicArray.as_initialized_subseq @x0
(Prims.op_Subtraction @x1
@x3)
(MonotonicArray.suffix @x0
@x1
@x2
@x3)
@x5
(BoxInt 0)
@x4)))
)
)
))

;; def=Prims.fst(441,83-441,96); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Protocol.fst(508,5-508,7)
(ApplyTT @x6
@x7)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Protocol.fst(508,5-508,7)
(ApplyTT @x6
@x7)
)
)
:qid @query.16))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x7 Term))
 (! (implies (HasType @x7
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(ApplyTT @x6
@x7)
)
)
 
;;no pats
:qid @query.17))
)
 
;;no pats
:qid @query.15))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 43572480)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Protocol.append_filled, 1)
; STATUS: unknown because canceled

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(push) ;; push{0

; <fuel='4' ifuel='2'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel (SFuel (SFuel ZFuel)))))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel (SFuel ZFuel)))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.array @x0
@x1))
(HasType @x3
Prims.nat)
(HasType @x4
(Tm_refine_6f684e27d6af9965634108bcfe981953 @x3
@x1))
(HasType @x5
FStar.Monotonic.Heap.heap))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(and 
;; def=dummy(0,0-0,0); use=Protocol.fst(508,5-508,7)
(forall ((@x6 Term))
 (! (implies (HasType @x6
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(508,5-508,7)
(and 
;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(501,29-501,32)
(or label_1

;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(508,5-508,7)
(<= (BoxInt_proj_0 @x3)
(BoxInt_proj_0 @x1))
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(508,5-508,7)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.nat)

;; def=MonotonicArray.fsti(167,44-167,45); use=Protocol.fst(508,5-508,7)
(= @x3
@x7)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(508,5-508,7)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(MonotonicArray.t @x0
@x3))

;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.prefix @x0
@x1
@x2
@x3)
@x8)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(508,5-508,7)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(502,29-502,41)
(or label_2

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(508,5-508,7)
(>= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(680,18-680,24); use=Protocol.fst(502,29-502,41)
(or label_3

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(508,5-508,7)
(>= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(502,29-502,41)
(or label_4

;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(508,5-508,7)
(<= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 @x1))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(508,5-508,7)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x1))

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(= @x9
(Prims.op_Addition @x3
@x4))
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(508,5-508,7)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(MonotonicArray.t @x0
(Prims.op_Addition @x3
@x4)))

;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x10)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(508,5-508,7)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(503,11-503,13)
(or label_5

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(508,5-508,7)
(>= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(508,5-508,7)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(= @x11
(Prims.op_Addition @x3
@x4))
)

;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(503,11-503,13)
(or label_6

;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(508,5-508,7)
(FStar.ST.witnessed (MonotonicArray.mutable_pred @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))))
)
)
)
 
;;no pats
:qid @query.6))

(implies 
;; def=Protocol.fst(503,11-503,38); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=Protocol.fst(503,11-503,38); use=Protocol.fst(508,5-508,7)
(Protocol.fully_initialized_in @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)
)


;; def=Prims.fst(459,77-459,89); use=Protocol.fst(508,5-508,7)
(and 
;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(504,42-504,43)
(or label_7

;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(508,5-508,7)
(MonotonicArray.init_arr_in_heap @x0
@x3
(MonotonicArray.prefix @x0
@x1
@x2
@x3)
@x5)
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(508,5-508,7)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
FStar.Monotonic.Heap.heap)

;; def=MonotonicArray.fsti(283,35-283,36); use=Protocol.fst(508,5-508,7)
(= @x5
@x11)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(508,5-508,7)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
(FStar.Seq.Base.seq @x0))

;; def=Protocol.fst(504,15-504,43); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.as_initialized_seq @x0
@x3
(MonotonicArray.prefix @x0
@x1
@x2
@x3)
@x5)
@x12)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(508,5-508,7)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(505,39-505,41)
(or label_8

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(508,5-508,7)
(>= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(508,5-508,7)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(= @x13
(Prims.op_Addition @x3
@x4))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(508,5-508,7)
(and 
;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(505,42-505,43)
(or label_9

;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(508,5-508,7)
(MonotonicArray.init_arr_in_heap @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(508,5-508,7)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
FStar.Monotonic.Heap.heap)

;; def=MonotonicArray.fsti(283,35-283,36); use=Protocol.fst(508,5-508,7)
(= @x5
@x14)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(508,5-508,7)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
(FStar.Seq.Base.seq @x0))

;; def=Protocol.fst(505,15-505,43); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.as_initialized_seq @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)
@x15)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(508,5-508,7)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(506,54-506,60)
(or label_10

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(508,5-508,7)
(>= (BoxInt_proj_0 (Prims.op_Subtraction @x1
@x3))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(508,5-508,7)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(= @x16
(Prims.op_Subtraction @x1
@x3))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(508,5-508,7)
(and 
;; def=MonotonicArray.fsti(166,50-166,56); use=Protocol.fst(506,63-506,66)
(or label_11

;; def=MonotonicArray.fsti(166,50-166,56); use=Protocol.fst(508,5-508,7)
(<= (BoxInt_proj_0 @x3)
(BoxInt_proj_0 @x1))
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(508,5-508,7)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Prims.nat)

;; def=MonotonicArray.fsti(166,44-166,45); use=Protocol.fst(508,5-508,7)
(= @x3
@x17)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(508,5-508,7)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(MonotonicArray.t @x0
(Prims.op_Subtraction @x1
@x3)))

;; def=MonotonicArray.fsti(288,47-288,50); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.suffix @x0
@x1
@x2
@x3)
@x18)


;; def=Protocol.fst(500,58-500,73); use=Protocol.fst(508,5-508,7)
(<= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 @x1))
)

;; def=MonotonicArray.fsti(289,17-289,67); use=Protocol.fst(508,5-508,7)
(and 
;; def=MonotonicArray.fsti(289,17-289,23); use=Protocol.fst(506,72-506,76)
(or label_12

;; def=MonotonicArray.fsti(289,17-289,23); use=Protocol.fst(508,5-508,7)
(>= (BoxInt_proj_0 @x4)
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=MonotonicArray.fsti(289,27-289,33); use=Protocol.fst(506,72-506,76)
(or label_13

;; def=MonotonicArray.fsti(289,27-289,33); use=Protocol.fst(508,5-508,7)
(<= (BoxInt_proj_0 @x4)
(BoxInt_proj_0 (Prims.op_Subtraction @x1
@x3)))
)


;; def=MonotonicArray.fsti(289,37-289,67); use=Protocol.fst(506,72-506,76)
(or label_14

;; def=MonotonicArray.fsti(289,37-289,67); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=MonotonicArray.fsti(289,37-289,67); use=Protocol.fst(508,5-508,7)
(MonotonicArray.init_arr_in_heap_i_j @x0
(Prims.op_Subtraction @x1
@x3)
(MonotonicArray.suffix @x0
@x1
@x2
@x3)
@x5
(BoxInt 0)
@x4)
)
)
)
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))
)
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.9))
)
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
)
)
 
;;no pats
:qid @query.1))


;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=Protocol.fst(508,5-508,7)
(forall ((@x7 Term))
 (! (implies (and (or label_15
(HasType @x7
Prims.unit))
(implies 
;; def=Protocol.fst(503,11-503,38); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=Protocol.fst(503,11-503,38); use=Protocol.fst(508,5-508,7)
(Protocol.fully_initialized_in @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)
)


;; def=Protocol.fst(507,11-507,49); use=Protocol.fst(508,5-508,7)
(or label_16

;; def=Protocol.fst(507,11-507,49); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=Protocol.fst(507,11-507,49); use=Protocol.fst(508,5-508,7)
(FStar.Seq.Base.equal @x0
(MonotonicArray.as_initialized_seq @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)
(FStar.Seq.Base.append @x0
(MonotonicArray.as_initialized_seq @x0
@x3
(MonotonicArray.prefix @x0
@x1
@x2
@x3)
@x5)
(MonotonicArray.as_initialized_subseq @x0
(Prims.op_Subtraction @x1
@x3)
(MonotonicArray.suffix @x0
@x1
@x2
@x3)
@x5
(BoxInt 0)
@x4)))
)
)
))

;; def=Prims.fst(441,83-441,96); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Protocol.fst(508,5-508,7)
(ApplyTT @x6
@x7)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Protocol.fst(508,5-508,7)
(ApplyTT @x6
@x7)
)
)
:qid @query.16))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x7 Term))
 (! (implies (HasType @x7
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(ApplyTT @x6
@x7)
)
)
 
;;no pats
:qid @query.17))
)
 
;;no pats
:qid @query.15))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 43572480)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Protocol.append_filled, 1)
; STATUS: unknown because canceled

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(push) ;; push{0

; <fuel='8' ifuel='2'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel (SFuel (SFuel (SFuel (SFuel (SFuel (SFuel ZFuel)))))))))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel (SFuel ZFuel)))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.array @x0
@x1))
(HasType @x3
Prims.nat)
(HasType @x4
(Tm_refine_6f684e27d6af9965634108bcfe981953 @x3
@x1))
(HasType @x5
FStar.Monotonic.Heap.heap))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(and 
;; def=dummy(0,0-0,0); use=Protocol.fst(508,5-508,7)
(forall ((@x6 Term))
 (! (implies (HasType @x6
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(508,5-508,7)
(and 
;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(501,29-501,32)
(or label_1

;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(508,5-508,7)
(<= (BoxInt_proj_0 @x3)
(BoxInt_proj_0 @x1))
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(508,5-508,7)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.nat)

;; def=MonotonicArray.fsti(167,44-167,45); use=Protocol.fst(508,5-508,7)
(= @x3
@x7)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(508,5-508,7)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(MonotonicArray.t @x0
@x3))

;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.prefix @x0
@x1
@x2
@x3)
@x8)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(508,5-508,7)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(502,29-502,41)
(or label_2

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(508,5-508,7)
(>= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(680,18-680,24); use=Protocol.fst(502,29-502,41)
(or label_3

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(508,5-508,7)
(>= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(502,29-502,41)
(or label_4

;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(508,5-508,7)
(<= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 @x1))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(508,5-508,7)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x1))

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(= @x9
(Prims.op_Addition @x3
@x4))
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(508,5-508,7)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(MonotonicArray.t @x0
(Prims.op_Addition @x3
@x4)))

;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x10)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(508,5-508,7)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(503,11-503,13)
(or label_5

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(508,5-508,7)
(>= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(508,5-508,7)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(= @x11
(Prims.op_Addition @x3
@x4))
)

;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(503,11-503,13)
(or label_6

;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(508,5-508,7)
(FStar.ST.witnessed (MonotonicArray.mutable_pred @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))))
)
)
)
 
;;no pats
:qid @query.6))

(implies 
;; def=Protocol.fst(503,11-503,38); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=Protocol.fst(503,11-503,38); use=Protocol.fst(508,5-508,7)
(Protocol.fully_initialized_in @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)
)


;; def=Prims.fst(459,77-459,89); use=Protocol.fst(508,5-508,7)
(and 
;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(504,42-504,43)
(or label_7

;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(508,5-508,7)
(MonotonicArray.init_arr_in_heap @x0
@x3
(MonotonicArray.prefix @x0
@x1
@x2
@x3)
@x5)
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(508,5-508,7)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
FStar.Monotonic.Heap.heap)

;; def=MonotonicArray.fsti(283,35-283,36); use=Protocol.fst(508,5-508,7)
(= @x5
@x11)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(508,5-508,7)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
(FStar.Seq.Base.seq @x0))

;; def=Protocol.fst(504,15-504,43); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.as_initialized_seq @x0
@x3
(MonotonicArray.prefix @x0
@x1
@x2
@x3)
@x5)
@x12)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(508,5-508,7)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(505,39-505,41)
(or label_8

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(508,5-508,7)
(>= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(508,5-508,7)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(= @x13
(Prims.op_Addition @x3
@x4))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(508,5-508,7)
(and 
;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(505,42-505,43)
(or label_9

;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(508,5-508,7)
(MonotonicArray.init_arr_in_heap @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(508,5-508,7)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
FStar.Monotonic.Heap.heap)

;; def=MonotonicArray.fsti(283,35-283,36); use=Protocol.fst(508,5-508,7)
(= @x5
@x14)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(508,5-508,7)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
(FStar.Seq.Base.seq @x0))

;; def=Protocol.fst(505,15-505,43); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.as_initialized_seq @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)
@x15)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(508,5-508,7)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(506,54-506,60)
(or label_10

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(508,5-508,7)
(>= (BoxInt_proj_0 (Prims.op_Subtraction @x1
@x3))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(508,5-508,7)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(= @x16
(Prims.op_Subtraction @x1
@x3))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(508,5-508,7)
(and 
;; def=MonotonicArray.fsti(166,50-166,56); use=Protocol.fst(506,63-506,66)
(or label_11

;; def=MonotonicArray.fsti(166,50-166,56); use=Protocol.fst(508,5-508,7)
(<= (BoxInt_proj_0 @x3)
(BoxInt_proj_0 @x1))
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(508,5-508,7)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Prims.nat)

;; def=MonotonicArray.fsti(166,44-166,45); use=Protocol.fst(508,5-508,7)
(= @x3
@x17)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(508,5-508,7)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(MonotonicArray.t @x0
(Prims.op_Subtraction @x1
@x3)))

;; def=MonotonicArray.fsti(288,47-288,50); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.suffix @x0
@x1
@x2
@x3)
@x18)


;; def=Protocol.fst(500,58-500,73); use=Protocol.fst(508,5-508,7)
(<= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 @x1))
)

;; def=MonotonicArray.fsti(289,17-289,67); use=Protocol.fst(508,5-508,7)
(and 
;; def=MonotonicArray.fsti(289,17-289,23); use=Protocol.fst(506,72-506,76)
(or label_12

;; def=MonotonicArray.fsti(289,17-289,23); use=Protocol.fst(508,5-508,7)
(>= (BoxInt_proj_0 @x4)
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=MonotonicArray.fsti(289,27-289,33); use=Protocol.fst(506,72-506,76)
(or label_13

;; def=MonotonicArray.fsti(289,27-289,33); use=Protocol.fst(508,5-508,7)
(<= (BoxInt_proj_0 @x4)
(BoxInt_proj_0 (Prims.op_Subtraction @x1
@x3)))
)


;; def=MonotonicArray.fsti(289,37-289,67); use=Protocol.fst(506,72-506,76)
(or label_14

;; def=MonotonicArray.fsti(289,37-289,67); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=MonotonicArray.fsti(289,37-289,67); use=Protocol.fst(508,5-508,7)
(MonotonicArray.init_arr_in_heap_i_j @x0
(Prims.op_Subtraction @x1
@x3)
(MonotonicArray.suffix @x0
@x1
@x2
@x3)
@x5
(BoxInt 0)
@x4)
)
)
)
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))
)
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.9))
)
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
)
)
 
;;no pats
:qid @query.1))


;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=Protocol.fst(508,5-508,7)
(forall ((@x7 Term))
 (! (implies (and (or label_15
(HasType @x7
Prims.unit))
(implies 
;; def=Protocol.fst(503,11-503,38); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=Protocol.fst(503,11-503,38); use=Protocol.fst(508,5-508,7)
(Protocol.fully_initialized_in @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)
)


;; def=Protocol.fst(507,11-507,49); use=Protocol.fst(508,5-508,7)
(or label_16

;; def=Protocol.fst(507,11-507,49); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=Protocol.fst(507,11-507,49); use=Protocol.fst(508,5-508,7)
(FStar.Seq.Base.equal @x0
(MonotonicArray.as_initialized_seq @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)
(FStar.Seq.Base.append @x0
(MonotonicArray.as_initialized_seq @x0
@x3
(MonotonicArray.prefix @x0
@x1
@x2
@x3)
@x5)
(MonotonicArray.as_initialized_subseq @x0
(Prims.op_Subtraction @x1
@x3)
(MonotonicArray.suffix @x0
@x1
@x2
@x3)
@x5
(BoxInt 0)
@x4)))
)
)
))

;; def=Prims.fst(441,83-441,96); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Protocol.fst(508,5-508,7)
(ApplyTT @x6
@x7)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Protocol.fst(508,5-508,7)
(ApplyTT @x6
@x7)
)
)
:qid @query.16))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x7 Term))
 (! (implies (HasType @x7
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(ApplyTT @x6
@x7)
)
)
 
;;no pats
:qid @query.17))
)
 
;;no pats
:qid @query.15))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 43572480)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Protocol.append_filled, 1)
; STATUS: unknown because canceled

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at Protocol.fst(508,5-508,7)

(declare-fun label_1 () Bool)

(declare-fun Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
Tm_type)
:named refinement_kinding_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,4-507,51); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasTypeFuel @u0
@x1
Prims.unit))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
:qid refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

:named refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

; Encoding query formula : forall (a: Type)
;   (n: Prims.nat)
;   (f: MonotonicArray.array a n)
;   (pos: Prims.nat)
;   (next: Prims.nat{pos + next <= n})
;   (h: FStar.Monotonic.Heap.heap)
;   (_: Prims.squash Prims.l_True).
;   (*  - Subtyping check failed
;   - Expected type i: Prims.nat{i <= n} got type Prims.nat
; *) pos <= n


; Context: While encoding a query
; While typechecking the top-level declaration `let append_filled`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.array @x0
@x1))
(HasType @x3
Prims.nat)
(HasType @x4
(Tm_refine_6f684e27d6af9965634108bcfe981953 @x3
@x1))
(HasType @x5
FStar.Monotonic.Heap.heap)
(HasType @x6
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(501,29-501,32)
(or label_1

;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(508,5-508,7)
(<= (BoxInt_proj_0 @x3)
(BoxInt_proj_0 @x1))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 43572480)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Protocol.append_filled, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Prims.nat, primitive_Prims.op_Addition, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_6f684e27d6af9965634108bcfe981953

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Pervasives.coerce_eq; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(1218,44-1218,52); use=FStar.Pervasives.fsti(1218,44-1218,52)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_0dee8cb03258a67c2f7ec66427696212))

:named refinement_kinding_Tm_refine_0dee8cb03258a67c2f7ec66427696212))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Pervasives.coerce_eq; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(1218,44-1218,52); use=FStar.Pervasives.fsti(1218,44-1218,52)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=FStar.Pervasives.fsti(1218,44-1218,52); use=FStar.Pervasives.fsti(1218,44-1218,52)
(= @x2
@x3)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_0dee8cb03258a67c2f7ec66427696212))

:named refinement_interpretation_Tm_refine_0dee8cb03258a67c2f7ec66427696212))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0dee8cb03258a67c2f7ec66427696212
;;; Fact-ids: Name FStar.Pervasives.coerce_eq; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(1218,44-1218,52); use=FStar.Pervasives.fsti(1218,44-1218,52)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x0
@x1)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x0
@x1))))
:qid haseqTm_refine_0dee8cb03258a67c2f7ec66427696212))

:named haseqTm_refine_0dee8cb03258a67c2f7ec66427696212))
(push) ;; push{2

; Starting query at Protocol.fst(508,5-508,7)

(declare-fun label_1 () Bool)

(declare-fun Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
Tm_type)
:named refinement_kinding_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,4-507,51); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasTypeFuel @u0
@x1
Prims.unit))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
:qid refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

:named refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

(declare-fun Tm_refine_3cafc7d2382648766aed8886c435c359 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_3cafc7d2382648766aed8886c435c359))

:named refinement_kinding_Tm_refine_3cafc7d2382648766aed8886c435c359))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.prefix @x2
@x3
@x4
@x5)
@x6)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_3cafc7d2382648766aed8886c435c359))

:named refinement_interpretation_Tm_refine_3cafc7d2382648766aed8886c435c359))
;;;;;;;;;;;;;;;;haseq for Tm_refine_3cafc7d2382648766aed8886c435c359
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_3cafc7d2382648766aed8886c435c359))

:named haseqTm_refine_3cafc7d2382648766aed8886c435c359))

; Encoding query formula : forall (a: Type) (n: Prims.nat) (f: MonotonicArray.array a n) (pos: Prims.nat)
;   (next: Prims.nat{pos + next <= n}) (h: FStar.Monotonic.Heap.heap) (_: Prims.squash Prims.l_True)
;   (any_result: Prims.nat) (_: _: Prims.unit{pos == any_result}) (any_result: MonotonicArray.t a pos)
;   (_: _: Prims.unit{MonotonicArray.prefix f pos == any_result}).
;   (*  - Subtyping check failed
;   - Expected type Prims.nat got type Prims.int
; *) pos + next >= 0


; Context: While encoding a query
; While typechecking the top-level declaration `let append_filled`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.array @x0
@x1))
(HasType @x3
Prims.nat)
(HasType @x4
(Tm_refine_6f684e27d6af9965634108bcfe981953 @x3
@x1))
(HasType @x5
FStar.Monotonic.Heap.heap)
(HasType @x6
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasType @x7
Prims.nat)
(HasType @x8
(Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x3
@x7))
(HasType @x9
(MonotonicArray.t @x0
@x3))
(HasType @x10
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x9)))

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(502,29-502,41)
(or label_1

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(508,5-508,7)
(>= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 43572480)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Protocol.append_filled, 3)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Prims.nat, primitive_Prims.op_Addition, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_6f684e27d6af9965634108bcfe981953

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at Protocol.fst(508,5-508,7)

(declare-fun label_1 () Bool)

(declare-fun Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
Tm_type)
:named refinement_kinding_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,4-507,51); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasTypeFuel @u0
@x1
Prims.unit))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
:qid refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

:named refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

(declare-fun Tm_refine_3cafc7d2382648766aed8886c435c359 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_3cafc7d2382648766aed8886c435c359))

:named refinement_kinding_Tm_refine_3cafc7d2382648766aed8886c435c359))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.prefix @x2
@x3
@x4
@x5)
@x6)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_3cafc7d2382648766aed8886c435c359))

:named refinement_interpretation_Tm_refine_3cafc7d2382648766aed8886c435c359))
;;;;;;;;;;;;;;;;haseq for Tm_refine_3cafc7d2382648766aed8886c435c359
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_3cafc7d2382648766aed8886c435c359))

:named haseqTm_refine_3cafc7d2382648766aed8886c435c359))

; Encoding query formula : forall (a: Type) (n: Prims.nat) (f: MonotonicArray.array a n) (pos: Prims.nat)
;   (next: Prims.nat{pos + next <= n}) (h: FStar.Monotonic.Heap.heap) (_: Prims.squash Prims.l_True)
;   (any_result: Prims.nat) (_: _: Prims.unit{pos == any_result}) (any_result: MonotonicArray.t a pos)
;   (_: _: Prims.unit{MonotonicArray.prefix f pos == any_result}).
;   (*  - Subtyping check failed
;   - Expected type i: Prims.nat{i <= n} got type Prims.int
; *)
;   pos + next >= 0


; Context: While encoding a query
; While typechecking the top-level declaration `let append_filled`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.array @x0
@x1))
(HasType @x3
Prims.nat)
(HasType @x4
(Tm_refine_6f684e27d6af9965634108bcfe981953 @x3
@x1))
(HasType @x5
FStar.Monotonic.Heap.heap)
(HasType @x6
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasType @x7
Prims.nat)
(HasType @x8
(Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x3
@x7))
(HasType @x9
(MonotonicArray.t @x0
@x3))
(HasType @x10
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x9)))

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(502,29-502,41)
(or label_1

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(508,5-508,7)
(>= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 43572480)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Protocol.append_filled, 4)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Prims.nat, primitive_Prims.op_Addition, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_6f684e27d6af9965634108bcfe981953

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at Protocol.fst(508,5-508,7)

(declare-fun label_1 () Bool)

(declare-fun Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
Tm_type)
:named refinement_kinding_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,4-507,51); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasTypeFuel @u0
@x1
Prims.unit))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
:qid refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

:named refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

(declare-fun Tm_refine_3cafc7d2382648766aed8886c435c359 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_3cafc7d2382648766aed8886c435c359))

:named refinement_kinding_Tm_refine_3cafc7d2382648766aed8886c435c359))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.prefix @x2
@x3
@x4
@x5)
@x6)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_3cafc7d2382648766aed8886c435c359))

:named refinement_interpretation_Tm_refine_3cafc7d2382648766aed8886c435c359))
;;;;;;;;;;;;;;;;haseq for Tm_refine_3cafc7d2382648766aed8886c435c359
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_3cafc7d2382648766aed8886c435c359))

:named haseqTm_refine_3cafc7d2382648766aed8886c435c359))

; Encoding query formula : forall (a: Type) (n: Prims.nat) (f: MonotonicArray.array a n) (pos: Prims.nat)
;   (next: Prims.nat{pos + next <= n}) (h: FStar.Monotonic.Heap.heap) (_: Prims.squash Prims.l_True)
;   (any_result: Prims.nat) (_: _: Prims.unit{pos == any_result}) (any_result: MonotonicArray.t a pos)
;   (_: _: Prims.unit{MonotonicArray.prefix f pos == any_result}).
;   (*  - Subtyping check failed
;   - Expected type i: Prims.nat{i <= n} got type Prims.int
; *)
;   pos + next <= n


; Context: While encoding a query
; While typechecking the top-level declaration `let append_filled`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.array @x0
@x1))
(HasType @x3
Prims.nat)
(HasType @x4
(Tm_refine_6f684e27d6af9965634108bcfe981953 @x3
@x1))
(HasType @x5
FStar.Monotonic.Heap.heap)
(HasType @x6
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasType @x7
Prims.nat)
(HasType @x8
(Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x3
@x7))
(HasType @x9
(MonotonicArray.t @x0
@x3))
(HasType @x10
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x9)))

;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(502,29-502,41)
(or label_1

;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(508,5-508,7)
(<= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 @x1))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 43572480)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Protocol.append_filled, 5)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_6f684e27d6af9965634108bcfe981953

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at Protocol.fst(508,5-508,7)

(declare-fun label_1 () Bool)

(declare-fun Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
Tm_type)
:named refinement_kinding_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,4-507,51); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasTypeFuel @u0
@x1
Prims.unit))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
:qid refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

:named refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

(declare-fun Tm_refine_3cafc7d2382648766aed8886c435c359 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_3cafc7d2382648766aed8886c435c359))

:named refinement_kinding_Tm_refine_3cafc7d2382648766aed8886c435c359))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.prefix @x2
@x3
@x4
@x5)
@x6)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_3cafc7d2382648766aed8886c435c359))

:named refinement_interpretation_Tm_refine_3cafc7d2382648766aed8886c435c359))
;;;;;;;;;;;;;;;;haseq for Tm_refine_3cafc7d2382648766aed8886c435c359
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_3cafc7d2382648766aed8886c435c359))

:named haseqTm_refine_3cafc7d2382648766aed8886c435c359))

(declare-fun Tm_refine_53c655668b35152fbbd9a7948c262451 (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_53c655668b35152fbbd9a7948c262451))

:named refinement_kinding_Tm_refine_53c655668b35152fbbd9a7948c262451))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(= @x2
(Prims.op_Addition @x3
@x4))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_53c655668b35152fbbd9a7948c262451))

:named refinement_interpretation_Tm_refine_53c655668b35152fbbd9a7948c262451))
;;;;;;;;;;;;;;;;haseq for Tm_refine_53c655668b35152fbbd9a7948c262451
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2))))
:qid haseqTm_refine_53c655668b35152fbbd9a7948c262451))

:named haseqTm_refine_53c655668b35152fbbd9a7948c262451))
(declare-fun Tm_refine_b84a8eccf6ed33ae21304640be46a7aa (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type)
 

:pattern ((HasType (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
:qid refinement_kinding_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))

:named refinement_kinding_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x2
@x3
@x4
@x5
@x6
@x7))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.prefix @x2
@x3
@x4
(Prims.op_Addition @x5
@x6))
@x7)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x2
@x3
@x4
@x5
@x6
@x7)))
:qid refinement_interpretation_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))

:named refinement_interpretation_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b84a8eccf6ed33ae21304640be46a7aa
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5))))
:qid haseqTm_refine_b84a8eccf6ed33ae21304640be46a7aa))

:named haseqTm_refine_b84a8eccf6ed33ae21304640be46a7aa))

; Encoding query formula : forall (a: Type) (n: Prims.nat) (f: MonotonicArray.array a n) (pos: Prims.nat)
;   (next: Prims.nat{pos + next <= n}) (h: FStar.Monotonic.Heap.heap) (_: Prims.squash Prims.l_True)
;   (any_result: Prims.nat) (_: _: Prims.unit{pos == any_result}) (any_result: MonotonicArray.t a pos)
;   (_: _: Prims.unit{MonotonicArray.prefix f pos == any_result}) (return_val: i: Prims.nat{i <= n})
;   (_: _: Prims.unit{return_val == pos + next}) (any_result: MonotonicArray.t a (pos + next))
;   (_: _: Prims.unit{MonotonicArray.prefix f (pos + next) == any_result}).
;   (*  - Subtyping check failed
;   - Expected type Prims.nat got type Prims.int
; *) pos + next >= 0


; Context: While encoding a query
; While typechecking the top-level declaration `let append_filled`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.array @x0
@x1))
(HasType @x3
Prims.nat)
(HasType @x4
(Tm_refine_6f684e27d6af9965634108bcfe981953 @x3
@x1))
(HasType @x5
FStar.Monotonic.Heap.heap)
(HasType @x6
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasType @x7
Prims.nat)
(HasType @x8
(Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x3
@x7))
(HasType @x9
(MonotonicArray.t @x0
@x3))
(HasType @x10
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x9))
(HasType @x11
(Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x1))
(HasType @x12
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x11
@x3
@x4))
(HasType @x13
(MonotonicArray.t @x0
(Prims.op_Addition @x3
@x4)))
(HasType @x14
(Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x13)))

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(503,11-503,13)
(or label_1

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(508,5-508,7)
(>= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 43572480)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Protocol.append_filled, 6)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Prims.nat, primitive_Prims.op_Addition, refinement_interpretation_Tm_refine_53c655668b35152fbbd9a7948c262451, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at Protocol.fst(508,5-508,7)

(declare-fun label_1 () Bool)

(declare-fun Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
Tm_type)
:named refinement_kinding_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,4-507,51); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasTypeFuel @u0
@x1
Prims.unit))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
:qid refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

:named refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

(declare-fun Tm_refine_3cafc7d2382648766aed8886c435c359 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_3cafc7d2382648766aed8886c435c359))

:named refinement_kinding_Tm_refine_3cafc7d2382648766aed8886c435c359))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.prefix @x2
@x3
@x4
@x5)
@x6)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_3cafc7d2382648766aed8886c435c359))

:named refinement_interpretation_Tm_refine_3cafc7d2382648766aed8886c435c359))
;;;;;;;;;;;;;;;;haseq for Tm_refine_3cafc7d2382648766aed8886c435c359
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_3cafc7d2382648766aed8886c435c359))

:named haseqTm_refine_3cafc7d2382648766aed8886c435c359))

(declare-fun Tm_refine_53c655668b35152fbbd9a7948c262451 (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_53c655668b35152fbbd9a7948c262451))

:named refinement_kinding_Tm_refine_53c655668b35152fbbd9a7948c262451))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(= @x2
(Prims.op_Addition @x3
@x4))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_53c655668b35152fbbd9a7948c262451))

:named refinement_interpretation_Tm_refine_53c655668b35152fbbd9a7948c262451))
;;;;;;;;;;;;;;;;haseq for Tm_refine_53c655668b35152fbbd9a7948c262451
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2))))
:qid haseqTm_refine_53c655668b35152fbbd9a7948c262451))

:named haseqTm_refine_53c655668b35152fbbd9a7948c262451))
(declare-fun Tm_refine_b84a8eccf6ed33ae21304640be46a7aa (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type)
 

:pattern ((HasType (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
:qid refinement_kinding_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))

:named refinement_kinding_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x2
@x3
@x4
@x5
@x6
@x7))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.prefix @x2
@x3
@x4
(Prims.op_Addition @x5
@x6))
@x7)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x2
@x3
@x4
@x5
@x6
@x7)))
:qid refinement_interpretation_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))

:named refinement_interpretation_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b84a8eccf6ed33ae21304640be46a7aa
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5))))
:qid haseqTm_refine_b84a8eccf6ed33ae21304640be46a7aa))

:named haseqTm_refine_b84a8eccf6ed33ae21304640be46a7aa))


; Encoding query formula : forall (a: Type) (n: Prims.nat) (f: MonotonicArray.array a n) (pos: Prims.nat)
;   (next: Prims.nat{pos + next <= n}) (h: FStar.Monotonic.Heap.heap) (_: Prims.squash Prims.l_True)
;   (any_result: Prims.nat) (_: _: Prims.unit{pos == any_result}) (any_result: MonotonicArray.t a pos)
;   (_: _: Prims.unit{MonotonicArray.prefix f pos == any_result}) (return_val: i: Prims.nat{i <= n})
;   (_: _: Prims.unit{return_val == pos + next}) (any_result: MonotonicArray.t a (pos + next))
;   (_: _: Prims.unit{MonotonicArray.prefix f (pos + next) == any_result}) (return_val: Prims.nat)
;   (_: _: Prims.unit{return_val == pos + next}).
;   Prims.auto_squash (FStar.ST.witnessed (MonotonicArray.mutable_pred (MonotonicArray.prefix f
;                 (pos + next))))


; Context: While encoding a query
; While typechecking the top-level declaration `let append_filled`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.array @x0
@x1))
(HasType @x3
Prims.nat)
(HasType @x4
(Tm_refine_6f684e27d6af9965634108bcfe981953 @x3
@x1))
(HasType @x5
FStar.Monotonic.Heap.heap)
(HasType @x6
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasType @x7
Prims.nat)
(HasType @x8
(Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x3
@x7))
(HasType @x9
(MonotonicArray.t @x0
@x3))
(HasType @x10
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x9))
(HasType @x11
(Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x1))
(HasType @x12
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x11
@x3
@x4))
(HasType @x13
(MonotonicArray.t @x0
(Prims.op_Addition @x3
@x4)))
(HasType @x14
(Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x13))
(HasType @x15
Prims.nat)
(HasType @x16
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x15
@x3
@x4)))

;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(503,11-503,13)
(or label_1

;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(508,5-508,7)
(FStar.ST.witnessed (MonotonicArray.mutable_pred @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))))
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 43572480)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Protocol.append_filled, 7)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_MonotonicArray.array, equation_MonotonicArray.prefix, equation_Prims.nat, int_inversion, int_typing, lemma_MonotonicArray.lemma_sub_preserves_array_mutable_flag, primitive_Prims.op_Addition, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_53c655668b35152fbbd9a7948c262451, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_6f684e27d6af9965634108bcfe981953, refinement_interpretation_Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d, refinement_interpretation_Tm_refine_f984cba283a0017499e468d307a8fd1d

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at Protocol.fst(508,5-508,7)

(declare-fun label_1 () Bool)

(declare-fun Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
Tm_type)
:named refinement_kinding_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,4-507,51); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasTypeFuel @u0
@x1
Prims.unit))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
:qid refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

:named refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

(declare-fun Tm_refine_3cafc7d2382648766aed8886c435c359 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_3cafc7d2382648766aed8886c435c359))

:named refinement_kinding_Tm_refine_3cafc7d2382648766aed8886c435c359))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.prefix @x2
@x3
@x4
@x5)
@x6)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_3cafc7d2382648766aed8886c435c359))

:named refinement_interpretation_Tm_refine_3cafc7d2382648766aed8886c435c359))
;;;;;;;;;;;;;;;;haseq for Tm_refine_3cafc7d2382648766aed8886c435c359
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_3cafc7d2382648766aed8886c435c359))

:named haseqTm_refine_3cafc7d2382648766aed8886c435c359))

(declare-fun Tm_refine_53c655668b35152fbbd9a7948c262451 (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_53c655668b35152fbbd9a7948c262451))

:named refinement_kinding_Tm_refine_53c655668b35152fbbd9a7948c262451))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(= @x2
(Prims.op_Addition @x3
@x4))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_53c655668b35152fbbd9a7948c262451))

:named refinement_interpretation_Tm_refine_53c655668b35152fbbd9a7948c262451))
;;;;;;;;;;;;;;;;haseq for Tm_refine_53c655668b35152fbbd9a7948c262451
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2))))
:qid haseqTm_refine_53c655668b35152fbbd9a7948c262451))

:named haseqTm_refine_53c655668b35152fbbd9a7948c262451))
(declare-fun Tm_refine_b84a8eccf6ed33ae21304640be46a7aa (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type)
 

:pattern ((HasType (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
:qid refinement_kinding_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))

:named refinement_kinding_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x2
@x3
@x4
@x5
@x6
@x7))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.prefix @x2
@x3
@x4
(Prims.op_Addition @x5
@x6))
@x7)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x2
@x3
@x4
@x5
@x6
@x7)))
:qid refinement_interpretation_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))

:named refinement_interpretation_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b84a8eccf6ed33ae21304640be46a7aa
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5))))
:qid haseqTm_refine_b84a8eccf6ed33ae21304640be46a7aa))

:named haseqTm_refine_b84a8eccf6ed33ae21304640be46a7aa))

; Encoding query formula : forall (a: Type) (n: Prims.nat) (f: MonotonicArray.array a n) (pos: Prims.nat)
;   (next: Prims.nat{pos + next <= n}) (h: FStar.Monotonic.Heap.heap) (_: Prims.squash Prims.l_True)
;   (any_result: Prims.nat) (_: _: Prims.unit{pos == any_result}) (any_result: MonotonicArray.t a pos)
;   (_: _: Prims.unit{MonotonicArray.prefix f pos == any_result}) (return_val: i: Prims.nat{i <= n})
;   (_: _: Prims.unit{return_val == pos + next}) (any_result: MonotonicArray.t a (pos + next))
;   (_: _: Prims.unit{MonotonicArray.prefix f (pos + next) == any_result})
;   (_: Protocol.fully_initialized_in (MonotonicArray.prefix f (pos + next)) h).
;   Prims.auto_squash (MonotonicArray.init_arr_in_heap (MonotonicArray.prefix f pos) h)


; Context: While encoding a query
; While typechecking the top-level declaration `let append_filled`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.array @x0
@x1))
(HasType @x3
Prims.nat)
(HasType @x4
(Tm_refine_6f684e27d6af9965634108bcfe981953 @x3
@x1))
(HasType @x5
FStar.Monotonic.Heap.heap)
(HasType @x6
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasType @x7
Prims.nat)
(HasType @x8
(Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x3
@x7))
(HasType @x9
(MonotonicArray.t @x0
@x3))
(HasType @x10
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x9))
(HasType @x11
(Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x1))
(HasType @x12
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x11
@x3
@x4))
(HasType @x13
(MonotonicArray.t @x0
(Prims.op_Addition @x3
@x4)))
(HasType @x14
(Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x13))
(HasType @x15
(Protocol.fully_initialized_in @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)))

;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(504,42-504,43)
(or label_1

;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(508,5-508,7)
(MonotonicArray.init_arr_in_heap @x0
@x3
(MonotonicArray.prefix @x0
@x1
@x2
@x3)
@x5)
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 43572480)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Protocol.append_filled, 8)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, b2t_def, disc_equation_FStar.Pervasives.Native.None, disc_equation_FStar.Pervasives.Native.Some, equation_ArrayUtils.init_at_seq, equation_MonotonicArray.array, equation_MonotonicArray.init_arr_in_heap, equation_MonotonicArray.init_arr_in_heap_i_j, equation_MonotonicArray.prefix, equation_Prims.nat, equation_Protocol.fully_initialized_in, fuel_guarded_inversion_FStar.Pervasives.Native.option, int_inversion, int_typing, kinding_FStar.Pervasives.Native.option@tok, lemma_FStar.Pervasives.invertOption, lemma_FStar.Seq.Base.lemma_index_slice, lemma_MonotonicArray.lemma_as_seq_length, lemma_MonotonicArray.lemma_sub_is_slice, primitive_Prims.op_Addition, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_0dee8cb03258a67c2f7ec66427696212, refinement_interpretation_Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8, refinement_interpretation_Tm_refine_3cafc7d2382648766aed8886c435c359, refinement_interpretation_Tm_refine_53c655668b35152fbbd9a7948c262451, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_6f684e27d6af9965634108bcfe981953, refinement_interpretation_Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d, refinement_interpretation_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa, refinement_interpretation_Tm_refine_d3d07693cd71377864ef84dc97d10ec1, refinement_interpretation_Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55, refinement_interpretation_Tm_refine_f984cba283a0017499e468d307a8fd1d, typing_FStar.Seq.Base.index, typing_MonotonicArray.as_seq

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at Protocol.fst(508,5-508,7)

(declare-fun label_1 () Bool)

(declare-fun Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
Tm_type)
:named refinement_kinding_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,4-507,51); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasTypeFuel @u0
@x1
Prims.unit))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
:qid refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

:named refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

(declare-fun Tm_refine_3cafc7d2382648766aed8886c435c359 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_3cafc7d2382648766aed8886c435c359))

:named refinement_kinding_Tm_refine_3cafc7d2382648766aed8886c435c359))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.prefix @x2
@x3
@x4
@x5)
@x6)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_3cafc7d2382648766aed8886c435c359))

:named refinement_interpretation_Tm_refine_3cafc7d2382648766aed8886c435c359))
;;;;;;;;;;;;;;;;haseq for Tm_refine_3cafc7d2382648766aed8886c435c359
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_3cafc7d2382648766aed8886c435c359))

:named haseqTm_refine_3cafc7d2382648766aed8886c435c359))

(declare-fun Tm_refine_53c655668b35152fbbd9a7948c262451 (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_53c655668b35152fbbd9a7948c262451))

:named refinement_kinding_Tm_refine_53c655668b35152fbbd9a7948c262451))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(= @x2
(Prims.op_Addition @x3
@x4))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_53c655668b35152fbbd9a7948c262451))

:named refinement_interpretation_Tm_refine_53c655668b35152fbbd9a7948c262451))
;;;;;;;;;;;;;;;;haseq for Tm_refine_53c655668b35152fbbd9a7948c262451
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2))))
:qid haseqTm_refine_53c655668b35152fbbd9a7948c262451))

:named haseqTm_refine_53c655668b35152fbbd9a7948c262451))
(declare-fun Tm_refine_b84a8eccf6ed33ae21304640be46a7aa (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type)
 

:pattern ((HasType (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
:qid refinement_kinding_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))

:named refinement_kinding_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x2
@x3
@x4
@x5
@x6
@x7))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.prefix @x2
@x3
@x4
(Prims.op_Addition @x5
@x6))
@x7)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x2
@x3
@x4
@x5
@x6
@x7)))
:qid refinement_interpretation_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))

:named refinement_interpretation_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b84a8eccf6ed33ae21304640be46a7aa
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5))))
:qid haseqTm_refine_b84a8eccf6ed33ae21304640be46a7aa))

:named haseqTm_refine_b84a8eccf6ed33ae21304640be46a7aa))

(declare-fun Tm_refine_6698ee9d28e3f1665dea22d61a777309 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(504,15-504,43); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type)
 

:pattern ((HasType (Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
:qid refinement_kinding_Tm_refine_6698ee9d28e3f1665dea22d61a777309))

:named refinement_kinding_Tm_refine_6698ee9d28e3f1665dea22d61a777309))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(504,15-504,43); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x2
@x3
@x4
@x5
@x6
@x7))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Protocol.fst(504,15-504,43); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.as_initialized_seq @x2
@x3
(MonotonicArray.prefix @x2
@x4
@x5
@x3)
@x6)
@x7)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x2
@x3
@x4
@x5
@x6
@x7)))
:qid refinement_interpretation_Tm_refine_6698ee9d28e3f1665dea22d61a777309))

:named refinement_interpretation_Tm_refine_6698ee9d28e3f1665dea22d61a777309))
;;;;;;;;;;;;;;;;haseq for Tm_refine_6698ee9d28e3f1665dea22d61a777309
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(504,15-504,43); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x0
@x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x0
@x1
@x2
@x3
@x4
@x5))))
:qid haseqTm_refine_6698ee9d28e3f1665dea22d61a777309))

:named haseqTm_refine_6698ee9d28e3f1665dea22d61a777309))

; Encoding query formula : forall (a: Type) (n: Prims.nat) (f: MonotonicArray.array a n) (pos: Prims.nat)
;   (next: Prims.nat{pos + next <= n}) (h: FStar.Monotonic.Heap.heap) (_: Prims.squash Prims.l_True)
;   (any_result: Prims.nat) (_: _: Prims.unit{pos == any_result}) (any_result: MonotonicArray.t a pos)
;   (_: _: Prims.unit{MonotonicArray.prefix f pos == any_result}) (return_val: i: Prims.nat{i <= n})
;   (_: _: Prims.unit{return_val == pos + next}) (any_result: MonotonicArray.t a (pos + next))
;   (_: _: Prims.unit{MonotonicArray.prefix f (pos + next) == any_result})
;   (_: Protocol.fully_initialized_in (MonotonicArray.prefix f (pos + next)) h)
;   (any_result: FStar.Monotonic.Heap.heap) (_: _: Prims.unit{h == any_result})
;   (any_result: FStar.Seq.Base.seq a)
;   (_:
;   _: Prims.unit{MonotonicArray.as_initialized_seq (MonotonicArray.prefix f pos) h == any_result}).
;   (*  - Subtyping check failed
;   - Expected type Prims.nat got type Prims.int
; *) pos + next >= 0


; Context: While encoding a query
; While typechecking the top-level declaration `let append_filled`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term) (@x18 Term) (@x19 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.array @x0
@x1))
(HasType @x3
Prims.nat)
(HasType @x4
(Tm_refine_6f684e27d6af9965634108bcfe981953 @x3
@x1))
(HasType @x5
FStar.Monotonic.Heap.heap)
(HasType @x6
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasType @x7
Prims.nat)
(HasType @x8
(Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x3
@x7))
(HasType @x9
(MonotonicArray.t @x0
@x3))
(HasType @x10
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x9))
(HasType @x11
(Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x1))
(HasType @x12
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x11
@x3
@x4))
(HasType @x13
(MonotonicArray.t @x0
(Prims.op_Addition @x3
@x4)))
(HasType @x14
(Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x13))
(HasType @x15
(Protocol.fully_initialized_in @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5))
(HasType @x16
FStar.Monotonic.Heap.heap)
(HasType @x17
(Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x5
@x16))
(HasType @x18
(FStar.Seq.Base.seq @x0))
(HasType @x19
(Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x0
@x3
@x1
@x2
@x5
@x18)))

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(505,39-505,41)
(or label_1

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(508,5-508,7)
(>= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 43572480)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Protocol.append_filled, 9)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Prims.nat, primitive_Prims.op_Addition, refinement_interpretation_Tm_refine_53c655668b35152fbbd9a7948c262451, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at Protocol.fst(508,5-508,7)

(declare-fun label_1 () Bool)

(declare-fun Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
Tm_type)
:named refinement_kinding_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,4-507,51); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasTypeFuel @u0
@x1
Prims.unit))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
:qid refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

:named refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

(declare-fun Tm_refine_3cafc7d2382648766aed8886c435c359 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_3cafc7d2382648766aed8886c435c359))

:named refinement_kinding_Tm_refine_3cafc7d2382648766aed8886c435c359))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.prefix @x2
@x3
@x4
@x5)
@x6)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_3cafc7d2382648766aed8886c435c359))

:named refinement_interpretation_Tm_refine_3cafc7d2382648766aed8886c435c359))
;;;;;;;;;;;;;;;;haseq for Tm_refine_3cafc7d2382648766aed8886c435c359
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_3cafc7d2382648766aed8886c435c359))

:named haseqTm_refine_3cafc7d2382648766aed8886c435c359))

(declare-fun Tm_refine_53c655668b35152fbbd9a7948c262451 (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_53c655668b35152fbbd9a7948c262451))

:named refinement_kinding_Tm_refine_53c655668b35152fbbd9a7948c262451))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(= @x2
(Prims.op_Addition @x3
@x4))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_53c655668b35152fbbd9a7948c262451))

:named refinement_interpretation_Tm_refine_53c655668b35152fbbd9a7948c262451))
;;;;;;;;;;;;;;;;haseq for Tm_refine_53c655668b35152fbbd9a7948c262451
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2))))
:qid haseqTm_refine_53c655668b35152fbbd9a7948c262451))

:named haseqTm_refine_53c655668b35152fbbd9a7948c262451))
(declare-fun Tm_refine_b84a8eccf6ed33ae21304640be46a7aa (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type)
 

:pattern ((HasType (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
:qid refinement_kinding_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))

:named refinement_kinding_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x2
@x3
@x4
@x5
@x6
@x7))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.prefix @x2
@x3
@x4
(Prims.op_Addition @x5
@x6))
@x7)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x2
@x3
@x4
@x5
@x6
@x7)))
:qid refinement_interpretation_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))

:named refinement_interpretation_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b84a8eccf6ed33ae21304640be46a7aa
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5))))
:qid haseqTm_refine_b84a8eccf6ed33ae21304640be46a7aa))

:named haseqTm_refine_b84a8eccf6ed33ae21304640be46a7aa))

(declare-fun Tm_refine_6698ee9d28e3f1665dea22d61a777309 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(504,15-504,43); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type)
 

:pattern ((HasType (Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
:qid refinement_kinding_Tm_refine_6698ee9d28e3f1665dea22d61a777309))

:named refinement_kinding_Tm_refine_6698ee9d28e3f1665dea22d61a777309))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(504,15-504,43); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x2
@x3
@x4
@x5
@x6
@x7))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Protocol.fst(504,15-504,43); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.as_initialized_seq @x2
@x3
(MonotonicArray.prefix @x2
@x4
@x5
@x3)
@x6)
@x7)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x2
@x3
@x4
@x5
@x6
@x7)))
:qid refinement_interpretation_Tm_refine_6698ee9d28e3f1665dea22d61a777309))

:named refinement_interpretation_Tm_refine_6698ee9d28e3f1665dea22d61a777309))
;;;;;;;;;;;;;;;;haseq for Tm_refine_6698ee9d28e3f1665dea22d61a777309
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(504,15-504,43); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x0
@x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x0
@x1
@x2
@x3
@x4
@x5))))
:qid haseqTm_refine_6698ee9d28e3f1665dea22d61a777309))

:named haseqTm_refine_6698ee9d28e3f1665dea22d61a777309))


; Encoding query formula : forall (a: Type) (n: Prims.nat) (f: MonotonicArray.array a n) (pos: Prims.nat)
;   (next: Prims.nat{pos + next <= n}) (h: FStar.Monotonic.Heap.heap) (_: Prims.squash Prims.l_True)
;   (any_result: Prims.nat) (_: _: Prims.unit{pos == any_result}) (any_result: MonotonicArray.t a pos)
;   (_: _: Prims.unit{MonotonicArray.prefix f pos == any_result}) (return_val: i: Prims.nat{i <= n})
;   (_: _: Prims.unit{return_val == pos + next}) (any_result: MonotonicArray.t a (pos + next))
;   (_: _: Prims.unit{MonotonicArray.prefix f (pos + next) == any_result})
;   (_: Protocol.fully_initialized_in (MonotonicArray.prefix f (pos + next)) h)
;   (any_result: FStar.Monotonic.Heap.heap) (_: _: Prims.unit{h == any_result})
;   (any_result: FStar.Seq.Base.seq a)
;   (_:
;   _: Prims.unit{MonotonicArray.as_initialized_seq (MonotonicArray.prefix f pos) h == any_result})
;   (return_val: Prims.nat) (_: _: Prims.unit{return_val == pos + next}).
;   Prims.auto_squash (MonotonicArray.init_arr_in_heap (MonotonicArray.prefix f (pos + next)) h)


; Context: While encoding a query
; While typechecking the top-level declaration `let append_filled`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term) (@x18 Term) (@x19 Term) (@x20 Term) (@x21 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.array @x0
@x1))
(HasType @x3
Prims.nat)
(HasType @x4
(Tm_refine_6f684e27d6af9965634108bcfe981953 @x3
@x1))
(HasType @x5
FStar.Monotonic.Heap.heap)
(HasType @x6
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasType @x7
Prims.nat)
(HasType @x8
(Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x3
@x7))
(HasType @x9
(MonotonicArray.t @x0
@x3))
(HasType @x10
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x9))
(HasType @x11
(Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x1))
(HasType @x12
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x11
@x3
@x4))
(HasType @x13
(MonotonicArray.t @x0
(Prims.op_Addition @x3
@x4)))
(HasType @x14
(Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x13))
(HasType @x15
(Protocol.fully_initialized_in @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5))
(HasType @x16
FStar.Monotonic.Heap.heap)
(HasType @x17
(Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x5
@x16))
(HasType @x18
(FStar.Seq.Base.seq @x0))
(HasType @x19
(Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x0
@x3
@x1
@x2
@x5
@x18))
(HasType @x20
Prims.nat)
(HasType @x21
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x20
@x3
@x4)))

;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(505,42-505,43)
(or label_1

;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(508,5-508,7)
(MonotonicArray.init_arr_in_heap @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 43572480)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Protocol.append_filled, 10)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, b2t_def, disc_equation_FStar.Pervasives.Native.Some, equation_ArrayUtils.init_at_seq, equation_MonotonicArray.init_arr_in_heap, equation_MonotonicArray.init_arr_in_heap_i_j, equation_MonotonicArray.prefix, equation_Prims.nat, equation_Protocol.fully_initialized_in, int_inversion, primitive_Prims.op_Addition, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at Protocol.fst(508,5-508,7)

(declare-fun label_1 () Bool)

(declare-fun Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
Tm_type)
:named refinement_kinding_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,4-507,51); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasTypeFuel @u0
@x1
Prims.unit))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
:qid refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

:named refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

(declare-fun Tm_refine_3cafc7d2382648766aed8886c435c359 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_3cafc7d2382648766aed8886c435c359))

:named refinement_kinding_Tm_refine_3cafc7d2382648766aed8886c435c359))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.prefix @x2
@x3
@x4
@x5)
@x6)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_3cafc7d2382648766aed8886c435c359))

:named refinement_interpretation_Tm_refine_3cafc7d2382648766aed8886c435c359))
;;;;;;;;;;;;;;;;haseq for Tm_refine_3cafc7d2382648766aed8886c435c359
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_3cafc7d2382648766aed8886c435c359))

:named haseqTm_refine_3cafc7d2382648766aed8886c435c359))

(declare-fun Tm_refine_53c655668b35152fbbd9a7948c262451 (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_53c655668b35152fbbd9a7948c262451))

:named refinement_kinding_Tm_refine_53c655668b35152fbbd9a7948c262451))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(= @x2
(Prims.op_Addition @x3
@x4))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_53c655668b35152fbbd9a7948c262451))

:named refinement_interpretation_Tm_refine_53c655668b35152fbbd9a7948c262451))
;;;;;;;;;;;;;;;;haseq for Tm_refine_53c655668b35152fbbd9a7948c262451
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2))))
:qid haseqTm_refine_53c655668b35152fbbd9a7948c262451))

:named haseqTm_refine_53c655668b35152fbbd9a7948c262451))
(declare-fun Tm_refine_b84a8eccf6ed33ae21304640be46a7aa (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type)
 

:pattern ((HasType (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
:qid refinement_kinding_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))

:named refinement_kinding_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x2
@x3
@x4
@x5
@x6
@x7))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.prefix @x2
@x3
@x4
(Prims.op_Addition @x5
@x6))
@x7)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x2
@x3
@x4
@x5
@x6
@x7)))
:qid refinement_interpretation_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))

:named refinement_interpretation_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b84a8eccf6ed33ae21304640be46a7aa
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5))))
:qid haseqTm_refine_b84a8eccf6ed33ae21304640be46a7aa))

:named haseqTm_refine_b84a8eccf6ed33ae21304640be46a7aa))

(declare-fun Tm_refine_6698ee9d28e3f1665dea22d61a777309 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(504,15-504,43); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type)
 

:pattern ((HasType (Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
:qid refinement_kinding_Tm_refine_6698ee9d28e3f1665dea22d61a777309))

:named refinement_kinding_Tm_refine_6698ee9d28e3f1665dea22d61a777309))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(504,15-504,43); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x2
@x3
@x4
@x5
@x6
@x7))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Protocol.fst(504,15-504,43); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.as_initialized_seq @x2
@x3
(MonotonicArray.prefix @x2
@x4
@x5
@x3)
@x6)
@x7)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x2
@x3
@x4
@x5
@x6
@x7)))
:qid refinement_interpretation_Tm_refine_6698ee9d28e3f1665dea22d61a777309))

:named refinement_interpretation_Tm_refine_6698ee9d28e3f1665dea22d61a777309))
;;;;;;;;;;;;;;;;haseq for Tm_refine_6698ee9d28e3f1665dea22d61a777309
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(504,15-504,43); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x0
@x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x0
@x1
@x2
@x3
@x4
@x5))))
:qid haseqTm_refine_6698ee9d28e3f1665dea22d61a777309))

:named haseqTm_refine_6698ee9d28e3f1665dea22d61a777309))


(declare-fun Tm_refine_5b538e32ea54647378806226b7db57e5 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(505,15-505,43); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (HasType (Tm_refine_5b538e32ea54647378806226b7db57e5 @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type)
 

:pattern ((HasType (Tm_refine_5b538e32ea54647378806226b7db57e5 @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type))
:qid refinement_kinding_Tm_refine_5b538e32ea54647378806226b7db57e5))

:named refinement_kinding_Tm_refine_5b538e32ea54647378806226b7db57e5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(505,15-505,43); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_5b538e32ea54647378806226b7db57e5 @x2
@x3
@x4
@x5
@x6
@x7
@x8))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Protocol.fst(505,15-505,43); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.as_initialized_seq @x2
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x2
@x5
@x6
(Prims.op_Addition @x3
@x4))
@x7)
@x8)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_5b538e32ea54647378806226b7db57e5 @x2
@x3
@x4
@x5
@x6
@x7
@x8)))
:qid refinement_interpretation_Tm_refine_5b538e32ea54647378806226b7db57e5))

:named refinement_interpretation_Tm_refine_5b538e32ea54647378806226b7db57e5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_5b538e32ea54647378806226b7db57e5
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(505,15-505,43); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_5b538e32ea54647378806226b7db57e5 @x0
@x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_5b538e32ea54647378806226b7db57e5 @x0
@x1
@x2
@x3
@x4
@x5
@x6))))
:qid haseqTm_refine_5b538e32ea54647378806226b7db57e5))

:named haseqTm_refine_5b538e32ea54647378806226b7db57e5))

; Encoding query formula : forall (a: Type) (n: Prims.nat) (f: MonotonicArray.array a n) (pos: Prims.nat)
;   (next: Prims.nat{pos + next <= n}) (h: FStar.Monotonic.Heap.heap) (_: Prims.squash Prims.l_True)
;   (any_result: Prims.nat) (_: _: Prims.unit{pos == any_result}) (any_result: MonotonicArray.t a pos)
;   (_: _: Prims.unit{MonotonicArray.prefix f pos == any_result}) (return_val: i: Prims.nat{i <= n})
;   (_: _: Prims.unit{return_val == pos + next}) (any_result: MonotonicArray.t a (pos + next))
;   (_: _: Prims.unit{MonotonicArray.prefix f (pos + next) == any_result})
;   (_: Protocol.fully_initialized_in (MonotonicArray.prefix f (pos + next)) h)
;   (any_result: FStar.Monotonic.Heap.heap) (_: _: Prims.unit{h == any_result})
;   (any_result: FStar.Seq.Base.seq a)
;   (_:
;   _: Prims.unit{MonotonicArray.as_initialized_seq (MonotonicArray.prefix f pos) h == any_result})
;   (return_val: Prims.nat) (_: _: Prims.unit{return_val == pos + next})
;   (any_result: FStar.Monotonic.Heap.heap) (_: _: Prims.unit{h == any_result})
;   (any_result: FStar.Seq.Base.seq a)
;   (_:
;   _:
;   Prims.unit
;     {MonotonicArray.as_initialized_seq (MonotonicArray.prefix f (pos + next)) h == any_result}).
;   (*  - Subtyping check failed
;   - Expected type Prims.nat got type Prims.int
; *) n - pos >= 0


; Context: While encoding a query
; While typechecking the top-level declaration `let append_filled`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term) (@x18 Term) (@x19 Term) (@x20 Term) (@x21 Term) (@x22 Term) (@x23 Term) (@x24 Term) (@x25 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.array @x0
@x1))
(HasType @x3
Prims.nat)
(HasType @x4
(Tm_refine_6f684e27d6af9965634108bcfe981953 @x3
@x1))
(HasType @x5
FStar.Monotonic.Heap.heap)
(HasType @x6
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasType @x7
Prims.nat)
(HasType @x8
(Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x3
@x7))
(HasType @x9
(MonotonicArray.t @x0
@x3))
(HasType @x10
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x9))
(HasType @x11
(Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x1))
(HasType @x12
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x11
@x3
@x4))
(HasType @x13
(MonotonicArray.t @x0
(Prims.op_Addition @x3
@x4)))
(HasType @x14
(Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x13))
(HasType @x15
(Protocol.fully_initialized_in @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5))
(HasType @x16
FStar.Monotonic.Heap.heap)
(HasType @x17
(Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x5
@x16))
(HasType @x18
(FStar.Seq.Base.seq @x0))
(HasType @x19
(Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x0
@x3
@x1
@x2
@x5
@x18))
(HasType @x20
Prims.nat)
(HasType @x21
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x20
@x3
@x4))
(HasType @x22
FStar.Monotonic.Heap.heap)
(HasType @x23
(Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x5
@x22))
(HasType @x24
(FStar.Seq.Base.seq @x0))
(HasType @x25
(Tm_refine_5b538e32ea54647378806226b7db57e5 @x0
@x3
@x4
@x1
@x2
@x5
@x24)))

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(506,54-506,60)
(or label_1

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(508,5-508,7)
(>= (BoxInt_proj_0 (Prims.op_Subtraction @x1
@x3))
(BoxInt_proj_0 (BoxInt 0)))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 43572480)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Protocol.append_filled, 11)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Prims.nat, primitive_Prims.op_Addition, primitive_Prims.op_Subtraction, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_6f684e27d6af9965634108bcfe981953

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at Protocol.fst(508,5-508,7)

(declare-fun label_1 () Bool)

(declare-fun Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
Tm_type)
:named refinement_kinding_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,4-507,51); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasTypeFuel @u0
@x1
Prims.unit))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
:qid refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

:named refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

(declare-fun Tm_refine_3cafc7d2382648766aed8886c435c359 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_3cafc7d2382648766aed8886c435c359))

:named refinement_kinding_Tm_refine_3cafc7d2382648766aed8886c435c359))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.prefix @x2
@x3
@x4
@x5)
@x6)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_3cafc7d2382648766aed8886c435c359))

:named refinement_interpretation_Tm_refine_3cafc7d2382648766aed8886c435c359))
;;;;;;;;;;;;;;;;haseq for Tm_refine_3cafc7d2382648766aed8886c435c359
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_3cafc7d2382648766aed8886c435c359))

:named haseqTm_refine_3cafc7d2382648766aed8886c435c359))

(declare-fun Tm_refine_53c655668b35152fbbd9a7948c262451 (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_53c655668b35152fbbd9a7948c262451))

:named refinement_kinding_Tm_refine_53c655668b35152fbbd9a7948c262451))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(= @x2
(Prims.op_Addition @x3
@x4))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_53c655668b35152fbbd9a7948c262451))

:named refinement_interpretation_Tm_refine_53c655668b35152fbbd9a7948c262451))
;;;;;;;;;;;;;;;;haseq for Tm_refine_53c655668b35152fbbd9a7948c262451
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2))))
:qid haseqTm_refine_53c655668b35152fbbd9a7948c262451))

:named haseqTm_refine_53c655668b35152fbbd9a7948c262451))
(declare-fun Tm_refine_b84a8eccf6ed33ae21304640be46a7aa (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type)
 

:pattern ((HasType (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
:qid refinement_kinding_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))

:named refinement_kinding_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x2
@x3
@x4
@x5
@x6
@x7))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.prefix @x2
@x3
@x4
(Prims.op_Addition @x5
@x6))
@x7)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x2
@x3
@x4
@x5
@x6
@x7)))
:qid refinement_interpretation_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))

:named refinement_interpretation_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b84a8eccf6ed33ae21304640be46a7aa
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5))))
:qid haseqTm_refine_b84a8eccf6ed33ae21304640be46a7aa))

:named haseqTm_refine_b84a8eccf6ed33ae21304640be46a7aa))

(declare-fun Tm_refine_6698ee9d28e3f1665dea22d61a777309 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(504,15-504,43); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type)
 

:pattern ((HasType (Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
:qid refinement_kinding_Tm_refine_6698ee9d28e3f1665dea22d61a777309))

:named refinement_kinding_Tm_refine_6698ee9d28e3f1665dea22d61a777309))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(504,15-504,43); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x2
@x3
@x4
@x5
@x6
@x7))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Protocol.fst(504,15-504,43); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.as_initialized_seq @x2
@x3
(MonotonicArray.prefix @x2
@x4
@x5
@x3)
@x6)
@x7)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x2
@x3
@x4
@x5
@x6
@x7)))
:qid refinement_interpretation_Tm_refine_6698ee9d28e3f1665dea22d61a777309))

:named refinement_interpretation_Tm_refine_6698ee9d28e3f1665dea22d61a777309))
;;;;;;;;;;;;;;;;haseq for Tm_refine_6698ee9d28e3f1665dea22d61a777309
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(504,15-504,43); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x0
@x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x0
@x1
@x2
@x3
@x4
@x5))))
:qid haseqTm_refine_6698ee9d28e3f1665dea22d61a777309))

:named haseqTm_refine_6698ee9d28e3f1665dea22d61a777309))


(declare-fun Tm_refine_5b538e32ea54647378806226b7db57e5 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(505,15-505,43); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (HasType (Tm_refine_5b538e32ea54647378806226b7db57e5 @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type)
 

:pattern ((HasType (Tm_refine_5b538e32ea54647378806226b7db57e5 @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type))
:qid refinement_kinding_Tm_refine_5b538e32ea54647378806226b7db57e5))

:named refinement_kinding_Tm_refine_5b538e32ea54647378806226b7db57e5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(505,15-505,43); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_5b538e32ea54647378806226b7db57e5 @x2
@x3
@x4
@x5
@x6
@x7
@x8))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Protocol.fst(505,15-505,43); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.as_initialized_seq @x2
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x2
@x5
@x6
(Prims.op_Addition @x3
@x4))
@x7)
@x8)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_5b538e32ea54647378806226b7db57e5 @x2
@x3
@x4
@x5
@x6
@x7
@x8)))
:qid refinement_interpretation_Tm_refine_5b538e32ea54647378806226b7db57e5))

:named refinement_interpretation_Tm_refine_5b538e32ea54647378806226b7db57e5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_5b538e32ea54647378806226b7db57e5
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(505,15-505,43); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_5b538e32ea54647378806226b7db57e5 @x0
@x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_5b538e32ea54647378806226b7db57e5 @x0
@x1
@x2
@x3
@x4
@x5
@x6))))
:qid haseqTm_refine_5b538e32ea54647378806226b7db57e5))

:named haseqTm_refine_5b538e32ea54647378806226b7db57e5))
(declare-fun Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa))

:named refinement_kinding_Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(= @x2
(Prims.op_Subtraction @x3
@x4))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa))

:named refinement_interpretation_Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa))
;;;;;;;;;;;;;;;;haseq for Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa @x0
@x1
@x2))))
:qid haseqTm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa))

:named haseqTm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa))

; Encoding query formula : forall (a: Type) (n: Prims.nat) (f: MonotonicArray.array a n) (pos: Prims.nat)
;   (next: Prims.nat{pos + next <= n}) (h: FStar.Monotonic.Heap.heap) (_: Prims.squash Prims.l_True)
;   (any_result: Prims.nat) (_: _: Prims.unit{pos == any_result}) (any_result: MonotonicArray.t a pos)
;   (_: _: Prims.unit{MonotonicArray.prefix f pos == any_result}) (return_val: i: Prims.nat{i <= n})
;   (_: _: Prims.unit{return_val == pos + next}) (any_result: MonotonicArray.t a (pos + next))
;   (_: _: Prims.unit{MonotonicArray.prefix f (pos + next) == any_result})
;   (_: Protocol.fully_initialized_in (MonotonicArray.prefix f (pos + next)) h)
;   (any_result: FStar.Monotonic.Heap.heap) (_: _: Prims.unit{h == any_result})
;   (any_result: FStar.Seq.Base.seq a)
;   (_:
;   _: Prims.unit{MonotonicArray.as_initialized_seq (MonotonicArray.prefix f pos) h == any_result})
;   (return_val: Prims.nat) (_: _: Prims.unit{return_val == pos + next})
;   (any_result: FStar.Monotonic.Heap.heap) (_: _: Prims.unit{h == any_result})
;   (any_result: FStar.Seq.Base.seq a)
;   (_:
;   _:
;   Prims.unit
;     {MonotonicArray.as_initialized_seq (MonotonicArray.prefix f (pos + next)) h == any_result})
;   (return_val: Prims.nat) (_: _: Prims.unit{return_val == n - pos}).
;   (*  - Subtyping check failed
;   - Expected type i: Prims.nat{i <= n} got type Prims.nat
; *) pos <= n


; Context: While encoding a query
; While typechecking the top-level declaration `let append_filled`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term) (@x18 Term) (@x19 Term) (@x20 Term) (@x21 Term) (@x22 Term) (@x23 Term) (@x24 Term) (@x25 Term) (@x26 Term) (@x27 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.array @x0
@x1))
(HasType @x3
Prims.nat)
(HasType @x4
(Tm_refine_6f684e27d6af9965634108bcfe981953 @x3
@x1))
(HasType @x5
FStar.Monotonic.Heap.heap)
(HasType @x6
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasType @x7
Prims.nat)
(HasType @x8
(Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x3
@x7))
(HasType @x9
(MonotonicArray.t @x0
@x3))
(HasType @x10
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x9))
(HasType @x11
(Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x1))
(HasType @x12
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x11
@x3
@x4))
(HasType @x13
(MonotonicArray.t @x0
(Prims.op_Addition @x3
@x4)))
(HasType @x14
(Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x13))
(HasType @x15
(Protocol.fully_initialized_in @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5))
(HasType @x16
FStar.Monotonic.Heap.heap)
(HasType @x17
(Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x5
@x16))
(HasType @x18
(FStar.Seq.Base.seq @x0))
(HasType @x19
(Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x0
@x3
@x1
@x2
@x5
@x18))
(HasType @x20
Prims.nat)
(HasType @x21
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x20
@x3
@x4))
(HasType @x22
FStar.Monotonic.Heap.heap)
(HasType @x23
(Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x5
@x22))
(HasType @x24
(FStar.Seq.Base.seq @x0))
(HasType @x25
(Tm_refine_5b538e32ea54647378806226b7db57e5 @x0
@x3
@x4
@x1
@x2
@x5
@x24))
(HasType @x26
Prims.nat)
(HasType @x27
(Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa @x26
@x1
@x3)))

;; def=MonotonicArray.fsti(166,50-166,56); use=Protocol.fst(506,63-506,66)
(or label_1

;; def=MonotonicArray.fsti(166,50-166,56); use=Protocol.fst(508,5-508,7)
(<= (BoxInt_proj_0 @x3)
(BoxInt_proj_0 @x1))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 43572480)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Protocol.append_filled, 12)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Prims.nat, primitive_Prims.op_Addition, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_6f684e27d6af9965634108bcfe981953

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at Protocol.fst(508,5-508,7)

(declare-fun label_1 () Bool)

(declare-fun Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
Tm_type)
:named refinement_kinding_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,4-507,51); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasTypeFuel @u0
@x1
Prims.unit))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
:qid refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

:named refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

(declare-fun Tm_refine_3cafc7d2382648766aed8886c435c359 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_3cafc7d2382648766aed8886c435c359))

:named refinement_kinding_Tm_refine_3cafc7d2382648766aed8886c435c359))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.prefix @x2
@x3
@x4
@x5)
@x6)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_3cafc7d2382648766aed8886c435c359))

:named refinement_interpretation_Tm_refine_3cafc7d2382648766aed8886c435c359))
;;;;;;;;;;;;;;;;haseq for Tm_refine_3cafc7d2382648766aed8886c435c359
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_3cafc7d2382648766aed8886c435c359))

:named haseqTm_refine_3cafc7d2382648766aed8886c435c359))

(declare-fun Tm_refine_53c655668b35152fbbd9a7948c262451 (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_53c655668b35152fbbd9a7948c262451))

:named refinement_kinding_Tm_refine_53c655668b35152fbbd9a7948c262451))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(= @x2
(Prims.op_Addition @x3
@x4))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_53c655668b35152fbbd9a7948c262451))

:named refinement_interpretation_Tm_refine_53c655668b35152fbbd9a7948c262451))
;;;;;;;;;;;;;;;;haseq for Tm_refine_53c655668b35152fbbd9a7948c262451
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2))))
:qid haseqTm_refine_53c655668b35152fbbd9a7948c262451))

:named haseqTm_refine_53c655668b35152fbbd9a7948c262451))
(declare-fun Tm_refine_b84a8eccf6ed33ae21304640be46a7aa (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type)
 

:pattern ((HasType (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
:qid refinement_kinding_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))

:named refinement_kinding_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x2
@x3
@x4
@x5
@x6
@x7))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.prefix @x2
@x3
@x4
(Prims.op_Addition @x5
@x6))
@x7)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x2
@x3
@x4
@x5
@x6
@x7)))
:qid refinement_interpretation_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))

:named refinement_interpretation_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b84a8eccf6ed33ae21304640be46a7aa
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5))))
:qid haseqTm_refine_b84a8eccf6ed33ae21304640be46a7aa))

:named haseqTm_refine_b84a8eccf6ed33ae21304640be46a7aa))

(declare-fun Tm_refine_6698ee9d28e3f1665dea22d61a777309 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(504,15-504,43); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type)
 

:pattern ((HasType (Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
:qid refinement_kinding_Tm_refine_6698ee9d28e3f1665dea22d61a777309))

:named refinement_kinding_Tm_refine_6698ee9d28e3f1665dea22d61a777309))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(504,15-504,43); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x2
@x3
@x4
@x5
@x6
@x7))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Protocol.fst(504,15-504,43); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.as_initialized_seq @x2
@x3
(MonotonicArray.prefix @x2
@x4
@x5
@x3)
@x6)
@x7)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x2
@x3
@x4
@x5
@x6
@x7)))
:qid refinement_interpretation_Tm_refine_6698ee9d28e3f1665dea22d61a777309))

:named refinement_interpretation_Tm_refine_6698ee9d28e3f1665dea22d61a777309))
;;;;;;;;;;;;;;;;haseq for Tm_refine_6698ee9d28e3f1665dea22d61a777309
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(504,15-504,43); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x0
@x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x0
@x1
@x2
@x3
@x4
@x5))))
:qid haseqTm_refine_6698ee9d28e3f1665dea22d61a777309))

:named haseqTm_refine_6698ee9d28e3f1665dea22d61a777309))


(declare-fun Tm_refine_5b538e32ea54647378806226b7db57e5 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(505,15-505,43); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (HasType (Tm_refine_5b538e32ea54647378806226b7db57e5 @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type)
 

:pattern ((HasType (Tm_refine_5b538e32ea54647378806226b7db57e5 @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type))
:qid refinement_kinding_Tm_refine_5b538e32ea54647378806226b7db57e5))

:named refinement_kinding_Tm_refine_5b538e32ea54647378806226b7db57e5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(505,15-505,43); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_5b538e32ea54647378806226b7db57e5 @x2
@x3
@x4
@x5
@x6
@x7
@x8))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Protocol.fst(505,15-505,43); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.as_initialized_seq @x2
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x2
@x5
@x6
(Prims.op_Addition @x3
@x4))
@x7)
@x8)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_5b538e32ea54647378806226b7db57e5 @x2
@x3
@x4
@x5
@x6
@x7
@x8)))
:qid refinement_interpretation_Tm_refine_5b538e32ea54647378806226b7db57e5))

:named refinement_interpretation_Tm_refine_5b538e32ea54647378806226b7db57e5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_5b538e32ea54647378806226b7db57e5
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(505,15-505,43); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_5b538e32ea54647378806226b7db57e5 @x0
@x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_5b538e32ea54647378806226b7db57e5 @x0
@x1
@x2
@x3
@x4
@x5
@x6))))
:qid haseqTm_refine_5b538e32ea54647378806226b7db57e5))

:named haseqTm_refine_5b538e32ea54647378806226b7db57e5))
(declare-fun Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa))

:named refinement_kinding_Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(= @x2
(Prims.op_Subtraction @x3
@x4))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa))

:named refinement_interpretation_Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa))
;;;;;;;;;;;;;;;;haseq for Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa @x0
@x1
@x2))))
:qid haseqTm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa))

:named haseqTm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa))

(declare-fun Tm_refine_72e106d8461f33b5d2e98ec1d6705624 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=MonotonicArray.fsti(288,47-288,50); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_72e106d8461f33b5d2e98ec1d6705624 @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_72e106d8461f33b5d2e98ec1d6705624 @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_72e106d8461f33b5d2e98ec1d6705624))

:named refinement_kinding_Tm_refine_72e106d8461f33b5d2e98ec1d6705624))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=MonotonicArray.fsti(288,47-288,50); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_72e106d8461f33b5d2e98ec1d6705624 @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=MonotonicArray.fsti(288,47-288,50); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.suffix @x2
@x3
@x4
@x5)
@x6)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_72e106d8461f33b5d2e98ec1d6705624 @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_72e106d8461f33b5d2e98ec1d6705624))

:named refinement_interpretation_Tm_refine_72e106d8461f33b5d2e98ec1d6705624))
;;;;;;;;;;;;;;;;haseq for Tm_refine_72e106d8461f33b5d2e98ec1d6705624
;;; Fact-ids: 
(assert (! 
;; def=MonotonicArray.fsti(288,47-288,50); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_72e106d8461f33b5d2e98ec1d6705624 @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_72e106d8461f33b5d2e98ec1d6705624 @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_72e106d8461f33b5d2e98ec1d6705624))

:named haseqTm_refine_72e106d8461f33b5d2e98ec1d6705624))

; Encoding query formula : forall (a: Type) (n: Prims.nat) (f: MonotonicArray.array a n) (pos: Prims.nat)
;   (next: Prims.nat{pos + next <= n}) (h: FStar.Monotonic.Heap.heap) (_: Prims.squash Prims.l_True)
;   (any_result: Prims.nat) (_: _: Prims.unit{pos == any_result}) (any_result: MonotonicArray.t a pos)
;   (_: _: Prims.unit{MonotonicArray.prefix f pos == any_result}) (return_val: i: Prims.nat{i <= n})
;   (_: _: Prims.unit{return_val == pos + next}) (any_result: MonotonicArray.t a (pos + next))
;   (_: _: Prims.unit{MonotonicArray.prefix f (pos + next) == any_result})
;   (_: Protocol.fully_initialized_in (MonotonicArray.prefix f (pos + next)) h)
;   (any_result: FStar.Monotonic.Heap.heap) (_: _: Prims.unit{h == any_result})
;   (any_result: FStar.Seq.Base.seq a)
;   (_:
;   _: Prims.unit{MonotonicArray.as_initialized_seq (MonotonicArray.prefix f pos) h == any_result})
;   (return_val: Prims.nat) (_: _: Prims.unit{return_val == pos + next})
;   (any_result: FStar.Monotonic.Heap.heap) (_: _: Prims.unit{h == any_result})
;   (any_result: FStar.Seq.Base.seq a)
;   (_:
;   _:
;   Prims.unit
;     {MonotonicArray.as_initialized_seq (MonotonicArray.prefix f (pos + next)) h == any_result})
;   (return_val: Prims.nat) (_: _: Prims.unit{return_val == n - pos}) (any_result: Prims.nat)
;   (_: _: Prims.unit{pos == any_result}) (any_result: MonotonicArray.t a (n - pos))
;   (_: _: Prims.unit{MonotonicArray.suffix f pos == any_result}) (_: pos + next <= n).
;   (*  - Subtyping check failed
;   - Expected type
;       j:
;       Prims.nat
;         { j >= 0 /\ j <= n - pos /\
;           MonotonicArray.init_arr_in_heap_i_j (MonotonicArray.suffix f pos)
;             h
;             0
;             j }
;     got type next: Prims.nat{pos + next <= n}
; *)
;   next >= 0


; Context: While encoding a query
; While typechecking the top-level declaration `let append_filled`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term) (@x18 Term) (@x19 Term) (@x20 Term) (@x21 Term) (@x22 Term) (@x23 Term) (@x24 Term) (@x25 Term) (@x26 Term) (@x27 Term) (@x28 Term) (@x29 Term) (@x30 Term) (@x31 Term) (@x32 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.array @x0
@x1))
(HasType @x3
Prims.nat)
(HasType @x4
(Tm_refine_6f684e27d6af9965634108bcfe981953 @x3
@x1))
(HasType @x5
FStar.Monotonic.Heap.heap)
(HasType @x6
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasType @x7
Prims.nat)
(HasType @x8
(Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x3
@x7))
(HasType @x9
(MonotonicArray.t @x0
@x3))
(HasType @x10
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x9))
(HasType @x11
(Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x1))
(HasType @x12
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x11
@x3
@x4))
(HasType @x13
(MonotonicArray.t @x0
(Prims.op_Addition @x3
@x4)))
(HasType @x14
(Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x13))
(HasType @x15
(Protocol.fully_initialized_in @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5))
(HasType @x16
FStar.Monotonic.Heap.heap)
(HasType @x17
(Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x5
@x16))
(HasType @x18
(FStar.Seq.Base.seq @x0))
(HasType @x19
(Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x0
@x3
@x1
@x2
@x5
@x18))
(HasType @x20
Prims.nat)
(HasType @x21
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x20
@x3
@x4))
(HasType @x22
FStar.Monotonic.Heap.heap)
(HasType @x23
(Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x5
@x22))
(HasType @x24
(FStar.Seq.Base.seq @x0))
(HasType @x25
(Tm_refine_5b538e32ea54647378806226b7db57e5 @x0
@x3
@x4
@x1
@x2
@x5
@x24))
(HasType @x26
Prims.nat)
(HasType @x27
(Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa @x26
@x1
@x3))
(HasType @x28
Prims.nat)
(HasType @x29
(Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x3
@x28))
(HasType @x30
(MonotonicArray.t @x0
(Prims.op_Subtraction @x1
@x3)))
(HasType @x31
(Tm_refine_72e106d8461f33b5d2e98ec1d6705624 @x0
@x1
@x2
@x3
@x30))
(HasType @x32
(Prims.b2t (Prims.op_LessThanOrEqual (Prims.op_Addition @x3
@x4)
@x1))))

;; def=MonotonicArray.fsti(289,17-289,23); use=Protocol.fst(506,72-506,76)
(or label_1

;; def=MonotonicArray.fsti(289,17-289,23); use=Protocol.fst(508,5-508,7)
(>= (BoxInt_proj_0 @x4)
(BoxInt_proj_0 (BoxInt 0)))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 43572480)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Protocol.append_filled, 13)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Prims.nat, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_6f684e27d6af9965634108bcfe981953

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at Protocol.fst(508,5-508,7)

(declare-fun label_1 () Bool)

(declare-fun Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
Tm_type)
:named refinement_kinding_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,4-507,51); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasTypeFuel @u0
@x1
Prims.unit))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
:qid refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

:named refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

(declare-fun Tm_refine_3cafc7d2382648766aed8886c435c359 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_3cafc7d2382648766aed8886c435c359))

:named refinement_kinding_Tm_refine_3cafc7d2382648766aed8886c435c359))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.prefix @x2
@x3
@x4
@x5)
@x6)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_3cafc7d2382648766aed8886c435c359))

:named refinement_interpretation_Tm_refine_3cafc7d2382648766aed8886c435c359))
;;;;;;;;;;;;;;;;haseq for Tm_refine_3cafc7d2382648766aed8886c435c359
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_3cafc7d2382648766aed8886c435c359))

:named haseqTm_refine_3cafc7d2382648766aed8886c435c359))

(declare-fun Tm_refine_53c655668b35152fbbd9a7948c262451 (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_53c655668b35152fbbd9a7948c262451))

:named refinement_kinding_Tm_refine_53c655668b35152fbbd9a7948c262451))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(= @x2
(Prims.op_Addition @x3
@x4))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_53c655668b35152fbbd9a7948c262451))

:named refinement_interpretation_Tm_refine_53c655668b35152fbbd9a7948c262451))
;;;;;;;;;;;;;;;;haseq for Tm_refine_53c655668b35152fbbd9a7948c262451
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2))))
:qid haseqTm_refine_53c655668b35152fbbd9a7948c262451))

:named haseqTm_refine_53c655668b35152fbbd9a7948c262451))
(declare-fun Tm_refine_b84a8eccf6ed33ae21304640be46a7aa (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type)
 

:pattern ((HasType (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
:qid refinement_kinding_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))

:named refinement_kinding_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x2
@x3
@x4
@x5
@x6
@x7))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.prefix @x2
@x3
@x4
(Prims.op_Addition @x5
@x6))
@x7)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x2
@x3
@x4
@x5
@x6
@x7)))
:qid refinement_interpretation_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))

:named refinement_interpretation_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b84a8eccf6ed33ae21304640be46a7aa
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5))))
:qid haseqTm_refine_b84a8eccf6ed33ae21304640be46a7aa))

:named haseqTm_refine_b84a8eccf6ed33ae21304640be46a7aa))

(declare-fun Tm_refine_6698ee9d28e3f1665dea22d61a777309 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(504,15-504,43); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type)
 

:pattern ((HasType (Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
:qid refinement_kinding_Tm_refine_6698ee9d28e3f1665dea22d61a777309))

:named refinement_kinding_Tm_refine_6698ee9d28e3f1665dea22d61a777309))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(504,15-504,43); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x2
@x3
@x4
@x5
@x6
@x7))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Protocol.fst(504,15-504,43); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.as_initialized_seq @x2
@x3
(MonotonicArray.prefix @x2
@x4
@x5
@x3)
@x6)
@x7)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x2
@x3
@x4
@x5
@x6
@x7)))
:qid refinement_interpretation_Tm_refine_6698ee9d28e3f1665dea22d61a777309))

:named refinement_interpretation_Tm_refine_6698ee9d28e3f1665dea22d61a777309))
;;;;;;;;;;;;;;;;haseq for Tm_refine_6698ee9d28e3f1665dea22d61a777309
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(504,15-504,43); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x0
@x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x0
@x1
@x2
@x3
@x4
@x5))))
:qid haseqTm_refine_6698ee9d28e3f1665dea22d61a777309))

:named haseqTm_refine_6698ee9d28e3f1665dea22d61a777309))


(declare-fun Tm_refine_5b538e32ea54647378806226b7db57e5 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(505,15-505,43); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (HasType (Tm_refine_5b538e32ea54647378806226b7db57e5 @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type)
 

:pattern ((HasType (Tm_refine_5b538e32ea54647378806226b7db57e5 @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type))
:qid refinement_kinding_Tm_refine_5b538e32ea54647378806226b7db57e5))

:named refinement_kinding_Tm_refine_5b538e32ea54647378806226b7db57e5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(505,15-505,43); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_5b538e32ea54647378806226b7db57e5 @x2
@x3
@x4
@x5
@x6
@x7
@x8))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Protocol.fst(505,15-505,43); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.as_initialized_seq @x2
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x2
@x5
@x6
(Prims.op_Addition @x3
@x4))
@x7)
@x8)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_5b538e32ea54647378806226b7db57e5 @x2
@x3
@x4
@x5
@x6
@x7
@x8)))
:qid refinement_interpretation_Tm_refine_5b538e32ea54647378806226b7db57e5))

:named refinement_interpretation_Tm_refine_5b538e32ea54647378806226b7db57e5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_5b538e32ea54647378806226b7db57e5
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(505,15-505,43); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_5b538e32ea54647378806226b7db57e5 @x0
@x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_5b538e32ea54647378806226b7db57e5 @x0
@x1
@x2
@x3
@x4
@x5
@x6))))
:qid haseqTm_refine_5b538e32ea54647378806226b7db57e5))

:named haseqTm_refine_5b538e32ea54647378806226b7db57e5))
(declare-fun Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa))

:named refinement_kinding_Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(= @x2
(Prims.op_Subtraction @x3
@x4))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa))

:named refinement_interpretation_Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa))
;;;;;;;;;;;;;;;;haseq for Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa @x0
@x1
@x2))))
:qid haseqTm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa))

:named haseqTm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa))

(declare-fun Tm_refine_72e106d8461f33b5d2e98ec1d6705624 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=MonotonicArray.fsti(288,47-288,50); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_72e106d8461f33b5d2e98ec1d6705624 @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_72e106d8461f33b5d2e98ec1d6705624 @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_72e106d8461f33b5d2e98ec1d6705624))

:named refinement_kinding_Tm_refine_72e106d8461f33b5d2e98ec1d6705624))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=MonotonicArray.fsti(288,47-288,50); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_72e106d8461f33b5d2e98ec1d6705624 @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=MonotonicArray.fsti(288,47-288,50); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.suffix @x2
@x3
@x4
@x5)
@x6)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_72e106d8461f33b5d2e98ec1d6705624 @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_72e106d8461f33b5d2e98ec1d6705624))

:named refinement_interpretation_Tm_refine_72e106d8461f33b5d2e98ec1d6705624))
;;;;;;;;;;;;;;;;haseq for Tm_refine_72e106d8461f33b5d2e98ec1d6705624
;;; Fact-ids: 
(assert (! 
;; def=MonotonicArray.fsti(288,47-288,50); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_72e106d8461f33b5d2e98ec1d6705624 @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_72e106d8461f33b5d2e98ec1d6705624 @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_72e106d8461f33b5d2e98ec1d6705624))

:named haseqTm_refine_72e106d8461f33b5d2e98ec1d6705624))

; Encoding query formula : forall (a: Type) (n: Prims.nat) (f: MonotonicArray.array a n) (pos: Prims.nat)
;   (next: Prims.nat{pos + next <= n}) (h: FStar.Monotonic.Heap.heap) (_: Prims.squash Prims.l_True)
;   (any_result: Prims.nat) (_: _: Prims.unit{pos == any_result}) (any_result: MonotonicArray.t a pos)
;   (_: _: Prims.unit{MonotonicArray.prefix f pos == any_result}) (return_val: i: Prims.nat{i <= n})
;   (_: _: Prims.unit{return_val == pos + next}) (any_result: MonotonicArray.t a (pos + next))
;   (_: _: Prims.unit{MonotonicArray.prefix f (pos + next) == any_result})
;   (_: Protocol.fully_initialized_in (MonotonicArray.prefix f (pos + next)) h)
;   (any_result: FStar.Monotonic.Heap.heap) (_: _: Prims.unit{h == any_result})
;   (any_result: FStar.Seq.Base.seq a)
;   (_:
;   _: Prims.unit{MonotonicArray.as_initialized_seq (MonotonicArray.prefix f pos) h == any_result})
;   (return_val: Prims.nat) (_: _: Prims.unit{return_val == pos + next})
;   (any_result: FStar.Monotonic.Heap.heap) (_: _: Prims.unit{h == any_result})
;   (any_result: FStar.Seq.Base.seq a)
;   (_:
;   _:
;   Prims.unit
;     {MonotonicArray.as_initialized_seq (MonotonicArray.prefix f (pos + next)) h == any_result})
;   (return_val: Prims.nat) (_: _: Prims.unit{return_val == n - pos}) (any_result: Prims.nat)
;   (_: _: Prims.unit{pos == any_result}) (any_result: MonotonicArray.t a (n - pos))
;   (_: _: Prims.unit{MonotonicArray.suffix f pos == any_result}) (_: pos + next <= n).
;   (*  - Subtyping check failed
;   - Expected type
;       j:
;       Prims.nat
;         { j >= 0 /\ j <= n - pos /\
;           MonotonicArray.init_arr_in_heap_i_j (MonotonicArray.suffix f pos)
;             h
;             0
;             j }
;     got type next: Prims.nat{pos + next <= n}
; *)
;   next <= n - pos


; Context: While encoding a query
; While typechecking the top-level declaration `let append_filled`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term) (@x18 Term) (@x19 Term) (@x20 Term) (@x21 Term) (@x22 Term) (@x23 Term) (@x24 Term) (@x25 Term) (@x26 Term) (@x27 Term) (@x28 Term) (@x29 Term) (@x30 Term) (@x31 Term) (@x32 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.array @x0
@x1))
(HasType @x3
Prims.nat)
(HasType @x4
(Tm_refine_6f684e27d6af9965634108bcfe981953 @x3
@x1))
(HasType @x5
FStar.Monotonic.Heap.heap)
(HasType @x6
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasType @x7
Prims.nat)
(HasType @x8
(Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x3
@x7))
(HasType @x9
(MonotonicArray.t @x0
@x3))
(HasType @x10
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x9))
(HasType @x11
(Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x1))
(HasType @x12
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x11
@x3
@x4))
(HasType @x13
(MonotonicArray.t @x0
(Prims.op_Addition @x3
@x4)))
(HasType @x14
(Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x13))
(HasType @x15
(Protocol.fully_initialized_in @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5))
(HasType @x16
FStar.Monotonic.Heap.heap)
(HasType @x17
(Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x5
@x16))
(HasType @x18
(FStar.Seq.Base.seq @x0))
(HasType @x19
(Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x0
@x3
@x1
@x2
@x5
@x18))
(HasType @x20
Prims.nat)
(HasType @x21
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x20
@x3
@x4))
(HasType @x22
FStar.Monotonic.Heap.heap)
(HasType @x23
(Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x5
@x22))
(HasType @x24
(FStar.Seq.Base.seq @x0))
(HasType @x25
(Tm_refine_5b538e32ea54647378806226b7db57e5 @x0
@x3
@x4
@x1
@x2
@x5
@x24))
(HasType @x26
Prims.nat)
(HasType @x27
(Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa @x26
@x1
@x3))
(HasType @x28
Prims.nat)
(HasType @x29
(Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x3
@x28))
(HasType @x30
(MonotonicArray.t @x0
(Prims.op_Subtraction @x1
@x3)))
(HasType @x31
(Tm_refine_72e106d8461f33b5d2e98ec1d6705624 @x0
@x1
@x2
@x3
@x30))
(HasType @x32
(Prims.b2t (Prims.op_LessThanOrEqual (Prims.op_Addition @x3
@x4)
@x1))))

;; def=MonotonicArray.fsti(289,27-289,33); use=Protocol.fst(506,72-506,76)
(or label_1

;; def=MonotonicArray.fsti(289,27-289,33); use=Protocol.fst(508,5-508,7)
(<= (BoxInt_proj_0 @x4)
(BoxInt_proj_0 (Prims.op_Subtraction @x1
@x3)))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 43572480)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Protocol.append_filled, 14)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, primitive_Prims.op_Addition, primitive_Prims.op_Subtraction, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_6f684e27d6af9965634108bcfe981953

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at Protocol.fst(508,5-508,7)

(declare-fun label_1 () Bool)

(declare-fun Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
Tm_type)
:named refinement_kinding_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,4-507,51); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasTypeFuel @u0
@x1
Prims.unit))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
:qid refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

:named refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

(declare-fun Tm_refine_3cafc7d2382648766aed8886c435c359 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_3cafc7d2382648766aed8886c435c359))

:named refinement_kinding_Tm_refine_3cafc7d2382648766aed8886c435c359))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.prefix @x2
@x3
@x4
@x5)
@x6)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_3cafc7d2382648766aed8886c435c359))

:named refinement_interpretation_Tm_refine_3cafc7d2382648766aed8886c435c359))
;;;;;;;;;;;;;;;;haseq for Tm_refine_3cafc7d2382648766aed8886c435c359
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(501,15-501,32); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_3cafc7d2382648766aed8886c435c359))

:named haseqTm_refine_3cafc7d2382648766aed8886c435c359))

(declare-fun Tm_refine_53c655668b35152fbbd9a7948c262451 (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_53c655668b35152fbbd9a7948c262451))

:named refinement_kinding_Tm_refine_53c655668b35152fbbd9a7948c262451))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(= @x2
(Prims.op_Addition @x3
@x4))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_53c655668b35152fbbd9a7948c262451))

:named refinement_interpretation_Tm_refine_53c655668b35152fbbd9a7948c262451))
;;;;;;;;;;;;;;;;haseq for Tm_refine_53c655668b35152fbbd9a7948c262451
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_53c655668b35152fbbd9a7948c262451 @x0
@x1
@x2))))
:qid haseqTm_refine_53c655668b35152fbbd9a7948c262451))

:named haseqTm_refine_53c655668b35152fbbd9a7948c262451))
(declare-fun Tm_refine_b84a8eccf6ed33ae21304640be46a7aa (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type)
 

:pattern ((HasType (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
:qid refinement_kinding_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))

:named refinement_kinding_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x2
@x3
@x4
@x5
@x6
@x7))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.prefix @x2
@x3
@x4
(Prims.op_Addition @x5
@x6))
@x7)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x2
@x3
@x4
@x5
@x6
@x7)))
:qid refinement_interpretation_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))

:named refinement_interpretation_Tm_refine_b84a8eccf6ed33ae21304640be46a7aa))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b84a8eccf6ed33ae21304640be46a7aa
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(502,15-502,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x5))))
:qid haseqTm_refine_b84a8eccf6ed33ae21304640be46a7aa))

:named haseqTm_refine_b84a8eccf6ed33ae21304640be46a7aa))

(declare-fun Tm_refine_6698ee9d28e3f1665dea22d61a777309 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(504,15-504,43); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type)
 

:pattern ((HasType (Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
:qid refinement_kinding_Tm_refine_6698ee9d28e3f1665dea22d61a777309))

:named refinement_kinding_Tm_refine_6698ee9d28e3f1665dea22d61a777309))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(504,15-504,43); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x2
@x3
@x4
@x5
@x6
@x7))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Protocol.fst(504,15-504,43); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.as_initialized_seq @x2
@x3
(MonotonicArray.prefix @x2
@x4
@x5
@x3)
@x6)
@x7)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x2
@x3
@x4
@x5
@x6
@x7)))
:qid refinement_interpretation_Tm_refine_6698ee9d28e3f1665dea22d61a777309))

:named refinement_interpretation_Tm_refine_6698ee9d28e3f1665dea22d61a777309))
;;;;;;;;;;;;;;;;haseq for Tm_refine_6698ee9d28e3f1665dea22d61a777309
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(504,15-504,43); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x0
@x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x0
@x1
@x2
@x3
@x4
@x5))))
:qid haseqTm_refine_6698ee9d28e3f1665dea22d61a777309))

:named haseqTm_refine_6698ee9d28e3f1665dea22d61a777309))


(declare-fun Tm_refine_5b538e32ea54647378806226b7db57e5 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(505,15-505,43); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (HasType (Tm_refine_5b538e32ea54647378806226b7db57e5 @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type)
 

:pattern ((HasType (Tm_refine_5b538e32ea54647378806226b7db57e5 @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type))
:qid refinement_kinding_Tm_refine_5b538e32ea54647378806226b7db57e5))

:named refinement_kinding_Tm_refine_5b538e32ea54647378806226b7db57e5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(505,15-505,43); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_5b538e32ea54647378806226b7db57e5 @x2
@x3
@x4
@x5
@x6
@x7
@x8))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Protocol.fst(505,15-505,43); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.as_initialized_seq @x2
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x2
@x5
@x6
(Prims.op_Addition @x3
@x4))
@x7)
@x8)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_5b538e32ea54647378806226b7db57e5 @x2
@x3
@x4
@x5
@x6
@x7
@x8)))
:qid refinement_interpretation_Tm_refine_5b538e32ea54647378806226b7db57e5))

:named refinement_interpretation_Tm_refine_5b538e32ea54647378806226b7db57e5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_5b538e32ea54647378806226b7db57e5
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(505,15-505,43); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_5b538e32ea54647378806226b7db57e5 @x0
@x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_5b538e32ea54647378806226b7db57e5 @x0
@x1
@x2
@x3
@x4
@x5
@x6))))
:qid haseqTm_refine_5b538e32ea54647378806226b7db57e5))

:named haseqTm_refine_5b538e32ea54647378806226b7db57e5))
(declare-fun Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa))

:named refinement_kinding_Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(= @x2
(Prims.op_Subtraction @x3
@x4))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa))

:named refinement_interpretation_Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa))
;;;;;;;;;;;;;;;;haseq for Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,26-356,41); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa @x0
@x1
@x2))))
:qid haseqTm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa))

:named haseqTm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa))

(declare-fun Tm_refine_72e106d8461f33b5d2e98ec1d6705624 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=MonotonicArray.fsti(288,47-288,50); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_72e106d8461f33b5d2e98ec1d6705624 @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_72e106d8461f33b5d2e98ec1d6705624 @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_72e106d8461f33b5d2e98ec1d6705624))

:named refinement_kinding_Tm_refine_72e106d8461f33b5d2e98ec1d6705624))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=MonotonicArray.fsti(288,47-288,50); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_72e106d8461f33b5d2e98ec1d6705624 @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=MonotonicArray.fsti(288,47-288,50); use=Protocol.fst(508,5-508,7)
(= (MonotonicArray.suffix @x2
@x3
@x4
@x5)
@x6)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_72e106d8461f33b5d2e98ec1d6705624 @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_72e106d8461f33b5d2e98ec1d6705624))

:named refinement_interpretation_Tm_refine_72e106d8461f33b5d2e98ec1d6705624))
;;;;;;;;;;;;;;;;haseq for Tm_refine_72e106d8461f33b5d2e98ec1d6705624
;;; Fact-ids: 
(assert (! 
;; def=MonotonicArray.fsti(288,47-288,50); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_72e106d8461f33b5d2e98ec1d6705624 @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_72e106d8461f33b5d2e98ec1d6705624 @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_72e106d8461f33b5d2e98ec1d6705624))

:named haseqTm_refine_72e106d8461f33b5d2e98ec1d6705624))

; Encoding query formula : forall (a: Type) (n: Prims.nat) (f: MonotonicArray.array a n) (pos: Prims.nat)
;   (next: Prims.nat{pos + next <= n}) (h: FStar.Monotonic.Heap.heap) (_: Prims.squash Prims.l_True)
;   (any_result: Prims.nat) (_: _: Prims.unit{pos == any_result}) (any_result: MonotonicArray.t a pos)
;   (_: _: Prims.unit{MonotonicArray.prefix f pos == any_result}) (return_val: i: Prims.nat{i <= n})
;   (_: _: Prims.unit{return_val == pos + next}) (any_result: MonotonicArray.t a (pos + next))
;   (_: _: Prims.unit{MonotonicArray.prefix f (pos + next) == any_result})
;   (_: Protocol.fully_initialized_in (MonotonicArray.prefix f (pos + next)) h)
;   (any_result: FStar.Monotonic.Heap.heap) (_: _: Prims.unit{h == any_result})
;   (any_result: FStar.Seq.Base.seq a)
;   (_:
;   _: Prims.unit{MonotonicArray.as_initialized_seq (MonotonicArray.prefix f pos) h == any_result})
;   (return_val: Prims.nat) (_: _: Prims.unit{return_val == pos + next})
;   (any_result: FStar.Monotonic.Heap.heap) (_: _: Prims.unit{h == any_result})
;   (any_result: FStar.Seq.Base.seq a)
;   (_:
;   _:
;   Prims.unit
;     {MonotonicArray.as_initialized_seq (MonotonicArray.prefix f (pos + next)) h == any_result})
;   (return_val: Prims.nat) (_: _: Prims.unit{return_val == n - pos}) (any_result: Prims.nat)
;   (_: _: Prims.unit{pos == any_result}) (any_result: MonotonicArray.t a (n - pos))
;   (_: _: Prims.unit{MonotonicArray.suffix f pos == any_result}) (_: pos + next <= n).
;   Prims.auto_squash (MonotonicArray.init_arr_in_heap_i_j (MonotonicArray.suffix f pos) h 0 next)


; Context: While encoding a query
; While typechecking the top-level declaration `let append_filled`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term) (@x18 Term) (@x19 Term) (@x20 Term) (@x21 Term) (@x22 Term) (@x23 Term) (@x24 Term) (@x25 Term) (@x26 Term) (@x27 Term) (@x28 Term) (@x29 Term) (@x30 Term) (@x31 Term) (@x32 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.array @x0
@x1))
(HasType @x3
Prims.nat)
(HasType @x4
(Tm_refine_6f684e27d6af9965634108bcfe981953 @x3
@x1))
(HasType @x5
FStar.Monotonic.Heap.heap)
(HasType @x6
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasType @x7
Prims.nat)
(HasType @x8
(Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x3
@x7))
(HasType @x9
(MonotonicArray.t @x0
@x3))
(HasType @x10
(Tm_refine_3cafc7d2382648766aed8886c435c359 @x0
@x1
@x2
@x3
@x9))
(HasType @x11
(Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x1))
(HasType @x12
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x11
@x3
@x4))
(HasType @x13
(MonotonicArray.t @x0
(Prims.op_Addition @x3
@x4)))
(HasType @x14
(Tm_refine_b84a8eccf6ed33ae21304640be46a7aa @x0
@x1
@x2
@x3
@x4
@x13))
(HasType @x15
(Protocol.fully_initialized_in @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5))
(HasType @x16
FStar.Monotonic.Heap.heap)
(HasType @x17
(Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x5
@x16))
(HasType @x18
(FStar.Seq.Base.seq @x0))
(HasType @x19
(Tm_refine_6698ee9d28e3f1665dea22d61a777309 @x0
@x3
@x1
@x2
@x5
@x18))
(HasType @x20
Prims.nat)
(HasType @x21
(Tm_refine_53c655668b35152fbbd9a7948c262451 @x20
@x3
@x4))
(HasType @x22
FStar.Monotonic.Heap.heap)
(HasType @x23
(Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x5
@x22))
(HasType @x24
(FStar.Seq.Base.seq @x0))
(HasType @x25
(Tm_refine_5b538e32ea54647378806226b7db57e5 @x0
@x3
@x4
@x1
@x2
@x5
@x24))
(HasType @x26
Prims.nat)
(HasType @x27
(Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa @x26
@x1
@x3))
(HasType @x28
Prims.nat)
(HasType @x29
(Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x3
@x28))
(HasType @x30
(MonotonicArray.t @x0
(Prims.op_Subtraction @x1
@x3)))
(HasType @x31
(Tm_refine_72e106d8461f33b5d2e98ec1d6705624 @x0
@x1
@x2
@x3
@x30))
(HasType @x32
(Prims.b2t (Prims.op_LessThanOrEqual (Prims.op_Addition @x3
@x4)
@x1))))

;; def=MonotonicArray.fsti(289,37-289,67); use=Protocol.fst(506,72-506,76)
(or label_1

;; def=MonotonicArray.fsti(289,37-289,67); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=MonotonicArray.fsti(289,37-289,67); use=Protocol.fst(508,5-508,7)
(MonotonicArray.init_arr_in_heap_i_j @x0
(Prims.op_Subtraction @x1
@x3)
(MonotonicArray.suffix @x0
@x1
@x2
@x3)
@x5
(BoxInt 0)
@x4)
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 43572480)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Protocol.append_filled, 15)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, b2t_def, disc_equation_FStar.Pervasives.Native.None, disc_equation_FStar.Pervasives.Native.Some, equation_ArrayUtils.init_at_seq, equation_MonotonicArray.array, equation_MonotonicArray.init_arr_in_heap_i_j, equation_MonotonicArray.prefix, equation_MonotonicArray.suffix, equation_Prims.nat, equation_Protocol.fully_initialized_in, int_inversion, int_typing, kinding_FStar.Pervasives.Native.option@tok, lemma_FStar.Pervasives.invertOption, lemma_FStar.Seq.Base.lemma_index_slice, lemma_MonotonicArray.lemma_as_seq_length, lemma_MonotonicArray.lemma_sub_is_slice, primitive_Prims.op_Addition, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_0dee8cb03258a67c2f7ec66427696212, refinement_interpretation_Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8, refinement_interpretation_Tm_refine_53c655668b35152fbbd9a7948c262451, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_6f684e27d6af9965634108bcfe981953, refinement_interpretation_Tm_refine_72e106d8461f33b5d2e98ec1d6705624, refinement_interpretation_Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d, refinement_interpretation_Tm_refine_cb14a5a5bb1f8de85e6ede4ec01b49aa, refinement_interpretation_Tm_refine_d3d07693cd71377864ef84dc97d10ec1, refinement_interpretation_Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55, refinement_interpretation_Tm_refine_f984cba283a0017499e468d307a8fd1d, typing_FStar.Seq.Base.index, typing_MonotonicArray.as_seq

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at Protocol.fst(508,5-508,7)

(declare-fun label_1 () Bool)

(declare-fun Tm_refine_51806de606a58bfdba9dd3f6fb9297ea (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,36-441,97); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (HasType (Tm_refine_51806de606a58bfdba9dd3f6fb9297ea @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type)
 

:pattern ((HasType (Tm_refine_51806de606a58bfdba9dd3f6fb9297ea @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type))
:qid refinement_kinding_Tm_refine_51806de606a58bfdba9dd3f6fb9297ea))

:named refinement_kinding_Tm_refine_51806de606a58bfdba9dd3f6fb9297ea))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,36-441,97); use=Protocol.fst(508,5-508,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_51806de606a58bfdba9dd3f6fb9297ea @x2
@x3
@x4
@x5
@x6
@x7
@x8))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(441,36-441,97); use=Protocol.fst(508,5-508,7)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.unit)

;; def=Protocol.fst(503,11-507,50); use=Protocol.fst(508,5-508,7)
(implies 
;; def=Protocol.fst(503,11-503,38); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=Protocol.fst(503,11-503,38); use=Protocol.fst(508,5-508,7)
(Protocol.fully_initialized_in @x2
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x2
@x5
@x6
(Prims.op_Addition @x3
@x4))
@x7)
)


;; def=Protocol.fst(507,11-507,49); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=Protocol.fst(507,11-507,49); use=Protocol.fst(508,5-508,7)
(FStar.Seq.Base.equal @x2
(MonotonicArray.as_initialized_seq @x2
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x2
@x5
@x6
(Prims.op_Addition @x3
@x4))
@x7)
(FStar.Seq.Base.append @x2
(MonotonicArray.as_initialized_seq @x2
@x3
(MonotonicArray.prefix @x2
@x5
@x6
@x3)
@x7)
(MonotonicArray.as_initialized_subseq @x2
(Prims.op_Subtraction @x5
@x3)
(MonotonicArray.suffix @x2
@x5
@x6
@x3)
@x7
(BoxInt 0)
@x4)))
)
)
)

;; def=Prims.fst(441,83-441,96); use=Protocol.fst(508,5-508,7)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Protocol.fst(508,5-508,7)
(ApplyTT @x8
@x9)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_51806de606a58bfdba9dd3f6fb9297ea.1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_51806de606a58bfdba9dd3f6fb9297ea @x2
@x3
@x4
@x5
@x6
@x7
@x8)))
:qid refinement_interpretation_Tm_refine_51806de606a58bfdba9dd3f6fb9297ea))

:named refinement_interpretation_Tm_refine_51806de606a58bfdba9dd3f6fb9297ea))
;;;;;;;;;;;;;;;;haseq for Tm_refine_51806de606a58bfdba9dd3f6fb9297ea
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,36-441,97); use=Protocol.fst(508,5-508,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_51806de606a58bfdba9dd3f6fb9297ea @x0
@x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_51806de606a58bfdba9dd3f6fb9297ea @x0
@x1
@x2
@x3
@x4
@x5
@x6))))
:qid haseqTm_refine_51806de606a58bfdba9dd3f6fb9297ea))

:named haseqTm_refine_51806de606a58bfdba9dd3f6fb9297ea))

; Encoding query formula : forall (a: Type)
;   (n: Prims.nat)
;   (f: MonotonicArray.array a n)
;   (pos: Prims.nat)
;   (next: Prims.nat{pos + next <= n})
;   (h: FStar.Monotonic.Heap.heap)
;   (p: Prims.pure_post Prims.unit)
;   (_:
;   _:
;   Prims.unit
;     { forall (pure_result: Prims.unit).
;         (Protocol.fully_initialized_in (MonotonicArray.prefix f (pos + next)) h ==>
;           FStar.Seq.Base.equal (MonotonicArray.as_initialized_seq (MonotonicArray.prefix f
;                     (pos + next))
;                 h)
;             (FStar.Seq.Base.append (MonotonicArray.as_initialized_seq (MonotonicArray.prefix f pos)
;                     h)
;                 (MonotonicArray.as_initialized_subseq (MonotonicArray.suffix f pos) h 0 next))) ==>
;         p pure_result })
;   (any_result: Prims.unit).
;   Prims.auto_squash (p any_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let append_filled`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.array @x0
@x1))
(HasType @x3
Prims.nat)
(HasType @x4
(Tm_refine_6f684e27d6af9965634108bcfe981953 @x3
@x1))
(HasType @x5
FStar.Monotonic.Heap.heap)
(HasType @x6
(Prims.pure_post Prims.unit))
(HasType @x7
(Tm_refine_51806de606a58bfdba9dd3f6fb9297ea @x0
@x3
@x4
@x1
@x2
@x5
@x6))
(HasType @x8
Prims.unit))

;; def=Prims.fst(451,90-451,102); use=Protocol.fst(508,5-508,7)
(or label_1

;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(ApplyTT @x6
@x8)
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 43572480)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Protocol.append_filled, 16)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, b2t_def, bool_inversion, constructor_distinct_FStar.Pervasives.Native.Some, disc_equation_FStar.Pervasives.Native.None, disc_equation_FStar.Pervasives.Native.Some, equation_ArrayUtils.all_some, equation_ArrayUtils.init_at_seq, equation_ArrayUtils.some_equivalent_seqs, equation_MonotonicArray.array, equation_MonotonicArray.as_initialized_seq, equation_MonotonicArray.as_initialized_subseq, equation_MonotonicArray.init_arr_in_heap, equation_MonotonicArray.init_arr_in_heap_i_j, equation_MonotonicArray.prefix, equation_MonotonicArray.suffix, equation_Prims.nat, equation_Protocol.fully_initialized_in, int_inversion, int_typing, kinding_FStar.Pervasives.Native.option@tok, lemma_ArrayUtils.lemma_get_some_equivalent_append, lemma_ArrayUtils.lemma_get_some_equivalent_length, lemma_FStar.Pervasives.invertOption, lemma_FStar.Seq.Base.lemma_eq_intro, lemma_FStar.Seq.Base.lemma_index_app1, lemma_FStar.Seq.Base.lemma_index_app2, lemma_FStar.Seq.Base.lemma_index_slice, lemma_FStar.Seq.Base.lemma_len_append, lemma_FStar.Seq.Base.lemma_len_slice, lemma_FStar.Seq.Properties.slice_slice, lemma_MonotonicArray.lemma_as_seq_length, lemma_MonotonicArray.lemma_sub_is_slice, primitive_Prims.op_Addition, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Some_a, projection_inverse_FStar.Pervasives.Native.Some_v, refinement_interpretation_Tm_refine_1ba8fd8bb363097813064c67740b2de5, refinement_interpretation_Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8, refinement_interpretation_Tm_refine_4183060ba5404f285780b6cf19647e32, refinement_interpretation_Tm_refine_51806de606a58bfdba9dd3f6fb9297ea, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_6f684e27d6af9965634108bcfe981953, refinement_interpretation_Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d, refinement_interpretation_Tm_refine_81407705a0828c2c1b1976675443f647, refinement_interpretation_Tm_refine_a2bea900bf9c6309aac9131f4b0fc594, refinement_interpretation_Tm_refine_ac201cf927190d39c033967b63cb957b, refinement_interpretation_Tm_refine_d3d07693cd71377864ef84dc97d10ec1, refinement_interpretation_Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55, refinement_interpretation_Tm_refine_e50addb6c1bbd8f85fb54bf03b146e15, refinement_interpretation_Tm_refine_f984cba283a0017499e468d307a8fd1d, typing_ArrayUtils.get_some_equivalent, typing_FStar.Pervasives.Native.uu___is_None, typing_FStar.Seq.Base.append, typing_FStar.Seq.Base.index, typing_FStar.Seq.Base.length, typing_FStar.Seq.Base.slice, typing_MonotonicArray.as_initialized_seq, typing_MonotonicArray.as_initialized_subseq, typing_MonotonicArray.as_seq, typing_MonotonicArray.prefix, typing_MonotonicArray.suffix, unit_inversion, unit_typing

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let append_filled


; <Start encoding let append_filled>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Protocol.append_filled (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Protocol.append_filled@tok () Term)

; </end encoding let append_filled>


; encoding sigelt #pop-options


; <Skipped #pop-options/>

;;; Fact-ids: Name Prims.op_LessThan; Namespace Prims
(assert (! 
;; def=Prims.fst(582,4-582,15); use=Prims.fst(582,4-582,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_LessThan @x0
@x1)
(BoxBool (< (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_LessThan @x0
@x1))
:qid primitive_Prims.op_LessThan))

:named primitive_Prims.op_LessThan))
(push) ;; push{2

; Starting query at Protocol.fst(517,3-524,36)

(declare-fun label_46 () Bool)
(declare-fun label_45 () Bool)
(declare-fun label_44 () Bool)
(declare-fun label_43 () Bool)
(declare-fun label_42 () Bool)
(declare-fun label_41 () Bool)
(declare-fun label_40 () Bool)
(declare-fun label_39 () Bool)
(declare-fun label_38 () Bool)
(declare-fun label_37 () Bool)
(declare-fun label_36 () Bool)
(declare-fun label_35 () Bool)
(declare-fun label_34 () Bool)
(declare-fun label_33 () Bool)
(declare-fun label_32 () Bool)
(declare-fun label_31 () Bool)
(declare-fun label_30 () Bool)
(declare-fun label_29 () Bool)
(declare-fun label_28 () Bool)
(declare-fun label_27 () Bool)
(declare-fun label_26 () Bool)
(declare-fun label_25 () Bool)
(declare-fun label_24 () Bool)
(declare-fun label_23 () Bool)
(declare-fun label_22 () Bool)
(declare-fun label_21 () Bool)
(declare-fun label_20 () Bool)
(declare-fun label_19 () Bool)
(declare-fun label_18 () Bool)
(declare-fun label_17 () Bool)
(declare-fun label_16 () Bool)
(declare-fun label_15 () Bool)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)



(declare-fun Tm_refine_80014152d823556bb66826435d89a313 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(514,21-515,52); use=Protocol.fst(517,3-524,36)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_refine_80014152d823556bb66826435d89a313 @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type)
 

:pattern ((HasType (Tm_refine_80014152d823556bb66826435d89a313 @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
:qid refinement_kinding_Tm_refine_80014152d823556bb66826435d89a313))

:named refinement_kinding_Tm_refine_80014152d823556bb66826435d89a313))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(514,21-515,52); use=Protocol.fst(517,3-524,36)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_80014152d823556bb66826435d89a313 @x2
@x3
@x4
@x5
@x6
@x7))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Protocol.fst(514,21-514,48); use=Protocol.fst(517,3-524,36)
(Valid 
;; def=Protocol.fst(514,21-514,48); use=Protocol.fst(517,3-524,36)
(Protocol.fully_initialized_in @x2
@x3
(MonotonicArray.prefix @x2
@x4
@x5
@x3)
@x6)
)


;; def=Protocol.fst(515,21-515,52); use=Protocol.fst(517,3-524,36)
(Valid 
;; def=Protocol.fst(515,21-515,52); use=Protocol.fst(517,3-524,36)
(Protocol.fully_initialized_in @x2
@x7
(MonotonicArray.prefix @x2
(Prims.op_Subtraction @x4
@x3)
(MonotonicArray.suffix @x2
@x4
@x5
@x3)
@x7)
@x6)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_80014152d823556bb66826435d89a313 @x2
@x3
@x4
@x5
@x6
@x7)))
:qid refinement_interpretation_Tm_refine_80014152d823556bb66826435d89a313))

:named refinement_interpretation_Tm_refine_80014152d823556bb66826435d89a313))
;;;;;;;;;;;;;;;;haseq for Tm_refine_80014152d823556bb66826435d89a313
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(514,21-515,52); use=Protocol.fst(517,3-524,36)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_80014152d823556bb66826435d89a313 @x0
@x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_80014152d823556bb66826435d89a313 @x0
@x1
@x2
@x3
@x4
@x5))))
:qid haseqTm_refine_80014152d823556bb66826435d89a313))

:named haseqTm_refine_80014152d823556bb66826435d89a313))



(declare-fun Tm_refine_9007fbc417d54bac8a69eb57c27f77cb (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(520,12-520,35); use=Protocol.fst(520,12-520,35)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_9007fbc417d54bac8a69eb57c27f77cb @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_9007fbc417d54bac8a69eb57c27f77cb @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_9007fbc417d54bac8a69eb57c27f77cb))

:named refinement_kinding_Tm_refine_9007fbc417d54bac8a69eb57c27f77cb))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(520,12-520,35); use=Protocol.fst(520,12-520,35)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_9007fbc417d54bac8a69eb57c27f77cb @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=Protocol.fst(520,19-520,33); use=Protocol.fst(520,19-520,33)
(< (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (Prims.op_Addition @x2
@x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_9007fbc417d54bac8a69eb57c27f77cb @x2
@x3)))
:qid refinement_interpretation_Tm_refine_9007fbc417d54bac8a69eb57c27f77cb))

:named refinement_interpretation_Tm_refine_9007fbc417d54bac8a69eb57c27f77cb))
;;;;;;;;;;;;;;;;haseq for Tm_refine_9007fbc417d54bac8a69eb57c27f77cb
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(520,12-520,35); use=Protocol.fst(520,12-520,35)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_9007fbc417d54bac8a69eb57c27f77cb @x0
@x1)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_9007fbc417d54bac8a69eb57c27f77cb @x0
@x1))))
:qid haseqTm_refine_9007fbc417d54bac8a69eb57c27f77cb))

:named haseqTm_refine_9007fbc417d54bac8a69eb57c27f77cb))
(declare-fun Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
Tm_type)
:named refinement_kinding_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(520,38-520,100); use=Protocol.fst(520,38-520,43)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasTypeFuel @u0
@x1
Prims.unit))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
:qid refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

:named refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))







(declare-fun Tm_refine_39e8d89b7b9a6a218b28cd8240c1c44d (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.Seq.Base.fsti(32,34-32,53); use=Protocol.fst(522,43-522,48)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_refine_39e8d89b7b9a6a218b28cd8240c1c44d @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type)
 

:pattern ((HasType (Tm_refine_39e8d89b7b9a6a218b28cd8240c1c44d @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
:qid refinement_kinding_Tm_refine_39e8d89b7b9a6a218b28cd8240c1c44d))

:named refinement_kinding_Tm_refine_39e8d89b7b9a6a218b28cd8240c1c44d))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Seq.Base.fsti(32,34-32,53); use=Protocol.fst(522,43-522,48)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_39e8d89b7b9a6a218b28cd8240c1c44d @x2
@x3
@x4
@x5
@x6
@x7))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=FStar.Seq.Base.fsti(32,40-32,52); use=Protocol.fst(522,43-522,48)
(< (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (FStar.Seq.Base.length (FStar.Pervasives.Native.option @x2)
(MonotonicArray.as_seq @x2
@x3
(MonotonicArray.prefix @x2
(Prims.op_Subtraction @x4
@x5)
(MonotonicArray.suffix @x2
@x4
@x6
@x5)
@x3)
@x7))))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_39e8d89b7b9a6a218b28cd8240c1c44d @x2
@x3
@x4
@x5
@x6
@x7)))
:qid refinement_interpretation_Tm_refine_39e8d89b7b9a6a218b28cd8240c1c44d))

:named refinement_interpretation_Tm_refine_39e8d89b7b9a6a218b28cd8240c1c44d))
;;;;;;;;;;;;;;;;haseq for Tm_refine_39e8d89b7b9a6a218b28cd8240c1c44d
;;; Fact-ids: 
(assert (! 
;; def=FStar.Seq.Base.fsti(32,34-32,53); use=Protocol.fst(522,43-522,48)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_39e8d89b7b9a6a218b28cd8240c1c44d @x0
@x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_39e8d89b7b9a6a218b28cd8240c1c44d @x0
@x1
@x2
@x3
@x4
@x5))))
:qid haseqTm_refine_39e8d89b7b9a6a218b28cd8240c1c44d))

:named haseqTm_refine_39e8d89b7b9a6a218b28cd8240c1c44d))

(declare-fun Tm_refine_9c0001f76d5f142f7103fdaf672a658a (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(520,38-520,100); use=Protocol.fst(517,3-524,36)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (HasType (Tm_refine_9c0001f76d5f142f7103fdaf672a658a @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type)
 

:pattern ((HasType (Tm_refine_9c0001f76d5f142f7103fdaf672a658a @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type))
:qid refinement_kinding_Tm_refine_9c0001f76d5f142f7103fdaf672a658a))

:named refinement_kinding_Tm_refine_9c0001f76d5f142f7103fdaf672a658a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(520,38-520,100); use=Protocol.fst(517,3-524,36)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_9c0001f76d5f142f7103fdaf672a658a @x2
@x3
@x4
@x5
@x6
@x7
@x8))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(635,71-635,97); use=Protocol.fst(517,3-524,36)
(not 
;; def=Prims.fst(441,29-441,97); use=Protocol.fst(517,3-524,36)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.unit)

;; def=Protocol.fst(520,44-520,100); use=Protocol.fst(517,3-524,36)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x2
(FStar.Seq.Base.index (FStar.Pervasives.Native.option @x2)
(MonotonicArray.as_seq @x2
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x2
@x5
@x6
(Prims.op_Addition @x3
@x4))
@x7)
@x8)))
)

;; def=Prims.fst(635,86-635,95); use=Protocol.fst(517,3-524,36)
(not 
;; def=Prims.fst(635,86-635,95); use=Protocol.fst(517,3-524,36)
(= @x9
@x1)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_9c0001f76d5f142f7103fdaf672a658a.1))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_9c0001f76d5f142f7103fdaf672a658a @x2
@x3
@x4
@x5
@x6
@x7
@x8)))
:qid refinement_interpretation_Tm_refine_9c0001f76d5f142f7103fdaf672a658a))

:named refinement_interpretation_Tm_refine_9c0001f76d5f142f7103fdaf672a658a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_9c0001f76d5f142f7103fdaf672a658a
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(520,38-520,100); use=Protocol.fst(517,3-524,36)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_9c0001f76d5f142f7103fdaf672a658a @x0
@x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_9c0001f76d5f142f7103fdaf672a658a @x0
@x1
@x2
@x3
@x4
@x5
@x6))))
:qid haseqTm_refine_9c0001f76d5f142f7103fdaf672a658a))

:named haseqTm_refine_9c0001f76d5f142f7103fdaf672a658a))
;;;;;;;;;;;;;;;;i: Prims.nat{i < pos + next}   -> FStar.Pervasives.Lemma     (ensures       Some? (FStar.Seq.Base.index (MonotonicArray.as_seq (MonotonicArray.prefix f (pos + next)) h) i         ))
(declare-fun Tm_arrow_10efcb77f376908058dac21bc6621f8b (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_10efcb77f376908058dac21bc6621f8b
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(520,12-520,100); use=Protocol.fst(517,3-524,36)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_arrow_10efcb77f376908058dac21bc6621f8b @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type)
 

:pattern ((HasType (Tm_arrow_10efcb77f376908058dac21bc6621f8b @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
:qid kinding_Tm_arrow_10efcb77f376908058dac21bc6621f8b))

:named kinding_Tm_arrow_10efcb77f376908058dac21bc6621f8b))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(520,12-520,100); use=Protocol.fst(517,3-524,36)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_10efcb77f376908058dac21bc6621f8b @x2
@x3
@x4
@x5
@x6
@x7))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_10efcb77f376908058dac21bc6621f8b @x2
@x3
@x4
@x5
@x6
@x7)))
:qid Protocol_pre_typing_Tm_arrow_10efcb77f376908058dac21bc6621f8b))

:named Protocol_pre_typing_Tm_arrow_10efcb77f376908058dac21bc6621f8b))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_10efcb77f376908058dac21bc6621f8b
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(520,12-520,100); use=Protocol.fst(517,3-524,36)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_10efcb77f376908058dac21bc6621f8b @x1
@x2
@x3
@x4
@x5
@x6))
(and 
;; def=Protocol.fst(520,12-520,100); use=Protocol.fst(517,3-524,36)
(forall ((@x7 Term))
 (! (implies (HasType @x7
(Tm_refine_9007fbc417d54bac8a69eb57c27f77cb @x6
@x5))
(HasType (ApplyTT @x0
@x7)
(Tm_refine_9c0001f76d5f142f7103fdaf672a658a @x4
@x6
@x5
@x3
@x2
@x1
@x7)))
 

:pattern ((ApplyTT @x0
@x7))
:qid Protocol_interpretation_Tm_arrow_10efcb77f376908058dac21bc6621f8b.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_10efcb77f376908058dac21bc6621f8b @x1
@x2
@x3
@x4
@x5
@x6)))
:qid Protocol_interpretation_Tm_arrow_10efcb77f376908058dac21bc6621f8b))

:named Protocol_interpretation_Tm_arrow_10efcb77f376908058dac21bc6621f8b))



;;;;;;;;;;;;;;;;_: i: Prims.nat{i < pos + next} -> Prims.GTot Type
(declare-fun Tm_arrow_0cf09d795c0e8186a2b13138068826fd (Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_0cf09d795c0e8186a2b13138068826fd
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(520,12-520,35); use=Protocol.fst(517,3-524,36)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_0cf09d795c0e8186a2b13138068826fd @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_0cf09d795c0e8186a2b13138068826fd @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_0cf09d795c0e8186a2b13138068826fd))

:named kinding_Tm_arrow_0cf09d795c0e8186a2b13138068826fd))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(520,12-520,35); use=Protocol.fst(517,3-524,36)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_0cf09d795c0e8186a2b13138068826fd @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_0cf09d795c0e8186a2b13138068826fd @x2
@x3)))
:qid Protocol_pre_typing_Tm_arrow_0cf09d795c0e8186a2b13138068826fd))

:named Protocol_pre_typing_Tm_arrow_0cf09d795c0e8186a2b13138068826fd))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_0cf09d795c0e8186a2b13138068826fd
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(520,12-520,35); use=Protocol.fst(517,3-524,36)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_0cf09d795c0e8186a2b13138068826fd @x1
@x2))
(and 
;; def=Protocol.fst(520,12-520,35); use=Protocol.fst(517,3-524,36)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Tm_refine_9007fbc417d54bac8a69eb57c27f77cb @x2
@x1))
(HasType (ApplyTT @x0
@x3)
Tm_type))
 

:pattern ((ApplyTT @x0
@x3))
:qid Protocol_interpretation_Tm_arrow_0cf09d795c0e8186a2b13138068826fd.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_0cf09d795c0e8186a2b13138068826fd @x1
@x2)))
:qid Protocol_interpretation_Tm_arrow_0cf09d795c0e8186a2b13138068826fd))

:named Protocol_interpretation_Tm_arrow_0cf09d795c0e8186a2b13138068826fd))




(declare-fun Tm_abs_e050a26d39d8141e40d242eeee6020f4 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_e050a26d39d8141e40d242eeee6020f4
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(520,44-520,100); use=Protocol.fst(524,33-524,36)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_abs_e050a26d39d8141e40d242eeee6020f4 @x0
@x1
@x2
@x3
@x4
@x5)
(Tm_arrow_0cf09d795c0e8186a2b13138068826fd @x4
@x5))
 

:pattern ((Tm_abs_e050a26d39d8141e40d242eeee6020f4 @x0
@x1
@x2
@x3
@x4
@x5))
:qid typing_Tm_abs_e050a26d39d8141e40d242eeee6020f4))

:named typing_Tm_abs_e050a26d39d8141e40d242eeee6020f4))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_e050a26d39d8141e40d242eeee6020f4
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(520,44-520,100); use=Protocol.fst(524,33-524,36)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (ApplyTT (Tm_abs_e050a26d39d8141e40d242eeee6020f4 @x1
@x2
@x3
@x4
@x5
@x6)
@x0)
(Prims.b2t (FStar.Pervasives.Native.uu___is_Some @x1
(FStar.Seq.Base.index (FStar.Pervasives.Native.option @x1)
(MonotonicArray.as_seq @x1
(Prims.op_Addition @x6
@x5)
(MonotonicArray.prefix @x1
@x2
@x3
(Prims.op_Addition @x6
@x5))
@x4)
@x0))))
 

:pattern ((ApplyTT (Tm_abs_e050a26d39d8141e40d242eeee6020f4 @x1
@x2
@x3
@x4
@x5
@x6)
@x0))
:qid interpretation_Tm_abs_e050a26d39d8141e40d242eeee6020f4))

:named interpretation_Tm_abs_e050a26d39d8141e40d242eeee6020f4))

; Encoding query formula : forall (a: Type)
;   (n: Prims.nat)
;   (f: MonotonicArray.array a n)
;   (pos: Prims.nat)
;   (next: Prims.nat{pos + next <= n})
;   (h: FStar.Monotonic.Heap.heap).
;   pos <= n /\
;   (forall (any_result: Prims.nat).
;       pos == any_result ==>
;       (forall (any_result: MonotonicArray.t a pos).
;           MonotonicArray.prefix f pos == any_result ==>
;           n - pos >= 0 /\
;           (forall (return_val: Prims.nat).
;               return_val == n - pos ==>
;               pos <= n /\
;               (forall (any_result: Prims.nat).
;                   pos == any_result ==>
;                   (forall (any_result: MonotonicArray.t a (n - pos)).
;                       MonotonicArray.suffix f pos == any_result ==>
;                       (pos + next <= n ==> next <= n - pos) /\
;                       (forall (any_result: next: Prims.nat{pos + next <= n}).
;                           next == any_result ==>
;                           (forall (any_result: MonotonicArray.t a next).
;                               MonotonicArray.prefix (MonotonicArray.suffix f pos) next == any_result ==>
;                               Prims.auto_squash (FStar.ST.witnessed (MonotonicArray.mutable_pred (MonotonicArray.prefix
;                                             f
;                                             pos))) /\
;                               (Protocol.fully_initialized_in (MonotonicArray.prefix f pos) h ==>
;                                 Prims.auto_squash (FStar.ST.witnessed (MonotonicArray.mutable_pred (MonotonicArray.prefix
;                                               (MonotonicArray.suffix f pos)
;                                               next)))) /\
;                               (forall (any_result: Prims.logical).
;                                   Protocol.fully_initialized_in (MonotonicArray.prefix f pos) h /\
;                                   Protocol.fully_initialized_in (MonotonicArray.prefix (MonotonicArray.suffix
;                                             f
;                                             pos)
;                                         next)
;                                     h ==
;                                   any_result ==>
;                                   pos <= n /\
;                                   (forall (any_result: Prims.nat).
;                                       pos == any_result ==>
;                                       (forall (any_result: MonotonicArray.t a pos).
;                                           MonotonicArray.prefix f pos == any_result ==>
;                                           n - pos >= 0 /\
;                                           (forall (return_val: Prims.nat).
;                                               return_val == n - pos ==>
;                                               pos <= n /\
;                                               (forall (any_result: Prims.nat).
;                                                   pos == any_result ==>
;                                                   (forall (any_result: MonotonicArray.t a (n - pos))
;                                                     .
;                                                       MonotonicArray.suffix f pos == any_result ==>
;                                                       (pos + next <= n ==> next <= n - pos) /\
;                                                       (forall (any_result:
;                                                           next: Prims.nat{pos + next <= n}).
;                                                           next == any_result ==>
;                                                           (forall (any_result:
;                                                               MonotonicArray.t a next).
;                                                               MonotonicArray.prefix (MonotonicArray.suffix
;                                                                     f
;                                                                     pos)
;                                                                 next ==
;                                                               any_result ==>
;                                                               Prims.auto_squash (FStar.ST.witnessed (
;                                                                       MonotonicArray.mutable_pred (MonotonicArray.prefix
;                                                                             f
;                                                                             pos))) /\
;                                                               (Protocol.fully_initialized_in (MonotonicArray.prefix
;                                                                       f
;                                                                       pos)
;                                                                   h ==>
;                                                                 Prims.auto_squash (FStar.ST.witnessed
;                                                                       (MonotonicArray.mutable_pred (MonotonicArray.prefix
;                                                                               (MonotonicArray.suffix
;                                                                                   f
;                                                                                   pos)
;                                                                               next))))))))))) /\
;                                   (forall (_:
;                                       Prims.squash (Protocol.fully_initialized_in (MonotonicArray.prefix
;                                                 f
;                                                 pos)
;                                             h /\
;                                           Protocol.fully_initialized_in (MonotonicArray.prefix (MonotonicArray.suffix
;                                                     f
;                                                     pos)
;                                                 next)
;                                             h)).
;                                       (*  - Could not prove post-condition
; *)
;                                       pos + next >= 0 /\
;                                       (forall (return_val: Prims.nat).
;                                           return_val == pos + next ==>
;                                           pos + next >= 0 /\ pos + next <= n /\
;                                           (forall (return_val: i: Prims.nat{i <= n}).
;                                               return_val == pos + next ==>
;                                               (forall (any_result: MonotonicArray.t a (pos + next)).
;                                                   MonotonicArray.prefix f (pos + next) == any_result ==>
;                                                   Prims.auto_squash (FStar.ST.witnessed (MonotonicArray.mutable_pred
;                                                             (MonotonicArray.prefix f (pos + next))))
;                                               )))))))))))) /\
;   (forall (p: Prims.pure_post Prims.unit).
;       Protocol.fully_initialized_in (MonotonicArray.prefix f pos) h /\
;       Protocol.fully_initialized_in (MonotonicArray.prefix (MonotonicArray.suffix f pos) next) h /\
;       (forall (pure_result: Prims.unit).
;           Protocol.fully_initialized_in (MonotonicArray.prefix f (pos + next)) h ==> p pure_result) ==>
;       pos <= n /\
;       (forall (any_result: Prims.nat).
;           pos == any_result ==>
;           (forall (any_result: MonotonicArray.t a pos).
;               MonotonicArray.prefix f pos == any_result ==>
;               (forall (any_result: FStar.Seq.Base.seq (FStar.Pervasives.Native.option a)).
;                   MonotonicArray.as_seq (MonotonicArray.prefix f pos) h == any_result ==>
;                   n - pos >= 0 /\
;                   (forall (return_val: Prims.nat).
;                       return_val == n - pos ==>
;                       pos <= n /\
;                       (forall (any_result: Prims.nat).
;                           pos == any_result ==>
;                           (forall (any_result: MonotonicArray.t a (n - pos)).
;                               MonotonicArray.suffix f pos == any_result ==>
;                               (pos + next <= n ==> next <= n - pos) /\
;                               (forall (any_result: next: Prims.nat{pos + next <= n}).
;                                   next == any_result ==>
;                                   (forall (any_result: MonotonicArray.t a next).
;                                       MonotonicArray.prefix (MonotonicArray.suffix f pos) next ==
;                                       any_result ==>
;                                       (forall (any_result:
;                                           FStar.Seq.Base.seq (FStar.Pervasives.Native.option a)).
;                                           MonotonicArray.as_seq (MonotonicArray.prefix (MonotonicArray.suffix
;                                                     f
;                                                     pos)
;                                                 next)
;                                             h ==
;                                           any_result ==>
;                                           pos + next >= 0 /\
;                                           (forall (return_val: Prims.nat).
;                                               return_val == pos + next ==>
;                                               pos + next >= 0 /\ pos + next <= n /\
;                                               (forall (return_val: i: Prims.nat{i <= n}).
;                                                   return_val == pos + next ==>
;                                                   (forall (any_result:
;                                                       MonotonicArray.t a (pos + next)).
;                                                       MonotonicArray.prefix f (pos + next) ==
;                                                       any_result ==>
;                                                       (forall (any_result:
;                                                           FStar.Seq.Base.seq (FStar.Pervasives.Native.option
;                                                                 a)).
;                                                           MonotonicArray.as_seq (MonotonicArray.prefix
;                                                                 f
;                                                                 (pos + next))
;                                                             h ==
;                                                           any_result ==>
;                                                           (forall (i: Prims.nat{i < pos + next})
;                                                               (_: Prims.squash Prims.l_True).
;                                                               (*  - Could not prove post-condition
; *)
;                                                               pos + next >= 0 /\
;                                                               (forall (return_val: Prims.nat).
;                                                                   return_val == pos + next ==>
;                                                                   pos + next >= 0 /\ pos + next <= n /\
;                                                                   (forall (return_val:
;                                                                       i: Prims.nat{i <= n}).
;                                                                       return_val == pos + next ==>
;                                                                       (forall (any_result:
;                                                                           MonotonicArray.t a
;                                                                             (pos + next)).
;                                                                           MonotonicArray.prefix f
;                                                                             (pos + next) ==
;                                                                           any_result ==>
;                                                                           (forall (any_result:
;                                                                               FStar.Seq.Base.seq (FStar.Pervasives.Native.option
;                                                                                     a)).
;                                                                               MonotonicArray.as_seq (
;                                                                                   MonotonicArray.prefix
;                                                                                     f
;                                                                                     (pos + next))
;                                                                                 h ==
;                                                                               any_result ==>
;                                                                               i < pos + next ==>
;                                                                               i <
;                                                                               FStar.Seq.Base.length (
;                                                                                   MonotonicArray.as_seq
;                                                                                     (MonotonicArray.prefix
;                                                                                         f
;                                                                                         (pos + next)
;                                                                                     )
;                                                                                     h)))))) /\
;                                                           (forall (i: Prims.nat{i < pos + next}).
;                                                               (forall (_: Prims.squash Prims.l_True)
;                                                                 .
;                                                                   (*  - Could not prove post-condition
; *)
;                                                                   pos + next >= 0 /\
;                                                                   (forall (return_val: Prims.nat).
;                                                                       return_val == pos + next ==>
;                                                                       pos + next >= 0 /\
;                                                                       pos + next <= n /\
;                                                                       (forall (return_val:
;                                                                           i: Prims.nat{i <= n}).
;                                                                           return_val == pos + next ==>
;                                                                           (forall (any_result:
;                                                                               MonotonicArray.t a
;                                                                                 (pos + next)).
;                                                                               MonotonicArray.prefix f
;                                                                                 (pos + next) ==
;                                                                               any_result ==>
;                                                                               (forall (any_result:
;                                                                                   FStar.Seq.Base.seq
;                                                                                     (FStar.Pervasives.Native.option
;                                                                                         a)).
;                                                                                   MonotonicArray.as_seq
;                                                                                     (MonotonicArray.prefix
;                                                                                         f
;                                                                                         (pos + next)
;                                                                                     )
;                                                                                     h ==
;                                                                                   any_result ==>
;                                                                                   i < pos + next ==>
;                                                                                   i <
;                                                                                   FStar.Seq.Base.length
;                                                                                     (MonotonicArray.as_seq
;                                                                                         (MonotonicArray.prefix
;                                                                                             f
;                                                                                             (pos +
;                                                                                               next))
;                                                                                         h)))))) /\
;                                                               (forall (p:
;                                                                   Prims.pure_post Prims.unit).
;                                                                   (forall (pure_result: Prims.unit).
;                                                                       Some? (FStar.Seq.Base.index (MonotonicArray.as_seq
;                                                                                 (MonotonicArray.prefix
;                                                                                     f
;                                                                                     (pos + next))
;                                                                                 h)
;                                                                             i) ==>
;                                                                       p pure_result) ==>
;                                                                   (forall (k:
;                                                                       Prims.pure_post Prims.unit).
;                                                                       (forall (x: Prims.unit).
;                                                                           {:pattern
;                                                                           Prims.guard_free (k x)}
;                                                                           p x ==> k x) ==>
;                                                                       (i < pos == true ==>
;                                                                         (i < pos + next ==>
;                                                                           i <
;                                                                           FStar.Seq.Base.length (MonotonicArray.as_seq
;                                                                                 (MonotonicArray.prefix
;                                                                                     f
;                                                                                     (pos + next))
;                                                                                 h)) /\
;                                                                         (forall (any_result:
;                                                                             i:
;                                                                             Prims.nat
;                                                                               {i < pos + next}).
;                                                                             i == any_result ==>
;                                                                             (forall (any_result:
;                                                                                 FStar.Pervasives.Native.option
;                                                                                   a).
;                                                                                 FStar.Seq.Base.index
;                                                                                   (MonotonicArray.as_seq
;                                                                                       (MonotonicArray.prefix
;                                                                                           f
;                                                                                           (pos +
;                                                                                             next))
;                                                                                       h)
;                                                                                   i ==
;                                                                                 any_result ==>
;                                                                                 (i < pos + next ==>
;                                                                                   i <
;                                                                                   FStar.Seq.Base.length
;                                                                                     (MonotonicArray.as_seq
;                                                                                         (MonotonicArray.prefix
;                                                                                             f
;                                                                                             pos)
;                                                                                         h)) /\
;                                                                                 (forall (any_result:
;                                                                                     i:
;                                                                                     Prims.nat
;                                                                                       { i <
;                                                                                         pos + next })
;                                                                                   .
;                                                                                     i == any_result ==>
;                                                                                     (forall (any_result:
;                                                                                         FStar.Pervasives.Native.option
;                                                                                           a).
;                                                                                         FStar.Seq.Base.index
;                                                                                           (MonotonicArray.as_seq
;                                                                                               (MonotonicArray.prefix
;                                                                                                   f
;                                                                                                   pos
;                                                                                                 )
;                                                                                               h)
;                                                                                           i ==
;                                                                                         any_result ==>
;                                                                                         (forall (any_result:
;                                                                                             Prims.logical)
;                                                                                           .
;                                                                                             FStar.Seq.Base.index
;                                                                                               (MonotonicArray.as_seq
;                                                                                                   (MonotonicArray.prefix
;                                                                                                       f
;                                                                                                       (
;                                                                                                         pos +
;                                                                                                         next
;                                                                                                       )
; 
;                                                                                                   )
;                                                                                                   h)
;                                                                                               i ==
;                                                                                             FStar.Seq.Base.index
;                                                                                               (MonotonicArray.as_seq
;                                                                                                   (MonotonicArray.prefix
;                                                                                                       f
;                                                                                                       pos
; 
;                                                                                                   )
;                                                                                                   h)
;                                                                                               i ==
;                                                                                             any_result ==>
;                                                                                             FStar.Seq.Base.index
;                                                                                               (MonotonicArray.as_seq
;                                                                                                   (MonotonicArray.prefix
;                                                                                                       f
;                                                                                                       (
;                                                                                                         pos +
;                                                                                                         next
;                                                                                                       )
; 
;                                                                                                   )
;                                                                                                   h)
;                                                                                               i ==
;                                                                                             FStar.Seq.Base.index
;                                                                                               (MonotonicArray.as_seq
;                                                                                                   (MonotonicArray.prefix
;                                                                                                       f
;                                                                                                       pos
; 
;                                                                                                   )
;                                                                                                   h)
;                                                                                               i /\
;                                                                                             (forall (pure_result:
;                                                                                                 Prims.unit)
;                                                                                               .
;                                                                                                 FStar.Seq.Base.index
;                                                                                                   (MonotonicArray.as_seq
;                                                                                                       (
;                                                                                                         MonotonicArray.prefix
;                                                                                                           f
;                                                                                                           (
;                                                                                                             pos +
;                                                                                                             next
;                                                                                                           )
; 
;                                                                                                       )
;                                                                                                       h
; 
;                                                                                                   )
;                                                                                                   i ==
;                                                                                                 FStar.Seq.Base.index
;                                                                                                   (MonotonicArray.as_seq
;                                                                                                       (
;                                                                                                         MonotonicArray.prefix
;                                                                                                           f
;                                                                                                           pos
; 
;                                                                                                       )
;                                                                                                       h
; 
;                                                                                                   )
;                                                                                                   i ==>
;                                                                                                 k pure_result
;                                                                                                 ))))
;                                                                             ))) /\
;                                                                       (~(i < pos = true) ==>
;                                                                         (forall (b: Prims.bool).
;                                                                             i < pos == b ==>
;                                                                             (i < pos + next ==>
;                                                                               i <
;                                                                               FStar.Seq.Base.length (
;                                                                                   MonotonicArray.as_seq
;                                                                                     (MonotonicArray.prefix
;                                                                                         f
;                                                                                         (pos + next)
;                                                                                     )
;                                                                                     h)) /\
;                                                                             (forall (any_result:
;                                                                                 i:
;                                                                                 Prims.nat
;                                                                                   {i < pos + next}).
;                                                                                 i == any_result ==>
;                                                                                 (forall (any_result:
;                                                                                     FStar.Pervasives.Native.option
;                                                                                       a).
;                                                                                     FStar.Seq.Base.index
;                                                                                       (MonotonicArray.as_seq
;                                                                                           (MonotonicArray.prefix
;                                                                                               f
;                                                                                               (pos +
;                                                                                                 next
;                                                                                               ))
;                                                                                           h)
;                                                                                       i ==
;                                                                                     any_result ==>
;                                                                                     i - pos >= 0 /\
;                                                                                     i - pos <
;                                                                                     FStar.Seq.Base.length
;                                                                                       (MonotonicArray.as_seq
;                                                                                           (MonotonicArray.prefix
;                                                                                               (MonotonicArray.suffix
;                                                                                                   f
;                                                                                                   pos
;                                                                                                 )
;                                                                                               next)
;                                                                                           h) /\
;                                                                                     (forall (return_val:
;                                                                                         i:
;                                                                                         Prims.nat
;                                                                                           { i <
;                                                                                             FStar.Seq.Base.length
;                                                                                               (MonotonicArray.as_seq
;                                                                                                   (MonotonicArray.prefix
;                                                                                                       (
;                                                                                                         MonotonicArray.suffix
;                                                                                                           f
;                                                                                                           pos
; 
;                                                                                                       )
;                                                                                                       next
; 
;                                                                                                   )
;                                                                                                   h)
;                                                                                           }).
;                                                                                         return_val ==
;                                                                                         i - pos ==>
;                                                                                         (forall (any_result:
;                                                                                             FStar.Pervasives.Native.option
;                                                                                               a).
;                                                                                             FStar.Seq.Base.index
;                                                                                               (MonotonicArray.as_seq
;                                                                                                   (MonotonicArray.prefix
;                                                                                                       (
;                                                                                                         MonotonicArray.suffix
;                                                                                                           f
;                                                                                                           pos
; 
;                                                                                                       )
;                                                                                                       next
; 
;                                                                                                   )
;                                                                                                   h)
;                                                                                               (i -
;                                                                                                 pos) ==
;                                                                                             any_result ==>
;                                                                                             (forall (any_result:
;                                                                                                 Prims.logical)
;                                                                                               .
;                                                                                                 FStar.Seq.Base.index
;                                                                                                   (MonotonicArray.as_seq
;                                                                                                       (
;                                                                                                         MonotonicArray.prefix
;                                                                                                           f
;                                                                                                           (
;                                                                                                             pos +
;                                                                                                             next
;                                                                                                           )
; 
;                                                                                                       )
;                                                                                                       h
; 
;                                                                                                   )
;                                                                                                   i ==
;                                                                                                 FStar.Seq.Base.index
;                                                                                                   (MonotonicArray.as_seq
;                                                                                                       (
;                                                                                                         MonotonicArray.prefix
;                                                                                                           (
;                                                                                                             MonotonicArray.suffix
;                                                                                                               f
;                                                                                                               pos
; 
;                                                                                                           )
;                                                                                                           next
; 
;                                                                                                       )
;                                                                                                       h
; 
;                                                                                                   )
;                                                                                                   (i -
;                                                                                                     pos
;                                                                                                   ) ==
;                                                                                                 any_result ==>
;                                                                                                 FStar.Seq.Base.index
;                                                                                                   (MonotonicArray.as_seq
;                                                                                                       (
;                                                                                                         MonotonicArray.prefix
;                                                                                                           f
;                                                                                                           (
;                                                                                                             pos +
;                                                                                                             next
;                                                                                                           )
; 
;                                                                                                       )
;                                                                                                       h
; 
;                                                                                                   )
;                                                                                                   i ==
;                                                                                                 FStar.Seq.Base.index
;                                                                                                   (MonotonicArray.as_seq
;                                                                                                       (
;                                                                                                         MonotonicArray.prefix
;                                                                                                           (
;                                                                                                             MonotonicArray.suffix
;                                                                                                               f
;                                                                                                               pos
; 
;                                                                                                           )
;                                                                                                           next
; 
;                                                                                                       )
;                                                                                                       h
; 
;                                                                                                   )
;                                                                                                   (i -
;                                                                                                     pos
;                                                                                                   ) /\
;                                                                                                 (forall
;                                                                                                     (pure_result:
;                                                                                                     Prims.unit)
;                                                                                                   .
;                                                                                                     FStar.Seq.Base.index
;                                                                                                       (
;                                                                                                         MonotonicArray.as_seq
;                                                                                                           (
;                                                                                                             MonotonicArray.prefix
;                                                                                                               f
;                                                                                                               (
;                                                                                                                 pos +
;                                                                                                                 next
;                                                                                                               )
; 
;                                                                                                           )
;                                                                                                           h
; 
;                                                                                                       )
;                                                                                                       i
;                                                                                                      ==
;                                                                                                     FStar.Seq.Base.index
;                                                                                                       (
;                                                                                                         MonotonicArray.as_seq
;                                                                                                           (
;                                                                                                             MonotonicArray.prefix
;                                                                                                               (
;                                                                                                                 MonotonicArray.suffix
;                                                                                                                   f
;                                                                                                                   pos
; 
;                                                                                                               )
;                                                                                                               next
; 
;                                                                                                           )
;                                                                                                           h
; 
;                                                                                                       )
;                                                                                                       (
;                                                                                                         i -
;                                                                                                         pos
;                                                                                                       )
;                                                                                                      ==>
;                                                                                                     k
;                                                                                                       pure_result
; 
;                                                                                                 ))))
;                                                                                 ))))))) /\
;                                                           (forall (any_result:
;                                                               (i: Prims.nat{i < pos + next}
;                                                                   -> FStar.Pervasives.Lemma
;                                                                     (ensures
;                                                                       Some? (FStar.Seq.Base.index (MonotonicArray.as_seq
;                                                                                 (MonotonicArray.prefix
;                                                                                     f
;                                                                                     (pos + next))
;                                                                                 h)
;                                                                             i)))).
;                                                               (forall (i: Prims.nat{i < pos + next})
;                                                                 .
;                                                                   (*  - Could not prove post-condition
; *)
;                                                                   pos + next >= 0 /\
;                                                                   (forall (return_val: Prims.nat).
;                                                                       return_val == pos + next ==>
;                                                                       pos + next >= 0 /\
;                                                                       pos + next <= n /\
;                                                                       (forall (return_val:
;                                                                           i: Prims.nat{i <= n}).
;                                                                           return_val == pos + next ==>
;                                                                           (forall (any_result:
;                                                                               MonotonicArray.t a
;                                                                                 (pos + next)).
;                                                                               MonotonicArray.prefix f
;                                                                                 (pos + next) ==
;                                                                               any_result ==>
;                                                                               (forall (any_result:
;                                                                                   FStar.Seq.Base.seq
;                                                                                     (FStar.Pervasives.Native.option
;                                                                                         a)).
;                                                                                   MonotonicArray.as_seq
;                                                                                     (MonotonicArray.prefix
;                                                                                         f
;                                                                                         (pos + next)
;                                                                                     )
;                                                                                     h ==
;                                                                                   any_result ==>
;                                                                                   i < pos + next ==>
;                                                                                   i <
;                                                                                   FStar.Seq.Base.length
;                                                                                     (MonotonicArray.as_seq
;                                                                                         (MonotonicArray.prefix
;                                                                                             f
;                                                                                             (pos +
;                                                                                               next))
;                                                                                         h)))))) /\
;                                                               (forall (any_result:
;                                                                   (_: i: Prims.nat{i < pos + next}
;                                                                       -> Prims.GTot Type0)).
;                                                                   (fun i ->
;                                                                       Some? (FStar.Seq.Base.index (MonotonicArray.as_seq
;                                                                                 (MonotonicArray.prefix
;                                                                                     f
;                                                                                     (pos + next))
;                                                                                 h)
;                                                                             i)) ==
;                                                                   any_result ==>
;                                                                   (forall (pure_result: Prims.unit).
;                                                                       (forall (x:
;                                                                           i:
;                                                                           Prims.nat{i < pos + next})
;                                                                         .
;                                                                           Some? (FStar.Seq.Base.index
;                                                                                 (MonotonicArray.as_seq
;                                                                                     (MonotonicArray.prefix
;                                                                                         f
;                                                                                         (pos + next)
;                                                                                     )
;                                                                                     h)
;                                                                                 x)) ==>
;                                                                       p pure_result)))))))))))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let extend_initialization`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
(MonotonicArray.array @x0
@x1))
(HasType @x3
Prims.nat)
(HasType @x4
(Tm_refine_6f684e27d6af9965634108bcfe981953 @x3
@x1))
(HasType @x5
FStar.Monotonic.Heap.heap))

;; def=Prims.fst(406,51-459,89); use=Prims.fst(430,19-430,32)
(and 
;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(512,39-512,42)
(or label_1

;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(517,3-524,36)
(<= (BoxInt_proj_0 @x3)
(BoxInt_proj_0 @x1))
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(517,3-524,36)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.nat)

;; def=MonotonicArray.fsti(167,44-167,45); use=Protocol.fst(517,3-524,36)
(= @x3
@x6)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(517,3-524,36)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(MonotonicArray.t @x0
@x3))

;; def=Protocol.fst(512,25-512,42); use=Protocol.fst(517,3-524,36)
(= (MonotonicArray.prefix @x0
@x1
@x2
@x3)
@x7)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(517,3-524,36)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(513,42-513,48)
(or label_2

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(517,3-524,36)
(>= (BoxInt_proj_0 (Prims.op_Subtraction @x1
@x3))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(517,3-524,36)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(517,3-524,36)
(= @x8
(Prims.op_Subtraction @x1
@x3))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(517,3-524,36)
(and 
;; def=MonotonicArray.fsti(166,50-166,56); use=Protocol.fst(513,51-513,54)
(or label_3

;; def=MonotonicArray.fsti(166,50-166,56); use=Protocol.fst(517,3-524,36)
(<= (BoxInt_proj_0 @x3)
(BoxInt_proj_0 @x1))
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(517,3-524,36)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.nat)

;; def=MonotonicArray.fsti(166,44-166,45); use=Protocol.fst(517,3-524,36)
(= @x3
@x9)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(517,3-524,36)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(MonotonicArray.t @x0
(Prims.op_Subtraction @x1
@x3)))

;; def=MonotonicArray.fsti(167,32-167,35); use=Protocol.fst(517,3-524,36)
(= (MonotonicArray.suffix @x0
@x1
@x2
@x3)
@x10)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(517,3-524,36)
(and (implies 
;; def=Protocol.fst(511,66-511,79); use=Protocol.fst(517,3-524,36)
(<= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 @x1))


;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(513,56-513,60)
(or label_4

;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(517,3-524,36)
(<= (BoxInt_proj_0 @x4)
(BoxInt_proj_0 (Prims.op_Subtraction @x1
@x3)))
)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(517,3-524,36)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(Tm_refine_6f684e27d6af9965634108bcfe981953 @x3
@x1))

;; def=MonotonicArray.fsti(167,44-167,45); use=Protocol.fst(517,3-524,36)
(= @x4
@x11)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(517,3-524,36)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
(MonotonicArray.t @x0
@x4))

;; def=Protocol.fst(513,25-513,60); use=Protocol.fst(517,3-524,36)
(= (MonotonicArray.prefix @x0
(Prims.op_Subtraction @x1
@x3)
(MonotonicArray.suffix @x0
@x1
@x2
@x3)
@x4)
@x12)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(517,3-524,36)
(and 
;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(514,21-514,23)
(or label_5

;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(517,3-524,36)
(Valid 
;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(517,3-524,36)
(FStar.ST.witnessed (MonotonicArray.mutable_pred @x0
@x3
(MonotonicArray.prefix @x0
@x1
@x2
@x3)))
)
)

(implies 
;; def=Protocol.fst(514,21-514,48); use=Protocol.fst(517,3-524,36)
(Valid 
;; def=Protocol.fst(514,21-514,48); use=Protocol.fst(517,3-524,36)
(Protocol.fully_initialized_in @x0
@x3
(MonotonicArray.prefix @x0
@x1
@x2
@x3)
@x5)
)


;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(515,21-515,27)
(or label_6

;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(517,3-524,36)
(Valid 
;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(517,3-524,36)
(FStar.ST.witnessed (MonotonicArray.mutable_pred @x0
@x4
(MonotonicArray.prefix @x0
(Prims.op_Subtraction @x1
@x3)
(MonotonicArray.suffix @x0
@x1
@x2
@x3)
@x4)))
)
)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(517,3-524,36)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
Prims.logical)

;; def=FStar.Pervasives.fsti(112,28-112,31); use=Protocol.fst(517,3-524,36)
(= (Prims.l_and (Protocol.fully_initialized_in @x0
@x3
(MonotonicArray.prefix @x0
@x1
@x2
@x3)
@x5)
(Protocol.fully_initialized_in @x0
@x4
(MonotonicArray.prefix @x0
(Prims.op_Subtraction @x1
@x3)
(MonotonicArray.suffix @x0
@x1
@x2
@x3)
@x4)
@x5))
@x13)
)

;; def=dummy(0,0-0,0); use=Protocol.fst(517,3-524,36)
(and 
;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(512,39-512,42)
(or label_7

;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(517,3-524,36)
(<= (BoxInt_proj_0 @x3)
(BoxInt_proj_0 @x1))
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(517,3-524,36)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
Prims.nat)

;; def=MonotonicArray.fsti(167,44-167,45); use=Protocol.fst(517,3-524,36)
(= @x3
@x14)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(517,3-524,36)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
(MonotonicArray.t @x0
@x3))

;; def=Protocol.fst(512,25-512,42); use=Protocol.fst(517,3-524,36)
(= (MonotonicArray.prefix @x0
@x1
@x2
@x3)
@x15)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(517,3-524,36)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(512,4-512,9)
(or label_8

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(517,3-524,36)
(>= (BoxInt_proj_0 (Prims.op_Subtraction @x1
@x3))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(517,3-524,36)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(517,3-524,36)
(= @x16
(Prims.op_Subtraction @x1
@x3))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(517,3-524,36)
(and 
;; def=MonotonicArray.fsti(166,50-166,56); use=Protocol.fst(513,51-513,54)
(or label_9

;; def=MonotonicArray.fsti(166,50-166,56); use=Protocol.fst(517,3-524,36)
(<= (BoxInt_proj_0 @x3)
(BoxInt_proj_0 @x1))
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(517,3-524,36)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Prims.nat)

;; def=MonotonicArray.fsti(166,44-166,45); use=Protocol.fst(517,3-524,36)
(= @x3
@x17)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(517,3-524,36)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(MonotonicArray.t @x0
(Prims.op_Subtraction @x1
@x3)))

;; def=MonotonicArray.fsti(167,32-167,35); use=Protocol.fst(517,3-524,36)
(= (MonotonicArray.suffix @x0
@x1
@x2
@x3)
@x18)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(517,3-524,36)
(and (implies 
;; def=Protocol.fst(511,66-511,79); use=Protocol.fst(517,3-524,36)
(<= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 @x1))


;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(513,56-513,60)
(or label_10

;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(517,3-524,36)
(<= (BoxInt_proj_0 @x4)
(BoxInt_proj_0 (Prims.op_Subtraction @x1
@x3)))
)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(517,3-524,36)
(forall ((@x19 Term))
 (! (implies (and (HasType @x19
(Tm_refine_6f684e27d6af9965634108bcfe981953 @x3
@x1))

;; def=MonotonicArray.fsti(167,44-167,45); use=Protocol.fst(517,3-524,36)
(= @x4
@x19)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(517,3-524,36)
(forall ((@x20 Term))
 (! (implies (and (HasType @x20
(MonotonicArray.t @x0
@x4))

;; def=Protocol.fst(513,25-513,60); use=Protocol.fst(517,3-524,36)
(= (MonotonicArray.prefix @x0
(Prims.op_Subtraction @x1
@x3)
(MonotonicArray.suffix @x0
@x1
@x2
@x3)
@x4)
@x20)
)

;; def=Protocol.fst(512,25-514,48); use=Protocol.fst(517,3-524,36)
(and 
;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(514,21-514,23)
(or label_11

;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(517,3-524,36)
(Valid 
;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(517,3-524,36)
(FStar.ST.witnessed (MonotonicArray.mutable_pred @x0
@x3
(MonotonicArray.prefix @x0
@x1
@x2
@x3)))
)
)

(implies 
;; def=Protocol.fst(514,21-514,48); use=Protocol.fst(517,3-524,36)
(Valid 
;; def=Protocol.fst(514,21-514,48); use=Protocol.fst(517,3-524,36)
(Protocol.fully_initialized_in @x0
@x3
(MonotonicArray.prefix @x0
@x1
@x2
@x3)
@x5)
)


;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(515,21-515,27)
(or label_12

;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(517,3-524,36)
(Valid 
;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(517,3-524,36)
(FStar.ST.witnessed (MonotonicArray.mutable_pred @x0
@x4
(MonotonicArray.prefix @x0
(Prims.op_Subtraction @x1
@x3)
(MonotonicArray.suffix @x0
@x1
@x2
@x3)
@x4)))
)
)
))
)
 
;;no pats
:qid @query.15))
)
 
;;no pats
:qid @query.14))
)
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))


;; def=dummy(0,0-0,0); use=Protocol.fst(517,3-524,36)
(forall ((@x14 Term))
 (! (implies (HasType @x14
(Tm_refine_80014152d823556bb66826435d89a313 @x0
@x3
@x1
@x2
@x5
@x4))

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(517,3-524,36)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(516,29-516,41)
(or label_13

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(517,3-524,36)
(>= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(517,3-524,36)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(517,3-524,36)
(= @x15
(Prims.op_Addition @x3
@x4))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(517,3-524,36)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(516,29-516,41)
(or label_14

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(517,3-524,36)
(>= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(516,29-516,41)
(or label_15

;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(517,3-524,36)
(<= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 @x1))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(517,3-524,36)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
(Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x1))

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(517,3-524,36)
(= @x16
(Prims.op_Addition @x3
@x4))
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(517,3-524,36)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
(MonotonicArray.t @x0
(Prims.op_Addition @x3
@x4)))

;; def=Protocol.fst(357,34-516,41); use=Protocol.fst(517,3-524,36)
(= (MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x17)
)

;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(516,20-516,41)
(or label_16

;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(517,3-524,36)
(Valid 
;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(517,3-524,36)
(FStar.ST.witnessed (MonotonicArray.mutable_pred @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))))
)
)
)
 
;;no pats
:qid @query.19))
)
 
;;no pats
:qid @query.18))
)
)
 
;;no pats
:qid @query.17))
)
)
 
;;no pats
:qid @query.16))
)
)
 
;;no pats
:qid @query.8))
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))


;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Prims.pure_post Prims.unit))

;; def=Protocol.fst(514,21-514,48); use=Protocol.fst(517,3-524,36)
(Valid 
;; def=Protocol.fst(514,21-514,48); use=Protocol.fst(517,3-524,36)
(Protocol.fully_initialized_in @x0
@x3
(MonotonicArray.prefix @x0
@x1
@x2
@x3)
@x5)
)


;; def=Protocol.fst(515,21-515,52); use=Protocol.fst(517,3-524,36)
(Valid 
;; def=Protocol.fst(515,21-515,52); use=Protocol.fst(517,3-524,36)
(Protocol.fully_initialized_in @x0
@x4
(MonotonicArray.prefix @x0
(Prims.op_Subtraction @x1
@x3)
(MonotonicArray.suffix @x0
@x1
@x2
@x3)
@x4)
@x5)
)


;; def=Prims.fst(441,36-441,97); use=Protocol.fst(517,3-524,36)
(forall ((@x7 Term))
 (! (implies (and (or label_17
(HasType @x7
Prims.unit))

;; def=Protocol.fst(516,19-516,67); use=Protocol.fst(517,3-524,36)
(or label_18

;; def=Protocol.fst(516,19-516,67); use=Protocol.fst(517,3-524,36)
(Valid 
;; def=Protocol.fst(516,19-516,67); use=Protocol.fst(517,3-524,36)
(Protocol.fully_initialized_in @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)
)
)
)

;; def=Prims.fst(441,83-441,96); use=Protocol.fst(517,3-524,36)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Protocol.fst(517,3-524,36)
(ApplyTT @x6
@x7)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Protocol.fst(517,3-524,36)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Protocol.fst(517,3-524,36)
(ApplyTT @x6
@x7)
)
)
:qid @query.21))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(517,3-524,36)
(and 
;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(517,30-517,33)
(or label_19

;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(517,30-517,33)
(<= (BoxInt_proj_0 @x3)
(BoxInt_proj_0 @x1))
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(517,3-524,36)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.nat)

;; def=MonotonicArray.fsti(167,44-167,45); use=Protocol.fst(517,3-524,36)
(= @x3
@x7)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(517,3-524,36)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(MonotonicArray.t @x0
@x3))

;; def=MonotonicArray.fsti(96,32-96,35); use=Protocol.fst(517,3-524,36)
(= (MonotonicArray.prefix @x0
@x1
@x2
@x3)
@x8)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(517,3-524,36)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(FStar.Seq.Base.seq (FStar.Pervasives.Native.option @x0)))

;; def=Protocol.fst(517,8-517,36); use=Protocol.fst(517,8-517,36)
(= (MonotonicArray.as_seq @x0
@x3
(MonotonicArray.prefix @x0
@x1
@x2
@x3)
@x5)
@x9)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(517,3-524,36)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(518,33-518,39)
(or label_20

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(518,33-518,39)
(>= (BoxInt_proj_0 (Prims.op_Subtraction @x1
@x3))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(517,3-524,36)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(517,3-524,36)
(= @x10
(Prims.op_Subtraction @x1
@x3))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(517,3-524,36)
(and 
;; def=MonotonicArray.fsti(166,50-166,56); use=Protocol.fst(518,42-518,45)
(or label_21

;; def=MonotonicArray.fsti(166,50-166,56); use=Protocol.fst(518,42-518,45)
(<= (BoxInt_proj_0 @x3)
(BoxInt_proj_0 @x1))
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(517,3-524,36)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.nat)

;; def=MonotonicArray.fsti(166,44-166,45); use=Protocol.fst(517,3-524,36)
(= @x3
@x11)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(517,3-524,36)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
(MonotonicArray.t @x0
(Prims.op_Subtraction @x1
@x3)))

;; def=MonotonicArray.fsti(167,32-167,35); use=Protocol.fst(517,3-524,36)
(= (MonotonicArray.suffix @x0
@x1
@x2
@x3)
@x12)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(517,3-524,36)
(and (implies 
;; def=Protocol.fst(511,66-511,79); use=Protocol.fst(518,47-518,51)
(<= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 @x1))


;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(518,47-518,51)
(or label_22

;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(518,47-518,51)
(<= (BoxInt_proj_0 @x4)
(BoxInt_proj_0 (Prims.op_Subtraction @x1
@x3)))
)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(517,3-524,36)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(Tm_refine_6f684e27d6af9965634108bcfe981953 @x3
@x1))

;; def=MonotonicArray.fsti(167,44-167,45); use=Protocol.fst(517,3-524,36)
(= @x4
@x13)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(517,3-524,36)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
(MonotonicArray.t @x0
@x4))

;; def=MonotonicArray.fsti(96,32-96,35); use=Protocol.fst(517,3-524,36)
(= (MonotonicArray.prefix @x0
(Prims.op_Subtraction @x1
@x3)
(MonotonicArray.suffix @x0
@x1
@x2
@x3)
@x4)
@x14)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(517,3-524,36)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
(FStar.Seq.Base.seq (FStar.Pervasives.Native.option @x0)))

;; def=Protocol.fst(518,8-518,54); use=Protocol.fst(518,8-518,54)
(= (MonotonicArray.as_seq @x0
@x4
(MonotonicArray.prefix @x0
(Prims.op_Subtraction @x1
@x3)
(MonotonicArray.suffix @x0
@x1
@x2
@x3)
@x4)
@x5)
@x15)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(517,3-524,36)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(519,30-519,42)
(or label_23

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(519,30-519,42)
(>= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(517,3-524,36)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(517,3-524,36)
(= @x16
(Prims.op_Addition @x3
@x4))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(517,3-524,36)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(519,30-519,42)
(or label_24

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(519,30-519,42)
(>= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(519,30-519,42)
(or label_25

;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(519,30-519,42)
(<= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 @x1))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(517,3-524,36)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
(Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x1))

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(517,3-524,36)
(= @x17
(Prims.op_Addition @x3
@x4))
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(517,3-524,36)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(MonotonicArray.t @x0
(Prims.op_Addition @x3
@x4)))

;; def=MonotonicArray.fsti(96,32-96,35); use=Protocol.fst(517,3-524,36)
(= (MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x18)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(517,3-524,36)
(forall ((@x19 Term))
 (! (implies (and (HasType @x19
(FStar.Seq.Base.seq (FStar.Pervasives.Native.option @x0)))

;; def=Protocol.fst(519,8-519,45); use=Protocol.fst(519,8-519,45)
(= (MonotonicArray.as_seq @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)
@x19)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(517,3-524,36)
(and 
;; def=dummy(0,0-0,0); use=Protocol.fst(519,48-524,36)
(forall ((@x20 Term) (@x21 Term))
 (! (implies (and (HasType @x20
(Tm_refine_9007fbc417d54bac8a69eb57c27f77cb @x3
@x4))
(HasType @x21
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(520,44-520,100)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(520,80-520,92)
(or label_26

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(520,80-520,92)
(>= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(520,44-520,100)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(520,44-520,100)
(= @x22
(Prims.op_Addition @x3
@x4))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(520,44-520,100)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(520,80-520,92)
(or label_27

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(520,80-520,92)
(>= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(520,80-520,92)
(or label_28

;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(520,80-520,92)
(<= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 @x1))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(520,44-520,100)
(forall ((@x23 Term))
 (! (implies (and (HasType @x23
(Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x1))

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(520,44-520,100)
(= @x23
(Prims.op_Addition @x3
@x4))
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(520,44-520,100)
(forall ((@x24 Term))
 (! (implies (and (HasType @x24
(MonotonicArray.t @x0
(Prims.op_Addition @x3
@x4)))

;; def=MonotonicArray.fsti(96,32-96,35); use=Protocol.fst(520,44-520,100)
(= (MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x24)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(520,44-520,100)
(forall ((@x25 Term))
 (! (implies (and (HasType @x25
(FStar.Seq.Base.seq (FStar.Pervasives.Native.option @x0)))

;; def=FStar.Seq.Base.fsti(32,23-32,24); use=Protocol.fst(520,44-520,100)
(= (MonotonicArray.as_seq @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)
@x25)


;; def=Protocol.fst(520,19-520,33); use=Protocol.fst(520,97-520,98)
(< (BoxInt_proj_0 @x20)
(BoxInt_proj_0 (Prims.op_Addition @x3
@x4)))
)

;; def=FStar.Seq.Base.fsti(32,40-32,52); use=Protocol.fst(520,97-520,98)
(or label_29

;; def=FStar.Seq.Base.fsti(32,40-32,52); use=Protocol.fst(520,97-520,98)
(< (BoxInt_proj_0 @x20)
(BoxInt_proj_0 (FStar.Seq.Base.length (FStar.Pervasives.Native.option @x0)
(MonotonicArray.as_seq @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5))))
)
)
 
;;no pats
:qid @query.39))
)
 
;;no pats
:qid @query.38))
)
 
;;no pats
:qid @query.37))
)
)
 
;;no pats
:qid @query.36))
)
)
 
;;no pats
:qid @query.35))


;; def=dummy(0,0-0,0); use=Protocol.fst(517,3-524,36)
(forall ((@x20 Term))
 (! (implies (HasType @x20
(Tm_refine_9007fbc417d54bac8a69eb57c27f77cb @x3
@x4))

;; def=Prims.fst(406,51-406,91); use=Protocol.fst(517,3-524,36)
(and 
;; def=dummy(0,0-0,0); use=Protocol.fst(521,8-522,66)
(forall ((@x21 Term))
 (! (implies (HasType @x21
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(521,8-522,66)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(520,80-520,92)
(or label_30

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(521,8-522,66)
(>= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(521,8-522,66)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(521,8-522,66)
(= @x22
(Prims.op_Addition @x3
@x4))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(521,8-522,66)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(520,80-520,92)
(or label_31

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(521,8-522,66)
(>= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(520,80-520,92)
(or label_32

;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(521,8-522,66)
(<= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 @x1))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(521,8-522,66)
(forall ((@x23 Term))
 (! (implies (and (HasType @x23
(Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x1))

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(521,8-522,66)
(= @x23
(Prims.op_Addition @x3
@x4))
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(521,8-522,66)
(forall ((@x24 Term))
 (! (implies (and (HasType @x24
(MonotonicArray.t @x0
(Prims.op_Addition @x3
@x4)))

;; def=MonotonicArray.fsti(96,32-96,35); use=Protocol.fst(521,8-522,66)
(= (MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x24)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(521,8-522,66)
(forall ((@x25 Term))
 (! (implies (and (HasType @x25
(FStar.Seq.Base.seq (FStar.Pervasives.Native.option @x0)))

;; def=FStar.Seq.Base.fsti(32,23-32,24); use=Protocol.fst(521,8-522,66)
(= (MonotonicArray.as_seq @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)
@x25)


;; def=Protocol.fst(520,19-520,33); use=Protocol.fst(521,8-522,66)
(< (BoxInt_proj_0 @x20)
(BoxInt_proj_0 (Prims.op_Addition @x3
@x4)))
)

;; def=FStar.Seq.Base.fsti(32,40-32,52); use=Protocol.fst(520,97-520,98)
(or label_33

;; def=FStar.Seq.Base.fsti(32,40-32,52); use=Protocol.fst(521,8-522,66)
(< (BoxInt_proj_0 @x20)
(BoxInt_proj_0 (FStar.Seq.Base.length (FStar.Pervasives.Native.option @x0)
(MonotonicArray.as_seq @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5))))
)
)
 
;;no pats
:qid @query.45))
)
 
;;no pats
:qid @query.44))
)
 
;;no pats
:qid @query.43))
)
)
 
;;no pats
:qid @query.42))
)
)
 
;;no pats
:qid @query.41))


;; def=Prims.fst(406,51-406,91); use=Protocol.fst(517,3-524,36)
(forall ((@x21 Term))
 (! (implies (and (HasType @x21
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=Protocol.fst(521,8-522,66)
(forall ((@x22 Term))
 (! (implies (and (or label_34
(HasType @x22
Prims.unit))

;; def=Protocol.fst(520,44-520,100); use=Protocol.fst(521,8-522,66)
(or label_35

;; def=Protocol.fst(520,44-520,100); use=Protocol.fst(521,8-522,66)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x0
(FStar.Seq.Base.index (FStar.Pervasives.Native.option @x0)
(MonotonicArray.as_seq @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)
@x20)))
)
)

;; def=Prims.fst(441,83-441,96); use=Protocol.fst(521,8-522,66)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Protocol.fst(521,8-522,66)
(ApplyTT @x21
@x22)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Protocol.fst(521,8-522,66)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Protocol.fst(521,8-522,66)
(ApplyTT @x21
@x22)
)
)
:qid @query.47))
)

;; def=Prims.fst(402,2-402,97); use=Protocol.fst(521,8-522,66)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=Protocol.fst(521,8-522,66)
(forall ((@x23 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=Protocol.fst(521,8-522,66)
(Valid 
;; def=Prims.fst(402,73-402,79); use=Protocol.fst(521,8-522,66)
(ApplyTT @x21
@x23)
)


;; def=Prims.fst(402,84-402,87); use=Protocol.fst(521,8-522,66)
(Valid 
;; def=Prims.fst(402,84-402,87); use=Protocol.fst(521,8-522,66)
(ApplyTT @x22
@x23)
)
)
 :weight 0


:pattern ((ApplyTT @x22
@x23))
:qid @query.49))
)

;; def=Prims.fst(389,2-389,39); use=Protocol.fst(521,8-522,66)
(and (implies 
;; def=Protocol.fst(521,11-521,18); use=Protocol.fst(521,11-521,18)
(= (Prims.op_LessThan @x20
@x3)
(BoxBool true))


;; def=Prims.fst(459,77-459,89); use=Protocol.fst(521,8-522,66)
(and (implies 
;; def=Protocol.fst(520,19-520,33); use=Protocol.fst(521,45-521,46)
(< (BoxInt_proj_0 @x20)
(BoxInt_proj_0 (Prims.op_Addition @x3
@x4)))


;; def=FStar.Seq.Base.fsti(32,40-32,52); use=Protocol.fst(521,45-521,46)
(or label_36

;; def=FStar.Seq.Base.fsti(32,40-32,52); use=Protocol.fst(521,45-521,46)
(< (BoxInt_proj_0 @x20)
(BoxInt_proj_0 (FStar.Seq.Base.length (FStar.Pervasives.Native.option @x0)
(MonotonicArray.as_seq @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(521,8-522,66)
(forall ((@x23 Term))
 (! (implies (and (HasType @x23
(Tm_refine_9007fbc417d54bac8a69eb57c27f77cb @x3
@x4))

;; def=FStar.Seq.Base.fsti(32,34-32,35); use=Protocol.fst(521,8-522,66)
(= @x20
@x23)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(521,8-522,66)
(forall ((@x24 Term))
 (! (implies (and (HasType @x24
(FStar.Pervasives.Native.option @x0))

;; def=Prims.fst(175,35-175,36); use=Protocol.fst(521,8-522,66)
(= (FStar.Seq.Base.index (FStar.Pervasives.Native.option @x0)
(MonotonicArray.as_seq @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)
@x20)
@x24)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(521,8-522,66)
(and (implies 
;; def=Protocol.fst(520,19-520,33); use=Protocol.fst(521,63-521,64)
(< (BoxInt_proj_0 @x20)
(BoxInt_proj_0 (Prims.op_Addition @x3
@x4)))


;; def=FStar.Seq.Base.fsti(32,40-32,52); use=Protocol.fst(521,63-521,64)
(or label_37

;; def=FStar.Seq.Base.fsti(32,40-32,52); use=Protocol.fst(521,63-521,64)
(< (BoxInt_proj_0 @x20)
(BoxInt_proj_0 (FStar.Seq.Base.length (FStar.Pervasives.Native.option @x0)
(MonotonicArray.as_seq @x0
@x3
(MonotonicArray.prefix @x0
@x1
@x2
@x3)
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(521,8-522,66)
(forall ((@x25 Term))
 (! (implies (and (HasType @x25
(Tm_refine_9007fbc417d54bac8a69eb57c27f77cb @x3
@x4))

;; def=FStar.Seq.Base.fsti(32,34-32,35); use=Protocol.fst(521,8-522,66)
(= @x20
@x25)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(521,8-522,66)
(forall ((@x26 Term))
 (! (implies (and (HasType @x26
(FStar.Pervasives.Native.option @x0))

;; def=Prims.fst(175,42-175,43); use=Protocol.fst(521,8-522,66)
(= (FStar.Seq.Base.index (FStar.Pervasives.Native.option @x0)
(MonotonicArray.as_seq @x0
@x3
(MonotonicArray.prefix @x0
@x1
@x2
@x3)
@x5)
@x20)
@x26)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(521,8-522,66)
(forall ((@x27 Term))
 (! (implies (and (HasType @x27
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=Protocol.fst(521,8-522,66)
(= (Prims.eq2 (FStar.Pervasives.Native.option @x0)
(FStar.Seq.Base.index (FStar.Pervasives.Native.option @x0)
(MonotonicArray.as_seq @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)
@x20)
(FStar.Seq.Base.index (FStar.Pervasives.Native.option @x0)
(MonotonicArray.as_seq @x0
@x3
(MonotonicArray.prefix @x0
@x1
@x2
@x3)
@x5)
@x20))
@x27)
)

;; def=Prims.fst(441,29-441,97); use=Protocol.fst(521,24-521,30)
(and 
;; def=Protocol.fst(521,31-521,65); use=Protocol.fst(521,24-521,30)
(or label_38

;; def=Protocol.fst(521,31-521,65); use=Protocol.fst(521,24-521,30)
(= (FStar.Seq.Base.index (FStar.Pervasives.Native.option @x0)
(MonotonicArray.as_seq @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)
@x20)
(FStar.Seq.Base.index (FStar.Pervasives.Native.option @x0)
(MonotonicArray.as_seq @x0
@x3
(MonotonicArray.prefix @x0
@x1
@x2
@x3)
@x5)
@x20))
)


;; def=Prims.fst(441,36-441,97); use=Protocol.fst(521,24-521,30)
(forall ((@x28 Term))
 (! (implies (and (HasType @x28
Prims.unit)

;; def=Protocol.fst(521,31-521,65); use=Protocol.fst(521,24-521,30)
(= (FStar.Seq.Base.index (FStar.Pervasives.Native.option @x0)
(MonotonicArray.as_seq @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)
@x20)
(FStar.Seq.Base.index (FStar.Pervasives.Native.option @x0)
(MonotonicArray.as_seq @x0
@x3
(MonotonicArray.prefix @x0
@x1
@x2
@x3)
@x5)
@x20))
)

;; def=Prims.fst(441,83-441,96); use=Protocol.fst(521,24-521,30)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Protocol.fst(521,24-521,30)
(ApplyTT @x22
@x28)
)
)
 
;;no pats
:qid @query.55))
)
)
 
;;no pats
:qid @query.54))
)
 
;;no pats
:qid @query.53))
)
 
;;no pats
:qid @query.52))
)
)
 
;;no pats
:qid @query.51))
)
 
;;no pats
:qid @query.50))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=Protocol.fst(521,8-522,66)
(not 
;; def=Protocol.fst(521,11-521,18); use=Protocol.fst(521,11-521,18)
(= (Prims.op_LessThan @x20
@x3)
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=Protocol.fst(521,8-522,66)
(forall ((@x23 Term))
 (! (implies (and (HasType @x23
Prims.bool)

;; def=Protocol.fst(521,11-522,66); use=Protocol.fst(521,11-522,66)
(= (Prims.op_LessThan @x20
@x3)
@x23)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(521,8-522,66)
(and (implies 
;; def=Protocol.fst(520,19-520,33); use=Protocol.fst(522,34-522,35)
(< (BoxInt_proj_0 @x20)
(BoxInt_proj_0 (Prims.op_Addition @x3
@x4)))


;; def=FStar.Seq.Base.fsti(32,40-32,52); use=Protocol.fst(522,34-522,35)
(or label_39

;; def=FStar.Seq.Base.fsti(32,40-32,52); use=Protocol.fst(522,34-522,35)
(< (BoxInt_proj_0 @x20)
(BoxInt_proj_0 (FStar.Seq.Base.length (FStar.Pervasives.Native.option @x0)
(MonotonicArray.as_seq @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5))))
)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(521,8-522,66)
(forall ((@x24 Term))
 (! (implies (and (HasType @x24
(Tm_refine_9007fbc417d54bac8a69eb57c27f77cb @x3
@x4))

;; def=FStar.Seq.Base.fsti(32,34-32,35); use=Protocol.fst(521,8-522,66)
(= @x20
@x24)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(521,8-522,66)
(forall ((@x25 Term))
 (! (implies (and (HasType @x25
(FStar.Pervasives.Native.option @x0))

;; def=Prims.fst(175,35-175,36); use=Protocol.fst(521,8-522,66)
(= (FStar.Seq.Base.index (FStar.Pervasives.Native.option @x0)
(MonotonicArray.as_seq @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)
@x20)
@x25)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(521,8-522,66)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(522,56-522,65)
(or label_40

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(522,56-522,65)
(>= (BoxInt_proj_0 (Prims.op_Subtraction @x20
@x3))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=FStar.Seq.Base.fsti(32,40-32,52); use=Protocol.fst(522,56-522,65)
(or label_41

;; def=FStar.Seq.Base.fsti(32,40-32,52); use=Protocol.fst(522,56-522,65)
(< (BoxInt_proj_0 (Prims.op_Subtraction @x20
@x3))
(BoxInt_proj_0 (FStar.Seq.Base.length (FStar.Pervasives.Native.option @x0)
(MonotonicArray.as_seq @x0
@x4
(MonotonicArray.prefix @x0
(Prims.op_Subtraction @x1
@x3)
(MonotonicArray.suffix @x0
@x1
@x2
@x3)
@x4)
@x5))))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(521,8-522,66)
(forall ((@x26 Term))
 (! (implies (and (HasType @x26
(Tm_refine_39e8d89b7b9a6a218b28cd8240c1c44d @x0
@x4
@x1
@x3
@x2
@x5))

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(521,8-522,66)
(= @x26
(Prims.op_Subtraction @x20
@x3))
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(521,8-522,66)
(forall ((@x27 Term))
 (! (implies (and (HasType @x27
(FStar.Pervasives.Native.option @x0))

;; def=Prims.fst(175,42-175,43); use=Protocol.fst(521,8-522,66)
(= (FStar.Seq.Base.index (FStar.Pervasives.Native.option @x0)
(MonotonicArray.as_seq @x0
@x4
(MonotonicArray.prefix @x0
(Prims.op_Subtraction @x1
@x3)
(MonotonicArray.suffix @x0
@x1
@x2
@x3)
@x4)
@x5)
(Prims.op_Subtraction @x20
@x3))
@x27)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(521,8-522,66)
(forall ((@x28 Term))
 (! (implies (and (HasType @x28
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=Protocol.fst(521,8-522,66)
(= (Prims.eq2 (FStar.Pervasives.Native.option @x0)
(FStar.Seq.Base.index (FStar.Pervasives.Native.option @x0)
(MonotonicArray.as_seq @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)
@x20)
(FStar.Seq.Base.index (FStar.Pervasives.Native.option @x0)
(MonotonicArray.as_seq @x0
@x4
(MonotonicArray.prefix @x0
(Prims.op_Subtraction @x1
@x3)
(MonotonicArray.suffix @x0
@x1
@x2
@x3)
@x4)
@x5)
(Prims.op_Subtraction @x20
@x3)))
@x28)
)

;; def=Prims.fst(441,29-441,97); use=Protocol.fst(522,13-522,19)
(and 
;; def=Protocol.fst(522,20-522,66); use=Protocol.fst(522,13-522,19)
(or label_42

;; def=Protocol.fst(522,20-522,66); use=Protocol.fst(522,13-522,19)
(= (FStar.Seq.Base.index (FStar.Pervasives.Native.option @x0)
(MonotonicArray.as_seq @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)
@x20)
(FStar.Seq.Base.index (FStar.Pervasives.Native.option @x0)
(MonotonicArray.as_seq @x0
@x4
(MonotonicArray.prefix @x0
(Prims.op_Subtraction @x1
@x3)
(MonotonicArray.suffix @x0
@x1
@x2
@x3)
@x4)
@x5)
(Prims.op_Subtraction @x20
@x3)))
)


;; def=Prims.fst(441,36-441,97); use=Protocol.fst(522,13-522,19)
(forall ((@x29 Term))
 (! (implies (and (HasType @x29
Prims.unit)

;; def=Protocol.fst(522,20-522,66); use=Protocol.fst(522,13-522,19)
(= (FStar.Seq.Base.index (FStar.Pervasives.Native.option @x0)
(MonotonicArray.as_seq @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)
@x20)
(FStar.Seq.Base.index (FStar.Pervasives.Native.option @x0)
(MonotonicArray.as_seq @x0
@x4
(MonotonicArray.prefix @x0
(Prims.op_Subtraction @x1
@x3)
(MonotonicArray.suffix @x0
@x1
@x2
@x3)
@x4)
@x5)
(Prims.op_Subtraction @x20
@x3)))
)

;; def=Prims.fst(441,83-441,96); use=Protocol.fst(522,13-522,19)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Protocol.fst(522,13-522,19)
(ApplyTT @x22
@x29)
)
)
 
;;no pats
:qid @query.62))
)
)
 
;;no pats
:qid @query.61))
)
 
;;no pats
:qid @query.60))
)
 
;;no pats
:qid @query.59))
)
)
 
;;no pats
:qid @query.58))
)
 
;;no pats
:qid @query.57))
)
)
 
;;no pats
:qid @query.56))
))
)
 
;;no pats
:qid @query.48))
)
 
;;no pats
:qid @query.46))
)
)
 
;;no pats
:qid @query.40))


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(517,3-524,36)
(forall ((@x20 Term))
 (! (implies (HasType @x20
(Tm_arrow_10efcb77f376908058dac21bc6621f8b @x5
@x2
@x1
@x0
@x4
@x3))

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(517,3-524,36)
(and 
;; def=dummy(0,0-0,0); use=Protocol.fst(517,3-524,36)
(forall ((@x21 Term))
 (! (implies (HasType @x21
(Tm_refine_9007fbc417d54bac8a69eb57c27f77cb @x3
@x4))

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(524,33-524,36)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(524,33-524,36)
(or label_43

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(524,33-524,36)
(>= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(524,33-524,36)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(524,33-524,36)
(= @x22
(Prims.op_Addition @x3
@x4))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(524,33-524,36)
(and 
;; def=Prims.fst(680,18-680,24); use=Protocol.fst(524,33-524,36)
(or label_44

;; def=Prims.fst(680,18-680,24); use=Protocol.fst(524,33-524,36)
(>= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(524,33-524,36)
(or label_45

;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(524,33-524,36)
(<= (BoxInt_proj_0 (Prims.op_Addition @x3
@x4))
(BoxInt_proj_0 @x1))
)


;; def=Prims.fst(356,2-356,58); use=Protocol.fst(524,33-524,36)
(forall ((@x23 Term))
 (! (implies (and (HasType @x23
(Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x1))

;; def=Prims.fst(356,26-356,41); use=Protocol.fst(524,33-524,36)
(= @x23
(Prims.op_Addition @x3
@x4))
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(524,33-524,36)
(forall ((@x24 Term))
 (! (implies (and (HasType @x24
(MonotonicArray.t @x0
(Prims.op_Addition @x3
@x4)))

;; def=MonotonicArray.fsti(96,32-96,35); use=Protocol.fst(524,33-524,36)
(= (MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x24)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(524,33-524,36)
(forall ((@x25 Term))
 (! (implies (and (HasType @x25
(FStar.Seq.Base.seq (FStar.Pervasives.Native.option @x0)))

;; def=FStar.Seq.Base.fsti(32,23-32,24); use=Protocol.fst(524,33-524,36)
(= (MonotonicArray.as_seq @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)
@x25)


;; def=Protocol.fst(520,19-520,33); use=Protocol.fst(524,33-524,36)
(< (BoxInt_proj_0 @x21)
(BoxInt_proj_0 (Prims.op_Addition @x3
@x4)))
)

;; def=FStar.Seq.Base.fsti(32,40-32,52); use=Protocol.fst(520,97-520,98)
(or label_46

;; def=FStar.Seq.Base.fsti(32,40-32,52); use=Protocol.fst(524,33-524,36)
(< (BoxInt_proj_0 @x21)
(BoxInt_proj_0 (FStar.Seq.Base.length (FStar.Pervasives.Native.option @x0)
(MonotonicArray.as_seq @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5))))
)
)
 
;;no pats
:qid @query.68))
)
 
;;no pats
:qid @query.67))
)
 
;;no pats
:qid @query.66))
)
)
 
;;no pats
:qid @query.65))
)
)
 
;;no pats
:qid @query.64))


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(517,3-524,36)
(forall ((@x21 Term))
 (! (implies (and (HasType @x21
(Tm_arrow_0cf09d795c0e8186a2b13138068826fd @x4
@x3))

;; def=FStar.Classical.fsti(240,30-240,31); use=Protocol.fst(517,3-524,36)
(= (Tm_abs_e050a26d39d8141e40d242eeee6020f4 @x0
@x1
@x2
@x5
@x4
@x3)
@x21)
)

;; def=Prims.fst(441,36-441,97); use=Protocol.fst(524,20-524,32)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
Prims.unit)

;; def=FStar.Classical.fsti(241,12-241,32); use=Protocol.fst(524,20-524,32)
(forall ((@x23 Term))
 (! (implies (HasType @x23
(Tm_refine_9007fbc417d54bac8a69eb57c27f77cb @x3
@x4))

;; def=Protocol.fst(520,44-520,100); use=Protocol.fst(524,20-524,32)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x0
(FStar.Seq.Base.index (FStar.Pervasives.Native.option @x0)
(MonotonicArray.as_seq @x0
(Prims.op_Addition @x3
@x4)
(MonotonicArray.prefix @x0
@x1
@x2
(Prims.op_Addition @x3
@x4))
@x5)
@x23)))
)
 
;;no pats
:qid @query.71))
)

;; def=Prims.fst(441,83-441,96); use=Protocol.fst(524,20-524,32)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Protocol.fst(524,20-524,32)
(ApplyTT @x6
@x22)
)
)
 
;;no pats
:qid @query.70))
)
 
;;no pats
:qid @query.69))
)
)
 
;;no pats
:qid @query.63))
)
)
 
;;no pats
:qid @query.34))
)
 
;;no pats
:qid @query.33))
)
 
;;no pats
:qid @query.32))
)
)
 
;;no pats
:qid @query.31))
)
)
 
;;no pats
:qid @query.30))
)
 
;;no pats
:qid @query.29))
)
 
;;no pats
:qid @query.28))
)
)
 
;;no pats
:qid @query.27))
)
 
;;no pats
:qid @query.26))
)
)
 
;;no pats
:qid @query.25))
)
)
 
;;no pats
:qid @query.24))
)
 
;;no pats
:qid @query.23))
)
 
;;no pats
:qid @query.22))
)
)
 
;;no pats
:qid @query.20))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_46")
(eval label_46)
(echo "label_45")
(eval label_45)
(echo "label_44")
(eval label_44)
(echo "label_43")
(eval label_43)
(echo "label_42")
(eval label_42)
(echo "label_41")
(eval label_41)
(echo "label_40")
(eval label_40)
(echo "label_39")
(eval label_39)
(echo "label_38")
(eval label_38)
(echo "label_37")
(eval label_37)
(echo "label_36")
(eval label_36)
(echo "label_35")
(eval label_35)
(echo "label_34")
(eval label_34)
(echo "label_33")
(eval label_33)
(echo "label_32")
(eval label_32)
(echo "label_31")
(eval label_31)
(echo "label_30")
(eval label_30)
(echo "label_29")
(eval label_29)
(echo "label_28")
(eval label_28)
(echo "label_27")
(eval label_27)
(echo "label_26")
(eval label_26)
(echo "label_25")
(eval label_25)
(echo "label_24")
(eval label_24)
(echo "label_23")
(eval label_23)
(echo "label_22")
(eval label_22)
(echo "label_21")
(eval label_21)
(echo "label_20")
(eval label_20)
(echo "label_19")
(eval label_19)
(echo "label_18")
(eval label_18)
(echo "label_17")
(eval label_17)
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Protocol.extend_initialization, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, bool_inversion, disc_equation_FStar.Pervasives.Native.Some, equation_MonotonicArray.array, equation_MonotonicArray.prefix, equation_MonotonicArray.suffix, equation_Prims.nat, equation_Protocol.fully_initialized_in, fuel_guarded_inversion_FStar.Pervasives.Native.option, int_inversion, int_typing, kinding_FStar.Pervasives.Native.option@tok, lemma_FStar.Seq.Base.lemma_index_slice, lemma_FStar.Seq.Properties.slice_slice, lemma_MonotonicArray.lemma_as_seq_length, lemma_MonotonicArray.lemma_sub_contains, lemma_MonotonicArray.lemma_sub_is_slice, lemma_MonotonicArray.lemma_sub_preserves_array_mutable_flag, primitive_Prims.op_Addition, primitive_Prims.op_LessThan, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_1ba8fd8bb363097813064c67740b2de5, refinement_interpretation_Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8, refinement_interpretation_Tm_refine_39e8d89b7b9a6a218b28cd8240c1c44d, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_6f684e27d6af9965634108bcfe981953, refinement_interpretation_Tm_refine_9007fbc417d54bac8a69eb57c27f77cb, refinement_interpretation_Tm_refine_d3d07693cd71377864ef84dc97d10ec1, refinement_interpretation_Tm_refine_f984cba283a0017499e468d307a8fd1d, typing_FStar.Pervasives.Native.uu___is_Some, typing_MonotonicArray.as_seq

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let extend_initialization


; <Start encoding let extend_initialization>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Protocol.extend_initialization (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Protocol.extend_initialization@tok () Term)

; </end encoding let extend_initialization>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.guard_free; Namespace Prims
(assert (! 
;; def=Prims.fst(346,5-346,15); use=Prims.fst(346,5-346,15)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.guard_free @x0)
Tm_type))
 

:pattern ((Prims.guard_free @x0))
:qid typing_Prims.guard_free))

:named typing_Prims.guard_free))
(push) ;; push{2

; Starting query at Protocol.fst(535,10-542,76)

(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_f3d030fd3c7708a629843ece19a805f3 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(529,10-529,100); use=Protocol.fst(529,10-529,100)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_f3d030fd3c7708a629843ece19a805f3 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_f3d030fd3c7708a629843ece19a805f3 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_f3d030fd3c7708a629843ece19a805f3))

:named refinement_kinding_Tm_refine_f3d030fd3c7708a629843ece19a805f3))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(529,10-529,100); use=Protocol.fst(529,10-529,100)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_f3d030fd3c7708a629843ece19a805f3 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Protocol.connection)

;; def=Protocol.fst(529,24-529,34); use=Protocol.fst(529,24-529,34)
(BoxBool_proj_0 (Protocol.receiver @x1))


;; def=Protocol.fst(529,38-529,98); use=Protocol.fst(529,38-529,98)
(Valid 
;; def=Protocol.fst(529,38-529,98); use=Protocol.fst(529,38-529,98)
(FStar.Set.disjoint Prims.nat
(Protocol.connection_footprint @x1)
(MonotonicArray.array_footprint Protocol.byte
@x2
@x3))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_f3d030fd3c7708a629843ece19a805f3 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_f3d030fd3c7708a629843ece19a805f3))

:named refinement_interpretation_Tm_refine_f3d030fd3c7708a629843ece19a805f3))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f3d030fd3c7708a629843ece19a805f3
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(529,10-529,100); use=Protocol.fst(529,10-529,100)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_f3d030fd3c7708a629843ece19a805f3 @x0
@x1)))
(Valid (Prims.hasEq Protocol.connection)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_f3d030fd3c7708a629843ece19a805f3 @x0
@x1))))
:qid haseqTm_refine_f3d030fd3c7708a629843ece19a805f3))

:named haseqTm_refine_f3d030fd3c7708a629843ece19a805f3))

(declare-fun Tm_refine_9369c00496f340c518775121622f1d8d (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(531,10-531,41); use=Protocol.fst(531,10-531,41)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_9369c00496f340c518775121622f1d8d @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_9369c00496f340c518775121622f1d8d @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_9369c00496f340c518775121622f1d8d))

:named refinement_kinding_Tm_refine_9369c00496f340c518775121622f1d8d))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(531,10-531,41); use=Protocol.fst(531,10-531,41)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_9369c00496f340c518775121622f1d8d @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=Protocol.fst(531,20-531,39); use=Protocol.fst(531,20-531,39)
(= @x1
(Protocol.ctr @x2
@x3))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_9369c00496f340c518775121622f1d8d @x2
@x3)))
:qid refinement_interpretation_Tm_refine_9369c00496f340c518775121622f1d8d))

:named refinement_interpretation_Tm_refine_9369c00496f340c518775121622f1d8d))
;;;;;;;;;;;;;;;;haseq for Tm_refine_9369c00496f340c518775121622f1d8d
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(531,10-531,41); use=Protocol.fst(531,10-531,41)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_9369c00496f340c518775121622f1d8d @x0
@x1)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_9369c00496f340c518775121622f1d8d @x0
@x1))))
:qid haseqTm_refine_9369c00496f340c518775121622f1d8d))

:named haseqTm_refine_9369c00496f340c518775121622f1d8d))
(declare-fun Tm_refine_cbf50e93edf9116e0fd7249b89712a6f (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(532,10-532,45); use=Protocol.fst(532,10-532,45)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_cbf50e93edf9116e0fd7249b89712a6f @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_cbf50e93edf9116e0fd7249b89712a6f @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_cbf50e93edf9116e0fd7249b89712a6f))

:named refinement_kinding_Tm_refine_cbf50e93edf9116e0fd7249b89712a6f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(532,10-532,45); use=Protocol.fst(532,10-532,45)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_cbf50e93edf9116e0fd7249b89712a6f @x2))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=Protocol.fst(532,19-532,43); use=Protocol.fst(532,19-532,43)
(<= (BoxInt_proj_0 (Protocol.fragment_size Dummy_value))
(BoxInt_proj_0 (Prims.op_Subtraction @x2
@x1)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_cbf50e93edf9116e0fd7249b89712a6f @x2)))
:qid refinement_interpretation_Tm_refine_cbf50e93edf9116e0fd7249b89712a6f))

:named refinement_interpretation_Tm_refine_cbf50e93edf9116e0fd7249b89712a6f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_cbf50e93edf9116e0fd7249b89712a6f
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(532,10-532,45); use=Protocol.fst(532,10-532,45)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_cbf50e93edf9116e0fd7249b89712a6f @x0)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_cbf50e93edf9116e0fd7249b89712a6f @x0))))
:qid haseqTm_refine_cbf50e93edf9116e0fd7249b89712a6f))

:named haseqTm_refine_cbf50e93edf9116e0fd7249b89712a6f))









; Encoding query formula : forall (n: Prims.nat)
;   (file: MonotonicArray.array Protocol.byte n)
;   (c:
;   Protocol.connection
;     { Protocol.receiver c /\
;       FStar.Set.disjoint (Protocol.connection_footprint c) (MonotonicArray.array_footprint file) })
;   (h_init: FStar.Monotonic.Heap.heap{Protocol.live_connection h_init c})
;   (from: Prims.nat{from = Protocol.ctr c h_init})
;   (pos: Prims.nat{Protocol.fragment_size <= n - pos})
;   (ropt: FStar.Pervasives.Native.option (r: Prims.nat{r <= n}))
;   (h1: FStar.Monotonic.Heap.heap{Protocol.live_connection h1 c}).
;   (*  - Could not prove post-condition
; *)
;   forall (k: Prims.pure_post Prims.logical).
;     (forall (x: Prims.logical). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;     (~(None? ropt) /\ ~(Some? ropt) ==> Prims.l_False) /\
;     (~(None? ropt) ==>
;       (forall (b: r: Prims.nat{r <= n}).
;           ropt == FStar.Pervasives.Native.Some b ==>
;           (b <= n ==> b >= 0 /\ b <= b) /\
;           (MonotonicArray.all_init_i_j (MonotonicArray.prefix file b) 0 b ==>
;             Prims.auto_squash (FStar.ST.witnessed (MonotonicArray.mutable_pred (MonotonicArray.prefix
;                           file
;                           b)))) /\
;           (MonotonicArray.all_init_i_j (MonotonicArray.prefix file b) 0 b /\
;             Protocol.fully_initialized_in (MonotonicArray.prefix file b) h1 /\
;             from <= Protocol.ctr c h1 ==>
;             (Protocol.live_connection h1 c ==>
;               MonotonicArray.init_arr_in_heap (MonotonicArray.prefix file b) h1) /\
;             (forall (any_result: h1: FStar.Monotonic.Heap.heap{Protocol.live_connection h1 c}).
;                 h1 == any_result ==>
;                 (forall (any_result: FStar.Seq.Base.seq Protocol.byte).
;                     MonotonicArray.as_initialized_seq (MonotonicArray.prefix file b) h1 ==
;                     any_result ==>
;                     from <= Protocol.ctr c h1)))))


; Context: While encoding a query
; While typechecking the top-level declaration `let receive_aux_post`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
(MonotonicArray.array Protocol.byte
@x0))
(HasType @x2
(Tm_refine_f3d030fd3c7708a629843ece19a805f3 @x0
@x1))
(HasType @x3
(Tm_refine_12e73119c459be812384fdc8e6c9733a @x2))
(HasType @x4
(Tm_refine_9369c00496f340c518775121622f1d8d @x2
@x3))
(HasType @x5
(Tm_refine_cbf50e93edf9116e0fd7249b89712a6f @x0))
(HasType @x6
(FStar.Pervasives.Native.option (Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x0)))
(HasType @x7
(Tm_refine_12e73119c459be812384fdc8e6c9733a @x2)))
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Prims.pure_post Prims.logical))

;; def=Prims.fst(402,27-402,88); use=Protocol.fst(535,10-542,76)
(forall ((@x9 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=Protocol.fst(535,10-542,76)
(Valid 
;; def=Prims.fst(402,84-402,87); use=Protocol.fst(535,10-542,76)
(ApplyTT @x8
@x9)
)

 

:pattern ((ApplyTT @x8
@x9))
:qid @query.2))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(535,10-542,76)
(and (implies 
;; def=Protocol.fst(533,11-533,15); use=Protocol.fst(535,16-535,20)
(and 
;; def=Protocol.fst(533,11-533,15); use=Protocol.fst(535,16-535,20)
(not 
;; def=Protocol.fst(533,11-533,15); use=Protocol.fst(535,16-535,20)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None (Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x0)
@x6))
)


;; def=Protocol.fst(533,11-533,15); use=Protocol.fst(535,16-535,20)
(not 
;; def=Protocol.fst(533,11-533,15); use=Protocol.fst(535,16-535,20)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some (Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x0)
@x6))
)
)

label_1)
(implies 
;; def=Prims.fst(389,19-389,21); use=Protocol.fst(535,10-542,76)
(not 
;; def=Protocol.fst(533,11-533,15); use=Protocol.fst(535,16-535,20)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None (Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x0)
@x6))
)


;; def=Prims.fst(413,99-413,120); use=Protocol.fst(535,10-542,76)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x0))

;; def=Protocol.fst(533,11-537,18); use=Protocol.fst(535,16-537,18)
(= @x6
(FStar.Pervasives.Native.Some (Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x0)
@x9))
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(539,12-542,76)
(and (implies 
;; def=Protocol.fst(533,30-533,36); use=Protocol.fst(539,36-539,37)
(<= (BoxInt_proj_0 @x9)
(BoxInt_proj_0 @x0))


;; def=MonotonicArray.fsti(254,64-254,80); use=Protocol.fst(539,36-539,37)
(and 
;; def=MonotonicArray.fsti(254,64-254,70); use=Protocol.fst(539,36-539,37)
(or label_2

;; def=MonotonicArray.fsti(254,64-254,70); use=Protocol.fst(539,36-539,37)
(>= (BoxInt_proj_0 @x9)
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=MonotonicArray.fsti(254,74-254,80); use=Protocol.fst(539,36-539,37)
(or label_3

;; def=MonotonicArray.fsti(254,74-254,80); use=Protocol.fst(539,36-539,37)
(<= (BoxInt_proj_0 @x9)
(BoxInt_proj_0 @x9))
)
)
)
(implies 
;; def=Protocol.fst(539,12-539,37); use=Protocol.fst(539,12-539,37)
(Valid 
;; def=Protocol.fst(539,12-539,37); use=Protocol.fst(539,12-539,37)
(MonotonicArray.all_init_i_j Protocol.byte
@x9
(MonotonicArray.prefix Protocol.byte
@x0
@x1
@x9)
(BoxInt 0)
@x9)
)


;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(540,12-540,20)
(or label_4

;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(540,12-540,20)
(Valid 
;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(540,12-540,20)
(FStar.ST.witnessed (MonotonicArray.mutable_pred Protocol.byte
@x9
(MonotonicArray.prefix Protocol.byte
@x0
@x1
@x9)))
)
)
)
(implies 
;; def=Protocol.fst(539,12-541,28); use=Protocol.fst(539,12-541,28)
(and 
;; def=Protocol.fst(539,12-539,37); use=Protocol.fst(539,12-539,37)
(Valid 
;; def=Protocol.fst(539,12-539,37); use=Protocol.fst(539,12-539,37)
(MonotonicArray.all_init_i_j Protocol.byte
@x9
(MonotonicArray.prefix Protocol.byte
@x0
@x1
@x9)
(BoxInt 0)
@x9)
)


;; def=Protocol.fst(540,12-540,46); use=Protocol.fst(540,12-540,46)
(Valid 
;; def=Protocol.fst(540,12-540,46); use=Protocol.fst(540,12-540,46)
(Protocol.fully_initialized_in Protocol.byte
@x9
(MonotonicArray.prefix Protocol.byte
@x0
@x1
@x9)
@x7)
)


;; def=Protocol.fst(541,12-541,28); use=Protocol.fst(541,12-541,28)
(<= (BoxInt_proj_0 @x4)
(BoxInt_proj_0 (Protocol.ctr @x2
@x7)))
)


;; def=Prims.fst(459,77-459,89); use=Protocol.fst(539,12-542,76)
(and (implies 
;; def=Protocol.fst(534,19-534,41); use=Protocol.fst(542,52-542,54)
(Valid 
;; def=Protocol.fst(534,19-534,41); use=Protocol.fst(542,52-542,54)
(Protocol.live_connection @x7
@x2)
)


;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(542,52-542,54)
(or label_5

;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(542,52-542,54)
(Valid 
;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(542,52-542,54)
(MonotonicArray.init_arr_in_heap Protocol.byte
@x9
(MonotonicArray.prefix Protocol.byte
@x0
@x1
@x9)
@x7)
)
)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(539,12-542,76)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(Tm_refine_12e73119c459be812384fdc8e6c9733a @x2))

;; def=MonotonicArray.fsti(283,35-283,36); use=Protocol.fst(539,12-542,76)
(= @x7
@x10)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(539,12-542,76)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(FStar.Seq.Base.seq Protocol.byte))

;; def=Protocol.fst(341,16-542,55); use=Protocol.fst(539,12-542,76)
(= (MonotonicArray.as_initialized_seq Protocol.byte
@x9
(MonotonicArray.prefix Protocol.byte
@x0
@x1
@x9)
@x7)
@x11)
)

;; def=Protocol.fst(341,65-341,75); use=Protocol.fst(542,63-542,73)
(or label_6

;; def=Protocol.fst(341,65-341,75); use=Protocol.fst(542,63-542,73)
(<= (BoxInt_proj_0 @x4)
(BoxInt_proj_0 (Protocol.ctr @x2
@x7)))
)
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
))
)
 
;;no pats
:qid @query.3))
))
)
 
;;no pats
:qid @query.1)))
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Protocol.receive_aux_post, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, b2t_def, data_elim_FStar.Pervasives.Native.Some, disc_equation_FStar.Pervasives.Native.None, disc_equation_FStar.Pervasives.Native.Some, equation_ArrayUtils.init_at_seq, equation_MonotonicArray.array, equation_MonotonicArray.init_arr_in_heap, equation_MonotonicArray.init_arr_in_heap_i_j, equation_MonotonicArray.prefix, equation_Prims.nat, equation_Protocol.fully_initialized_in, fuel_guarded_inversion_FStar.Pervasives.Native.option, int_inversion, int_typing, lemma_MonotonicArray.lemma_sub_preserves_array_mutable_flag, primitive_Prims.op_Addition, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Some_v, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_6f684e27d6af9965634108bcfe981953, refinement_interpretation_Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d, refinement_interpretation_Tm_refine_f984cba283a0017499e468d307a8fd1d, typing_Protocol.byte

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at Protocol.fst(526,0-542,76)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_f3d030fd3c7708a629843ece19a805f3 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(529,10-529,100); use=Protocol.fst(529,10-529,100)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_f3d030fd3c7708a629843ece19a805f3 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_f3d030fd3c7708a629843ece19a805f3 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_f3d030fd3c7708a629843ece19a805f3))

:named refinement_kinding_Tm_refine_f3d030fd3c7708a629843ece19a805f3))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(529,10-529,100); use=Protocol.fst(529,10-529,100)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_f3d030fd3c7708a629843ece19a805f3 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Protocol.connection)

;; def=Protocol.fst(529,24-529,34); use=Protocol.fst(529,24-529,34)
(BoxBool_proj_0 (Protocol.receiver @x1))


;; def=Protocol.fst(529,38-529,98); use=Protocol.fst(529,38-529,98)
(Valid 
;; def=Protocol.fst(529,38-529,98); use=Protocol.fst(529,38-529,98)
(FStar.Set.disjoint Prims.nat
(Protocol.connection_footprint @x1)
(MonotonicArray.array_footprint Protocol.byte
@x2
@x3))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_f3d030fd3c7708a629843ece19a805f3 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_f3d030fd3c7708a629843ece19a805f3))

:named refinement_interpretation_Tm_refine_f3d030fd3c7708a629843ece19a805f3))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f3d030fd3c7708a629843ece19a805f3
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(529,10-529,100); use=Protocol.fst(529,10-529,100)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_f3d030fd3c7708a629843ece19a805f3 @x0
@x1)))
(Valid (Prims.hasEq Protocol.connection)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_f3d030fd3c7708a629843ece19a805f3 @x0
@x1))))
:qid haseqTm_refine_f3d030fd3c7708a629843ece19a805f3))

:named haseqTm_refine_f3d030fd3c7708a629843ece19a805f3))


; Encoding query formula : forall (n: Prims.nat) (file: MonotonicArray.array Protocol.byte n).
;   (forall (c: Protocol.connection). Protocol.receiver c ==> Prims.hasEq Prims.nat) /\
;   (forall (c:
;       Protocol.connection
;         { Protocol.receiver c /\
;           FStar.Set.disjoint (Protocol.connection_footprint c) (MonotonicArray.array_footprint file)
;         })
;       (h_init: FStar.Monotonic.Heap.heap{Protocol.live_connection h_init c}).
;       (*  - Subtyping check failed
;   - Expected type Type0 got type Type0
; *)
;       forall (from: Prims.nat).
;         (*  - Subtyping check failed
;   - Expected type Prims.eqtype got type Type0
; *)
;         Prims.hasEq Prims.nat)


; Context: While encoding a query
; While checking for top-level effects
; While typechecking the top-level declaration `let receive_aux_post`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
(MonotonicArray.array Protocol.byte
@x0)))
(and 
;; def=dummy(0,0-0,0); use=Protocol.fst(535,10-542,76)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
Protocol.connection)

;; def=Protocol.fst(529,24-529,34); use=Protocol.fst(535,10-542,76)
(BoxBool_proj_0 (Protocol.receiver @x2))
)

;; def=Prims.fst(73,23-73,30); use=Protocol.fst(529,52-529,72)
(or label_1

;; def=Prims.fst(73,23-73,30); use=Protocol.fst(535,10-542,76)
(Valid 
;; def=Prims.fst(73,23-73,30); use=Protocol.fst(535,10-542,76)
(Prims.hasEq Prims.nat)
)
)
)
 
;;no pats
:qid @query.1))

(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
(Tm_refine_f3d030fd3c7708a629843ece19a805f3 @x0
@x1))
(HasType @x3
(Tm_refine_12e73119c459be812384fdc8e6c9733a @x2)))

;; def=dummy(0,0-0,0); use=Protocol.fst(535,10-542,76)
(forall ((@x4 Term))
 (! (implies (HasType @x4
Prims.nat)

;; def=Prims.fst(73,23-73,30); use=Protocol.fst(531,20-531,24)
(or label_2

;; def=Prims.fst(73,23-73,30); use=Protocol.fst(535,10-542,76)
(Valid 
;; def=Prims.fst(73,23-73,30); use=Protocol.fst(535,10-542,76)
(Prims.hasEq Prims.nat)
)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))))
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Protocol.receive_aux_post, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Prims.eqtype, equation_Prims.nat, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let receive_aux_post


; <Start encoding let receive_aux_post>

(declare-fun Tm_refine_f3d030fd3c7708a629843ece19a805f3 (Term Term) Term)

(declare-fun Tm_refine_9369c00496f340c518775121622f1d8d (Term Term) Term)
(declare-fun Tm_refine_cbf50e93edf9116e0fd7249b89712a6f (Term) Term)


(declare-fun Protocol.receive_aux_post (Term Term Term Term Term Term Term Term) Term)






;;;;;;;;;;;;;;;;file: MonotonicArray.array byte n ->     c:       connection         { receiver c /\           FStar.Set.disjoint (connection_footprint c) (MonotonicArray.array_footprint file) } ->     h_init: FStar.Monotonic.Heap.heap{live_connection h_init c} ->     from: Prims.nat{from = ctr c h_init} ->     pos: Prims.nat{fragment_size <= n - pos} ->     ropt: FStar.Pervasives.Native.option (r: Prims.nat{r <= n}) ->     h1: FStar.Monotonic.Heap.heap{live_connection h1 c}   -> Prims.logical
(declare-fun Tm_arrow_5aca2b660921abc8e4a90d24d5156563 () Term)
(declare-fun Protocol.receive_aux_post@tok () Term)








; </end encoding let receive_aux_post>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Protocol.modifies_r; Namespace Protocol
(assert (! 
;; def=Protocol.fst(248,4-248,14); use=Protocol.fst(248,4-248,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Tm_refine_e478ac71fa1875d2f6d4c23ab44e0977)
(HasType @x2
(MonotonicArray.array Protocol.byte
@x0))
(HasType @x3
FStar.Monotonic.Heap.heap)
(HasType @x4
FStar.Monotonic.Heap.heap))
(HasType (Protocol.modifies_r @x0
@x1
@x2
@x3
@x4)
Tm_type))
 

:pattern ((Protocol.modifies_r @x0
@x1
@x2
@x3
@x4))
:qid typing_Protocol.modifies_r))

:named typing_Protocol.modifies_r))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.ST.st_pre; Namespace FStar.ST
(assert (! (HasType FStar.ST.st_pre
Tm_type)
:named typing_FStar.ST.st_pre))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.ST.gst_pre; Namespace FStar.ST
(assert (! (HasType FStar.ST.gst_pre
Tm_type)
:named typing_FStar.ST.gst_pre))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.st_pre_h; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(437,4-437,12); use=FStar.Pervasives.fsti(437,4-437,12)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Pervasives.st_pre_h @x0)
Tm_type))
 

:pattern ((FStar.Pervasives.st_pre_h @x0))
:qid typing_FStar.Pervasives.st_pre_h))

:named typing_FStar.Pervasives.st_pre_h))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Protocol.receive_aux_post; Namespace Protocol
(assert (! 
;; def=Protocol.fst(529,10-529,100); use=Protocol.fst(529,10-529,100)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_f3d030fd3c7708a629843ece19a805f3 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_f3d030fd3c7708a629843ece19a805f3 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_f3d030fd3c7708a629843ece19a805f3))

:named refinement_kinding_Tm_refine_f3d030fd3c7708a629843ece19a805f3))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Protocol.receive_aux_post; Namespace Protocol
(assert (! 
;; def=Protocol.fst(532,10-532,45); use=Protocol.fst(532,10-532,45)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_cbf50e93edf9116e0fd7249b89712a6f @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_cbf50e93edf9116e0fd7249b89712a6f @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_cbf50e93edf9116e0fd7249b89712a6f))

:named refinement_kinding_Tm_refine_cbf50e93edf9116e0fd7249b89712a6f))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Protocol.receive_aux_post; Namespace Protocol
(assert (! 
;; def=Protocol.fst(531,10-531,41); use=Protocol.fst(531,10-531,41)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_9369c00496f340c518775121622f1d8d @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_9369c00496f340c518775121622f1d8d @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_9369c00496f340c518775121622f1d8d))

:named refinement_kinding_Tm_refine_9369c00496f340c518775121622f1d8d))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Protocol.receive_aux_post; Namespace Protocol
(assert (! 
;; def=Protocol.fst(529,10-529,100); use=Protocol.fst(529,10-529,100)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_f3d030fd3c7708a629843ece19a805f3 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Protocol.connection)

;; def=Protocol.fst(529,24-529,34); use=Protocol.fst(529,24-529,34)
(BoxBool_proj_0 (Protocol.receiver @x1))


;; def=Protocol.fst(529,38-529,98); use=Protocol.fst(529,38-529,98)
(Valid 
;; def=Protocol.fst(529,38-529,98); use=Protocol.fst(529,38-529,98)
(FStar.Set.disjoint Prims.nat
(Protocol.connection_footprint @x1)
(MonotonicArray.array_footprint Protocol.byte
@x2
@x3))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_f3d030fd3c7708a629843ece19a805f3 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_f3d030fd3c7708a629843ece19a805f3))

:named refinement_interpretation_Tm_refine_f3d030fd3c7708a629843ece19a805f3))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Protocol.receive_aux_post; Namespace Protocol
(assert (! 
;; def=Protocol.fst(532,10-532,45); use=Protocol.fst(532,10-532,45)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_cbf50e93edf9116e0fd7249b89712a6f @x2))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=Protocol.fst(532,19-532,43); use=Protocol.fst(532,19-532,43)
(<= (BoxInt_proj_0 (Protocol.fragment_size Dummy_value))
(BoxInt_proj_0 (Prims.op_Subtraction @x2
@x1)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_cbf50e93edf9116e0fd7249b89712a6f @x2)))
:qid refinement_interpretation_Tm_refine_cbf50e93edf9116e0fd7249b89712a6f))

:named refinement_interpretation_Tm_refine_cbf50e93edf9116e0fd7249b89712a6f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Protocol.receive_aux_post; Namespace Protocol
(assert (! 
;; def=Protocol.fst(531,10-531,41); use=Protocol.fst(531,10-531,41)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_9369c00496f340c518775121622f1d8d @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=Protocol.fst(531,20-531,39); use=Protocol.fst(531,20-531,39)
(= @x1
(Protocol.ctr @x2
@x3))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_9369c00496f340c518775121622f1d8d @x2
@x3)))
:qid refinement_interpretation_Tm_refine_9369c00496f340c518775121622f1d8d))

:named refinement_interpretation_Tm_refine_9369c00496f340c518775121622f1d8d))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! 
;; def=Prims.fst(286,16-286,45); use=Prims.fst(286,30-286,45)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0)
Tm_type))
:qid kinding_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da))

:named kinding_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f3d030fd3c7708a629843ece19a805f3
;;; Fact-ids: Name Protocol.receive_aux_post; Namespace Protocol
(assert (! 
;; def=Protocol.fst(529,10-529,100); use=Protocol.fst(529,10-529,100)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_f3d030fd3c7708a629843ece19a805f3 @x0
@x1)))
(Valid (Prims.hasEq Protocol.connection)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_f3d030fd3c7708a629843ece19a805f3 @x0
@x1))))
:qid haseqTm_refine_f3d030fd3c7708a629843ece19a805f3))

:named haseqTm_refine_f3d030fd3c7708a629843ece19a805f3))
;;;;;;;;;;;;;;;;haseq for Tm_refine_cbf50e93edf9116e0fd7249b89712a6f
;;; Fact-ids: Name Protocol.receive_aux_post; Namespace Protocol
(assert (! 
;; def=Protocol.fst(532,10-532,45); use=Protocol.fst(532,10-532,45)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_cbf50e93edf9116e0fd7249b89712a6f @x0)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_cbf50e93edf9116e0fd7249b89712a6f @x0))))
:qid haseqTm_refine_cbf50e93edf9116e0fd7249b89712a6f))

:named haseqTm_refine_cbf50e93edf9116e0fd7249b89712a6f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_9369c00496f340c518775121622f1d8d
;;; Fact-ids: Name Protocol.receive_aux_post; Namespace Protocol
(assert (! 
;; def=Protocol.fst(531,10-531,41); use=Protocol.fst(531,10-531,41)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_9369c00496f340c518775121622f1d8d @x0
@x1)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_9369c00496f340c518775121622f1d8d @x0
@x1))))
:qid haseqTm_refine_9369c00496f340c518775121622f1d8d))

:named haseqTm_refine_9369c00496f340c518775121622f1d8d))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.ST.st_pre; Namespace FStar.ST
(assert (! (HasType FStar.ST.st_pre
Tm_type)
:named function_token_typing_FStar.ST.st_pre))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.ST.gst_pre; Namespace FStar.ST
(assert (! (HasType FStar.ST.gst_pre
Tm_type)
:named function_token_typing_FStar.ST.gst_pre))
;;;;;;;;;;;;;;;;Equation for Protocol.modifies_r
;;; Fact-ids: Name Protocol.modifies_r; Namespace Protocol
(assert (! 
;; def=Protocol.fst(248,4-248,14); use=Protocol.fst(248,4-248,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (Protocol.modifies_r @x0
@x1
@x2
@x3
@x4)
(FStar.Monotonic.Heap.modifies (FStar.Set.union Prims.nat
(Protocol.connection_footprint @x1)
(MonotonicArray.array_footprint Protocol.byte
@x0
@x2))
@x3
@x4))
 

:pattern ((Protocol.modifies_r @x0
@x1
@x2
@x3
@x4))
:qid equation_Protocol.modifies_r))

:named equation_Protocol.modifies_r))
;;;;;;;;;;;;;;;;Equation for FStar.ST.st_pre
;;; Fact-ids: Name FStar.ST.st_pre; Namespace FStar.ST
(assert (! (= FStar.ST.st_pre
FStar.ST.gst_pre)
:named equation_FStar.ST.st_pre))
;;;;;;;;;;;;;;;;Equation for FStar.ST.gst_pre
;;; Fact-ids: Name FStar.ST.gst_pre; Namespace FStar.ST
(assert (! (= FStar.ST.gst_pre
(FStar.Pervasives.st_pre_h FStar.Monotonic.Heap.heap))
:named equation_FStar.ST.gst_pre))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.st_pre_h
;;; Fact-ids: Name FStar.Pervasives.st_pre_h; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(437,4-437,12); use=FStar.Pervasives.fsti(437,4-437,12)
(forall ((@x0 Term))
 (! (= (FStar.Pervasives.st_pre_h @x0)
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0))
 

:pattern ((FStar.Pervasives.st_pre_h @x0))
:qid equation_FStar.Pervasives.st_pre_h))

:named equation_FStar.Pervasives.st_pre_h))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! 
;; def=Prims.fst(286,16-286,45); use=Prims.fst(286,30-286,45)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x2)))
:qid Prims_pre_typing_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da))

:named Prims_pre_typing_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! 
;; def=Prims.fst(286,16-286,45); use=Prims.fst(286,30-286,45)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x1))
(and 
;; def=Prims.fst(286,16-286,45); use=Prims.fst(286,30-286,45)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x1)
(HasType (ApplyTT @x0
@x2)
Tm_type))
 

:pattern ((ApplyTT @x0
@x2))
:qid Prims_interpretation_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x1)))
:qid Prims_interpretation_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da))

:named Prims_interpretation_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Protocol.receive_aux_post; Namespace Protocol
(assert (! (Valid (ApplyTT __uu__PartialApp
Protocol.sent_bytes@tok))
:named @kick_partial_app_09d2656020e371bea4bd24f5fe33a2b3))
(push) ;; push{2

; Starting query at Protocol.fst(544,0-562,71)

(declare-fun label_20 () Bool)
(declare-fun label_19 () Bool)
(declare-fun label_18 () Bool)
(declare-fun label_17 () Bool)
(declare-fun label_16 () Bool)
(declare-fun label_15 () Bool)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)











(declare-fun Tm_refine_204bbc11789d77aef2f9c7584430b800 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.Pervasives.fsti(442,41-442,53); use=Protocol.fst(545,14-551,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_refine_204bbc11789d77aef2f9c7584430b800 @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type)
 

:pattern ((HasType (Tm_refine_204bbc11789d77aef2f9c7584430b800 @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
:qid refinement_kinding_Tm_refine_204bbc11789d77aef2f9c7584430b800))

:named refinement_kinding_Tm_refine_204bbc11789d77aef2f9c7584430b800))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Pervasives.fsti(442,41-442,53); use=Protocol.fst(545,14-551,33)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_204bbc11789d77aef2f9c7584430b800 @x2
@x3
@x4
@x5
@x6
@x7))
(and (HasTypeFuel @u0
@x1
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(554,14-554,40); use=Protocol.fst(551,6-551,8)
(Valid 
;; def=Protocol.fst(554,14-554,40); use=Protocol.fst(551,6-551,8)
(MonotonicArray.all_init_i_j Protocol.byte
@x2
(MonotonicArray.prefix Protocol.byte
@x3
@x4
@x2)
(BoxInt 0)
@x2)
)


;; def=Protocol.fst(555,14-555,47); use=Protocol.fst(551,6-551,8)
(Valid 
;; def=Protocol.fst(555,14-555,47); use=Protocol.fst(551,6-551,8)
(Protocol.fully_initialized_in Protocol.byte
@x2
(MonotonicArray.prefix Protocol.byte
@x3
@x4
@x2)
@x5)
)


;; def=Protocol.fst(556,14-556,36); use=Protocol.fst(551,6-551,8)
(Valid 
;; def=Protocol.fst(556,14-556,36); use=Protocol.fst(551,6-551,8)
(Protocol.live_connection @x5
@x6)
)


;; def=Protocol.fst(557,14-557,30); use=Protocol.fst(551,6-551,8)
(<= (BoxInt_proj_0 @x7)
(BoxInt_proj_0 (Protocol.ctr @x6
@x5)))


;; def=Protocol.fst(558,14-558,77); use=Protocol.fst(551,6-551,8)
(Valid 
;; def=Protocol.fst(558,14-558,77); use=Protocol.fst(551,6-551,8)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Protocol.sent_bytes@tok
(MonotonicArray.as_initialized_seq Protocol.byte
@x2
(MonotonicArray.prefix Protocol.byte
@x3
@x4
@x2)
@x5))
@x6)
@x7)
(Protocol.ctr @x6
@x5))
@x5)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_204bbc11789d77aef2f9c7584430b800 @x2
@x3
@x4
@x5
@x6
@x7)))
:qid refinement_interpretation_Tm_refine_204bbc11789d77aef2f9c7584430b800))

:named refinement_interpretation_Tm_refine_204bbc11789d77aef2f9c7584430b800))
;;;;;;;;;;;;;;;;haseq for Tm_refine_204bbc11789d77aef2f9c7584430b800
;;; Fact-ids: 
(assert (! 
;; def=FStar.Pervasives.fsti(442,41-442,53); use=Protocol.fst(545,14-551,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_204bbc11789d77aef2f9c7584430b800 @x0
@x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.hasEq FStar.Monotonic.Heap.heap)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_204bbc11789d77aef2f9c7584430b800 @x0
@x1
@x2
@x3
@x4
@x5))))
:qid haseqTm_refine_204bbc11789d77aef2f9c7584430b800))

:named haseqTm_refine_204bbc11789d77aef2f9c7584430b800))



(declare-fun Tm_abs_a74523321a268198438a985386615d4e (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_a74523321a268198438a985386615d4e
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(552,28-558,77); use=Protocol.fst(545,14-551,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_abs_a74523321a268198438a985386615d4e @x0
@x1
@x2
@x3
@x4)
Tm_arrow_c4185f52507383203d0d6335fd0332a8)
 

:pattern ((Tm_abs_a74523321a268198438a985386615d4e @x0
@x1
@x2
@x3
@x4))
:qid typing_Tm_abs_a74523321a268198438a985386615d4e))

:named typing_Tm_abs_a74523321a268198438a985386615d4e))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_a74523321a268198438a985386615d4e
;;; Fact-ids: 
(assert (! 
;; def=Protocol.fst(552,28-558,77); use=Protocol.fst(545,14-551,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (ApplyTT (Tm_abs_a74523321a268198438a985386615d4e @x1
@x2
@x3
@x4
@x5)
@x0)
(Prims.l_and (Prims.l_and (Prims.l_and (Prims.l_and (MonotonicArray.all_init_i_j Protocol.byte
@x1
(MonotonicArray.prefix Protocol.byte
@x2
@x3
@x1)
(BoxInt 0)
@x1)
(Protocol.fully_initialized_in Protocol.byte
@x1
(MonotonicArray.prefix Protocol.byte
@x2
@x3
@x1)
@x0))
(Protocol.live_connection @x0
@x4))
(Prims.b2t (Prims.op_LessThanOrEqual @x5
(Protocol.ctr @x4
@x0))))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Protocol.sent_bytes@tok
(MonotonicArray.as_initialized_seq Protocol.byte
@x1
(MonotonicArray.prefix Protocol.byte
@x2
@x3
@x1)
@x0))
@x4)
@x5)
(Protocol.ctr @x4
@x0))
@x0)))
 

:pattern ((ApplyTT (Tm_abs_a74523321a268198438a985386615d4e @x1
@x2
@x3
@x4
@x5)
@x0))
:qid interpretation_Tm_abs_a74523321a268198438a985386615d4e))

:named interpretation_Tm_abs_a74523321a268198438a985386615d4e))

; Encoding query formula : (forall (n: Prims.nat) (file: MonotonicArray.array Protocol.byte n).
;     (forall (c: Protocol.connection). Protocol.receiver c ==> Prims.hasEq Prims.nat) /\
;     (forall (c:
;         Protocol.connection
;           { Protocol.receiver c /\
;             FStar.Set.disjoint (Protocol.connection_footprint c)
;               (MonotonicArray.array_footprint file) })
;         (h_init: FStar.Monotonic.Heap.heap{Protocol.live_connection h_init c}).
;         (*  - Subtyping check failed
;   - Expected type Type0 got type Type0
; *)
;         forall (from: Prims.nat).
;           (*  - Subtyping check failed
;   - Expected type Prims.eqtype got type Type0
; *)
;           Prims.hasEq Prims.nat)) /\
; (forall (n: Prims.nat)
;     (file: MonotonicArray.array Protocol.byte n)
;     (c:
;     Protocol.connection
;       { Protocol.receiver c /\
;         FStar.Set.disjoint (Protocol.connection_footprint c) (MonotonicArray.array_footprint file) })
;     (h_init: FStar.Monotonic.Heap.heap{Protocol.live_connection h_init c})
;     (from: Prims.nat{from = Protocol.ctr c h_init})
;     (pos: Prims.nat{Protocol.fragment_size <= n - pos}).
;     (forall (h0: FStar.Monotonic.Heap.heap).
;         (*  - Could not prove post-condition
; *)
;         (Protocol.fragment_size <= n - pos ==> pos <= n) /\
;         (forall (any_result: pos: Prims.nat{Protocol.fragment_size <= n - pos}).
;             pos == any_result ==>
;             (forall (any_result: MonotonicArray.t Protocol.byte pos).
;                 MonotonicArray.prefix file pos == any_result ==>
;                 (Protocol.fragment_size <= n - pos ==> pos >= 0 /\ pos <= pos) /\
;                 (MonotonicArray.all_init_i_j (MonotonicArray.prefix file pos) 0 pos ==>
;                   Prims.auto_squash (FStar.ST.witnessed (MonotonicArray.mutable_pred (MonotonicArray.prefix
;                                 file
;                                 pos)))) /\
;                 (MonotonicArray.all_init_i_j (MonotonicArray.prefix file pos) 0 pos /\
;                   Protocol.fully_initialized_in (MonotonicArray.prefix file pos) h0 /\
;                   Protocol.live_connection h0 c ==>
;                   Prims.auto_squash (Protocol.live_connection h0 c)) /\
;                 (MonotonicArray.all_init_i_j (MonotonicArray.prefix file pos) 0 pos /\
;                   Protocol.fully_initialized_in (MonotonicArray.prefix file pos) h0 /\
;                   Protocol.live_connection h0 c /\ from <= Protocol.ctr c h0 ==>
;                   Prims.auto_squash (MonotonicArray.init_arr_in_heap (MonotonicArray.prefix file pos
;                         )
;                         h0) /\
;                   (forall (any_result: FStar.Monotonic.Heap.heap).
;                       h0 == any_result ==>
;                       (forall (any_result: FStar.Seq.Base.seq Protocol.byte).
;                           MonotonicArray.as_initialized_seq (MonotonicArray.prefix file pos) h0 ==
;                           any_result ==>
;                           Prims.auto_squash (Protocol.live_connection h0 c) /\
;                           (forall (any_result: FStar.Monotonic.Heap.heap).
;                               h0 == any_result ==>
;                               (forall (any_result: Prims.nat).
;                                   Protocol.ctr c h0 == any_result ==> from <= Protocol.ctr c h0)))))
;             ))) /\
;     (forall (any_result: FStar.ST.st_pre).
;         (fun h0 ->
;             MonotonicArray.all_init_i_j (MonotonicArray.prefix file pos) 0 pos /\
;             Protocol.fully_initialized_in (MonotonicArray.prefix file pos) h0 /\
;             Protocol.live_connection h0 c /\ from <= Protocol.ctr c h0 /\
;             Protocol.sent_bytes (MonotonicArray.as_initialized_seq (MonotonicArray.prefix file pos)
;                   h0)
;               c
;               from
;               (Protocol.ctr c h0)
;               h0) ==
;         any_result ==>
;         (forall (h0: FStar.Monotonic.Heap.heap)
;             (ropt: FStar.Pervasives.Native.option (r: Prims.nat{r <= n}))
;             (_: FStar.Monotonic.Heap.heap).
;             (Protocol.fragment_size <= n - pos ==> pos <= n) /\
;             (forall (any_result: pos: Prims.nat{Protocol.fragment_size <= n - pos}).
;                 pos == any_result ==>
;                 (forall (any_result: MonotonicArray.t Protocol.byte pos).
;                     MonotonicArray.prefix file pos == any_result ==>
;                     (Protocol.fragment_size <= n - pos ==> pos >= 0 /\ pos <= pos) /\
;                     (MonotonicArray.all_init_i_j (MonotonicArray.prefix file pos) 0 pos ==>
;                       Prims.auto_squash (FStar.ST.witnessed (MonotonicArray.mutable_pred (MonotonicArray.prefix
;                                     file
;                                     pos)))) /\
;                     (MonotonicArray.all_init_i_j (MonotonicArray.prefix file pos) 0 pos /\
;                       Protocol.fully_initialized_in (MonotonicArray.prefix file pos) h0 /\
;                       Protocol.live_connection h0 c ==>
;                       Prims.auto_squash (Protocol.live_connection h0 c)) /\
;                     (MonotonicArray.all_init_i_j (MonotonicArray.prefix file pos) 0 pos /\
;                       Protocol.fully_initialized_in (MonotonicArray.prefix file pos) h0 /\
;                       Protocol.live_connection h0 c /\ from <= Protocol.ctr c h0 ==>
;                       Prims.auto_squash (MonotonicArray.init_arr_in_heap (MonotonicArray.prefix file
;                                 pos)
;                             h0) /\
;                       (forall (any_result: FStar.Monotonic.Heap.heap).
;                           h0 == any_result ==>
;                           (forall (any_result: FStar.Seq.Base.seq Protocol.byte).
;                               MonotonicArray.as_initialized_seq (MonotonicArray.prefix file pos) h0 ==
;                               any_result ==>
;                               Prims.auto_squash (Protocol.live_connection h0 c) /\
;                               (forall (any_result: FStar.Monotonic.Heap.heap).
;                                   h0 == any_result ==>
;                                   (forall (any_result: Prims.nat).
;                                       Protocol.ctr c h0 == any_result ==> from <= Protocol.ctr c h0)
;                               ))))))) /\
;         (forall (h0: FStar.Monotonic.Heap.heap)
;             (ropt: FStar.Pervasives.Native.option (r: Prims.nat{r <= n}))
;             (h1:
;             _:
;             FStar.Monotonic.Heap.heap
;               { MonotonicArray.all_init_i_j (MonotonicArray.prefix file pos) 0 pos /\
;                 Protocol.fully_initialized_in (MonotonicArray.prefix file pos) h0 /\
;                 Protocol.live_connection h0 c /\ from <= Protocol.ctr c h0 /\
;                 Protocol.sent_bytes (MonotonicArray.as_initialized_seq (MonotonicArray.prefix file
;                           pos)
;                       h0)
;                   c
;                   from
;                   (Protocol.ctr c h0)
;                   h0 }).
;             (*  - Could not prove post-condition
; *)
;             (Protocol.receiver c /\
;               FStar.Set.disjoint (Protocol.connection_footprint c)
;                 (MonotonicArray.array_footprint file) ==>
;               Protocol.receiver c) /\
;             (Protocol.modifies_r c file h0 h1 /\ Protocol.live_connection h1 c ==>
;               MonotonicArray.all_init_i_j (MonotonicArray.prefix file pos) 0 pos /\
;               Protocol.fully_initialized_in (MonotonicArray.prefix file pos) h0 /\
;               Protocol.live_connection h0 c /\ from <= Protocol.ctr c h0 /\
;               Protocol.sent_bytes (MonotonicArray.as_initialized_seq (MonotonicArray.prefix file pos
;                     )
;                     h0)
;                 c
;                 from
;                 (Protocol.ctr c h0)
;                 h0 ==>
;               Protocol.live_connection h1 c))))


; Context: While encoding a query
; While typechecking the top-level declaration `val Protocol.receive_aux`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=Protocol.fst(544,0-562,71)
(and 
;; def=dummy(0,0-0,0); use=Protocol.fst(544,0-562,71)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
(MonotonicArray.array Protocol.byte
@x0)))

;; def=dummy(0,0-0,0); use=Protocol.fst(544,0-562,71)
(and 
;; def=dummy(0,0-0,0); use=Protocol.fst(545,14-551,33)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
Protocol.connection)

;; def=Protocol.fst(547,24-547,34); use=Protocol.fst(547,24-547,34)
(BoxBool_proj_0 (Protocol.receiver @x2))
)

;; def=Prims.fst(73,23-73,30); use=Protocol.fst(547,52-547,72)
(or label_1

;; def=Prims.fst(73,23-73,30); use=Protocol.fst(547,52-547,72)
(Valid 
;; def=Prims.fst(73,23-73,30); use=Protocol.fst(547,52-547,72)
(Prims.hasEq Prims.nat)
)
)
)
 
;;no pats
:qid @query.1))


;; def=dummy(0,0-0,0); use=Protocol.fst(544,0-562,71)
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
(Tm_refine_f3d030fd3c7708a629843ece19a805f3 @x0
@x1))
(HasType @x3
(Tm_refine_12e73119c459be812384fdc8e6c9733a @x2)))

;; def=dummy(0,0-0,0); use=Protocol.fst(545,14-551,33)
(forall ((@x4 Term))
 (! (implies (HasType @x4
Prims.nat)

;; def=Prims.fst(73,23-73,30); use=Protocol.fst(549,20-549,24)
(or label_2

;; def=Prims.fst(73,23-73,30); use=Protocol.fst(549,20-549,24)
(Valid 
;; def=Prims.fst(73,23-73,30); use=Protocol.fst(549,20-549,24)
(Prims.hasEq Prims.nat)
)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
)
)
 
;;no pats
:qid @query))


;; def=dummy(0,0-0,0); use=Protocol.fst(544,0-562,71)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
(MonotonicArray.array Protocol.byte
@x0))
(HasType @x2
(Tm_refine_f3d030fd3c7708a629843ece19a805f3 @x0
@x1))
(HasType @x3
(Tm_refine_12e73119c459be812384fdc8e6c9733a @x2))
(HasType @x4
(Tm_refine_9369c00496f340c518775121622f1d8d @x2
@x3))
(HasType @x5
(Tm_refine_cbf50e93edf9116e0fd7249b89712a6f @x0)))

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(545,14-551,33)
(and 
;; def=dummy(0,0-0,0); use=Protocol.fst(545,14-551,33)
(forall ((@x6 Term))
 (! (implies (HasType @x6
FStar.Monotonic.Heap.heap)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(545,14-551,33)
(and (implies 
;; def=Protocol.fst(550,19-550,43); use=Protocol.fst(545,14-551,33)
(<= (BoxInt_proj_0 (Protocol.fragment_size Dummy_value))
(BoxInt_proj_0 (Prims.op_Subtraction @x0
@x5)))


;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(553,40-553,43)
(or label_3

;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(545,14-551,33)
(<= (BoxInt_proj_0 @x5)
(BoxInt_proj_0 @x0))
)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(545,14-551,33)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(Tm_refine_cbf50e93edf9116e0fd7249b89712a6f @x0))

;; def=MonotonicArray.fsti(167,44-167,45); use=Protocol.fst(545,14-551,33)
(= @x5
@x7)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(545,14-551,33)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(MonotonicArray.t Protocol.byte
@x5))

;; def=Protocol.fst(553,18-553,43); use=Protocol.fst(545,14-551,33)
(= (MonotonicArray.prefix Protocol.byte
@x0
@x1
@x5)
@x8)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(545,14-551,33)
(and (implies 
;; def=Protocol.fst(550,19-550,43); use=Protocol.fst(545,14-551,33)
(<= (BoxInt_proj_0 (Protocol.fragment_size Dummy_value))
(BoxInt_proj_0 (Prims.op_Subtraction @x0
@x5)))


;; def=MonotonicArray.fsti(254,64-254,80); use=Protocol.fst(545,14-551,33)
(and 
;; def=MonotonicArray.fsti(254,64-254,70); use=Protocol.fst(554,37-554,40)
(or label_4

;; def=MonotonicArray.fsti(254,64-254,70); use=Protocol.fst(545,14-551,33)
(>= (BoxInt_proj_0 @x5)
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=MonotonicArray.fsti(254,74-254,80); use=Protocol.fst(554,37-554,40)
(or label_5

;; def=MonotonicArray.fsti(254,74-254,80); use=Protocol.fst(545,14-551,33)
(<= (BoxInt_proj_0 @x5)
(BoxInt_proj_0 @x5))
)
)
)
(implies 
;; def=Protocol.fst(554,14-554,40); use=Protocol.fst(545,14-551,33)
(Valid 
;; def=Protocol.fst(554,14-554,40); use=Protocol.fst(545,14-551,33)
(MonotonicArray.all_init_i_j Protocol.byte
@x5
(MonotonicArray.prefix Protocol.byte
@x0
@x1
@x5)
(BoxInt 0)
@x5)
)


;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(555,14-555,21)
(or label_6

;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(545,14-551,33)
(Valid 
;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(545,14-551,33)
(FStar.ST.witnessed (MonotonicArray.mutable_pred Protocol.byte
@x5
(MonotonicArray.prefix Protocol.byte
@x0
@x1
@x5)))
)
)
)
(implies 
;; def=Protocol.fst(554,14-556,36); use=Protocol.fst(545,14-551,33)
(and 
;; def=Protocol.fst(554,14-554,40); use=Protocol.fst(545,14-551,33)
(Valid 
;; def=Protocol.fst(554,14-554,40); use=Protocol.fst(545,14-551,33)
(MonotonicArray.all_init_i_j Protocol.byte
@x5
(MonotonicArray.prefix Protocol.byte
@x0
@x1
@x5)
(BoxInt 0)
@x5)
)


;; def=Protocol.fst(555,14-555,47); use=Protocol.fst(545,14-551,33)
(Valid 
;; def=Protocol.fst(555,14-555,47); use=Protocol.fst(545,14-551,33)
(Protocol.fully_initialized_in Protocol.byte
@x5
(MonotonicArray.prefix Protocol.byte
@x0
@x1
@x5)
@x6)
)


;; def=Protocol.fst(556,14-556,36); use=Protocol.fst(545,14-551,33)
(Valid 
;; def=Protocol.fst(556,14-556,36); use=Protocol.fst(545,14-551,33)
(Protocol.live_connection @x6
@x2)
)
)


;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(557,28-557,30)
(or label_7

;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(545,14-551,33)
(Valid 
;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(545,14-551,33)
(Protocol.live_connection @x6
@x2)
)
)
)
(implies 
;; def=Protocol.fst(554,14-557,30); use=Protocol.fst(545,14-551,33)
(and 
;; def=Protocol.fst(554,14-554,40); use=Protocol.fst(545,14-551,33)
(Valid 
;; def=Protocol.fst(554,14-554,40); use=Protocol.fst(545,14-551,33)
(MonotonicArray.all_init_i_j Protocol.byte
@x5
(MonotonicArray.prefix Protocol.byte
@x0
@x1
@x5)
(BoxInt 0)
@x5)
)


;; def=Protocol.fst(555,14-555,47); use=Protocol.fst(545,14-551,33)
(Valid 
;; def=Protocol.fst(555,14-555,47); use=Protocol.fst(545,14-551,33)
(Protocol.fully_initialized_in Protocol.byte
@x5
(MonotonicArray.prefix Protocol.byte
@x0
@x1
@x5)
@x6)
)


;; def=Protocol.fst(556,14-556,36); use=Protocol.fst(545,14-551,33)
(Valid 
;; def=Protocol.fst(556,14-556,36); use=Protocol.fst(545,14-551,33)
(Protocol.live_connection @x6
@x2)
)


;; def=Protocol.fst(557,14-557,30); use=Protocol.fst(545,14-551,33)
(<= (BoxInt_proj_0 @x4)
(BoxInt_proj_0 (Protocol.ctr @x2
@x6)))
)


;; def=Prims.fst(459,77-459,89); use=Protocol.fst(545,14-551,33)
(and 
;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(558,53-558,55)
(or label_8

;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(545,14-551,33)
(Valid 
;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(545,14-551,33)
(MonotonicArray.init_arr_in_heap Protocol.byte
@x5
(MonotonicArray.prefix Protocol.byte
@x0
@x1
@x5)
@x6)
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(545,14-551,33)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
FStar.Monotonic.Heap.heap)

;; def=MonotonicArray.fsti(283,35-283,36); use=Protocol.fst(545,14-551,33)
(= @x6
@x9)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(545,14-551,33)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(FStar.Seq.Base.seq Protocol.byte))

;; def=Protocol.fst(341,16-558,56); use=Protocol.fst(545,14-551,33)
(= (MonotonicArray.as_initialized_seq Protocol.byte
@x5
(MonotonicArray.prefix Protocol.byte
@x0
@x1
@x5)
@x6)
@x10)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(545,14-551,33)
(and 
;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(558,71-558,73)
(or label_9

;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(545,14-551,33)
(Valid 
;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(545,14-551,33)
(Protocol.live_connection @x6
@x2)
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(545,14-551,33)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(151,24-552,25); use=Protocol.fst(545,14-551,33)
(= @x6
@x11)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(545,14-551,33)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.nat)

;; def=Protocol.fst(341,57-558,74); use=Protocol.fst(545,14-551,33)
(= (Protocol.ctr @x2
@x6)
@x12)
)

;; def=Protocol.fst(341,65-341,75); use=Protocol.fst(558,64-558,74)
(or label_10

;; def=Protocol.fst(341,65-341,75); use=Protocol.fst(545,14-551,33)
(<= (BoxInt_proj_0 @x4)
(BoxInt_proj_0 (Protocol.ctr @x2
@x6)))
)
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query.5))


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(545,14-551,33)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
FStar.ST.st_pre)

;; def=FStar.ST.fst(75,20-75,23); use=Protocol.fst(545,14-551,33)
(= (Tm_abs_a74523321a268198438a985386615d4e @x5
@x0
@x1
@x2
@x4)
@x6)
)

;; def=dummy(0,0-0,0); use=Protocol.fst(545,14-551,33)
(and 
;; def=dummy(0,0-0,0); use=Protocol.fst(545,14-551,33)
(forall ((@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (and (HasType @x7
FStar.Monotonic.Heap.heap)
(HasType @x8
(FStar.Pervasives.Native.option (Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x0)))
(HasType @x9
FStar.Monotonic.Heap.heap))

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(545,14-551,33)
(and (implies 
;; def=Protocol.fst(550,19-550,43); use=Protocol.fst(545,14-551,33)
(<= (BoxInt_proj_0 (Protocol.fragment_size Dummy_value))
(BoxInt_proj_0 (Prims.op_Subtraction @x0
@x5)))


;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(553,40-553,43)
(or label_11

;; def=MonotonicArray.fsti(167,50-167,56); use=Protocol.fst(545,14-551,33)
(<= (BoxInt_proj_0 @x5)
(BoxInt_proj_0 @x0))
)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(545,14-551,33)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(Tm_refine_cbf50e93edf9116e0fd7249b89712a6f @x0))

;; def=MonotonicArray.fsti(167,44-167,45); use=Protocol.fst(545,14-551,33)
(= @x5
@x10)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(545,14-551,33)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(MonotonicArray.t Protocol.byte
@x5))

;; def=Protocol.fst(553,18-553,43); use=Protocol.fst(545,14-551,33)
(= (MonotonicArray.prefix Protocol.byte
@x0
@x1
@x5)
@x11)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(545,14-551,33)
(and (implies 
;; def=Protocol.fst(550,19-550,43); use=Protocol.fst(545,14-551,33)
(<= (BoxInt_proj_0 (Protocol.fragment_size Dummy_value))
(BoxInt_proj_0 (Prims.op_Subtraction @x0
@x5)))


;; def=MonotonicArray.fsti(254,64-254,80); use=Protocol.fst(545,14-551,33)
(and 
;; def=MonotonicArray.fsti(254,64-254,70); use=Protocol.fst(554,37-554,40)
(or label_12

;; def=MonotonicArray.fsti(254,64-254,70); use=Protocol.fst(545,14-551,33)
(>= (BoxInt_proj_0 @x5)
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=MonotonicArray.fsti(254,74-254,80); use=Protocol.fst(554,37-554,40)
(or label_13

;; def=MonotonicArray.fsti(254,74-254,80); use=Protocol.fst(545,14-551,33)
(<= (BoxInt_proj_0 @x5)
(BoxInt_proj_0 @x5))
)
)
)
(implies 
;; def=Protocol.fst(554,14-554,40); use=Protocol.fst(545,14-551,33)
(Valid 
;; def=Protocol.fst(554,14-554,40); use=Protocol.fst(545,14-551,33)
(MonotonicArray.all_init_i_j Protocol.byte
@x5
(MonotonicArray.prefix Protocol.byte
@x0
@x1
@x5)
(BoxInt 0)
@x5)
)


;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(555,14-555,21)
(or label_14

;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(545,14-551,33)
(Valid 
;; def=MonotonicArray.fsti(42,39-42,65); use=Protocol.fst(545,14-551,33)
(FStar.ST.witnessed (MonotonicArray.mutable_pred Protocol.byte
@x5
(MonotonicArray.prefix Protocol.byte
@x0
@x1
@x5)))
)
)
)
(implies 
;; def=Protocol.fst(554,14-556,36); use=Protocol.fst(545,14-551,33)
(and 
;; def=Protocol.fst(554,14-554,40); use=Protocol.fst(545,14-551,33)
(Valid 
;; def=Protocol.fst(554,14-554,40); use=Protocol.fst(545,14-551,33)
(MonotonicArray.all_init_i_j Protocol.byte
@x5
(MonotonicArray.prefix Protocol.byte
@x0
@x1
@x5)
(BoxInt 0)
@x5)
)


;; def=Protocol.fst(555,14-555,47); use=Protocol.fst(545,14-551,33)
(Valid 
;; def=Protocol.fst(555,14-555,47); use=Protocol.fst(545,14-551,33)
(Protocol.fully_initialized_in Protocol.byte
@x5
(MonotonicArray.prefix Protocol.byte
@x0
@x1
@x5)
@x7)
)


;; def=Protocol.fst(556,14-556,36); use=Protocol.fst(545,14-551,33)
(Valid 
;; def=Protocol.fst(556,14-556,36); use=Protocol.fst(545,14-551,33)
(Protocol.live_connection @x7
@x2)
)
)


;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(559,22-559,24)
(or label_15

;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(545,14-551,33)
(Valid 
;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(545,14-551,33)
(Protocol.live_connection @x7
@x2)
)
)
)
(implies 
;; def=Protocol.fst(554,14-557,30); use=Protocol.fst(545,14-551,33)
(and 
;; def=Protocol.fst(554,14-554,40); use=Protocol.fst(545,14-551,33)
(Valid 
;; def=Protocol.fst(554,14-554,40); use=Protocol.fst(545,14-551,33)
(MonotonicArray.all_init_i_j Protocol.byte
@x5
(MonotonicArray.prefix Protocol.byte
@x0
@x1
@x5)
(BoxInt 0)
@x5)
)


;; def=Protocol.fst(555,14-555,47); use=Protocol.fst(545,14-551,33)
(Valid 
;; def=Protocol.fst(555,14-555,47); use=Protocol.fst(545,14-551,33)
(Protocol.fully_initialized_in Protocol.byte
@x5
(MonotonicArray.prefix Protocol.byte
@x0
@x1
@x5)
@x7)
)


;; def=Protocol.fst(556,14-556,36); use=Protocol.fst(545,14-551,33)
(Valid 
;; def=Protocol.fst(556,14-556,36); use=Protocol.fst(545,14-551,33)
(Protocol.live_connection @x7
@x2)
)


;; def=Protocol.fst(557,14-557,30); use=Protocol.fst(545,14-551,33)
(<= (BoxInt_proj_0 @x4)
(BoxInt_proj_0 (Protocol.ctr @x2
@x7)))
)


;; def=Prims.fst(459,77-459,89); use=Protocol.fst(545,14-551,33)
(and 
;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(559,22-559,24)
(or label_16

;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(545,14-551,33)
(Valid 
;; def=MonotonicArray.fsti(283,42-283,64); use=Protocol.fst(545,14-551,33)
(MonotonicArray.init_arr_in_heap Protocol.byte
@x5
(MonotonicArray.prefix Protocol.byte
@x0
@x1
@x5)
@x7)
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(545,14-551,33)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
FStar.Monotonic.Heap.heap)

;; def=MonotonicArray.fsti(283,35-283,36); use=Protocol.fst(545,14-551,33)
(= @x7
@x12)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(545,14-551,33)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(FStar.Seq.Base.seq Protocol.byte))

;; def=Protocol.fst(341,16-558,56); use=Protocol.fst(545,14-551,33)
(= (MonotonicArray.as_initialized_seq Protocol.byte
@x5
(MonotonicArray.prefix Protocol.byte
@x0
@x1
@x5)
@x7)
@x13)
)

;; def=Prims.fst(459,77-459,89); use=Protocol.fst(545,14-551,33)
(and 
;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(559,22-559,24)
(or label_17

;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(545,14-551,33)
(Valid 
;; def=Protocol.fst(151,31-151,52); use=Protocol.fst(545,14-551,33)
(Protocol.live_connection @x7
@x2)
)
)


;; def=Prims.fst(451,66-451,102); use=Protocol.fst(545,14-551,33)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
FStar.Monotonic.Heap.heap)

;; def=Protocol.fst(151,24-559,24); use=Protocol.fst(545,14-551,33)
(= @x7
@x14)
)

;; def=Prims.fst(451,66-451,102); use=Protocol.fst(545,14-551,33)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
Prims.nat)

;; def=Protocol.fst(341,57-558,74); use=Protocol.fst(545,14-551,33)
(= (Protocol.ctr @x2
@x7)
@x15)
)

;; def=Protocol.fst(341,65-341,75); use=Protocol.fst(551,6-551,8)
(or label_18

;; def=Protocol.fst(341,65-341,75); use=Protocol.fst(545,14-551,33)
(<= (BoxInt_proj_0 @x4)
(BoxInt_proj_0 (Protocol.ctr @x2
@x7)))
)
)
 
;;no pats
:qid @query.19))
)
 
;;no pats
:qid @query.18))
)
)
 
;;no pats
:qid @query.17))
)
 
;;no pats
:qid @query.16))
)
))
)
 
;;no pats
:qid @query.15))
)
 
;;no pats
:qid @query.14))
)
)
 
;;no pats
:qid @query.13))


;; def=dummy(0,0-0,0); use=Protocol.fst(545,14-551,33)
(forall ((@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (and (HasType @x7
FStar.Monotonic.Heap.heap)
(HasType @x8
(FStar.Pervasives.Native.option (Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x0)))
(HasType @x9
(Tm_refine_204bbc11789d77aef2f9c7584430b800 @x5
@x0
@x1
@x7
@x2
@x4)))

;; def=Protocol.fst(547,11-561,41); use=Protocol.fst(545,14-551,33)
(and (implies 
;; def=Protocol.fst(547,24-547,98); use=Protocol.fst(545,14-551,33)
(and 
;; def=Protocol.fst(547,24-547,34); use=Protocol.fst(545,14-551,33)
(BoxBool_proj_0 (Protocol.receiver @x2))


;; def=Protocol.fst(547,38-547,98); use=Protocol.fst(545,14-551,33)
(Valid 
;; def=Protocol.fst(547,38-547,98); use=Protocol.fst(545,14-551,33)
(FStar.Set.disjoint Prims.nat
(Protocol.connection_footprint @x2)
(MonotonicArray.array_footprint Protocol.byte
@x0
@x1))
)
)


;; def=Protocol.fst(248,38-248,48); use=Protocol.fst(560,30-560,31)
(or label_19

;; def=Protocol.fst(248,38-248,48); use=Protocol.fst(545,14-551,33)
(BoxBool_proj_0 (Protocol.receiver @x2))
)
)
(implies (and 
;; def=Protocol.fst(560,19-560,42); use=Protocol.fst(545,14-551,33)
(Valid 
;; def=Protocol.fst(560,19-560,42); use=Protocol.fst(545,14-551,33)
(Protocol.modifies_r @x0
@x2
@x1
@x7
@x9)
)


;; def=Protocol.fst(561,19-561,41); use=Protocol.fst(545,14-551,33)
(Valid 
;; def=Protocol.fst(561,19-561,41); use=Protocol.fst(545,14-551,33)
(Protocol.live_connection @x9
@x2)
)


;; def=Protocol.fst(554,14-554,40); use=Protocol.fst(545,14-551,33)
(Valid 
;; def=Protocol.fst(554,14-554,40); use=Protocol.fst(545,14-551,33)
(MonotonicArray.all_init_i_j Protocol.byte
@x5
(MonotonicArray.prefix Protocol.byte
@x0
@x1
@x5)
(BoxInt 0)
@x5)
)


;; def=Protocol.fst(555,14-555,47); use=Protocol.fst(545,14-551,33)
(Valid 
;; def=Protocol.fst(555,14-555,47); use=Protocol.fst(545,14-551,33)
(Protocol.fully_initialized_in Protocol.byte
@x5
(MonotonicArray.prefix Protocol.byte
@x0
@x1
@x5)
@x7)
)


;; def=Protocol.fst(556,14-556,36); use=Protocol.fst(545,14-551,33)
(Valid 
;; def=Protocol.fst(556,14-556,36); use=Protocol.fst(545,14-551,33)
(Protocol.live_connection @x7
@x2)
)


;; def=Protocol.fst(557,14-557,30); use=Protocol.fst(545,14-551,33)
(<= (BoxInt_proj_0 @x4)
(BoxInt_proj_0 (Protocol.ctr @x2
@x7)))


;; def=Protocol.fst(558,14-558,77); use=Protocol.fst(545,14-551,33)
(Valid 
;; def=Protocol.fst(558,14-558,77); use=Protocol.fst(545,14-551,33)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Protocol.sent_bytes@tok
(MonotonicArray.as_initialized_seq Protocol.byte
@x5
(MonotonicArray.prefix Protocol.byte
@x0
@x1
@x5)
@x7))
@x2)
@x4)
(Protocol.ctr @x2
@x7))
@x7)
)
)

;; def=Protocol.fst(534,19-534,41); use=Protocol.fst(562,67-562,69)
(or label_20

;; def=Protocol.fst(534,19-534,41); use=Protocol.fst(545,14-551,33)
(Valid 
;; def=Protocol.fst(534,19-534,41); use=Protocol.fst(545,14-551,33)
(Protocol.live_connection @x9
@x2)
)
)
))
)
 
;;no pats
:qid @query.20))
)
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.4))
)
)
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_20")
(eval label_20)
(echo "label_19")
(eval label_19)
(echo "label_18")
(eval label_18)
(echo "label_17")
(eval label_17)
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Protocol.receive_aux, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, b2t_def, equation_ArrayUtils.init_at_seq, equation_MonotonicArray.array, equation_MonotonicArray.init_arr_in_heap, equation_MonotonicArray.init_arr_in_heap_i_j, equation_MonotonicArray.prefix, equation_Prims.eqtype, equation_Prims.nat, equation_Protocol.fully_initialized_in, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, int_inversion, int_typing, lemma_MonotonicArray.lemma_sub_preserves_array_mutable_flag, primitive_Prims.op_Addition, primitive_Prims.op_Subtraction, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_6f684e27d6af9965634108bcfe981953, refinement_interpretation_Tm_refine_cbf50e93edf9116e0fd7249b89712a6f, refinement_interpretation_Tm_refine_f984cba283a0017499e468d307a8fd1d, typing_Prims.int, typing_Protocol.byte, typing_Protocol.fragment_size
